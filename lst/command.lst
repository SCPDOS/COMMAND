     1                                  ;COMMAND.COM main file
     2                                  [map all ./lst/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  
     7                                  %include "./inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./inc/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;File/path length equates.
     8                              <1> MAX_FNAME_FCB   equ 8
     9                              <1> MAX_EXT_FCB     equ 3
    10                              <1> MAX_NAME_FCB    equ MAX_FNAME_FCB + MAX_EXT_FCB
    11                              <1> MAX_NAME_FCBZ   equ MAX_NAME_FCB + 1    ;Space for a null terminator
    12                              <1> ;Values below include the null terminator.
    13                              <1> MAX_FILE    equ 13  ;Maximum length of a filename (includes dot)
    14                              <1> MAX_DRIVE   equ 3   ;Maximum length of a drive string (X:<NUL>)
    15                              <1> MAX_FSPEC   equ 64  ;Maximum length of a path to a file (filespec)
    16                              <1> MAX_PATH    equ 67  ;Maximum length of a fully qualified pathspec
    17                              <1> ;MAX_PATH is X:\<string, maxlen 63 chars>,<null> so 67 chars total.
    18                              <1> ;Use this symbol to check the length of a filename after qualification.
    19                              <1> MAX_PSPEC   equ MAX_PATH - MAX_FILE - 1 ;54 bytes
    20                              <1> ;MAX_PSPEC is the max length of a path with space for a filename!
    21                              <1> ;Remember, filenames for us are just a string of, at most, 13 characters,
    22                              <1> ; which we always resolve into FCB format. Buffers need to make space for
    23                              <1> ; both the dot and terminating null
    24                              <1> ;------------------------------------------------------------------------;
    25                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    26                              <1> ; its file system structure. This is used to locate files and structures
    27                              <1> ; on the device itself and to translate file requests to cluster chains
    28                              <1> ; to LBAs to pass to the disk driver..
    29                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    30                              <1> ; drivers Initialise routine has been called.
    31                              <1> ;------------------------------------------------------------------------;
    32                              <1> struc dpb        ;Drive Parameter Block
    33                              <1> 
    34 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    35 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    36 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    37 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    38 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    39 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    40 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    41 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    42 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    43 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    44 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    45 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    46                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    47 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    48 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    49 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    50 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    51 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    52 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    53                              <1> 
    54                              <1> endstruc
    55                              <1> 
    56                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    57                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    60                              <1> ; All disk pathing requests go via the CDS for that drive.
    61                              <1> ; The default drive is the last accessed drive, this number is stored
    62                              <1> ; in the DOS data area.
    63                              <1> ; The CDS is stored as an array with the offset into the array being 
    64                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    65                              <1> ;
    66                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    67                              <1> ;------------------------------------------------------------------------;
    68                              <1> struc cds       ;Current Directory structure
    69 00000000 <res 43h>           <1>     .sCurrentPath        db MAX_PATH dup (?)    ;Current Directory Path String
    70 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    71 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    72 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    73 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    74 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    75 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    76                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    77                              <1> ; another, we save the number of chars to skip to that deep level).
    78                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    79                              <1> ; Only affects for SUBST drives, not JOIN
    80                              <1> ; Flags: Bit 15 set = Network drive
    81                              <1> ;        Bit 14 set = Physical drive
    82                              <1> ;        Bit 13 set = JOIN'ed drive
    83                              <1> ;        Bit 12 set = SUBST'ed drive
    84                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    85                              <1> endstruc
    86                              <1> ;CDS equates
    87                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    88                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    89                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    90                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    91                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    92                              <1> ;------------------------------------------------------------------------;
    93                              <1> ; The SFT is a way to allow applications to open file handles to files 
    94                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    95                              <1> ; under the first header, and then a second header will be linked to the 
    96                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    97                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    98                              <1> ; using the FCBS= command. Default FCBS=5.
    99                              <1> ;
   100                              <1> ; A file handle describes the file, and the location within the file that
   101                              <1> ; we are reading. The file handle can be manipulated without the file
   102                              <1> ; being in memory, thus allowing the user to access data without needing 
   103                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   104                              <1> ; accessing devices, by treating them as files with their drivers 
   105                              <1> ; responding and translating the manipulations of the file handle itself.
   106                              <1> ; Neither the driver nor the application should see or use the SFT for
   107                              <1> ; the handle, as it is subject to change (and will change when file 
   108                              <1> ; sharing provisions are included). The DOS will make requests to the 
   109                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   110                              <1> ; track of the information in the SFT entry for that handle. 
   111                              <1> ;
   112                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   113                              <1> ; can point to the same file. It all depends on what the applications 
   114                              <1> ; want to do with the File.
   115                              <1> ;
   116                              <1> ; !!!!IMPORTANT!!!!
   117                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   118                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   119                              <1> ;
   120                              <1> ;Each SFT may look like this:
   121                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   122                              <1> ;            |                |
   123                              <1> ;       wNumFiles*sft    wNumFiles*sft
   124                              <1> ;
   125                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   126                              <1> ; System FCBs.
   127                              <1> ;
   128                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   129                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   130                              <1> ;
   131                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   132                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   133                              <1> ;------------------------------------------------------------------------;
   134                              <1> struc sfth   ;System file table header
   135                              <1> ; This is the SFT header.
   136                              <1> ; This structure comes before the start of the first file in the array/table.
   137 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   138 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   139                              <1> endstruc
   140                              <1> 
   141                              <1> struc sft
   142                              <1> ;This is the file struc itself
   143 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   144 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   145 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   146 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   147 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   148 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   149 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   150 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   151 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   152 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   153 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   154 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   155 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   156 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   157 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   158 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   159 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   160 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   161 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   162                              <1> ;                           0 means no record
   163                              <1> endstruc
   164                              <1> ;Open Mode equates
   165                              <1> ;Access modes   Bits[2:0]
   166                              <1> openRdAcc   equ 0h
   167                              <1> openWrAcc   equ 1h
   168                              <1> openRWAcc   equ 2h
   169                              <1> ;Bit 3 reserved 0
   170                              <1> ;Sharing modes  Bits[6:4]
   171                              <1> openCompat      equ 0h  ;Deny all, compatibility mode
   172                              <1> openDenRWShr    equ 10h ;Deny all, explicity read/write
   173                              <1> openDenWrShr    equ 20h ;Deny writes
   174                              <1> openDenRdShr    equ 30h ;Deny reads
   175                              <1> openDenNoShr    equ 40h ;Don't deny anything!
   176                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   177                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   178                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   179                              <1> openNetFCBShr   equ 70h
   180                              <1> openNoInherit   equ 80h
   181                              <1> 
   182                              <1> ;Bits 8-12 reserved 0
   183                              <1> ;The next two are extended open mode bits! 
   184                              <1> ;Can be set
   185                              <1> openFailOnI24   equ 2000h   ;If set, automatically FAIL all Int 24h
   186                              <1> openFlushWrites equ 4000h   ;If set, commit after each write call.
   187                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   188                              <1> openSFTFCB      equ 8000h   ;If set, file is SFT-FCB.
   189                              <1> 
   190                              <1> ;Attribute Byte
   191                              <1> attrFileRO          equ 1h
   192                              <1> attrFileHidden      equ 2h
   193                              <1> attrFileSys         equ 4h
   194                              <1> attrFileVolLbl      equ 8h
   195                              <1> attrFileDir         equ 10h ;Directory entry
   196                              <1> attrFileArchive     equ 20h
   197                              <1> attrFileChar        equ 40h ;Reserved, never found in dir
   198                              <1> 
   199                              <1> ;Device Info word equates
   200                              <1> ;For a block device, bits [5:0] contain the drive number
   201                              <1> devCharConIn    equ 1h  ;If set, device is CON input
   202                              <1> devCharConOut   equ 2h  ;If set, device is CON output
   203                              <1> devCharNulDev   equ 4h  ;If set, device is NULL device
   204                              <1> devCharClkDev   equ 8h  ;If set, device is CLOCK device
   205                              <1> 
   206                              <1> devCharFastOut  equ 10h ;If set, device supports INT 29h
   207                              <1> devCharBinary   equ 20h ;If set, r/w char device in Binary mode
   208                              <1> devCharNotEOF   equ 40h ;If set, device not yet at end of file
   209                              <1> devDiskNoFlush  equ 40h ;Set if file is synchronised with hard store!
   210                              <1> devCharDev      equ 80h ;If set, it is a char device!
   211                              <1> 
   212                              <1> devDiskI24onFull    equ 100h    ;If set, Int 24h on disk full or disk EOF
   213                              <1> devCharNetSpool equ 800h    ;If set, device is a network spooler
   214                              <1> 
   215                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   216                              <1> devCharNamePipe equ 2000h   ;If set, device is a named pipe
   217                              <1> devDiskNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   218                              <1> devRedir        equ 8000h   ;If set, dev/file is redirected!
   219                              <1> 
   220                              <1> ;Extended open flags. For the var [wEOFlags]
   221                              <1> ;These are not related to the SFT but are used during an extended open
   222                              <1> ; call to keep track of whats going on and thus help build an SFT.
   223                              <1> eoInExtOpen     equ 0001h   ;Doing Extended Open
   224                              <1> eoFailI24       equ 0002h   ;If EO file hard fails, skip and fail Int 24h
   225                              <1> eoFileNoExist   equ 0004h   ;File doesnt exist
   226                              <1> 
   227                              <1> ;Can combine the third option with one of the first two options.
   228                              <1> ;The first two options cannot be combined.
   229                              <1> ; - If only create is selected, then we try to do a create new. If the 
   230                              <1> ;       file exists, this fails with a "File exists" error.
   231                              <1> ;       Acts like a normal create new call. (21/5Bh)
   232                              <1> ;
   233                              <1> ; - If only open is selected then we try to do an open. If the file doesn't
   234                              <1> ;       doesn't exist, this fails with a "File not found" error.
   235                              <1> ;       Acts like a normal open call. (21/3Dh)
   236                              <1> ;
   237                              <1> ; - If only truncate is selected then we try to do a create. If the file
   238                              <1> ;       doesn't exist, this fails a "File not found" error.
   239                              <1> ;       New behaviour.
   240                              <1> ;
   241                              <1> ; - If open and create are selected then we try and open the file. If 
   242                              <1> ;       the open fails due to the file not existing, we create a new file. 
   243                              <1> ;       New behaviour.
   244                              <1> ;
   245                              <1> ; - If truncate and create are selected then we try to truncate the file. 
   246                              <1> ;       If the file doesnt exist then we create a new file instead.
   247                              <1> ;       Acts like a normal create call. (21/3Ch)
   248                              <1> 
   249                              <1> eoActOpen       equ 01h ;Open the file. 
   250                              <1> eoActTruncate   equ 02h ;Truncate an existing file.
   251                              <1> eoActCreate     equ 10h ;Create a file if one doesnt exist.
   252                              <1> ;Extended Open Action Return 
   253                              <1> eoRetActOpen    equ 1   ;Open existing
   254                              <1> eoRetActCreate  equ 2   ;Create new and open
   255                              <1> eoRetActTruncate    equ 3    ;Recreate and open
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   258                              <1> ; to an internal buffer, and then copying it to the specified location
   259                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   260                              <1> ; another request for the same sector from the same device is made, so 
   261                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   262                              <1> ; size, selected according to the largest detected sector size during 
   263                              <1> ; the initial loadup.
   264                              <1> ;
   265                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   266                              <1> ;
   267                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   268                              <1> ;------------------------------------------------------------------------;
   269                              <1> 
   270                              <1> struc bufferHdr
   271 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   272                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   273 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   274 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   275 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   276 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   277 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   278 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   279 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   280                              <1>     .dataarea:             ;Points to the start of the data area
   281                              <1> endstruc
   282                              <1> ;Buffer Flag equates
   283                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   284                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   285                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   286                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   287                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   288                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   289                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   290                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   291                              <1> ;------------------------------------------------------------------------;
   292                              <1> ; Memory control block for each memory arena
   293                              <1> ;------------------------------------------------------------------------;
   294                              <1> struc mcb
   295 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   296 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   297 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   298                              <1>     ;The following byte is reserved outside of sysinit
   299 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   300 0000000E ????                <1>     .reserved   db 2 dup (?) 
   301                              <1>     .program:
   302                              <1> endstruc
   303                              <1> ;MCB equates
   304                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   305                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   306                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   307                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   308                              <1> mcbMarkCtn      equ "M"
   309                              <1> mcbMarkEnd      equ "Z"
   310                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   311                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   312                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   313                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   314                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   315                              <1> mcbSubIFS       equ "I" ;Unused for now
   316                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   317                              <1> mcbSubFCBS      equ "X" ;Unused for now
   318                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   319                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   320                              <1> mcbSubStacks    equ "S" ;Unused for now
   321                              <1> 
   322                              <1> 
   323                              <1> memFirstFit     equ 0   ;First free block goes to application
   324                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   325                              <1> memLastFit      equ 2   ;Last free block goes to application
   326                              <1> 
   327                              <1> ;Owner = Para aligned address => Owning application PSP
   328                              <1> ;...To consider...
   329                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   330                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   331                              <1> ;------------------------------------------------------------------------;
   332                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   333                              <1> ; following order, thus allowing for return values to be placed in the 
   334                              <1> ; registers by accessing the caller register stack frame.
   335                              <1> ;------------------------------------------------------------------------;
   336                              <1> struc callerFrame
   337 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   338 00000008 ????????????????    <1>     .rbx    dq ?    
   339 00000010 ????????????????    <1>     .rcx    dq ?
   340 00000018 ????????????????    <1>     .rdx    dq ?
   341 00000020 ????????????????    <1>     .rsi    dq ?
   342 00000028 ????????????????    <1>     .rdi    dq ?
   343 00000030 ????????????????    <1>     .rbp    dq ?
   344 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   345 00000040 ????????????????    <1>     .r9     dq ?
   346                              <1> ;Pushed by Processor when invoked via Interrupt
   347 00000048 ????????????????    <1>     .rip    dq ?
   348 00000050 ????????????????    <1>     .cs     dq ?
   349 00000058 ????????????????    <1>     .flags  dq ?
   350                              <1> endstruc
   351                              <1> 
   352                              <1> struc dpl
   353                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   354                              <1> ; server calls
   355 00000000 ????????????????    <1>     .rax    dq ?
   356 00000008 ????????????????    <1>     .rbx    dq ?
   357 00000010 ????????????????    <1>     .rcx    dq ?
   358 00000018 ????????????????    <1>     .rdx    dq ?
   359 00000020 ????????????????    <1>     .rsi    dq ?
   360 00000028 ????????????????    <1>     .rdi    dq ?
   361 00000030 ????????????????    <1>     .r8     dq ?
   362 00000038 ????????????????    <1>     .r9     dq ?
   363 00000040 ????????????????    <1>     .align  dq ?
   364 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   365 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   366                              <1> endstruc
   367                              <1> 
   368                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   369 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   370 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   371 00000010 ????????????????    <1>     .newSFTVal      dq ?
   372 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   373 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   374 00000028 ????????????????    <1>     .newLastdrive   dq ?
   375 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   376 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   377 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   378 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   379 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   380 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   381 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   382                              <1> endstruc
   383                              <1> 
   384                              <1> struc filename
   385                              <1> ;8.3 File name struct
   386 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   387 00000008 ??????              <1>     .fExt   db 3 dup (?)
   388                              <1> endstruc
   389                              <1> 
   390                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   391 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   392 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   393 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   394 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   395 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   396 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   397 00000016 ????                <1>     .fileTime   dw ?  ;File time
   398 00000018 ????                <1>     .fileDate   dw ?  ;File date
   399 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   400 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   401                              <1> endstruc
   402                              <1> 
   403                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   404                              <1> struc psp
   405 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   406 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   407 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   408 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   409 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   410 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   411 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   412                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   413                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   414                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   415                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   416                              <1> ; always used and jftSize.
   417                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   418 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   419 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   420 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   421 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   422 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   423 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   424 0000005B ??                  <1>                 db ?  ;Reserved byte
   425                              <1> ;The below are in the same place as in DOS.
   426                              <1>     .cmdLineArgPtr: ;Symbol for future use
   427 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   428 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   429                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   430 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   431 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   432                              <1> endstruc
   433                              <1> 
   434                              <1> struc clkStruc
   435 00000000 ????                <1>     .dateWord   dw ?
   436 00000002 ??                  <1>     .minutes    db ?
   437 00000003 ??                  <1>     .hours      db ?
   438 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   439 00000005 ??                  <1>     .seconds    db ?
   440                              <1> endstruc
   441                              <1> 
   442                              <1> 
   443                              <1> struc extCtryStruc
   444 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   445 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   446 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   447 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   448 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   449                              <1>                         ;0 = month day year hh:mm:ss
   450                              <1>                         ;1 = day month year hh:mm:ss
   451                              <1>                         ;2 = year month day hh:mm:ss
   452 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   453 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   454 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   455 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   456 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   457 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   458                              <1>                         ;0 = Symbol leads, without space
   459                              <1>                         ;1 = Symbol follows, without space
   460                              <1>                         ;2 = Symbol leads, one space
   461                              <1>                         ;3 = Symbol follows, one space
   462                              <1>                         ;4 = Symbol replace decimal separator
   463 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   464 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   465 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   466 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   467 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   468                              <1> endstruc
   469                              <1> 
   470                              <1> struc countryStruc
   471 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   472                              <1>                         ;0 = month day year hh:mm:ss
   473                              <1>                         ;1 = day month year hh:mm:ss
   474                              <1>                         ;2 = year month day hh:mm:ss
   475 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   476 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   477 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   478 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   479 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   480 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   481                              <1>                         ;0 = Symbol leads, without space
   482                              <1>                         ;1 = Symbol follows, without space
   483                              <1>                         ;2 = Symbol leads, one space
   484                              <1>                         ;3 = Symbol follows, one space
   485                              <1>                         ;4 = Symbol replace decimal separator
   486 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   487 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   488 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   489 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   490 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   491                              <1> endstruc
   492                              <1> 
   493                              <1> ;Critical Error AH bitfield equates
   494                              <1> critRead    equ 0h
   495                              <1> critWrite   equ 1h
   496                              <1> critDOS     equ 0h
   497                              <1> critFAT     equ 2h
   498                              <1> critDir     equ 4h
   499                              <1> critData    equ 6h
   500                              <1> critFailOK  equ 8h
   501                              <1> critRetryOK equ 10h
   502                              <1> critIgnorOK equ 20h
   503                              <1> critCharDev equ 80h
   504                              <1> 
   505                              <1> critIgnore  equ 0
   506                              <1> critRetry   equ 1
   507                              <1> critAbort   equ 2
   508                              <1> critFail    equ 3
   509                              <1> 
   510                              <1> ;MISC ASCII control chars
   511                              <1> NUL equ 00h ;^@         | ASCII Null
   512                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   513                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   514                              <1> BEL equ 07h ;^G         | ASCII Bell
   515                              <1> BSP equ 08h ;^H         | ASCII Backspace
   516                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   517                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   518                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   519                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   520                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   521                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   522                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   523                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   524                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   525                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   526                              <1> SPC equ 20h ;Printable  | ASCII Space
   527                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   528                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   529                              <1> 
   530                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   531                              <1> ;Extended Ascii Codes
   532                              <1> eF1     equ 3Bh ;F1 second byte
   533                              <1> eF2     equ 3Ch ;F2 second byte
   534                              <1> eF3     equ 3Dh ;F3 second byte
   535                              <1> eF4     equ 3Eh ;F4 second byte
   536                              <1> eF5     equ 3Fh ;F5 second byte
   537                              <1> eF6     equ 40h ;F6 second byte
   538                              <1> eF7     equ 41h ;F7 second byte
   539                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   540                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   541                              <1> eIns    equ 52h ;Insert second byte
   542                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   543                              <1> 
   544                              <1> ;Default Configuration for the system
   545                              <1> 
   546                              <1> buffersDefault  equ 30
   547                              <1> filesDefault    equ 20
   548                              <1> fcbsDefault     equ 4
   549                              <1> safeFcbsDeflt   equ 0
   550                              <1> lastDriveDeflt  equ 5   
   551                              <1> 
   552                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   553                              <1> ; then the char has this property.
   554                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   555                              <1> termChar    equ 2   ;Terminator char type
   556                              <1> sepChar     equ 4   ;Separator char type
   557                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./inc/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./inc/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./inc/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pLink      dq ?    ;Pointer to the previous batch block when CALLed
    30                              <1> ;    .pForBlk    dq ?    ;Pointer to the active FOR block
    31 0000000A ??                  <1>     .bStatFlg   db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 0000000B ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 0000000F ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 00000013 <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> struc forBlk
    47                              <1> ;forBlk.sListv is double null terminated at the end of the string
    48 00000000 ??                  <1>     .bListc     db ?    ;Number of elements in the list
    49 00000001 <res 82h>           <1>     .sListBlk   db cmdBufferL dup (?)   ;Null terminated entries of list.
    50 00000083 ??                  <1>     .bCmdWC     db ?    ;Set if the list entry has a wildcard
    51 00000084 ??                  <1>     .bArgNum    db ?    ;Number of the current argument
    52 00000085 ????????????????    <1>     .pLstCurr   dq ?    ;Ptr to current list element we are treating
    53 0000008D ????????????????    <1>     .pCmd       dq ?    ;Ptr to command string
    54 00000095 <res 82h>           <1>     .sCmdLine   db cmdBufferL dup (?)   ;Copy of cmdline to execute with %<var> 
    55 00000117 <res 43h>           <1>     .sNameBuf   db fullDirPathZL dup (?)    ;Used for building a search spec.
    56 0000015A <res 2Bh>           <1>     .sFFBuffer  db ffBlock_size dup (?) ;ffblock for searching list elements
    57 00000185 ??                  <1>     .bLpVar     db ?    ;Char of loop var
    58                              <1> endstruc
    59                              <1> 
    60                              <1> 
    61                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    62 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    63 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    64 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    65 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    66 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    67                              <1> endstruc
    68                              <1> 
    69                              <1> struc execProg  ;For use with EXEC-ing a child task
    70 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    71 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    72 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    73 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    74                              <1> endstruc
    75                              <1> 
    76                              <1> ;Directory attribute equates
    77                              <1>     dirReadOnly     equ 01h
    78                              <1>     dirHidden       equ 02h
    79                              <1>     dirSystem       equ 04h
    80                              <1>     dirVolumeID     equ 08h
    81                              <1>     dirDirectory    equ 10h
    82                              <1>     dirArchive      equ 20h
    83                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    84                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    85                              <1>     ;If any of the three bits are set, then ALL three bits are set
    86                              <1>     ; in addition to whatever the user passed to search for.
    87                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    88                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  
    13                                      ORG 100h    ;Allows for r8 to be used as a base pointer for section reloc
    14                                  Segment cmd align=1 valign=1
    15                                  %define currSegVBase 0
    16                                  %include "./dat/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3                              <1> pPSP:       ;Internal pointer to the task PSP
     4 00000000 E9EC4D0000          <1>     jmp cmdLdrE
     5 00000005 CCCCCC              <1>     db 3 dup (0CCh) ;So add three bytes to turn it into a variable after use
     6 00000008 1400                <1> numHdls     dw 20   ;Get number of handles permitted
     7 0000000A 5C                  <1> pathSep     db "\"  ;Default path sep
     8 0000000B 2F                  <1> switchChar  db "/"  ;Default switch char
     9 0000000C FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    10 0000000D 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    11 0000000E FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    12                              <1> ;Volume static FCB for filesearches
    13                              <1> volFcb:
    14                              <1>     istruc exFcb
    15 00000010 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    16 00000011 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    17 00000017 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    18 00000018 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    19 00000020 3F3F3F              <1>     at exFcb.fileext,   db "???"
    20 00000023 00000000            <1>     at exFcb.curBlock,  dd 0
    21 00000027 00<rep 15h>         <1>     iend 
    22                              <1> 
    23                              <1> ;The string for Y/N prompt for batch ^C handler
    24 0000003C 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    25                              <1> ;==============================================================================
    26                              <1> ; Do not split the blocks below!
    27                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    28                              <1> cmdLineStatePtr:
    29 00000040 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 00000041 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 00000043 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 00000045 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 00000046 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 00000047 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 00000049 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> ;------------------------------------------------------------------------------
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 0000004B 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 0000004C 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 0000004D 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 0000004E 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 0000004F 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 00000050 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 00000051 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    17                                  %include "./dat/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000052 03444952            <1>     db 3, "DIR"
     8 00000056 B01A                <1>     dw dir - startLbl
     9                              <1> 
    10 00000058 024344              <1>     db 2, "CD"
    11 0000005B CA1F                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000005D 054348444952        <1>     db 5, "CHDIR"
    14 00000063 CA1F                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000065 024D44              <1>     db 2, "MD"
    17 00000068 4520                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000006A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000070 4520                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000072 025244              <1>     db 2, "RD"
    23 00000075 8E20                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000077 05524D444952        <1>     db 5, "RMDIR"
    26 0000007D 8E20                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000007F 0344454C            <1>     db 3, "DEL"
    29 00000083 AF29                <1>     dw erase - startLbl
    30                              <1> 
    31 00000085 054552415345        <1>     db 5, "ERASE"
    32 0000008B AF29                <1>     dw erase - startLbl
    33                              <1> 
    34 0000008D 0444415445          <1>     db 4, "DATE"
    35 00000092 C82A                <1>     dw date - startLbl
    36                              <1> 
    37 00000094 0454494D45          <1>     db 4, "TIME"
    38 00000099 762C                <1>     dw time - startLbl
    39                              <1> 
    40 0000009B 04434F5059          <1>     db 4, "COPY"
    41 000000A0 D820                <1>     dw copy - startLbl
    42                              <1> 
    43 000000A2 0443545459          <1>     db 4, "CTTY"
    44 000000A7 A32D                <1>     dw ctty - startLbl
    45                              <1> 
    46 000000A9 03434C53            <1>     db 3, "CLS"
    47 000000AD 4A2E                <1>     dw cls - startLbl
    48                              <1> 
    49 000000AF 05425245414B        <1>     db 5, "BREAK"
    50 000000B5 C32E                <1>     dw break - startLbl
    51                              <1> 
    52 000000B7 06564552494659      <1>     db 6, "VERIFY"
    53 000000BE 442F                <1>     dw verify - startLbl
    54                              <1> 
    55 000000C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000000C7 C12F                <1>     dw rename - startLbl
    57                              <1> 
    58 000000C9 0352454E            <1>     db 3, "REN"
    59 000000CD C12F                <1>     dw rename - startLbl
    60                              <1>     
    61 000000CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000000D8 F831                <1>     dw truename - startLbl
    63                              <1> 
    64 000000DA 03564552            <1>     db 3, "VER"
    65 000000DE 3833                <1>     dw version - startLbl
    66                              <1> 
    67 000000E0 03564F4C            <1>     db 3, "VOL"
    68 000000E4 7E32                <1>     dw volume - startLbl
    69                              <1> 
    70 000000E6 034D454D            <1>     db 3, "MEM"
    71 000000EA 7C33                <1>     dw memory - startLbl
    72                              <1> 
    73 000000EC 0445584954          <1>     db 4, "EXIT"
    74 000000F1 7E35                <1>     dw exit - startLbl
    75                              <1> 
    76 000000F3 0454595045          <1>     db 4, "TYPE"
    77 000000F8 CB34                <1>     dw type - startLbl
    78                              <1> 
    79 000000FA 0450415448          <1>     db 4, "PATH"
    80 000000FF C738                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000101 03534554            <1>     db 3, "SET"
    83 00000105 A837                <1>     dw set - startLbl
    84                              <1> 
    85 00000107 0650524F4D5054      <1>     db 6, "PROMPT"
    86 0000010E A639                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000110 044543484F          <1>     db 4, "ECHO"
    90 00000115 163A                <1>     dw echo - startLbl
    91                              <1> 
    92 00000117 055041555345        <1>     db 5, "PAUSE"
    93 0000011D C53A                <1>     dw pauza - startLbl
    94                              <1> 
    95 0000011F 0352454D            <1>     db 3, "REM"
    96 00000123 0E3B                <1>     dw remark - startLbl
    97                              <1> 
    98 00000125 04474F544F          <1>     db 4, "GOTO"
    99 0000012A 5C3B                <1>     dw goto - startLbl
   100                              <1> 
   101 0000012C 055348494654        <1>     db 5, "SHIFT"
   102 00000132 0F3B                <1>     dw shift - startLbl
   103                              <1> 
   104 00000134 024946              <1>     db 2, "IF"
   105 00000137 983C                <1>     dw ifCmd - startLbl
   106                              <1> 
   107 00000139 03464F52            <1>     db 3, "FOR"
   108 0000013D A83D                <1>     dw forCmd - startLbl
   109                              <1> 
   110 0000013F 0443414C4C          <1>     db 4, "CALL"
   111 00000144 B940                <1>     dw callCmd - startLbl
   112                              <1> ;-----------------------------
   113 00000146 FF                  <1>     db -1   ;End of table
   114                              <1> 
   115                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   116                              <1> pTbl:
   117 00000147 42                  <1>     db "B", 
   118 00000148 3842                <1>     dw putPipeInPrompt - pTbl     ;Pipe char
   119 0000014A 44                  <1>     db "D", 
   120 0000014B 2843                <1>     dw printFmtDate - pTbl        ;Current date
   121 0000014D 45                  <1>     db "E", 
   122 0000014E 2C42                <1>     dw putEscInPrompt - pTbl      ;ANSI Escape char
   123 00000150 47                  <1>     db "G", 
   124 00000151 3C42                <1>     dw putGTinPrompt - pTbl       ;Greater than char
   125 00000153 48                  <1>     db "H", 
   126 00000154 4442                <1>     dw putBSPinPrompt - pTbl      ;Backspace
   127 00000156 4C                  <1>     db "L", 
   128 00000157 4042                <1>     dw putLTinPrompt - pTbl       ;Less than char
   129 00000159 4E                  <1>     db "N", 
   130 0000015A 5D42                <1>     dw putDriveInPrompt - pTbl    ;Current drive letter
   131 0000015C 50                  <1>     db "P", 
   132 0000015D 6B42                <1>     dw putCWDInPrompt - pTbl      ;Current drive and path
   133 0000015F 51                  <1>     db "Q", 
   134 00000160 3442                <1>     dw putEquInPrompt - pTbl      ;Equals char
   135 00000162 54                  <1>     db "T", 
   136 00000163 BF42                <1>     dw printFmtTime - pTbl        ;Current time in hh:mm:ss.hh fmt
   137 00000165 56                  <1>     db "V", 
   138 00000166 FE41                <1>     dw putVersionInPrompt - pTbl  ;DOS version number
   139 00000168 5F                  <1>     db "_", 
   140 00000169 EF41                <1>     dw printCRLF - pTbl           ;CRLF pair
   141 0000016B 24                  <1>     db "$", 
   142 0000016C 3042                <1>     dw putMoneyInPrompt - pTbl    ;Dollar sign
   143                              <1> pTblL equ $ - pTbl
    18                                  %include "./dat/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000016E 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000171 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000176 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000017F 696C65206D69737369- <1>
     4 00000188 6E670D0A24          <1>
     5 0000018D 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000196 6469736B2077697468- <1>
     5 0000019F 206261746368206669- <1>
     5 000001A8 6C65                <1>
     6 000001AA 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000001B3 737320616E79206B65- <1>
     6 000001BC 79207768656E207265- <1>
     6 000001C5 6164790D0A24        <1>
     7 000001CB 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000001D4 746520626174636820- <1>
     7 000001DD 6A6F622028592F4E29- <1>
     7 000001E6 3F2024              <1>
     8 000001E9 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000001F2 6E64206F722066696C- <1>
     8 000001FB 65206E616D650D0A24  <1>
     9 00000204 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 0000020D 2066696C65206E616D- <1>
     9 00000216 65206F7220          <1>
    10 0000021B 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000224 666F756E640D0A24    <1>
    11 0000022C 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000235 656E74206469736B20- <1>
    11 0000023E 73706163650D0A24    <1>
    12 00000246 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 0000024F 7669726F6E6D656E74- <1>
    12 00000258 2073706163650D0A24  <1>
    13 00000261 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000026A 74696F6E206572726F- <1>
    13 00000273 720D0A24            <1>
    14 00000277 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000280 6F7420626520636F70- <1>
    14 00000289 696564206F6E746F20- <1>
    14 00000292 697473656C660D0A24  <1>
    15 0000029B 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000002A4 662064657374696E61- <1>
    15 000002AD 74696F6E206C6F7374- <1>
    15 000002B6 206265666F72652063- <1>
    15 000002BF 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000002C5 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000002CE 636F706965640D0A24  <1>
    18 000002D7 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000002E0 68206D656D6F727920- <1>
    18 000002E9 666F7220434F50590D- <1>
    18 000002F2 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000002F4 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 000002FD 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 000002FE 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000307 65650D0A24          <1>
    23 0000030C 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000315 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 0000031E 726976652073706563- <1>
    25 00000327 696669636174696F6E- <1>
    25 00000330 0D0A24              <1>
    26 00000333 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 0000033C 6B6579207768656E20- <1>
    26 00000345 7265616479202E202E- <1>
    26 0000034E 202E2024            <1>
    27 00000352 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 0000035B 6172616D657465720D- <1>
    27 00000364 0A24                <1>
    28                              <1> 
    29 00000366 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 0000036F 576564546875467269- <1>
    29 00000378 536174              <1>
    30 0000037B 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000384 206461746524        <1>
    31 0000038A 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000393 6174652069732024    <1>
    32 0000039B 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 000003A4 657720646174652024  <1>
    33 000003AD 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 000003B6 293A2024            <1>
    34 000003BA 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 000003C3 293A2024            <1>
    35 000003C7 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 000003D0 293A2024            <1>
    36 000003D4 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 000003DD 2074696D6524        <1>
    37 000003E3 43757272656E742074- <1> curTime db  "Current time is $"
    37 000003EC 696D652069732024    <1>
    38 000003F4 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 000003FD 65772074696D653A20- <1>
    38 00000406 24                  <1>
    39                              <1> 
    40 00000407 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000410 7572652028592F4E29- <1>
    40 00000419 3F2024              <1>
    41                              <1> 
    42 0000041C 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000425 56657273696F6E2024  <1>
    43                              <1> 
    44 0000042E 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000437 6E2064726976652024  <1>
    45 00000440 2069732024          <1> volOk   db " is $"
    46 00000445 20686173206E6F206C- <1> volNo   db " has no label$"
    46 0000044E 6162656C24          <1>
    47                              <1> 
    48 00000453 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 0000045C 69726563746F72790D- <1>
    48 00000465 0A24                <1>
    49 00000467 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000470 206372656174652064- <1>
    49 00000479 69726563746F72790D- <1>
    49 00000482 0A24                <1>
    50 00000484 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 0000048D 6174682C206E6F7420- <1>
    50 00000496 6469726563746F7279- <1>
    50 0000049F 2C0D0A              <1>
    51 000004A2 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 000004AB 6F7279206E6F742065- <1>
    51 000004B4 6D7074790D0A24      <1>
    52 000004BB 204469726563746F72- <1> dirMain db " Directory of  $"
    52 000004C4 79206F66202024      <1>
    53 000004CB 4E6F20506174682024  <1> noPath  db "No Path $"
    54 000004D4 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 000004DD 6E6965640D0A24      <1>
    55 000004E4 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 000004ED 72697665206973206E- <1>
    55 000004F6 6F206C6F6E67657220- <1>
    55 000004FF 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000505 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 0000050E 65766963650D0A24    <1>
    58 00000516 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 0000051F 20666F756E640D0A24  <1>
    59 00000528 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000531 726F720D0A24        <1>
    60 00000537 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000540 6F74206265206E6573- <1>
    60 00000549 7465640D0A24        <1>
    61 0000054F 464F5200            <1> forStr  db "FOR",0
    62 00000553 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    62 0000055C 6174652066696C6520- <1>
    62 00000565 6572726F7220647572- <1>
    62 0000056E 696E6720706970650D- <1>
    62 00000577 0A24                <1>
    63 00000579 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    63 00000582 2062696E6172792072- <1>
    63 0000058B 656164732066726F6D- <1>
    63 00000594 206120646576696365- <1>
    63 0000059D 0D0A24              <1>
    64 000005A0 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    65 000005A6 4F464600            <1> offStr  db "OFF",0
    66 000005AA 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    67 000005AF 4F4E00              <1> onStr   db "ON",0
    68 000005B2 425245414B20697320- <1> breakIs db "BREAK is $"
    68 000005BB 24                  <1>
    69 000005BC 564552494659206973- <1> verifyIs    db "VERIFY is $"
    69 000005C5 2024                <1>
    70 000005C7 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    71 000005D0 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    71 000005D9 617468206F72206669- <1>
    71 000005E2 6C65206E616D650D0A- <1>
    71 000005EB 24                  <1>
    72 000005EC 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    72 000005F5 756D626572206F6620- <1>
    72 000005FE 706172616D65746572- <1>
    72 00000607 730D0A24            <1>
    73 0000060B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    73 00000614 74696E6720746F2064- <1>
    73 0000061D 6576696365          <1>
    74 00000622 08200800            <1> backSpace   db BSP," ",BSP,NUL
    75 00000626 50726F6772616D2074- <1> noMemMsg    db "Program too big to fit in memory",CR,LF,"$"
    75 0000062F 6F6F2062696720746F- <1>
    75 00000638 2066697420696E206D- <1>
    75 00000641 656D6F72790D0A24    <1>
    76 00000649 4E4F5400            <1> notString   db "NOT",0
    77 0000064D 4552524F524C455645- <1> errlvlStr   db "ERRORLEVEL",0
    77 00000656 4C00                <1>
    78 00000658 455849535400        <1> existStr    db "EXIST",0
    79 0000065E 494E00              <1> inStr       db "IN",0
    80 00000661 444F00              <1> doStr       db "DO",0
    81 00000664 2800                <1> listOpenStr db "(",0
    82 00000666 2900                <1> listClosStr db ")",0
    83                              <1> 
    84 00000668 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    84 00000671 20202020202020546F- <1>
    84 0000067A 74616C207379737465- <1>
    84 00000683 6D206D656D6F72793A- <1>
    84 0000068C 2024                <1>
    85 0000068E 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    85 00000697 20202020202020204D- <1>
    85 000006A0 656D6F727920757365- <1>
    85 000006A9 6420627920444F533A- <1>
    85 000006B2 2024                <1>
    86 000006B4 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    86 000006BD 656D6F727920757365- <1>
    86 000006C6 64206279206170706C- <1>
    86 000006CF 69636174696F6E733A- <1>
    86 000006D8 2024                <1>
    87 000006DA 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    87 000006E3 656D6F727920726573- <1>
    87 000006EC 657276656420627920- <1>
    87 000006F5 68617264776172653A- <1>
    87 000006FE 2024                <1>
    88 00000700 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    88 00000709 202020202020202020- <1>
    88 00000712 2020202020204D656D- <1>
    88 0000071B 6F727920667265653A- <1>
    88 00000724 2024                <1>
    89 00000726 20627974657324      <1> memByte db " bytes$"
    90 0000072D 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    90 00000736 6F7420417373657274- <1>
    90 0000073F 61696E20444F532045- <1>
    90 00000748 6E74727920506F696E- <1>
    90 00000751 7424                <1>
    91 00000753 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    91 0000075C 416C6C6F636174696F- <1>
    91 00000765 6E204572726F7224    <1>
    92 0000076D 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    92 00000776 4572726F7224        <1>
    93 0000077C 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    93 00000785 68616C74656424      <1>
    94                              <1> 
    95 0000078C 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    95 00000795 206372656174652070- <1>
    95 0000079E 6970650D0A          <1>
    96                              <1> pipeErrMsgL equ $ - pipeErrMsg
    97 000007A3 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    97 000007AC 6F6E206572726F720D- <1>
    97 000007B5 0A                  <1>
    98                              <1> redirErrMsgL   equ $ - redirErrMsg
    99                              <1> 
   100 000007B6 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
   101 000007BA 20                  <1> fourSpc  db SPC
   102 000007BB 20202024            <1> threeSpc db SPC, SPC, SPC,"$"
   103                              <1> 
   104 000007BF 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   104 000007C8 696679204F4E206F72- <1>
   104 000007D1 204F46460D0A24      <1>
   105                              <1> 
   106 000007D8 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
   107 000007E0 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   108                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   109                              <1> ; handles and reopen this device. Defaults to CON
   110 000007E9 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   111 000007F2 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   111 000007FB 45432E42415400      <1>
   112                              <1> autoSpecL equ $ - autoSpec
   113 00000802 504154483D00        <1> pathEVar    db "PATH=",0
   114 00000808 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   115 00000811 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   115 0000081A 4F4D00              <1>
   116                              <1> 
   117                              <1> ;Int 24h strings
   118                              <1> errMsgPtrTbl:
   119 0000081D 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   120 0000081F 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   121 00000821 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   122 00000823 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   123 00000825 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   124 00000827 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   125 00000829 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   126 0000082B 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   127 0000082D 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   128 0000082F 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   129 00000831 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   130 00000833 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   131 00000835 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   132 00000837 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   133 00000839 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   134 0000083B F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   135 0000083D 2901                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   136 0000083F 3A01                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   137                              <1> errorMsgTbl:
   138 00000841 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   138 0000084A 63746563742024      <1>
   139 00000851 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   139 0000085A 6E69742024          <1>
   140 0000085F 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   140 00000868 2024                <1>
   141 0000086A 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   141 00000873 6F6D6D616E642024    <1>
   142 0000087B 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   143 00000881 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   143 0000088A 73742024            <1>
   144 0000088E 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   145 00000894 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   145 0000089D 656469612024        <1>
   146 000008A3 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   146 000008AC 7420466F756E642024  <1>
   147 000008B5 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   147 000008BE 7065722024          <1>
   148 000008C3 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   148 000008CC 6C742024            <1>
   149 000008D0 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   149 000008D9 742024              <1>
   150 000008DC 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   150 000008E5 61696C7572652024    <1>
   151 000008ED 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   151 000008F6 696F6C6174696F6E20- <1>
   151 000008FF 24                  <1>
   152 00000900 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   152 00000909 6174696F6E2024      <1>
   153                              <1> ;Driver Error F / DOS Error 022h
   154 00000910 496E76616C69642044- <1> .F: db "Invalid Disk Change",CR,LF,"Please Insert disk "    
   154 00000919 69736B204368616E67- <1>
   154 00000922 650D0A506C65617365- <1>
   154 0000092B 20496E736572742064- <1>
   154 00000934 69736B20            <1>
   155 00000938 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   155 00000941 2020                <1>
   156 00000943 0D0A24              <1>         db CR,LF,"$"
   157                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   158 00000946 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   158 0000094F 696C61626C652024    <1>
   159 00000957 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   159 00000960 756666657220657272- <1>
   159 00000969 6F722024            <1>
   160                              <1> 
   161                              <1> ;Anything above this is a generic network error.
   162 0000096D 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   162 00000976 6574776F726B204572- <1>
   162 0000097F 726F722024          <1>
   163                              <1> 
   164                              <1> ;Rest of the Int 24h error messages go here
   165 00000984 64726976652024      <1> drvMsg      db "drive $"
   166 0000098B 6572726F7220726561- <1> readMsg     db "error reading $"
   166 00000994 64696E672024        <1>
   167 0000099A 6572726F7220777269- <1> writeMsg    db "error writing $"
   167 000009A3 74696E672024        <1>
   168 000009A9 41626F727424        <1> abortMsg    db "Abort$" 
   169 000009AF 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   170 000009B6 526574727924        <1> retryMsg    db "Retry$"
   171 000009BC 4661696C24          <1> failMsg     db "Fail$"
   172 000009C1 2C2024              <1> betweenMsg  db ", $"
   173 000009C4 3F2024              <1> endMsg      db "? $"
   174 000009C7 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    19                                  %include "./src/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1> ;Now resize the allocation
     4 000009CB 488D1D(50060000)    <1>     lea rbx, endOfAlloc
     5 000009D2 4C29C3              <1>     sub rbx, r8 ;Get # of bytes for COMMAND.COM and stack
     6 000009D5 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
     7 000009DB C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000009DE B8004A0000          <1>     mov eax, 4A00h ;Realloc
     9 000009E3 CD21                <1>     int 21h
    10 000009E5 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    11 000009E7 7435                <1>     jz commandMain
    12 000009E9 E8370A0000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    13                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    14 000009EE F605(1A000000)04    <1>     test byte [statFlg1], inSingle
    15 000009F5 0F85B0000000        <1>     jnz commandMain.goSingle 
    16                              <1>     ;Only enter here if we are autoexec :)
    17 000009FB C605(C4010000)0F    <1>     mov byte [cLineBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    18 00000A02 488D35E9FDFFFF      <1>     lea rsi, autoSpec
    19 00000A09 488D3D(C5010000)    <1>     lea rdi, cLineBuffer + 2
    20 00000A10 E8263B0000          <1>     call strcpy
    21 00000A15 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    22 00000A19 E984000000          <1>     jmp commandMain.batProceed
    23                              <1> commandMain:
    24 00000A1E 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset internal stack pointer pos
    25 00000A25 E8FB090000          <1>     call getSetMainState
    26                              <1> .inputMain:         ;Only reset once per line!
    27 00000A2A F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    28 00000A31 0F85472B0000        <1>     jnz exit
    29 00000A37 E8F1380000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    30 00000A3C B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    31 00000A41 CD21                <1>     int 21h
    32 00000A43 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    33 00000A48 BA01000000          <1>     mov edx, 1      ;Start new print job
    34 00000A4D CD21                <1>     int 21h
    35                              <1> .inputGetAgain:
    36 00000A4F E8573B0000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    37                              <1> .inputGetCmdlineAgain:
    38 00000A54 F605(74000000)FF    <1>     test byte [forFlg], -1  ;If we are in a FOR loop, proceed with for
    39 00000A5B 0F85AB340000        <1>     jne forProceed
    40 00000A61 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    41 00000A68 0F85DB0C0000        <1>     jnz batNextLine
    42 00000A6E C605(73000000)00    <1>     mov byte [callFlg], 0   ;If we need to get input from cmdline, no more call!
    43 00000A75 E841380000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    44 00000A7A 488D15(41010000)    <1>     lea rdx, inBuffer
    45 00000A81 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    46 00000A86 CD21                <1>     int 21h
    47                              <1> ;Copy over the input text
    48 00000A88 488D35(41010000)    <1>     lea rsi, inBuffer       ;Preserve what was input
    49 00000A8F 488D3D(C3010000)    <1>     lea rdi, cLineBuffer
    50 00000A96 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    51 00000A9B F3A4                <1>     rep movsb
    52                              <1> .batProceedCrlf:
    53 00000A9D E894380000          <1>     call printCRLF      ;Note we have accepted input
    54                              <1> .batProceed:            ;Jump here to copy the batch input line 
    55                              <1> ;First check we had something typed in of length greater than 0
    56 00000AA2 803D(C4010000)00    <1>     cmp byte [cLineBuffer + 1], 0  ;Check input length valid
    57 00000AA9 74A9                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    58                              <1> .goSingle:
    59 00000AAB E87A000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    60                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    61 00000AB0 488D35(47020000)    <1>     lea rsi, cmdBuffer + 2
    62 00000AB7 E8BD3A0000          <1>     call skipDelimiters
    63 00000ABC 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    64 00000ABF 748E                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    65 00000AC1 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    66 00000AC4 0F8407040000        <1>     je hardSynErr
    67                              <1> .pipeLoop:
    68 00000ACA 4C8B052FF5FFFF      <1>     mov r8, qword [pPSP]  ;Point back to home segment
    69 00000AD1 E8AE000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    70                              <1>     ;ZF here indicates if we are at the end of the command or nots
    71 00000AD6 E888350000          <1>     call forPrintCmd        ;Print cmd if in a FOR loop. Flag preserved.
    72 00000ADB E889070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    73 00000AE0 E8F8000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    74 00000AE5 E8943D0000          <1>     call setDTA             ;Set the DTA back to us before we proceed!
    75 00000AEA E866020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    76                              <1> .okRet:                     ;Normal return point for processing
    77 00000AEF E87A050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    78 00000AF4 F60545F5FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    79 00000AFB 0F8429FFFFFF        <1>     jz .inputMain
    80                              <1>     ;Now we pull the commandline forwards. 
    81 00000B01 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    82 00000B06 488D3D(47020000)    <1>     lea rdi, cmdBuffer + 2
    83 00000B0D 4889F1              <1>     mov rcx, rsi
    84 00000B10 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    85 00000B13 280D(46020000)      <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    86 00000B19 8A0D(46020000)      <1>     mov cl, byte [cmdBuffer + 1]
    87 00000B1F FFC1                <1>     inc ecx     ;One more for the terminating char
    88 00000B21 F3A4                <1>     rep movsb   ;Move the chars over    
    89 00000B23 E8723A0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    90 00000B28 EBA0                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    91                              <1> 
    92                              <1> makeCmdBuffer:
    93                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    94                              <1> ; copy buffer. Called only once in a cycle.
    95                              <1> ;Throughout: CL has char count, CH has quote count
    96 00000B2A 488D35(C5010000)    <1>     lea rsi, [cLineBuffer + 2]    ;Goto copy buffer + 2
    97 00000B31 31C9                <1>     xor ecx, ecx
    98 00000B33 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    99                              <1> .countQuotes:
   100 00000B36 AC                  <1>     lodsb
   101 00000B37 3C22                <1>     cmp al, '"'
   102 00000B39 7507                <1>     jne .notQuoteToCount
   103 00000B3B FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   104 00000B3D E9F4FFFFFF          <1>     jmp .countQuotes
   105                              <1> .notQuoteToCount:
   106 00000B42 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   107 00000B44 75F0                <1>     jne .countQuotes
   108 00000B46 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   109 00000B49 488D3D(47020000)    <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   110                              <1> .getChar:
   111 00000B50 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   112 00000B51 3C22                <1>     cmp al, '"'     ;Is char a quote?
   113 00000B53 750E                <1>     jne .notQuote
   114 00000B55 FECD                <1>     dec ch          ;We have a quote, now decrement
   115 00000B57 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   116                              <1> .searchForClosingQuote:
   117                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   118 00000B59 AA                  <1>     stosb   ;Store char and inc rdi
   119 00000B5A FEC1                <1>     inc cl
   120 00000B5C AC                  <1>     lodsb   ;Get next char
   121 00000B5D 3C22                <1>     cmp al, '"'
   122 00000B5F 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   123 00000B61 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   124                              <1> .notQuote:
   125 00000B63 E8A0060000          <1>     call peelRedir      ;Intervene redir if needed
   126 00000B68 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   127 00000B6A 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   128 00000B6C EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   129                              <1> .pipeHandle:
   130                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   131 00000B6E 0F845D030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   132                              <1> .notRedir:
   133 00000B74 AA                  <1>     stosb       ;Store char and advance rdi
   134 00000B75 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   135 00000B77 7404                <1>     je .exit
   136 00000B79 FEC1                <1>     inc cl      ;Increment char count
   137 00000B7B EBD3                <1>     jmp short .getChar    ;If not, get next char
   138                              <1> .exit:
   139 00000B7D 880D(46020000)      <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   140                              <1>     return
    13                              <2> %%_ret:
    14 00000B83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> makeCmdString:
   143                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   144                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   145                              <1> ; Copies into the psp.
   146                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   147 00000B84 488D35(47020000)    <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   148 00000B8B 31C9                <1>     xor ecx, ecx
   149 00000B8D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   150                              <1> .countQuotes:
   151 00000B90 AC                  <1>     lodsb
   152 00000B91 3C22                <1>     cmp al, '"'
   153 00000B93 7507                <1>     jne .notQuoteToCount
   154 00000B95 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   155 00000B97 E9F4FFFFFF          <1>     jmp .countQuotes
   156                              <1> .notQuoteToCount:
   157 00000B9C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   158 00000B9E 75F0                <1>     jne .countQuotes
   159 00000BA0 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   160 00000BA3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   161                              <1> .getChar:
   162 00000BAA AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   163 00000BAB 3C22                <1>     cmp al, '"'     ;Is char a quote?
   164 00000BAD 750E                <1>     jne .notQuote
   165 00000BAF FECD                <1>     dec ch          ;We have a quote, now decrement
   166 00000BB1 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   167                              <1> .searchForClosingQuote:
   168                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   169 00000BB3 AA                  <1>     stosb   ;Store char and inc rdi
   170 00000BB4 FEC1                <1>     inc cl
   171 00000BB6 AC                  <1>     lodsb   ;Get next char
   172 00000BB7 3C22                <1>     cmp al, '"'
   173 00000BB9 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   174 00000BBB FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   175                              <1> .notQuote:
   176 00000BBD 3C7C                <1>     cmp al, "|"
   177 00000BBF 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   178 00000BC1 B00D                <1>     mov al, CR          ;Store the pipe char
   179 00000BC3 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   180                              <1> .notPipe:
   181 00000BC6 AA                  <1>     stosb       ;Store char and advance rdi
   182 00000BC7 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   183 00000BC9 7404                <1>     je .exit
   184 00000BCB FEC1                <1>     inc cl      ;Increment char count
   185 00000BCD EBDB                <1>     jmp short .getChar    ;If not, get next char
   186                              <1> .exit:
   187 00000BCF 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   188 00000BD2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   189 00000BD9 803E0D              <1>     cmp byte [rsi], CR  
   190                              <1>     return
    13                              <2> %%_ret:
    14 00000BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> analyseCmdline:
   193                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   194                              <1> ; processes the command name into the FCB.  
   195 00000BDD C605(16030000)00    <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   196                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   197 00000BE4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   198 00000BEB 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   199 00000BEE 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   200 00000BF2 8A0513F4FFFF        <1>     mov al, byte [switchChar]
   201 00000BF8 F2AE                <1>     repne scasb                     ;Scan for the switch char
   202 00000BFA 7506                <1>     jne .noSwitchFnd
   203 00000BFC F6154FF4FFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   204                              <1> .noSwitchFnd:
   205 00000C02 E872390000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   206 00000C07 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   207                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C0A 74(DC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   208 00000C0C 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   209                              <1> .plp:
   210 00000C0F 488D3D(E6000000)    <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   211 00000C16 B801290000          <1>     mov eax, 2901h
   212 00000C1B CD21                <1>     int 21h
   213 00000C1D 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   214 00000C1F 0F8423010000        <1>     je .exitBadDrv
   215                              <1> .trailingDotLp:
   216                              <1> ;Reverse along trailing dots!
   217 00000C25 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   218 00000C29 7505                <1>     jne .noTrailingDots
   219 00000C2B 48FFCE              <1>     dec rsi
   220 00000C2E EBF5                <1>     jmp short .trailingDotLp
   221                              <1> .noTrailingDots:
   222 00000C30 8A05D4F3FFFF        <1>     mov al, byte [pathSep]  
   223 00000C36 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   224 00000C38 7525                <1>     jne .notPs
   225 00000C3A 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   226 00000C3D AC                  <1>     lodsb   ;Get this char
   227 00000C3E 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   228 00000C41 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   229 00000C43 7217                <1>     jb .delimfnd    ;Also a delimiter
   230 00000C45 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   231 00000C47 7413                <1>     je .delimfnd
   232 00000C49 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   233 00000C4B 740F                <1>     je .delimfnd
   234 00000C4D 3C2E                <1>     cmp al, byte "."
   235 00000C4F 740B                <1>     je .delimfnd
   236 00000C51 3C22                <1>     cmp al, byte '"'
   237 00000C53 7407                <1>     je .delimfnd
   238 00000C55 E82D390000          <1>     call isALdelimiter  ;Is this a delim char?
   239 00000C5A 75B3                <1>     jne .plp            ;If not, we loop again
   240                              <1> .delimfnd:
   241 00000C5C 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   242                              <1> .notPs:
   243                              <1> ;Now we have reached the end of the command, rsi points to the first char
   244                              <1> ; after the command, whether a delimiter or not.
   245 00000C5F 4889F1              <1>     mov rcx, rsi
   246 00000C62 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   247 00000C65 0F84D5000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   248 00000C6B 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   249 00000C6E 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   250 00000C75 F3A4                <1>     rep movsb
   251 00000C77 30C0                <1>     xor al, al
   252 00000C79 AA                  <1>     stosb   ;Store a terminating null
   253 00000C7A 4887DE              <1>     xchg rbx, rsi
   254                              <1> ;Now we build FCBs for the arguments!
   255 00000C7D 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   256 00000C84 E8AE000000          <1>     call .skipAndCheckCR
   257 00000C89 745B                <1>     je .setupCmdVars
   258 00000C8B C605B9F3FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   259 00000C92 4889F0              <1>     mov rax, rsi
   260 00000C95 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   261 00000C98 8805AEF3FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   262 00000C9E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   263 00000CA2 B801290000          <1>     mov eax, 2901h
   264 00000CA7 CD21                <1>     int 21h
   265 00000CA9 88059EF3FFFF        <1>     mov byte [arg1FCBret], al
   266                              <1> .skipArg:
   267 00000CAF AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   268 00000CB0 3C0D                <1>     cmp al, CR
   269 00000CB2 7432                <1>     je .setupCmdVars
   270 00000CB4 E8CE380000          <1>     call isALdelimiter
   271 00000CB9 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   272 00000CBB E877000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   273 00000CC0 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   274 00000CC2 C60585F3FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   275 00000CC9 4889F0              <1>     mov rax, rsi            
   276 00000CCC 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   277 00000CCF 88057AF3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   278 00000CD5 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000CD9 B801290000          <1>     mov eax, 2901h
   280 00000CDE CD21                <1>     int 21h
   281 00000CE0 88056AF3FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .setupCmdVars:
   283                              <1> ;Before returning, we copy the command name to cmdName 
   284 00000CE6 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   285 00000CED E83E390000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   286 00000CF2 E85D380000          <1>     call strlen ;Get the length of the null terminated final path componant
   287 00000CF7 807F013A            <1>     cmp byte [rdi + 1], ":"
   288 00000CFB 7515                <1>     jne .noDrivePath
   289 00000CFD 8A0507F3FFFF        <1>     mov al, byte [pathSep]
   290 00000D03 384702              <1>     cmp byte [rdi + 2], al
   291 00000D06 740A                <1>     je .noDrivePath
   292                              <1>     ;Here if the filename is an FCB name A:12345678.9AB<NUL> (15 chars)
   293 00000D08 81F90F000000        <1>     cmp ecx, 15
   294 00000D0E 7730                <1>     ja .exitBad
   295 00000D10 EB08                <1>     jmp short .proceedCp
   296                              <1> .noDrivePath:
   297                              <1> ;Normal paths come here
   298 00000D12 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   299 00000D18 7726                <1>     ja .exitBad     ;Return error
   300                              <1> .proceedCp:
   301 00000D1A 4889FE              <1>     mov rsi, rdi
   302 00000D1D 488D3D(16030000)    <1>     lea rdi, cmdName
   303 00000D24 FFC9                <1>     dec ecx ;Minus the terminating null
   304 00000D26 880F                <1>     mov byte [rdi], cl ;Store the length here
   305 00000D28 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   306                              <1> .cpCmdName:
   307 00000D2B AC                  <1>     lodsb
   308 00000D2C E82D380000          <1>     call ucChar ;Uppercase the char
   309 00000D31 AA                  <1>     stosb
   310 00000D32 FFC9                <1>     dec ecx
   311 00000D34 75F5                <1>     jnz .cpCmdName
   312                              <1>     return
    13                              <2> %%_ret:
    14 00000D36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   313                              <1> .skipAndCheckCR:
   314                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   315 00000D37 E83D380000          <1>     call skipDelimiters ;Go to the next char in the input line
   316 00000D3C 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   317                              <1>     return
    13                              <2> %%_ret:
    14 00000D3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> .exitBad:
   319 00000D40 C605(16030000)FF    <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   320                              <1>     return
    13                              <2> %%_ret:
    14 00000D47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   321                              <1> .exitBadDrv:
   322 00000D48 C605(16030000)FE    <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   323 00000D4F E81A0D0000          <1>     call badDriveError
   324                              <1>     return
    13                              <2> %%_ret:
    14 00000D54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> doCommandLine:
   327                              <1>     ;The following check accounts for the end of a piped command
   328 00000D55 803D(16030000)00    <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   329 00000D5C 0F846F010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   330 00000D62 803D(16030000)FF    <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   331 00000D69 0F84380D0000        <1>     je badCmdError
   332 00000D6F 803D(16030000)FE    <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   333                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D76 74(54)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00000D78 488D35(C7020000)    <1>     lea rsi, cmdPathSpec
   335 00000D7F 0FB71D(C7020000)    <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   336 00000D86 80FF3A              <1>     cmp bh, ":"
   337 00000D89 7520                <1>     jne .noDriveSpecified
   338 00000D8B 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   339 00000D8D E8CC370000          <1>     call ucChar     ;Uppercase al
   340 00000D92 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   341                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   342 00000D94 803D(16030000)02    <1>     cmp byte [cmdName], 2
   343 00000D9B 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   344 00000D9D 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   345 00000D9F E886370000          <1>     call setDrive
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DA4 74(54)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00000DA6 E9C30C0000          <1>     jmp badDriveError
   348                              <1> .noDriveSpecified:
   349                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   350 00000DAB 488D1D(45020000)    <1>     lea rbx, cmdBuffer       ;Take your buffer
   351 00000DB2 488D35(16030000)    <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   352 00000DB9 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   353 00000DBE BAFFFF0000          <1>     mov edx, 0FFFFh
   354 00000DC3 B5FF                <1>     mov ch, -1
   355 00000DC5 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   356 00000DC7 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   357 00000DCC BAFFFF0000          <1>     mov edx, 0FFFFh
   358 00000DD1 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   359 00000DD3 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   360                              <1>             ;        al = 0  if the command should be executed as usual
   361 00000DD5 84C0                <1>     test al, al
   362 00000DD7 7444                <1>     jz .executeInternal
   363                              <1>     ;Here we execute externally and return to the prompt
   364                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   365 00000DD9 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   366 00000DE0 488D35(16030000)    <1>     lea rsi, cmdName        
   367 00000DE7 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   368 00000DEC BAFFFF0000          <1>     mov edx, 0FFFFh
   369 00000DF1 B5FF                <1>     mov ch, -1
   370 00000DF3 CD2F                <1>     int 2Fh
   371 00000DF5 803D(16030000)00    <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   372                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000DFC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000DFE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   373                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   374                              <1>     ; is an external command that is in the CD or in the PATH.
   375                              <1>     ;Should not be used for this purpose but it is here...
   376 00000DFF E8D7050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   377 00000E04 488D35(16030000)    <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   378 00000E0B AC                  <1>     lodsb                   ;Get the name length
   379 00000E0C 0FB6C8              <1>     movzx ecx, al
   380 00000E0F 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   381 00000E16 F3A4                <1>     rep movsb   
   382 00000E18 31C0                <1>     xor eax, eax
   383 00000E1A AA                  <1>     stosb   ;Store null terminator
   384 00000E1B EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   385                              <1> .executeInternal:
   386 00000E1D E8B9050000          <1>     call pullCommandline    ;Now pull the tail down
   387 00000E22 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   388 00000E29 E826370000          <1>     call strlen ;Get the length of the input command
   389 00000E2E FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   390 00000E30 380D(16030000)      <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   391 00000E36 0F8561270000        <1>     jne launchChild     ;If not, a path was specified, exit!
   392                              <1> .executeInternal2:
   393                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   394 00000E3C 488D1D0FF2FFFF      <1>     lea rbx, functionTable
   395                              <1> .nextEntry:
   396 00000E43 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   397 00000E46 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   398 00000E49 0F844E270000        <1>     je launchChild      ;If so, check externally now
   399 00000E4F 380D(16030000)      <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   400 00000E55 7534                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   401                              <1>     ;Here they have the same length so lets see if the name is the same
   402 00000E57 56                  <1>     push rsi
   403                              <1>     ;ecx has the length to compare
   404 00000E58 51                  <1>     push rcx
   405 00000E59 488D7301            <1>     lea rsi, qword [rbx + 1]
   406 00000E5D 488D3D(17030000)    <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   407 00000E64 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   408 00000E66 59                  <1>     pop rcx
   409 00000E67 5E                  <1>     pop rsi
   410 00000E68 7521                <1>     jne .gotoNextEntry
   411                              <1>     ;Here it was found both strings are equal.
   412 00000E6A 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   413 00000E6F 480FB71F            <1>     movzx rbx, word [rdi]
   414 00000E73 488D3D86F1FFFF      <1>     lea rdi, startLbl
   415 00000E7A 4801FB              <1>     add rbx, rdi
   416 00000E7D FFD3                <1>     call rbx        ;Call the internal function!
   417                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   418                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   419                              <1> ;No need for the below because the retcode is 
   420                              <1> ; zeroed when we it from DOS.
   421                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   422                              <1> ;    mov byte [returnCode], 0 
   423                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   424                              <1>     ;jmp short appRet    ;Now once we are done, goto appRet!
   425                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   426                              <1> 
   427                              <1> ;This new exit preserves the retcode, and now allows for internal
   428                              <1> ; commands to implement retcodes which we don't use for now.
   429                              <1> ;I doubt we need to reset the stackptr as to get here, the stack has to
   430                              <1> ; have been balanced which means when we pop, we go back to okRet anyway...
   431 00000E7F 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
   432 00000E86 E964FCFFFF          <1>     jmp commandMain.okRet   
   433                              <1> .gotoNextEntry:
   434 00000E8B 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   435 00000E92 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   436 00000E95 EBAC                <1>     jmp short .nextEntry
   437                              <1> 
   438                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   439                              <1> ;Can depend on RSP here because DOS stack bug fixed.
   440 00000E97 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr anyway.
   441                              <1> ;Start by resetting our PSP vectors (and IVT copies) in the event 
   442                              <1> ; they got mangled.
   443 00000E9E E8223A0000          <1>     call resetIDTentries
   444 00000EA3 E8F1390000          <1>     call resetNation    ;Reset switchchar and nation if exernal cmd fired!
   445 00000EA8 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, sets to 0 for internal commands
   446 00000EAD CD21                <1>     int 21h
   447 00000EAF 668905(00000000)    <1>     mov word [returnCode], ax
   448 00000EB6 84E4                <1>     test ah, ah     ;Regular exit
   449 00000EB8 0F8431FCFFFF        <1>     jz commandMain.okRet
   450 00000EBE 80FC03              <1>     cmp ah, 3       ;TSR exit
   451 00000EC1 0F8428FCFFFF        <1>     je commandMain.okRet
   452                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   453                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   454                              <1>     ; as we always close the COMMAND.COM instance at this point.
   455 00000EC7 E83F000000          <1>     call cleanupRedirs
   456 00000ECC E94DFBFFFF          <1>     jmp commandMain
   457                              <1> 
   458                              <1> hardSynErr:
   459                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   460 00000ED1 E8740B0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   461 00000ED6 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   462                              <1> redirFailure:
   463 00000EDB 488D15C1F8FFFF      <1>     lea rdx, redirErrMsg
   464 00000EE2 B913000000          <1>     mov ecx, redirErrMsgL
   465 00000EE7 EB0C                <1>     jmp short redirPipeFailureCommon
   466                              <1> pipeFailure:
   467 00000EE9 488D159CF8FFFF      <1>     lea rdx, pipeErrMsg
   468 00000EF0 B917000000          <1>     mov ecx, pipeErrMsgL
   469                              <1> redirPipeFailureCommon:
   470                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   471                              <1> ;This routine tries to close whatever handles are not -1 and delete
   472                              <1> ; pipe files if the pipe count is not 0.
   473                              <1> ;It resets all variables and jumps to reset the stack!
   474 00000EF5 B800400000          <1>     mov eax, 4000h  ;Write handle
   475 00000EFA BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   476 00000EFF CD21                <1>     int 21h
   477                              <1> .noPrint:
   478 00000F01 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   479 00000F06 E913FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   480                              <1> 
   481                              <1> cleanupRedirs:
   482                              <1> ;Cleans all active redirections, returning to the saved state.
   483                              <1> ;Deletes any pipe files, leaves any redir out files.
   484                              <1> ;Resets the internal vars
   485 00000F0B 0FB70535F1FFFF      <1>     movzx eax, word [redirSTDIN]
   486 00000F12 0FB71528F1FFFF      <1>     movzx edx, word [pipeSTDIN]
   487 00000F19 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   488 00000F1B E8CC000000          <1>     call .closeAndReplace
   489 00000F20 0FB70522F1FFFF      <1>     movzx eax, word [redirSTDOUT]
   490 00000F27 0FB71515F1FFFF      <1>     movzx edx, word [pipeSTDOUT]
   491 00000F2E FFC3                <1>     inc ebx         ;Select STDOUT for closing
   492 00000F30 E8B7000000          <1>     call .closeAndReplace
   493 00000F35 66C70507F1FFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   494 00000F3E 0FB71D02F1FFFF      <1>     movzx ebx, word [redirSTDIN]
   495 00000F45 E892000000          <1>     call .closeHandle
   496                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   497 00000F4A 66C705F4F0FFFFFFFF  <1>     mov word [redirSTDIN], -1
   498 00000F53 0FB71DEFF0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   499 00000F5A E87D000000          <1>     call .closeHandle
   500 00000F5F 66C705E1F0FFFFFFFF  <1>     mov word [redirSTDOUT], -1
   501 00000F68 0FB71DD2F0FFFF      <1>     movzx ebx, word [pipeSTDIN]
   502 00000F6F E868000000          <1>     call .closeHandle
   503 00000F74 66C705C4F0FFFFFFFF  <1>     mov word [pipeSTDIN], -1
   504 00000F7D 0FB71DBFF0FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   505 00000F84 E853000000          <1>     call .closeHandle
   506 00000F89 66C705B1F0FFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   507 00000F92 C605A7F0FFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   508 00000F99 488D15(C2030000)    <1>     lea rdx, qword [pipe1Filespec]
   509 00000FA0 803A00              <1>     cmp byte [rdx], 0
   510 00000FA3 7407                <1>     jz .checkOld
   511 00000FA5 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   512 00000FAA CD21                <1>     int 21h
   513                              <1> .checkOld:
   514 00000FAC 488D15(11040000)    <1>     lea rdx, qword [pipe2Filespec]
   515 00000FB3 803A00              <1>     cmp byte [rdx],0
   516 00000FB6 7407                <1>     jz .pipeNamesComplete
   517 00000FB8 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   518 00000FBD CD21                <1>     int 21h
   519                              <1> .pipeNamesComplete:
   520 00000FBF 31C0                <1>     xor eax, eax
   521                              <1>     ;Invalidate the pointers and the paths too
   522 00000FC1 488905(60040000)    <1>     mov qword [newPipe], rax
   523 00000FC8 488905(68040000)    <1>     mov qword [oldPipe], rax
   524 00000FCF 8905(C2030000)      <1>     mov dword [pipe1Filespec], eax
   525 00000FD5 8905(11040000)      <1>     mov dword [pipe2Filespec], eax
   526                              <1>     return
    13                              <2> %%_ret:
    14 00000FDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> .closeHandle:
   529 00000FDC 81FBFFFFFFFF        <1>     cmp ebx, -1
   530                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FE2 74(DB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   531 00000FE4 B8003E0000          <1>     mov eax, 3E00h
   532 00000FE9 CD21                <1>     int 21h
   533                              <1>     return
    13                              <2> %%_ret:
    14 00000FEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> .closeAndReplace:
   535                              <1> ;Input: ax = one possible handle, dx = second possible handle
   536                              <1> ;       bx = handle to close and copy ax/dx into
   537                              <1> ;Output: Handle intervened on. bx preserved
   538 00000FEC C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   539 00000FEF 09D0                <1>     or eax, edx     ;Form packed
   540 00000FF1 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   541                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FF6 74(EB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542 00000FF8 E8DFFFFFFF          <1>     call .closeHandle
   543 00000FFD 663DFFFF            <1>     cmp ax, -1      
   544 00001001 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   545 00001005 53                  <1>     push rbx
   546 00001006 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   547 00001009 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   548 0000100E CD21                <1>     int 21h
   549 00001010 5B                  <1>     pop rbx
   550                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001011 73(EB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   551                              <1>     ;Else we now try to force default device to open!
   552 00001013 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   553 00001018 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   554 0000101D 488D15C5F7FFFF      <1>     lea rdx, devName
   555 00001024 CD21                <1>     int 21h
   556                              <1>     return
    13                              <2> %%_ret:
    14 00001026 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> cleanRedirOut:
   559                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   560                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   561                              <1> ; particular cases like launching bat files which needs special handling in 
   562                              <1> ; that all redirs need to be completely removed.
   563 00001027 66813D19F0FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   564                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001030 74(26)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   565 00001032 0FB71D10F0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   566 00001039 B901000000          <1>     mov ecx, 1      ;STDOUT
   567 0000103E B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   568 00001043 CD21                <1>     int 21h
   569 00001045 0FB71DFDEFFFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   570 0000104C B8003E0000          <1>     mov eax, 3E00h  
   571 00001051 CD21                <1>     int 21h
   572 00001053 66C705EDEFFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   573 0000105C 488D15(73030000)    <1>     lea rdx, rdrOutFilespec
   574 00001063 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   575 00001068 CD21                <1>     int 21h
   576 0000106A C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   577                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   578                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   579                              <1>     return
    13                              <2> %%_ret:
    14 0000106D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> advanceRedir:
   582                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   583                              <1> ;Close stdin redir then stdout redir. 
   584 0000106E F605D0EFFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   585 00001075 0F8585000000        <1>     jnz .redirIn
   586 0000107B F605BEEFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   587 00001082 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   588 00001088 0FBF05B2EFFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   589 0000108F 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   590 00001094 0F84EB000000        <1>     je .pipeOut              
   591                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   592 0000109A 0FB71DA0EFFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   593 000010A1 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   594 000010A3 B800460000          <1>     mov eax, 4600h
   595 000010A8 CD21                <1>     int 21h
   596 000010AA 0F8239FEFFFF        <1>     jc pipeFailure
   597 000010B0 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   598 000010B5 CD21                <1>     int 21h
   599 000010B7 0F822CFEFFFF        <1>     jc pipeFailure
   600 000010BD 488B15(68040000)    <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   601 000010C4 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   602 000010C9 CD21                <1>     int 21h
   603 000010CB 0F8218FEFFFF        <1>     jc pipeFailure
   604 000010D1 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   605 000010D4 66C70564EFFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   606                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   607                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   608                              <1>     ;Else exit!
   609 000010DD 0FBF055FEFFFFF      <1>     movsx eax, word [pipeSTDOUT]
   610 000010E4 3DFFFFFFFF          <1>     cmp eax, -1
   611 000010E9 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   612 000010EF C6054AEFFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   613 000010F6 F60549EFFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   614 000010FD 753D                <1>     jnz .redirOut               ;Go for it if so!
   615                              <1>     return
    13                              <2> %%_ret:
    14 000010FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .redirIn:
   617                              <1> ;Here we clean redirIn
   618 00001100 0FB71D40EFFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   619 00001107 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   620 00001109 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   621 0000110E CD21                <1>     int 21h
   622 00001110 0F82C5FDFFFF        <1>     jc redirFailure
   623 00001116 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   624 0000111B CD21                <1>     int 21h
   625 0000111D 0F82B8FDFFFF        <1>     jc redirFailure
   626 00001123 66C7051BEFFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   627 0000112C C60512EFFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   628 00001133 F60506EFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   629 0000113A 7549                <1>     jnz .pipeOut
   630                              <1> .redirOut:
   631 0000113C F60503EFFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   632                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001143 74(FF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   633                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   634 00001145 F605F4EEFFFFFF      <1>     test byte [pipeFlag], -1
   635 0000114C 7537                <1>     jnz short .pipeOut
   636 0000114E 0FB71DF4EEFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   637 00001155 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   638 0000115A B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   639 0000115F CD21                <1>     int 21h
   640 00001161 0F8274FDFFFF        <1>     jc redirFailure
   641 00001167 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   642 0000116C CD21                <1>     int 21h
   643 0000116E 0F8267FDFFFF        <1>     jc redirFailure
   644 00001174 66C705CCEEFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   645 0000117D C605C2EEFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   646                              <1>     return
    13                              <2> %%_ret:
    14 00001184 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> .pipeOut:
   648                              <1> ;Duplicate STDIN to save across pipe
   649 00001185 0FBF05B7EEFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   650 0000118C 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   651                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001191 74(84)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   652 00001193 B800450000          <1>     mov eax, 4500h
   653 00001198 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   654 0000119A CD21                <1>     int 21h
   655 0000119C 0F8247FDFFFF        <1>     jc pipeFailure
   656 000011A2 66890598EEFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   657                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   658 000011A9 B800460000          <1>     mov eax, 4600h
   659 000011AE 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   660 000011B0 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   661 000011B2 CD21                <1>     int 21h
   662 000011B4 0F822FFDFFFF        <1>     jc pipeFailure
   663                              <1> ;Now return the original stdout to stdout
   664 000011BA 89D9                <1>     mov ecx, ebx
   665 000011BC 0FB71D80EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   666 000011C3 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   667 000011C8 CD21                <1>     int 21h
   668 000011CA 0F8219FDFFFF        <1>     jc pipeFailure
   669                              <1> ;Now close the DUP'ed STDOUT
   670 000011D0 B8003E0000          <1>     mov eax, 3E00h
   671 000011D5 CD21                <1>     int 21h
   672 000011D7 0F820CFDFFFF        <1>     jc pipeFailure
   673                              <1> ;Finally unwind STDIN to the beginning of the file
   674 000011DD B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   675 000011E2 31DB                <1>     xor ebx, ebx    ;STDIN handle
   676 000011E4 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   677 000011E6 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   678 000011E8 CD21                <1>     int 21h
   679 000011EA 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   680 000011F0 488B15(60040000)    <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   681 000011F7 488915(68040000)    <1>     mov qword [oldPipe], rdx
   682 000011FE 66C7053CEEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   683                              <1>     return
    13                              <2> %%_ret:
    14 00001207 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   684                              <1> 
   685                              <1> 
   686                              <1> peelRedir:
   687                              <1> ;Checks and sets up redir as appropriate
   688                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   689                              <1> ;       rsi points to the first char after the char in al in cLineBuffer
   690                              <1> ;Output: ZF=NZ => No redir
   691                              <1> ;        ZF=ZY => Redir
   692                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   693                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   694 00001208 51                  <1>     push rcx
   695 00001209 57                  <1>     push rdi
   696 0000120A 3C3C                <1>     cmp al, "<"
   697 0000120C 740C                <1>     je .inputRedir
   698 0000120E 3C3E                <1>     cmp al, ">"
   699 00001210 7427                <1>     je .outputRedir
   700 00001212 3C7C                <1>     cmp al, "|"
   701 00001214 7441                <1>     je .pipeSetup
   702 00001216 F8                  <1>     clc
   703                              <1> .redirExit:
   704 00001217 5F                  <1>     pop rdi
   705 00001218 59                  <1>     pop rcx
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001219 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .inputRedir:
   708 0000121A C60524EEFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   709 00001221 488D3D(24030000)    <1>     lea rdi, rdrInFilespec
   710                              <1> .redirCommon:
   711 00001228 E84C330000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   712 0000122D E878340000          <1>     call cpDelimPathToBufz
   713 00001232 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   714 00001235 30C0                <1>     xor al, al  ;Clear the ZF flag
   715 00001237 EBDE                <1>     jmp short .redirExit
   716                              <1> .outputRedir:
   717 00001239 C60506EEFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   718 00001240 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   719 00001243 7509                <1>     jne .notDouble
   720 00001245 FE05FBEDFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   721 0000124B 48FFC6              <1>     inc rsi ;Go past it too
   722                              <1> .notDouble:
   723 0000124E 488D3D(73030000)    <1>     lea rdi, rdrOutFilespec
   724 00001255 EBD1                <1>     jmp short .redirCommon
   725                              <1> .pipeSetup:
   726 00001257 56                  <1>     push rsi    ;Save rsi pointing to char past |
   727 00001258 E81C330000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   728 0000125D 803E7C              <1>     cmp byte [rsi], "|" 
   729 00001260 7403                <1>     je .badFnd
   730 00001262 803E0D              <1>     cmp byte [rsi], CR
   731                              <1> .badFnd:
   732 00001265 5E                  <1>     pop rsi
   733 00001266 F9                  <1>     stc
   734 00001267 EBAE                <1>     jmp short .redirExit
   735                              <1> 
   736                              <1> setupRedirandPipes:
   737                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   738                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   739 00001269 0F8484000000        <1>     jz .redirIn
   740 0000126F 488D15(C2030000)    <1>     lea rdx, pipe1Filespec
   741 00001276 803A00              <1>     cmp byte [rdx], 0
   742 00001279 7410                <1>     jz .pathFound
   743 0000127B 488D15(11040000)    <1>     lea rdx, pipe2Filespec
   744 00001282 803A00              <1>     cmp byte [rdx], 0
   745 00001285 0F855EFCFFFF        <1>     jnz pipeFailure
   746                              <1> .pathFound:
   747 0000128B 488915(60040000)    <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   748 00001292 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   749 00001297 BB01000000          <1>     mov ebx, 1
   750 0000129C CD21                <1>     int 21h
   751 0000129E 0F8245FCFFFF        <1>     jc pipeFailure
   752 000012A4 66890598EDFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   753 000012AB E886320000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   754 000012B0 0441                <1>     add al, "A"
   755 000012B2 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   756 000012B7 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   757 000012B9 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   758 000012BB 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   759 000012BD B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   760 000012C2 CD21                <1>     int 21h
   761 000012C4 0F821FFCFFFF        <1>     jc pipeFailure
   762                              <1>     ;AX has the handle for this file now, this will become STDOUT
   763                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   764 000012CA 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   765 000012CD B901000000          <1>     mov ecx, 1
   766 000012D2 B800460000          <1>     mov eax, 4600h
   767 000012D7 CD21                <1>     int 21h
   768 000012D9 0F820AFCFFFF        <1>     jc pipeFailure
   769 000012DF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   770 000012E4 CD21                <1>     int 21h
   771 000012E6 0F82FDFBFFFF        <1>     jc pipeFailure
   772 000012EC C6054DEDFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   773                              <1> .redirIn:
   774                              <1> ;Now check if any other redir needs to be setup
   775                              <1> ;Checks and sets up redir as appropriate.
   776                              <1>     ;Setup the redir here for STDIN
   777 000012F3 F6054BEDFFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   778 000012FA 7449                <1>     jz .redirOut
   779 000012FC 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   780 000012FE B800450000          <1>     mov eax, 4500h
   781 00001303 CD21                <1>     int 21h
   782 00001305 0F82D0FBFFFF        <1>     jc redirFailure
   783 0000130B 66890535EDFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   784 00001312 488D15(24030000)    <1>     lea rdx, rdrInFilespec
   785 00001319 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   786 0000131E CD21                <1>     int 21h
   787 00001320 0F82B5FBFFFF        <1>     jc redirFailure
   788 00001326 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   789 00001328 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   790 0000132B B800460000          <1>     mov eax, 4600h
   791 00001330 CD21                <1>     int 21h
   792 00001332 0F82A3FBFFFF        <1>     jc redirFailure
   793 00001338 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   794 0000133D CD21                <1>     int 21h
   795 0000133F 0F8296FBFFFF        <1>     jc redirFailure
   796                              <1> .redirOut:
   797 00001345 F605FAECFFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   798                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000134C 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000134E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   799 0000134F 803DEDECFFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   800                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001356 75(4E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   801                              <1>     ;Else setup the redir here for STDOUT
   802 00001358 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   803 0000135D B800450000          <1>     mov eax, 4500h
   804 00001362 CD21                <1>     int 21h
   805 00001364 0F8271FBFFFF        <1>     jc redirFailure
   806 0000136A 668905D8ECFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   807 00001371 488D15(73030000)    <1>     lea rdx, rdrOutFilespec
   808 00001378 803DC7ECFFFF01      <1>     cmp byte [redirOut], 1  ;If >, just create a new file!
   809 0000137F 7409                <1>     je .skipOpen
   810 00001381 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   811 00001386 CD21                <1>     int 21h
   812 00001388 730F                <1>     jnc .fileExists
   813                              <1> .skipOpen:
   814 0000138A B8003C0000          <1>     mov eax, 3C00h
   815 0000138F 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   816 00001391 CD21                <1>     int 21h
   817 00001393 0F8242FBFFFF        <1>     jc redirFailure
   818                              <1> .fileExists:
   819 00001399 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   820 0000139E 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   821 000013A1 B800460000          <1>     mov eax, 4600h  ;DUP2
   822 000013A6 CD21                <1>     int 21h
   823 000013A8 0F822DFBFFFF        <1>     jc redirFailure
   824 000013AE B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   825 000013B3 CD21                <1>     int 21h
   826 000013B5 0F8220FBFFFF        <1>     jc redirFailure
   827 000013BB 803D84ECFFFF01      <1>     cmp byte [redirOut], 1
   828                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013C2 74(4E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   829                              <1>     ;Here we move the file pointer to the end of the file
   830 000013C4 31D2                <1>     xor edx, edx    ;Low order 32 bits
   831 000013C6 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   832 000013C8 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   833 000013CD B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   834 000013D2 CD21                <1>     int 21h
   835 000013D4 0F8201FBFFFF        <1>     jc redirFailure
   836                              <1>     return
    13                              <2> %%_ret:
    14 000013DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   837                              <1> 
   838                              <1> 
   839                              <1> pullCommandline:
   840                              <1> ;This command pulls the command tail down, removing the whole launch command
   841 000013DB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   842                              <1> ;Skip leading separators
   843                              <1> .pctSkipLeading:
   844 000013E2 AC                  <1>     lodsb   ;Get first char
   845 000013E3 E89F310000          <1>     call isALdelimiter
   846 000013E8 74F8                <1>     je .pctSkipLeading
   847 000013EA 48FFCE              <1>     dec rsi
   848                              <1>     ;rsi points to the start of the command
   849 000013ED 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   850 000013F4 E85B310000          <1>     call strlen ;Get the length of the command
   851 000013F9 FFC9                <1>     dec ecx ;Minus the terminating null
   852 000013FB 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   853 000013FE 280D48ECFFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   854 00001404 280D45ECFFFF        <1>     sub byte [arg2Off], cl
   855 0000140A 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   856 0000140C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   857                              <1> .pctPullChars:
   858 00001413 AC                  <1>     lodsb
   859 00001414 AA                  <1>     stosb
   860 00001415 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   861 00001417 7404                <1>     je .pctExit
   862 00001419 FFC1                <1>     inc ecx     ;Increment count
   863 0000141B EBF6                <1>     jmp short .pctPullChars 
   864                              <1> .pctExit:
   865 0000141D 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   866                              <1>     return
    13                              <2> %%_ret:
    14 00001424 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   867                              <1> 
   868                              <1> getSetMainState:
   869                              <1> ;Resets the buffers lengths, sets stringops and gets the pPSP in r8
   870 00001425 FC                  <1>     cld ;Ensure stringops are done the right way
   871 00001426 C605(41010000)80    <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   872 0000142D C605(C3010000)80    <1>     mov byte [cLineBuffer], inLen     ;Reset the buffer length
   873 00001434 C605(45020000)80    <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   874 0000143B 4C8B05BEEBFFFF      <1>     mov r8, qword [pPSP]              ;Reset the pPSP
   875                              <1>     return
    13                              <2> %%_ret:
    14 00001442 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   876                              <1> 
   877                              <1> 
   878                              <1> int2Eh: 
   879                              <1> ;Very sucky interface for passing command lines to be processed by the 
   880                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   881                              <1> ; more reliable with a critical section flag. Currently, if we are already
   882                              <1> ; processing an Int 2Eh request, this will not process the command.
   883                              <1> ;
   884                              <1> ;Need to add further safeguards for when pipes are also setup and
   885                              <1> ; batchmode is on!
   886                              <1> ;
   887                              <1> ;Input: rsi points to the count byte of a command line.
   888                              <1> ;       Max number of chars is 128 (127 + count byte)
   889                              <1> ;Output:
   890                              <1> ;       CF=NC: Command was processed. ax = Retcode
   891                              <1> ;       CF=CY: Command was not processed.
   892 00001443 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   893 00001448 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   894 0000144F 0F85A4000000        <1>     jnz int2EcheckReentry 
   895                              <1> .multiJoin:
   896 00001455 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the bits! Gets the lock!
   897 0000145C 488925(0A000000)    <1>     mov qword [int2Ersp], rsp       ;Save the far stack pointer 
   898 00001463 B8002F0000          <1>     mov eax, 2F00h  ;Get the current DTA in rbx
   899 00001468 CD21                <1>     int 21h
   900 0000146A 48891D(12000000)    <1>     mov qword [int2Edta], rbx       ;We set the dta in the main loop later
   901 00001471 488D25(40060000)    <1>     lea rsp, stackTop               ;Set to use the internal stack
   902 00001478 B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rdx
   903 0000147D CD21                <1>     int 21h
   904 0000147F 48891D(02000000)    <1>     mov qword [int2Epsp], rbx
   905 00001486 52                  <1>     push rdx    ;Save on the stack
   906 00001487 488B1D72EBFFFF      <1>     mov rbx, qword [pPSP] ;Get the psp for this COMMAND.COM
   907 0000148E B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   908 00001493 CD21                <1>     int 21h
   909 00001495 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   910 00001498 4989D9              <1>     mov r9, rbx
   911 0000149B FC                  <1>     cld
   912 0000149C 488D3D(C4010000)    <1>     lea rdi, cLineBuffer + 1
   913 000014A3 B981000000          <1>     mov ecx, cmdBufferL - 1
   914 000014A8 F3A4                <1>     rep movsb   ;Zoom zoom copy command line over
   915 000014AA E876FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   916 000014AF E8E5330000          <1>     call resetNation        ;Now ensure internationalisation is up to date
   917 000014B4 803D(C4010000)00    <1>     cmp byte [cLineBuffer + 1], 0   ;Don't use batProceed to fail if len 0
   918 000014BB 0F85EAF5FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   919                              <1> int2ERet:
   920 000014C1 E8E5300000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   921 000014C6 488B25(0A000000)    <1>     mov rsp, qword [int2Ersp]
   922 000014CD 488B1D(02000000)    <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   923 000014D4 B800500000          <1>     mov eax, 5000h  ;Set Current PSP
   924 000014D9 CD21                <1>     int 21h
   925 000014DB 488B15(12000000)    <1>     mov rdx, qword [int2Edta]
   926 000014E2 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA back to where it was upon return
   927 000014E7 CD21                <1>     int 21h
   928 000014E9 0FB705(00000000)    <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   929 000014F0 8025(1A000000)FB    <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   930 000014F7 48CF                <1>     iretq
   931                              <1> 
   932                              <1> int2EcheckReentry:
   933                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   934                              <1> ; else, return with CF=CY.
   935 000014F9 B800520000          <1>     mov eax, 5200h  ;Get sysvars
   936 000014FE CD21                <1>     int 21h
   937 00001500 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   938 00001504 7512                <1>     jnz short .multifnd
   939 00001506 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   940 0000150B CD2F                <1>     int 2Fh
   941 0000150D 84C0                <1>     test al, al ;This must still be zero, else something installed
   942 0000150F 7507                <1>     jnz .multifnd
   943 00001511 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   944 00001516 48CF                <1>     iretq   
   945                              <1> .multifnd:
   946                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   947 00001518 F390                <1>     pause
   948 0000151A F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   949 00001521 75F5                <1>     jnz .multifnd
   950 00001523 E92DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    20                                  %include "./src/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Start by creating the FQPath name and building a command line
     5                              <1> ; where the arguments are CR terminated.
     6                              <1> ;Then work out how much memory to allocate and allocate it.
     7                              <1> ;First First check that we are not already in a batch file!
     8                              <1> ;If we are, deallocate it's block before proceeding unless in CALL.
     9 00001528 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
    10 0000152F 4885DB              <1>     test rbx, rbx
    11 00001532 7419                <1>     jz .noBat   
    12 00001534 F605(73000000)FF    <1>     test byte [callFlg], -1 ;Skip this if in a call
    13 0000153B 7510                <1>     jnz .noBat
    14 0000153D E852040000          <1>     call batFree            ;Free batch block
    15 00001542 48C705(1B000000)00- <1>     mov qword [bbPtr], 0    ;Mark as free. Can leave flags alone!
    15 0000154A 000000              <1>
    16                              <1> .noBat:
    17                              <1> ;Now start by saving the command line
    18                              <1> ;Now check if we are executing AUTOEXEC.BAT. If so, 
    19                              <1> ; we suppress F3 recalling of the command
    20 0000154D 488D35A1F2FFFF      <1>     lea rsi, autoSpec + 3   ;Just check the name
    21 00001554 488D3D(E7000000)    <1>     lea rdi, cmdFcb + fcb.filename
    22 0000155B B908000000          <1>     mov ecx, 8  ;Only check filename as the extension here must be BAT
    23 00001560 F3A6                <1>     repe cmpsb
    24 00001562 7507                <1>     jne .notAutoexec
    25 00001564 C605(42010000)00    <1>     mov byte [inBuffer + 1], 0    ;Set the count byte to 0
    26                              <1> .notAutoexec:
    27 0000156B 488D35(C7020000)    <1>     lea rsi, cmdPathSpec    ;Path here is null terminated.
    28 00001572 488D3D(23000000)    <1>     lea rdi, batFile
    29 00001579 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    30 0000157C 80FC3A              <1>     cmp ah, ":"
    31 0000157F 7479                <1>     je .bbdrvGiven
    32 00001581 3A0583EAFFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    33 00001587 7464                <1>     je .bbCDrvAbs
    34                              <1> ;Current drive relative
    35 00001589 E8A82F0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    36 0000158E 0441                <1>     add al, "A"
    37 00001590 B43A                <1>     mov ah, ":"
    38 00001592 66AB                <1>     stosw   ;Store these two chars, adv rdi
    39                              <1> .bbRelPath:
    40 00001594 8A0570EAFFFF        <1>     mov al, byte [pathSep]  
    41 0000159A AA                  <1>     stosb   ;Store the pathsep
    42 0000159B 8A05(23000000)      <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    43 000015A1 E8B82F0000          <1>     call ucChar             ;UC it
    44 000015A6 8805(23000000)      <1>     mov byte [batFile], al  ;and overwrite it :)
    45 000015AC 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    46 000015AE 88C2                <1>     mov dl, al
    47 000015B0 56                  <1>     push rsi        ;Save remaining char source
    48 000015B1 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    49 000015B4 B800470000          <1>     mov eax, 4700h  ;Get Current Directory (null terminated)
    50 000015B9 CD21                <1>     int 21h
    51 000015BB 5E                  <1>     pop rsi
    52 000015BC 7316                <1>     jnc .bbRelPathOk
    53 000015BE 488D15B1EBFFFF      <1>     lea rdx, badBat
    54 000015C5 E8732D0000          <1>     call printString
    55 000015CA E885030000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    56 000015CF E94AF4FFFF          <1>     jmp commandMain     ;And start again :)   
    57                              <1> .bbRelPathOk:
    58                              <1> ;Now move rdi to the terminating null   
    59 000015D4 31C0                <1>     xor eax, eax
    60 000015D6 31C9                <1>     xor ecx, ecx
    61 000015D8 FFC9                <1>     dec ecx
    62 000015DA F2AE                <1>     repne scasb ;Find the terminating null
    63 000015DC 48FFCF              <1>     dec rdi ;Now point to the terminating null
    64 000015DF 8A0525EAFFFF        <1>     mov al, byte [pathSep]
    65 000015E5 3847FF              <1>     cmp byte [rdi - 1], al
    66 000015E8 741E                <1>     je .bbCpName    ;Dont store a pathsep over root!
    67 000015EA AA                  <1>     stosb   ;Store this pathsep over the original null
    68                              <1>     ;Now we are ready to copy the command line passed to us by the user
    69                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    70 000015EB EB1B                <1>     jmp short .bbCpName
    71                              <1> .bbCDrvAbs:
    72                              <1> ;Current drive absolute. Get current drive into buffer
    73 000015ED E8442F0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    74 000015F2 0441                <1>     add al, "A"
    75 000015F4 B43A                <1>     mov ah, ":"
    76 000015F6 66AB                <1>     stosw   ;Store these two chars
    77                              <1>     ;Now we are ready to copy the command line passed to us by the user
    78                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    79 000015F8 EB0E                <1>     jmp short .bbCpName
    80                              <1> .bbdrvGiven:
    81                              <1> ;Drive given X:
    82 000015FA 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
    83 000015FC AC                  <1>     lodsb
    84 000015FD 48FFCE              <1>     dec rsi ;Get the char and point back to it
    85 00001600 3A0504EAFFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
    86 00001606 758C                <1>     jne .bbRelPath
    87                              <1> .bbCpName:
    88 00001608 E82E2F0000          <1>     call strcpy ;Copy the remaining portion
    89 0000160D 488D35(23000000)    <1>     lea rsi, batFile
    90 00001614 E8512F0000          <1>     call normalisePath  ;Normalise the path :)
    91                              <1> ;Now batFile has the FQpathname, construct the new CR delimited command line.
    92 00001619 488D35(47020000)    <1>     lea rsi, cmdBuffer + 2
    93 00001620 488D3D(46020000)    <1>     lea rdi, cmdBuffer + 1  ;Overwrite count byte as we will null terminate
    94                              <1> .copyCmdline:
    95 00001627 E84D2F0000          <1>     call skipDelimiters ;Find start of argument
    96                              <1> .cclp:
    97 0000162C AC                  <1>     lodsb
    98 0000162D E8552F0000          <1>     call isALdelimiter  ;If we hit delimiter, replace with CR, goto next arg
    99 00001632 7505                <1>     jne .ccstore
   100 00001634 B00D                <1>     mov al, CR  
   101 00001636 AA                  <1>     stosb
   102 00001637 EBEE                <1>     jmp short .copyCmdline
   103                              <1> .ccstore:
   104 00001639 AA                  <1>     stosb   
   105 0000163A 3C0D                <1>     cmp al, CR  ;Did we just store a CR
   106 0000163C 75EE                <1>     jne .cclp   ;Keep getting chars if so
   107 0000163E 31C0                <1>     xor eax, eax    ;Else store a terminating null now
   108 00001640 AA                  <1>     stosb
   109 00001641 488D3D(46020000)    <1>     lea rdi, cmdBuffer + 1    ;Get back the ptr to the head of the new string
   110 00001648 E8072F0000          <1>     call strlen     ;Get the new string length in ecx
   111 0000164D 89CB                <1>     mov ebx, ecx    ;Save len in eax (include null)
   112 0000164F 488D3D(23000000)    <1>     lea rdi, batFile
   113 00001656 E8F92E0000          <1>     call strlen     ;Get the filename len in ecx
   114 0000165B 01CB                <1>     add ebx, ecx
   115 0000165D 81C327000000        <1>     add ebx, batBlockHdr_size   ;Get the size to allocate for block
   116 00001663 89D9                <1>     mov ecx, ebx    ;Save the size in bytes in ecx for the cleaning below
   117 00001665 81C30F000000        <1>     add ebx, 0Fh    ;Round up to nearest paragraph!
   118 0000166B C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   119 0000166E B800480000          <1>     mov eax, 4800h
   120 00001673 CD21                <1>     int 21h
   121 00001675 730F                <1>     jnc .bbAlloced
   122 00001677 E8C5030000          <1>     call badNoMemError  ;Print not enough mem error
   123 0000167C E8D3020000          <1>     call batCleanup ;Clean up all redir and ret to cmdline
   124 00001681 E998F3FFFF          <1>     jmp commandMain
   125                              <1> .bbAlloced:
   126                              <1> ;Now init the batblock with all the data we need
   127 00001686 4889C3              <1>     mov rbx, rax    ;Move ptr here
   128 00001689 488705(1B000000)    <1>     xchg qword [bbPtr], rax  ;Save the ptr here too and get prev ptr!
   129 00001690 50                  <1>     push rax    ;Save the previous pointer on the stack
   130 00001691 4889DF              <1>     mov rdi, rbx
   131 00001694 31C0                <1>     xor eax, eax
   132 00001696 F3AA                <1>     rep stosb   ;Clean the block with nulls
   133 00001698 800D(1A000000)08    <1>     or byte [statFlg1], inBatch ;Fire up the batch processor now!
   134                              <1> 
   135 0000169F 8F4302              <1>     pop qword [rbx + batBlockHdr.pLink]    ;Get prev ptr here (0 if not call)
   136 000016A2 4889DF              <1>     mov rdi, rbx            ;Point back to the head of the block
   137 000016A5 8A0562E9FFFF        <1>     mov al, byte [echoFlg]
   138 000016AB 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
   139 000016AE 8A05(1A000000)      <1>     mov al, byte [statFlg1]
   140 000016B4 88430A              <1>     mov byte [rbx + batBlockHdr.bStatFlg], al
   141 000016B7 B8FFFFFFFF          <1>     mov eax, -1
   142 000016BC B905000000          <1>     mov ecx, 5
   143 000016C1 488D7B13            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
   144 000016C5 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine    
   145 000016C7 488D35(23000000)    <1>     lea rsi, batFile
   146 000016CE E8682E0000          <1>     call strcpy ;Copy the string and the terminating null
   147 000016D3 488D35(46020000)    <1>     lea rsi, cmdBuffer + 1
   148 000016DA 57                  <1>     push rdi    ;Save the ptr to where we will store the cmdline
   149 000016DB E85B2E0000          <1>     call strcpy ;Copy the command tail and the terminating null
   150 000016E0 5F                  <1>     pop rdi     ;Get the pointer to the copied cmdline in rdi
   151 000016E1 31F6                <1>     xor esi, esi    ;Use esi as argument counter
   152 000016E3 31C9                <1>     xor ecx, ecx
   153 000016E5 FFC9                <1>     dec ecx ;Init ecx to large number for repne below (stupid hack will work)
   154                              <1> .bbFndLp:
   155 000016E7 803F00              <1>     cmp byte [rdi], 0   ;Is this the end of the cmdline?
   156 000016EA 741B                <1>     je .bbArgsDone      
   157                              <1> ;Else add the entry to the table! rbx -> batBlock
   158 000016EC 4889F8              <1>     mov rax, rdi
   159 000016EF 4829D8              <1>     sub rax, rbx    ;Now get distance from head of batBlock to this arg in ax
   160 000016F2 6689447313          <1>     mov word [rbx + 2*rsi + batBlockHdr.wArgs], ax    ;and store it!
   161 000016F7 FFC6                <1>     inc esi
   162 000016F9 81FE0A000000        <1>     cmp esi, 10         ;Did we just process %9?
   163 000016FF 7406                <1>     je .bbArgsDone
   164 00001701 B00D                <1>     mov al, CR  ;Scan for the next CR and move rdi past it!
   165 00001703 F2AE                <1>     repne scasb
   166 00001705 EBE0                <1>     jmp short .bbFndLp   ;If not end of cmdline, see if next char delim
   167                              <1> .bbArgsDone:
   168                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   169                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   170                              <1> ; for SHARING trouble...
   171 00001707 E897020000          <1>     call batKillRedir      ;Fully remove all redirs and files before starting
   172 0000170C E90DF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   173                              <1> 
   174                              <1> batFinish:
   175                              <1> ;This is the procedure called after we've processed the last batch line
   176 00001711 E8A52B0000          <1>     call printPrompt    ;Add this to emulate what DOS does
   177 00001716 488B05(1B000000)    <1>     mov rax, qword [bbPtr]
   178 0000171D 488B4002            <1>     mov rax, qword [rax + batBlockHdr.pLink]
   179 00001721 0FB6580A            <1>     movzx ebx, byte [rax + batBlockHdr.bStatFlg]    ;Get called state
   180 00001725 50                  <1>     push rax    ;Save the ptr on the stack
   181 00001726 53                  <1>     push rbx    ;Save state on stack
   182 00001727 E828020000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   183 0000172C 5B                  <1>     pop rbx
   184 0000172D 58                  <1>     pop rax
   185 0000172E 4885C0              <1>     test rax, rax   ;If the link ptr is 0, we start again :)
   186 00001731 0F84E7F2FFFF        <1>     jz commandMain
   187                              <1>     ;Else, we go back a command block
   188 00001737 488905(1B000000)    <1>     mov qword [bbPtr], rax  ;Place caller batch block back :)
   189 0000173E 881D(1A000000)      <1>     mov byte [statFlg1], bl ;And place the original states back
   190 00001744 E9D5F2FFFF          <1>     jmp commandMain
   191                              <1>     ;And read the next command from the previous batch file!
   192                              <1> batNextLine:
   193                              <1> ;Read the next line from the file and sets if we are done with copying
   194 00001749 F605(1A000000)10    <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   195 00001750 75BF                <1>     jnz batFinish
   196 00001752 E857020000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   197 00001757 488B35(1B000000)    <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   198 0000175E 8B560B              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   199 00001761 8B4E0F              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   200 00001764 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   201 00001769 CD21                <1>     int 21h
   202 0000176B C605(C4010000)00    <1>     mov byte [batInBuffer + 1], 0  ;Reset the buffer count
   203 00001772 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2   ;Start read pos
   204 00001779 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   205                              <1> .readlp:
   206 0000177B E866020000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   207 00001780 742F                <1>     jz .eofAddCR
   208 00001782 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   209 00001785 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   210 00001788 743D                <1>     je .eolCR
   211 0000178A 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   212 0000178D 7447                <1>     je .eolLF
   213 0000178F FE05(C4010000)      <1>     inc byte [batInBuffer + 1] ;Inc our char count
   214 00001795 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   215 00001798 803D(C4010000)80    <1>     cmp byte [batInBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   216 0000179F 75DA                <1>     jne .readlp             ;Get next char if not
   217 000017A1 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   218 000017A4 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   219 000017A7 FE0D(C4010000)      <1>     dec byte [batInBuffer + 1] ;Reduce the valid char count by one
   220 000017AD FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   221 000017AF EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   222                              <1> .eofAddCR:
   223 000017B1 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   224                              <1> .eof:
   225 000017B4 803D(C4010000)00    <1>     cmp byte [batInBuffer + 1], 0      ;If we read any chars, do the line!
   226 000017BB 751C                <1>     jne .eol
   227 000017BD E81C020000          <1>     call batClose                   ;Else close the hdl!
   228 000017C2 E94AFFFFFF          <1>     jmp batFinish
   229                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   230 000017C7 E81A020000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   231 000017CC 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   232 000017CE 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   233 000017D1 7503                <1>     jne .eolLF          ;Reread this char if not LF
   234 000017D3 48FFC7              <1>     inc rdi             ;Else add to the count
   235                              <1> .eolLF:
   236 000017D6 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   237                              <1> .eol:
   238                              <1> ;Close the file, update the batch block file pointer, then proceed.
   239                              <1> ;rsi -> Batch block.
   240 000017D9 E800020000          <1>     call batClose
   241                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   242 000017DE 48017E0B            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   243                              <1> ;Now we echo the prompt and command to the console unless the 
   244                              <1> ; first char is @, we hit a label or the echo flag is off.
   245 000017E2 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2
   246                              <1> ;Labels and @ chars are first non-delim char on line.
   247                              <1> ;Find the first non-delim char in the line and check it!!
   248 000017E9 4889D6              <1>     mov rsi, rdx
   249 000017EC E8882D0000          <1>     call skipDelimiters     
   250 000017F1 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   251 000017F4 0F844FFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   252 000017FA E858000000          <1>     call batPreprocess      ;Else we preprocess now
   253                              <1> 
   254 000017FF 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2
   255 00001806 803A40              <1>     cmp byte [rdx], batNoEchoChar   ;Line no echo check! (@)
   256 00001809 7429                <1>     je .noEchoPull       
   257 0000180B F605FBE7FFFFFF      <1>     test byte [echoFlg], -1         
   258 00001812 0F848AF2FFFF        <1>     jz commandMain.batProceed
   259 00001818 52                  <1>     push rdx
   260 00001819 E89D2A0000          <1>     call printPrompt    ;Now output prompt
   261 0000181E 5A                  <1>     pop rdx
   262 0000181F 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
   263 00001823 BB01000000          <1>     mov ebx, 1  ;STDOUT
   264 00001828 B800400000          <1>     mov eax, 4000h  ;Write woo!
   265 0000182D CD21                <1>     int 21h
   266 0000182F E969F2FFFF          <1>     jmp commandMain.batProceedCrlf
   267                              <1> .noEchoPull:
   268 00001834 FE0D(C4010000)      <1>     dec byte [batInBuffer + 1]     ;Eliminate the @ char
   269 0000183A 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   270 00001840 4889D7              <1>     mov rdi, rdx
   271 00001843 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   272 00001847 0FB60D(C4010000)    <1>     movzx ecx, byte [batInBuffer + 1]  ;Get the remaining count to copy
   273 0000184E FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   274 00001850 F3A4                <1>     rep movsb 
   275 00001852 E94BF2FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   276                              <1> 
   277                              <1> batPreprocess:
   278                              <1> ;Copies the line from batInBuffer to batInBuffer for regular processing,
   279                              <1> ; expanding any environment variables as the expansion takes place.
   280                              <1> ;Line is guaranteed only CR terminated.
   281 00001857 488D2D(45020000)    <1>     lea rbp, cmdBuffer      ;Save the ptr for the expandVar function
   282 0000185E 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   283 00001862 C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   284 00001866 488D35(C5010000)    <1>     lea rsi, qword [batInBuffer + 2]
   285 0000186D E8072D0000          <1>     call skipDelimiters ;We strip leading delimiters
   286                              <1> .lp:
   287 00001872 AC                  <1>     lodsb   ;Get char and advance source ptr
   288 00001873 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   289 00001875 7507                <1>     jne .rawcp
   290 00001877 E825000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   291 0000187C EB08                <1>     jmp short .check  
   292                              <1> .rawcp:
   293 0000187E AA                  <1>     stosb   ;Store the char
   294 0000187F 3C0D                <1>     cmp al, CR
   295 00001881 740C                <1>     je .exit    ;Return immediately if we copied a CR. Dont add to count.
   296 00001883 FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   297                              <1> .check:
   298 00001886 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   299 0000188A 75E6                <1>     jne .lp
   300 0000188C B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   301 0000188E AA                  <1>     stosb   ;Store this char too
   302                              <1> .exit:
   303                              <1> ;Now copy the expanded command line back :)
   304 0000188F 4889EE              <1>     mov rsi, rbp
   305 00001892 488D3D(C3010000)    <1>     lea rdi, batInBuffer
   306 00001899 B982000000          <1>     mov ecx, cmdBufferL
   307 0000189E F3A4                <1>     rep movsb
   308                              <1>     return
    13                              <2> %%_ret:
    14 000018A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> 
   311                              <1> batExpandVar:
   312                              <1> ;Expand any environment variables. 
   313                              <1> ;%% is treated as an escape char for a %.
   314                              <1> ;
   315                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   316                              <1> ;       rdi -> Position to place the substitution string.
   317                              <1> ;       rbp -> Head of destination buffer for copy.
   318                              <1> ;Output:
   319                              <1> ;   Substitution string is placed in buffer if necessary.
   320                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   321                              <1> ;       rdi -> Space for the next char to copy.
   322 000018A1 0FB606              <1>     movzx eax, byte [rsi]  ;Is this a parameter like %[0-9]?
   323 000018A4 3C30                <1>     cmp al, "0"
   324 000018A6 7204                <1>     jb .notRep  ;If definitely not a number, keep going
   325 000018A8 3C39                <1>     cmp al, "9"
   326 000018AA 7276                <1>     jb .repParm ;If a number, its a replacable parameter :)
   327                              <1> .notRep:
   328 000018AC 3C0D                <1>     cmp al, CR          
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018AE 74(A0)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 000018B0 3C25                <1>     cmp al, "%" ;If immediately followed by %, then return it
   331 000018B2 7505                <1>     jne .notSecond
   332                              <1> ;Here we escape the second %. We cant enter here if we dont have space 
   333                              <1> ; at least 1 char, so store it immediately.
   334 000018B4 AA                  <1>     stosb
   335 000018B5 FE4501              <1>     inc byte [rbp + 1]
   336                              <1>     return
    13                              <2> %%_ret:
    14 000018B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> .notSecond:
   338                              <1> ;Now do the env var search. Start by scanning for the terminating
   339                              <1> ; % of the var name. If we strike a delimiter char first, 
   340                              <1> ; we stop the expansion for the envvar.
   341 000018B9 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   342 000018BC 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   343                              <1> .envVarLp:
   344 000018BF AC                  <1>     lodsb
   345 000018C0 E8C22C0000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   346                              <1> .lpExit:
   347 000018C5 480F44F7            <1>     cmove rsi, rdi  ;If a delim found, return rsi to the char past the % sign.
   348 000018C9 480F44FB            <1>     cmove rdi, rbx  ;And return rdi to where it was beforehand :)
   349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018CD 74(B8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   350 000018CF 3C0D                <1>     cmp al, CR      ;If we are at the end of the line too, exit!
   351 000018D1 74F2                <1>     je .lpExit
   352 000018D3 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   353 000018D5 75E8                <1>     jne .envVarLp
   354                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   355 000018D7 C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   356 000018DB 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   357                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   358 000018DC E8C0300000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   359 000018E1 480F42FB            <1>     cmovc rdi, rbx  ;Reset rdi here if no envvar found and exit!
   360 000018E5 7239                <1>     jc .exit
   361 000018E7 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   362 000018EA B03D                <1>     mov al, "="
   363 000018EC B9FFFFFFFF          <1>     mov ecx, -1
   364 000018F1 F2AE                <1>     repne scasb     ;Move rdi to the char past the equals sign
   365 000018F3 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018F4 72(B8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   367                              <1> 
   368 000018F6 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   369 000018F7 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   370 000018FA E8552C0000          <1>     call strlen     ;Get the string length of the envvar value in ecx
   371                              <1> .copyVar:
   372 000018FF FFC9                <1>     dec ecx         ;Drop 0 from count
   373 00001901 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   374 00001904 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   375 00001908 51                  <1>     push rcx
   376 00001909 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   377 0000190B 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   378 00001911 59                  <1>     pop rcx
   379 00001912 7207                <1>     jb .noTrunc
   380 00001914 B97F000000          <1>     mov ecx, inLen - 1
   381 00001919 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   382                              <1> .noTrunc:
   383 0000191B 004D01              <1>     add byte [rbp + 1], cl
   384 0000191E F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   385                              <1> .exit:
   386 00001920 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   387                              <1>     return
    13                              <2> %%_ret:
    14 00001921 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> .repParm:
   389 00001922 2D30000000          <1>     sub eax, "0"
   390 00001927 48FFC6              <1>     inc rsi ;Move the ptr past the replacable parameter value
   391 0000192A 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   392 00001931 0FB7544313          <1>     movzx edx, word [rbx + batBlockHdr.wArgs + 2*rax]   ;Get off from cmdLine
   393 00001936 81FAFFFF0000        <1>     cmp edx, 0FFFFh   ;If there is no var, copy nothing and exit!
   394                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000193C 74(21)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   395 0000193E 56                  <1>     push rsi        ;Save ptr to source of next chars 
   396 0000193F 488D3413            <1>     lea rsi, qword [rbx + rdx]  ;Save ptr to head of string to copy in rsi
   397 00001943 31C9                <1>     xor ecx, ecx
   398 00001945 FFC9                <1>     dec ecx
   399 00001947 B00D                <1>     mov al, CR      ;Now scan for the terminating CR
   400 00001949 4887F7              <1>     xchg rsi, rdi   ;Save dest ptr in rsi and point to string to cpy in rdi
   401 0000194C 57                  <1>     push rdi        ;Save the head of the string for copy
   402 0000194D F2AE                <1>     repne scasb     ;Get the length of the string with terminating CR
   403 0000194F 5F                  <1>     pop rdi         ;Point back to head of string
   404 00001950 F7D1                <1>     not ecx         ;Convert to one less than the length (drops the CR)
   405 00001952 EBAB                <1>     jmp short .copyVar
   406                              <1> 
   407                              <1> batCleanup:
   408                              <1> ;This function is called after the last line has been processed by the 
   409                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   410                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   411 00001954 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   412 0000195B 4885DB              <1>     test rbx, rbx
   413 0000195E 741C                <1>     jz .exit    ;Skip any references using this pointer
   414                              <1> ;Restore the state from the current block
   415 00001960 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   416 00001963 8805A4E6FFFF        <1>     mov byte [echoFlg], al
   417 00001969 8A430A              <1>     mov al, byte [rbx + batBlockHdr.bStatFlg]
   418 0000196C 8805(1A000000)      <1>     mov byte [statFlg1], al
   419 00001972 E819270000          <1>     call forFree
   420 00001977 E818000000          <1>     call batFree
   421                              <1> .exit:
   422 0000197C E88AF5FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   423 00001981 48C705(1B000000)00- <1>     mov qword [bbPtr], 0 
   423 00001989 000000              <1>
   424 0000198C 8025(1A000000)E7    <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   425                              <1>     return
    13                              <2> %%_ret:
    14 00001993 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> batFree:
   428                              <1> ;Frees the batch block in rbx
   429 00001994 4150                <1>     push r8
   430 00001996 4989D8              <1>     mov r8, rbx
   431 00001999 B800490000          <1>     mov eax, 4900h
   432 0000199E CD21                <1>     int 21h
   433 000019A0 4158                <1>     pop r8
   434                              <1>     return
    13                              <2> %%_ret:
    14 000019A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> batKillRedir:
   437                              <1> ;Used to kill redir state on entering a BAT file, FOR or CALL command
   438 000019A3 E87FF6FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   439 000019A8 E85EF5FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   440                              <1>     return
    13                              <2> %%_ret:
    14 000019AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> batOpen:
   443                              <1> ;Opens the batch file and returns the handle in ebx.
   444                              <1> ;Prints the "replace disk" string if file not found.
   445                              <1> ;
   446                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   447                              <1> ;Output: ebx = File handle for filespec in batFile.
   448                              <1> ;
   449                              <1> ;Funky behaviour worth noting:
   450                              <1> ; If a failure occurs in open, we keep prompting the user to 
   451                              <1> ; replace the disk. The only way out if the error is really bad is 
   452                              <1> ; via ^C which does all the cleanup we need. 
   453                              <1> ; Thus this never returns fail.
   454 000019AE 50                  <1>     push rax
   455 000019AF 52                  <1>     push rdx
   456 000019B0 488B05(1B000000)    <1>     mov rax, qword [bbPtr]
   457 000019B7 488D5027            <1>     lea rdx, qword [rax + batBlockHdr.cmdLine]
   458                              <1>     ;lea rdx, batFile
   459                              <1> .batOpen:
   460 000019BB B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   461 000019C0 CD21                <1>     int 21h
   462 000019C2 7315                <1>     jnc .batOpened
   463 000019C4 488D15C2E7FFFF      <1>     lea rdx, needBat
   464 000019CB E86D290000          <1>     call printString
   465 000019D0 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   466 000019D5 CD21                <1>     int 21h
   467 000019D7 EBE2                <1>     jmp short .batOpen
   468                              <1> .batOpened:
   469 000019D9 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   470 000019DB 5A                  <1>     pop rdx
   471 000019DC 58                  <1>     pop rax
   472                              <1>     return
    13                              <2> %%_ret:
    14 000019DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> batClose:
   475                              <1> ;Close the handle in ebx.
   476 000019DE B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   477 000019E3 CD21                <1>     int 21h         
   478                              <1>     return
    13                              <2> %%_ret:
    14 000019E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> 
   480                              <1> batReadChar:
   481                              <1> ;Reads a char. 
   482                              <1> ;Input: ebx = Handle to read char from.
   483                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   484                              <1> ;Output: 
   485                              <1> ;   CF=NC:
   486                              <1> ;       ZF=NZ: eax = 1. One char read.
   487                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   488                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   489                              <1> ;Clobbers: None.
   490 000019E6 51                  <1>     push rcx
   491 000019E7 B901000000          <1>     mov ecx, 1
   492 000019EC B8003F0000          <1>     mov eax, 3F00h
   493 000019F1 CD21                <1>     int 21h 
   494 000019F3 59                  <1>     pop rcx 
   495 000019F4 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   496 000019F6 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   497 000019F8 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   498 000019FA 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   499                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000019FD 75(E5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   500                              <1> .eof:
   501 000019FF 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   502 00001A00 800D(1A000000)10    <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   503 00001A07 9D                  <1>     popfq
   504                              <1>     return    
    13                              <2> %%_ret:
    14 00001A08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> .bad:
   506 00001A09 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   507 00001A0B F9                  <1>     stc             ;Never check it but ensure reset of CF.
   508 00001A0C EBF1                <1>     jmp short .eof  ;And set the status bit
    21                                  %include "./src/cmdErr.asm"
     1                              <1> ;This file contains the error printing routines
     2                              <1> ;Common Error Messages, jumped to to return from
     3                              <1> badDiskFull:
     4                              <1> ;This is a different error return, as this closes handles and prints
     5                              <1> ; disk full error and resets the command line!
     6 00001A0E 488D1517E8FFFF      <1>     lea rdx, noSpace
     7 00001A15 488D0D37EBFFFF      <1>     lea rcx, pipeErr
     8 00001A1C F6051DE6FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
     9 00001A23 747D                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    10 00001A25 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    11 00001A29 E874000000          <1>     call badCmn     ;Print the string
    12 00001A2E E9CEF4FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    13                              <1> badForError:    
    14 00001A33 E858260000          <1>     call forFree        ;Free all FOR variables
    15 00001A38 488D15F8EAFFFF      <1>     lea rdx, forNest
    16 00001A3F EB61                <1>     jmp short badCmn    
    17                              <1> badNoMemError:
    18 00001A41 488D15DEEBFFFF      <1>     lea rdx, noMemMsg
    19 00001A48 EB58                <1>     jmp short badCmn
    20                              <1> badSyntaxError:
    21 00001A4A 488D15D7EAFFFF      <1>     lea rdx, syntaxErr
    22 00001A51 EB4F                <1>     jmp short badCmn
    23                              <1> badEnvSpaceError:
    24 00001A53 488D15ECE7FFFF      <1>     lea rdx, noEnvSpace
    25 00001A5A EB46                <1>     jmp short badCmn
    26                              <1> badAccError:
    27 00001A5C 488D1571EAFFFF      <1>     lea rdx, accDenMsg
    28 00001A63 EB3D                <1>     jmp short badCmn
    29                              <1> badParamError:
    30 00001A65 488D15E6E8FFFF      <1>     lea rdx, badParm
    31 00001A6C EB34                <1>     jmp short badCmn
    32                              <1> badDriveError:
    33 00001A6E 488D15A0E8FFFF      <1>     lea rdx, badDrv
    34 00001A75 EB2B                <1>     jmp short badCmn
    35                              <1> badArgError:
    36 00001A77 488D156EEBFFFF      <1>     lea rdx, badArgs
    37 00001A7E EB22                <1>     jmp short badCmn
    38                              <1> badFileError:
    39 00001A80 488D1549EBFFFF      <1>     lea rdx, badSpec
    40 00001A87 EB19                <1>     jmp short badCmn
    41                              <1> badDupFnf:
    42                              <1> ;Hybrid error message
    43 00001A89 488D1574E7FFFF      <1>     lea rdx, dupName
    44 00001A90 EB10                <1>     jmp short badCmn
    45                              <1> badFnf:
    46 00001A92 488D1582E7FFFF      <1>     lea rdx, fnfMsg
    47 00001A99 EB07                <1>     jmp short badCmn
    48                              <1> badDirError:
    49 00001A9B 488D15B1E9FFFF      <1>     lea rdx, badDir
    50                              <1> badCmn:
    51 00001AA2 E996280000          <1>     jmp printString
    52                              <1> badCmdError:
    53 00001AA7 488D153BE7FFFF      <1>     lea rdx, badCmd
    54 00001AAE EBF2                <1>     jmp short badCmn
    22                                  %include "./src/cmdFunc1.asm"
     1                              <1> ;Functions included with name and label:
     2                              <1> ;----------------------------------------------------
     3                              <1> ; LABEL     NAME
     4                              <1> ;----------------------------------------------------
     5                              <1> ; dir       DIR
     6                              <1> ; chdir     CHDIR(CD)
     7                              <1> ; mkdir     MKDIR(MD)
     8                              <1> ; rmdir     RMDIR(RD)
     9                              <1> ; copy      COPY
    10                              <1> ; erase     DEL(ERASE)
    11                              <1> ; date      DATE
    12                              <1> ; time      TIME
    13                              <1> ; ctty      CTTY
    14                              <1> ; cls       CLS
    15                              <1> ; break     BREAK
    16                              <1> ; verify    VERIFY
    17                              <1> ; rename    REN(AME)
    18                              <1> ; truename  TRUENAME
    19                              <1> ; volume    VOL
    20                              <1> ; version   VER
    21                              <1> ; memory    MEM
    22                              <1> ;----------------------------------------------------
    23                              <1> dir:
    24                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    25 00001AB0 C605(74050000)00    <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    26 00001AB7 C605(75050000)00    <1>     mov byte [dirLineCtr], 0
    27 00001ABE C705(76050000)0000- <1>     mov dword [dirFileCtr], 0
    27 00001AC6 0000                <1>
    28 00001AC8 C605(7B050000)00    <1>     mov byte [dirSrchDir], 0
    29 00001ACF 66C705(70040000)00- <1>     mov word [searchSpec], 0
    29 00001AD7 00                  <1>
    30 00001AD8 488D3D(FD050000)    <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    31 00001ADF C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    32 00001AE2 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????" ;Do not change this as we need the ? for searching
    32 00001AEB 3F                  <1>
    33 00001AEC 48894701            <1>     mov qword [rdi + fcb.filename], rax
    34 00001AF0 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    35                              <1>     ;Start by scanning for the switches
    36 00001AF7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    37 00001AFE 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    38                              <1> .scanNew:
    39 00001B01 E8732A0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    40 00001B06 AC                  <1>     lodsb   ;Get this char
    41 00001B07 3C0D                <1>     cmp al, CR
    42 00001B09 744D                <1>     je .scanDone
    43 00001B0B 3A05FAE4FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    44 00001B11 7524                <1>     jne .notSwitch
    45 00001B13 AC                  <1>     lodsb   ;Get the next char
    46 00001B14 E8452A0000          <1>     call ucChar
    47 00001B19 3C57                <1>     cmp al, "W"
    48 00001B1B 7509                <1>     jne .notWide
    49 00001B1D 800D(74050000)01    <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    50 00001B24 EBDB                <1>     jmp short .scanNew
    51                              <1> .notWide:
    52 00001B26 3C50                <1>     cmp al, "P"
    53 00001B28 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    54 00001B2E 800D(74050000)02    <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    55 00001B35 EBCA                <1>     jmp short .scanNew
    56                              <1> .notSwitch:
    57 00001B37 F605(74050000)04    <1>     test byte [dirFlags], dirFileType
    58 00001B3E 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    59                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    60 00001B44 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    61 00001B47 E8B92B0000          <1>     call copyArgumentToSearchSpec   
    62 00001B4C 48FFCE              <1>     dec rsi ;Point back to the terminator char
    63 00001B4F 800D(74050000)04    <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    64 00001B56 EBA9                <1>     jmp short .scanNew
    65                              <1> .scanDone:
    66 00001B58 F605(74050000)04    <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    67 00001B5F 7438                <1>     jz .currentDrv
    68                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    69 00001B61 488D35(70040000)    <1>     lea rsi, searchSpec
    70 00001B68 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    71 00001B6C 752B                <1>     jne .currentDrv
    72                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    73 00001B6E 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    74 00001B73 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    75 00001B77 B801290000          <1>     mov eax, 2901h   ;Parse filename
    76 00001B7C CD21                <1>     int 21h
    77 00001B7E 3CFF                <1>     cmp al, -1
    78 00001B80 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    79                              <1>     ;Else the drive in the fcb is valid
    80 00001B86 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    81 00001B8B 84C0                <1>     test al, al
    82 00001B8D 740A                <1>     jz .currentDrv
    83 00001B8F FEC8                <1>     dec al  ;Convert to 0 based drive number
    84 00001B91 8805(7A050000)      <1>     mov byte [dirDrv], al
    85 00001B97 EB0B                <1>     jmp short .dirPrintVol
    86                              <1> .currentDrv:
    87 00001B99 E898290000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    88 00001B9E 8805(7A050000)      <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    89                              <1> .dirPrintVol:
    90 00001BA4 488D35(70040000)    <1>     lea rsi, searchSpec
    91                              <1> ;Now construct the path on dirSrchDir.
    92 00001BAB 488D3D(7B050000)    <1>     lea rdi, dirSrchDir
    93 00001BB2 0FB605(7A050000)    <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
    94 00001BB9 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
    95 00001BBB 0441                <1>     add al, "A" ;Turn into a letter
    96 00001BBD B43A                <1>     mov ah, ":"
    97 00001BBF 66AB                <1>     stosw   ;Store X: into the search path
    98 00001BC1 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
    99 00001BC6 CD2F                <1>     int 2fh
   100 00001BC8 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   101 00001BCA 0F849EFEFFFF        <1>     je badDriveError
   102                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   103 00001BD0 8A0534E4FFFF        <1>     mov al, byte [pathSep]
   104 00001BD6 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   105 00001BD8 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   106 00001BDA AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   107 00001BDB FEC2                <1>     inc dl  ;Increment by 1
   108 00001BDD 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   109 00001BE0 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   110 00001BE5 CD21                <1>     int 21h
   111 00001BE7 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   112                              <1>     ;rsi points to the first char in the provided path.
   113                              <1>     ;rdi points to the first char of the cwd.
   114 00001BEA 31C0                <1>     xor eax, eax
   115                              <1> .goToEndOfCwd:
   116                              <1> ;Move to the end of the string, could use repne?
   117 00001BEC 3807                <1>     cmp byte [rdi], al
   118 00001BEE 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   119 00001BF0 48FFC7              <1>     inc rdi
   120 00001BF3 EBF7                <1>     jmp short .goToEndOfCwd
   121                              <1> .prepCopy:
   122 00001BF5 8A050FE4FFFF        <1>     mov al, byte [pathSep]
   123 00001BFB 3806                <1>     cmp byte [rsi], al
   124 00001BFD 7412                <1>     je .copyPathLoop
   125 00001BFF B43A                <1>     mov ah, ":"
   126 00001C01 86C4                <1>     xchg al, ah
   127 00001C03 663947FE            <1>     cmp word [rdi - 2], ax
   128 00001C07 7408                <1>     je .copyPathLoop
   129 00001C09 88E0                <1>     mov al, ah
   130 00001C0B 3847FF              <1>     cmp byte [rdi - 1], al
   131 00001C0E 7401                <1>     je .copyPathLoop
   132 00001C10 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   133                              <1> .copyPathLoop:
   134 00001C11 AC                  <1>     lodsb
   135 00001C12 3A05F2E3FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   136 00001C18 7509                <1>     jne .checkDot  ;If not, store it
   137                              <1> .lpPathseps:
   138 00001C1A 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   139 00001C1C 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   140 00001C1E 48FFC6              <1>     inc rsi
   141 00001C21 EBF7                <1>     jmp short .lpPathseps
   142                              <1> .checkDot:
   143 00001C23 3C2E                <1>     cmp al, "."
   144 00001C25 7407                <1>     je .dots
   145                              <1> .store:
   146 00001C27 AA                  <1>     stosb
   147 00001C28 84C0                <1>     test al, al ;Was the char we just copied a null?
   148 00001C2A 7472                <1>     jz .exitPathCopy
   149 00001C2C EBE3                <1>     jmp short .copyPathLoop
   150                              <1> .dots:
   151                              <1>     ;Here handle dot and dot dot
   152                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   153                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   154                              <1>     ; by 1. If it is null, go to top of loop.
   155                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   156 00001C2E 8A25D6E3FFFF        <1>     mov ah, byte [pathSep]
   157 00001C34 3867FF              <1>     cmp byte [rdi - 1], ah  
   158 00001C37 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   159 00001C39 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   160 00001C3B 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   161 00001C3E 7413                <1>     je .twoDot
   162                              <1>     ;This is only a "current dir" when next char is pathsep or null
   163 00001C40 3A25C4E3FFFF        <1>     cmp ah, byte [pathSep]
   164 00001C46 7406                <1>     je .skipThisPathsep
   165 00001C48 84E4                <1>     test ah, ah
   166 00001C4A 74C5                <1>     jz .copyPathLoop
   167 00001C4C EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   168                              <1> .skipThisPathsep:
   169                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   170 00001C4E 48FFC6              <1>     inc rsi ;Point to the pathsep
   171 00001C51 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   172                              <1> .twoDot:
   173                              <1>     ;Woohoo, this works!
   174 00001C53 48FFC6              <1>     inc rsi ;Move past the second dot
   175 00001C56 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   176 00001C58 3A25ACE3FFFF        <1>     cmp ah, byte [pathSep]
   177 00001C5E 7408                <1>     je .tdOk
   178 00001C60 84E4                <1>     test ah, ah
   179 00001C62 0F85FDFDFFFF        <1>     jne badParamError
   180                              <1> .tdOk:
   181 00001C68 8A059CE3FFFF        <1>     mov al, byte byte [pathSep]
   182 00001C6E 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   183 00001C72 0F84EDFDFFFF        <1>     je badParamError
   184 00001C78 4881EF02000000      <1>     sub rdi, 2
   185 00001C7F 31C9                <1>     xor ecx, ecx
   186 00001C81 FFC9                <1>     dec ecx
   187 00001C83 FD                  <1>     std
   188 00001C84 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   189 00001C86 FC                  <1>     cld
   190 00001C87 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   191 00001C8E 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   192 00001C90 0F847BFFFFFF        <1>     jz .copyPathLoop
   193 00001C96 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   194 00001C99 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   195                              <1> .exitPathCopy:
   196                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   197 00001C9E 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   198 00001CA5 8A055FE3FFFF        <1>     mov al, byte [pathSep]
   199 00001CAB B43A                <1>     mov ah, ":"
   200 00001CAD 86C4                <1>     xchg al, ah
   201 00001CAF 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   202 00001CB3 7409                <1>     je .skipOverwrite
   203 00001CB5 88E0                <1>     mov al, ah
   204 00001CB7 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   205 00001CB9 7503                <1>     jne .skipOverwrite
   206 00001CBB C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   207                              <1> .skipOverwrite:
   208 00001CBE 488D35(7B050000)    <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   209 00001CC5 4889F7              <1>     mov rdi, rsi
   210 00001CC8 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   211 00001CCD CD2F                <1>     int 2fh
   212 00001CCF E83E2A0000          <1>     call scanForWildcards
   213 00001CD4 742D                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   214 00001CD6 4889F2              <1>     mov rdx, rsi
   215 00001CD9 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   216 00001CDD 7424                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   217                              <1> .notNull:
   218 00001CDF B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   219 00001CE4 B8004E0000          <1>     mov eax, 4E00h ;Find first
   220 00001CE9 CD21                <1>     int 21h
   221 00001CEB 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   222                              <1> ;Now we have searched for the file, is a directory?
   223 00001CED F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   224 00001CF4 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   225                              <1>     ;Here we are searching IN a directory. Default search pattern!
   226 00001CF6 31C0                <1>     xor eax, eax
   227 00001CF8 31C9                <1>     xor ecx, ecx
   228 00001CFA FFC9                <1>     dec ecx
   229 00001CFC F2AE                <1>     repne scasb
   230 00001CFE 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   231 00001D01 EB40                <1>     jmp short .wcDefaultSearch
   232                              <1> .wcSearchPattern:
   233                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   234                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   235 00001D03 31C0                <1>     xor eax, eax
   236 00001D05 31C9                <1>     xor ecx, ecx
   237 00001D07 FFC9                <1>     dec ecx
   238 00001D09 F2AE                <1>     repne scasb ;Scan forwards
   239                              <1>     ;Here rdi points past the null at the end
   240 00001D0B 8A05F9E2FFFF        <1>     mov al, byte [pathSep]
   241 00001D11 31C9                <1>     xor ecx, ecx
   242 00001D13 FFC9                <1>     dec ecx
   243 00001D15 FD                  <1>     std ;Search backwards
   244 00001D16 F2AE                <1>     repne scasb
   245 00001D18 FC                  <1>     cld ;Search forwards again
   246 00001D19 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   247 00001D1C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   248 00001D20 7503                <1>     jne .wcsp1
   249 00001D22 48FFC7              <1>     inc rdi ;Go one char forwards
   250                              <1> .wcsp1:
   251                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   252 00001D25 57                  <1>     push rdi
   253 00001D26 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   254 00001D28 7503                <1>     jne .wcsp2
   255 00001D2A 48FFC7              <1>     inc rdi
   256                              <1> .wcsp2:
   257 00001D2D 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   258 00001D30 488D3D(FD050000)    <1>     lea rdi, dirSrchFCB
   259 00001D37 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   260 00001D3C CD21                <1>     int 21h
   261 00001D3E 5F                  <1>     pop rdi
   262 00001D3F 31C0                <1>     xor eax, eax
   263 00001D41 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   264                              <1> .wcDefaultSearch:
   265 00001D43 0FB605(7A050000)    <1>     movzx eax, byte [dirDrv] 
   266 00001D4A E87D150000          <1>     call volume.dirEP
   267 00001D4F 488D1565E7FFFF      <1>     lea rdx, dirMain    ;Print message intro
   268 00001D56 B409                <1>     mov ah, 09h
   269 00001D58 CD21                <1>     int 21h
   270 00001D5A C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   271 00001D5D 488D15(7B050000)    <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   272 00001D64 B409                <1>     mov ah, 09h
   273 00001D66 CD21                <1>     int 21h
   274 00001D68 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   275 00001D6B 488D15FFE3FFFF      <1>     lea rdx, crlf2
   276 00001D72 B409                <1>     mov ah, 09h
   277 00001D74 CD21                <1>     int 21h
   278                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   279                              <1> ;rdi points to the terminating null
   280 00001D76 8A058EE2FFFF        <1>     mov al, byte [pathSep]
   281 00001D7C 3847FF              <1>     cmp byte [rdi - 1], al
   282 00001D7F 7403                <1>     je .root
   283 00001D81 48FFC7              <1>     inc rdi
   284                              <1> .root:
   285 00001D84 48FFCF              <1>     dec rdi ;Point back to the pathsep
   286 00001D87 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   287 00001D88 488D35(FE050000)    <1>     lea rsi, qword [dirSrchFCB + fcb.filename] 
   288 00001D8F 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the filename start in rbp
   289 00001D92 E8BD280000          <1>     call FCBToAsciiz    ;Terminates for free
   290 00001D97 E806000000          <1>     call .wcCompress    ;Tries to compress the name
   291 00001D9C E870000000          <1>     call .searchForFile
   292                              <1>     return
    13                              <2> %%_ret:
    14 00001DA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .wcCompress:
   294                              <1> ;Attempts to compress the name using *'s if possible.
   295                              <1> ;The algorithm above will have translated any input *'s into ?
   296                              <1> ; for pattern matching. Now we reverse any work done by this
   297                              <1> ;First checks the whole thing, then each portion separately.
   298                              <1> ;Input: rbp -> Filename in path to compress
   299 00001DA2 31C0                <1>     xor eax, eax
   300 00001DA4 31C9                <1>     xor ecx, ecx
   301 00001DA6 4889EE              <1>     mov rsi, rbp
   302                              <1> .wcclp:
   303 00001DA9 AC                  <1>     lodsb   ;This string IS guaranteed null terminated so no counter needed
   304 00001DAA 85C0                <1>     test eax, eax   ;Did we just read a null char?
   305 00001DAC 740C                <1>     jz .edgeTest
   306 00001DAE 3C2E                <1>     cmp al, "."
   307 00001DB0 741A                <1>     je .wccExt  ;Branch only when . encountered
   308 00001DB2 3C3F                <1>     cmp al, "?"
   309 00001DB4 75F3                <1>     jne .wcclp
   310 00001DB6 FFC1                <1>     inc ecx ;Add one more ? to the count
   311 00001DB8 EBEF                <1>     jmp short .wcclp
   312                              <1> .edgeTest:
   313 00001DBA 81F908000000        <1>     cmp ecx, 8  ;Did we read 8 chars before this?
   314                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DC0 75(A1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   315 00001DC2 66C745002A2E        <1>     mov word [rbp], "*."   ;Move *.
   316 00001DC8 884502              <1>     mov byte [rbp + 2], al  ;and <NUL>
   317                              <1>     return
    13                              <2> %%_ret:
    14 00001DCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> .wccExt:
   319                              <1> ;rsi now points to the extension, past the .
   320 00001DCC 81F908000000        <1>     cmp ecx, 8
   321 00001DD2 750F                <1>     jne .wccExtGo
   322                              <1> ;Here we can now modify the string
   323 00001DD4 C645002A            <1>     mov byte [rbp], "*"
   324 00001DD8 C645012E            <1>     mov byte [rbp + 1], "."
   325                              <1> ;Now copy the extension over
   326 00001DDC 488D7D02            <1>     lea rdi, qword [rbp + 2]
   327 00001DE0 57                  <1>     push rdi
   328 00001DE1 A5                  <1>     movsd   ;In this is the null too, no harm done by pulling up
   329 00001DE2 5E                  <1>     pop rsi ;Start sourcing chars here again, past dot
   330                              <1> .wccExtGo:
   331 00001DE3 4889F7              <1>     mov rdi, rsi    ;Save the start of the extension
   332 00001DE6 31C9                <1>     xor ecx, ecx
   333                              <1> .wccExtLp:
   334 00001DE8 AC                  <1>     lodsb
   335 00001DE9 85C0                <1>     test eax, eax
   336                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DEB 74(CB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   337 00001DED 3C3F                <1>     cmp al, "?"
   338                              <1>     ;jne .wccExtLp
   339                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DEF 75(CB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   340 00001DF1 FFC1                <1>     inc ecx
   341 00001DF3 81F903000000        <1>     cmp ecx, 3
   342 00001DF9 75ED                <1>     jne .wccExtLp
   343 00001DFB B82A000000          <1>     mov eax, "*"    ;Upper byte is null
   344 00001E00 668907              <1>     mov word [rdi], ax  ;Store this past the .
   345 00001E03 817D002A2E2A00      <1>     cmp dword [rbp], "*.*"    ;Check if the path is this? Upper byte 0
   346                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001E0A 75(CB)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00001E0C 66894500            <1>     mov word [rbp], ax  ;Replace the string with this instead
   348                              <1>     return
    13                              <2> %%_ret:
    14 00001E10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> 
   351                              <1> .searchForFile:
   352 00001E11 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   353 00001E16 488D15(7B050000)    <1>     lea rdx, dirSrchDir
   354 00001E1D B8004E0000          <1>     mov eax, 4E00h ;Find first
   355 00001E22 CD21                <1>     int 21h
   356 00001E24 720B                <1>     jc .dirNoMoreFiles
   357                              <1> .findNext:
   358 00001E26 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   359 00001E2B B44F                <1>     mov ah, 4Fh
   360 00001E2D CD21                <1>     int 21h
   361 00001E2F 73F5                <1>     jnc .findNext 
   362                              <1> .dirNoMoreFiles:
   363 00001E31 F605(74050000)01    <1>     test byte [dirFlags], dirWideType
   364 00001E38 740B                <1>     jz .dirNoEndNewLine
   365 00001E3A 488D152DE3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   366 00001E41 B409                <1>     mov ah, 09h
   367 00001E43 CD21                <1>     int 21h
   368                              <1> .dirNoEndNewLine:
   369                              <1>     ;Now we print the number of files and the number of bytes on the disk
   370 00001E45 F705(76050000)FFFF- <1>     test dword [dirFileCtr], -1
   370 00001E4D FFFF                <1>
   371 00001E4F 750D                <1>     jnz .filesFound
   372                              <1>     ;Else print File not found and exit!
   373 00001E51 488D15C3E3FFFF      <1>     lea rdx, fnfMsg
   374 00001E58 E8E0240000          <1>     call printString
   375                              <1>     return
    13                              <2> %%_ret:
    14 00001E5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> .filesFound:
   377 00001E5E 8B05(76050000)      <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   378 00001E64 B909000000          <1>     mov ecx, 9
   379 00001E69 E8B8280000          <1>     call printDecimalValLB
   380 00001E6E 488D157FE4FFFF      <1>     lea rdx, dirOk
   381 00001E75 B409                <1>     mov ah, 09h
   382 00001E77 CD21                <1>     int 21h
   383 00001E79 B800360000          <1>     mov eax, 3600h ;Get disk info
   384 00001E7E 8A15(7A050000)      <1>     mov dl, byte [dirDrv]
   385 00001E84 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   386 00001E86 CD21                <1>     int 21h ;Get disk free space info
   387 00001E88 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   388 00001E8B 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   389 00001E8E 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   390 00001E90 F7E1                <1>     mul ecx ;Get bytes per cluster
   391 00001E92 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   392                              <1>     ;rax now has the number of free bytes on the disk
   393 00001E95 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   394 00001E9A E887280000          <1>     call printDecimalValLB
   395 00001E9F 488D1558E4FFFF      <1>     lea rdx, bytesOk
   396 00001EA6 B409                <1>     mov ah, 09h
   397 00001EA8 CD21                <1>     int 21h
   398                              <1>     return
    13                              <2> %%_ret:
    14 00001EAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> 
   400                              <1> .dirPrintFileData:
   401                              <1> ;Use cmdFcb to build the file name with space
   402                              <1> ;Start by print the name (same for both cases)
   403                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   404 00001EAB F605(0B010000)46    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   405                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001EB2 75(AA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 00001EB4 488D35(14010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   407 00001EBB 488D3D(E6000000)    <1>     lea rdi, cmdFcb
   408 00001EC2 E81F270000          <1>     call asciiFilenameToFCB
   409 00001EC7 488D15(E6000000)    <1>     lea rdx, cmdFcb
   410 00001ECE B908000000          <1>     mov ecx, 8  ;Print 8 chars
   411 00001ED3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   412 00001ED8 B440                <1>     mov ah, 40h ;Write handle
   413 00001EDA CD21                <1>     int 21h
   414 00001EDC 52                  <1>     push rdx
   415 00001EDD B220                <1>     mov dl, " "
   416 00001EDF B402                <1>     mov ah, 02h ;Print char
   417 00001EE1 CD21                <1>     int 21h
   418 00001EE3 5A                  <1>     pop rdx
   419 00001EE4 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   420 00001EEB B903000000          <1>     mov ecx, 3  ;Print three chars
   421 00001EF0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   422 00001EF5 B440                <1>     mov ah, 40h ;Write handle
   423 00001EF7 CD21                <1>     int 21h
   424 00001EF9 F605(74050000)01    <1>     test byte [dirFlags], dirWideType
   425 00001F00 757B                <1>     jnz .widePrint
   426                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   427                              <1>     ;Now check if a DIR
   428 00001F02 F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   429 00001F09 7422                <1>     jz .dirPrintNotDir
   430 00001F0B 488D15FAE3FFFF      <1>     lea rdx, dirLbl
   431 00001F12 B409                <1>     mov ah, 09h
   432 00001F14 CD21                <1>     int 21h
   433 00001F16 488D159EE8FFFF      <1>     lea rdx, threeSpc
   434 00001F1D B409                <1>     mov ah, 09h
   435 00001F1F CD21                <1>     int 21h
   436 00001F21 B409                <1>     mov ah, 09h
   437 00001F23 CD21                <1>     int 21h
   438 00001F25 B220                <1>     mov dl, SPC
   439 00001F27 B402                <1>     mov ah, 02h
   440 00001F29 CD21                <1>     int 21h
   441 00001F2B EB1C                <1>     jmp short .dirPrintFileDT
   442                              <1> .dirPrintNotDir:
   443                              <1> ;Here we print the file size
   444 00001F2D B220                <1>     mov dl, " "
   445 00001F2F B402                <1>     mov ah, 02h
   446 00001F31 CD21                <1>     int 21h
   447 00001F33 8B05(10010000)      <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   448 00001F39 B90D000000          <1>     mov ecx, 13
   449 00001F3E E8E3270000          <1>     call printDecimalValLB
   450 00001F43 B220                <1>     mov dl, SPC
   451 00001F45 B402                <1>     mov ah, 02h
   452 00001F47 CD21                <1>     int 21h
   453                              <1> .dirPrintFileDT:
   454 00001F49 0FB705(0E010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00001F50 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00001F52 E8B0210000          <1>     call printDate
   457 00001F57 488D155DE8FFFF      <1>     lea rdx, threeSpc
   458 00001F5E B409                <1>     mov ah, 09h
   459 00001F60 CD21                <1>     int 21h
   460 00001F62 0FB705(0C010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00001F69 E8BF220000          <1>     call printTime
   462 00001F6E 488D15F9E1FFFF      <1>     lea rdx, crlf
   463 00001F75 B409                <1>     mov ah, 09h
   464 00001F77 CD21                <1>     int 21h
   465 00001F79 B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 00001F7B EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 00001F7D 488D1536E8FFFF      <1>     lea rdx, fourSpc
   470 00001F84 B409                <1>     mov ah, 09h ;Print string
   471 00001F86 CD21                <1>     int 21h
   472 00001F88 B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 00001F8A FF05(76050000)      <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 00001F90 FE05(75050000)      <1>     inc byte [dirLineCtr]
   476 00001F96 3805(75050000)      <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F9C 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F9E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00001F9F F605(74050000)02    <1>     test byte [dirFlags], dirPageType
   479 00001FA6 741A                <1>     jz .dirPrnNoPag
   480 00001FA8 488D1584E3FFFF      <1>     lea rdx, pauseMes
   481 00001FAF B409                <1>     mov ah, 09h
   482 00001FB1 CD21                <1>     int 21h
   483 00001FB3 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 00001FB5 CD21                <1>     int 21h
   485 00001FB7 488D15B0E1FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00001FBE B409                <1>     mov ah, 09h
   487 00001FC0 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00001FC2 C605(75050000)00    <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00001FC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00001FCA F6057AE0FFFFFF      <1>     test byte [arg1Flg], -1
   494 00001FD1 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00001FD3 E8DA230000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 00001FD8 E859230000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 00001FDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00001FDE 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00001FE2 88D0                <1>     mov al, dl
   504 00001FE4 0440                <1>     add al, "@" ;Get the UC letter
   505 00001FE6 B43A                <1>     mov ah, ":"
   506 00001FE8 488D3D(70040000)    <1>     lea rdi, searchSpec
   507 00001FEF 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00001FF1 8A0513E0FFFF        <1>     mov al, byte [pathSep]
   509 00001FF7 AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 00001FF8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 00001FFA 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 00001FFD CD21                <1>     int 21h
   513 00001FFF E850250000          <1>     call strlen
   514 00002004 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000200A B440                <1>     mov ah, 40h ;Write to handle
   516 0000200C BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002011 488D15(70040000)    <1>     lea rdx, searchSpec
   518 00002018 CD21                <1>     int 21h
   519 0000201A E817230000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 0000201F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002020 8A0527E0FFFF        <1>     mov al, byte [arg1FCBret]
   523 00002026 3CFF                <1>     cmp al, -1 
   524 00002028 0F8440FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 0000202E E8BA260000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002033 488D15(70040000)    <1>     lea rdx, searchSpec
   527 0000203A B43B                <1>     mov ah, 3Bh ;CHDIR
   528 0000203C CD21                <1>     int 21h
   529 0000203E 0F8257FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002044 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 00002045 F605FFDFFFFFFF      <1>     test byte [arg1Flg], -1
   534 0000204C 0F8425FAFFFF        <1>     jz badArgError
   535 00002052 F605F5DFFFFFFF      <1>     test byte [arg2Flg], -1
   536 00002059 0F8518FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 0000205F 8A05E8DFFFFF        <1>     mov al, byte [arg1FCBret]
   539 00002065 3CFF                <1>     cmp al, -1 
   540 00002067 0F8401FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 0000206D E87B260000          <1>     call buildCommandPath
   542 00002072 488D15(70040000)    <1>     lea rdx, searchSpec
   543 00002079 B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 0000207E CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002080 73(44)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 00002082 488D15DEE3FFFF      <1>     lea rdx, badMD
   548 00002089 E9AF220000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 0000208E F605B6DFFFFFFF      <1>     test byte [arg1Flg], -1
   552 00002095 0F84DCF9FFFF        <1>     jz badArgError
   553 0000209B F605ACDFFFFFFF      <1>     test byte [arg2Flg], -1
   554 000020A2 0F85CFF9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000020A8 8A059FDFFFFF        <1>     mov al, byte [arg1FCBret]
   557 000020AE 3CFF                <1>     cmp al, -1 
   558 000020B0 0F84B8F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 000020B6 E832260000          <1>     call buildCommandPath
   560 000020BB 488D15(70040000)    <1>     lea rdx, searchSpec
   561 000020C2 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 000020C7 CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020C9 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020CB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 000020CC 488D15B1E3FFFF      <1>     lea rdx, badRD
   566 000020D3 E965220000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 000020D8 66C705(41070000)FF- <1>     mov word [sourceHdl], -1
   569 000020E0 FF                  <1>
   570 000020E1 66C705(43070000)FF- <1>     mov word [destHdl], -1
   570 000020E9 FF                  <1>
   571 000020EA 66C705(45070000)FF- <1>     mov word [srcHdlInfo], -1
   571 000020F2 FF                  <1>
   572 000020F3 C605(55070000)00    <1>     mov byte [bCpFlg], 0    ;State flag!
   573 000020FA 48C705(47070000)00- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002102 000000              <1>
   574 00002105 66C705(4F070000)00- <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   574 0000210D 00                  <1>
   575 0000210E C705(51070000)0000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 00002116 0000                <1>
   576 00002118 C605(11060000)00    <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 0000211F C605(93060000)00    <1>     mov byte [destSpec], 0
   578 00002126 48C705(15070000)00- <1>     mov qword [srcPtr], 0
   578 0000212E 000000              <1>
   579 00002131 48C705(1D070000)00- <1>     mov qword [destPtr], 0
   579 00002139 000000              <1>
   580 0000213C B800540000          <1>     mov eax, 5400h  ;Get verify flag
   581 00002141 CD21                <1>     int 21h
   582 00002143 8805(40070000)      <1>     mov byte [verifyFlg], al    ;Save verify flag!
   583                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   584                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   585                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   586 00002149 B800520000          <1>     mov eax, 5200h
   587 0000214E CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   588 00002150 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   589 00002154 89CB                <1>     mov ebx, ecx
   590 00002156 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   591 00002159 B800480000          <1>     mov eax, 4800h
   592 0000215E CD21                <1>     int 21h
   593 00002160 731E                <1>     jnc .bufOk
   594 00002162 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   595 00002164 750C                <1>     jnz .okSize
   596                              <1> .badAlloc:
   597                              <1> ;Not enough memory error!
   598 00002166 488D156AE1FFFF      <1>     lea rdx, cpNoMem
   599 0000216D E930F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   600                              <1> .okSize:
   601 00002172 89D9                <1>     mov ecx, ebx    
   602 00002174 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   603 00002177 B800480000          <1>     mov eax, 4800h
   604 0000217C CD21                <1>     int 21h
   605 0000217E 72E6                <1>     jc .badAlloc
   606                              <1> .bufOk:
   607 00002180 488905(47070000)    <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   608 00002187 66890D(4F070000)    <1>     mov word [wCpBufSz], cx     ;Save buffer size
   609 0000218E E8A6070000          <1>     call copyParse      ;Do Mode 3 prescan
   610 00002193 0F82B1F8FFFF        <1>     jc badSyntaxError
   611 00002199 85C9                <1>     test ecx, ecx   
   612 0000219B 0F84A9F8FFFF        <1>     jz badSyntaxError
   613                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   614 000021A1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   615 000021A8 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   616 000021B0 FFC9                <1>     dec ecx ;Turn into offset
   617 000021B2 4801CE              <1>     add rsi, rcx
   618 000021B5 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   619 000021B7 FD                  <1>     std ;Go in reverse
   620                              <1> .sd:    ;At this point, any switch chars affect destination!
   621 000021B8 E8BC230000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   622 000021BD 8A0548DEFFFF        <1>     mov al, byte [switchChar]
   623 000021C3 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   624 000021C6 7509                <1>     jne .noSwitch
   625                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   626 000021C8 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   627 000021CC 50                  <1>     push rax        ;Push the switchchar
   628 000021CD FFC2                <1>     inc edx         ;Inc the counter
   629 000021CF EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   630                              <1> .noSwitch:
   631                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   632 000021D1 85D2                <1>     test edx, edx
   633 000021D3 7412                <1>     jz .noDestSwitch
   634                              <1> .ns1:
   635 000021D5 58                  <1>     pop rax ;Pop the switch char
   636 000021D6 B304                <1>     mov bl, ascDes
   637 000021D8 E870040000          <1>     call .doSwitchRev
   638 000021DD 0F85DB040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   639 000021E3 FFCA                <1>     dec edx
   640 000021E5 75EE                <1>     jnz .ns1
   641                              <1> .noDestSwitch:
   642                              <1> ;Now search for the starting delimiter or start of line
   643 000021E7 48FFC6              <1>     inc rsi ;Go to the last char in the path
   644                              <1> .noSwitchLp:
   645 000021EA AC                  <1>     lodsb   ;Get char at rsi, go back a char
   646 000021EB E897230000          <1>     call isALdelimiter
   647 000021F0 7412                <1>     je .destFnd
   648 000021F2 8A0513DEFFFF        <1>     mov al, byte [switchChar]
   649 000021F8 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   650 000021FB 7404                <1>     je .se  ;Jump if so!
   651 000021FD FFC9                <1>     dec ecx ;One less char left to search
   652 000021FF EBE9                <1>     jmp short .noSwitchLp
   653                              <1> .se:
   654 00002201 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   655                              <1> .destFnd:
   656 00002204 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   657 0000220B FC                  <1>     cld 
   658 0000220C 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   659 0000220F 488D3D(93060000)    <1>     lea rdi, destSpec
   660 00002216 57                  <1>     push rdi
   661 00002217 E88E240000          <1>     call cpDelimPathToBufz ;Copy this over!   
   662 0000221C 5F                  <1>     pop rdi
   663 0000221D E80E240000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   664 00002222 48893D(1D070000)    <1>     mov qword [destPtr], rdi
   665 00002229 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   666 0000222D 7517                <1>     jne .destEnd    ;Dont worry
   667 0000222F 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   668 00002231 E828230000          <1>     call ucChar             ;Make sure we UC the drive letter
   669 00002236 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   670 00002238 4881C702000000      <1>     add rdi, 2              ;Point to this null
   671 0000223F 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Store chars over the null
   672                              <1> .destEnd:
   673                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   674 00002246 8025(55070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   675 0000224D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   676                              <1> .srcLp: ;Jump to with rsi pointing to portion of the cmdline to scan
   677 00002254 E820230000          <1>     call skipDelimiters 
   678 00002259 8A05ACDDFFFF        <1>     mov al, byte [switchChar]
   679 0000225F 3806                <1>     cmp byte [rsi], al
   680 00002261 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   681                              <1>     ;rsi points to switch after switchchar
   682 00002263 B301                <1>     mov bl, ascSrc
   683 00002265 E8DD030000          <1>     call .doSwitch
   684 0000226A 0F854E040000        <1>     jnz .badExit
   685 00002270 4881C602000000      <1>     add rsi, 2
   686 00002277 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   687                              <1> .noSrcSw:
   688 00002279 4839F5              <1>     cmp rbp, rsi
   689 0000227C 7527                <1>     jne .noSameSrcDest
   690                              <1>     ;Here if the destination we specified earlier is the same as the source
   691                              <1>     ;This means, the actual destination is the current default drive
   692                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   693 0000227E E8B3220000          <1>     call getCurrentDrive    ;Get current drive
   694 00002283 0441                <1>     add al, "A"             ;Turn into a drive letter
   695 00002285 B43A                <1>     mov ah, ":"
   696 00002287 0FB7C0              <1>     movzx eax, ax
   697 0000228A 8905(93060000)      <1>     mov dword [destSpec], eax   ;Add a default null terminator
   698 00002290 488D3D(95060000)    <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   699 00002297 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   700 0000229E 800D(55070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   701                              <1> .noSameSrcDest:
   702 000022A5 488D3D(11060000)    <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   703 000022AC 57                  <1>     push rdi
   704 000022AD E8F8230000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   705 000022B2 5F                  <1>     pop rdi
   706                              <1>     ;Now go forwards and pick up any more switches.
   707 000022B3 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   708                              <1> .swSrcSwPost:
   709 000022B6 E8BE220000          <1>     call skipDelimiters ;Skips trailing delimiters
   710 000022BB 8A054ADDFFFF        <1>     mov al, byte [switchChar]
   711 000022C1 3806                <1>     cmp byte [rsi], al
   712 000022C3 7516                <1>     jne .swSrcSwPostExit
   713                              <1>     ;rsi points to switch after switchchar
   714 000022C5 B301                <1>     mov bl, ascSrc
   715 000022C7 E87B030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   716 000022CC 0F85EC030000        <1>     jnz .badExit
   717 000022D2 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   718 000022D9 EBDB                <1>     jmp short .swSrcSwPost
   719                              <1> .swSrcSwPostExit:
   720 000022DB 4889FE              <1>     mov rsi, rdi
   721 000022DE E82F240000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   722 000022E3 7507                <1>     jnz .oneCp
   723 000022E5 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   724                              <1> .oneCp:
   725 000022EC E83F230000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   726 000022F1 48893D(15070000)    <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   727 000022F8 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   728 000022FC 7517                <1>     jne .srcEnd             ;Dont worry
   729 000022FE 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   730 00002300 E859220000          <1>     call ucChar             ;Make sure we UC the drive letter
   731 00002305 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   732 00002307 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   733 0000230E 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   734                              <1> .srcEnd:
   735                              <1> ;Now uppercase both paths
   736 00002315 488D35(11060000)    <1>     lea rsi, srcSpec
   737 0000231C E849220000          <1>     call normalisePath
   738 00002321 488D3D(93060000)    <1>     lea rdi, destSpec
   739 00002328 E83D220000          <1>     call normalisePath
   740 0000232D 57                  <1>     push rdi
   741 0000232E F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy
   742 00002335 7412                <1>     jz .notm3
   743                              <1> ;Now we scan for a + in the src spc and if one is found, overwrite it with a <NUL>
   744 00002337 4889F7              <1>     mov rdi, rsi    ;Get the src string in rdi
   745 0000233A E815220000          <1>     call strlen 
   746 0000233F B02B                <1>     mov al, "+"
   747 00002341 F2AE                <1>     repne scasb 
   748 00002343 7504                <1>     jne .notm3  ;If not equal, exit
   749 00002345 C647FF00            <1>     mov byte [rdi - 1], 0
   750                              <1> .notm3:
   751                              <1> ;Now establish if the source is a directory or not!
   752 00002349 5F                  <1>     pop rdi ;Get back the destspec ptr
   753 0000234A F605(55070000)08    <1>     test byte [bCpFlg], wcSrc
   754 00002351 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   755 00002353 488D15(11060000)    <1>     lea rdx, srcSpec
   756 0000235A 4889D6              <1>     mov rsi, rdx
   757 0000235D 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   758 0000235F 80FC3A              <1>     cmp ah, ":"
   759 00002362 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   760 00002364 AC                  <1>     lodsb           ;Get char past :
   761 00002365 84C0                <1>     test al, al     ;Is byte three nul?
   762 00002367 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   763 00002369 3A059BDCFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   764 0000236F 7515                <1>     jne .isSrcDir
   765 00002371 AC                  <1>     lodsb           ;Get char past char past "X:\"
   766 00002372 84C0                <1>     test al, al     
   767 00002374 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   768                              <1> .srcStorWc:
   769                              <1> ;rsi points past the char to store the WC at
   770 00002376 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   771 0000237D 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   772 00002384 EB44                <1>     jmp short .checkDestDir
   773                              <1> .isSrcDir:
   774 00002386 B910000000          <1>     mov ecx, dirDirectory
   775 0000238B B8004E0000          <1>     mov eax, 4E00h
   776 00002390 CD21                <1>     int 21h
   777 00002392 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   778                              <1>     ;Was the file we found actually a directory?
   779 00002394 803D(0B010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   780 0000239B 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   781 0000239D 4889D7              <1>     mov rdi, rdx
   782 000023A0 E8AF210000          <1>     call strlen
   783 000023A5 FFC9                <1>     dec ecx
   784 000023A7 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   785 000023AA 8A055ADCFFFF        <1>     mov al, byte [pathSep]
   786 000023B0 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   787 000023B3 7401                <1>     je .srctpsp
   788 000023B5 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   789                              <1> .srctpsp:
   790 000023B6 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   791 000023BD B82A2E2A00          <1>     mov eax, "*.*"
   792 000023C2 AB                  <1>     stosd   ;Store the WC with terminating nul!
   793 000023C3 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   794                              <1> .checkDestDir:
   795                              <1> ;Now establish if destination is a directory or not!
   796 000023CA F605(55070000)20    <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   797 000023D1 0F8562010000        <1>     jnz .mod1
   798 000023D7 488D35(93060000)    <1>     lea rsi, destSpec
   799 000023DE 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   800 000023E0 80FC3A              <1>     cmp ah, ":"
   801 000023E3 751A                <1>     jne .isDestDir
   802 000023E5 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   803 000023E7 84C0                <1>     test al, al ;Is byte three nul?
   804 000023E9 0F844A010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   805 000023EF 84E4                <1>     test ah, ah ;Is byte four nul?
   806 000023F1 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   807 000023F3 3A0511DCFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   808 000023F9 0F843A010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   809                              <1> .isDestDir:
   810                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   811 000023FF 488D15(93060000)    <1>     lea rdx, destSpec
   812 00002406 B910000000          <1>     mov ecx, dirDirectory
   813 0000240B B8004E0000          <1>     mov eax, 4E00h
   814 00002410 CD21                <1>     int 21h
   815 00002412 7237                <1>     jc .mod2
   816                              <1>     ;Was the file we found actually a directory?
   817 00002414 803D(0B010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   818 0000241B 752E                <1>     jne .mod2
   819                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   820                              <1>     ;If not, we need to place one there!
   821 0000241D 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   822 00002420 E82F210000          <1>     call strlen
   823 00002425 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   824 00002427 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   825 0000242A 0FB605D9DBFFFF      <1>     movzx eax, byte [pathSep]
   826 00002431 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   827 00002434 0F84FF000000        <1>     je .mod1        ;If so, skip adding another one!
   828 0000243A 66AB                <1>     stosw           ;Else, store the pathsep and null!
   829 0000243C 48FFCF              <1>     dec rdi         ;Point back to null
   830 0000243F 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Save this pointer
   831 00002446 E9EE000000          <1>     jmp .mod1
   832                              <1> .mod2:
   833                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   834                              <1> ; to rename wildcard semantics. Always run through this as the destination
   835                              <1> ; name may have wildcards in it! But we don't add any.
   836 0000244B 800D(55070000)40    <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   837 00002452 488D35(93060000)    <1>     lea rsi, destSpec
   838 00002459 E8B4220000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   839 0000245E 7407                <1>     jz .m2Wc
   840 00002460 800D(55070000)10    <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   841                              <1> .m2Wc:
   842                              <1> ;Search for the source file
   843 00002467 488D15(11060000)    <1>     lea rdx, srcSpec
   844 0000246E 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   845 00002470 B8004E0000          <1>     mov eax, 4E00h
   846 00002475 CD21                <1>     int 21h
   847 00002477 0F8237020000        <1>     jc .badSrcFile
   848 0000247D 488B35(1D070000)    <1>     mov rsi, qword [destPtr]
   849 00002484 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   850 00002488 B801290000          <1>     mov eax, 2901h
   851 0000248D CD21                <1>     int 21h
   852                              <1> .md2Lp:
   853 0000248F 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   854 00002496 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   855 0000249A B801290000          <1>     mov eax, 2901h
   856 0000249F CD21                <1>     int 21h  
   857                              <1> ;Now depending on source and dest patterns, build a filename in renName
   858 000024A1 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   859 000024A5 488D3D(25070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
   860 000024AC 57                  <1>     push rdi
   861 000024AD 48A5                <1>     movsq
   862 000024AF 66A5                <1>     movsw
   863 000024B1 A4                  <1>     movsb
   864 000024B2 5F                  <1>     pop rdi
   865 000024B3 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   866 000024B7 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   867                              <1> .md2NameMake:
   868 000024BC AC                  <1>     lodsb   ;Get the char from the source string
   869 000024BD 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   870 000024C0 7502                <1>     jne .noStore    ;Dont store the char there
   871 000024C2 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   872                              <1> .noStore:
   873 000024C4 48FFC7              <1>     inc rdi ;Goto next char position
   874 000024C7 FFC9                <1>     dec ecx
   875 000024C9 75F1                <1>     jnz .md2NameMake
   876 000024CB 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   877 000024D2 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
   878 000024D9 E85D200000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   879 000024DE 488D35(25070000)    <1>     lea rsi, renName
   880 000024E5 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
   881 000024EC E863210000          <1>     call FCBToAsciiz
   882 000024F1 E825010000          <1>     call .prntFilespec  ;Prints the source filename
   883 000024F6 E8F8010000          <1>     call copyMain       ;And copy it!
   884 000024FB 731D                <1>     jnc .md2Ok
   885                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   886                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   887 000024FD 3CFD                <1>     cmp al, -3
   888 000024FF 0F848C010000        <1>     je .badBinCdevErr
   889 00002505 3CFE                <1>     cmp al, -2
   890 00002507 0F848D010000        <1>     je .rootDirFull
   891 0000250D 3CFF                <1>     cmp al, -1      ;Source and destination same?
   892 0000250F 0F848E010000        <1>     je .badSameFile 
   893 00002515 E9A4010000          <1>     jmp .badExit    ;Else generic error message
   894                              <1> .md2Ok:
   895 0000251A F605(55070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   896 00002521 0F8489000000        <1>     jz .copyDone        ;Copy complete!
   897 00002527 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   898 0000252C CD21                <1>     int 21h
   899 0000252E 0F827C000000        <1>     jc .copyDone        ;If no more files, we are done!
   900 00002534 E956FFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   901                              <1> .mod1:
   902                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   903 00002539 800D(55070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   904 00002540 488D15(11060000)    <1>     lea rdx, srcSpec
   905 00002547 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   906 00002549 B8004E0000          <1>     mov eax, 4E00h
   907 0000254E CD21                <1>     int 21h
   908 00002550 0F825E010000        <1>     jc .badSrcFile  ;File not found error!!
   909                              <1> .mod1Lp:
   910 00002556 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   911 0000255D 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
   912 00002564 E8E11F0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   913 00002569 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
   914 00002570 E8D51F0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   915 00002575 E8A1000000          <1>     call .prntFilespec
   916 0000257A E874010000          <1>     call copyMain   ;And copy it!
   917 0000257F 731D                <1>     jnc .mod1Ok
   918                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   919                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   920 00002581 3CFD                <1>     cmp al, -3
   921 00002583 0F8408010000        <1>     je .badBinCdevErr
   922 00002589 3CFE                <1>     cmp al, -2
   923 0000258B 0F8409010000        <1>     je .rootDirFull
   924 00002591 3CFF                <1>     cmp al, -1      ;Source and destination same?
   925 00002593 0F840A010000        <1>     je .badSameFile 
   926 00002599 E920010000          <1>     jmp .badExit    ;Else generic error message
   927                              <1> .mod1Ok:
   928 0000259E F605(55070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   929 000025A5 7409                <1>     jz .copyDone
   930 000025A7 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   931 000025AC CD21                <1>     int 21h
   932 000025AE 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   933                              <1> 
   934                              <1> .copyDone:
   935 000025B0 F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy ;If not mode 3, just exit!
   936 000025B7 743E                <1>     jz .cdNotM3
   937                              <1> ;Else, we advance the pointers and jump again!
   938 000025B9 488B35(38070000)    <1>     mov rsi, qword [pNextFspec]
   939 000025C0 483B35(30070000)    <1>     cmp rsi, qword [pLastFspec] ;Did we check the last section?
   940 000025C7 742E                <1>     je .cdNotM3                 ;If yes, we are done!
   941                              <1> .cdM3lp:
   942 000025C9 E8B4030000          <1>     call copyParse.gotoVar      ;Else move rsi to the var
   943 000025CE 3C0D                <1>     cmp al, CR
   944 000025D0 7425                <1>     je .cdNotM3
   945 000025D2 3C2B                <1>     cmp al, "+"
   946 000025D4 740B                <1>     je .cdPlus
   947 000025D6 E8C2030000          <1>     call copyParse.skipVar  ;Go to the end of the var (guaranteed @ a +)
   948 000025DB 3C0D                <1>     cmp al, CR
   949 000025DD 7418                <1>     je .cdNotM3
   950 000025DF EBE8                <1>     jmp short .cdM3lp
   951                              <1> .cdPlus:
   952 000025E1 48FFC6              <1>     inc rsi ;Go past the + sign
   953 000025E4 488935(38070000)    <1>     mov qword [pNextFspec], rsi ;Store this ptr
   954 000025EB 8025(55070000)94    <1>     and byte [bCpFlg], mod3Cpy|oneDest|ascDes   ;Clear flags except 4 dest
   955 000025F2 E95DFCFFFF          <1>     jmp .srcLp
   956                              <1> .cdNotM3:
   957 000025F7 E8CC000000          <1>     call .copyCleanup   ;Clean up resources!
   958 000025FC 8B05(51070000)      <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   959 00002602 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   960 00002607 E81A210000          <1>     call printDecimalValLB   ;n File(s) copied
   961 0000260C 488D15B2DCFFFF      <1>     lea rdx, copyOk
   962 00002613 B800090000          <1>     mov eax, 0900h
   963 00002618 CD21                <1>     int 21h    
   964                              <1>     return
    13                              <2> %%_ret:
    14 0000261A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   965                              <1> 
   966                              <1> .prntFilespec:
   967                              <1> ;Prints the filespec to STDOUT. If the path is 
   968 0000261B F605(55070000)88    <1>     test byte [bCpFlg], wcSrc|mod3Cpy   ;If no wc or mode 3 don't print name
   969                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002622 74(1A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   970 00002624 488D15(11060000)    <1>     lea rdx, srcSpec
   971 0000262B 4889D7              <1>     mov rdi, rdx
   972 0000262E E8211F0000          <1>     call strlen
   973 00002633 FFC9                <1>     dec ecx     ;Drop terminating null
   974 00002635 BB01000000          <1>     mov ebx, 1  ;STDOUT
   975 0000263A B800400000          <1>     mov eax, 4000h  ;Write
   976 0000263F CD21                <1>     int 21h
   977 00002641 E8F01C0000          <1>     call printCRLF
   978                              <1>     return
    13                              <2> %%_ret:
    14 00002646 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   979                              <1> .doSwitch:
   980                              <1> ;Since switches can come before or after a name, handle them here!
   981                              <1> ;If invalid switch char, returns ZF=NZ.
   982                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   983                              <1> ;       rsi -> Switchchar
   984 00002647 56                  <1>     push rsi
   985 00002648 48FFC6              <1>     inc rsi ;Point to char past switchchar
   986 0000264B AC                  <1>     lodsb   ;Get this char, goto next char
   987 0000264C 5E                  <1>     pop rsi
   988                              <1> .doSwitchRev:
   989 0000264D E80C1F0000          <1>     call ucChar
   990 00002652 3C41                <1>     cmp al, "A"
   991 00002654 7510                <1>     jne .cB
   992 00002656 081D(55070000)      <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   993 0000265C 8025(55070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   994                              <1> .cExit:
   995 00002663 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   996                              <1>     return
    13                              <2> %%_ret:
    14 00002665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   997                              <1> .cB:
   998 00002666 3C42                <1>     cmp al, "B"
   999 00002668 7511                <1>     jne .cV
  1000 0000266A F6D3                <1>     not bl  ;Reverse bits
  1001 0000266C 201D(55070000)      <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
  1002 00002672 800D(55070000)02    <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
  1003 00002679 EBE8                <1>     jmp short .cExit
  1004                              <1> .cV:
  1005 0000267B 3C56                <1>     cmp al, "V"
  1006                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000267D 75(65)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1007 0000267F F605(40070000)FF    <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
  1008 00002686 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
  1009                              <1>     ;Else, set it. We return it at the end!
  1010 00002688 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
  1011 0000268D CD21                <1>     int 21h
  1012 0000268F EBD2                <1>     jmp short .cExit
  1013                              <1> 
  1014                              <1> ;COPY Bad Exits!!
  1015                              <1> .badBinCdevErr:
  1016 00002691 488D15E1DEFFFF      <1>     lea rdx, binDevErr
  1017 00002698 EB10                <1>     jmp short .badExitCmn
  1018                              <1> .rootDirFull:
  1019 0000269A 488D15C0DBFFFF      <1>     lea rdx, fulRootDir
  1020 000026A1 EB07                <1>     jmp short .badExitCmn
  1021                              <1> .badSameFile:
  1022 000026A3 488D15CDDBFFFF      <1>     lea rdx, noSelfCopy
  1023                              <1> .badExitCmn:
  1024 000026AA E8F3F3FFFF          <1>     call badCmn     ;Print error message
  1025 000026AF E9FCFEFFFF          <1>     jmp .copyDone   ;Clean resources
  1026                              <1> .badSrcFile:
  1027 000026B4 E8D9F3FFFF          <1>     call badFnf  ;File not found!!
  1028 000026B9 E9F2FEFFFF          <1>     jmp .copyDone
  1029                              <1> .badExit:
  1030 000026BE E8A2F3FFFF          <1>     call badParamError
  1031 000026C3 E9E8FEFFFF          <1>     jmp .copyDone
  1032                              <1> 
  1033                              <1> .copyCleanup:
  1034                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1035                              <1> ;Handles are never open in this process!
  1036 000026C8 B8002E0000          <1>     mov eax, 2E00h
  1037 000026CD 8A05(40070000)      <1>     mov al, byte [verifyFlg]
  1038 000026D3 CD21                <1>     int 21h
  1039 000026D5 4150                <1>     push r8
  1040 000026D7 4C8B05(47070000)    <1>     mov r8, qword [cpBufPtr]
  1041 000026DE 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1042 000026E1 7407                <1>     jz .skipFree
  1043 000026E3 B800490000          <1>     mov eax, 4900h
  1044 000026E8 CD21                <1>     int 21h
  1045                              <1> .skipFree:
  1046 000026EA 4158                <1>     pop r8
  1047 000026EC 0F8271210000        <1>     jc freezePC ;If free fails, man....
  1048                              <1>     return
    13                              <2> %%_ret:
    14 000026F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1049                              <1> 
  1050                              <1> copyMain:
  1051                              <1> ;This is the main copying procedure! 
  1052                              <1> ;Start by checking the two files are not the same. If so, complain!
  1053                              <1> ;If returns CF=CY, error code in al. 
  1054                              <1> ;   If al = -1, same filename error!
  1055                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1056                              <1> ;   If al = -3, attempted binary read from a device
  1057                              <1> ;If returns CF=NC, file copied successfully.
  1058                              <1> ;Check the two files are not the same using truename in searchspec
  1059 000026F3 488D35(11060000)    <1>     lea rsi, srcSpec
  1060 000026FA 488D3D(70040000)    <1>     lea rdi, searchSpec
  1061 00002701 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1062 00002706 CD21                <1>     int 21h 
  1063 00002708 57                  <1>     push rdi    ;Save this searchSpec
  1064 00002709 488D35(93060000)    <1>     lea rsi, destSpec
  1065 00002710 488D3D(F2040000)    <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1066 00002717 B800600000          <1>     mov eax, 6000h
  1067 0000271C CD21                <1>     int 21h
  1068 0000271E 5E                  <1>     pop rsi     ;Get this ptr back
  1069 0000271F B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1070 00002724 CD2F                <1>     int 2Fh
  1071 00002726 755C                <1>     jnz .notSameFile
  1072                              <1> ;Now we check if we are in a concat mode. 
  1073                              <1> ; If in Concat and we are on the first file, just move the file pointer 
  1074                              <1> ; to the end of the file and return.
  1075                              <1> ; If in Concat and we are not on the first file, print content of 
  1076                              <1> ; destination lost and return.
  1077                              <1> ; Else, exist bad.
  1078                              <1> ;Concat is defined as (mod3Cpy or wcSrc) and oneDest
  1079 00002728 0FB605(55070000)    <1>     movzx eax, byte [bCpFlg]   ;Get the flags
  1080 0000272F 89C1                <1>     mov ecx, eax        ;Copy the flags
  1081 00002731 81E110000000        <1>     and ecx, oneDest    ;Isolate for AND
  1082 00002737 743C                <1>     jz .sameNameExit    ;If not set, not in Concat mode
  1083 00002739 2588000000          <1>     and eax, mod3Cpy | wcSrc   ;Compute the OR
  1084 0000273E 89C1                <1>     mov ecx, eax
  1085 00002740 2580000000          <1>     and eax, mod3Cpy    ;Save this bit
  1086 00002745 81E108000000        <1>     and ecx, wcSrc      ;And this bit
  1087 0000274B 09C8                <1>     or eax, ecx         ;Construct a single vale.
  1088 0000274D 7426                <1>     jz .sameNameExit    ;If neither bit was set, we don't have condition.
  1089 0000274F 488D15(93060000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1090 00002756 F705(51070000)FFFF- <1>     test dword [dCpCnt], -1 ;Is this the first file?
  1090 0000275E FFFF                <1>
  1091 00002760 7506                <1>     jnz .notFirstLost   ;If not, we skip this file from copy!
  1092 00002762 E884010000          <1>     call .openFile      ;Moving the fp suffices for the copy
  1093                              <1>     return
    13                              <2> %%_ret:
    14 00002767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1094                              <1> .notFirstLost:
  1095 00002768 488D152CDBFFFF      <1>     lea rdx, filLostErr
  1096 0000276F E8C91B0000          <1>     call printString    ;Print this string and skip this file
  1097                              <1>     return
    13                              <2> %%_ret:
    14 00002774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> .sameNameExit:
  1099 00002775 B0FF                <1>     mov al, -1  ;Same filename error!
  1100                              <1> .badExit:
  1101 00002777 50                  <1>     push rax
  1102 00002778 E8D6000000          <1>     call .exitCleanup
  1103 0000277D 58                  <1>     pop rax
  1104 0000277E F9                  <1>     stc
  1105                              <1>     return
    13                              <2> %%_ret:
    14 0000277F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1106                              <1> .badExitNoSpace:
  1107 00002780 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1108 00002782 EBF3                <1>     jmp short .badExit
  1109                              <1> .notSameFile:
  1110                              <1> ;Open source with read permission
  1111                              <1> ;Open destination with write permission
  1112 00002784 488D15(11060000)    <1>     lea rdx, srcSpec
  1113 0000278B B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1114 00002790 CD21                <1>     int 21h
  1115 00002792 72E3                <1>     jc .badExit
  1116 00002794 668905(41070000)    <1>     mov word [sourceHdl], ax
  1117 0000279B 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1118                              <1> 
  1119 0000279E B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1120 000027A3 CD21                <1>     int 21h
  1121 000027A5 668915(45070000)    <1>     mov word [srcHdlInfo], dx   ;Store information here
  1122 000027AC F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1123 000027AF 7412                <1>     jz .prepCopy
  1124                              <1> ;Check the binary flag was not set on this source filespec
  1125 000027B1 B0FD                <1>     mov al, -3  ;Prep the error code
  1126 000027B3 F605(55070000)02    <1>     test byte [bCpFlg], binSrc
  1127 000027BA 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1128 000027BC 800D(55070000)01    <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1129                              <1> .prepCopy:
  1130 000027C3 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1131 000027C5 488B15(47070000)    <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1132                              <1> .copyLoop:
  1133                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1134                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1135                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1136                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1137 000027CC 0FB70D(4F070000)    <1>     movzx ecx, word [wCpBufSz]
  1138 000027D3 0FB71D(41070000)    <1>     movzx ebx, word [sourceHdl]
  1139 000027DA B8003F0000          <1>     mov eax, 3F00h ;Read
  1140 000027DF CD21                <1>     int 21h
  1141 000027E1 7294                <1>     jc .badExit
  1142 000027E3 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1143 000027E5 F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy
  1144 000027EC 750B                <1>     jnz .doMod3BinCheck
  1145 000027EE F605(55070000)01    <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1146 000027F5 742C                <1>     jz .notAscii
  1147 000027F7 EB09                <1>     jmp short .doAscii
  1148                              <1> .doMod3BinCheck:
  1149 000027F9 F605(55070000)02    <1>     test byte [bCpFlg], binSrc
  1150 00002800 7521                <1>     jnz .notAscii
  1151                              <1> .doAscii:
  1152                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1153 00002802 66F705(45070000)80- <1>     test word [srcHdlInfo], 80H ;Is this a chardev?
  1153 0000280A 00                  <1>
  1154 0000280B 7503                <1>     jnz .charDev
  1155 0000280D 67E343              <1>     jecxz .exitCleanup  ;We read no bytes from disk so can't scan for an EOF!
  1156                              <1> .charDev:
  1157 00002810 50                  <1>     push rax        ;Save the original char count
  1158 00002811 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1159 00002814 B01A                <1>     mov al, EOF
  1160 00002816 F2AE                <1>     repne scasb     ;Loop thru now!
  1161 00002818 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1162 0000281A 59                  <1>     pop rcx         ;Get the original read count into ecx
  1163 0000281B 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1164                              <1> ;Here if EOF found.
  1165 0000281D FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1166 0000281F 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1167 00002821 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1168                              <1> .notAscii:
  1169 00002823 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1170 00002825 742C                <1>     jz .exitCleanup
  1171 00002827 51                  <1>     push rcx    ;Save the number of bytes to write
  1172 00002828 52                  <1>     push rdx    ;Save the buffer ptr
  1173 00002829 E891000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1174 0000282E 5A                  <1>     pop rdx
  1175 0000282F 59                  <1>     pop rcx
  1176 00002830 0F824AFFFFFF        <1>     jc .badExitNoSpace
  1177 00002836 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1178 0000283B CD21                <1>     int 21h
  1179 0000283D 0F8234FFFFFF        <1>     jc .badExit
  1180 00002843 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1181 00002845 0F8535FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1182 0000284B 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1183 0000284D 0F8479FFFFFF        <1>     jz .copyLoop            ;Set possible in ASCII mode
  1184                              <1> .exitCleanup:
  1185                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1186 00002853 F605(55070000)04    <1>     test byte [bCpFlg], ascDes
  1187 0000285A 7425                <1>     jz .ecNoEOF
  1188 0000285C 0FBF1D(43070000)    <1>     movsx ebx, word [destHdl]
  1189 00002863 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1190 00002869 7416                <1>     je .ecNoEOF
  1191 0000286B 488B15(47070000)    <1>     mov rdx, qword [cpBufPtr]
  1192 00002872 C6021A              <1>     mov byte [rdx], EOF
  1193 00002875 B901000000          <1>     mov ecx, 1
  1194 0000287A B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1195 0000287F CD21                <1>     int 21h
  1196                              <1> .ecNoEOF:
  1197                              <1> ;Now close copy handles!
  1198 00002881 668B1D(41070000)    <1>     mov bx, word [sourceHdl]
  1199 00002888 6681FBFFFF          <1>     cmp bx, -1
  1200 0000288D 7410                <1>     je .beSkipSource
  1201 0000288F B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1202 00002894 CD21                <1>     int 21h
  1203 00002896 66C705(41070000)FF- <1>     mov word [sourceHdl], -1    ;Reset the var
  1203 0000289E FF                  <1>
  1204                              <1> .beSkipSource:
  1205 0000289F 668B1D(43070000)    <1>     mov bx, word [destHdl]
  1206 000028A6 6681FBFFFF          <1>     cmp bx, -1
  1207                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000028AB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000028AD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1208 000028AE B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1209 000028B3 CD21                <1>     int 21h
  1210 000028B5 66C705(43070000)FF- <1>     mov word [destHdl], -1  ;Reset the var
  1210 000028BD FF                  <1>
  1211                              <1>     return
    13                              <2> %%_ret:
    14 000028BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1212                              <1> 
  1213                              <1> .getWriteHandle:
  1214                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1215                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1216                              <1> ;Input: Nothing
  1217                              <1> ;Output: CF=NC: bx = Handle to the file
  1218                              <1> ;        CF=CY: File failed to open/create. 
  1219 000028BF 0FB71D(43070000)    <1>     movzx ebx, word [destHdl]
  1220 000028C6 6681FBFFFF          <1>     cmp bx, -1
  1221 000028CB 7402                <1>     je .gwHProceed
  1222 000028CD F8                  <1>     clc     ;Clear the CF
  1223                              <1>     return
    13                              <2> %%_ret:
    14 000028CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1224                              <1> .gwHProceed:
  1225                              <1> ;Here if the destination has not been opened yet!
  1226 000028CF 488D15(93060000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1227                              <1> ;Now we create/reopen the file here!
  1228 000028D6 F605(55070000)10    <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1229 000028DD 743E                <1>     jz .createFile
  1230                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1231                              <1> ;If this is more than file 0, we open
  1232 000028DF 813D(51070000)0000- <1>     cmp dword [dCpCnt], 0
  1232 000028E7 0000                <1>
  1233 000028E9 7432                <1>     je .createFile
  1234                              <1> ;Now we open the file instead and append to the end
  1235                              <1> .openFile:
  1236 000028EB B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1237 000028F0 CD21                <1>     int 21h
  1238                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000028F2 72(CE)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1239 000028F4 FF05(51070000)      <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1240 000028FA 668905(43070000)    <1>     mov word [destHdl], ax
  1241 00002901 0FB7D8              <1>     movzx ebx, ax
  1242 00002904 31C9                <1>     xor ecx, ecx
  1243 00002906 31D2                <1>     xor edx, edx
  1244 00002908 F605(55070000)04    <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1245 0000290F 7404                <1>     jz .gwHNoAscii
  1246 00002911 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1247 00002913 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1248                              <1> .gwHNoAscii:
  1249 00002915 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1250 0000291A CD21                <1>     int 21h
  1251                              <1>     return
    13                              <2> %%_ret:
    14 0000291C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1252                              <1> .createFile:
  1253 0000291D B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1254 00002922 31C9                <1>     xor ecx, ecx    ;No file attributes
  1255 00002924 CD21                <1>     int 21h
  1256                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002926 72(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1257 00002928 FF05(51070000)      <1>     inc dword [dCpCnt]  ;File created for writing!
  1258 0000292E 668905(43070000)    <1>     mov word [destHdl], ax
  1259 00002935 0FB7D8              <1>     movzx ebx, ax
  1260                              <1>     return
    13                              <2> %%_ret:
    14 00002938 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1261                              <1> 
  1262                              <1> copyParse:
  1263                              <1> ;Checks to see if we are in mode 3. If we are, sets up the 
  1264                              <1> ; mode 3 variables. Ignores switches making life so much better.
  1265 00002939 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1266 00002940 488935(38070000)    <1>     mov qword [pNextFspec], rsi     ;Setup this var here
  1267 00002947 31C9                <1>     xor ecx, ecx    ;Use as a filespec counter in a "+ +" region
  1268                              <1> .cp1:
  1269 00002949 E834000000          <1>     call .gotoVar   ;Goto filespec. Move rsi->First non-terminator char or +
  1270 0000294E 3C0D                <1>     cmp al, CR
  1271 00002950 7428                <1>     je .cpExit
  1272 00002952 3C2B                <1>     cmp al, "+"
  1273 00002954 740F                <1>     je .cpPlus
  1274 00002956 FFC1                <1>     inc ecx ;Add another file to the count
  1275 00002958 E840000000          <1>     call .skipVar   ;Goto end of var. Move rsi->First terminator char or +
  1276 0000295D 3C0D                <1>     cmp al, CR
  1277 0000295F 7419                <1>     je .cpExit
  1278 00002961 3C2B                <1>     cmp al, "+"
  1279 00002963 75E4                <1>     jne .cp1 
  1280                              <1> .cpPlus:
  1281                              <1> ;Here we hit a "+"
  1282 00002965 31C9                <1>     xor ecx, ecx    ;Clean this var again
  1283 00002967 800D(55070000)80    <1>     or byte [bCpFlg], mod3Cpy   ;We are in mode 3 if we are here
  1284 0000296E 48FFC6              <1>     inc rsi         ;Go past the + sign
  1285 00002971 488935(30070000)    <1>     mov qword [pLastFspec], rsi ;Save this var as we go
  1286 00002978 EBCF                <1>     jmp short .cp1
  1287                              <1> .cpExit:
  1288 0000297A 81F903000000        <1>     cmp ecx, 3  ;If we have more than 2 files w/o a + between them, syntax err
  1289 00002980 F5                  <1>     cmc         ;Compliment CF to make CF=CY on error!
  1290                              <1>     return
    13                              <2> %%_ret:
    14 00002981 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1291                              <1> .gotoVar:
  1292                              <1> ;Goes to the next variable, plus sign or CR.
  1293                              <1> ;Returns rsi -> First char of the pathspec, + or CR
  1294 00002982 AC                  <1>     lodsb
  1295 00002983 E8FF1B0000          <1>     call isALdelimiter  
  1296 00002988 74F8                <1>     je .gotoVar         ;Skips delimiters
  1297 0000298A 3A057BD6FFFF        <1>     cmp al, byte [switchChar]
  1298 00002990 7507                <1>     jne .vexit
  1299 00002992 E806000000          <1>     call .skipVar   ;Now skip the string after the cmdline switch
  1300 00002997 EBE9                <1>     jmp short .gotoVar  ;And switches
  1301                              <1> .vexit:
  1302 00002999 48FFCE              <1>     dec rsi ;Return back to the break condition char
  1303                              <1>     return
    13                              <2> %%_ret:
    14 0000299C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1304                              <1> .skipVar:
  1305                              <1> ;Goes to the delimiter for this string
  1306 0000299D AC                  <1>     lodsb
  1307 0000299E 3C0D                <1>     cmp al, CR
  1308 000029A0 74F7                <1>     je .vexit
  1309 000029A2 3C2B                <1>     cmp al, "+"
  1310 000029A4 74F3                <1>     je .vexit
  1311 000029A6 E8DC1B0000          <1>     call isALdelimiter
  1312 000029AB 74EC                <1>     je .vexit
  1313 000029AD EBEE                <1>     jmp short .skipVar
  1314                              <1> 
  1315                              <1> 
  1316                              <1> erase:
  1317 000029AF F60595D6FFFFFF      <1>     test byte [arg1Flg], -1
  1318 000029B6 0F84BBF0FFFF        <1>     jz badArgError
  1319                              <1> ;Now copy the argument from the command line to searchspec and null terminate
  1320 000029BC E82C1D0000          <1>     call buildCommandPath
  1321 000029C1 488D3D(70040000)    <1>     lea rdi, searchSpec
  1322 000029C8 E8631C0000          <1>     call findLastPathComponant  ;Ret ptr to last \ or head of string if none
  1323 000029CD 4889FE              <1>     mov rsi, rdi    ;Save the final componant as source fcb parsing below
  1324 000029D0 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 as destination for parse
  1325 000029D4 B80D290000          <1>     mov eax, 290Dh  ;Parse search mask to find if wc and if we have 11 ?s
  1326 000029D9 CD21                <1>     int 21h
  1327 000029DB 3C01                <1>     cmp al, 1
  1328 000029DD 0F858E000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1329                              <1> ;No dirs to handle in here
  1330                              <1> ;Count the number of ?'s, if 11, we print the message
  1331 000029E3 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1332 000029E7 31C9                <1>     xor ecx, ecx
  1333                              <1> .wcScan:
  1334 000029E9 AC                  <1>     lodsb
  1335 000029EA 3C3F                <1>     cmp al, "?"
  1336 000029EC 7536                <1>     jne .findFile
  1337 000029EE FFC1                <1>     inc ecx
  1338 000029F0 81F90B000000        <1>     cmp ecx, 11
  1339 000029F6 75F1                <1>     jne .wcScan
  1340                              <1> .ynmsg:
  1341 000029F8 488D1508DAFFFF      <1>     lea rdx, ynMes
  1342 000029FF E839190000          <1>     call printString
  1343 00002A04 B800010000          <1>     mov eax, 0100h
  1344 00002A09 CD21                <1>     int 21h         ;Get char w/o echo to al
  1345 00002A0B 88C2                <1>     mov dl, al
  1346 00002A0D B823650000          <1>     mov eax, 6523h  ;Get Y/N char
  1347 00002A12 CD21                <1>     int 21h
  1348 00002A14 3D01000000          <1>     cmp eax, 1      ;Check against middle value (indicates Yes)
  1349                              <1>     retb            ;Return to cmd if they don't want it! (Returned 0)
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A19 72(9C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1350 00002A1B 9C                  <1>     pushfq          ;Else save flags 
  1351 00002A1C E815190000          <1>     call printCRLF  ;Print a CRLF
  1352 00002A21 9D                  <1>     popfq
  1353 00002A22 75D4                <1>     jne short .ynmsg    ;If we were not 1, we were 2 so loop again
  1354                              <1> .findFile:
  1355                              <1> ;Now we find first/find next our way through the files
  1356 00002A24 488D15(70040000)    <1>     lea rdx, searchSpec    ;rdx points at searchSpec for findfirst/next
  1357 00002A2B 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1358 00002A2D B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1359 00002A32 CD21                <1>     int 21h
  1360 00002A34 0F8258F0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1361                              <1> ;Now the file was found, we copy the name over, delete and keep going
  1362 00002A3A 4889D7              <1>     mov rdi, rdx    ;Get in rdi the path to find last componant of...
  1363 00002A3D E8EE1B0000          <1>     call findLastPathComponant  ;... and point to it in rdi
  1364 00002A42 4839D7              <1>     cmp rdi, rdx    ;If these are equal, no pathseps found
  1365 00002A45 750C                <1>     jne .goDel
  1366 00002A47 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a drive specifier?
  1367 00002A4B 7506                <1>     jne .goDel
  1368 00002A4D 48FFC7              <1>     inc rdi ;Move rdi past the drive specifier if a purely cd relative del
  1369 00002A50 48FFC7              <1>     inc rdi
  1370                              <1> .goDel:
  1371 00002A53 488D35(14010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1372                              <1> .delNextFile:
  1373                              <1> ;Enter with:
  1374                              <1> ;   rsi -> asciiz name of file to delete
  1375                              <1> ;   rdi -> position in pathname to copy the filename to
  1376                              <1> ;   rdx -> pathname to delete
  1377                              <1> ;rsi, rdi and rdx dont move here.
  1378 00002A5A E8EB1A0000          <1>     call strcpy2    ;Now copy over ASCIIZname to last path componant
  1379 00002A5F B800410000          <1>     mov eax, 4100h  ;Delete File 
  1380 00002A64 CD21                <1>     int 21h         ;If this fails to delete it, ignore the failure
  1381 00002A66 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1382 00002A6B CD21                <1>     int 21h
  1383 00002A6D 73EB                <1>     jnc .delNextFile    
  1384 00002A6F F8                  <1>     clc ;Clear carry to indicate success
  1385                              <1>     return
    13                              <2> %%_ret:
    14 00002A70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1386                              <1> .noWildcard:
  1387                              <1> ;Here we just check that the file was not a directory. If it was, we add
  1388                              <1> ; a \*.*<NUL> over the null terminator
  1389 00002A71 488D15(70040000)    <1>     lea rdx, searchSpec
  1390 00002A78 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1391 00002A7D B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1392 00002A82 CD21                <1>     int 21h
  1393 00002A84 0F8208F0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1394 00002A8A F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1395 00002A91 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1396                              <1>     ;Else, we are dealing with a dir
  1397 00002A93 4889D7              <1>     mov rdi, rdx
  1398 00002A96 31C9                <1>     xor ecx, ecx
  1399 00002A98 FFC9                <1>     dec ecx
  1400 00002A9A F2AE                <1>     repne scasb ;Go to the end of the line!
  1401 00002A9C 48FFCF              <1>     dec rdi
  1402 00002A9F 0FB60564D5FFFF      <1>     movzx eax, byte [pathSep]
  1403 00002AA6 AA                  <1>     stosb
  1404 00002AA7 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1405 00002AAC AB                  <1>     stosd
  1406 00002AAD E946FFFFFF          <1>     jmp .ynmsg    ;Now prompt the y/n message and proceed as normal
  1407                              <1> .delMain:   ;Call with rdx -> buffer!
  1408 00002AB2 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1409 00002AB7 CD21                <1>     int 21h
  1410                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002AB9 73(70)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1411 00002ABB 3C05                <1>     cmp al, errAccDen
  1412 00002ABD 0F8499EFFFFF        <1>     je badAccError ;If the file is RO, fail!
  1413 00002AC3 E9B8EFFFFF          <1>     jmp badFileError
  1414                              <1> 
  1415                              <1> date:
  1416 00002AC8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1417 00002ACF E8A51A0000          <1>     call skipDelimiters
  1418 00002AD4 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1419 00002AD7 7563                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1420                              <1> .init:
  1421                              <1>     ;Else, we do interactive mode!
  1422 00002AD9 488D15AAD8FFFF      <1>     lea rdx, curDate
  1423 00002AE0 B409                <1>     mov ah, 09h
  1424 00002AE2 CD21                <1>     int 21h
  1425 00002AE4 E886190000          <1>     call printFmtDate
  1426                              <1> .noCur:
  1427 00002AE9 488D15ABD8FFFF      <1>     lea rdx, newDate
  1428 00002AF0 B409                <1>     mov ah, 09h
  1429 00002AF2 CD21                <1>     int 21h
  1430 00002AF4 488D15BFD8FFFF      <1>     lea rdx, ukDate
  1431 00002AFB 488D05ABD8FFFF      <1>     lea rax, usDate
  1432 00002B02 488D1DBED8FFFF      <1>     lea rbx, jpDate
  1433 00002B09 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1434 00002B10 480F47D3            <1>     cmova rdx, rbx
  1435 00002B14 480F42D0            <1>     cmovb rdx, rax
  1436 00002B18 B409                <1>     mov ah, 09h
  1437 00002B1A CD21                <1>     int 21h
  1438                              <1> 
  1439 00002B1C 488D15(C3010000)    <1>     lea rdx, cLineBuffer  ;Make sure to use cLineBuffer to preserve F3
  1440 00002B23 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1441 00002B26 B40A                <1>     mov ah, 0Ah
  1442 00002B28 CD21                <1>     int 21h
  1443 00002B2A 52                  <1>     push rdx
  1444 00002B2B E806180000          <1>     call printCRLF
  1445 00002B30 5A                  <1>     pop rdx
  1446 00002B31 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1447                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B35 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B37 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1448                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1449 00002B38 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1450                              <1> .goDate:
  1451 00002B3C 31C0                <1>     xor eax, eax    
  1452 00002B3E 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1453 00002B45 727A                <1>     jb .us
  1454 00002B47 0F87B6000000        <1>     ja .jpn
  1455                              <1>     ;Here for UK style dates
  1456 00002B4D E8D41C0000          <1>     call getByte
  1457 00002B52 725C                <1>     jc .badDate
  1458 00002B54 8805(0F060000)      <1>     mov byte [td3], al  ;Store the day
  1459 00002B5A E80B010000          <1>     call .validSep
  1460 00002B5F 754F                <1>     jne .badDate
  1461 00002B61 E8C01C0000          <1>     call getByte
  1462 00002B66 7248                <1>     jc .badDate
  1463 00002B68 8805(10060000)      <1>     mov byte [td4], al  ;Store month
  1464 00002B6E E8F7000000          <1>     call .validSep
  1465 00002B73 753B                <1>     jne .badDate
  1466 00002B75 E8B81C0000          <1>     call getNum
  1467 00002B7A E8CE000000          <1>     call .doYear    ;Adjusts the year if necessary
  1468 00002B7F 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1469 00002B84 732A                <1>     jae .badDate
  1470 00002B86 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1471                              <1> .writeDate:
  1472 00002B8D E8E7190000          <1>     call skipDelimiters
  1473 00002B92 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1474 00002B95 7519                <1>     jne .badDate
  1475 00002B97 0FB70D(0D060000)    <1>     movzx ecx, word [td1]   ;Get the year
  1476 00002B9E 668B15(0F060000)    <1>     mov dx, word [td3]      ;Read time and date together!
  1477 00002BA5 B8002B0000          <1>     mov eax, 2B00h
  1478 00002BAA CD21                <1>     int 21h
  1479 00002BAC 84C0                <1>     test al, al
  1480                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002BAE 74(37)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1481                              <1> .badDate:
  1482 00002BB0 488D15C4D7FFFF      <1>     lea rdx, badDate
  1483 00002BB7 E881170000          <1>     call printString
  1484 00002BBC E928FFFFFF          <1>     jmp date.noCur
  1485                              <1> .us:
  1486 00002BC1 E8601C0000          <1>     call getByte
  1487 00002BC6 72E8                <1>     jc .badDate
  1488 00002BC8 8805(10060000)      <1>     mov byte [td4], al  ;Store the month
  1489 00002BCE E897000000          <1>     call .validSep
  1490 00002BD3 75DB                <1>     jne .badDate
  1491 00002BD5 E84C1C0000          <1>     call getByte
  1492 00002BDA 72D4                <1>     jc .badDate
  1493 00002BDC 8805(0F060000)      <1>     mov byte [td3], al  ;Store day
  1494 00002BE2 E883000000          <1>     call .validSep
  1495 00002BE7 75C7                <1>     jne .badDate
  1496 00002BE9 E8441C0000          <1>     call getNum
  1497 00002BEE E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1498 00002BF3 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1499 00002BF8 73B6                <1>     jae .badDate
  1500 00002BFA 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1501                              <1> .writeHop:
  1502 00002C01 EB8A                <1>     jmp short .writeDate
  1503                              <1> .jpn:
  1504 00002C03 E82A1C0000          <1>     call getNum
  1505 00002C08 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1506 00002C0D 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1507 00002C12 739C                <1>     jae .badDate
  1508 00002C14 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1509 00002C1B E84A000000          <1>     call .validSep
  1510 00002C20 758E                <1>     jne .badDate
  1511 00002C22 E8FF1B0000          <1>     call getByte
  1512 00002C27 7287                <1>     jc .badDate
  1513 00002C29 8805(0F060000)      <1>     mov byte [td3], al  ;Store the day
  1514 00002C2F E836000000          <1>     call .validSep
  1515 00002C34 0F8576FFFFFF        <1>     jne .badDate
  1516 00002C3A E8E71B0000          <1>     call getByte
  1517 00002C3F 0F826BFFFFFF        <1>     jc .badDate
  1518 00002C45 8805(10060000)      <1>     mov byte [td4], al  ;Store month
  1519 00002C4B EBB4                <1>     jmp short .writeHop
  1520                              <1> .doYear:
  1521 00002C4D 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1522                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C52 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C54 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1523                              <1> ;If the user specifies 80-99 it means 1980-1999
  1524                              <1> ;If the user specifies 00-79 it means 2000-2079
  1525 00002C55 BBD0070000          <1>     mov ebx, 2000
  1526 00002C5A B96C070000          <1>     mov ecx, 1900
  1527 00002C5F 3D50000000          <1>     cmp eax, 80     
  1528 00002C64 0F42CB              <1>     cmovb ecx, ebx
  1529 00002C67 01C8                <1>     add eax, ecx
  1530                              <1>     return
    13                              <2> %%_ret:
    14 00002C69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1531                              <1> .validSep:
  1532 00002C6A AC                  <1>     lodsb           ;Get the char and return
  1533 00002C6B 3C2E                <1>     cmp al, "."
  1534                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C6D 74(69)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1535 00002C6F 3C2F                <1>     cmp al, "/"
  1536                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C71 74(69)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1537 00002C73 3C2D                <1>     cmp al, "-"
  1538                              <1>     return
    13                              <2> %%_ret:
    14 00002C75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1539                              <1> 
  1540                              <1> time:
  1541 00002C76 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1542 00002C7D E8F7180000          <1>     call skipDelimiters
  1543 00002C82 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1544 00002C85 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1545                              <1> .init:
  1546 00002C87 488D1555D7FFFF      <1>     lea rdx, curTime
  1547 00002C8E B409                <1>     mov ah, 09h
  1548 00002C90 CD21                <1>     int 21h
  1549 00002C92 E86F170000          <1>     call printFmtTime
  1550                              <1> .noCur:
  1551 00002C97 488D1556D7FFFF      <1>     lea rdx, newTime
  1552 00002C9E B409                <1>     mov ah, 09h
  1553 00002CA0 CD21                <1>     int 21h
  1554                              <1> 
  1555 00002CA2 488D15(C3010000)    <1>     lea rdx, cLineBuffer  ;Make sure to use cLineBuffer to preserve F3
  1556 00002CA9 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1557 00002CAC B40A                <1>     mov ah, 0Ah
  1558 00002CAE CD21                <1>     int 21h
  1559 00002CB0 52                  <1>     push rdx
  1560 00002CB1 488D15B6D4FFFF      <1>     lea rdx, crlf
  1561 00002CB8 B409                <1>     mov ah, 09h
  1562 00002CBA CD21                <1>     int 21h
  1563 00002CBC 5A                  <1>     pop rdx
  1564 00002CBD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1565                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002CC1 74(75)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1566 00002CC3 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1567                              <1> .goTime:
  1568 00002CC7 C705(0D060000)0000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1568 00002CCF 0000                <1>
  1569 00002CD1 31C0                <1>     xor eax, eax   
  1570 00002CD3 E84E1B0000          <1>     call getByte
  1571 00002CD8 0F8298000000        <1>     jc .badTime         ;Get the number in eax
  1572 00002CDE 8805(0E060000)      <1>     mov byte [td2], al  ;Save hours
  1573 00002CE4 E89E000000          <1>     call .validsep
  1574 00002CE9 0F8587000000        <1>     jne .badTime
  1575 00002CEF E8321B0000          <1>     call getByte
  1576 00002CF4 0F827C000000        <1>     jc .badTime
  1577 00002CFA 8805(0D060000)      <1>     mov byte [td1], al  ;Save minutes
  1578 00002D00 E882000000          <1>     call .validsep
  1579 00002D05 740F                <1>     je .goSec
  1580 00002D07 48FFCE              <1>     dec rsi ;Go back a char
  1581 00002D0A E86A180000          <1>     call skipDelimiters ;Skip any delimiters
  1582 00002D0F 803E0D              <1>     cmp byte [rsi], CR
  1583 00002D12 743E                <1>     je .setTime
  1584 00002D14 EB60                <1>     jmp short .badTime
  1585                              <1> .goSec:
  1586 00002D16 E878000000          <1>     call .checkNum
  1587 00002D1B 7259                <1>     jc .badTime
  1588 00002D1D E8041B0000          <1>     call getByte
  1589 00002D22 7252                <1>     jc .badTime
  1590 00002D24 8805(10060000)      <1>     mov byte [td4], al  ;Save seconds
  1591 00002D2A AC                  <1>     lodsb       ;Move rsi forwards
  1592 00002D2B 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1593 00002D2D 740F                <1>     je .goMsec
  1594 00002D2F 48FFCE              <1>     dec rsi ;Go back a char
  1595 00002D32 E842180000          <1>     call skipDelimiters ;Skip any delimiters
  1596 00002D37 803E0D              <1>     cmp byte [rsi], CR
  1597 00002D3A 7416                <1>     je .setTime
  1598 00002D3C EB38                <1>     jmp short .badTime
  1599                              <1> .goMsec:
  1600 00002D3E E850000000          <1>     call .checkNum
  1601 00002D43 7231                <1>     jc .badTime
  1602 00002D45 E8DC1A0000          <1>     call getByte
  1603 00002D4A 722A                <1>     jc .badTime
  1604 00002D4C 8805(0F060000)      <1>     mov byte [td3], al  ;Save miliseconds
  1605                              <1> .setTime:
  1606 00002D52 E822180000          <1>     call skipDelimiters
  1607 00002D57 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1608 00002D5A 751A                <1>     jne .badTime
  1609 00002D5C 0FB70D(0D060000)    <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1610 00002D63 0FB715(0F060000)    <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1611 00002D6A B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1612 00002D6F CD21                <1>     int 21h
  1613 00002D71 A8FF                <1>     test al, -1
  1614                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D73 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1615                              <1> .badTime:
  1616 00002D76 488D1557D6FFFF      <1>     lea rdx, badTime
  1617 00002D7D E8BB150000          <1>     call printString
  1618 00002D82 E910FFFFFF          <1>     jmp time.noCur
  1619                              <1> .validsep:
  1620 00002D87 AC                  <1>     lodsb
  1621 00002D88 3A05(8A000000)      <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1622                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002D8E 74(75)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1623 00002D90 3C2E                <1>     cmp al, "."
  1624                              <1>     return
    13                              <2> %%_ret:
    14 00002D92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1625                              <1> .checkNum:
  1626 00002D93 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1627 00002D94 48FFCE              <1>     dec rsi
  1628 00002D97 3C30                <1>     cmp al, "0"
  1629 00002D99 7206                <1>     jb .cnbad
  1630 00002D9B 3C39                <1>     cmp al, "9"
  1631 00002D9D 7702                <1>     ja .cnbad
  1632 00002D9F F8                  <1>     clc
  1633                              <1>     return
    13                              <2> %%_ret:
    14 00002DA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1634                              <1> .cnbad:
  1635 00002DA1 F9                  <1>     stc
  1636                              <1>     return
    13                              <2> %%_ret:
    14 00002DA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1637                              <1> ctty:
  1638 00002DA3 F605A1D2FFFFFF      <1>     test byte [arg1Flg], -1
  1639 00002DAA 0F84C7ECFFFF        <1>     jz badArgError
  1640 00002DB0 F60597D2FFFFFF      <1>     test byte [arg2Flg], -1
  1641 00002DB7 0F85BAECFFFF        <1>     jnz badArgError
  1642 00002DBD 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1643 00002DC4 0FB60581D2FFFF      <1>     movzx eax, byte [arg1Off]
  1644 00002DCB 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1645 00002DCE 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1646 00002DD2 750F                <1>     jne .noDrive
  1647 00002DD4 0FB60572D2FFFF      <1>     movzx eax, byte [arg1FCBret]
  1648 00002DDB 3CFF                <1>     cmp al, -1
  1649 00002DDD 0F848BECFFFF        <1>     je badDriveError
  1650                              <1> .noDrive:
  1651                              <1>     ;Now we open the provided file
  1652 00002DE3 E81D190000          <1>     call copyArgumentToSearchSpec
  1653 00002DE8 488D15(70040000)    <1>     lea rdx, searchSpec
  1654                              <1> .loadSwap:
  1655 00002DEF B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1656 00002DF4 CD21                <1>     int 21h
  1657 00002DF6 0F8284ECFFFF        <1>     jc badFileError
  1658 00002DFC 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1659 00002DFF B800440000          <1>     mov eax, 4400h  ;Get device word
  1660 00002E04 CD21                <1>     int 21h
  1661 00002E06 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1662 00002E09 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1663                              <1>     ;Now we set this handle to be STDIO
  1664 00002E0B 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1665 00002E0E 30F6                <1>     xor dh, dh
  1666 00002E10 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1667 00002E15 CD21                <1>     int 21h
  1668                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1669 00002E17 31C9                <1>     xor ecx, ecx    ;STDIN
  1670 00002E19 B800460000          <1>     mov eax, 4600h
  1671 00002E1E CD21                <1>     int 21h
  1672 00002E20 FFC1                <1>     inc ecx         ;STDOUT
  1673 00002E22 B800460000          <1>     mov eax, 4600h
  1674 00002E27 CD21                <1>     int 21h
  1675 00002E29 FFC1                <1>     inc ecx         ;STDERR
  1676 00002E2B B800460000          <1>     mov eax, 4600h
  1677 00002E30 CD21                <1>     int 21h
  1678 00002E32 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1679 00002E37 CD21                <1>     int 21h
  1680                              <1>     return
    13                              <2> %%_ret:
    14 00002E39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1681                              <1> .badCharDev:
  1682 00002E3A 488D15C4D6FFFF      <1>     lea rdx, badDev
  1683 00002E41 B409                <1>     mov ah, 09h
  1684 00002E43 CD21                <1>     int 21h
  1685 00002E45 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1686 00002E47 CD21                <1>     int 21h
  1687                              <1>     return
    13                              <2> %%_ret:
    14 00002E49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1688                              <1> 
  1689                              <1> cls:  
  1690 00002E4A B800440000          <1>     mov eax, 4400h  ;Get device info
  1691 00002E4F BB01000000          <1>     mov ebx, 1      ;for handle 1
  1692 00002E54 CD21                <1>     int 21h         ;in dx
  1693 00002E56 F7C280000000        <1>     test edx, devCharDev
  1694 00002E5C 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1695 00002E5E F7C210000000        <1>     test edx, devCharFastOut
  1696 00002E64 7421                <1>     jz .doAnsi
  1697                              <1>     ;Test if Int 29h uses Int 30h
  1698                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1699                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1700 00002E66 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1701 00002E6B CD21                <1>     int 21h
  1702 00002E6D B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1703                              <1> .biosCheck:
  1704 00002E72 66813BCD30          <1>     cmp word [rbx], 30CDh
  1705 00002E77 7426                <1>     je .biosConfirmed
  1706 00002E79 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1707 00002E7E 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1708 00002E80 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1709 00002E83 FFC9                <1>     dec ecx
  1710 00002E85 75EB                <1>     jnz .biosCheck
  1711                              <1> .doAnsi:
  1712                              <1> ;4 chars in the ansi routine
  1713                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1714                              <1> ; understand ANSI codes
  1715 00002E87 488D3528D9FFFF      <1>     lea rsi, ansiCls
  1716 00002E8E B904000000          <1>     mov ecx, 4
  1717 00002E93 B406                <1>     mov ah, 06h ;Raw char output
  1718                              <1> .ansiLp:
  1719 00002E95 AC                  <1>     lodsb   ;Get the char in 
  1720 00002E96 88C2                <1>     mov dl, al
  1721 00002E98 CD21                <1>     int 21h
  1722 00002E9A FFC9                <1>     dec ecx
  1723 00002E9C 75F7                <1>     jnz .ansiLp
  1724                              <1>     return
    13                              <2> %%_ret:
    14 00002E9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1725                              <1> .biosConfirmed:
  1726                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1727 00002E9F B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1728 00002EA1 31DB                <1>     xor ebx, ebx
  1729 00002EA3 CD30                <1>     int 30h
  1730 00002EA5 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1731 00002EA7 CD30                <1>     int 30h
  1732 00002EA9 53                  <1>     push rbx
  1733 00002EAA 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1734 00002EAD FECA                <1>     dec dl
  1735 00002EAF B619                <1>     mov dh, 25  ;Number of rows is standard
  1736 00002EB1 31C0                <1>     xor eax, eax
  1737 00002EB3 89C1                <1>     mov ecx, eax
  1738 00002EB5 B707                <1>     mov bh, 7   ;Screen attributes
  1739 00002EB7 B406                <1>     mov ah, 6   ;Scroll
  1740 00002EB9 CD30                <1>     int 30h
  1741 00002EBB 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1742 00002EBD 5B                  <1>     pop rbx
  1743 00002EBE B402                <1>     mov ah, 2
  1744 00002EC0 CD30                <1>     int 30h
  1745                              <1>     return
    13                              <2> %%_ret:
    14 00002EC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1746                              <1> 
  1747                              <1> break:
  1748 00002EC3 F60581D1FFFFFF      <1>     test byte [arg1Flg], -1
  1749 00002ECA 752D                <1>     jnz .argumentProvided
  1750                              <1>     ;Here we just get the status of break
  1751 00002ECC B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1752 00002ED1 CD21                <1>     int 21h
  1753 00002ED3 88D3                <1>     mov bl, dl
  1754 00002ED5 488D15D6D6FFFF      <1>     lea rdx, breakIs
  1755 00002EDC B409                <1>     mov ah, 09h
  1756 00002EDE CD21                <1>     int 21h
  1757 00002EE0 488D15C3D6FFFF      <1>     lea rdx, onMes
  1758 00002EE7 488D0DB2D6FFFF      <1>     lea rcx, offMes
  1759 00002EEE 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1760 00002EF0 480F44D1            <1>     cmovz rdx, rcx
  1761 00002EF4 B409                <1>     mov ah, 09h
  1762 00002EF6 CD21                <1>     int 21h
  1763                              <1>     return
    13                              <2> %%_ret:
    14 00002EF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1764                              <1> .argumentProvided:
  1765 00002EF9 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1766 00002EFD AD                  <1>     lodsd   ;Read the word
  1767 00002EFE 89C3                <1>     mov ebx, eax
  1768 00002F00 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1769 00002F05 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1770 00002F08 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1771 00002F0D 7416                <1>     je .maybeOn
  1772 00002F0F 663D4F46            <1>     cmp ax, "OF"
  1773 00002F13 7523                <1>     jne .badOnOff
  1774 00002F15 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1775 00002F1A 6681FB4620          <1>     cmp bx, "F "
  1776 00002F1F 7517                <1>     jne .badOnOff
  1777                              <1>     ;Set off
  1778 00002F21 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1779 00002F23 EB0B                <1>     jmp short .setBreak
  1780                              <1> .maybeOn:
  1781 00002F25 663D4F4E            <1>     cmp ax, "ON"
  1782 00002F29 750D                <1>     jne .badOnOff
  1783                              <1>     ;Set on
  1784 00002F2B BA01000000          <1>     mov edx, 1
  1785                              <1> .setBreak:
  1786 00002F30 B801330000          <1>     mov eax, 3301h  ;Set break
  1787 00002F35 CD21                <1>     int 21h
  1788                              <1>     return
    13                              <2> %%_ret:
    14 00002F37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1789                              <1> .badOnOff:
  1790 00002F38 488D1580D8FFFF      <1>     lea rdx, badOnOff
  1791 00002F3F B409                <1>     mov ah, 09h
  1792 00002F41 CD21                <1>     int 21h
  1793                              <1>     return
    13                              <2> %%_ret:
    14 00002F43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1794                              <1> 
  1795                              <1> verify:
  1796 00002F44 F60500D1FFFFFF      <1>     test byte [arg1Flg], -1
  1797 00002F4B 752D                <1>     jnz .argumentProvided
  1798                              <1>     ;Here we just get the status of break
  1799 00002F4D B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1800 00002F52 CD21                <1>     int 21h
  1801 00002F54 88C3                <1>     mov bl, al
  1802 00002F56 488D155FD6FFFF      <1>     lea rdx, verifyIs
  1803 00002F5D B409                <1>     mov ah, 09h
  1804 00002F5F CD21                <1>     int 21h
  1805 00002F61 488D1542D6FFFF      <1>     lea rdx, onMes
  1806 00002F68 488D0D31D6FFFF      <1>     lea rcx, offMes
  1807 00002F6F 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1808 00002F71 480F44D1            <1>     cmovz rdx, rcx
  1809 00002F75 B409                <1>     mov ah, 09h
  1810 00002F77 CD21                <1>     int 21h
  1811                              <1>     return
    13                              <2> %%_ret:
    14 00002F79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1812                              <1> .argumentProvided:
  1813 00002F7A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1814 00002F7E AD                  <1>     lodsd   ;Read the word
  1815 00002F7F 89C3                <1>     mov ebx, eax
  1816 00002F81 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1817 00002F86 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1818 00002F89 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1819 00002F8E 7416                <1>     je .maybeOn
  1820 00002F90 663D4F46            <1>     cmp ax, "OF"
  1821 00002F94 751F                <1>     jne .badOnOff
  1822 00002F96 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1823 00002F9B 6681FB4620          <1>     cmp bx, "F "
  1824 00002FA0 7513                <1>     jne .badOnOff
  1825                              <1>     ;Set off
  1826 00002FA2 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1827 00002FA4 EB0A                <1>     jmp short .setVerify
  1828                              <1> .maybeOn:
  1829 00002FA6 663D4F4E            <1>     cmp ax, "ON"
  1830 00002FAA 7509                <1>     jne .badOnOff
  1831                              <1>     ;Set on
  1832 00002FAC 31C0                <1>     xor eax, eax
  1833 00002FAE FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1834                              <1> .setVerify:
  1835 00002FB0 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1836 00002FB2 CD21                <1>     int 21h
  1837                              <1>     return
    13                              <2> %%_ret:
    14 00002FB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1838                              <1> .badOnOff:
  1839 00002FB5 488D1503D8FFFF      <1>     lea rdx, badOnOff
  1840 00002FBC B409                <1>     mov ah, 09h
  1841 00002FBE CD21                <1>     int 21h
  1842                              <1>     return
    13                              <2> %%_ret:
    14 00002FC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1843                              <1> 
  1844                              <1> rename:
  1845 00002FC1 F60583D0FFFFFF      <1>     test byte [arg1Flg], -1
  1846 00002FC8 0F84A9EAFFFF        <1>     jz badArgError
  1847 00002FCE F60579D0FFFFFF      <1>     test byte [arg2Flg], -1
  1848 00002FD5 0F849CEAFFFF        <1>     jz badArgError    
  1849                              <1>     ;Initialise the variables!
  1850 00002FDB 488D35(11060000)    <1>     lea rsi, srcSpec
  1851 00002FE2 488935(15070000)    <1>     mov qword [srcPtr], rsi
  1852 00002FE9 488D35(93060000)    <1>     lea rsi, destSpec
  1853 00002FF0 488935(1D070000)    <1>     mov qword [destPtr], rsi
  1854                              <1>     ;Check the second path is just a filename!
  1855 00002FF7 0FB60551D0FFFF      <1>     movzx eax, byte [arg2Off]
  1856 00002FFE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1857 00003005 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1858 00003008 488D3D(70040000)    <1>     lea rdi, searchSpec
  1859 0000300F 57                  <1>     push rdi
  1860 00003010 E895160000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1861 00003015 5F                  <1>     pop rdi
  1862 00003016 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1863 0000301A 0F8457EAFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1864                              <1> ;Check if a drive specifier has been given
  1865 00003020 0FB60525D0FFFF      <1>     movzx eax, byte [arg1Off]
  1866 00003027 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1867 0000302E 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1868 00003031 66AD                <1>     lodsw   ;Get the first two chars
  1869 00003033 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1870 00003036 752A                <1>     jne .curDrvSrc
  1871                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1872 00003038 488B35(15070000)    <1>     mov rsi, qword [srcPtr]
  1873 0000303F 668906              <1>     mov word [rsi], ax
  1874 00003042 488105(15070000)02- <1>     add qword [srcPtr], 2   
  1874 0000304A 000000              <1>
  1875 0000304D 488B35(1D070000)    <1>     mov rsi, qword [destPtr]
  1876 00003054 668906              <1>     mov word [rsi], ax
  1877 00003057 488105(1D070000)02- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1877 0000305F 000000              <1>
  1878                              <1> .curDrvSrc:
  1879 00003062 4889FE              <1>     mov rsi, rdi
  1880                              <1> .destScan:
  1881 00003065 AC                  <1>     lodsb   ;Get the char
  1882 00003066 3A059ECFFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1883 0000306C 0F8405EAFFFF        <1>     je badArgError
  1884 00003072 84C0                <1>     test al, al
  1885 00003074 75EF                <1>     jnz .destScan
  1886                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1887 00003076 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1888 0000307A 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1888 00003083 3F                  <1>
  1889 00003084 B903000000          <1>     mov ecx, 3  ;24 bytes
  1890 00003089 F348AB              <1>     rep stosq
  1891 0000308C AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1892 0000308D 488D35(70040000)    <1>     lea rsi, searchSpec
  1893 00003094 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1894 00003098 B80D290000          <1>     mov eax, 290Dh
  1895 0000309D CD21                <1>     int 21h     
  1896 0000309F 50                  <1>     push rax    ;Save the WC signature
  1897 000030A0 E848160000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1898 000030A5 488D3D(70040000)    <1>     lea rdi, searchSpec
  1899 000030AC E87F150000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1900 000030B1 4889FE              <1>     mov rsi, rdi
  1901 000030B4 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1902 000030B7 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1903 000030BB B80D290000          <1>     mov eax, 290Dh
  1904 000030C0 CD21                <1>     int 21h
  1905 000030C2 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1906 000030C3 88CC                <1>     mov ah, cl
  1907 000030C5 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1908 000030C8 0F84E6000000        <1>     jz .noWC
  1909 000030CE 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1910 000030D0 0F84A1E9FFFF        <1>     je badArgError
  1911 000030D6 488D35(70040000)    <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1912                              <1>     ;Now we check if we have a path to actually handle
  1913 000030DD 4839F3              <1>     cmp rbx, rsi
  1914 000030E0 7444                <1>     je .noPath
  1915 000030E2 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1916 000030E6 488D35(70040000)    <1>     lea rsi, searchSpec
  1917 000030ED 488B3D(11060000)    <1>     mov rdi, qword [srcSpec]
  1918 000030F4 56                  <1>     push rsi
  1919 000030F5 E841140000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1920 000030FA 5E                  <1>     pop rsi
  1921 000030FB 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1922 000030FE 8A0506CFFFFF        <1>     mov al, byte [pathSep]
  1923 00003104 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1924 00003105 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1925 0000310C 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1926 00003113 E823140000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1927 00003118 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1928 0000311B AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1929 0000311C 48893D(1D070000)    <1>     mov qword [destPtr], rdi
  1930 00003123 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1931                              <1> .noPath:
  1932                              <1>     ;Now we have where to copy the files to, we can start our work!
  1933 00003126 488D15(70040000)    <1>     lea rdx, searchSpec
  1934 0000312D 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1935 0000312F B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1936 00003134 CD21                <1>     int 21h
  1937 00003136 0F824DE9FFFF        <1>     jc badDupFnf    ;If no file was found!
  1938                              <1> .wcLoop:
  1939                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1940 0000313C 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1941 00003143 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1942 00003147 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1943 0000314C CD21                <1>     int 21h 
  1944                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1945 0000314E 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1946 00003152 488D3D(25070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
  1947 00003159 57                  <1>     push rdi
  1948 0000315A 48A5                <1>     movsq
  1949 0000315C 66A5                <1>     movsw
  1950 0000315E A4                  <1>     movsb
  1951 0000315F 5F                  <1>     pop rdi
  1952 00003160 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1953 00003164 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1954                              <1> .wcNameMake:
  1955 00003169 AC                  <1>     lodsb   ;Get the char from the source string
  1956 0000316A 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1957 0000316D 7502                <1>     jne .noStore    ;Dont store the char there
  1958 0000316F 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1959                              <1> .noStore:
  1960 00003171 48FFC7              <1>     inc rdi ;Goto next char position
  1961 00003174 FFC9                <1>     dec ecx
  1962 00003176 75F1                <1>     jnz .wcNameMake
  1963                              <1> ;renName now has the FCB name for the file we wish to make!
  1964                              <1> ;Now make the two paths!
  1965 00003178 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1966 0000317F 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
  1967 00003186 E8B0130000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1968 0000318B 488D35(25070000)    <1>     lea rsi, renName
  1969 00003192 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
  1970 00003199 E8B6140000          <1>     call FCBToAsciiz
  1971 0000319E 488D15(11060000)    <1>     lea rdx, srcSpec
  1972 000031A5 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1973 000031AA B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1974 000031AF CD21                <1>     int 21h
  1975 000031B1 7389                <1>     jnc .wcLoop     ;And process it too!
  1976                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000031B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1977                              <1> .noWC:
  1978 000031B4 E834150000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1979 000031B9 0FB6058FCEFFFF      <1>     movzx eax, byte [arg2Off]
  1980 000031C0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1981 000031C7 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1982 000031CA 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]    
  1983 000031D1 E8D4140000          <1>     call cpDelimPathToBufz
  1984 000031D6 488D15(70040000)    <1>     lea rdx, searchSpec
  1985 000031DD E807000000          <1>     call .ren
  1986                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000031E2 73(B3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1987 000031E4 E9A0E8FFFF          <1>     jmp badDupFnf   ;Always just return this
  1988                              <1> .ren:
  1989 000031E9 488D3D(93060000)    <1>     lea rdi, destSpec
  1990 000031F0 B800560000          <1>     mov eax, 5600h
  1991 000031F5 CD21                <1>     int 21h
  1992                              <1>     return
    13                              <2> %%_ret:
    14 000031F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1993                              <1> 
  1994                              <1> truename:
  1995 000031F8 F6054CCEFFFFFF      <1>     test byte [arg1Flg], -1
  1996 000031FF 0F8472E8FFFF        <1>     jz badArgError
  1997 00003205 E8E3140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1998 0000320A 8B05(70040000)      <1>     mov eax, dword [searchSpec]
  1999 00003210 C1E808              <1>     shr eax, 8  ;Drop the first char 
  2000 00003213 3C3A                <1>     cmp al, ":" ;If its not a drive letter, go search
  2001 00003215 7523                <1>     jne .goSearch
  2002 00003217 C1E808              <1>     shr eax, 8  ;Drop the colon too
  2003 0000321A 84C0                <1>     test al, al
  2004 0000321C 740D                <1>     jz .kludge
  2005 0000321E 3A05E6CDFFFF        <1>     cmp al, byte [pathSep]  ;Was path at least X:\ ?
  2006 00003224 7514                <1>     jne .goSearch
  2007 00003226 C1E808              <1>     shr eax, 8  ;Was the path exactly X:\<NUL>?
  2008 00003229 750F                <1>     jnz .goSearch
  2009                              <1> .kludge:
  2010 0000322B 0FB605D8CDFFFF      <1>     movzx eax, byte [pathSep]
  2011 00003232 B42E                <1>     mov ah, "." ;Add the dot to the second byte
  2012 00003234 8905(72040000)      <1>     mov dword [searchSpec + 2], eax ;Add the pathsep, CD dot and null terminator here too
  2013                              <1> .goSearch:
  2014 0000323A 488D35(70040000)    <1>     lea rsi, searchSpec     ;Store the path here
  2015 00003241 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2016 00003244 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2017 00003249 CD21                <1>     int 21h
  2018 0000324B 730D                <1>     jnc .writePath
  2019 0000324D 3C02                <1>     cmp al, errFnf
  2020 0000324F 0F842BE8FFFF        <1>     je badFileError
  2021 00003255 E90BE8FFFF          <1>     jmp badParamError
  2022                              <1> .writePath:
  2023 0000325A E8D7100000          <1>     call printCRLF
  2024 0000325F 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2025 00003262 B9FFFFFFFF          <1>     mov ecx, -1
  2026 00003267 30C0                <1>     xor al, al
  2027 00003269 F2AE                <1>     repne scasb     ;Get the new len
  2028 0000326B F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2029 0000326D FFC9                <1>     dec ecx
  2030 0000326F BB01000000          <1>     mov ebx, 01
  2031 00003274 B440                <1>     mov ah, 40h
  2032 00003276 CD21                <1>     int 21h
  2033 00003278 E8B9100000          <1>     call printCRLF
  2034                              <1>     return
    13                              <2> %%_ret:
    14 0000327D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2035                              <1> 
  2036                              <1> volume:
  2037                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2038 0000327E F605C9CDFFFFFF      <1>     test byte [arg2Flg], -1
  2039 00003285 0F85ECE7FFFF        <1>     jnz badArgError
  2040 0000328B F605B9CDFFFFFF      <1>     test byte [arg1Flg], -1
  2041 00003292 7507                <1>     jnz .notCurrentDrive
  2042 00003294 E89D120000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2043 00003299 EB31                <1>     jmp short .dirEP
  2044                              <1> .notCurrentDrive:
  2045 0000329B E84D140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2046 000032A0 488D35(70040000)    <1>     lea rsi, searchSpec
  2047 000032A7 E8CD120000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2048 000032AC 66AD                <1>     lodsw                   ;Get this word
  2049 000032AE 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2050 000032B1 0F85C0E7FFFF        <1>     jne badArgError
  2051 000032B7 8A0590CDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2052 000032BD A8FF                <1>     test al, -1
  2053 000032BF 0F85A9E7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2054 000032C5 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2055 000032CA FFC8                <1>     dec eax ;Convert to 0 based number
  2056                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2057 000032CC 488D153DCDFFFF      <1>     lea rdx, volFcb
  2058 000032D3 FFC0                <1>     inc eax ;Get 1 based drive number
  2059 000032D5 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2060 000032D7 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2061 000032DA B800110000          <1>     mov eax, 1100h ;Find first FCB
  2062 000032DF CD21                <1>     int 21h
  2063 000032E1 50                  <1>     push rax
  2064                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2065 000032E2 488D1585CEFFFF      <1>     lea rdx, crlf
  2066 000032E9 B409                <1>     mov ah, 09h
  2067 000032EB CD21                <1>     int 21h
  2068 000032ED 488D153AD1FFFF      <1>     lea rdx, volMes
  2069 000032F4 B409                <1>     mov ah, 09h
  2070 000032F6 CD21                <1>     int 21h
  2071 000032F8 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2072 000032FA 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2073 000032FD B402                <1>     mov ah, 02h
  2074 000032FF CD21                <1>     int 21h
  2075 00003301 58                  <1>     pop rax
  2076 00003302 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2077 00003304 7409                <1>     jz .volIDOk
  2078 00003306 488D1538D1FFFF      <1>     lea rdx, volNo
  2079 0000330D EB19                <1>     jmp short .volEndPrint
  2080                              <1> .volIDOk:
  2081 0000330F 488D152AD1FFFF      <1>     lea rdx, volOk
  2082 00003316 B409                <1>     mov ah, 09h
  2083 00003318 CD21                <1>     int 21h
  2084 0000331A C605(09010000)24    <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2085 00003321 488D15(FE000000)    <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2086                              <1> .volEndPrint:
  2087 00003328 B409                <1>     mov ah, 09h
  2088 0000332A CD21                <1>     int 21h
  2089 0000332C 488D153BCEFFFF      <1>     lea rdx, crlf
  2090 00003333 B409                <1>     mov ah, 09h
  2091 00003335 CD21                <1>     int 21h
  2092                              <1>     return
    13                              <2> %%_ret:
    14 00003337 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2093                              <1> 
  2094                              <1> version:
  2095 00003338 488D152FCEFFFF      <1>     lea rdx, crlf
  2096 0000333F B409                <1>     mov ah, 09h
  2097 00003341 CD21                <1>     int 21h
  2098 00003343 488D15D2D0FFFF      <1>     lea rdx, dosVer
  2099 0000334A B409                <1>     mov ah, 09h
  2100 0000334C CD21                <1>     int 21h
  2101 0000334E E80C000000          <1>     call .printVersionNumber
  2102 00003353 488D1514CEFFFF      <1>     lea rdx, crlf
  2103 0000335A B409                <1>     mov ah, 09h
  2104 0000335C CD21                <1>     int 21h
  2105                              <1>     return
    13                              <2> %%_ret:
    14 0000335E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2106                              <1> .printVersionNumber:
  2107 0000335F B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2108 00003361 CD21                <1>     int 21h
  2109 00003363 50                  <1>     push rax
  2110 00003364 0FB6C0              <1>     movzx eax, al
  2111 00003367 E85A140000          <1>     call printDecimalWord
  2112 0000336C B22E                <1>     mov dl, "."
  2113 0000336E B402                <1>     mov ah, 02h
  2114 00003370 CD21                <1>     int 21h
  2115 00003372 58                  <1>     pop rax
  2116 00003373 0FB6C4              <1>     movzx eax, ah
  2117 00003376 E84B140000          <1>     call printDecimalWord
  2118                              <1>     return
    13                              <2> %%_ret:
    14 0000337B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2119                              <1> 
  2120                              <1> 
  2121                              <1> memory:
  2122 0000337C B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2123 00003381 CD21                <1>     int 21h
  2124 00003383 4885DB              <1>     test rbx, rbx
  2125 00003386 7510                <1>     jnz .sysvarsOK
  2126 00003388 488D159ED3FFFF      <1>     lea rdx, memBad0
  2127 0000338F B409                <1>     mov ah, 09h
  2128 00003391 CD21                <1>     int 21h
  2129 00003393 E9D6140000          <1>     jmp freezePC.altEP
  2130                              <1> .sysvarsOK:
  2131                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2132                              <1>     ; and rcx to store Application memory
  2133 00003398 31F6                <1>     xor esi, esi
  2134 0000339A 31FF                <1>     xor edi, edi
  2135 0000339C 31ED                <1>     xor ebp, ebp
  2136 0000339E 31C9                <1>     xor ecx, ecx
  2137 000033A0 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2138 000033A4 488B1B              <1>     mov rbx, qword [rbx]
  2139                              <1> .memLp:
  2140 000033A7 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2141 000033AA 7409                <1>     je .validMCB
  2142 000033AC 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2143 000033AF 0F8506010000        <1>     jne .badMCBFound
  2144                              <1> .validMCB:
  2145 000033B5 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2146 000033B8 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2147 000033BC 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2148 000033C4 7505                <1>     jne .notDOS
  2149 000033C6 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2150 000033C9 EB21                <1>     jmp short .gotoNext
  2151                              <1> .notDOS:
  2152 000033CB 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2153 000033D3 7505                <1>     jne .notFree
  2154 000033D5 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2155 000033D8 EB12                <1>     jmp short .gotoNext
  2156                              <1> .notFree:
  2157 000033DA 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2158 000033E2 7505                <1>     jne .notHole
  2159 000033E4 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2160 000033E7 EB03                <1>     jmp short .gotoNext
  2161                              <1> .notHole:
  2162 000033E9 4801C1              <1>     add rcx, rax    ;Add to Application count
  2163                              <1> .gotoNext:
  2164 000033EC 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2165 000033EF 7407                <1>     je .endOfWalk
  2166 000033F1 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2167 000033F6 EBAF                <1>     jmp short .memLp
  2168                              <1> .endOfWalk:
  2169                              <1>     
  2170 000033F8 488D158FD2FFFF      <1>     lea rdx, memDOS
  2171 000033FF B409                <1>     mov ah, 09h
  2172 00003401 CD21                <1>     int 21h
  2173 00003403 4889F0              <1>     mov rax, rsi
  2174 00003406 E89D000000          <1>     call .mcbPrintAmount
  2175 0000340B 488D1514D3FFFF      <1>     lea rdx, memByte
  2176 00003412 B409                <1>     mov ah, 09h
  2177 00003414 CD21                <1>     int 21h
  2178                              <1> 
  2179 00003416 4885ED              <1>     test rbp, rbp
  2180 00003419 741E                <1>     jz .skipHole
  2181 0000341B 488D15B8D2FFFF      <1>     lea rdx, memHole
  2182 00003422 B409                <1>     mov ah, 09h
  2183 00003424 CD21                <1>     int 21h
  2184 00003426 4889E8              <1>     mov rax, rbp
  2185 00003429 E87A000000          <1>     call .mcbPrintAmount
  2186 0000342E 488D15F1D2FFFF      <1>     lea rdx, memByte
  2187 00003435 B409                <1>     mov ah, 09h
  2188 00003437 CD21                <1>     int 21h
  2189                              <1> .skipHole:
  2190                              <1> 
  2191 00003439 488D1574D2FFFF      <1>     lea rdx, memApp
  2192 00003440 B409                <1>     mov ah, 09h
  2193 00003442 CD21                <1>     int 21h
  2194 00003444 4889C8              <1>     mov rax, rcx
  2195 00003447 E85C000000          <1>     call .mcbPrintAmount
  2196 0000344C 488D15D3D2FFFF      <1>     lea rdx, memByte
  2197 00003453 B409                <1>     mov ah, 09h
  2198 00003455 CD21                <1>     int 21h
  2199                              <1> 
  2200 00003457 488D15A2D2FFFF      <1>     lea rdx, memFree
  2201 0000345E B409                <1>     mov ah, 09h
  2202 00003460 CD21                <1>     int 21h
  2203 00003462 4889F8              <1>     mov rax, rdi
  2204 00003465 E83E000000          <1>     call .mcbPrintAmount
  2205 0000346A 488D15B5D2FFFF      <1>     lea rdx, memByte
  2206 00003471 B409                <1>     mov ah, 09h
  2207 00003473 CD21                <1>     int 21h
  2208                              <1> 
  2209 00003475 488D15ECD1FFFF      <1>     lea rdx, memSys
  2210 0000347C B409                <1>     mov ah, 09h
  2211 0000347E CD21                <1>     int 21h
  2212 00003480 4889F0              <1>     mov rax, rsi
  2213 00003483 4801F8              <1>     add rax, rdi
  2214 00003486 4801C8              <1>     add rax, rcx
  2215 00003489 4801E8              <1>     add rax, rbp
  2216 0000348C E817000000          <1>     call .mcbPrintAmount
  2217 00003491 488D158ED2FFFF      <1>     lea rdx, memByte
  2218 00003498 B409                <1>     mov ah, 09h
  2219 0000349A CD21                <1>     int 21h
  2220                              <1> 
  2221 0000349C 488D15CBCCFFFF      <1>     lea rdx, crlf
  2222 000034A3 B409                <1>     mov ah, 09h
  2223 000034A5 CD21                <1>     int 21h
  2224                              <1>     return
    13                              <2> %%_ret:
    14 000034A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2225                              <1> 
  2226                              <1> .mcbPrintAmount:
  2227 000034A8 51                  <1>     push rcx
  2228 000034A9 56                  <1>     push rsi
  2229 000034AA 57                  <1>     push rdi
  2230 000034AB 55                  <1>     push rbp
  2231 000034AC B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2232 000034B1 E870120000          <1>     call printDecimalValLB
  2233 000034B6 5D                  <1>     pop rbp
  2234 000034B7 5F                  <1>     pop rdi
  2235 000034B8 5E                  <1>     pop rsi
  2236 000034B9 59                  <1>     pop rcx
  2237                              <1>     return
    13                              <2> %%_ret:
    14 000034BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2238                              <1> .badMCBFound:
  2239 000034BB 488D15ABD2FFFF      <1>     lea rdx, memBad2
  2240 000034C2 B409                <1>     mov ah, 09h
  2241 000034C4 CD21                <1>     int 21h
  2242 000034C6 E9A3130000          <1>     jmp freezePC.altEP
  2243                              <1> 
    23                                  %include "./src/cmdFunc2.asm"
     1                              <1> ;The second file with internal functions.
     2                              <1> ;Functions included with name and label:
     3                              <1> ;----------------------------------------------------
     4                              <1> ; LABEL         NAME
     5                              <1> ;----------------------------------------------------
     6                              <1> ; type          TYPE
     7                              <1> ; exit          EXIT
     8                              <1> ; launchChild   <LAUNCH CHILD>
     9                              <1> ; set           SET
    10                              <1> ; pathEdit      PATH
    11                              <1> ; prompt        PROMPT
    12                              <1> ; echo          ECHO
    13                              <1> ; pauza         PAUSE
    14                              <1> ; remark        REM 
    15                              <1> ; shift         SHIFT
    16                              <1> ; goto          GOTO 
    17                              <1> ; ifCmd         IF  
    18                              <1> ; forCmd        FOR
    19                              <1> ; callCmd       CALL
    20                              <1> ;----------------------------------------------------
    21                              <1> 
    22                              <1> type:
    23 000034CB F60579CBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
    24 000034D2 0F849FE5FFFF        <1>     jz badArgError
    25 000034D8 F6056FCBFFFFFF      <1>     test byte [arg2Flg], -1
    26 000034DF 0F8592E5FFFF        <1>     jnz badArgError         ;If this set, error
    27 000034E5 4C8B0514CBFFFF      <1>     mov r8, [pPSP]
    28 000034EC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
    29 000034F3 0FB60552CBFFFF      <1>     movzx eax, byte [arg1Off]
    30 000034FA 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
    31 000034FD 803E0D              <1>     cmp byte [rsi], CR
    32 00003500 0F8471E5FFFF        <1>     je badArgError
    33 00003506 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
    34 0000350A 750F                <1>     jne .noDrive
    35 0000350C 0FB6053ACBFFFF      <1>     movzx eax, byte [arg1FCBret]
    36 00003513 3CFF                <1>     cmp al, -1
    37 00003515 0F8453E5FFFF        <1>     je badDriveError
    38                              <1> .noDrive:
    39                              <1>     ;Now we open the provided file
    40 0000351B E8CD110000          <1>     call buildCommandPath
    41 00003520 488D15(70040000)    <1>     lea rdx, searchSpec
    42 00003527 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
    43 0000352C CD21                <1>     int 21h
    44 0000352E 0F824CE5FFFF        <1>     jc badFileError
    45 00003534 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
    46 0000353B 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
    47                              <1> .lp:
    48 0000353E B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
    49 00003543 B43F                <1>     mov ah, 3Fh ;Read handle
    50 00003545 CD21                <1>     int 21h
    51 00003547 89C1                <1>     mov ecx, eax
    52 00003549 67E317              <1>     jecxz .exit
    53 0000354C 53                  <1>     push rbx    ;Save the original in handle
    54 0000354D BB01000000          <1>     mov ebx, 1  ;STDOUT
    55 00003552 B440                <1>     mov ah, 40h
    56 00003554 CD21                <1>     int 21h
    57 00003556 5B                  <1>     pop rbx ;Get back the original read handle
    58 00003557 720F                <1>     jc .exitBad
    59 00003559 39C8                <1>     cmp eax, ecx
    60 0000355B 74E1                <1>     je .lp
    61 0000355D FFC9                <1>     dec ecx ;One less for a ^Z
    62 0000355F 39C8                <1>     cmp eax, ecx
    63 00003561 7505                <1>     jne .exitBad
    64                              <1> .exit:
    65 00003563 B43E                <1>     mov ah, 3Eh ;Close handle
    66 00003565 CD21                <1>     int 21h
    67                              <1>     return
    13                              <2> %%_ret:
    14 00003567 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .exitBad:
    69                              <1>     ;If it is a char device, don't print an error
    70 00003568 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
    71 0000356D BB01000000          <1>     mov ebx, 1
    72 00003572 CD21                <1>     int 21h
    73 00003574 F6C280              <1>     test dl, devCharDev
    74                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003577 75(67)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    75 00003579 E990E4FFFF          <1>     jmp badDiskFull
    76                              <1> 
    77                              <1> exit:
    78 0000357E F605(1A000000)01    <1>     test byte [statFlg1], permaShell
    79 00003585 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
    80 00003587 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;If perma and single command
    81 0000358E 0F852DDFFFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
    82                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003594 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> .ouch:
    84 00003595 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
    85 0000359A CD21                <1>     int 21h
    86                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000359C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> launchChild:
    89                              <1>     ;We execute an external command here.
    90                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
    91                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
    92                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
    93                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
    94                              <1>     ;We know the drive we are on is valid so no need to double check that!      
    95                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
    96 0000359D 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
    97 000035A4 4889FE              <1>     mov rsi, rdi
    98 000035A7 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
    99 000035AC CD2F                <1>     int 2fh
   100 000035AE E87D100000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   101 000035B3 4889FE              <1>     mov rsi, rdi    ;Source here
   102 000035B6 488D3D(E6000000)    <1>     lea rdi, cmdFcb
   103 000035BD B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   104 000035C2 CD21                <1>     int 21h
   105 000035C4 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
   106 000035C6 0F85DBE4FFFF        <1>     jnz badCmdError
   107 000035CC 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
   108                              <1> .pathLoop:
   109 000035CF 488D35(EF000000)    <1>     lea rsi, qword [cmdFcb + fcb.fileext]
   110 000035D6 488D3D03D2FFFF      <1>     lea rdi, extStr
   111 000035DD BA03000000          <1>     mov edx, 3  ;Number of valid extension types
   112                              <1> .extLp:
   113 000035E2 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
   114 000035E3 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
   115 000035E8 F3A6                <1>     rep cmpsb   ;Compare the two strings
   116 000035EA 5E                  <1>     pop rsi
   117 000035EB 85C9                <1>     test ecx, ecx
   118 000035ED 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
   119 000035EF 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
   120 000035F2 FFCA                <1>     dec edx         ;Else one less extension type to check
   121 000035F4 75EC                <1>     jnz .extLp
   122                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
   123                              <1>     ;If not, error.
   124 000035F6 B903000000          <1>     mov ecx, 3
   125 000035FB 4889F7              <1>     mov rdi, rsi
   126 000035FE B020                <1>     mov al, SPC
   127 00003600 F3AE                <1>     rep scasb   
   128 00003602 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
   129 00003604 0F859DE4FFFF        <1>     jnz badCmdError    ;If not, error!
   130                              <1>     ;Now we search first with COM, then EXE, then BAT. 
   131 0000360A 488D35CFD1FFFF      <1>     lea rsi, extStr
   132 00003611 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
   133                              <1> .extSrchLp:
   134 00003616 488D3D(EF000000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   135 0000361D B903000000          <1>     mov ecx, 3
   136 00003622 F3A4                <1>     rep movsb   ;Copy the extension over!
   137 00003624 E847010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
   138 00003629 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
   139 0000362B FFCB                <1>     dec ebx                 ;Decrement extension counter
   140 0000362D 75E7                <1>     jnz .extSrchLp
   141                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
   142                              <1> ; we start prepending path componants and trying again. To do this, we reset
   143                              <1> ; by setting the fcb extension back to all spaces.
   144 0000362F 488D3D(EF000000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   145 00003636 B903000000          <1>     mov ecx, 3
   146 0000363B B020                <1>     mov al, SPC
   147 0000363D F3AA                <1>     rep stosb   ;Store back the empty extension!
   148 0000363F EB71                <1>     jmp short .pathHandle
   149                              <1> .extFnd:
   150                              <1> ;Here if the file had the right extension.
   151 00003641 E82A010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
   152 00003646 726A                <1>     jc .pathHandle
   153                              <1> .extSrchFnd:
   154                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
   155                              <1> ; a BAT. If it is, separate handling!
   156 00003648 803D(EF000000)42    <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
   157 0000364F 0F84D3DEFFFF        <1>     je batLaunch
   158 00003655 488D1D(21010000)    <1>     lea rbx, launchBlock
   159 0000365C 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
   160 00003660 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
   161 00003663 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
   162 0000366A 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
   163 0000366E 498D405C            <1>     lea rax, qword [r8 + fcb1]
   164 00003672 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   165 00003676 498D406C            <1>     lea rax, qword [r8 + fcb2]
   166 0000367A 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   167 0000367E 488D15(C7020000)    <1>     lea rdx, cmdPathSpec
   168 00003685 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
   169 0000368A CD21                <1>     int 21h
   170                              <1> ;If the program failed to start, verify why!
   171 0000368C B800590000          <1>     mov eax, 5900h      ;Get extended error
   172 00003691 31DB                <1>     xor ebx, ebx
   173 00003693 CD21                <1>     int 21h
   174                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   175                              <1> ; The below doesnt make any sense. Retcode is
   176                              <1> ; is not the DOS error code.
   177                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   178                              <1>     ;mov word [returnCode], ax   ;Error code from EXEC
   179                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   180 00003695 3C05                <1>     cmp al, errAccDen   ;Access denied?
   181 00003697 0F84BFE3FFFF        <1>     je badAccError
   182 0000369D 3C08                <1>     cmp al, errNoMem    ;If not enough memory, print so
   183 0000369F 0F849CE3FFFF        <1>     je badNoMemError    
   184 000036A5 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
   185 000036A7 0F84B6110000        <1>     je freezePC
   186 000036AD E9F5E3FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
   187                              <1> .pathHandle:        
   188                              <1> ;First check if rbp is null. If it is, its a first time entry. 
   189                              <1> ;al has error code!
   190 000036B2 4885ED              <1>     test rbp, rbp
   191 000036B5 0F85A3000000        <1>     jnz .pathReentry
   192                              <1> ;Now check if the command we recieved included an absolute path.
   193                              <1> ;If so, we don't do path substitution and just fail at this point
   194 000036BB 488D35(C7020000)    <1>     lea rsi, cmdPathSpec
   195 000036C2 66AD                <1>     lodsw   ;Get the first two chars
   196 000036C4 3A0540C9FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
   197 000036CA 0F84D7E3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   198 000036D0 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
   199 000036D2 7412                <1>     je .pathGetEnv
   200 000036D4 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
   201 000036D7 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
   202 000036D9 AC                  <1>     lodsb   ;Get the third char
   203 000036DA 3A052AC9FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
   204 000036E0 0F84C1E3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   205                              <1> .pathGetEnv:
   206                              <1> ;Now get a pointer to the environment and search for PATH=
   207                              <1> ;We only take the final portion of the path and add it to each path componant
   208                              <1> ;This agrees with DOS 3.3
   209 000036E6 E85C120000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
   210 000036EB 0F84B6E3FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
   211                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
   212                              <1>     ;Now we know we dont have to keep track of chars!!
   213 000036F1 488D3D0AD1FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
   214 000036F8 E8A4120000          <1>     call searchForEnvVar
   215 000036FD 0F82A4E3FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
   216 00003703 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
   217 00003706 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
   218                              <1> .pathRejoin:
   219 0000370D 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
   220 00003710 0F8491E3FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
   221 00003716 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
   222 00003719 488D3D(70040000)    <1>     lea rdi, searchSpec ;Build the path in searchSpec
   223                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
   224                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
   225                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
   226                              <1>     ;This is impossible to do if env edited by COMMAND.COM
   227 00003720 E86F0F0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
   228 00003725 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
   229 00003728 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
   230 0000372B 48FFCF              <1>     dec rdi ;Point to the null terminator
   231 0000372E 8A05D6C8FFFF        <1>     mov al, byte [pathSep]
   232 00003734 3847FF              <1>     cmp byte [rdi - 1], al
   233 00003737 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
   234 00003739 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
   235                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
   236 0000373A 488D35(E7000000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   237 00003741 E80E0F0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
   238 00003746 488D35(70040000)    <1>     lea rsi, searchSpec 
   239 0000374D 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   240 00003754 E8E20D0000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
   241 00003759 E971FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
   242                              <1> .pathReentry:
   243 0000375E 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
   244 00003762 0F843FE3FFFF        <1>     je badCmdError
   245                              <1> ;Currently, because we dont swap drives, we wont print this message.
   246                              <1> ;Not really a big deal...
   247                              <1>     ;cmp al, errBadDrv
   248                              <1>     ;jne .pathDrvOk
   249                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
   250                              <1>     ;mov eax, 0900h
   251                              <1>     ;int 21h
   252                              <1> ;.pathDrvOk:
   253 00003768 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
   254 0000376B 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
   255 0000376E EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
   256                              <1> 
   257                              <1> .prepAndSearch:
   258                              <1> ;Copies over the name and extension in UC to the last componant of the 
   259                              <1> ;cmdPathSpec and null terminates. 
   260                              <1> ;Input: cmdFcb name + ext setup. 
   261                              <1> ;Output: rdx -> Filled in cmdPathSpec 
   262                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
   263 00003770 51                  <1>     push rcx
   264 00003771 56                  <1>     push rsi
   265 00003772 57                  <1>     push rdi
   266 00003773 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec 
   267 0000377A 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
   268 0000377D E8AE0E0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
   269 00003782 807F013A            <1>     cmp byte [rdi + 1], ":"
   270 00003786 7507                <1>     jne .notdriveRel
   271 00003788 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
   272                              <1> .notdriveRel:
   273 0000378F 488D35(E7000000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   274 00003796 E8B90E0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
   275 0000379B B8004E0000          <1>     mov eax, 4E00h  ;Find first
   276 000037A0 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
   277 000037A2 CD21                <1>     int 21h
   278 000037A4 5F                  <1>     pop rdi
   279 000037A5 5E                  <1>     pop rsi
   280 000037A6 59                  <1>     pop rcx
   281                              <1>     return
    13                              <2> %%_ret:
    14 000037A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> set:
   284 000037A8 F6059CC8FFFFFF      <1>     test byte [arg1Flg], -1
   285 000037AF 7539                <1>     jnz .editEnv
   286                              <1>     ;Here we just print the environment.
   287 000037B1 E891110000          <1>     call checkEnvGoodAndGet 
   288 000037B6 0F8497E2FFFF        <1>     jz badEnvSpaceError
   289                              <1>     ;We know this is a good env so keep going! env ptr in rsi
   290 000037BC 4889F7              <1>     mov rdi, rsi
   291 000037BF 4889F2              <1>     mov rdx, rsi
   292                              <1> .findLp:
   293 000037C2 B9FFFFFFFF          <1>     mov ecx, -1
   294 000037C7 31C0                <1>     xor eax, eax
   295                              <1> .scanLp:
   296 000037C9 F2AE                <1>     repne scasb
   297 000037CB 75FC                <1>     jne .scanLp
   298 000037CD F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
   299                              <1>     ;Else, we now print this environment variable and CRLF it
   300                              <1>     ;rdx points to the start of the string aleady
   301                              <1>     ;ecx has the bytes to print
   302 000037CF BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
   303 000037D4 B800400000          <1>     mov eax, 4000h  ;Print to handle
   304 000037D9 CD21                <1>     int 21h
   305 000037DB E8560B0000          <1>     call printCRLF
   306 000037E0 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
   307                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000037E3 74(A7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   308 000037E5 4889FA              <1>     mov rdx, rdi   
   309 000037E8 EBD8                <1>     jmp short .findLp
   310                              <1> .editEnv:
   311 000037EA E858110000          <1>     call checkEnvGoodAndGet
   312 000037EF 0F845EE2FFFF        <1>     jz badEnvSpaceError
   313 000037F5 0FB60550C8FFFF      <1>     movzx eax, byte [arg1Off]
   314 000037FC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   315 00003803 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
   316                              <1> .altEp:
   317 00003806 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
   318 00003809 B00D                <1>     mov al, CR              ;Search for the CR
   319 0000380B 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
   320 00003813 89CB                <1>     mov ebx, ecx            ;Save this count 
   321 00003815 53                  <1>     push rbx                ;Save this count on the stack too!
   322 00003816 F2AE                <1>     repne scasb             ;Now get the length of this env string
   323 00003818 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
   324 0000381A 66891D(56070000)    <1>     mov word [envVarSz], bx ;Store the count
   325 00003821 59                  <1>     pop rcx                 ;Get the char count back!
   326 00003822 89CB                <1>     mov ebx, ecx            
   327 00003824 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
   328 00003827 B03D                <1>     mov al, "="             ;Scan for an equals sign
   329 00003829 F2AE                <1>     repne scasb
   330 0000382B 0F8519E2FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
   331 00003831 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
   332 00003833 66891D(58070000)    <1>     mov word [envVarNamSz], bx
   333 0000383A 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
   334 0000383D 7477                <1>     je .delEnvVar           ;Free the envvar and return
   335 0000383F 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
   336 00003840 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   337 00003843 E859110000          <1>     call searchForEnvVar    ;Look for the environment variable
   338 00003848 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
   339 0000384A E880110000          <1>     call envFree            ;Free the var in rsi
   340                              <1> .editNewEnv:
   341 0000384F E8B4110000          <1>     call getFreeSpace       ;Get the free space in env in ecx
   342 00003854 E8D4110000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
   343 00003859 5E                  <1>     pop rsi                 ;Get back the ptr to the string
   344 0000385A 31C0                <1>     xor eax, eax            ;Prepare null length!
   345 0000385C 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
   346 00003862 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
   347 00003865 720B                <1>     jb .reallocTry          ;Try to reallocate!
   348 00003867 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
   349 00003869 663B0D(56070000)    <1>     cmp cx, word [envVarSz] ;Do we have enough space?
   350 00003870 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
   351                              <1> .reallocTry:
   352                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
   353                              <1>     ; we proceed with the environment size.
   354 00003872 E8CB110000          <1>     call growEnvBlock   ;Attempt to grow the environment
   355 00003877 7319                <1>     jnc .reallocOk
   356 00003879 0F84D4E1FFFF        <1>     jz badEnvSpaceError    ;Max environment space
   357                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
   358                              <1>     ; partially the variable into the env. If so we do that. If the name
   359                              <1>     ; cannot fit, we don't bother
   360                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
   361 0000387F 663B0D(58070000)    <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
   362                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003886 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003888 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   363 00003889 E8C5E1FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
   364 0000388E FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
   365 00003890 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
   366                              <1> .reallocOk:
   367                              <1>     ;Here we have all the space to just copy the full path
   368 00003892 0FB70D(56070000)    <1>     movzx ecx, word [envVarSz]
   369                              <1> .nameCp:
   370                              <1> ;Now copy over the env var, ecx = #ofchars to copy
   371                              <1> ;Always enough memory for name= here
   372 00003899 AC                  <1>     lodsb
   373 0000389A E8BF0C0000          <1>     call ucChar
   374 0000389F AA                  <1>     stosb
   375 000038A0 66FFC9              <1>     dec cx      ;Always decrement this count
   376 000038A3 3C3D                <1>     cmp al, "="
   377 000038A5 75F2                <1>     jne .nameCp
   378                              <1> .exitNameCp:
   379 000038A7 AC                  <1>     lodsb
   380 000038A8 3C0D                <1>     cmp al, CR
   381 000038AA 7405                <1>     je .exitCp
   382 000038AC AA                  <1>     stosb
   383 000038AD FFC9                <1>     dec ecx
   384 000038AF 75F6                <1>     jnz .exitNameCp
   385                              <1> .exitCp:
   386 000038B1 31C0                <1>     xor eax, eax
   387 000038B3 66AB                <1>     stosw   ;Store the final null word
   388                              <1>     return
    13                              <2> %%_ret:
    14 000038B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .delEnvVar:
   390                              <1>     ;rsi -> Start of the envvar name in user buffer
   391 000038B6 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   392 000038B9 E8E3100000          <1>     call searchForEnvVar    ;Look for the environment variable
   393 000038BE 7205                <1>     jc .delEnvVarSkip
   394 000038C0 E80A110000          <1>     call envFree    ;Free the env var at rsi
   395                              <1> .delEnvVarSkip:
   396 000038C5 F8                  <1>     clc             ;Clear CF if the var doesnt exist
   397                              <1>     return
    13                              <2> %%_ret:
    14 000038C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> pathEdit:
   400                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
   401                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
   402                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
   403                              <1> ; end there. Error with too many arguments error!
   404                              <1> ;If after the equals sign there is nothing, we just print the path!
   405                              <1> ;Gotta process the command line ourselves first
   406 000038C7 E87B100000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   407 000038CC 0F8481E1FFFF        <1>     jz badEnvSpaceError
   408                              <1>     ;Now we know we can use r8 to get the envptr when needed
   409 000038D2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   410 000038D9 E8AD000000          <1>     call .skipPathDelimiters
   411 000038DE 3C0D                <1>     cmp al, CR
   412 000038E0 7466                <1>     je .printPath
   413                              <1> ;Else use the set command to setup the path in the searchSpec.
   414 000038E2 56                  <1>     push rsi    ;Save the first char of the command line string
   415 000038E3 488D3518CFFFFF      <1>     lea rsi, pathEVar
   416 000038EA 488D3D(70040000)    <1>     lea rdi, searchSpec
   417 000038F1 E8450C0000          <1>     call strcpy
   418 000038F6 48FFCF              <1>     dec rdi     ;Point to the terminating null
   419 000038F9 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
   420 000038FA 31C9                <1>     xor ecx, ecx    ;Make a count of chars
   421                              <1> .cpLp:
   422 000038FC AC                  <1>     lodsb
   423 000038FD 3C0D                <1>     cmp al, CR
   424 000038FF 7411                <1>     je .cpLpExit
   425 00003901 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
   426 00003906 740A                <1>     je .cpLpExit
   427 00003908 E8510C0000          <1>     call ucChar ;Uppercase the char
   428 0000390D AA                  <1>     stosb       ;Store it
   429 0000390E FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
   430 00003910 EBEA                <1>     jmp short .cpLp
   431                              <1> .cpLpExit:
   432                              <1>     ;Remove trailing semicolons
   433 00003912 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
   434 00003916 7507                <1>     jne .cpLpNoIntervene
   435 00003918 FFC9                <1>     dec ecx     ;Reduce the count by one
   436 0000391A 48FFCF              <1>     dec rdi     ;Go back a char
   437 0000391D EBF3                <1>     jmp short .cpLpExit ;Keep removing
   438                              <1> .cpLpNoIntervene:
   439 0000391F B00D                <1>     mov al, CR  ;Now we store the terminator!
   440 00003921 AA                  <1>     stosb       ;Store it!
   441 00003922 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
   442 00003928 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
   443 0000392F FFC1                <1>     inc ecx     ;Add the CR for copying over
   444 00003931 488D35(70040000)    <1>     lea rsi, searchSpec
   445 00003938 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   446 0000393F 57                  <1>     push rdi
   447 00003940 F3A4                <1>     rep movsb
   448 00003942 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
   449 00003943 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
   450                              <1> .printPath:
   451 00003948 488D3DB3CEFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
   452 0000394F E84D100000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
   453 00003954 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
   454 00003956 4889F7              <1>     mov rdi, rsi        
   455 00003959 E8F60B0000          <1>     call strlen         ;Get the length of the path in rdi
   456 0000395E 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
   457 00003964 7411                <1>     je .noPathPrnt      ;Print no path!
   458 00003966 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
   459 00003968 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
   460 0000396B BB01000000          <1>     mov ebx, 1          ;STDOUT
   461 00003970 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
   462 00003975 EB0C                <1>     jmp short .pathExit
   463                              <1> .noPathPrnt:
   464 00003977 488D154DCBFFFF      <1>     lea rdx, noPath
   465 0000397E B800090000          <1>     mov eax, 0900h
   466                              <1> .pathExit:
   467 00003983 CD21                <1>     int 21h
   468 00003985 E8AC090000          <1>     call printCRLF      ;Print a crlf at the end
   469                              <1>     return
    13                              <2> %%_ret:
    14 0000398A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> .skipPathDelimiters:
   471                              <1> ;Input: rsi -> Start of string to parse
   472                              <1> ;Output: rsi -> First non-delimiter char of string
   473                              <1> ;        al = First non delim char
   474 0000398B AC                  <1>     lodsb
   475 0000398C E806000000          <1>     call .isALPathDelimiter
   476 00003991 74F8                <1>     je .skipPathDelimiters
   477 00003993 48FFCE              <1>     dec rsi
   478                              <1>     return
    13                              <2> %%_ret:
    14 00003996 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> .isALPathDelimiter:
   480                              <1> ;Same as before without semicolon
   481 00003997 3C20                <1>     cmp al, SPC
   482                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003999 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   483 0000399B 3C09                <1>     cmp al, TAB
   484                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000399D 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   485 0000399F 3C2C                <1>     cmp al, ","
   486                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000039A1 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487 000039A3 3C3D                <1>     cmp al, "="
   488                              <1>     return
    13                              <2> %%_ret:
    14 000039A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> prompt:
   491 000039A6 E89C0F0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   492 000039AB 0F84A2E0FFFF        <1>     jz badEnvSpaceError
   493                              <1>     ;Now we know we can use r8 to get the envptr when needed
   494 000039B1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   495 000039B8 E8BC0B0000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
   496 000039BD 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
   497 000039C0 742C                <1>     je .reset   ;Reset if so
   498 000039C2 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
   499 000039C3 488D350ECEFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
   500 000039CA 488D3D(70040000)    <1>     lea rdi, searchSpec
   501 000039D1 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
   502 000039D6 F3A4                <1>     rep movsb
   503 000039D8 5E                  <1>     pop rsi ;Get back ptr to the user typed line
   504 000039D9 31C9                <1>     xor ecx, ecx    ;Get char count
   505                              <1> .cp:    ;Now copy the user string over
   506 000039DB AC                  <1>     lodsb
   507 000039DC AA                  <1>     stosb 
   508 000039DD 3C0D                <1>     cmp al, CR
   509 000039DF 7404                <1>     je .cpOk
   510 000039E1 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
   511 000039E3 EBF6                <1>     jmp short .cp
   512                              <1> .cpOk:
   513 000039E5 488D35(70040000)    <1>     lea rsi, searchSpec ;Source the string from here
   514 000039EC EB09                <1>     jmp short .goSet    ;Got the CR-less count
   515                              <1> .reset:
   516                              <1> ;Delete the environment variable!
   517 000039EE 488D35E3CDFFFF      <1>     lea rsi, promptEVar 
   518 000039F5 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
   519                              <1> .goSet:
   520 000039F7 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
   521 000039FD 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
   522 00003A04 FFC1                <1>     inc ecx     ;Include CR in copy
   523 00003A06 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   524 00003A0D 57                  <1>     push rdi
   525 00003A0E F3A4                <1>     rep movsb
   526 00003A10 5E                  <1>     pop rsi
   527 00003A11 E9F0FDFFFF          <1>     jmp set.altEp
   528                              <1> 
   529                              <1> echo:
   530 00003A16 F6052EC6FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
   531 00003A1D 752A                <1>     jnz .argGiven
   532 00003A1F 488D15A1CBFFFF      <1>     lea rdx, echoIs
   533 00003A26 E812090000          <1>     call printString
   534 00003A2B 488D1578CBFFFF      <1>     lea rdx, onMes
   535 00003A32 488D0D67CBFFFF      <1>     lea rcx, offMes
   536 00003A39 F605CDC5FFFFFF      <1>     test byte [echoFlg], -1
   537 00003A40 480F44D1            <1>     cmovz rdx, rcx
   538 00003A44 E9F4080000          <1>     jmp printString
   539                              <1> .argGiven:
   540 00003A49 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   541 00003A50 E8240B0000          <1>     call skipDelimiters
   542 00003A55 E8A30E0000          <1>     call makeArgAsciz
   543 00003A5A E81A0B0000          <1>     call skipDelimiters
   544 00003A5F 803E0D              <1>     cmp byte [rsi], CR
   545 00003A62 751C                <1>     jne .directEcho
   546                              <1> ;Here if one word, check if it is ON or OFF
   547 00003A64 488D3544CBFFFF      <1>     lea rsi, onStr
   548 00003A6B E8B40E0000          <1>     call strcmp
   549 00003A70 7443                <1>     je .setOn
   550 00003A72 488D352DCBFFFF      <1>     lea rsi, offStr
   551 00003A79 E8A60E0000          <1>     call strcmp
   552 00003A7E 743D                <1>     je .setOff
   553                              <1> .directEcho: 
   554 00003A80 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
   555 00003A87 4889D6              <1>     mov rsi, rdx
   556 00003A8A E8EA0A0000          <1>     call skipDelimiters ;Go to the first word on cmdline
   557 00003A8F 56                  <1>     push rsi            ;Save this as the start of print
   558 00003A90 4829D6              <1>     sub rsi, rdx        ;Get how many fewer chars we have to print
   559 00003A93 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get char count
   560 00003A9B 29F1                <1>     sub ecx, esi
   561 00003A9D 5A                  <1>     pop rdx             ;Pop the ptr into rdx
   562 00003A9E 0F8289080000        <1>     jc printCRLFecho    
   563 00003AA4 BB01000000          <1>     mov ebx, 1
   564 00003AA9 B800400000          <1>     mov eax, 4000h
   565 00003AAE CD21                <1>     int 21h
   566 00003AB0 E981080000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
   567                              <1> .setOn:
   568 00003AB5 C60551C5FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
   569                              <1>     return
    13                              <2> %%_ret:
    14 00003ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   570                              <1> .setOff:
   571 00003ABD C60549C5FFFF00      <1>     mov byte [echoFlg], 0
   572                              <1>     return
    13                              <2> %%_ret:
    14 00003AC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> 
   575                              <1> pauza:  ;Well... pause is an instruction in english 0:)
   576                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
   577                              <1> ; with just... the actual command tail being echoed with the command -_-
   578 00003AC5 F60541C5FFFFFF      <1>     test byte [echoFlg], -1
   579 00003ACC 7528                <1>     jnz .echoTail
   580                              <1> ;Since we havent echoed the command out, type the tail out manually
   581 00003ACE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
   582 00003AD5 E89F0A0000          <1>     call skipDelimiters ;Skip leading delims
   583 00003ADA 4889F2              <1>     mov rdx, rsi
   584 00003ADD 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
   585 00003AE5 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
   586 00003AEA B800400000          <1>     mov eax, 4000h  ;Write
   587 00003AEF CD21                <1>     int 21h
   588 00003AF1 E840080000          <1>     call printCRLF
   589                              <1> .echoTail:
   590 00003AF6 488D1536C8FFFF      <1>     lea rdx, pauseMes
   591 00003AFD E83B080000          <1>     call printString
   592 00003B02 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
   593 00003B07 CD21                <1>     int 21h
   594 00003B09 E828080000          <1>     call printCRLF
   595                              <1> remark:
   596                              <1>     return
    13                              <2> %%_ret:
    14 00003B0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
   598                              <1> ;    test byte [statFlg1], inBatch
   599                              <1> ;    retz
   600                              <1> ;.go:
   601                              <1> ;    pop rbx
   602                              <1> ;    pop rbx ;Realign the stack back :)
   603                              <1> ;    call getSetMainState
   604                              <1> ;    jmp commandMain.inputGetAgain   ;Clean any redirs and get input
   605                              <1> 
   606                              <1> shift:
   607                              <1> ;If not in batch, immediately return!
   608 00003B0F F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   609                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B16 74(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   610 00003B18 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]  ;Get the batch block
   611 00003B1F 488D7B13            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]
   612 00003B23 488D7702            <1>     lea rsi, qword [rdi + 2]    ;Source from one word ahead
   613 00003B27 B909000000          <1>     mov ecx, 9
   614 00003B2C 31C0                <1>     xor eax, eax
   615                              <1> .lp:
   616 00003B2E 66AD                <1>     lodsw
   617 00003B30 66AB                <1>     stosw
   618 00003B32 3DFFFF0000          <1>     cmp eax, 0FFFFh   ;Once we xfer a -1 word, no more args on cmd line
   619                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B37 74(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   620 00003B39 FFC9                <1>     dec ecx
   621 00003B3B 75F1                <1>     jnz .lp
   622                              <1> ;Now we gotta scan for one more cmdline argument
   623 00003B3D 66C74325FFFF        <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], -1   ;Init a -1 at the end
   624 00003B43 B00D                <1>     mov al, CR
   625 00003B45 31C9                <1>     xor ecx, ecx
   626 00003B47 FFC9                <1>     dec ecx ;
   627 00003B49 488D3C03            <1>     lea rdi, qword [rbx + rax]  ;rax has the last offset
   628 00003B4D F2AE                <1>     repne scasb ;Find CR which terminated old last argument, go past it
   629 00003B4F 803F00              <1>     cmp byte [rdi], 0   ;If this is the terminating null, leave as -1
   630                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B52 74(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   631 00003B54 4829DF              <1>     sub rdi, rbx    ;Get the offset from batBlockHdr
   632 00003B57 66897B25            <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], di    ;Store the difference
   633                              <1>     return
    13                              <2> %%_ret:
    14 00003B5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   634                              <1>     
   635                              <1> goto:
   636                              <1> ;If not in batch, immediately return!
   637 00003B5C F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   638                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B63 74(5B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   639 00003B65 488B2D(1B000000)    <1>     mov rbp, qword [bbPtr]
   640 00003B6C 4885ED              <1>     test rbp, rbp
   641                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B6F 74(5B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   642                              <1> ;Start by copying the command line label to fcb1
   643 00003B71 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   644 00003B78 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
   645 00003B7C E8F8090000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
   646 00003B81 B908000000          <1>     mov ecx, 8
   647 00003B86 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
   648 00003B89 7503                <1>     jne .startCopy
   649 00003B8B 48FFC6              <1>     inc rsi
   650                              <1> .startCopy:
   651 00003B8E AC                  <1>     lodsb
   652 00003B8F 3C20                <1>     cmp al, SPC         ;Skip any spaces
   653 00003B91 74FB                <1>     je .startCopy       
   654 00003B93 3C0D                <1>     cmp al, CR          ;If CR, exit copy
   655 00003B95 740C                <1>     je .endCopy
   656 00003B97 E8EB090000          <1>     call isALdelimiter  ;If delimiter char, exit copy
   657 00003B9C 7405                <1>     jz .endCopy
   658 00003B9E AA                  <1>     stosb           
   659 00003B9F FFC9                <1>     dec ecx             ;Decrement counter
   660 00003BA1 75EB                <1>     jnz .startCopy
   661                              <1> .endCopy:
   662                              <1> ;Now search the batch file for the label.
   663 00003BA3 F7D9                <1>     neg ecx
   664 00003BA5 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
   665 00003BAB 498D505C            <1>     lea rdx, qword [r8 + fcb1]
   666 00003BAF 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
   667 00003BB1 E8C7000000          <1>     call .ucChars   ;Now we UC the chars in the string
   668 00003BB6 48C7450B00000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
   669 00003BBE E8EBDDFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
   670                              <1> ;File opened from the start. Now start byte by byte read.
   671                              <1> .notLabelLp:
   672 00003BC3 F605(1A000000)10    <1>     test byte [statFlg1], batchEOF  
   673 00003BCA 0F859B000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
   674 00003BD0 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
   675                              <1> .findLbl:
   676                              <1> ;Keep searching for a label
   677 00003BD4 E80DDEFFFF          <1>     call batReadChar
   678 00003BD9 0F848C000000        <1>     jz .eof
   679 00003BDF 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   680 00003BE3 803A3A              <1>     cmp byte [rdx], ":"
   681 00003BE6 75EC                <1>     jne .findLbl 
   682                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
   683 00003BE8 31C9                <1>     xor ecx, ecx
   684                              <1> .loadRead:
   685 00003BEA E8F7DDFFFF          <1>     call batReadChar
   686 00003BEF 744D                <1>     jz .lblDone
   687 00003BF1 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
   688 00003BF3 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   689 00003BF7 3C0D                <1>     cmp al, CR
   690 00003BF9 7433                <1>     je .lblDoneCR
   691 00003BFB 3C0A                <1>     cmp al, LF
   692 00003BFD 743F                <1>     je .lblDone
   693 00003BFF 3C20                <1>     cmp al, SPC
   694 00003C01 74E7                <1>     je .loadRead
   695 00003C03 E87F090000          <1>     call isALdelimiter
   696 00003C08 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
   697 00003C0A 48FFC2              <1>     inc rdx ;Inc the storage pointer
   698 00003C0D FFC1                <1>     inc ecx ;Inc the count
   699 00003C0F 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
   700 00003C15 75D3                <1>     jne .loadRead
   701                              <1> .pullEol:
   702 00003C17 E8CADDFFFF          <1>     call batReadChar
   703 00003C1C 7420                <1>     jz .lblDone
   704 00003C1E 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   705 00003C22 803A0D              <1>     cmp byte [rdx], CR
   706 00003C25 7407                <1>     je .lblDoneCR
   707 00003C27 803A0A              <1>     cmp byte [rdx], LF
   708 00003C2A 7412                <1>     je .lblDone
   709 00003C2C EBE9                <1>     jmp short .pullEol
   710                              <1> .lblDoneCR:
   711                              <1> ;Read a CR, check if the next char is an LF and scan past it.
   712 00003C2E E8B3DDFFFF          <1>     call batReadChar
   713 00003C33 7409                <1>     jz .lblDone
   714 00003C35 803A0A              <1>     cmp byte [rdx], LF
   715 00003C38 7504                <1>     jne .lblDone    ;No LF
   716                              <1> ;Else include the LF in the count to go past
   717 00003C3A 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
   718                              <1> .lblDone:
   719                              <1> ;Check what we have to see if it is possible to form a label
   720 00003C3E 498D506C            <1>     lea rdx, qword [r8 + fcb2]
   721 00003C42 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
   722 00003C44 E834000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
   723                              <1> ;Now compare the strings (trailing space padding)
   724 00003C49 488D32              <1>     lea rsi, qword [rdx]
   725 00003C4C AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
   726 00003C4D 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
   727 00003C50 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
   728 00003C54 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
   729 00003C57 0F8566FFFFFF        <1>     jne .notLabelLp
   730 00003C5D F3A6                <1>     repe cmpsb  ;Now do a string cmp
   731 00003C5F 0F855EFFFFFF        <1>     jne .notLabelLp
   732                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
   733 00003C65 E874DDFFFF          <1>     call batClose   ;Close the handle
   734                              <1>     return
    13                              <2> %%_ret:
    14 00003C6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1>     ;jmp remark.go   ;Now behave like rem to get the next line!
   736                              <1> .eof:
   737                              <1> ;Print label not found, end batch mode and return
   738 00003C6B 488D15A4C8FFFF      <1>     lea rdx, badLbl
   739 00003C72 E8C6060000          <1>     call printString
   740 00003C77 E895DAFFFF          <1>     call batFinish  ;Kill the batch processor
   741                              <1>     return
    13                              <2> %%_ret:
    14 00003C7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> .ucChars:
   744                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
   745                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
   746 00003C7D 50                  <1>     push rax
   747 00003C7E 51                  <1>     push rcx
   748 00003C7F 56                  <1>     push rsi
   749                              <1> 
   750 00003C80 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
   751 00003C84 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
   752                              <1> .ucclp:
   753 00003C87 AC                  <1>     lodsb   ;Get the char
   754 00003C88 E8D1080000          <1>     call ucChar
   755 00003C8D 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
   756 00003C90 FFC9                <1>     dec ecx     
   757 00003C92 75F3                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
   758                              <1>     
   759 00003C94 5E                  <1>     pop rsi
   760 00003C95 59                  <1>     pop rcx
   761 00003C96 58                  <1>     pop rax
   762                              <1>     return
    13                              <2> %%_ret:
    14 00003C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> 
   764                              <1> ifCmd:
   765 00003C98 C605(72000000)00    <1>     mov byte [ifFlg], ifReset ;Reset not state
   766 00003C9F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   767 00003CA6 E8640C0000          <1>     call getNextArg    ;Skip leading delimiters
   768 00003CAB 4889F3              <1>     mov rbx, rsi        ;Save the possible start of string ptr (if string)
   769 00003CAE E83D0C0000          <1>     call makeAsciizAdv ;Move rsi to next word, rdi -> ASCIZ string
   770 00003CB3 56                  <1>     push rsi    ;Save ptr to the next word on stack
   771 00003CB4 488D358EC9FFFF      <1>     lea rsi, notString
   772 00003CBB E8640C0000          <1>     call strcmp
   773 00003CC0 5E                  <1>     pop rsi
   774 00003CC1 750F                <1>     jne .chkErlvl
   775 00003CC3 800D(72000000)01    <1>     or byte [ifFlg], ifNot  ;Set not on
   776 00003CCA 4889F3              <1>     mov rbx, rsi    ;Save the start of string ptr (if string)
   777 00003CCD E81E0C0000          <1>     call makeAsciizAdv     ;Goto next word
   778                              <1> .chkErlvl:
   779 00003CD2 56                  <1>     push rsi    ;rsi points to the argument
   780 00003CD3 488D3573C9FFFF      <1>     lea rsi, errlvlStr
   781 00003CDA E8450C0000          <1>     call strcmp
   782 00003CDF 5E                  <1>     pop rsi
   783 00003CE0 0F849A000000        <1>     je .errorLvl
   784 00003CE6 56                  <1>     push rsi
   785 00003CE7 488D356AC9FFFF      <1>     lea rsi, existStr
   786 00003CEE E8310C0000          <1>     call strcmp
   787 00003CF3 5E                  <1>     pop rsi
   788 00003CF4 7472                <1>     je .exist
   789                              <1> ;Here we check condition string1==string2
   790                              <1> ;rsi points to the start of the string to check condition of
   791 00003CF6 4889DE              <1>     mov rsi, rbx    ;Get back the start of the string
   792 00003CF9 4889F7              <1>     mov rdi, rsi    ;Move rdi to the start of the string
   793 00003CFC 31C9                <1>     xor ecx, ecx    ;String length cnt
   794                              <1> .scCheck:
   795 00003CFE AC                  <1>     lodsb
   796 00003CFF 3C3D                <1>     cmp al, "="
   797 00003D01 7417                <1>     je .scEqFnd
   798 00003D03 E87F080000          <1>     call isALdelimiter
   799 00003D08 0F843CDDFFFF        <1>     je badSyntaxError
   800 00003D0E 3C0D                <1>     cmp al, CR
   801 00003D10 0F8434DDFFFF        <1>     je badSyntaxError
   802 00003D16 FFC1                <1>     inc ecx         ;One more char to count
   803 00003D18 EBE4                <1>     jmp short .scCheck
   804                              <1> .scEqFnd:
   805 00003D1A AC                  <1>     lodsb   ;Move rsi to the char past this equal sign
   806 00003D1B 3C3D                <1>     cmp al, "=" ;Is the second char an equal too?
   807 00003D1D 0F8527DDFFFF        <1>     jne badSyntaxError
   808 00003D23 F3A6                <1>     repe cmpsb  ;Compare the strings, leave rsi past string 2
   809 00003D25 7507                <1>     jnz .cndMiss
   810                              <1> .cndHit:
   811 00003D27 800D(72000000)02    <1>     or byte [ifFlg], ifCond ;The default condition was hit
   812                              <1> .cndMiss:
   813 00003D2E 0FB605(72000000)    <1>     movzx eax, byte [ifFlg]
   814 00003D35 89C3                <1>     mov ebx, eax
   815 00003D37 D1EB                <1>     shr ebx, 1      ;Get bit 1 to bit 0
   816 00003D39 2501000000          <1>     and eax, 1      ;Isolate bit 0
   817 00003D3E 31D8                <1>     xor eax, ebx    ;xor the condition hit bit with not. If 1, execute!
   818                              <1>     retz            ;Else return silently!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003D40 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003D42 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   819                              <1> ;Now rsi points to delims before the command. 
   820                              <1> ; Skip the delims and copy the argument!
   821 00003D43 E831080000          <1>     call skipDelimiters    ;Now go to the next argument (No need for CR check)
   822 00003D48 488D3D(C5010000)    <1>     lea rdi, qword [cLineBuffer + 2]
   823 00003D4F 31C9                <1>     xor ecx, ecx
   824                              <1> .cpExitLp:
   825 00003D51 AC                  <1>     lodsb
   826 00003D52 AA                  <1>     stosb
   827 00003D53 FFC1                <1>     inc ecx ;Add a new char to the count
   828 00003D55 3C0D                <1>     cmp al, CR
   829 00003D57 75F8                <1>     jne .cpExitLp
   830 00003D59 FFC9                <1>     dec ecx ;Drop CR from count
   831 00003D5B 880D(C4010000)      <1>     mov byte [cLineBuffer + 1], cl
   832 00003D61 58                  <1>     pop rax ;Balance the stack
   833 00003D62 58                  <1>     pop rax
   834 00003D63 E93ACDFFFF          <1>     jmp commandMain.batProceed    ;And execute the command now!
   835                              <1> .exist:
   836                              <1> ;Here we do the check for file existance
   837 00003D68 E8830B0000          <1>     call makeAsciizAdv
   838 00003D6D B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   839 00003D72 4889FA              <1>     mov rdx, rdi    ;Move the ptr to rdx
   840 00003D75 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   841 00003D7A CD21                <1>     int 21h
   842 00003D7C 73A9                <1>     jnc .cndHit
   843 00003D7E EBAE                <1>     jmp short .cndMiss
   844                              <1> .errorLvl:
   845                              <1> ;Here we do the check for error level
   846 00003D80 E86B0B0000          <1>     call makeAsciizAdv
   847 00003D85 4887FE              <1>     xchg rdi, rsi
   848 00003D88 E8A50A0000          <1>     call getNum     ;Get value in eax
   849 00003D8D 3DFF000000          <1>     cmp eax, 255    ;Value can't be bigger than 255
   850 00003D92 0F87B2DCFFFF        <1>     ja badSyntaxError
   851 00003D98 4887FE              <1>     xchg rdi, rsi
   852 00003D9B 3A05(00000000)      <1>     cmp al, byte [returnCode]
   853 00003DA1 7484                <1>     je .cndHit
   854 00003DA3 E986FFFFFF          <1>     jmp .cndMiss
   855                              <1> 
   856                              <1> forCmd:
   857                              <1> ;FOR %<var> IN (list) DO command
   858                              <1> ;Allocate a FOR block, parse the for command line and fill in the forBlk.
   859                              <1> ; Works by writing a new version of the commandline for each element in the
   860                              <1> ; list. If %<arg> in the command, it just executes the command n times where 
   861                              <1> ; n is the number of elements in the list.
   862 00003DA8 F605(74000000)FF    <1>     test byte [forFlg], -1
   863 00003DAF 0F857EDCFFFF        <1>     jnz badForError
   864 00003DB5 BB19000000          <1>     mov ebx, ((forBlk_size + 0Fh) >> 4) ;Get paras to allocate
   865 00003DBA B800480000          <1>     mov eax, 4800h  ;ALLOC
   866 00003DBF CD21                <1>     int 21h
   867 00003DC1 0F827ADCFFFF        <1>     jc badNoMemError
   868 00003DC7 C605(74000000)FF    <1>     mov byte [forFlg], -1   ;Set var
   869 00003DCE 488905(75000000)    <1>     mov qword [pForBlk], rax    ;Save the ptr to the ForBlk
   870 00003DD5 4889C5              <1>     mov rbp, rax            ;Move forblk ptr to rbp
   871                              <1> ;Clean the memory block for use
   872 00003DD8 4889C7              <1>     mov rdi, rax
   873 00003DDB 31C0                <1>     xor eax, eax
   874 00003DDD B986010000          <1>     mov ecx, forBlk_size
   875 00003DE2 F3AA                <1>     rep stosb
   876                              <1> ;Clean any pre-established redirs
   877 00003DE4 E8BADBFFFF          <1>     call batKillRedir   ;Preserves rbp
   878                              <1> ;Now copy the command line to the block :)
   879 00003DE9 488D35(C3010000)    <1>     lea rsi, cLineBuffer   ;Start reading what we typed in
   880 00003DF0 488DBD95000000      <1>     lea rdi, qword [rbp + forBlk.sCmdLine]
   881 00003DF7 57                  <1>     push rdi
   882 00003DF8 B982000000          <1>     mov ecx, cmdBufferL
   883 00003DFD F3A4                <1>     rep movsb   ;And copy!
   884 00003DFF 5E                  <1>     pop rsi     ;Now source the command line from our copy! :)
   885                              <1> ;Now we parse the command line.
   886 00003E00 4881C602000000      <1>     add rsi, 2  ;Now skip the buffer length bytes
   887 00003E07 E8030B0000          <1>     call getNextArg     ;Moves rdi to the FOR. Guaranteed to be so! 
   888                              <1> .findForLp:
   889 00003E0C E8DF0A0000          <1>     call makeAsciizAdv  ;Move rsi to the next word (%<VAR>) [LAZY!]
   890 00003E11 56                  <1>     push rsi
   891 00003E12 488D3536C7FFFF      <1>     lea rsi, forStr
   892 00003E19 E8060B0000          <1>     call strcmp
   893 00003E1E 5E                  <1>     pop rsi
   894 00003E1F 75EB                <1>     jne .findForLp  ;We are guaranteed to have a FOR in the command line
   895 00003E21 E8CA0A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to IN
   896 00003E26 803F25              <1>     cmp byte [rdi], "%"
   897 00003E29 0F85D3000000        <1>     jne .forBadSynExit
   898 00003E2F 807F0200            <1>     cmp byte [rdi + 2], 0
   899 00003E33 0F85C9000000        <1>     jne .forBadSynExit
   900 00003E39 0FB64701            <1>     movzx eax, byte [rdi + 1]
   901 00003E3D 888585010000        <1>     mov byte [rbp + forBlk.bLpVar], al  ;Store the loopchar
   902 00003E43 E8A80A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to "("
   903 00003E48 56                  <1>     push rsi
   904 00003E49 488D350EC8FFFF      <1>     lea rsi, inStr
   905 00003E50 E8CF0A0000          <1>     call strcmp
   906 00003E55 5E                  <1>     pop rsi
   907 00003E56 0F85A6000000        <1>     jne .forBadSynExit
   908                              <1> ;Need special handling now as "(" might be appended to element
   909 00003E5C AC                  <1>     lodsb   ;Get the byte, advance rsi past it 
   910 00003E5D 3A0501C8FFFF        <1>     cmp al, byte [listOpenStr]
   911 00003E63 0F8599000000        <1>     jne .forBadSynExit
   912 00003E69 E8A10A0000          <1>     call getNextArg
   913                              <1>     ;rsi points to the first list element
   914                              <1> .argCpy:
   915 00003E6E E87D0A0000          <1>     call makeAsciizAdv  ;Move rsi to the next list element
   916                              <1> ;Now we check if this is just a ")"
   917 00003E73 0FB707              <1>     movzx eax, word [rdi]   ;Get this word
   918 00003E76 663B05E9C7FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   919 00003E7D 744F                <1>     je .argCpyEnd
   920                              <1> ;Here we have a list element, rsi points to next entry in list
   921 00003E7F FE4500              <1>     inc byte [rbp + forBlk.bListc]  ;We have one more argument
   922 00003E82 488B9D85000000      <1>     mov rbx, qword [rbp + forBlk.pLstCurr]  ;Get ptr to space for list element
   923 00003E89 4885DB              <1>     test rbx, rbx
   924 00003E8C 7504                <1>     jnz .inProgress
   925                              <1> ;Here we have the first list element
   926 00003E8E 488D5D01            <1>     lea rbx, qword [rbp + forBlk.sListBlk]   ;Start writing here
   927                              <1> .inProgress:
   928                              <1> ;Now check if this command is terminated with a ). If it is, end of list.
   929 00003E92 57                  <1>     push rdi
   930 00003E93 E8BC060000          <1>     call strlen ;Get the string length 
   931 00003E98 81E902000000        <1>     sub ecx, 2     ;Drop terminating null
   932 00003E9E 4801CF              <1>     add rdi, rcx    ;Point to the final char
   933 00003EA1 0FB707              <1>     movzx eax, word [rdi]   ;Get this char
   934 00003EA4 663B05BBC7FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   935 00003EAB 7503                <1>     jne .notEnd
   936 00003EAD C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null over the ")"
   937                              <1> .notEnd:
   938 00003EB0 5F                  <1>     pop rdi
   939 00003EB1 56                  <1>     push rsi
   940 00003EB2 4889FE              <1>     mov rsi, rdi    ;Source ASCIZ from the buffer we built in
   941 00003EB5 4889DF              <1>     mov rdi, rbx    ;Write here
   942 00003EB8 E87E060000          <1>     call strcpy     ;Copy and advance pointers with terminating null
   943 00003EBD 4889BD85000000      <1>     mov qword [rbp + forBlk.pLstCurr], rdi  ;Store next arg here
   944 00003EC4 5E                  <1>     pop rsi
   945 00003EC5 663B059AC7FFFF      <1>     cmp ax, word [listClosStr]  ;Check again
   946 00003ECC 75A0                <1>     jne .argCpy ;If not equal, we loop again
   947                              <1> .argCpyEnd:
   948                              <1> ;rsi points to DO command here. 
   949                              <1> ;Parsed all arguments, store ptr to head of asciiz list for processing
   950 00003ECE E81D0A0000          <1>     call makeAsciizAdv  ;Move rsi to the command string
   951 00003ED3 56                  <1>     push rsi
   952 00003ED4 488D3586C7FFFF      <1>     lea rsi, doStr
   953 00003EDB E8440A0000          <1>     call strcmp
   954 00003EE0 5E                  <1>     pop rsi
   955 00003EE1 751F                <1>     jne .forBadSynExit
   956 00003EE3 4889B58D000000      <1>     mov qword [rbp + forBlk.pCmd], rsi  ;Store ptr to head of cmd string :)
   957 00003EEA 48C785850000000000- <1>     mov qword [rbp + forBlk.pLstCurr], 0 ;Signal to start from first arg
   957 00003EF3 0000                <1>
   958 00003EF5 807D0000            <1>     cmp byte [rbp + forBlk.bListc], 0   ;If the count of args 0, syntax error
   959 00003EF9 7407                <1>     je .forBadSynExit
   960 00003EFB E836040000          <1>     call printCRLF  ;Else print CRLF to indicate command accepted 
   961 00003F00 EB0A                <1>     jmp short forProceed    ;And go!!!!
   962                              <1> .forBadSynExit:
   963 00003F02 E889010000          <1>     call forFree
   964 00003F07 E93EDBFFFF          <1>     jmp badSyntaxError
   965                              <1> 
   966                              <1> forProceed:
   967                              <1> ;Start by getting the forblk pointer and set the FFblock immediately
   968 00003F0C 488B2D(75000000)    <1>     mov rbp, qword [pForBlk]    ;Get the ptr to the for block
   969 00003F13 488D955A010000      <1>     lea rdx, qword [rbp + forBlk.sFFBuffer]
   970 00003F1A B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA to the FFblock dta
   971 00003F1F CD21                <1>     int 21h
   972                              <1> ;Now we ascertain whether or not we need a new list entry or use existing
   973                              <1> .longString:
   974 00003F21 F68583000000FF      <1>     test byte [rbp + forBlk.bCmdWC], -1 ;If entry has WC, keep using
   975 00003F28 0F8598000000        <1>     jne .ctnFor
   976                              <1> ;Here we go for a new entry! Check if we are at the start of the list.
   977 00003F2E 48F78585000000FFFF- <1>     test qword [rbp + forBlk.pLstCurr], -1    ;If null, just starting
   977 00003F37 FFFF                <1>
   978 00003F39 7506                <1>     jnz .getNextListElement
   979                              <1> ;Here if we are starting a new for command.
   980 00003F3B 488D7501            <1>     lea rsi, qword [rbp + forBlk.sListBlk]  ;First arg is here
   981 00003F3F EB2F                <1>     jmp short .useString
   982                              <1> .getNextListElement:
   983                              <1> ;Else get the ptr and advance it!
   984 00003F41 C6858300000000      <1>     mov byte [rbp + forBlk.bCmdWC], 0   ;Turn off wildcard if on
   985 00003F48 488BB585000000      <1>     mov rsi, qword [rbp + forBlk.pLstCurr]  ;Get last processed arg ptr
   986 00003F4F 4889F7              <1>     mov rdi, rsi    ;Need for strlen
   987 00003F52 E8FD050000          <1>     call strlen
   988 00003F57 4801CE              <1>     add rsi, rcx    ;Goto next arg!
   989 00003F5A 0FB64D00            <1>     movzx ecx, byte [rbp + forBlk.bListc]
   990 00003F5E FE8584000000        <1>     inc byte [rbp + forBlk.bArgNum] ;We've gone to the next arg
   991 00003F64 388D84000000        <1>     cmp byte [rbp + forBlk.bArgNum], cl
   992 00003F6A 0F84CD000000        <1>     je forEnd  ;Once equal, we have processed all args. Game over!
   993                              <1> .useString:
   994                              <1> ;Now update the pointer in the block!
   995 00003F70 4889B585000000      <1>     mov qword [rbp + forBlk.pLstCurr], rsi  ;Now working on this arg.
   996                              <1> ;Now scan string for wildcards
   997 00003F77 56                  <1>     push rsi
   998                              <1> .wcCheck:
   999 00003F78 AC                  <1>     lodsb
  1000 00003F79 84C0                <1>     test al, al 
  1001 00003F7B 740F                <1>     jz .wcCheckEnd
  1002 00003F7D 3C2A                <1>     cmp al, "*"
  1003 00003F7F 7404                <1>     je .wcFnd
  1004 00003F81 3C3F                <1>     cmp al, "?"
  1005 00003F83 75F3                <1>     jne .wcCheck
  1006                              <1> .wcFnd:
  1007 00003F85 C68583000000FF      <1>     mov byte [rbp + forBlk.bCmdWC], -1  ;We have wildcards!
  1008                              <1> .wcCheckEnd:
  1009                              <1> ;Here we copy the argument to the buffer (for possible expansion)
  1010 00003F8C 5E                  <1>     pop rsi ;Pop back the head of the string to copy over
  1011 00003F8D 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1012 00003F94 E8B1050000          <1>     call strcpy2    ;Copy w/o moving the pointers
  1013                              <1> ;rsi now can be trashed!
  1014 00003F99 B910000000          <1>     mov ecx, dirDirectory
  1015 00003F9E B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1016                              <1> .searchAgain:   ;Need rdi -> Path for below
  1017 00003FA3 4889FA              <1>     mov rdx, rdi    ;Move the pointer to rdx for search. 
  1018 00003FA6 CD21                <1>     int 21h 
  1019 00003FA8 7297                <1>     jc .getNextListElement  ;Get next list element.
  1020 00003FAA 80BD83000000FF      <1>     cmp byte [rbp + forBlk.bCmdWC], -1  ;If no WC, use sNameBuf as is!
  1021 00003FB1 7521                <1>     jne .copyCommand
  1022                              <1> ;Else, we must replace the wildcards. Cannot be in path as find first
  1023                              <1> ; doesn't resolve wildcards in path componants, only filename.
  1024 00003FB3 E878060000          <1>     call findLastPathComponant  ;Point rdi to the last path componant
  1025                              <1> ;We don't need rsi pointing to the string anymore.
  1026 00003FB8 488DB578010000      <1>     lea rsi, qword [rbp + forBlk.sFFBuffer + ffBlock.asciizName]
  1027 00003FBF E886050000          <1>     call strcpy2    ;Copy w/o moving pointers
  1028 00003FC4 EB0E                <1>     jmp short .copyCommand
  1029                              <1> .ctnFor:
  1030                              <1> ;If we searched a filespec with a wildcard, we come here for the next
  1031                              <1> ; in the series. forBlk.sNameBuf is not corrupted while executing a command
  1032 00003FC6 B8004F0000          <1>     mov eax, 4F00h  ;Find Next file for the file found in FFBuffer
  1033 00003FCB 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]  ;Need for getting last pathcomp
  1034 00003FD2 EBCF                <1>     jmp short .searchAgain  ;We have a WC, get next file!
  1035                              <1> .copyCommand:
  1036                              <1> ;We substitute the string in forBlk.sNameBuf into the command line when we
  1037                              <1> ; hit a matching %<var>
  1038 00003FD4 488BB58D000000      <1>     mov rsi, qword [rbp + forBlk.pCmd]  ;Copy the command line
  1039 00003FDB 488D3D(C5010000)    <1>     lea rdi, qword [cLineBuffer + 2]   ;We will be writing to this buffer
  1040 00003FE2 31C9                <1>     xor ecx, ecx    ;Keep track of chars we copy over
  1041                              <1> .ccLp:
  1042 00003FE4 AC                  <1>     lodsb
  1043 00003FE5 3C25                <1>     cmp al, "%"     
  1044 00003FE7 7411                <1>     je .ccMeta      ;Go if metachar found!
  1045                              <1> .ccLp1:
  1046 00003FE9 3C0D                <1>     cmp al, CR
  1047 00003FEB 7444                <1>     jz .ccLpEnd     ;Exit if CR terminator found!
  1048 00003FED 81F980000000        <1>     cmp ecx, inLen  ;If we are at space for CR w/o it then string too long.
  1049 00003FF3 743C                <1>     je .ccLpEnd     ;Truncate here
  1050 00003FF5 FFC1                <1>     inc ecx         ;Else, add one more char
  1051 00003FF7 AA                  <1>     stosb           ;And shove it!
  1052 00003FF8 EBEA                <1>     jmp short .ccLp
  1053                              <1> .ccMeta:
  1054 00003FFA AC                  <1>     lodsb           ;Get the next char
  1055 00003FFB 3A8585010000        <1>     cmp al, byte [rbp + forBlk.bLpVar]  ;Compare if this is a var
  1056 00004001 75E6                <1>     jne .ccLp1  ;If not a var, strip the % and store the char directly
  1057                              <1> ;Else, here we expand!
  1058 00004003 56                  <1>     push rsi
  1059 00004004 57                  <1>     push rdi
  1060 00004005 89CA                <1>     mov edx, ecx    ;Save current char count in edx
  1061 00004007 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1062 0000400E E841050000          <1>     call strlen     ;Get replacement char count to ecx
  1063 00004013 FFC9                <1>     dec ecx         ;Drop the terminating null from the count
  1064 00004015 01CA                <1>     add edx, ecx    ;Get their sum
  1065 00004017 81FA80000000        <1>     cmp edx, inLen  ;Position 128 is saved for CR. sum must be less
  1066 0000401D 7207                <1>     jb .ccOk
  1067 0000401F 5F                  <1>     pop rdi
  1068 00004020 5E                  <1>     pop rsi
  1069 00004021 E9FBFEFFFF          <1>     jmp .longString     ;Get the next argument!
  1070                              <1> .ccOk:
  1071 00004026 4889FE              <1>     mov rsi, rdi    ;Source from the name buffer
  1072 00004029 5F                  <1>     pop rdi         ;Now get the original position to write the string in
  1073 0000402A F3A4                <1>     rep movsb       ;Copy over the string
  1074 0000402C 5E                  <1>     pop rsi         ;And keep sourcing cha
  1075 0000402D 89D1                <1>     mov ecx, edx    ;Get the current count of chars back into ecx
  1076 0000402F EBB3                <1>     jmp short .ccLp ;And get the next char
  1077                              <1> .ccLpEnd:
  1078 00004031 AA                  <1>     stosb       ;Store the terminating CR
  1079 00004032 880D(C4010000)      <1>     mov byte [cLineBuffer + 1], cl ;Store var count here
  1080 00004038 E96ECAFFFF          <1>     jmp commandMain.goSingle    ;And do it! :)
  1081                              <1> forEnd:
  1082 0000403D 488DB595000000      <1>     lea rsi, qword [rbp + forBlk.sCmdLine]
  1083 00004044 488D3D(C3010000)    <1>     lea rdi, cLineBuffer
  1084 0000404B B982000000          <1>     mov ecx, cmdBufferL
  1085 00004050 F3A4                <1>     rep movsb   ;Zoom zoom copy the cmdline back home :)
  1086 00004052 E839000000          <1>     call forFree
  1087 00004057 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
  1088                              <1> ;Since we flushed buffers and reset cmdprocessor state before entering
  1089                              <1> ; we can jump directly to get input. There cannot be any redirections as
  1090                              <1> ; redirections are interpreted as part of the command that was looped on.
  1091 0000405E E9ECC9FFFF          <1>     jmp commandMain.inputGetAgain
  1092                              <1> 
  1093                              <1> forPrintCmd:
  1094 00004063 9C                  <1>     pushfq
  1095 00004064 F605(74000000)FF    <1>     test byte [forFlg], -1
  1096 0000406B 7421                <1>     jz .exit    ;If not in a for, return
  1097 0000406D E849020000          <1>     call printPrompt    ;Now output prompt
  1098 00004072 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]   ;Get pre-pull cmdline!
  1099 00004079 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
  1100 0000407D BB01000000          <1>     mov ebx, 1  ;STDOUT
  1101 00004082 B800400000          <1>     mov eax, 4000h  ;Write woo!
  1102 00004087 CD21                <1>     int 21h
  1103 00004089 E89F020000          <1>     call printCRLFecho  ;Only print if ECHO ON. Note we have accepted input!
  1104                              <1> .exit:
  1105 0000408E 9D                  <1>     popfq
  1106                              <1>     return
    13                              <2> %%_ret:
    14 0000408F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1107                              <1> 
  1108                              <1> forFree:
  1109                              <1> ;Reset FOR state. Frees the for block and clears the vars.
  1110 00004090 50                  <1>     push rax
  1111 00004091 4150                <1>     push r8
  1112 00004093 4C8B05(75000000)    <1>     mov r8, qword [pForBlk]
  1113 0000409A 4D85C0              <1>     test r8, r8
  1114 0000409D 7407                <1>     jz .exit
  1115 0000409F B800490000          <1>     mov eax, 4900h  ;Free block!
  1116 000040A4 CD21                <1>     int 21h
  1117                              <1> .exit:
  1118 000040A6 31C0                <1>     xor eax, eax
  1119 000040A8 488905(75000000)    <1>     mov qword [pForBlk], rax
  1120 000040AF 8805(74000000)      <1>     mov byte [forFlg], al
  1121 000040B5 4158                <1>     pop r8
  1122 000040B7 58                  <1>     pop rax
  1123                              <1>     return
    13                              <2> %%_ret:
    14 000040B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> callCmd:
  1126                              <1>     ;jmp badCmdError ;Currently report bad command :)
  1127 000040B9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Copy the command tail!
  1128 000040C0 488D3D(C5010000)    <1>     lea rdi, cLineBuffer + 2
  1129 000040C7 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count of chars
  1130 000040CF 884FFF              <1>     mov byte [rdi - 1], cl
  1131 000040D2 FFC1                <1>     inc ecx         ;Include the CR in the copy!
  1132 000040D4 F3A4                <1>     rep movsb
  1133 000040D6 C605(73000000)FF    <1>     mov byte [callFlg], -1  ;In a call!
  1134 000040DD E8C1D8FFFF          <1>     call batKillRedir       ;Liquidates all redirs and deletes presetup files
  1135 000040E2 58                  <1>     pop rax                 ;Realign stack
  1136 000040E3 58                  <1>     pop rax
  1137 000040E4 E9B9C9FFFF          <1>     jmp commandMain.batProceed
  1138                              <1> 
  1139                              <1> callClean:
  1140                              <1> ;Frees everything but the last one. 
  1141                              <1> ;There must be a pointer in bbPtr!
  1142                              <1> ;Returns with rbx -> Last pointer
  1143 000040E9 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
  1144 000040F0 488B4302            <1>     mov rax, qword [rbx + batBlockHdr.pLink]
  1145 000040F4 4885C0              <1>     test rax, rax
  1146                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040F7 74(B8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1147 000040F9 50                  <1>     push rax    ;Save the prev ptr
  1148 000040FA E895D8FFFF          <1>     call batFree
  1149 000040FF 8F05(1B000000)      <1>     pop qword [bbPtr]   ;Pop it into var
  1150 00004105 EBE2                <1>     jmp short callClean
  1151                              <1>     
    24                                  %include "./src/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00004107 53                  <1>     push rbx
    11 00004108 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 0000410A 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00004111 7244                <1>     jb .usDate
    14 00004113 0F877C000000        <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00004119 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 0000411E E8B0000000          <1>     call .printFirst
    18 00004123 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00004129 B402                <1>     mov ah, 02h
    20 0000412B CD21                <1>     int 21h
    21                              <1> 
    22 0000412D 89C8                <1>     mov eax, ecx
    23 0000412F 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00004134 C1E805              <1>     shr eax, 5
    25 00004137 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 0000413C 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00004142 B402                <1>     mov ah, 02h
    29 00004144 CD21                <1>     int 21h
    30                              <1> 
    31 00004146 89C8                <1>     mov eax, ecx
    32 00004148 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000414D C1E809              <1>     shr eax, 9
    34 00004150 5B                  <1>     pop rbx ;Get the year signature back
    35 00004151 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004156 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004157 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000415C C1E805              <1>     shr eax, 5
    41 0000415F E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004164 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 0000416A B402                <1>     mov ah, 02h
    45 0000416C CD21                <1>     int 21h
    46                              <1> 
    47 0000416E 89C8                <1>     mov eax, ecx
    48 00004170 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00004175 E875000000          <1>     call .printSecond
    50                              <1> 
    51 0000417A 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00004180 B402                <1>     mov ah, 02h
    53 00004182 CD21                <1>     int 21h
    54                              <1> 
    55 00004184 89C8                <1>     mov eax, ecx
    56 00004186 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 0000418B C1E809              <1>     shr eax, 9
    58 0000418E 5B                  <1>     pop rbx ;Get the year signature back
    59 0000418F E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004194 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00004195 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 0000419A C1E809              <1>     shr eax, 9
    65 0000419D 5B                  <1>     pop rbx ;Get the year signature back
    66 0000419E E85C000000          <1>     call .printYear
    67                              <1> 
    68 000041A3 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000041A9 B402                <1>     mov ah, 02h
    70 000041AB CD21                <1>     int 21h
    71                              <1> 
    72 000041AD 89C8                <1>     mov eax, ecx
    73 000041AF 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000041B4 C1E805              <1>     shr eax, 5
    75 000041B7 E833000000          <1>     call .printSecond
    76                              <1> 
    77 000041BC 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000041C2 B402                <1>     mov ah, 02h
    79 000041C4 CD21                <1>     int 21h
    80                              <1> 
    81 000041C6 89C8                <1>     mov eax, ecx
    82 000041C8 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000041CD E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000041D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000041D3 51                  <1>     push rcx
    89 000041D4 E826060000          <1>     call getDecimalWord
    90 000041D9 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000041DB 7504                <1>     jnz .skipSpace
    92 000041DD 88CD                <1>     mov ch, cl
    93 000041DF B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000041E1 88CA                <1>     mov dl, cl
    96 000041E3 B402                <1>     mov ah, 02h
    97 000041E5 CD21                <1>     int 21h
    98 000041E7 88EA                <1>     mov dl, ch
    99 000041E9 B402                <1>     mov ah, 02h
   100 000041EB CD21                <1>     int 21h
   101 000041ED 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000041EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000041EF 51                  <1>     push rcx
   105 000041F0 E80A060000          <1>     call getDecimalWord
   106 000041F5 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000041F7 75E8                <1>     jnz .skipSpace
   108 000041F9 88CD                <1>     mov ch, cl
   109 000041FB B130                <1>     mov cl, "0"
   110 000041FD EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000041FF 05BC070000          <1>     add eax, 1980
   113 00004204 51                  <1>     push rcx
   114 00004205 53                  <1>     push rbx
   115 00004206 E8F4050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 0000420B 5B                  <1>     pop rbx
   117 0000420C 84DB                <1>     test bl, bl
   118 0000420E 740C                <1>     jz .twoDigitYear
   119 00004210 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00004212 B402                <1>     mov ah, 02h
   121 00004214 CD21                <1>     int 21h
   122 00004216 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00004218 B402                <1>     mov ah, 02h
   124 0000421A CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 0000421C C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 0000421F 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00004221 B402                <1>     mov ah, 02h
   129 00004223 CD21                <1>     int 21h
   130 00004225 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00004227 B402                <1>     mov ah, 02h
   132 00004229 CD21                <1>     int 21h
   133 0000422B 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 0000422C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000422D 89C1                <1>     mov ecx, eax
   142 0000422F 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00004234 C1E80B              <1>     shr eax, 11
   144 00004237 803D(8E000000)01    <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000423E 750B                <1>     jne .ampm
   146 00004240 E85A000000          <1>     call .printHours
   147 00004245 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 0000424A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 0000424B 3D0C000000          <1>     cmp eax, 12
   151 00004250 7713                <1>     ja .pm
   152 00004252 7416                <1>     je .pm2
   153 00004254 E846000000          <1>     call .printHours
   154 00004259 E81D000000          <1>     call .printMinutes
   155 0000425E B261                <1>     mov dl, "a"
   156 00004260 B402                <1>     mov ah, 02h
   157 00004262 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004264 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004265 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 0000426A E830000000          <1>     call .printHours
   163 0000426F E807000000          <1>     call .printMinutes
   164 00004274 B270                <1>     mov dl, "p"
   165 00004276 B402                <1>     mov ah, 02h
   166 00004278 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 0000427A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 0000427B 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00004281 B402                <1>     mov ah, 02h
   171 00004283 CD21                <1>     int 21h
   172                              <1> 
   173 00004285 89C8                <1>     mov eax, ecx
   174 00004287 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 0000428C C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000428F 51                  <1>     push rcx
   178 00004290 E86A050000          <1>     call getDecimalWord
   179 00004295 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00004297 7514                <1>     jnz .skipSpace
   181 00004299 88CD                <1>     mov ch, cl
   182 0000429B B130                <1>     mov cl, "0"
   183 0000429D EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000429F 51                  <1>     push rcx
   186 000042A0 E85A050000          <1>     call getDecimalWord
   187 000042A5 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000042A7 7504                <1>     jnz .skipSpace
   189 000042A9 88CD                <1>     mov ch, cl
   190 000042AB B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000042AD 88CA                <1>     mov dl, cl
   193 000042AF B402                <1>     mov ah, 02h
   194 000042B1 CD21                <1>     int 21h
   195 000042B3 88EA                <1>     mov dl, ch
   196 000042B5 B402                <1>     mov ah, 02h
   197 000042B7 CD21                <1>     int 21h
   198 000042B9 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000042BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000042BB F6054BBDFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000042C2 74(BA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000042C4 488D3D0DC5FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000042CB E8D1060000          <1>     call searchForEnvVar
   206 000042D0 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000042D2 E8DB000000          <1>     call putCWDInPrompt
   209 000042D7 E8A7000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000042DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000042DD 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000042E4 AC                  <1>     lodsb   ;Get the char
   216 000042E5 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000042E7 74(DC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000042E9 3C24                <1>     cmp al, "$"
   219 000042EB 7409                <1>     je .escapeChar
   220 000042ED 88C2                <1>     mov dl, al
   221 000042EF E8B9000000          <1>     call outChar    ;Prints the char in dl
   222 000042F4 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000042F6 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000042F7 E862020000          <1>     call ucChar ;Uppercase this char in al
   226 000042FC 488D1D44BEFFFF      <1>     lea rbx, pTbl
   227 00004303 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00004308 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 0000430A 740D                <1>     je .escapeFnd
   231 0000430C 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00004313 FFC9                <1>     dec ecx
   233 00004315 75F1                <1>     jnz .escapeLp
   234 00004317 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00004319 488D0527BEFFFF      <1>     lea rax, pTbl              ;Get the table addr
   237 00004320 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00004324 4801D8              <1>     add rax, rbx                ;Add these
   239 00004327 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004328 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 0000432A 5E                  <1>     pop rsi
   242 0000432B EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> printCRLFecho:
   245 0000432D F605D9BCFFFFFF      <1>     test byte [echoFlg], -1
   246                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004334 74(DC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   247                              <1> printCRLF:
   248 00004336 488D1531BEFFFF      <1>     lea rdx, crlf
   249                              <1> printString:
   250 0000433D B800090000          <1>     mov eax, 0900h  ;Print string
   251 00004342 CD21                <1>     int 21h
   252                              <1>     return
    13                              <2> %%_ret:
    14 00004344 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> putVersionInPrompt:
   255 00004345 488D15D0C0FFFF      <1>     lea rdx, dosVer
   256 0000434C B409                <1>     mov ah, 09h ;Print String
   257 0000434E CD21                <1>     int 21h
   258 00004350 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   259 00004352 CD21                <1>     int 21h
   260 00004354 50                  <1>     push rax    ;Save minor version
   261 00004355 E887010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   262 0000435A E89F010000          <1>     call printPackedBCD ;Print al
   263 0000435F B22E                <1>     mov dl, "."
   264 00004361 B402                <1>     mov ah, 02h
   265 00004363 CD21                <1>     int 21h
   266 00004365 58                  <1>     pop rax
   267 00004366 88E0                <1>     mov al, ah  ;Get the minor version low
   268 00004368 E874010000          <1>     call hexToBCD
   269 0000436D E88C010000          <1>     call printPackedBCD
   270                              <1>     return
    13                              <2> %%_ret:
    14 00004372 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> putEscInPrompt:
   272 00004373 B21B                <1>     mov dl, ESC
   273 00004375 EB36                <1>     jmp short outChar
   274                              <1> 
   275                              <1> putMoneyInPrompt:
   276 00004377 B224                <1>     mov dl, "$"
   277 00004379 EB32                <1>     jmp short outChar
   278                              <1> 
   279                              <1> putEquInPrompt:
   280 0000437B B23D                <1>     mov dl, "="
   281 0000437D EB2E                <1>     jmp short outChar
   282                              <1> 
   283                              <1> putPipeInPrompt:
   284 0000437F B27C                <1>     mov dl, "|"
   285 00004381 EB2A                <1>     jmp short outChar
   286                              <1> 
   287                              <1> putGTinPrompt:
   288 00004383 B23E                <1>     mov dl, ">"
   289 00004385 EB26                <1>     jmp short outChar
   290                              <1> 
   291                              <1> putLTinPrompt:
   292 00004387 B23C                <1>     mov dl, "<"
   293 00004389 EB22                <1>     jmp short outChar
   294                              <1> 
   295                              <1> putBSPinPrompt:
   296 0000438B 488D1590C2FFFF      <1>     lea rdx, backSpace
   297 00004392 B903000000          <1>     mov ecx, 3
   298 00004397 BB01000000          <1>     mov ebx, 1
   299 0000439C B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   300 000043A1 CD21                <1>     int 21h
   301                              <1>     return
    13                              <2> %%_ret:
    14 000043A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> putDriveInPrompt:
   304 000043A4 E88D010000          <1>     call getCurrentDrive
   305 000043A9 0441                <1>     add al, "A" ;Convert to letter
   306 000043AB 88C2                <1>     mov dl, al
   307                              <1> outChar:
   308 000043AD B402                <1>     mov ah, 02h ;Echo to STDOUT
   309 000043AF CD21                <1>     int 21h
   310                              <1>     return
    13                              <2> %%_ret:
    14 000043B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> putCWDInPrompt:
   312 000043B2 E87F010000          <1>     call getCurrentDrive
   313                              <1>     ;cmp byte [failDrv], al  ;If these are equal, badDrive
   314                              <1>     ;mov byte [failDrv], -1  ;Reset on read
   315                              <1>     ;je .badDrive 
   316 000043B7 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   317 000043B9 FEC2                <1>     inc dl
   318 000043BB 0441                <1>     add al, "A" ;Convert to letter
   319 000043BD B43A                <1>     mov ah, ":"
   320 000043BF 488D3D(A3000000)    <1>     lea rdi, currDirStr ;Update the current directory string
   321 000043C6 66AB                <1>     stosw   ;Store X:, rdi+=2
   322 000043C8 8A053CBCFFFF        <1>     mov al, byte [pathSep]
   323 000043CE AA                  <1>     stosb   ;Store pathSep, inc rdi
   324 000043CF B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   325 000043D4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   326 000043D7 CD21                <1>     int 21h
   327 000043D9 721F                <1>     jc .badDrive
   328 000043DB E874010000          <1>     call strlen
   329 000043E0 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   330                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   331 000043E6 B800400000          <1>     mov eax, 4000h ;Write to handle
   332 000043EB BB01000000          <1>     mov ebx, 1  ;STDOUT
   333 000043F0 488D15(A3000000)    <1>     lea rdx, currDirStr
   334 000043F7 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 000043F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .badDrive:
   337                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   338 000043FA 488D15E3C0FFFF      <1>     lea rdx, badDrvMsg
   339 00004401 E937FFFFFF          <1>     jmp printString
   340                              <1> printFmtTime:
   341                              <1> ;Outputs the formatted time
   342 00004406 E847000000          <1>     call getTime
   343 0000440B 0FB6C5              <1>     movzx eax, ch
   344 0000440E E88CFEFFFF          <1>     call printTime.printHours
   345 00004413 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   346 00004419 B402                <1>     mov ah, 02h
   347 0000441B CD21                <1>     int 21h
   348 0000441D 0FB605(0D060000)    <1>     movzx eax, byte [td1]   ;Minutes
   349 00004424 E866FEFFFF          <1>     call printTime.printMinutesAlt
   350 00004429 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   351 0000442F B402                <1>     mov ah, 02h
   352 00004431 CD21                <1>     int 21h
   353 00004433 0FB605(10060000)    <1>     movzx eax, byte [td4]   ;Seconds
   354 0000443A E850FEFFFF          <1>     call printTime.printMinutesAlt
   355 0000443F B22E                <1>     mov dl, "."
   356 00004441 B402                <1>     mov ah, 02h
   357 00004443 CD21                <1>     int 21h
   358 00004445 0FB605(0F060000)    <1>     movzx eax, byte [td3]   ;Hundreths
   359 0000444C E83EFEFFFF          <1>     call printTime.printMinutesAlt
   360                              <1>     return
    13                              <2> %%_ret:
    14 00004451 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> getTime:
   362 00004452 B42C                <1>     mov ah, 2Ch ;DOS get time
   363 00004454 CD21                <1>     int 21h
   364                              <1>     ;CH = hour (0-23)
   365                              <1> 	;CL = minutes (0-59)
   366                              <1> 	;DH = seconds (0-59)
   367                              <1> 	;DL = hundredths (0-99)
   368 00004456 880D(0D060000)      <1>     mov byte [td1], cl
   369 0000445C 882D(0E060000)      <1>     mov byte [td2], ch
   370 00004462 8815(0F060000)      <1>     mov byte [td3], dl
   371 00004468 8835(10060000)      <1>     mov byte [td4], dh
   372                              <1>     return
    13                              <2> %%_ret:
    14 0000446E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> printFmtDate:
   375                              <1> ;Outputs the formatted date
   376 0000446F B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   377 00004474 CD21                <1>     int 21h
   378                              <1> 	;AL = day of the week (0=Sunday)
   379                              <1> 	;CX = year (1980-2099)
   380                              <1> 	;DH = month (1-12)
   381                              <1> 	;DL = day (1-31)
   382 00004476 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   383 0000447B 66890D(0D060000)    <1>     mov word [td1], cx
   384 00004482 8815(0F060000)      <1>     mov byte [td3], dl
   385 00004488 8835(10060000)      <1>     mov byte [td4], dh
   386 0000448E 0FB6C0              <1>     movzx eax, al
   387 00004491 89C3                <1>     mov ebx, eax
   388 00004493 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   389 00004495 01D8                <1>     add eax, ebx ;Make it 3 times 
   390 00004497 488D15C8BEFFFF      <1>     lea rdx, dayName
   391 0000449E 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   392 000044A2 B903000000          <1>     mov ecx, 3  ;Print three chars
   393 000044A7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 000044AC B440                <1>     mov ah, 40h ;Write to handle
   395 000044AE CD21                <1>     int 21h
   396 000044B0 B220                <1>     mov dl, " "
   397 000044B2 E8F6FEFFFF          <1>     call outChar
   398                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   399                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   400                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   401 000044B7 0FB705(0D060000)    <1>     movzx eax, word [td1]   ;Get this word
   402 000044BE C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   403 000044C1 0FB61D(10060000)    <1>     movzx ebx, byte [td4]
   404 000044C8 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   405 000044CB 09D8                <1>     or eax, ebx ;Add this date to eax
   406 000044CD 0FB61D(0F060000)    <1>     movzx ebx, byte [td3]
   407 000044D4 09D8                <1>     or eax, ebx
   408 000044D6 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   409 000044DB E827FCFFFF          <1>     call printDate
   410                              <1>     return
    13                              <2> %%_ret:
    14 000044E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> 
   413                              <1> hexToBCD:
   414                              <1> ;Converts a Hex byte into two BCD digits
   415                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   416 000044E1 51                  <1>     push rcx
   417 000044E2 0FB6C0              <1>     movzx eax, al   ;Zero extend
   418 000044E5 31C9                <1>     xor ecx, ecx
   419                              <1> .htb0:
   420 000044E7 3D0A000000          <1>     cmp eax, 10
   421 000044EC 7209                <1>     jb .htb1
   422 000044EE 2D0A000000          <1>     sub eax, 10
   423 000044F3 FFC1                <1>     inc ecx
   424 000044F5 EBF0                <1>     jmp short .htb0
   425                              <1> .htb1:
   426 000044F7 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   427 000044FA 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   428 000044FC 59                  <1>     pop rcx
   429 000044FD C3                  <1>     ret
   430                              <1> 
   431                              <1> printPackedBCD:
   432                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   433                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   434                              <1> ;Preserves all registers
   435 000044FE 50                  <1>     push rax
   436 000044FF 52                  <1>     push rdx
   437 00004500 88C4                <1>     mov ah, al
   438 00004502 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   439 00004504 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   440 00004507 7508                <1>     jnz .upperNybble
   441 00004509 B220                <1>     mov dl, " "
   442 0000450B B402                <1>     mov ah, 02h
   443 0000450D CD21                <1>     int 21h
   444 0000450F EB0E                <1>     jmp short .lowerNybble
   445                              <1> .upperNybble:
   446 00004511 50                  <1>     push rax
   447 00004512 C0EC04              <1>     shr ah, 4
   448 00004515 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   449 00004518 88E2                <1>     mov dl, ah
   450 0000451A B402                <1>     mov ah, 02h ;Print DL
   451 0000451C CD21                <1>     int 21h
   452 0000451E 58                  <1>     pop rax
   453                              <1> .lowerNybble:
   454 0000451F 0430                <1>     add al, "0"
   455 00004521 88C2                <1>     mov dl, al
   456 00004523 B402                <1>     mov ah, 02h ;Print DL
   457 00004525 CD21                <1>     int 21h
   458 00004527 5A                  <1>     pop rdx
   459 00004528 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 00004529 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> setDrive:
   463                              <1> ;Input: dl = 0 based Drive number to set to
   464                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   465                              <1> ;AX trashed.
   466 0000452A B40E                <1>     mov ah, 0Eh ;Set drive to dl
   467 0000452C CD21                <1>     int 21h 
   468 0000452E E803000000          <1>     call getCurrentDrive
   469 00004533 38D0                <1>     cmp al, dl  ;Is this the same drive?
   470                              <1>     return
    13                              <2> %%_ret:
    14 00004535 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> getCurrentDrive:
   472                              <1> ;Returns the 0 based current drive in al
   473 00004536 B419                <1>     mov ah, 19h
   474 00004538 CD21                <1>     int 21h
   475                              <1>     return
    13                              <2> %%_ret:
    14 0000453A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> strcpy:
   478                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   479                              <1> ;rsi -> Source
   480                              <1> ;rdi -> Destination
   481 0000453B 51                  <1>     push rcx
   482 0000453C 57                  <1>     push rdi
   483 0000453D 4889F7              <1>     mov rdi, rsi
   484 00004540 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   485 00004545 5F                  <1>     pop rdi
   486 00004546 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   487 00004548 59                  <1>     pop rcx
   488                              <1>     return
    13                              <2> %%_ret:
    14 00004549 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> strcpy2:
   491                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   492                              <1> ;rsi -> Source
   493                              <1> ;rdi -> Destination
   494 0000454A 56                  <1>     push rsi
   495 0000454B 57                  <1>     push rdi
   496 0000454C E8EAFFFFFF          <1>     call strcpy 
   497 00004551 5F                  <1>     pop rdi
   498 00004552 5E                  <1>     pop rsi
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004553 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strlen:
   502                              <1> ;Gets the length of a ASCIIZ string
   503                              <1> ;Input: rdi = Source buffer
   504                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   505 00004554 50                  <1>     push rax
   506 00004555 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   507 0000455A CD2F                <1>     int 2fh
   508 0000455C 58                  <1>     pop rax
   509                              <1>     return
    13                              <2> %%_ret:
    14 0000455D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> ucChar:
   512                              <1> ;Input: al = Char to uppercase
   513                              <1> ;Output: al = Adjusted char 
   514 0000455E 53                  <1>     push rbx
   515 0000455F 50                  <1>     push rax    ;Push the char twice on the stack
   516 00004560 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   517 00004565 CD2F                <1>     int 2fh         ;Returns the processed char in al
   518 00004567 5B                  <1>     pop rbx         ;Pop the old word off the stack
   519 00004568 5B                  <1>     pop rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 00004569 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> normalisePath:
   523                              <1> ;Uppercases chars and flips pathseps
   524                              <1> ;Input: rsi -> Path to normalise
   525 0000456A 50                  <1>     push rax
   526 0000456B 57                  <1>     push rdi
   527 0000456C 4889F7              <1>     mov rdi, rsi
   528 0000456F B811120000          <1>     mov eax, 1211h
   529 00004574 CD2F                <1>     int 2fh
   530 00004576 5F                  <1>     pop rdi
   531 00004577 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 00004578 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> skipDelimiters:
   535                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   536                              <1> ; command delimiters but a subset thereof. 
   537                              <1> ;These are the same across all codepages.
   538                              <1> ;Input: rsi must point to the start of the data string
   539                              <1> ;Output: rsi points to the first non-delimiter char
   540 00004579 50                  <1>     push rax
   541                              <1> .l1:
   542 0000457A AC                  <1>     lodsb
   543 0000457B E807000000          <1>     call isALdelimiter
   544 00004580 74F8                <1>     jz .l1
   545                              <1> .exit:
   546 00004582 58                  <1>     pop rax
   547 00004583 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   548                              <1>     return
    13                              <2> %%_ret:
    14 00004586 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> isALdelimiter:
   551                              <1> ;Returns: ZF=NZ if al is not a command separator 
   552                              <1> ;         ZF=ZE if al is a command separator
   553 00004587 3C20                <1>     cmp al, " "
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004589 74(86)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 0000458B 3C3B                <1>     cmp al, ";"
   556                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000458D 74(86)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 0000458F 3C3D                <1>     cmp al, "="
   558                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004591 74(86)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559 00004593 3C2C                <1>     cmp al, ","
   560                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004595 74(86)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 00004597 3C09                <1>     cmp al, TAB
   562                              <1>     return
    13                              <2> %%_ret:
    14 00004599 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> clearCommandState:
   565                              <1> ;Clears the command state
   566 0000459A 488D3DAABAFFFF      <1>     lea rdi, cmdStatePtr
   567 000045A1 B907000000          <1>     mov ecx, cmdStateL
   568 000045A6 31C0                <1>     xor eax, eax
   569 000045A8 F3AA                <1>     rep stosb
   570                              <1>     return
    13                              <2> %%_ret:
    14 000045AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> clearCommandLineState:
   573                              <1> ;Clears the command line state after a 0Dh encountered
   574 000045AB 488D3D8EBAFFFF      <1>     lea rdi, cmdLineStatePtr
   575 000045B2 B912000000          <1>     mov ecx, cmdLineStateL
   576 000045B7 31C0                <1>     xor eax, eax
   577 000045B9 F3AA                <1>     rep stosb
   578 000045BB C7057CBAFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   578 000045C4 FF                  <1>
   579 000045C5 C70578BAFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   579 000045CE FF                  <1>
   580                              <1> ;Close all handles from 5->MAX
   581 000045CF 0FB70D32BAFFFF      <1>     movzx ecx, word [numHdls]
   582 000045D6 BB05000000          <1>     mov ebx, 5
   583                              <1> .lp:
   584 000045DB B43E                <1>     mov ah, 3Eh ;File close
   585 000045DD CD21                <1>     int 21h
   586 000045DF FFC3                <1>     inc ebx ;Goto next file
   587 000045E1 39CB                <1>     cmp ebx, ecx
   588 000045E3 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   589                              <1>     return
    13                              <2> %%_ret:
    14 000045E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> asciiFilenameToFCB:
   592                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   593                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   594                              <1> ;Also doesn't check if chars are valid
   595                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   596                              <1> ;Name is space padded.
   597                              <1> ;Input: rsi = ASCII string buffer
   598                              <1> ;       rdi = FCB name buffer
   599                              <1> ;Output: al = Char that terminated the source string 
   600 000045E6 53                  <1>     push rbx    
   601 000045E7 57                  <1>     push rdi
   602 000045E8 B90B000000          <1>     mov ecx, 11
   603 000045ED B020                <1>     mov al, " "
   604 000045EF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   605 000045F1 5F                  <1>     pop rdi
   606 000045F2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   607                              <1>     ;Preprocess for Dir Searches
   608 000045F5 803E2E              <1>     cmp byte [rsi], "."
   609 000045F8 7509                <1>     jne .processName
   610 000045FA A4                  <1>     movsb   ;Store the first dot
   611 000045FB 803E2E              <1>     cmp byte [rsi], "."
   612 000045FE 752C                <1>     jne .exitBadChar
   613 00004600 A4                  <1>     movsb
   614 00004601 EB29                <1>     jmp short .exitBadChar
   615                              <1> .processName:
   616 00004603 AC                  <1>     lodsb   ;Get the char in al
   617 00004604 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   618 00004606 7426                <1>     jz .exit
   619 00004608 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   620 0000460A 7407                <1>     je .extSpace
   621 0000460C 3C2E                <1>     cmp al, "."
   622 0000460E 740C                <1>     je .ext
   623 00004610 AA                  <1>     stosb   ;Store the char
   624 00004611 EBF0                <1>     jmp short .processName
   625                              <1> .extSpace:
   626                              <1> ;Now we scan for a period in the name
   627 00004613 AC                  <1>     lodsb   ;Get a char and increase rsi
   628 00004614 84C0                <1>     test al, al
   629 00004616 7416                <1>     jz .exit
   630 00004618 3C2E                <1>     cmp al, "."     ;If al is not a period...
   631 0000461A 75F7                <1>     jne .extSpace   ; keep searching
   632                              <1> .ext:
   633 0000461C 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   634                              <1> .processExt:
   635 00004620 AC                  <1>     lodsb
   636 00004621 84C0                <1>     test al, al
   637 00004623 7409                <1>     jz .exit
   638 00004625 3C20                <1>     cmp al, " "
   639 00004627 7405                <1>     je .exit
   640 00004629 AA                  <1>     stosb
   641 0000462A EBF4                <1>     jmp short .processExt
   642                              <1> .exitBadChar:
   643 0000462C 30C0                <1>     xor al, al  ;Return a null terminator
   644                              <1> .exit:
   645 0000462E 5B                  <1>     pop rbx
   646                              <1>     return
    13                              <2> %%_ret:
    14 0000462F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> findLastPathComponant:
   649                              <1> ;Finds the last path componant of an ASCIIZ path string
   650                              <1> ;Input: rdi -> Head of the path to find last componant on
   651                              <1> ;Output: rdi -> Start of the last componant
   652 00004630 50                  <1>     push rax
   653 00004631 51                  <1>     push rcx
   654 00004632 31C9                <1>     xor ecx, ecx
   655 00004634 FFC9                <1>     dec ecx
   656 00004636 31C0                <1>     xor eax, eax
   657 00004638 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   658 0000463A F7D1                <1>     not ecx     ;This gets the count of chars  
   659 0000463C 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   660 0000463F 8A05C5B9FFFF        <1>     mov al, byte [pathSep]
   661 00004645 FD                  <1>     std
   662 00004646 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   663 00004648 FC                  <1>     cld
   664 00004649 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   665 0000464B 48FFC7              <1>     inc rdi     ;Point at pathsep
   666                              <1> .exit:
   667 0000464E 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   668 00004651 59                  <1>     pop rcx
   669 00004652 58                  <1>     pop rax
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004653 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> FCBToAsciiz:
   673                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   674                              <1> ;Name is space padded too
   675                              <1> ;Input: rsi = FCB name buffer
   676                              <1> ;       rdi = ASCIIZ string buffer
   677 00004654 B908000000          <1>     mov ecx, 8
   678 00004659 F3A4                <1>     rep movsb   ;Move the name over
   679                              <1> .scanNameSpace:
   680 0000465B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   681 0000465F 750D                <1>     jne .ext
   682 00004661 48FFCF              <1>     dec rdi
   683 00004664 FFC1                <1>     inc ecx
   684 00004666 81F908000000        <1>     cmp ecx, 8
   685 0000466C 72ED                <1>     jb .scanNameSpace
   686                              <1> .ext:
   687 0000466E 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   688 00004673 7506                <1>     jne .validExt
   689 00004675 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   690 00004679 7415                <1>     je .exit
   691                              <1> .validExt:
   692 0000467B B02E                <1>     mov al, "." ;We have a valid extension, store a period
   693 0000467D AA                  <1>     stosb
   694 0000467E B903000000          <1>     mov ecx, 3
   695 00004683 F3A4                <1>     rep movsb   ;Move the three extension chars over
   696                              <1> .scanExtSpace:
   697 00004685 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   698 00004689 7505                <1>     jne .exit
   699 0000468B 48FFCF              <1>     dec rdi
   700 0000468E EBF5                <1>     jmp short .scanExtSpace
   701                              <1> .exit:
   702 00004690 31C0                <1>     xor eax, eax
   703 00004692 AA                  <1>     stosb   ;Store a null at the end
   704                              <1>     return
    13                              <2> %%_ret:
    14 00004693 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> 
   706                              <1> cpDelimOrCtrlStringToBufz:
   707                              <1> ;Copy a delimited or control char terminated string to a buffer
   708                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   709                              <1> ;       rdi -> Buffer to store null terminated string in
   710                              <1> ;Output: rsi -> First char past string end
   711                              <1> ;       rdi -> One char past null terminator on string buffer
   712 00004694 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   713                              <1> .lp:
   714 00004697 AC                  <1>     lodsb
   715 00004698 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   716 0000469A 760A                <1>     jbe .exit
   717 0000469C E8E6FEFFFF          <1>     call isALdelimiter
   718 000046A1 7403                <1>     je .exit
   719 000046A3 AA                  <1>     stosb
   720 000046A4 EBF1                <1>     jmp short .lp
   721                              <1> .exit:
   722 000046A6 31C0                <1>     xor eax, eax
   723 000046A8 AA                  <1>     stosb   ;Store a null terminator
   724                              <1>     return
    13                              <2> %%_ret:
    14 000046A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> 
   727                              <1> cpDelimPathToBufz:
   728                              <1> ;Copy a delimited path into buffer and null terminate.
   729                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   730                              <1> ;       rdi -> Buffer to store null terminated path in
   731                              <1> ;Output: rsi -> First char past pathname delimiter
   732                              <1> ;       rdi -> One char past null terminator on pathname buffer
   733 000046AA 53                  <1>     push rbx
   734 000046AB 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   735 000046AE C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   736                              <1> .lp:
   737 000046B1 AC                  <1>     lodsb   ;Get the char
   738 000046B2 3C0D                <1>     cmp al, CR
   739 000046B4 7412                <1>     je .gotRedirPath
   740 000046B6 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   741 000046BB 740B                <1>     jz .gotRedirPath 
   742 000046BD 3A0548B9FFFF        <1>     cmp al, byte [switchChar]
   743 000046C3 7403                <1>     je .gotRedirPath
   744 000046C5 AA                  <1>     stosb   ;Store this char and loop next char
   745 000046C6 EBE9                <1>     jmp short .lp
   746                              <1> .gotRedirPath:
   747 000046C8 50                  <1>     push rax    ;Save the char on stack
   748 000046C9 30C0                <1>     xor al, al  ;Get null terminator char
   749 000046CB 4829FB              <1>     sub rbx, rdi
   750 000046CE 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   751 000046D5 7412                <1>     je .notColon
   752 000046D7 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   753 000046DE 7409                <1>     je .notColon
   754 000046E0 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   755 000046E4 7503                <1>     jne .notColon
   756 000046E6 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   757                              <1> .notColon:
   758 000046E9 AA                  <1>     stosb   ;Store the null terminator for the redir path
   759 000046EA 58                  <1>     pop rax ;Get back the char in al
   760 000046EB 5B                  <1>     pop rbx
   761                              <1>     return
    13                              <2> %%_ret:
    14 000046EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> 
   763                              <1> buildCommandPath:
   764                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   765 000046ED 0FB60558B9FFFF      <1>     movzx eax, byte [arg1Off]
   766 000046F4 4C8B0505B9FFFF      <1>     mov r8, [pPSP]
   767 000046FB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   768 00004702 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   769                              <1> copyArgumentToSearchSpec:
   770                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   771                              <1> ; and null terminates
   772 00004705 488D3D(70040000)    <1>     lea rdi, searchSpec
   773 0000470C E899FFFFFF          <1>     call cpDelimPathToBufz
   774                              <1>     return
    13                              <2> %%_ret:
    14 00004711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> scanForWildcards:
   777                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   778                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   779 00004712 50                  <1>     push rax
   780 00004713 56                  <1>     push rsi
   781                              <1> .lp:
   782 00004714 AC                  <1>     lodsb
   783 00004715 3C3F                <1>     cmp al, "?"
   784 00004717 740A                <1>     je .exit
   785 00004719 3C2A                <1>     cmp al, "*"
   786 0000471B 7406                <1>     je .exit
   787 0000471D 84C0                <1>     test al, al
   788 0000471F 75F3                <1>     jnz .lp
   789 00004721 FEC0                <1>     inc al  ;This will clear the ZF
   790                              <1> .exit:
   791 00004723 5E                  <1>     pop rsi
   792 00004724 58                  <1>     pop rax
   793                              <1>     return
    13                              <2> %%_ret:
    14 00004725 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> printDecimalValLB:
   796                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   797                              <1> ; blanks and inserts commas where appropriate.
   798                              <1> ;Input: rax = Value to print
   799                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   800 00004726 4889E5              <1>     mov rbp, rsp
   801 00004729 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   802 0000472C 4889EF              <1>     mov rdi, rbp
   803 0000472F 4829CF              <1>     sub rdi, rcx
   804 00004732 50                  <1>     push rax
   805 00004733 51                  <1>     push rcx
   806 00004734 57                  <1>     push rdi
   807 00004735 31C0                <1>     xor eax, eax
   808 00004737 F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   809 00004739 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   810 0000473A 59                  <1>     pop rcx
   811 0000473B 58                  <1>     pop rax
   812 0000473C 51                  <1>     push rcx    ;Save this value to keep the buffer length
   813 0000473D E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   814 00004742 59                  <1>     pop rcx     ;Now print the buffer
   815 00004743 4889EF              <1>     mov rdi, rbp
   816 00004746 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   817 00004749 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   818                              <1> .skipLp:
   819 0000474B 8A1F                <1>     mov bl, byte [rdi]
   820 0000474D 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   821 0000474F 7513                <1>     jne .printLp
   822 00004751 B402                <1>     mov ah, 02h
   823 00004753 B220                <1>     mov dl, " "
   824 00004755 CD21                <1>     int 21h
   825 00004757 48FFCF              <1>     dec rdi
   826 0000475A FFC9                <1>     dec ecx
   827 0000475C 81F901000000        <1>     cmp ecx, 1
   828 00004762 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   829                              <1> .printLp:
   830 00004764 8A17                <1>     mov dl, byte [rdi]
   831 00004766 B402                <1>     mov ah, 02h
   832 00004768 CD21                <1>     int 21h
   833 0000476A 48FFCF              <1>     dec rdi
   834 0000476D FFC9                <1>     dec ecx
   835 0000476F 75F3                <1>     jnz .printLp
   836                              <1> .exit:
   837 00004771 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   838                              <1>     return
    13                              <2> %%_ret:
    14 00004774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> .errPrint:
   840                              <1> ;Print a default ? symbol if an overflow occurs.
   841 00004775 B23F                <1>     mov dl, "?"
   842 00004777 B800020000          <1>     mov eax, 0200h
   843 0000477C CD21                <1>     int 21h
   844 0000477E EBF1                <1>     jmp short .exit
   845                              <1> 
   846                              <1> decimalise:
   847                              <1> ;Input: rax = value to decimalise
   848                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   849                              <1> ;       ecx = buffer length
   850                              <1> ;Output: Buffer @ rdi filled in! 
   851                              <1> ;       ecx = Number of chars in buffer.
   852                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   853                              <1> ;   we return with CF=CY. Else, CF=NC.
   854 00004780 57                  <1>     push rdi
   855 00004781 89CE                <1>     mov esi, ecx    
   856 00004783 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   857 00004785 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   858                              <1> .lp:
   859 0000478A 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   860 0000478D 7514                <1>     jne .skipSep
   861 0000478F 4038CE              <1>     cmp sil, cl
   862 00004792 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   863 00004794 8A15(84000000)      <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   864 0000479A 8817                <1>     mov byte [rdi], dl
   865 0000479C 48FFC7              <1>     inc rdi 
   866 0000479F FEC1                <1>     inc cl          ;Inc number of chars
   867 000047A1 30ED                <1>     xor ch, ch      ;Reset comma counter
   868                              <1> .skipSep:
   869 000047A3 4038CE              <1>     cmp sil, cl
   870 000047A6 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   871 000047A8 31D2                <1>     xor edx, edx
   872 000047AA 48F7F3              <1>     div rbx         ;Divide rax by 10
   873 000047AD 80C230              <1>     add dl, "0"     
   874 000047B0 8817                <1>     mov byte [rdi], dl
   875 000047B2 48FFC7              <1>     inc rdi
   876 000047B5 FEC1                <1>     inc cl          ;Inc number of chars
   877 000047B7 FEC5                <1>     inc ch          ;Inc to keep track of commas
   878 000047B9 4885C0              <1>     test rax, rax
   879 000047BC 75CC                <1>     jnz .lp
   880                              <1> ;The test cleared CF if we are here
   881 000047BE 0FB6C9              <1>     movzx ecx, cl
   882                              <1> .exit:
   883 000047C1 5F                  <1>     pop rdi
   884                              <1>     return
    13                              <2> %%_ret:
    14 000047C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .exitErr:
   886 000047C3 F9                  <1>     stc
   887 000047C4 EBFB                <1>     jmp short .exit
   888                              <1> printDecimalWord:
   889                              <1> ;Takes a word in ax and print it's decimal representation.
   890                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   891                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   892                              <1> ;Input: eax = Zero extended word to print
   893 000047C6 31C9                <1>     xor ecx, ecx
   894 000047C8 85C0                <1>     test eax, eax
   895 000047CA 750C                <1>     jnz .notZero
   896 000047CC B930000000          <1>     mov ecx, "0"
   897 000047D1 BD01000000          <1>     mov ebp, 1  ;Print one digit
   898 000047D6 EB19                <1>     jmp short .goPrint
   899                              <1> .notZero:
   900 000047D8 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   901 000047DA BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   902                              <1> .mainLp:
   903 000047DF FFC5                <1>     inc ebp
   904 000047E1 C1E108              <1>     shl ecx, 8    ;Space for next nybble
   905 000047E4 31D2                <1>     xor edx, edx
   906 000047E6 F7F6                <1>     div esi
   907 000047E8 80C230              <1>     add dl, '0'
   908 000047EB 88D1                <1>     mov cl, dl    ;Save remainder byte
   909 000047ED 85C0                <1>     test eax, eax   ;We zero yet?
   910 000047EF 75EE                <1>     jnz .mainLp
   911                              <1> .goPrint:
   912 000047F1 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   913 000047F3 C1E908              <1>     shr ecx, 8    ;Get next digit down
   914 000047F6 B402                <1>     mov ah, 02h
   915 000047F8 CD21                <1>     int 21h
   916 000047FA FFCD                <1>     dec ebp
   917 000047FC 75F3                <1>     jnz .goPrint
   918                              <1>     return
    13                              <2> %%_ret:
    14 000047FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   919                              <1> 
   920                              <1> getDecimalWord:
   921                              <1> ;Works on MAX A dword in eax
   922                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   923 000047FF 31C9                <1>     xor ecx, ecx
   924 00004801 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   925 00004803 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   926                              <1> .dpfb0:
   927 00004808 FFC5                <1>     inc ebp
   928 0000480A 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   929 0000480E 31D2                <1>     xor edx, edx
   930 00004810 48F7F3              <1>     div rbx
   931 00004813 80C230              <1>     add dl, '0'
   932 00004816 80FA39              <1>     cmp dl, '9'
   933 00004819 7603                <1>     jbe .dpfb1
   934 0000481B 80C207              <1>     add dl, 'A'-'0'-10
   935                              <1> .dpfb1:
   936 0000481E 88D1                <1>     mov cl, dl    ;Save remainder byte
   937 00004820 4885C0              <1>     test rax, rax
   938 00004823 75E3                <1>     jnz .dpfb0
   939                              <1>     return
    13                              <2> %%_ret:
    14 00004825 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> getByte:
   941                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   942 00004826 E807000000          <1>     call getNum
   943 0000482B 3D00010000          <1>     cmp eax, 100h
   944 00004830 F5                  <1>     cmc
   945                              <1>     return
    13                              <2> %%_ret:
    14 00004831 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> getNum:
   947                              <1> ;Gets a number from a command line.
   948                              <1> ;Input: rsi -> String to get number from
   949                              <1> ;Output: rsi -> Char which terminated the accumulation
   950                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   951                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   952 00004832 51                  <1>     push rcx
   953 00004833 53                  <1>     push rbx
   954 00004834 31DB                <1>     xor ebx, ebx
   955 00004836 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   956 00004838 31C0                <1>     xor eax, eax    
   957                              <1> .lp:
   958 0000483A AC                  <1>     lodsb
   959 0000483B 3C30                <1>     cmp al, "0"
   960 0000483D 721B                <1>     jb .exit
   961 0000483F 3C39                <1>     cmp al, "9"
   962 00004841 7717                <1>     ja .exit
   963 00004843 2C30                <1>     sub al, "0"                     ;Convert to binary 
   964 00004845 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   965 00004849 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   966 0000484B 01C1                <1>     add ecx, eax
   967 0000484D FFC3                <1>     inc ebx
   968 0000484F 81FB09000000        <1>     cmp ebx, 9
   969 00004855 75E3                <1>     jne short .lp   ;Get next digit
   970 00004857 F9                  <1>     stc             ;Yikesaroony
   971 00004858 EB01                <1>     jmp short .exitBad
   972                              <1> .exit:
   973 0000485A F8                  <1>     clc             ;Clear CF
   974                              <1> .exitBad:
   975 0000485B 89C8                <1>     mov eax, ecx
   976 0000485D 5B                  <1>     pop rbx
   977 0000485E 59                  <1>     pop rcx
   978 0000485F 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   979                              <1>     return
    13                              <2> %%_ret:
    14 00004862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> freezePC:
   983 00004863 488D15E9BEFFFF      <1>     lea rdx, memBad1
   984 0000486A B409                <1>     mov ah, 09h
   985 0000486C CD21                <1>     int 21h
   986                              <1> .altEP:
   987 0000486E 488D1507BFFFFF      <1>     lea rdx, memBad3
   988 00004875 B409                <1>     mov ah, 09h
   989 00004877 CD21                <1>     int 21h
   990                              <1> .lp:
   991 00004879 F390                <1>     pause
   992 0000487B F4                  <1>     hlt
   993 0000487C EBFB                <1>     jmp short .lp
   994                              <1> 
   995                              <1> setDTA:
   996 0000487E 50                  <1>     push rax
   997 0000487F 52                  <1>     push rdx
   998 00004880 488D15(F6000000)    <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   999 00004887 B8001A0000          <1>     mov eax, 1A00h
  1000 0000488C CD21                <1>     int 21h
  1001 0000488E 5A                  <1>     pop rdx
  1002 0000488F 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 00004890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> 
  1005                              <1> getDTA:
  1006 00004891 488D15(F6000000)    <1>     lea rdx, cmdFFBlock
  1007                              <1>     return
    13                              <2> %%_ret:
    14 00004898 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> resetNation:
  1010                              <1> ;(Re)sets the country and switchar data
  1011 00004899 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
  1012 0000489E CD21                <1>     int 21h
  1013 000048A0 3CFF                <1>     cmp al, -1
  1014 000048A2 7412                <1>     je .skipSwitch
  1015 000048A4 881561B7FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
  1016 000048AA 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
  1017 000048AD 7507                <1>     jne .skipSwitch
  1018 000048AF C60554B7FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
  1019                              <1> .skipSwitch:
  1020 000048B6 B800380000          <1>     mov eax, 3800h  ;Get current country data
  1021 000048BB 488D15(7D000000)    <1>     lea rdx, ctryData
  1022 000048C2 CD21                <1>     int 21h ;Write the data to the internal country table 
  1023                              <1>     return
    13                              <2> %%_ret:
    14 000048C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> 
  1025                              <1> resetIDTentries:
  1026                              <1> ;Resets the IDT entries if they were changed by dead child process
  1027 000048C5 488D15B7020000      <1>     lea rdx, critErrorHandler
  1028 000048CC B824250000          <1>     mov eax, 2524h
  1029 000048D1 CD21                <1>     int 21h
  1030 000048D3 488D15B3010000      <1>     lea rdx, ctrlCHandler
  1031 000048DA B823250000          <1>     mov eax, 2523h
  1032 000048DF CD21                <1>     int 21h
  1033 000048E1 488D15AFC5FFFF      <1>     lea rdx, appRet
  1034 000048E8 B822250000          <1>     mov eax, 2522h
  1035 000048ED CD21                <1>     int 21h
  1036                              <1>     return
    13                              <2> %%_ret:
    14 000048EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1037                              <1> 
  1038                              <1> ;------------------------
  1039                              <1> ;   For/If routines
  1040                              <1> ;------------------------
  1041                              <1> makeAsciizAdv:
  1042                              <1> ;Input: rsi -> Non delimiter char string
  1043                              <1> ;Output: rsi -> Next substring past delimiters
  1044                              <1> ;       rdi -> ASCIIZ version of the string we just passed
  1045 000048F0 58                  <1>     pop rax ;Align the stack so if we hit a CR its getNextArg doesnt crash
  1046 000048F1 E807000000          <1>     call makeArgAsciz      ;Get in rdi -> ASCIZ argument. rsi -> terminator
  1047 000048F6 E814000000          <1>     call getNextArg        ;rsi -> Command
  1048 000048FB FFE0                <1>     jmp rax                 ;Go to this address now
  1049                              <1> 
  1050                              <1> makeArgAsciz:
  1051                              <1> ;Creates a null terminated string in the search spec.
  1052                              <1> ;Input: rsi -> String to copy with null terminator
  1053                              <1> ;Ouput: rsi -> Terminator
  1054                              <1> ;       rdi -> Search Spec with filled ASCIZ string
  1055 000048FD 50                  <1>     push rax    ;Preserve rax
  1056 000048FE E802FEFFFF          <1>     call copyArgumentToSearchSpec
  1057 00004903 58                  <1>     pop rax
  1058 00004904 488D3D(70040000)    <1>     lea rdi, searchSpec
  1059 0000490B 48FFCE              <1>     dec rsi     ;Point back to the delimiter char
  1060                              <1>     return
    13                              <2> %%_ret:
    14 0000490E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> getNextArg:
  1063                              <1> ;Moves rsi to the first next element. If a CR is encountered, it exits
  1064                              <1> ;Input: rsi -> String
  1065                              <1> ;Output: rsi -> First non delimiter char after initial position
  1066 0000490F E865FCFFFF          <1>     call skipDelimiters     ;Preserves rax
  1067 00004914 803E0D              <1>     cmp byte [rsi], CR
  1068                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004917 75(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1069 00004919 E872F7FFFF          <1>     call forFree    ;Harmless if used in IF. Registers preserved.
  1070 0000491E 58                  <1>     pop rax ;Pop the return address off the stack
  1071 0000491F E926D1FFFF          <1>     jmp badSyntaxError  ;And jump error out
  1072                              <1> 
  1073                              <1> strcmp:
  1074 00004924 B81E120000          <1>     mov eax, 121Eh
  1075 00004929 CD2F                <1>     int 2fh
  1076                              <1>     return
    13                              <2> %%_ret:
    14 0000492B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> 
  1079                              <1> ;-------------------------------
  1080                              <1> ; Environment utility functions
  1081                              <1> ;-------------------------------
  1082                              <1> 
  1083                              <1> cmpEnvVar:
  1084                              <1> ;Checks that we have found the environment variable we are looking for.
  1085                              <1> ;Input: rsi -> Environment var to verify the name of
  1086                              <1> ;       rdi -> Supplied var name to compare against
  1087                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1088 0000492C 56                  <1>     push rsi
  1089 0000492D 57                  <1>     push rdi
  1090 0000492E 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1091                              <1> .lp:
  1092 00004931 AC                  <1>     lodsb               ;Pick up from environment string
  1093 00004932 E827FCFFFF          <1>     call ucChar         ;Upper case it!
  1094 00004937 3807                <1>     cmp byte [rdi], al  
  1095 00004939 7509                <1>     jne .exit
  1096 0000493B 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1097 0000493D 7405                <1>     je .exit
  1098 0000493F 48FFC7              <1>     inc rdi
  1099 00004942 EBED                <1>     jmp short .lp
  1100                              <1> .exit:
  1101 00004944 5F                  <1>     pop rdi
  1102 00004945 5E                  <1>     pop rsi
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00004946 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> 
  1105                              <1> checkEnvGoodAndGet:
  1106                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1107                              <1> ;Output:
  1108                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1109                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1110                              <1> ;           rsi -> Environment pointer
  1111 00004947 50                  <1>     push rax
  1112 00004948 51                  <1>     push rcx
  1113 00004949 57                  <1>     push rdi
  1114 0000494A 4150                <1>     push r8
  1115 0000494C 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1116 00004950 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1117 00004953 741A                <1>     jz .badExit
  1118 00004955 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1119 00004958 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1120                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1121 0000495B 31C0                <1>     xor eax, eax
  1122                              <1> .pathNulScan:
  1123 0000495D F2AE                <1>     repne scasb
  1124 0000495F 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1125 00004961 740C                <1>     jz .badExit
  1126 00004963 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1127 00004965 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1128 00004967 31C0                <1>     xor eax, eax
  1129 00004969 FFC0                <1>     inc eax ;Clear the ZF
  1130 0000496B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1131                              <1> .badExit:
  1132 0000496F 4158                <1>     pop r8
  1133 00004971 5F                  <1>     pop rdi
  1134 00004972 59                  <1>     pop rcx
  1135 00004973 58                  <1>     pop rax
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00004974 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> 
  1139                              <1> findEnvSpace:
  1140                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1141                              <1> ; free space in the pointer and a count of free space in the environment.
  1142                              <1> ;If count is zero, pointer is not to be used.
  1143                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1144 00004975 31C9                <1>     xor ecx, ecx
  1145 00004977 31C0                <1>     xor eax, eax    ;Clear eax too
  1146 00004979 51                  <1>     push rcx
  1147 0000497A E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1148 0000497F 59                  <1>     pop rcx
  1149                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004980 74(74)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1150 00004982 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1151 00004986 FFC9                <1>     dec ecx ;Make into a large counter
  1152 00004988 4889F7              <1>     mov rdi, rsi    
  1153                              <1> .endsearch:
  1154 0000498B F2AE                <1>     repne scasb ;Scan
  1155 0000498D 803F00              <1>     cmp byte [rdi], 0
  1156 00004990 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1157                              <1>     ;Here we are at the end of the environment
  1158 00004992 F7D9                <1>     neg ecx
  1159 00004994 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1160 00004996 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1161 00004999 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1162 0000499C 29C8                <1>     sub eax, ecx
  1163 0000499E 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1164                              <1>     return
    13                              <2> %%_ret:
    14 000049A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> 
  1166                              <1> searchForEnvVar:
  1167                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1168                              <1> ;Input: rdi -> Var name to look for.
  1169                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1170 000049A1 57                  <1>     push rdi
  1171 000049A2 51                  <1>     push rcx
  1172 000049A3 52                  <1>     push rdx
  1173 000049A4 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1174 000049A8 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1175                              <1> .varLp:
  1176 000049AB 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1177 000049AE E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1178 000049B3 7416                <1>     je .varFound
  1179 000049B5 31C0                <1>     xor eax, eax        ;Search for a null
  1180 000049B7 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1181 000049BA B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1182 000049BF F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1183 000049C1 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1184 000049C3 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1185 000049C5 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1186 000049C8 EBE1                <1>     jmp short .varLp    ;And scan again!
  1187                              <1> .varNotFound:
  1188 000049CA F9                  <1>     stc
  1189                              <1> .varFound:
  1190 000049CB 59                  <1>     pop rcx
  1191 000049CC 5A                  <1>     pop rdx
  1192 000049CD 5F                  <1>     pop rdi
  1193                              <1>     return
    13                              <2> %%_ret:
    14 000049CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> 
  1195                              <1> envFree:
  1196                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1197                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1198                              <1> ; free byte of the environment!
  1199                              <1> ;Input: rsi -> Variable to free.
  1200                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1201                              <1> ;        ecx = Number of free bytes in env
  1202 000049CF 4889F7              <1>     mov rdi, rsi
  1203 000049D2 31C0                <1>     xor eax, eax
  1204                              <1> .freeLp:
  1205 000049D4 803F00              <1>     cmp byte [rdi], 0
  1206 000049D7 7403                <1>     je .exitLp
  1207 000049D9 AA                  <1>     stosb
  1208 000049DA EBF8                <1>     jmp short .freeLp
  1209                              <1> .exitLp:
  1210                              <1> ;rdi points to the terminating null of the var we just deleted
  1211                              <1> ;rsi points to the start of the free space
  1212 000049DC 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1213 000049DF 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1214 000049E4 7504                <1>     jne .prepPullup
  1215 000049E6 31C0                <1>     xor eax, eax
  1216 000049E8 EB0E                <1>     jmp short .cleanEnv
  1217                              <1> .prepPullup:
  1218 000049EA 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1219                              <1> .pullUp:
  1220 000049ED AC                  <1>     lodsb
  1221 000049EE AA                  <1>     stosb
  1222 000049EF 84C0                <1>     test al, al ;Did we pick up a zero
  1223 000049F1 75FA                <1>     jne .pullUp ;If not, keep copying
  1224 000049F3 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1225 000049F6 75F5                <1>     jne .pullUp
  1226                              <1> ;We are at the end of the copy!
  1227                              <1> .cleanEnv:
  1228 000049F8 AA                  <1>     stosb   ;Store the famous second null
  1229 000049F9 48FFCF              <1>     dec rdi ;without incrementing it!!
  1230 000049FC E807000000          <1>     call getFreeSpace
  1231 00004A01 31C0                <1>     xor eax, eax
  1232 00004A03 51                  <1>     push rcx
  1233 00004A04 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1234 00004A06 59                  <1>     pop rcx
  1235                              <1>     return
    13                              <2> %%_ret:
    14 00004A07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1236                              <1> 
  1237                              <1> getFreeSpace:
  1238                              <1> ;Output: ecx = Number of free bytes in the environment block
  1239 00004A08 56                  <1>     push rsi
  1240 00004A09 57                  <1>     push rdi
  1241 00004A0A E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1242 00004A0F 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1243 00004A13 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1244 00004A16 E805000000          <1>     call getEnvSize ;Get total block size
  1245 00004A1B 29F9                <1>     sub ecx, edi    ;Get difference!
  1246 00004A1D 5F                  <1>     pop rdi
  1247 00004A1E 5E                  <1>     pop rsi
  1248                              <1>     return
    13                              <2> %%_ret:
    14 00004A1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> getEnvSize:
  1251                              <1> ;Gets the number of bytes in the environment allocation
  1252                              <1> ;Output: ecx = Number of bytes in the environment!
  1253 00004A20 53                  <1>     push rbx
  1254 00004A21 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1255 00004A25 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1256 00004A28 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1257 00004A2B 5B                  <1>     pop rbx
  1258                              <1>     return
    13                              <2> %%_ret:
    14 00004A2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1259                              <1> 
  1260                              <1> getPtrToEndOfEnv:
  1261                              <1> ;Gets ptr to end of the environment
  1262                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1263 00004A2D 50                  <1>     push rax
  1264 00004A2E 51                  <1>     push rcx
  1265 00004A2F 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1266 00004A33 31C0                <1>     xor eax, eax
  1267 00004A35 31C9                <1>     xor ecx, ecx
  1268 00004A37 FFC9                <1>     dec ecx
  1269                              <1> .lp:
  1270 00004A39 F2AE                <1>     repne scasb
  1271 00004A3B 3807                <1>     cmp byte [rdi], al
  1272 00004A3D 75FA                <1>     jne .lp
  1273 00004A3F 59                  <1>     pop rcx
  1274 00004A40 58                  <1>     pop rax
  1275                              <1>     return
    13                              <2> %%_ret:
    14 00004A41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1276                              <1> 
  1277                              <1> growEnvBlock:
  1278                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1279                              <1> ; newly allocated 160 byte block of the environment.
  1280                              <1> ;Returns:   CF=NC - Environment grown ok!
  1281                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1282                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1283 00004A42 50                  <1>     push rax
  1284 00004A43 53                  <1>     push rbx
  1285 00004A44 51                  <1>     push rcx
  1286 00004A45 56                  <1>     push rsi
  1287 00004A46 57                  <1>     push rdi
  1288 00004A47 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1289 00004A4C E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1290 00004A51 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1291 00004A55 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1292 00004A58 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1293 00004A5E 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1294 00004A64 7321                <1>     jae .tooLarge
  1295                              <1>     ;Here ZF must be NZ.
  1296 00004A66 4150                <1>     push r8
  1297 00004A68 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1298 00004A6C B8004A0000          <1>     mov eax, 4A00h
  1299 00004A71 CD21                <1>     int 21h
  1300 00004A73 4158                <1>     pop r8
  1301 00004A75 720A                <1>     jc .exit
  1302                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1303                              <1>     ; so we add 160 zeros to the count of bytes
  1304 00004A77 81C1A0000000        <1>     add ecx, 0A0h
  1305 00004A7D 31C0                <1>     xor eax, eax
  1306 00004A7F F3AA                <1>     rep stosb
  1307                              <1> .exit:
  1308 00004A81 5F                  <1>     pop rdi
  1309 00004A82 5E                  <1>     pop rsi
  1310 00004A83 59                  <1>     pop rcx
  1311 00004A84 5B                  <1>     pop rbx
  1312 00004A85 58                  <1>     pop rax
  1313                              <1>     return
    13                              <2> %%_ret:
    14 00004A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1314                              <1> .tooLarge:
  1315 00004A87 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1316 00004A8A F9                  <1>     stc             ;Set CF
  1317 00004A8B EBF4                <1>     jmp short .exit
    25                                  %include "./src/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004A8D F605(1A000000)80    <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004A94 7411                <1>     jz .notLoading
     4 00004A96 F605(1A000000)40    <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004A9D 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004A9F 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004AA5 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004AA7 F605(1A000000)02    <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 00004AAE 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 00004AB0 84E4                <1>     test ah, ah
    17 00004AB2 7424                <1>     jz .inInt23 
    18 00004AB4 80FC0C              <1>     cmp ah, 0Ch
    19 00004AB7 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004AB9 50                  <1>     push rax
    23 00004ABA 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004AC1 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004AC6 31C0                <1>     xor eax, eax
    26 00004AC8 668CC8              <1>     mov ax, cs
    27 00004ACB 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004AD0 58                  <1>     pop rax
    29 00004AD1 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004AD3 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004AD8 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004ADA 800D(1A000000)02    <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004AE1 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004AE8 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004AEA 50                  <1>     push rax
    43 00004AEB B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004AF0 CD21                <1>     int 21h
    45 00004AF2 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004AF3 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004AFA 746C                <1>     jz .notBat
    49 00004AFC F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004B03 7563                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004B05 E892020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004B0A 488D15BAB6FFFF      <1>     lea rdx, batFail
    57 00004B11 E827F8FFFF          <1>     call printString
    58 00004B16 488D151FB5FFFF      <1>     lea rdx, batYNstr
    59 00004B1D 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004B23 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004B28 CD21                <1>     int 21h
    62 00004B2A 7226                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004B2C 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004B2F E82AFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004B34 3C59                <1>     cmp al, "Y"
    66 00004B36 740E                <1>     je .killBat
    67 00004B38 3C4E                <1>     cmp al, "N"
    68 00004B3A 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004B3C E8F5F7FFFF          <1>     call printCRLF
    74 00004B41 E92D000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004B46 E89EF5FFFF          <1>     call callClean
    77 00004B4B E804CEFFFF          <1>     call batCleanup
    78 00004B50 EBEA                <1>     jmp short .endBat   ;Now CRLF and exit!
    79                              <1> .nestKill:
    80 00004B52 E892F5FFFF          <1>     call callClean
    81 00004B57 E8F8CDFFFF          <1>     call batCleanup
    82 00004B5C 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC   
    83 00004B63 E951FFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    84                              <1> .notBat:
    85 00004B68 66813D9DB4FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    86 00004B71 7405                <1>     je .exit
    87                              <1> .exitBat:
    88 00004B73 E841020000          <1>     call errRetHdls 
    89                              <1> .exit:
    90 00004B78 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC
    91                              <1> .exitIn:
    92 00004B7F F9                  <1>     stc     ;Set CF to kill the task
    93 00004B80 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    94                              <1> ;All we need is that the stack pointer is not at the address we had it
    95                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    96                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    26                                  %include "./src/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004B83 53                  <1>     push rbx
    25 00004B84 51                  <1>     push rcx
    26 00004B85 52                  <1>     push rdx
    27 00004B86 57                  <1>     push rdi
    28 00004B87 56                  <1>     push rsi
    29 00004B88 E80F020000          <1>     call errSwapHdls
    30 00004B8D FC                  <1>     cld         ;Make String ops go forward
    31 00004B8E 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004B91 880575B4FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004B97 488D15D0B5FFFF      <1>     lea rdx, crlf
    34 00004B9E E89AF7FFFF          <1>     call printString    ;Trashes ax
    35 00004BA3 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004BA6 53                  <1>     push rbx        ;Save the action bitfield
    38 00004BA7 56                  <1>     push rsi        ;Save the driver pointer
    39 00004BA8 B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004BAD CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004BAF 488D3582BDFFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004BB6 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004BB9 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004BBB 66A5                <1>     movsw
    51 00004BBD A4                  <1>     movsb
    52 00004BBE 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004BC1 5E                  <1>     pop rsi
    54 00004BC2 5B                  <1>     pop rbx
    55 00004BC3 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004BC9 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004BCB 81FF24000000        <1>     cmp edi, errShrFul
    60 00004BD1 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error or bad disk swap. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004BD3 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004BD8 CD2F                <1>     int 2Fh
    65 00004BDA 3CFF                <1>     cmp al, -1
    66 00004BDC 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004BDE 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004BE0 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004BE2 CD2F                <1>     int 2Fh
    70 00004BE4 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004BE6 4889FA              <1>     mov rdx, rdi        
    76 00004BE9 50                  <1>     push rax            
    77 00004BEA 31C0                <1>     xor eax, eax
    78 00004BEC 89C1                <1>     mov ecx, eax
    79 00004BEE FFC9                <1>     dec ecx
    80 00004BF0 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004BF2 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004BF6 E842F7FFFF          <1>     call printString 
    83 00004BFB C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004BFF 58                  <1>     pop rax
    85 00004C00 84C0                <1>     test al, al ;Is this zero?
    86 00004C02 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004C04 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004C09 488D155DBDFFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004C10 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004C12 BA1F000000          <1>     mov edx, errGF
    98 00004C17 81FF24000000        <1>     cmp edi, errShrFul
    99 00004C1D 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004C20 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004C25 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004C2B 0F42FA              <1>     cmovb edi, edx
   104 00004C2E 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004C34 57                  <1>     push rdi    ;Save the error code for checking
   106 00004C35 488D15E1BBFFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004C3C 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004C3F 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004C43 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004C46 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004C47 E8F1F6FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004C4C 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004C52 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004C54 488D1530BDFFFF      <1>     lea rdx, readMsg
   120 00004C5B 488D3D38BDFFFF      <1>     lea rdi, writeMsg
   121 00004C62 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004C65 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004C69 E8CFF6FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004C6E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004C71 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004C77 488D1506BDFFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004C7E E8BAF6FFFF          <1>     call printString
   130 00004C83 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004C85 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004C88 B402                <1>     mov ah, 02h ;Print char in dl
   133 00004C8A CD21                <1>     int 21h
   134                              <1>     
   135 00004C8C 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004C8E 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004C93 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004C98 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004C9A B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004C9C E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004CA1 E890F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004CA6 488D15FCBCFFFF      <1>     lea rdx, abortMsg
   149 00004CAD E88BF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004CB2 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004CB5 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004CB7 488D1503BDFFFF      <1>     lea rdx, betweenMsg
   154 00004CBE E87AF6FFFF          <1>     call printString
   155 00004CC3 488D15ECBCFFFF      <1>     lea rdx, retryMsg
   156 00004CCA E86EF6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004CCF F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004CD2 7418                <1>     jz .userFail
   160 00004CD4 488D15E6BCFFFF      <1>     lea rdx, betweenMsg
   161 00004CDB E85DF6FFFF          <1>     call printString
   162 00004CE0 488D15C8BCFFFF      <1>     lea rdx, ignoreMsg
   163 00004CE7 E851F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004CEC F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004CEF 7418                <1>     jz .userMsgEnd
   167 00004CF1 488D15C9BCFFFF      <1>     lea rdx, betweenMsg
   168 00004CF8 E840F6FFFF          <1>     call printString
   169 00004CFD 488D15B8BCFFFF      <1>     lea rdx, failMsg
   170 00004D04 E834F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004D09 488D15B4BCFFFF      <1>     lea rdx, endMsg
   173 00004D10 E828F6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004D15 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004D17 488D3DA9BCFFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004D1E B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004D23 CD21                <1>     int 21h ;Get char in al
   179 00004D25 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004D27 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004D29 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004D2B AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004D2C 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004D2E FFC1                <1>     inc ecx
   186 00004D30 81F904000000        <1>     cmp ecx, 4
   187 00004D36 75F3                <1>     jne .uip1
   188 00004D38 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004D3D E8F4F5FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004D42 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004D44 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004D46 7427                <1>     je .cehExit
   195 00004D48 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004D4A 740F                <1>     je .viIgnore
   197 00004D4C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004D4E 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004D50 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004D53 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004D59 EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004D5B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004D5E 0F843DFFFFFF        <1>     jz .userInput
   206 00004D64 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004D66 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004D69 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004D6F E845000000          <1>     call errRetHdls
   212 00004D74 5E                  <1>     pop rsi
   213 00004D75 5F                  <1>     pop rdi
   214 00004D76 5A                  <1>     pop rdx
   215 00004D77 59                  <1>     pop rcx
   216 00004D78 5B                  <1>     pop rbx
   217 00004D79 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004D7B C6058AB2FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004D82 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004D87 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004D8E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004D8F 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004D91 B402                <1>     mov ah, 02h
   226 00004D93 CD21                <1>     int 21h ;Print char
   227 00004D95 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004D97 E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004D9C 50                  <1>     push rax
   236 00004D9D 53                  <1>     push rbx
   237 00004D9E E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004DA3 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004DA6 66890561B2FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004DAD 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004DB1 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004DB3 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004DB6 5B                  <1>     pop rbx
   244 00004DB7 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004DB9 50                  <1>     push rax
   250 00004DBA 53                  <1>     push rbx
   251 00004DBB E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004DC0 0FB70547B2FFFF      <1>     movzx eax, word [errHdls]
   253 00004DC7 66C7053EB2FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004DD0 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004DD3 5B                  <1>     pop rbx
   256 00004DD4 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004DD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004DD6 50                  <1>     push rax        ;Save rax
   263 00004DD7 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004DDC CD21                <1>     int 21h
   265 00004DDE 58                  <1>     pop rax
   266 00004DDF 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004DE5 7605                <1>     jbe .pspJftExit
   268 00004DE7 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004DEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004DEC 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004DF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  cmdLdrE:
    28                                  
    29                                  Segment bss nobits align=1 follows=cmd
    30                                  %include "./dat/cmdBss.asm"
     1                              <1> 
     2                              <1> ;Moved most strings and initialised 0 variables here to reduce disk image size
     3 00000000 ????                <1> returnCode  dw ?    ;Return Code from a child process
     4 00000002 ????????????????    <1> int2Epsp    dq ?    ;
     5 0000000A ????????????????    <1> int2Ersp    dq ?    ;Save the far Int 2E entry stack pointer!
     6 00000012 ????????????????    <1> int2Edta    dq ?    ;
     7                              <1> ;=============================================================
     8 0000001A ??                  <1> statFlg1    db ?    ;Flags 1 for the command interpreter
     9                              <1> ;=============================================================
    10                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    11                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    12                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    13                              <1> inBatch     equ 8   ;Up if processing a batch file
    14                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    15                              <1> inCritical  equ 20h ;Up if processing a command.
    16                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    17                              <1> inLdr       equ 80h ;Up if in loader
    18                              <1> ;Batch state variables.
    19 0000001B ????????????????    <1> bbPtr       dq ?                    ;Ptr to the batch block
    20 00000023 <res 4Fh>           <1> batFile     db fileSpecZL dup (?)   ;Path to bat to execute. Qual with 
    21 00000072 ??                  <1> ifFlg       db ?                    ;Flags for IF
    22                              <1> ifReset     equ 0                   ;Value to reset the flags
    23                              <1> ifNot       equ 1                   ;Set if NOT encountered
    24                              <1> ifCond      equ 2                   ;Set if condition encountered 
    25 00000073 ??                  <1> callFlg     db ?                    ;Set to -1 in a call!
    26                              <1> ;FOR state variables
    27 00000074 ??                  <1> forFlg      db ?                    ;For flag. Set if in a forloop
    28 00000075 ????????????????    <1> pForBlk     dq ?                    ;Ptr to the for block
    29                              <1> 
    30                              <1> ;Structs and strings
    31 0000007D <res 26h>           <1> ctryData    db countryStruc_size dup (?)    ;Length of the country table
    32 000000A3 <res 43h>           <1> currDirStr  db fullDirPathZL dup (?)        ;Current Directory String
    33 000000E6 <res 10h>           <1> cmdFcb      db 10h dup (?) ;Internal "fcb" for parsing the command name
    34 000000F6 <res 2Bh>           <1> cmdFFBlock  db ffBlock_size dup (?) ;Internal Find First Block to use as default DTA
    35                              <1> 
    36 00000121 <res 20h>           <1> launchBlock db execProg_size dup (?)
    37                              <1> 
    38                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    39                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    40                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    41                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    42                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    43                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    44                              <1> inLen   equ 128 
    45 00000141 <res 82h>           <1> inBuffer    db cmdBufferL dup (?)   ;Original input from user! 128 chars max!
    46                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    47 000001C3 <res 82h>           <1> cLineBuffer db cmdBufferL dup (?)   ;Copied input for processing
    48 00000245 <res 82h>           <1> cmdBuffer   db cmdBufferL dup (?)   ;Buffer with the command pipeline
    49 000002C7 <res 4Fh>           <1> cmdPathSpec db fileSpecZL dup (?)   ;Space for full path to a ext cmd
    50 00000316 <res Eh>            <1> cmdName     db cmdNameL dup (?)     ;Cmd name prefixed by length 
    51                              <1> 
    52 00000324 <res 4Fh>           <1> rdrInFilespec   db fileSpecZL dup (?)   ;Space for the redir in filespec
    53 00000373 <res 4Fh>           <1> rdrOutFilespec  db fileSpecZL dup (?)   ;Space for the redir out filespec
    54                              <1> 
    55                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    56 000003C2 <res 4Fh>           <1> pipe1Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    57 00000411 <res 4Fh>           <1> pipe2Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    58                              <1> 
    59 00000460 ????????????????    <1> newPipe dq ?    ;Pointer to the new pathspec (STDOUT)
    60 00000468 ????????????????    <1> oldPipe dq ?    ;Pointer to the old pathspec (STDIN)
    61                              <1> 
    62                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    63                              <1> ; a really long invalid DOS path for PATH to work properly.
    64 00000470 <res 104h>          <1> searchSpec  db 2*cmdBufferL dup (?)   
    65                              <1> 
    66                              <1> ;Internal Function vars
    67                              <1> ;Dir Vars
    68 00000574 ??                  <1> dirFlags    db ?    ;Dir Flags.     Bit[0] set => /W or /w specified
    69                              <1> ;                                   Bit[1] set => /P or /p specified
    70                              <1> ;                                   Bit[2] set => A file/path specified
    71 00000575 ??                  <1> dirLineCtr  db ?    ;Counter to keep track of which line we printed (0-23)
    72 00000576 ????????            <1> dirFileCtr  dd ?    ;Used in /W mode, rollover after 5
    73 0000057A ??                  <1> dirDrv      db ?    ;0 based drive number to use
    74 0000057B <res 82h>           <1> dirSrchDir  db cmdBufferL dup (?)   ;Search directory 
    75 000005FD <res 10h>           <1> dirSrchFCB  db 10h dup (?)    ;We copy the search pattern here, inited in dir
    76                              <1> dirWideType equ 1
    77                              <1> dirPageType equ 2
    78                              <1> dirFileType equ 4
    79                              <1> 
    80                              <1> ;Time/Date vars
    81 0000060D ??                  <1> td1 db ?    ;Minutes/Year
    82 0000060E ??                  <1> td2 db ?    ;Hours/Zero
    83 0000060F ??                  <1> td3 db ?    ;Hundredths/Day
    84 00000610 ??                  <1> td4 db ?    ;Seconds/Month
    85                              <1> 
    86                              <1> ;Rename/Copy/Delete Buffers
    87                              <1> delPath:
    88                              <1> comspecDir:    ;Used to store the directory passed during startup
    89 00000611 <res 82h>           <1> srcSpec     db cmdBufferL dup (?)
    90 00000693 <res 82h>           <1> destSpec    db cmdBufferL dup (?)
    91 00000715 ????????????????    <1> srcPtr      dq ?    ;Where to copy pattern to in src path
    92 0000071D ????????????????    <1> destPtr     dq ?    ;Where to copy pattern to in dest path
    93 00000725 <res Bh>            <1> renName     db 11 dup (?) ;Build a name pattern here in FCB format
    94                              <1> ;Copy vars
    95 00000730 ????????????????    <1> pLastFspec  dq ?    ;Ptr to first char past last + in source of Mode 3 copy
    96 00000738 ????????????????    <1> pNextFspec  dq ?    ;Ptr to first char past next + in source of Mode 3 copy
    97 00000740 ??                  <1> verifyFlg   db ?    ;Set if verify on before copy
    98 00000741 ????                <1> sourceHdl   dw ?    ;These get set to -1 on entry to copy
    99 00000743 ????                <1> destHdl     dw ?
   100 00000745 ????                <1> srcHdlInfo  dw ?    ;Save the hdl device info (bit 7 Set -> Char dev)
   101 00000747 ????????????????    <1> cpBufPtr    dq ?    ;Ptr to the xfr arena
   102 0000074F ????                <1> wCpBufSz    dw ?    ;Copy Buffer size, max 4096 bytes
   103 00000751 ????????            <1> dCpCnt      dd ?    ;Number of files we have copied
   104 00000755 ??                  <1> bCpFlg      db ?    ;Copy state flag   
   105                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   106                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   107                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   108                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   109                              <1> oneDest     equ 10h ;Single destination, not dir 
   110                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   111                              <1> mod2Cpy     equ 40h ;Set if copying files with new names (unused)
   112                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   113                              <1> 
   114                              <1> ;Environment manipulation vars
   115 00000756 ????                <1> envVarSz        dw ?    ;Env var size
   116 00000758 ????                <1> envVarNamSz     dw ?    ;Env var "name="" length
    31                                  bssLen equ ($ - $$)
    32                                  
    33                                  Segment stack nobits align=1 follows=bss
    34                                      alignb 10h
    35 00000000 <res 640h>                  dq 200 dup (?)  ;1.6K stack, para aligned
    36                                  stackTop:   ;Top of the stack
    37 00000640 ????????????????            dq ?    ;Extra paragraph
    38 00000648 ????????????????            dq ?
    39                                  endOfAlloc: ;Symbol to free from once init is over!
    40                                  stackLen equ ($ - $$)
    41                                  
    42                                  Segment init align=1 valign=1 follows=cmd vfollows=stack
    43                                  %define currSegVBase section.init.vstart
    44                                  %include "./src/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;Start by copying the loader forwards to make space for the BSS
     3                              <1> ;This section needs to use r8 as the base pointer for the copy.
     4                              <1> ;DO NOT USE RIP RELATIVE ADDRESSING AS RIP IS ASSUMED TO BE AT
     5                              <1> ; VIRTUAL START.
     6 00000000 488D35F9FFFFFF      <1>     lea rsi, cmdLdr
     7 00000007 498DB8[00000000]    <1>     lea rdi, qword [r8 + section.init.vstart]
     8 0000000E B92B050000          <1>     mov ecx, initLen
     9 00000013 F3A4                <1>     rep movsb
    10 00000015 498DB8[1E000000]    <1>     lea rdi, qword [r8 + startInit]
    11 0000001C 57                  <1>     push rdi
    12 0000001D C3                  <1>     ret ;Goto next instruction but reallocated!
    13                              <1> 
    14                              <1> startInit:
    15                              <1> ;First check if the version is ok. If not, return.
    16 0000001E B430                <1>     mov ah, 30h
    17 00000020 CD21                <1>     int 21h
    18 00000022 3C01                <1>     cmp al, 01h ;Version 1
    19 00000024 760D                <1>     jbe .okVersion
    20 00000026 488D159E040000      <1>     lea rdx, badVerStr
    21 0000002D B409                <1>     mov ah, 09h
    22 0000002F CD21                <1>     int 21h
    23                              <1> .exitBad:
    24 00000031 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    25                              <1> .okVersion:
    26                              <1> ;Now the version is ok we store self as parent in the PSP, 
    27                              <1> ; to prevent accidental closure
    28 00000033 800D(1A000000)80    <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    29 0000003A 4C8905(00000000)    <1>     mov qword [pPSP], r8        ;Store PSP ptr in internal var 
    30 00000041 488D25(40060000)    <1>     lea rsp, stackTop           ;And set the stack pointer to our stack
    31 00000048 488D3D(00000000)    <1>     lea rdi, section.bss.start
    32 0000004F B95A070000          <1>     mov ecx, bssLen
    33 00000054 31C0                <1>     xor eax, eax
    34 00000056 F3AA                <1>     rep stosb
    35                              <1> ;Now eject all the unneeded space, to make space for allocating.
    36                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    37 00000058 488D1DCC040000      <1>     lea rbx, endOfInitAlloc
    38 0000005F 4C29C3              <1>     sub rbx, r8 ;Convert to number of bytes (Could get assembler to do this)
    39 00000062 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
    40 00000068 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    41 0000006B B8004A0000          <1>     mov eax, 4A00h ;Realloc
    42 00000070 CD21                <1>     int 21h
    43 00000072 72BD                <1>     jc .exitBad
    44 00000074 E8(99480000)        <1>     call resetNation
    45                              <1> ;Now space has been made, time to parse the command tail
    46 00000079 E8EC000000          <1>     call parseCmdLine   ;Now parse the command tail.
    47 0000007E E802030000          <1>     call doEnv          ;Now enact the command tail actions
    48 00000083 E8(C5480000)        <1>     call resetIDTentries    ;Setup IDT entries now. 
    49 00000088 F605(1A000000)01    <1>     test byte [statFlg1], permaShell ;Are we perma?
    50 0000008F 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    51                              <1> ;Ok so we are master COMMAND.COM
    52                              <1> ;Now make myself my own parent task. We already are the current psp
    53 00000095 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    54                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    55 00000099 488D15(834B0000)    <1>     lea rdx, critErrorHandler
    56 000000A0 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    57 000000A4 488D15(8D4A0000)    <1>     lea rdx, ctrlCHandler
    58 000000AB 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    59 000000AF 488D15(970E0000)    <1>     lea rdx, appRet
    60 000000B6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    61 000000BA 488D15(43140000)    <1>     lea rdx, int2Eh
    62 000000C1 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    63 000000C6 CD21                <1>     int 21h
    64                              <1> ;Always get the Autoexec from the root dir we are booting into
    65 000000C8 E8(36450000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
    66 000000CD 0441                <1>     add al, "A"
    67 000000CF 8805(F2070000)      <1>     mov byte [autoSpec], al ;
    68                              <1> ;Now, open AUTOEXEC.BAT. 
    69 000000D5 488D15(F2070000)    <1>     lea rdx, autoSpec
    70 000000DC B8003D0000          <1>     mov eax, 3D00h  ;Open file
    71 000000E1 CD21                <1>     int 21h
    72 000000E3 7212                <1>     jc .noAutoexec
    73                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    74                              <1>     ; the normal hello there! string
    75 000000E5 89C3                <1>     mov ebx, eax
    76 000000E7 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    77 000000EC CD21                <1>     int 21h
    78                              <1> ;Now we do the same as at the end, prepping for jettisoning
    79 000000EE 31D2                <1>     xor edx, edx
    80 000000F0 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    81 000000F2 E954000000          <1>     jmp .prepStart
    82                              <1> .noAutoexec:
    83                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    84 000000F7 488D15(6E010000)    <1>     lea rdx, crlf
    85 000000FE B409                <1>     mov ah, 09h
    86 00000100 CD21                <1>     int 21h
    87 00000102 800D(1A000000)40    <1>     or byte [statFlg1], inLdrDT
    88 00000109 E8(872C0000)        <1>     call time.init
    89 0000010E E8(D92A0000)        <1>     call date.init
    90 00000113 8025(1A000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    91 0000011A 488D15(6E010000)    <1>     lea rdx, crlf
    92 00000121 B409                <1>     mov ah, 09h
    93 00000123 CD21                <1>     int 21h
    94                              <1>     ;Now fall thru.
    95                              <1> .notMaster:    
    96                              <1> ;Finish by printing INIT string.
    97 00000125 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    98 0000012C 7529                <1>     jnz .singleCom
    99 0000012E 488D155D030000      <1>     lea rdx, initString
   100 00000135 B409                <1>     mov ah, 09h
   101 00000137 CD21                <1>     int 21h ;Print init string
   102 00000139 E8(5F330000)        <1>     call version.printVersionNumber
   103 0000013E 488D1560030000      <1>     lea rdx, initString2
   104 00000145 B409                <1>     mov ah, 09h
   105 00000147 CD21                <1>     int 21h ;Print init string
   106 00000149 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   107                              <1> .prepStart:
   108 0000014B 8025(1A000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   109 00000152 E9(CB090000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   110                              <1> .singleCom:
   111                              <1> ;In single command mode, check the length of the input string was not 0.
   112                              <1> ; If it was, exit, else proceed
   113                              <1>     ;cmp byte [inBuffer + 1], 0
   114 00000157 803D(C4010000)00    <1>     cmp byte [cLineBuffer + 1], 0
   115 0000015E 0F84(7E350000)      <1>     je exit
   116 00000164 31D2                <1>     xor edx, edx
   117 00000166 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   118 00000168 EBE1                <1>     jmp short .prepStart
   119                              <1> 
   120                              <1> 
   121                              <1> parseCmdLine:
   122                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   123                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   124                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   125                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   126                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   127                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   128                              <1> ;           Default is CON
   129                              <1> ;[/C string] means execute the string as a command and terminate immediately
   130                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   131                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   132                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   133                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   134                              <1> ; permanent. Needs a colon after E. 
   135                              <1> ;
   136                              <1> ;Start by setting up the default comspec dir, null terminated
   137 0000016A E8(36450000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
   138 0000016F 0441                <1>     add al, "A"
   139 00000171 B43A                <1>     mov ah, ":"
   140 00000173 488D3D(11060000)    <1>     lea rdi, comspecDir
   141 0000017A 66AB                <1>     stosw   ;Store drive specifier
   142 0000017C 0FB605(0A000000)    <1>     movzx eax, byte [pathSep]
   143 00000183 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   144                              <1> 
   145 00000185 E8(7E480000)        <1>     call setDTA                     ;Ensure searches dont trample the tail!
   146                              <1> ;The tail is defined as:
   147                              <1> ;Tail[0] = Count byte, n, max 126
   148                              <1> ;Tail[1-n] = Command line, String of length n
   149                              <1> ;Tail[n+1] = Terminating <CR> char
   150                              <1> ;Thus the tail is, at most, 128 chars long with a command line being, at most,
   151                              <1> ; 126 chars. Thus, the last spot in the buffer is reserved for
   152                              <1> ; a CR. If there isn't a CR there, we can overwrite it!
   153 0000018A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   154 00000191 0FB64EFF            <1>     movzx ecx, byte [rsi - 1]       ;Get the count byte. Shouldnt be geq 126
   155 00000195 B87E000000          <1>     mov eax, 128 - 2                ;Max count byte
   156 0000019A 39C1                <1>     cmp ecx, eax                    ;Is count too big?
   157 0000019C 0F47C8              <1>     cmova ecx, eax                  ;If so, use max count.
   158 0000019F C6040E0D            <1>     mov byte [rsi + rcx], CR        ;Force a terminator there.
   159                              <1> .parseLp:
   160 000001A3 E8(79450000)        <1>     call skipDelimiters             ;Strip delims
   161 000001A8 AC                  <1>     lodsb
   162 000001A9 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   163 000001AC 3C0D                <1>     cmp al, CR
   164 000001AE 0F847C010000        <1>     je .endScan
   165 000001B4 3A05(0B000000)      <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   166 000001BA 752D                <1>     jne .file
   167                              <1> .switch:
   168 000001BC 48FFC6              <1>     inc rsi ;Go past the switch char
   169 000001BF AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   170 000001C0 E8(5E450000)        <1>     call ucChar
   171 000001C5 3C43                <1>     cmp al, "C"
   172 000001C7 0F842F010000        <1>     je .switchStr
   173 000001CD 3C50                <1>     cmp al, "P"
   174 000001CF 0F8403010000        <1>     je .switchPerma
   175 000001D5 3C45                <1>     cmp al, "E"
   176 000001D7 0F84B0000000        <1>     je .switchEnv
   177 000001DD 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   178                              <1> .badparm:
   179 000001E0 488D15(52030000)    <1>     lea rdx, badParm
   180 000001E7 EBBA                <1>     jmp short .parseLp
   181                              <1> ;-----------------------------------------------------------------
   182                              <1> ;Search for the filespec
   183                              <1> .file:
   184 000001E9 E8(05470000)        <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   185 000001EE 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   186 000001F1 488D15(70040000)    <1>     lea rdx, searchSpec
   187 000001F8 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   188 000001FD B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   189 00000202 CD21                <1>     int 21h
   190 00000204 7319                <1>     jnc .charOrDir
   191                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   192 00000206 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   193 00000208 30C0                <1>     xor al, al
   194 0000020A 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   195 0000020F 741C                <1>     je .dir ;If so, root dir specified, all oki!
   196                              <1> .badSpec:
   197                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   198 00000211 488D15CB020000      <1>     lea rdx, badCmdDir
   199                              <1> .bs0:
   200 00000218 E8(3D430000)        <1>     call printString
   201                              <1> .plhop:
   202 0000021D EB84                <1>     jmp short .parseLp
   203                              <1> ;-----------------------------------------------------------------
   204                              <1> ;Check if a char or directory here
   205                              <1> .charOrDir:
   206 0000021F 8A05(0B010000)      <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   207 00000225 2450                <1>     and al, dirCharDev | dirDirectory
   208 00000227 74E8                <1>     jz .badSpec
   209 00000229 A840                <1>     test al, dirCharDev
   210 0000022B 7525                <1>     jnz .charDev
   211                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   212                              <1> .dir:
   213 0000022D 56                  <1>     push rsi
   214 0000022E 488D35(70040000)    <1>     lea rsi, searchSpec 
   215 00000235 488D3D(11060000)    <1>     lea rdi, comspecDir
   216 0000023C E8(4A450000)        <1>     call strcpy2
   217 00000241 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   218 00000246 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   219 00000248 5E                  <1>     pop rsi
   220 00000249 C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   221 00000250 EBCB                <1>     jmp short .plhop
   222                              <1> ;-----------------------------------------------------------------
   223                              <1> ;Handle char dev here
   224                              <1> .charDev:
   225                              <1> ;Check the name is max 8 chars in length
   226 00000252 488D3D(70040000)    <1>     lea rdi, searchSpec
   227 00000259 E8(54450000)        <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   228 0000025E 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   229 00000264 771E                <1>     ja .badChar
   230 00000266 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   231 00000267 488D35(70040000)    <1>     lea rsi, searchSpec
   232 0000026E 488D3D(E9070000)    <1>     lea rdi, devName
   233 00000275 E8(3B450000)        <1>     call strcpy ;Copy this string over
   234 0000027A 5E                  <1>     pop rsi
   235 0000027B C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   236                              <1> .plhop1:
   237 00000282 EB99                <1>     jmp short .plhop    ;parseLp
   238                              <1> .badChar:
   239 00000284 488D15(05050000)    <1>     lea rdx, badDev
   240                              <1> .bs1:
   241 0000028B EB8B                <1>     jmp short .bs0
   242                              <1> ;-----------------------------------------------------------------
   243                              <1> .switchEnv:
   244 0000028D AC                  <1>     lodsb
   245 0000028E 48FFCE              <1>     dec rsi
   246 00000291 3C3A                <1>     cmp al, ":"
   247 00000293 0F8547FFFFFF        <1>     jne .badparm
   248 00000299 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   249 0000029C E8(79450000)        <1>     call skipDelimiters
   250 000002A1 AC                  <1>     lodsb       ;Get the first non-delimiter
   251 000002A2 48FFCE              <1>     dec rsi     ;Point back at it
   252 000002A5 3C0D                <1>     cmp al, CR
   253 000002A7 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   254                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   255 000002AD E8(32480000)        <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   256 000002B2 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   257 000002B8 3D00800000          <1>     cmp eax, 8000h
   258 000002BD 7710                <1>     ja .badEnv
   259 000002BF 3DA0000000          <1>     cmp eax, 0A0h
   260 000002C4 7209                <1>     jb .badEnv
   261 000002C6 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   262                              <1> .plhop2:
   263 000002CD EBB3                <1>     jmp short .plhop1  ;parseLp
   264                              <1> .badEnv:
   265 000002CF 488D1536020000      <1>     lea rdx, badEnvSz
   266 000002D6 EBB3                <1>     jmp short .bs1
   267                              <1> ;-----------------------------------------------------------------
   268                              <1> .switchPerma:
   269 000002D8 AC                  <1>     lodsb   ;Get the second char after the P
   270 000002D9 48FFCE              <1>     dec rsi ;Point back at it
   271 000002DC 3C0D                <1>     cmp al, CR
   272 000002DE 7413                <1>     je .spEmbCr ;Allow CR after the P
   273 000002E0 3A05(0B000000)      <1>     cmp al, byte [switchChar]
   274 000002E6 740B                <1>     je .spEmbCr ;Allow switch char after P
   275 000002E8 E8(87450000)        <1>     call isALdelimiter
   276 000002ED 0F85EDFEFFFF        <1>     jne .badparm
   277                              <1> .spEmbCr:
   278 000002F3 800D(1A000000)01    <1>     or byte [statFlg1], permaShell  ;Set the bit
   279 000002FA EBD1                <1>     jmp short .plhop2  ;parseLp
   280                              <1> ;-----------------------------------------------------------------
   281                              <1> .switchStr:
   282 000002FC AC                  <1>     lodsb       ;Get the char after the C
   283 000002FD 48FFCE              <1>     dec rsi     ;Point back at it
   284 00000300 3C0D                <1>     cmp al, CR
   285 00000302 740B                <1>     je .ssembCr         ;Embedded CR ok
   286 00000304 E8(87450000)        <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   287 00000309 0F85D1FEFFFF        <1>     jne .badparm
   288                              <1> .ssembCr:
   289 0000030F E8(79450000)        <1>     call skipDelimiters     ;Move rsi past the delimiters
   290                              <1>     ;lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   291 00000314 488D3D(C5010000)    <1>     lea rdi, cLineBuffer + 2
   292                              <1> .ssLp:
   293 0000031B AC                  <1>     lodsb
   294 0000031C AA                  <1>     stosb
   295 0000031D 3C0D                <1>     cmp al, CR
   296 0000031F 7408                <1>     je .ssOk
   297                              <1>     ;inc byte [inBuffer + 1] ;Increment the char count
   298 00000321 FE05(C4010000)      <1>     inc byte [cLineBuffer + 1] ;Increment the char count
   299 00000327 EBF2                <1>     jmp short .ssLp
   300                              <1> .ssOk:
   301 00000329 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the single flag
   302                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   303                              <1> ;-----------------------------------------------------------------
   304                              <1> .endScan:
   305                              <1> ;Now copy our name to the end of the dir specified
   306 00000330 488D3D(11060000)    <1>     lea rdi, comspecDir
   307 00000337 E8(54450000)        <1>     call strlen ;Get the length in ecx, preserve rdi
   308 0000033C FFC9                <1>     dec ecx ;Point to null terminator
   309 0000033E 8A05(0A000000)      <1>     mov al, byte [pathSep]
   310 00000344 4801CF              <1>     add rdi, rcx    ;Now point to the null
   311 00000347 3847FF              <1>     cmp byte [rdi - 1], al
   312 0000034A 7401                <1>     je .esSkipPathsep
   313 0000034C AA                  <1>     stosb
   314                              <1> .esSkipPathsep:
   315 0000034D 488D35(11080000)    <1>     lea rsi, cspec
   316 00000354 E8(3B450000)        <1>     call strcpy ;Now copy over the name of our beloved shell
   317 00000359 E812000000          <1>     call .replacestdio
   318                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   319                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   320 0000035E F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   321                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000365 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000367 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   322 00000368 8025(1A000000)FE    <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   323                              <1>     return
    13                              <2> %%_ret:
    14 0000036F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .replacestdio:
   325 00000370 F605B1010000FF      <1>     test byte [initNewDev], -1
   326                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000377 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   327 00000379 488D15(E9070000)    <1>     lea rdx, devName
   328 00000380 E9(EF2D0000)        <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   329                              <1> 
   330                              <1> doEnv:
   331                              <1> ;Will do the environment adjustments as needed
   332 00000385 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   333 00000389 4885F6              <1>     test rsi, rsi
   334 0000038C 7447                <1>     jz .noInitEnv
   335 0000038E 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   336                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000397 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   337                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   338                              <1> ;copy the environment from the master and free the original block.
   339                              <1> ;If the block we allocate is smaller than the original block, 
   340                              <1> ; print out of env space and stop there
   341                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   342                              <1> ; comspec. 
   343 00000399 F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   344 000003A0 752E                <1>     jnz .prepNewEnv
   345                              <1>     ;Else, we create new alloc and copy master into it
   346 000003A2 E867000000          <1>     call .allocEnv
   347 000003A7 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   348 000003AA E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   349 000003AF 57                  <1>     push rdi            ;Save the start of the environment block
   350 000003B0 E893000000          <1>     call .cpEnv         ;Copy the environment
   351 000003B5 5F                  <1>     pop rdi
   352 000003B6 E805000000          <1>     call .freeCurrentEnv
   353 000003BB 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   354                              <1>     return  
    13                              <2> %%_ret:
    14 000003BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> .freeCurrentEnv:
   356 000003C0 4150                <1>     push r8
   357 000003C2 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   358 000003C6 B800490000          <1>     mov eax, 4900h
   359 000003CB CD21                <1>     int 21h
   360 000003CD 4158                <1>     pop r8
   361                              <1>     return
    13                              <2> %%_ret:
    14 000003CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> .prepNewEnv:
   363 000003D0 E8EBFFFFFF          <1>     call .freeCurrentEnv
   364                              <1> .noInitEnv:
   365                              <1> ;Build the initial block.
   366 000003D5 E834000000          <1>     call .allocEnv
   367 000003DA 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   368 000003DD 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   369 000003E1 57                  <1>     push rdi            ;Save the environment ptr!
   370 000003E2 488D35(02080000)    <1>     lea rsi, pathEVar
   371 000003E9 E8(3B450000)        <1>     call strcpy
   372 000003EE 488D35(08080000)    <1>     lea rsi, comspecEVar
   373 000003F5 E8(3B450000)        <1>     call strcpy
   374 000003FA 48FFCF              <1>     dec rdi ;Write over the terminating null
   375 000003FD 488D35(11060000)    <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   376 00000404 E8(3B450000)        <1>     call strcpy 
   377 00000409 30C0                <1>     xor al, al
   378 0000040B AA                  <1>     stosb   ;Store the second terminating null
   379 0000040C 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   380                              <1>     return
    13                              <2> %%_ret:
    14 0000040D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   381                              <1> 
   382                              <1> .allocEnv:
   383                              <1> ;Output: rax -> Ptr to the environment block. 
   384                              <1> ;   If anything goes wrong, error message and exit the shell!
   385 0000040E 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   386 00000415 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   387 00000417 750C                <1>     jnz .goAlloc
   388 00000419 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   389 0000041E 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   390                              <1> .goAlloc:
   391 00000425 81C30F000000        <1>     add ebx, 0Fh
   392 0000042B C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   393 0000042E B800480000          <1>     mov eax, 4800h
   394 00000433 CD21                <1>     int 21h
   395                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000435 73D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   396 00000437 488D15(53070000)    <1>     lea rdx, memBad1
   397 0000043E E8(3D430000)        <1>     call printString
   398 00000443 E9(95350000)        <1>     jmp exit.ouch 
   399                              <1> 
   400                              <1> .cpEnv:
   401                              <1> ;Copies the environment
   402                              <1> ;Input: rsi -> Source to copy from
   403                              <1> ;       rdi -> Destination to copy to
   404 00000448 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   405                              <1> .lp:
   406 0000044F AC                  <1>     lodsb
   407 00000450 AA                  <1>     stosb
   408 00000451 84C0                <1>     test al, al
   409 00000453 750A                <1>     jnz .notNul
   410 00000455 3806                <1>     cmp byte [rsi], al
   411 00000457 7506                <1>     jnz .notNul
   412                              <1>     ;Here, we have encountered our double null!
   413 00000459 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   414 0000045B 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   415 0000045D AA                  <1>     stosb
   416                              <1>     return
    13                              <2> %%_ret:
    14 0000045E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> .notNul:
   418 0000045F FFC9                <1>     dec ecx ;One less char to copy over
   419 00000461 75EC                <1>     jnz .lp
   420                              <1> .err:
   421 00000463 4881EF02000000      <1>     sub rdi, 2
   422 0000046A 488D15(46020000)    <1>     lea rdx, noEnvSpace
   423 00000471 E8(3D430000)        <1>     call printString
   424 00000476 31C0                <1>     xor eax, eax
   425 00000478 66AB                <1>     stosw   ;Store 0 word
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000047A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> getMasterEnv:
   429                              <1> ;Walks the psp chain to the first self parent.
   430                              <1> ;Output: rsi -> Environment of the first self-parent program
   431 0000047B 4150                <1>     push r8
   432                              <1> .lp:
   433 0000047D 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   434 00000481 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   435 00000484 7405                <1>     je .exit
   436 00000486 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   437 00000489 EBF2                <1>     jmp short .lp
   438                              <1> .exit:
   439 0000048B 4158                <1>     pop r8
   440 0000048D 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   441                              <1>     return
    13                              <2> %%_ret:
    14 00000491 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   442                              <1> 
   443                              <1> 
   444                              <1> ;Loader Data here
   445                              <1> initString: 
   446 00000492 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   446 0000049B 2056657273696F6E20- <1>
   446 000004A4 24                  <1>
   447                              <1> initString2:
   448 000004A5 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   448 000004AE 687420323032322C20- <1>
   448 000004B7 323032342C20596C6C- <1>
   448 000004C0 2042757A6F6B752E    <1>
   449 000004C8 0D0A24              <1>     db CR,LF,"$"
   450 000004CB 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   450 000004D4 20444F532076657273- <1>
   450 000004DD 696F6E0D0A24        <1>
   451 000004E3 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   451 000004EC 20434F4D4D414E4420- <1>
   451 000004F5 736561726368206469- <1>
   451 000004FE 726563746F72792062- <1>
   451 00000507 61640D0A24          <1>
   452 0000050C 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   452 00000515 6E7669726F6E6D656E- <1>
   452 0000051E 742053697A650D0A24  <1>
   453 00000527 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   454 00000528 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   455 00000529 0000                <1> initEnvSz   dw 0    ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    45                                  endOfInitAlloc: ;Symbol to free during init
    46                                  initLen equ ($ - $$)
    47                                  
    48                                  ;Amount of space to make for bss/stack
    49                                  initOffset  equ bssLen + stackLen  
    49          ------------------       info: assembly required 1+6+2 passes

