     1                                  ;COMMAND.COM main file
     2                                  [map all ./lst/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  
     7                                  %include "./inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./inc/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./inc/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./inc/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./inc/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> struc forBlk
    47                              <1> ;forBlk.sListv is double null terminated at the end of the string
    48 00000000 ??                  <1>     .bListc     db ?    ;Number of elements in the list
    49 00000001 <res 82h>           <1>     .sListBlk   db cmdBufferL dup (?)   ;Null terminated entries of list.
    50 00000083 ??                  <1>     .bCmdWC     db ?    ;Set if the list entry has a wildcard
    51 00000084 ??                  <1>     .bArgNum    db ?    ;Number of the current argument
    52 00000085 ????????????????    <1>     .pLstCurr   dq ?    ;Ptr to current list element we are treating
    53 0000008D ????????????????    <1>     .pCmd       dq ?    ;Ptr to command string
    54 00000095 <res 82h>           <1>     .sCmdLine   db cmdBufferL dup (?)   ;Copy of cmdline to execute with %<var> 
    55 00000117 <res 43h>           <1>     .sNameBuf   db fullDirPathZL dup (?)    ;Used for building a search spec.
    56 0000015A <res 2Bh>           <1>     .sFFBuffer  db ffBlock_size dup (?) ;ffblock for searching list elements
    57 00000185 ??                  <1>     .bLpVar     db ?    ;Char of loop var
    58                              <1> endstruc
    59                              <1> 
    60                              <1> 
    61                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    62 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    63 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    64 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    65 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    66 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    67                              <1> endstruc
    68                              <1> 
    69                              <1> struc execProg  ;For use with EXEC-ing a child task
    70 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    71 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    72 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    73 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    74                              <1> endstruc
    75                              <1> 
    76                              <1> ;Directory attribute equates
    77                              <1>     dirReadOnly     equ 01h
    78                              <1>     dirHidden       equ 02h
    79                              <1>     dirSystem       equ 04h
    80                              <1>     dirVolumeID     equ 08h
    81                              <1>     dirDirectory    equ 10h
    82                              <1>     dirArchive      equ 20h
    83                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    84                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    85                              <1>     ;If any of the three bits are set, then ALL three bits are set
    86                              <1>     ; in addition to whatever the user passed to search for.
    87                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    88                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  
    13                                      ORG 100h    ;Allows for r8 to be used as a base pointer for section reloc
    14                                  Segment cmd align=1 valign=1
    15                                  %define currSegVBase 0
    16                                  %include "./dat/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3                              <1> pPSP:       ;Internal pointer to the task PSP
     4 00000000 E9CE4C0000          <1>     jmp cmdLdrE
     5 00000005 CCCCCC              <1>     db 3 dup (0CCh) ;So add three bytes to turn it into a variable after use
     6 00000008 1400                <1> numHdls     dw 20   ;Get number of handles permitted
     7 0000000A 5C                  <1> pathSep     db "\"  ;Default path sep
     8 0000000B 2F                  <1> switchChar  db "/"  ;Default switch char
     9 0000000C FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    10 0000000D 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    11 0000000E FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    12                              <1> ;Volume static FCB for filesearches
    13                              <1> volFcb:
    14                              <1>     istruc exFcb
    15 00000010 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    16 00000011 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    17 00000017 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    18 00000018 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    19 00000020 3F3F3F              <1>     at exFcb.fileext,   db "???"
    20 00000023 00000000            <1>     at exFcb.curBlock,  dd 0
    21 00000027 00<rep 15h>         <1>     iend 
    22                              <1> 
    23                              <1> ;The string for Y/N prompt for batch ^C handler
    24 0000003C 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    25                              <1> ;==============================================================================
    26                              <1> ; Do not split the blocks below!
    27                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    28                              <1> cmdLineStatePtr:
    29 00000040 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 00000041 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 00000043 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 00000045 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 00000046 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 00000047 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 00000049 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> ;------------------------------------------------------------------------------
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 0000004B 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 0000004C 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 0000004D 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 0000004E 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 0000004F 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 00000050 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 00000051 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    17                                  %include "./dat/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000052 03444952            <1>     db 3, "DIR"
     8 00000056 171A                <1>     dw dir - startLbl
     9                              <1> 
    10 00000058 024344              <1>     db 2, "CD"
    11 0000005B BA1E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000005D 054348444952        <1>     db 5, "CHDIR"
    14 00000063 BA1E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000065 024D44              <1>     db 2, "MD"
    17 00000068 351F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000006A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000070 351F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000072 025244              <1>     db 2, "RD"
    23 00000075 7E1F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000077 05524D444952        <1>     db 5, "RMDIR"
    26 0000007D 7E1F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000007F 0344454C            <1>     db 3, "DEL"
    29 00000083 A428                <1>     dw erase - startLbl
    30                              <1> 
    31 00000085 054552415345        <1>     db 5, "ERASE"
    32 0000008B A428                <1>     dw erase - startLbl
    33                              <1> 
    34 0000008D 0444415445          <1>     db 4, "DATE"
    35 00000092 E229                <1>     dw date - startLbl
    36                              <1> 
    37 00000094 0454494D45          <1>     db 4, "TIME"
    38 00000099 902B                <1>     dw time - startLbl
    39                              <1> 
    40 0000009B 04434F5059          <1>     db 4, "COPY"
    41 000000A0 C81F                <1>     dw copy - startLbl
    42                              <1> 
    43 000000A2 0443545459          <1>     db 4, "CTTY"
    44 000000A7 BD2C                <1>     dw ctty - startLbl
    45                              <1> 
    46 000000A9 03434C53            <1>     db 3, "CLS"
    47 000000AD 642D                <1>     dw cls - startLbl
    48                              <1> 
    49 000000AF 05425245414B        <1>     db 5, "BREAK"
    50 000000B5 DD2D                <1>     dw break - startLbl
    51                              <1> 
    52 000000B7 06564552494659      <1>     db 6, "VERIFY"
    53 000000BE 5E2E                <1>     dw verify - startLbl
    54                              <1> 
    55 000000C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000000C7 DB2E                <1>     dw rename - startLbl
    57                              <1> 
    58 000000C9 0352454E            <1>     db 3, "REN"
    59 000000CD DB2E                <1>     dw rename - startLbl
    60                              <1>     
    61 000000CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000000D8 1231                <1>     dw truename - startLbl
    63                              <1> 
    64 000000DA 03564552            <1>     db 3, "VER"
    65 000000DE 1D32                <1>     dw version - startLbl
    66                              <1> 
    67 000000E0 03564F4C            <1>     db 3, "VOL"
    68 000000E4 6331                <1>     dw volume - startLbl
    69                              <1> 
    70 000000E6 034D454D            <1>     db 3, "MEM"
    71 000000EA 6132                <1>     dw memory - startLbl
    72                              <1> 
    73 000000EC 0445584954          <1>     db 4, "EXIT"
    74 000000F1 6334                <1>     dw exit - startLbl
    75                              <1> 
    76 000000F3 0454595045          <1>     db 4, "TYPE"
    77 000000F8 B033                <1>     dw type - startLbl
    78                              <1> 
    79 000000FA 0450415448          <1>     db 4, "PATH"
    80 000000FF AC37                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000101 03534554            <1>     db 3, "SET"
    83 00000105 8D36                <1>     dw set - startLbl
    84                              <1> 
    85 00000107 0650524F4D5054      <1>     db 6, "PROMPT"
    86 0000010E 8B38                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000110 044543484F          <1>     db 4, "ECHO"
    90 00000115 FB38                <1>     dw echo - startLbl
    91                              <1> 
    92 00000117 055041555345        <1>     db 5, "PAUSE"
    93 0000011D D739                <1>     dw pauza - startLbl
    94                              <1> 
    95 0000011F 0352454D            <1>     db 3, "REM"
    96 00000123 213A                <1>     dw remark - startLbl
    97                              <1> 
    98 00000125 04474F544F          <1>     db 4, "GOTO"
    99 0000012A 833A                <1>     dw goto - startLbl
   100                              <1> 
   101 0000012C 055348494654        <1>     db 5, "SHIFT"
   102 00000132 363A                <1>     dw shift - startLbl
   103                              <1> 
   104 00000134 024946              <1>     db 2, "IF"
   105 00000137 C33B                <1>     dw ifCmd - startLbl
   106                              <1> ;-----------------------------
   107                              <1> ; Commands left to implement 
   108                              <1> ;-----------------------------
   109 00000139 03464F52            <1>     db 3, "FOR"
   110 0000013D D33C                <1>     dw forCmd - startLbl
   111                              <1> ;-----------------------------
   112 0000013F FF                  <1>     db -1   ;End of table
   113                              <1> 
   114                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   115                              <1> pTbl:
   116 00000140 42                  <1>     db "B", 
   117 00000141 1C41                <1>     dw putPipeInPrompt - pTbl     ;Pipe char
   118 00000143 44                  <1>     db "D", 
   119 00000144 1B42                <1>     dw printFmtDate - pTbl        ;Current date
   120 00000146 45                  <1>     db "E", 
   121 00000147 1041                <1>     dw putEscInPrompt - pTbl      ;ANSI Escape char
   122 00000149 47                  <1>     db "G", 
   123 0000014A 2041                <1>     dw putGTinPrompt - pTbl       ;Greater than char
   124 0000014C 48                  <1>     db "H", 
   125 0000014D 2841                <1>     dw putBSPinPrompt - pTbl      ;Backspace
   126 0000014F 4C                  <1>     db "L", 
   127 00000150 2441                <1>     dw putLTinPrompt - pTbl       ;Less than char
   128 00000152 4E                  <1>     db "N", 
   129 00000153 4141                <1>     dw putDriveInPrompt - pTbl    ;Current drive letter
   130 00000155 50                  <1>     db "P", 
   131 00000156 4F41                <1>     dw putCWDInPrompt - pTbl      ;Current drive and path
   132 00000158 51                  <1>     db "Q", 
   133 00000159 1841                <1>     dw putEquInPrompt - pTbl      ;Equals char
   134 0000015B 54                  <1>     db "T", 
   135 0000015C B241                <1>     dw printFmtTime - pTbl        ;Current time in hh:mm:ss.hh fmt
   136 0000015E 56                  <1>     db "V", 
   137 0000015F E240                <1>     dw putVersionInPrompt - pTbl  ;DOS version number
   138 00000161 5F                  <1>     db "_", 
   139 00000162 D340                <1>     dw printCRLF - pTbl           ;CRLF pair
   140 00000164 24                  <1>     db "$", 
   141 00000165 1441                <1>     dw putMoneyInPrompt - pTbl    ;Dollar sign
   142                              <1> pTblL equ $ - pTbl
    18                                  %include "./dat/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000167 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000016A 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000016F 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000178 696C65206D69737369- <1>
     4 00000181 6E670D0A24          <1>
     5 00000186 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000018F 6469736B2077697468- <1>
     5 00000198 206261746368206669- <1>
     5 000001A1 6C65                <1>
     6 000001A3 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000001AC 737320616E79206B65- <1>
     6 000001B5 79207768656E207265- <1>
     6 000001BE 6164790D0A24        <1>
     7 000001C4 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000001CD 746520626174636820- <1>
     7 000001D6 6A6F622028592F4E29- <1>
     7 000001DF 3F2024              <1>
     8 000001E2 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000001EB 6E64206F722066696C- <1>
     8 000001F4 65206E616D650D0A24  <1>
     9 000001FD 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000206 2066696C65206E616D- <1>
     9 0000020F 65206F7220          <1>
    10 00000214 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 0000021D 666F756E640D0A24    <1>
    11 00000225 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 0000022E 656E74206469736B20- <1>
    11 00000237 73706163650D0A24    <1>
    12 0000023F 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000248 7669726F6E6D656E74- <1>
    12 00000251 2073706163650D0A24  <1>
    13 0000025A 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 00000263 74696F6E206572726F- <1>
    13 0000026C 720D0A24            <1>
    14 00000270 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000279 6F7420626520636F70- <1>
    14 00000282 696564206F6E746F20- <1>
    14 0000028B 697473656C660D0A24  <1>
    15 00000294 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 0000029D 662064657374696E61- <1>
    15 000002A6 74696F6E206C6F7374- <1>
    15 000002AF 206265666F72652063- <1>
    15 000002B8 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000002BE 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000002C7 636F706965640D0A24  <1>
    18 000002D0 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000002D9 68206D656D6F727920- <1>
    18 000002E2 666F7220434F50590D- <1>
    18 000002EB 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000002ED 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 000002F6 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 000002F7 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000300 65650D0A24          <1>
    23 00000305 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 0000030E 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000317 726976652073706563- <1>
    25 00000320 696669636174696F6E- <1>
    25 00000329 0D0A24              <1>
    26 0000032C 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000335 6B6579207768656E20- <1>
    26 0000033E 7265616479202E202E- <1>
    26 00000347 202E2024            <1>
    27 0000034B 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000354 6172616D657465720D- <1>
    27 0000035D 0A24                <1>
    28                              <1> 
    29 0000035F 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000368 576564546875467269- <1>
    29 00000371 536174              <1>
    30 00000374 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 0000037D 206461746524        <1>
    31 00000383 43757272656E742064- <1> curDate db  "Current date is $"
    31 0000038C 6174652069732024    <1>
    32 00000394 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 0000039D 657720646174652024  <1>
    33 000003A6 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 000003AF 293A2024            <1>
    34 000003B3 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 000003BC 293A2024            <1>
    35 000003C0 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 000003C9 293A2024            <1>
    36 000003CD 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 000003D6 2074696D6524        <1>
    37 000003DC 43757272656E742074- <1> curTime db  "Current time is $"
    37 000003E5 696D652069732024    <1>
    38 000003ED 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 000003F6 65772074696D653A20- <1>
    38 000003FF 24                  <1>
    39                              <1> 
    40 00000400 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000409 7572652028592F4E29- <1>
    40 00000412 3F2024              <1>
    41                              <1> 
    42 00000415 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 0000041E 56657273696F6E2024  <1>
    43                              <1> 
    44 00000427 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000430 6E2064726976652024  <1>
    45 00000439 2069732024          <1> volOk   db " is $"
    46 0000043E 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000447 6162656C24          <1>
    47                              <1> 
    48 0000044C 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000455 69726563746F72790D- <1>
    48 0000045E 0A24                <1>
    49 00000460 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000469 206372656174652064- <1>
    49 00000472 69726563746F72790D- <1>
    49 0000047B 0A24                <1>
    50 0000047D 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000486 6174682C206E6F7420- <1>
    50 0000048F 6469726563746F7279- <1>
    50 00000498 2C0D0A              <1>
    51 0000049B 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 000004A4 6F7279206E6F742065- <1>
    51 000004AD 6D7074790D0A24      <1>
    52 000004B4 204469726563746F72- <1> dirMain db " Directory of  $"
    52 000004BD 79206F66202024      <1>
    53 000004C4 4E6F20506174682024  <1> noPath  db "No Path $"
    54 000004CD 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 000004D6 6E6965640D0A24      <1>
    55 000004DD 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 000004E6 72697665206973206E- <1>
    55 000004EF 6F206C6F6E67657220- <1>
    55 000004F8 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 000004FE 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000507 65766963650D0A24    <1>
    58 0000050F 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000518 20666F756E640D0A24  <1>
    59 00000521 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 0000052A 726F720D0A24        <1>
    60 00000530 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000539 6F74206265206E6573- <1>
    60 00000542 7465640D0A24        <1>
    61 00000548 464F5200            <1> forStr  db "FOR",0
    62 0000054C 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    62 00000555 6174652066696C6520- <1>
    62 0000055E 6572726F7220647572- <1>
    62 00000567 696E6720706970650D- <1>
    62 00000570 0A24                <1>
    63 00000572 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    63 0000057B 2062696E6172792072- <1>
    63 00000584 656164732066726F6D- <1>
    63 0000058D 206120646576696365- <1>
    63 00000596 0D0A24              <1>
    64 00000599 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    65 0000059F 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    66 000005A4 425245414B20697320- <1> breakIs db "BREAK is $"
    66 000005AD 24                  <1>
    67 000005AE 564552494659206973- <1> verifyIs    db "VERIFY is $"
    67 000005B7 2024                <1>
    68 000005B9 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    69 000005C2 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    69 000005CB 617468206F72206669- <1>
    69 000005D4 6C65206E616D650D0A- <1>
    69 000005DD 24                  <1>
    70 000005DE 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    70 000005E7 756D626572206F6620- <1>
    70 000005F0 706172616D65746572- <1>
    70 000005F9 730D0A24            <1>
    71 000005FD 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    71 00000606 74696E6720746F2064- <1>
    71 0000060F 6576696365          <1>
    72 00000614 08200800            <1> backSpace   db BSP," ",BSP,NUL
    73 00000618 50726F6772616D2074- <1> noMemMsg    db "Program too big to fit in memory",CR,LF,"$"
    73 00000621 6F6F2062696720746F- <1>
    73 0000062A 2066697420696E206D- <1>
    73 00000633 656D6F72790D0A24    <1>
    74 0000063B 4E4F5400            <1> notString   db "NOT",0
    75 0000063F 4552524F524C455645- <1> errlvlStr   db "ERRORLEVEL",0
    75 00000648 4C00                <1>
    76 0000064A 455849535400        <1> existStr    db "EXIST",0
    77 00000650 494E00              <1> inStr       db "IN",0
    78 00000653 444F00              <1> doStr       db "DO",0
    79 00000656 2800                <1> listOpenStr db "(",0
    80 00000658 2900                <1> listClosStr db ")",0
    81                              <1> 
    82 0000065A 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    82 00000663 20202020202020546F- <1>
    82 0000066C 74616C207379737465- <1>
    82 00000675 6D206D656D6F72793A- <1>
    82 0000067E 2024                <1>
    83 00000680 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    83 00000689 20202020202020204D- <1>
    83 00000692 656D6F727920757365- <1>
    83 0000069B 6420627920444F533A- <1>
    83 000006A4 2024                <1>
    84 000006A6 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    84 000006AF 656D6F727920757365- <1>
    84 000006B8 64206279206170706C- <1>
    84 000006C1 69636174696F6E733A- <1>
    84 000006CA 2024                <1>
    85 000006CC 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    85 000006D5 656D6F727920726573- <1>
    85 000006DE 657276656420627920- <1>
    85 000006E7 68617264776172653A- <1>
    85 000006F0 2024                <1>
    86 000006F2 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    86 000006FB 202020202020202020- <1>
    86 00000704 2020202020204D656D- <1>
    86 0000070D 6F727920667265653A- <1>
    86 00000716 2024                <1>
    87 00000718 20627974657324      <1> memByte db " bytes$"
    88 0000071F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    88 00000728 6F7420417373657274- <1>
    88 00000731 61696E20444F532045- <1>
    88 0000073A 6E74727920506F696E- <1>
    88 00000743 7424                <1>
    89 00000745 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    89 0000074E 416C6C6F636174696F- <1>
    89 00000757 6E204572726F7224    <1>
    90 0000075F 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    90 00000768 4572726F7224        <1>
    91 0000076E 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    91 00000777 68616C74656424      <1>
    92                              <1> 
    93 0000077E 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    93 00000787 206372656174652070- <1>
    93 00000790 6970650D0A          <1>
    94                              <1> pipeErrMsgL equ $ - pipeErrMsg
    95 00000795 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    95 0000079E 6F6E206572726F720D- <1>
    95 000007A7 0A                  <1>
    96                              <1> redirErrMsgL   equ $ - redirErrMsg
    97                              <1> 
    98 000007A8 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    99 000007AC 2020202024          <1> fourSpc  db "    $"
   100 000007B1 20202024            <1> threeSpc db "   $"
   101 000007B5 202024              <1> twoSpc   db "  $"
   102                              <1> 
   103 000007B8 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   103 000007C1 696679204F4E206F72- <1>
   103 000007CA 204F46460D0A24      <1>
   104                              <1> 
   105 000007D1 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
   106 000007D9 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   107                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   108                              <1> ; handles and reopen this device. Defaults to CON
   109 000007E2 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   110 000007EB 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   110 000007F4 45432E42415400      <1>
   111                              <1> autoSpecL equ $ - autoSpec
   112 000007FB 504154483D00        <1> pathEVar    db "PATH=",0
   113 00000801 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   114 0000080A 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   114 00000813 4F4D00              <1>
   115                              <1> 
   116                              <1> ;Int 24h strings
   117                              <1> errMsgPtrTbl:
   118 00000816 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   119 00000818 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   120 0000081A 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   121 0000081C 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   122 0000081E 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   123 00000820 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   124 00000822 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   125 00000824 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   126 00000826 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   127 00000828 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   128 0000082A A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   129 0000082C B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   130 0000082E BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   131 00000830 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   132 00000832 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   133 00000834 F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   134 00000836 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   135 00000838 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   136                              <1> errorMsgTbl:
   137 0000083A 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   137 00000843 63746563742024      <1>
   138 0000084A 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   138 00000853 6E69742024          <1>
   139 00000858 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   139 00000861 2024                <1>
   140 00000863 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   140 0000086C 6F6D6D616E642024    <1>
   141 00000874 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   142 0000087A 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   142 00000883 73742024            <1>
   143 00000887 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   144 0000088D 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   144 00000896 656469612024        <1>
   145 0000089C 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   145 000008A5 7420466F756E642024  <1>
   146 000008AE 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   146 000008B7 7065722024          <1>
   147 000008BC 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   147 000008C5 6C742024            <1>
   148 000008C9 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   148 000008D2 742024              <1>
   149 000008D5 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   149 000008DE 61696C7572652024    <1>
   150 000008E6 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   150 000008EF 696F6C6174696F6E20- <1>
   150 000008F8 24                  <1>
   151 000008F9 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   151 00000902 6174696F6E2024      <1>
   152 00000909 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   152 00000912 73657274206469736B- <1>
   152 0000091B 20                  <1>
   153 0000091C 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   153 00000925 2020                <1>
   154 00000927 0D0A24              <1>         db CR,LF,"$"
   155                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   156 0000092A 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   156 00000933 696C61626C652024    <1>
   157 0000093B 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   157 00000944 756666657220657272- <1>
   157 0000094D 6F722024            <1>
   158                              <1> 
   159                              <1> ;Anything above this is a generic network error.
   160 00000951 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   160 0000095A 6574776F726B204572- <1>
   160 00000963 726F722024          <1>
   161                              <1> 
   162                              <1> ;Rest of the Int 24h error messages go here
   163 00000968 64726976652024      <1> drvMsg      db "drive $"
   164 0000096F 6572726F7220726561- <1> readMsg     db "error reading $"
   164 00000978 64696E672024        <1>
   165 0000097E 6572726F7220777269- <1> writeMsg    db "error writing $"
   165 00000987 74696E672024        <1>
   166 0000098D 41626F727424        <1> abortMsg    db "Abort$" 
   167 00000993 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   168 0000099A 526574727924        <1> retryMsg    db "Retry$"
   169 000009A0 4661696C24          <1> failMsg     db "Fail$"
   170 000009A5 2C2024              <1> betweenMsg  db ", $"
   171 000009A8 3F2024              <1> endMsg      db "? $"
   172 000009AB 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    19                                  %include "./src/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1> ;Now resize the allocation
     4 000009AF 488D1D(50060000)    <1>     lea rbx, endOfAlloc
     5 000009B6 4C29C3              <1>     sub rbx, r8 ;Get # of bytes for COMMAND.COM and stack
     6 000009B9 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
     7 000009BF C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000009C2 B8004A0000          <1>     mov eax, 4A00h ;Realloc
     9 000009C7 CD21                <1>     int 21h
    10 000009C9 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    11 000009CB 7432                <1>     jz commandMain
    12 000009CD E8240A0000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    13                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    14 000009D2 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
    15 000009D9 0F8591000000        <1>     jnz commandMain.goSingle 
    16                              <1>     ;Only enter here if we are autoexec :)
    17 000009DF C605(C3010000)0F    <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    18 000009E6 488D35FEFDFFFF      <1>     lea rsi, autoSpec
    19 000009ED 488D3D(C4010000)    <1>     lea rdi, inBuffer + 2
    20 000009F4 E82E3A0000          <1>     call strcpy
    21 000009F9 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    22 000009FD EB68                <1>     jmp short commandMain.batProceed
    23                              <1> commandMain:
    24 000009FF 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset internal stack pointer pos
    25 00000A06 E8EB090000          <1>     call getSetMainState
    26                              <1> .inputMain:         ;Only reset once per line!
    27 00000A0B F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    28 00000A12 0F854B2A0000        <1>     jnz exit
    29 00000A18 E8ED370000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    30 00000A1D B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    31 00000A22 CD21                <1>     int 21h
    32 00000A24 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    33 00000A29 BA01000000          <1>     mov edx, 1      ;Start new print job
    34 00000A2E CD21                <1>     int 21h
    35                              <1> .inputGetAgain:
    36 00000A30 E8623A0000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    37                              <1> .inputGetCmdlineAgain:
    38 00000A35 F605(F5000000)FF    <1>     test byte [forFlg], -1  ;If we are in a FOR loop, proceed with for
    39 00000A3C 0F85F5330000        <1>     jne forProceed
    40 00000A42 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    41 00000A49 0F857F0C0000        <1>     jnz batNextLine
    42 00000A4F E844370000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    43 00000A54 488D15(C2010000)    <1>     lea rdx, inBuffer
    44 00000A5B B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00000A60 CD21                <1>     int 21h
    46                              <1> .batProceedCrlf:
    47 00000A62 E8AC370000          <1>     call printCRLF      ;Note we have accepted input
    48                              <1> .batProceed:            ;Jump here to copy the batch input line 
    49                              <1> ;First check we had something typed in of length greater than 0
    50 00000A67 803D(C3010000)00    <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    51 00000A6E 74C5                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    52                              <1> .goSingle:
    53                              <1> ;Copy over the input text
    54 00000A70 488D35(C2010000)    <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    55 00000A77 488D3D(44020000)    <1>     lea rdi, cpyBuffer
    56 00000A7E B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    57 00000A83 F3A4                <1>     rep movsb
    58 00000A85 E87A000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    59                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    60 00000A8A 488D35(C8020000)    <1>     lea rsi, cmdBuffer + 2
    61 00000A91 E8CF390000          <1>     call skipDelimiters
    62 00000A96 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    63 00000A99 7495                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    64 00000A9B 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    65 00000A9E 0F8407040000        <1>     je hardSynErr
    66                              <1> .pipeLoop:
    67 00000AA4 4C8B0555F5FFFF      <1>     mov r8, qword [pPSP]  ;Point back to home segment
    68 00000AAB E8AE000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    69                              <1>     ;ZF here indicates if we are at the end of the command or nots
    70 00000AB0 E8D9340000          <1>     call forPrintCmd        ;Print cmd if in a FOR loop. Flag preserved.
    71 00000AB5 E889070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    72 00000ABA E8F8000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    73 00000ABF E8A63C0000          <1>     call setDTA             ;Set the DTA back to us before we proceed!
    74 00000AC4 E866020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    75                              <1> .okRet:                     ;Normal return point for processing
    76 00000AC9 E87A050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    77 00000ACE F6056BF5FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    78 00000AD5 0F8430FFFFFF        <1>     jz .inputMain
    79                              <1>     ;Now we pull the commandline forwards. 
    80 00000ADB E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    81 00000AE0 488D3D(C8020000)    <1>     lea rdi, cmdBuffer + 2
    82 00000AE7 4889F1              <1>     mov rcx, rsi
    83 00000AEA 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    84 00000AED 280D(C7020000)      <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    85 00000AF3 8A0D(C7020000)      <1>     mov cl, byte [cmdBuffer + 1]
    86 00000AF9 FFC1                <1>     inc ecx     ;One more for the terminating char
    87 00000AFB F3A4                <1>     rep movsb   ;Move the chars over    
    88 00000AFD E884390000          <1>     call clearCommandState  ;Else, clear the command state and start again
    89 00000B02 EBA0                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    90                              <1> 
    91                              <1> makeCmdBuffer:
    92                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    93                              <1> ; copy buffer. Called only once in a cycle.
    94                              <1> ;Throughout: CL has char count, CH has quote count
    95 00000B04 488D35(46020000)    <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    96 00000B0B 31C9                <1>     xor ecx, ecx
    97 00000B0D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    98                              <1> .countQuotes:
    99 00000B10 AC                  <1>     lodsb
   100 00000B11 3C22                <1>     cmp al, '"'
   101 00000B13 7507                <1>     jne .notQuoteToCount
   102 00000B15 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   103 00000B17 E9F4FFFFFF          <1>     jmp .countQuotes
   104                              <1> .notQuoteToCount:
   105 00000B1C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   106 00000B1E 75F0                <1>     jne .countQuotes
   107 00000B20 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   108 00000B23 488D3D(C8020000)    <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   109                              <1> .getChar:
   110 00000B2A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   111 00000B2B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   112 00000B2D 750E                <1>     jne .notQuote
   113 00000B2F FECD                <1>     dec ch          ;We have a quote, now decrement
   114 00000B31 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   115                              <1> .searchForClosingQuote:
   116                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   117 00000B33 AA                  <1>     stosb   ;Store char and inc rdi
   118 00000B34 FEC1                <1>     inc cl
   119 00000B36 AC                  <1>     lodsb   ;Get next char
   120 00000B37 3C22                <1>     cmp al, '"'
   121 00000B39 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   122 00000B3B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   123                              <1> .notQuote:
   124 00000B3D E8A0060000          <1>     call peelRedir      ;Intervene redir if needed
   125 00000B42 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   126 00000B44 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   127 00000B46 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   128                              <1> .pipeHandle:
   129                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   130 00000B48 0F845D030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   131                              <1> .notRedir:
   132 00000B4E AA                  <1>     stosb       ;Store char and advance rdi
   133 00000B4F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   134 00000B51 7404                <1>     je .exit
   135 00000B53 FEC1                <1>     inc cl      ;Increment char count
   136 00000B55 EBD3                <1>     jmp short .getChar    ;If not, get next char
   137                              <1> .exit:
   138 00000B57 880D(C7020000)      <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   139                              <1>     return
    13                              <2> %%_ret:
    14 00000B5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> 
   141                              <1> makeCmdString:
   142                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   143                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   144                              <1> ; Copies into the psp.
   145                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   146 00000B5E 488D35(C8020000)    <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   147 00000B65 31C9                <1>     xor ecx, ecx
   148 00000B67 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   149                              <1> .countQuotes:
   150 00000B6A AC                  <1>     lodsb
   151 00000B6B 3C22                <1>     cmp al, '"'
   152 00000B6D 7507                <1>     jne .notQuoteToCount
   153 00000B6F FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   154 00000B71 E9F4FFFFFF          <1>     jmp .countQuotes
   155                              <1> .notQuoteToCount:
   156 00000B76 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   157 00000B78 75F0                <1>     jne .countQuotes
   158 00000B7A 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   159 00000B7D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   160                              <1> .getChar:
   161 00000B84 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   162 00000B85 3C22                <1>     cmp al, '"'     ;Is char a quote?
   163 00000B87 750E                <1>     jne .notQuote
   164 00000B89 FECD                <1>     dec ch          ;We have a quote, now decrement
   165 00000B8B 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   166                              <1> .searchForClosingQuote:
   167                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   168 00000B8D AA                  <1>     stosb   ;Store char and inc rdi
   169 00000B8E FEC1                <1>     inc cl
   170 00000B90 AC                  <1>     lodsb   ;Get next char
   171 00000B91 3C22                <1>     cmp al, '"'
   172 00000B93 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   173 00000B95 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   174                              <1> .notQuote:
   175 00000B97 3C7C                <1>     cmp al, "|"
   176 00000B99 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   177 00000B9B B00D                <1>     mov al, CR          ;Store the pipe char
   178 00000B9D 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   179                              <1> .notPipe:
   180 00000BA0 AA                  <1>     stosb       ;Store char and advance rdi
   181 00000BA1 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   182 00000BA3 7404                <1>     je .exit
   183 00000BA5 FEC1                <1>     inc cl      ;Increment char count
   184 00000BA7 EBDB                <1>     jmp short .getChar    ;If not, get next char
   185                              <1> .exit:
   186 00000BA9 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   187 00000BAC 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   188 00000BB3 803E0D              <1>     cmp byte [rsi], CR  
   189                              <1>     return
    13                              <2> %%_ret:
    14 00000BB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> analyseCmdline:
   192                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   193                              <1> ; processes the command name into the FCB.  
   194 00000BB7 C605(97030000)00    <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   195                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   196 00000BBE 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   197 00000BC5 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   198 00000BC8 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   199 00000BCC 8A0539F4FFFF        <1>     mov al, byte [switchChar]
   200 00000BD2 F2AE                <1>     repne scasb                     ;Scan for the switch char
   201 00000BD4 7506                <1>     jne .noSwitchFnd
   202 00000BD6 F61575F4FFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   203                              <1> .noSwitchFnd:
   204 00000BDC E884380000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   205 00000BE1 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   206                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BE4 74(B6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   207 00000BE6 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   208                              <1> .plp:
   209 00000BE9 488D3D(67010000)    <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   210 00000BF0 B801290000          <1>     mov eax, 2901h
   211 00000BF5 CD21                <1>     int 21h
   212 00000BF7 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   213 00000BF9 0F8423010000        <1>     je .exitBadDrv
   214                              <1> .trailingDotLp:
   215                              <1> ;Reverse along trailing dots!
   216 00000BFF 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   217 00000C03 7505                <1>     jne .noTrailingDots
   218 00000C05 48FFCE              <1>     dec rsi
   219 00000C08 EBF5                <1>     jmp short .trailingDotLp
   220                              <1> .noTrailingDots:
   221 00000C0A 8A05FAF3FFFF        <1>     mov al, byte [pathSep]  
   222 00000C10 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   223 00000C12 7525                <1>     jne .notPs
   224 00000C14 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   225 00000C17 AC                  <1>     lodsb   ;Get this char
   226 00000C18 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   227 00000C1B 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   228 00000C1D 7217                <1>     jb .delimfnd    ;Also a delimiter
   229 00000C1F 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   230 00000C21 7413                <1>     je .delimfnd
   231 00000C23 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   232 00000C25 740F                <1>     je .delimfnd
   233 00000C27 3C2E                <1>     cmp al, byte "."
   234 00000C29 740B                <1>     je .delimfnd
   235 00000C2B 3C22                <1>     cmp al, byte '"'
   236 00000C2D 7407                <1>     je .delimfnd
   237 00000C2F E83F380000          <1>     call isALdelimiter  ;Is this a delim char?
   238 00000C34 75B3                <1>     jne .plp            ;If not, we loop again
   239                              <1> .delimfnd:
   240 00000C36 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   241                              <1> .notPs:
   242                              <1> ;Now we have reached the end of the command, rsi points to the first char
   243                              <1> ; after the command, whether a delimiter or not.
   244 00000C39 4889F1              <1>     mov rcx, rsi
   245 00000C3C 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   246 00000C3F 0F84D5000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   247 00000C45 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   248 00000C48 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
   249 00000C4F F3A4                <1>     rep movsb
   250 00000C51 30C0                <1>     xor al, al
   251 00000C53 AA                  <1>     stosb   ;Store a terminating null
   252 00000C54 4887DE              <1>     xchg rbx, rsi
   253                              <1> ;Now we build FCBs for the arguments!
   254 00000C57 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   255 00000C5E E8AE000000          <1>     call .skipAndCheckCR
   256 00000C63 745B                <1>     je .setupCmdVars
   257 00000C65 C605DFF3FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   258 00000C6C 4889F0              <1>     mov rax, rsi
   259 00000C6F 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   260 00000C72 8805D4F3FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   261 00000C78 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   262 00000C7C B801290000          <1>     mov eax, 2901h
   263 00000C81 CD21                <1>     int 21h
   264 00000C83 8805C4F3FFFF        <1>     mov byte [arg1FCBret], al
   265                              <1> .skipArg:
   266 00000C89 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   267 00000C8A 3C0D                <1>     cmp al, CR
   268 00000C8C 7432                <1>     je .setupCmdVars
   269 00000C8E E8E0370000          <1>     call isALdelimiter
   270 00000C93 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   271 00000C95 E877000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   272 00000C9A 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   273 00000C9C C605ABF3FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   274 00000CA3 4889F0              <1>     mov rax, rsi            
   275 00000CA6 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   276 00000CA9 8805A0F3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   277 00000CAF 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   278 00000CB3 B801290000          <1>     mov eax, 2901h
   279 00000CB8 CD21                <1>     int 21h
   280 00000CBA 880590F3FFFF        <1>     mov byte [arg2FCBret], al
   281                              <1> .setupCmdVars:
   282                              <1> ;Before returning, we copy the command name to cmdName 
   283 00000CC0 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
   284 00000CC7 E850380000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   285 00000CCC E86F370000          <1>     call strlen ;Get the length of the null terminated final path componant
   286 00000CD1 807F013A            <1>     cmp byte [rdi + 1], ":"
   287 00000CD5 7515                <1>     jne .noDrivePath
   288 00000CD7 8A052DF3FFFF        <1>     mov al, byte [pathSep]
   289 00000CDD 384702              <1>     cmp byte [rdi + 2], al
   290 00000CE0 740A                <1>     je .noDrivePath
   291                              <1>     ;Here if the filename is an FCB name A:12345678.9AB<NUL> (15 chars)
   292 00000CE2 81F90F000000        <1>     cmp ecx, 15
   293 00000CE8 7730                <1>     ja .exitBad
   294 00000CEA EB08                <1>     jmp short .proceedCp
   295                              <1> .noDrivePath:
   296                              <1> ;Normal paths come here
   297 00000CEC 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   298 00000CF2 7726                <1>     ja .exitBad     ;Return error
   299                              <1> .proceedCp:
   300 00000CF4 4889FE              <1>     mov rsi, rdi
   301 00000CF7 488D3D(97030000)    <1>     lea rdi, cmdName
   302 00000CFE FFC9                <1>     dec ecx ;Minus the terminating null
   303 00000D00 880F                <1>     mov byte [rdi], cl ;Store the length here
   304 00000D02 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   305                              <1> .cpCmdName:
   306 00000D05 AC                  <1>     lodsb
   307 00000D06 E83F370000          <1>     call ucChar ;Uppercase the char
   308 00000D0B AA                  <1>     stosb
   309 00000D0C FFC9                <1>     dec ecx
   310 00000D0E 75F5                <1>     jnz .cpCmdName
   311                              <1>     return
    13                              <2> %%_ret:
    14 00000D10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   312                              <1> .skipAndCheckCR:
   313                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   314 00000D11 E84F370000          <1>     call skipDelimiters ;Go to the next char in the input line
   315 00000D16 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   316                              <1>     return
    13                              <2> %%_ret:
    14 00000D19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> .exitBad:
   318 00000D1A C605(97030000)FF    <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   319                              <1>     return
    13                              <2> %%_ret:
    14 00000D21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> .exitBadDrv:
   321 00000D22 C605(97030000)FE    <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   322 00000D29 E8A70C0000          <1>     call badDriveError
   323                              <1>     return
    13                              <2> %%_ret:
    14 00000D2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> doCommandLine:
   326                              <1>     ;The following check accounts for the end of a piped command
   327 00000D2F 803D(97030000)00    <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   328 00000D36 0F846F010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   329 00000D3C 803D(97030000)FF    <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   330 00000D43 0F84C50C0000        <1>     je badCmdError
   331 00000D49 803D(97030000)FE    <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   332                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D50 74(2E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   333 00000D52 488D35(48030000)    <1>     lea rsi, cmdPathSpec
   334 00000D59 0FB71D(48030000)    <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   335 00000D60 80FF3A              <1>     cmp bh, ":"
   336 00000D63 7520                <1>     jne .noDriveSpecified
   337 00000D65 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   338 00000D67 E8DE360000          <1>     call ucChar     ;Uppercase al
   339 00000D6C 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   340                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   341 00000D6E 803D(97030000)02    <1>     cmp byte [cmdName], 2
   342 00000D75 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   343 00000D77 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   344 00000D79 E898360000          <1>     call setDrive
   345                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D7E 74(2E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   346 00000D80 E9500C0000          <1>     jmp badDriveError
   347                              <1> .noDriveSpecified:
   348                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   349 00000D85 488D1D(C6020000)    <1>     lea rbx, cmdBuffer       ;Take your buffer
   350 00000D8C 488D35(97030000)    <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   351 00000D93 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   352 00000D98 BAFFFF0000          <1>     mov edx, 0FFFFh
   353 00000D9D B5FF                <1>     mov ch, -1
   354 00000D9F CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   355 00000DA1 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   356 00000DA6 BAFFFF0000          <1>     mov edx, 0FFFFh
   357 00000DAB 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   358 00000DAD CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   359                              <1>             ;        al = 0  if the command should be executed as usual
   360 00000DAF 84C0                <1>     test al, al
   361 00000DB1 7444                <1>     jz .executeInternal
   362                              <1>     ;Here we execute externally and return to the prompt
   363                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   364 00000DB3 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   365 00000DBA 488D35(97030000)    <1>     lea rsi, cmdName        
   366 00000DC1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   367 00000DC6 BAFFFF0000          <1>     mov edx, 0FFFFh
   368 00000DCB B5FF                <1>     mov ch, -1
   369 00000DCD CD2F                <1>     int 2Fh
   370 00000DCF 803D(97030000)00    <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   371                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000DD6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000DD8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   372                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   373                              <1>     ; is an external command that is in the CD or in the PATH.
   374                              <1>     ;Should not be used for this purpose but it is here...
   375 00000DD9 E8CE050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   376 00000DDE 488D35(97030000)    <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   377 00000DE5 AC                  <1>     lodsb                   ;Get the name length
   378 00000DE6 0FB6C8              <1>     movzx ecx, al
   379 00000DE9 488D3D(48030000)    <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   380 00000DF0 F3A4                <1>     rep movsb   
   381 00000DF2 31C0                <1>     xor eax, eax
   382 00000DF4 AA                  <1>     stosb   ;Store null terminator
   383 00000DF5 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   384                              <1> .executeInternal:
   385 00000DF7 E8B0050000          <1>     call pullCommandline    ;Now pull the tail down
   386 00000DFC 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
   387 00000E03 E838360000          <1>     call strlen ;Get the length of the input command
   388 00000E08 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   389 00000E0A 380D(97030000)      <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   390 00000E10 0F856C260000        <1>     jne launchChild     ;If not, a path was specified, exit!
   391                              <1> .executeInternal2:
   392                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   393 00000E16 488D1D35F2FFFF      <1>     lea rbx, functionTable
   394                              <1> .nextEntry:
   395 00000E1D 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   396 00000E20 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   397 00000E23 0F8459260000        <1>     je launchChild      ;If so, check externally now
   398 00000E29 380D(97030000)      <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   399 00000E2F 7534                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   400                              <1>     ;Here they have the same length so lets see if the name is the same
   401 00000E31 56                  <1>     push rsi
   402                              <1>     ;ecx has the length to compare
   403 00000E32 51                  <1>     push rcx
   404 00000E33 488D7301            <1>     lea rsi, qword [rbx + 1]
   405 00000E37 488D3D(98030000)    <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   406 00000E3E F3A6                <1>     rep cmpsb   ;Check the strings are equal
   407 00000E40 59                  <1>     pop rcx
   408 00000E41 5E                  <1>     pop rsi
   409 00000E42 7521                <1>     jne .gotoNextEntry
   410                              <1>     ;Here it was found both strings are equal.
   411 00000E44 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   412 00000E49 480FB71F            <1>     movzx rbx, word [rdi]
   413 00000E4D 488D3DACF1FFFF      <1>     lea rdi, startLbl
   414 00000E54 4801FB              <1>     add rbx, rdi
   415 00000E57 FFD3                <1>     call rbx        ;Call the internal function!
   416                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   417                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   418                              <1> ;No need for the below because the retcode is 
   419                              <1> ; zeroed when we it from DOS.
   420                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   421                              <1> ;    mov byte [returnCode], 0 
   422                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   423                              <1>     ;jmp short appRet    ;Now once we are done, goto appRet!
   424                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   425                              <1> 
   426                              <1> ;This new exit preserves the retcode, and now allows for internal
   427                              <1> ; commands to implement retcodes which we don't use for now.
   428                              <1> ;I doubt we need to reset the stackptr as to get here, the stack has to
   429                              <1> ; have been balanced which means when we pop, we go back to okRet anyway...
   430 00000E59 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
   431 00000E60 E964FCFFFF          <1>     jmp commandMain.okRet   
   432                              <1> .gotoNextEntry:
   433 00000E65 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   434 00000E6C 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   435 00000E6F EBAC                <1>     jmp short .nextEntry
   436                              <1> 
   437                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   438                              <1> ;Can depend on RSP here because DOS stack bug fixed.
   439 00000E71 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr anyway.
   440                              <1> ;Start by resetting our PSP vectors (and IVT copies) in the event 
   441                              <1> ; they got mangled.
   442 00000E78 E834390000          <1>     call resetIDTentries
   443 00000E7D E803390000          <1>     call resetNation    ;Reset switchchar and nation if exernal cmd fired!
   444 00000E82 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, sets to 0 for internal commands
   445 00000E87 CD21                <1>     int 21h
   446 00000E89 668905(00000000)    <1>     mov word [returnCode], ax
   447 00000E90 84E4                <1>     test ah, ah     ;Regular exit
   448 00000E92 0F8431FCFFFF        <1>     jz commandMain.okRet
   449 00000E98 80FC03              <1>     cmp ah, 3       ;TSR exit
   450 00000E9B 0F8428FCFFFF        <1>     je commandMain.okRet
   451                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   452                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   453                              <1>     ; as we always close the COMMAND.COM instance at this point.
   454 00000EA1 E83F000000          <1>     call cleanupRedirs
   455 00000EA6 E954FBFFFF          <1>     jmp commandMain
   456                              <1> 
   457                              <1> hardSynErr:
   458                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   459 00000EAB E8010B0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   460 00000EB0 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   461                              <1> redirFailure:
   462 00000EB5 488D15D9F8FFFF      <1>     lea rdx, redirErrMsg
   463 00000EBC B913000000          <1>     mov ecx, redirErrMsgL
   464 00000EC1 EB0C                <1>     jmp short redirPipeFailureCommon
   465                              <1> pipeFailure:
   466 00000EC3 488D15B4F8FFFF      <1>     lea rdx, pipeErrMsg
   467 00000ECA B917000000          <1>     mov ecx, pipeErrMsgL
   468                              <1> redirPipeFailureCommon:
   469                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   470                              <1> ;This routine tries to close whatever handles are not -1 and delete
   471                              <1> ; pipe files if the pipe count is not 0.
   472                              <1> ;It resets all variables and jumps to reset the stack!
   473 00000ECF B800400000          <1>     mov eax, 4000h  ;Write handle
   474 00000ED4 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   475 00000ED9 CD21                <1>     int 21h
   476                              <1> .noPrint:
   477 00000EDB E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   478 00000EE0 E91AFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   479                              <1> 
   480                              <1> cleanupRedirs:
   481                              <1> ;Cleans all active redirections, returning to the saved state.
   482                              <1> ;Deletes any pipe files, leaves any redir out files.
   483                              <1> ;Resets the internal vars
   484 00000EE5 0FB7055BF1FFFF      <1>     movzx eax, word [redirSTDIN]
   485 00000EEC 0FB7154EF1FFFF      <1>     movzx edx, word [pipeSTDIN]
   486 00000EF3 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   487 00000EF5 E8CC000000          <1>     call .closeAndReplace
   488 00000EFA 0FB70548F1FFFF      <1>     movzx eax, word [redirSTDOUT]
   489 00000F01 0FB7153BF1FFFF      <1>     movzx edx, word [pipeSTDOUT]
   490 00000F08 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   491 00000F0A E8B7000000          <1>     call .closeAndReplace
   492 00000F0F 66C7052DF1FFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   493 00000F18 0FB71D28F1FFFF      <1>     movzx ebx, word [redirSTDIN]
   494 00000F1F E892000000          <1>     call .closeHandle
   495                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   496 00000F24 66C7051AF1FFFFFFFF  <1>     mov word [redirSTDIN], -1
   497 00000F2D 0FB71D15F1FFFF      <1>     movzx ebx, word [redirSTDOUT]
   498 00000F34 E87D000000          <1>     call .closeHandle
   499 00000F39 66C70507F1FFFFFFFF  <1>     mov word [redirSTDOUT], -1
   500 00000F42 0FB71DF8F0FFFF      <1>     movzx ebx, word [pipeSTDIN]
   501 00000F49 E868000000          <1>     call .closeHandle
   502 00000F4E 66C705EAF0FFFFFFFF  <1>     mov word [pipeSTDIN], -1
   503 00000F57 0FB71DE5F0FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   504 00000F5E E853000000          <1>     call .closeHandle
   505 00000F63 66C705D7F0FFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   506 00000F6C C605CDF0FFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   507 00000F73 488D15(43040000)    <1>     lea rdx, qword [pipe1Filespec]
   508 00000F7A 803A00              <1>     cmp byte [rdx], 0
   509 00000F7D 7407                <1>     jz .checkOld
   510 00000F7F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   511 00000F84 CD21                <1>     int 21h
   512                              <1> .checkOld:
   513 00000F86 488D15(92040000)    <1>     lea rdx, qword [pipe2Filespec]
   514 00000F8D 803A00              <1>     cmp byte [rdx],0
   515 00000F90 7407                <1>     jz .pipeNamesComplete
   516 00000F92 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   517 00000F97 CD21                <1>     int 21h
   518                              <1> .pipeNamesComplete:
   519 00000F99 31C0                <1>     xor eax, eax
   520                              <1>     ;Invalidate the pointers and the paths too
   521 00000F9B 488905(E1040000)    <1>     mov qword [newPipe], rax
   522 00000FA2 488905(E9040000)    <1>     mov qword [oldPipe], rax
   523 00000FA9 8905(43040000)      <1>     mov dword [pipe1Filespec], eax
   524 00000FAF 8905(92040000)      <1>     mov dword [pipe2Filespec], eax
   525                              <1>     return
    13                              <2> %%_ret:
    14 00000FB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> .closeHandle:
   528 00000FB6 81FBFFFFFFFF        <1>     cmp ebx, -1
   529                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FBC 74(B5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   530 00000FBE B8003E0000          <1>     mov eax, 3E00h
   531 00000FC3 CD21                <1>     int 21h
   532                              <1>     return
    13                              <2> %%_ret:
    14 00000FC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> .closeAndReplace:
   534                              <1> ;Input: ax = one possible handle, dx = second possible handle
   535                              <1> ;       bx = handle to close and copy ax/dx into
   536                              <1> ;Output: Handle intervened on. bx preserved
   537 00000FC6 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   538 00000FC9 09D0                <1>     or eax, edx     ;Form packed
   539 00000FCB 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   540                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FD0 74(C5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   541 00000FD2 E8DFFFFFFF          <1>     call .closeHandle
   542 00000FD7 663DFFFF            <1>     cmp ax, -1      
   543 00000FDB 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   544 00000FDF 53                  <1>     push rbx
   545 00000FE0 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   546 00000FE3 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   547 00000FE8 CD21                <1>     int 21h
   548 00000FEA 5B                  <1>     pop rbx
   549                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FEB 73(C5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   550                              <1>     ;Else we now try to force default device to open!
   551 00000FED E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   552 00000FF2 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   553 00000FF7 488D15E4F7FFFF      <1>     lea rdx, devName
   554 00000FFE CD21                <1>     int 21h
   555                              <1>     return
    13                              <2> %%_ret:
    14 00001000 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   556                              <1> 
   557                              <1> cleanRedirOut:
   558                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   559                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   560                              <1> ; particular cases like launching bat files which needs special handling in 
   561                              <1> ; that all redirs need to be completely removed.
   562 00001001 66813D3FF0FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   563                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000100A 74(00)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564 0000100C 0FB71D36F0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   565 00001013 B901000000          <1>     mov ecx, 1      ;STDOUT
   566 00001018 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   567 0000101D CD21                <1>     int 21h
   568 0000101F 0FB71D23F0FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   569 00001026 B8003E0000          <1>     mov eax, 3E00h  
   570 0000102B CD21                <1>     int 21h
   571 0000102D 66C70513F0FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   572 00001036 488D15(F4030000)    <1>     lea rdx, rdrOutFilespec
   573 0000103D B800410000          <1>     mov eax, 4100h      ;Del stdout file
   574 00001042 CD21                <1>     int 21h
   575 00001044 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   576                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   577                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   578                              <1>     return
    13                              <2> %%_ret:
    14 00001047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> advanceRedir:
   581                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   582                              <1> ;Close stdin redir then stdout redir. 
   583 00001048 F605F6EFFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   584 0000104F 0F8585000000        <1>     jnz .redirIn
   585 00001055 F605E4EFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   586 0000105C 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   587 00001062 0FBF05D8EFFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   588 00001069 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   589 0000106E 0F84EB000000        <1>     je .pipeOut              
   590                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   591 00001074 0FB71DC6EFFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   592 0000107B 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   593 0000107D B800460000          <1>     mov eax, 4600h
   594 00001082 CD21                <1>     int 21h
   595 00001084 0F8239FEFFFF        <1>     jc pipeFailure
   596 0000108A B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   597 0000108F CD21                <1>     int 21h
   598 00001091 0F822CFEFFFF        <1>     jc pipeFailure
   599 00001097 488B15(E9040000)    <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   600 0000109E B800410000          <1>     mov eax, 4100h  ;Delete the file!
   601 000010A3 CD21                <1>     int 21h
   602 000010A5 0F8218FEFFFF        <1>     jc pipeFailure
   603 000010AB C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   604 000010AE 66C7058AEFFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   605                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   606                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   607                              <1>     ;Else exit!
   608 000010B7 0FBF0585EFFFFF      <1>     movsx eax, word [pipeSTDOUT]
   609 000010BE 3DFFFFFFFF          <1>     cmp eax, -1
   610 000010C3 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   611 000010C9 C60570EFFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   612 000010D0 F6056FEFFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   613 000010D7 753D                <1>     jnz .redirOut               ;Go for it if so!
   614                              <1>     return
    13                              <2> %%_ret:
    14 000010D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .redirIn:
   616                              <1> ;Here we clean redirIn
   617 000010DA 0FB71D66EFFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   618 000010E1 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   619 000010E3 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   620 000010E8 CD21                <1>     int 21h
   621 000010EA 0F82C5FDFFFF        <1>     jc redirFailure
   622 000010F0 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   623 000010F5 CD21                <1>     int 21h
   624 000010F7 0F82B8FDFFFF        <1>     jc redirFailure
   625 000010FD 66C70541EFFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   626 00001106 C60538EFFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   627 0000110D F6052CEFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   628 00001114 7549                <1>     jnz .pipeOut
   629                              <1> .redirOut:
   630 00001116 F60529EFFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   631                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000111D 74(D9)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   632                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   633 0000111F F6051AEFFFFFFF      <1>     test byte [pipeFlag], -1
   634 00001126 7537                <1>     jnz short .pipeOut
   635 00001128 0FB71D1AEFFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   636 0000112F B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   637 00001134 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   638 00001139 CD21                <1>     int 21h
   639 0000113B 0F8274FDFFFF        <1>     jc redirFailure
   640 00001141 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   641 00001146 CD21                <1>     int 21h
   642 00001148 0F8267FDFFFF        <1>     jc redirFailure
   643 0000114E 66C705F2EEFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   644 00001157 C605E8EEFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   645                              <1>     return
    13                              <2> %%_ret:
    14 0000115E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> .pipeOut:
   647                              <1> ;Duplicate STDIN to save across pipe
   648 0000115F 0FBF05DDEEFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   649 00001166 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   650                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000116B 74(5E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651 0000116D B800450000          <1>     mov eax, 4500h
   652 00001172 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   653 00001174 CD21                <1>     int 21h
   654 00001176 0F8247FDFFFF        <1>     jc pipeFailure
   655 0000117C 668905BEEEFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   656                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   657 00001183 B800460000          <1>     mov eax, 4600h
   658 00001188 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   659 0000118A FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   660 0000118C CD21                <1>     int 21h
   661 0000118E 0F822FFDFFFF        <1>     jc pipeFailure
   662                              <1> ;Now return the original stdout to stdout
   663 00001194 89D9                <1>     mov ecx, ebx
   664 00001196 0FB71DA6EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   665 0000119D B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   666 000011A2 CD21                <1>     int 21h
   667 000011A4 0F8219FDFFFF        <1>     jc pipeFailure
   668                              <1> ;Now close the DUP'ed STDOUT
   669 000011AA B8003E0000          <1>     mov eax, 3E00h
   670 000011AF CD21                <1>     int 21h
   671 000011B1 0F820CFDFFFF        <1>     jc pipeFailure
   672                              <1> ;Finally unwind STDIN to the beginning of the file
   673 000011B7 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   674 000011BC 31DB                <1>     xor ebx, ebx    ;STDIN handle
   675 000011BE 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   676 000011C0 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   677 000011C2 CD21                <1>     int 21h
   678 000011C4 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   679 000011CA 488B15(E1040000)    <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   680 000011D1 488915(E9040000)    <1>     mov qword [oldPipe], rdx
   681 000011D8 66C70562EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   682                              <1>     return
    13                              <2> %%_ret:
    14 000011E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   683                              <1> 
   684                              <1> 
   685                              <1> peelRedir:
   686                              <1> ;Checks and sets up redir as appropriate
   687                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   688                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   689                              <1> ;Output: ZF=NZ => No redir
   690                              <1> ;        ZF=ZY => Redir
   691                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   692                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   693 000011E2 51                  <1>     push rcx
   694 000011E3 57                  <1>     push rdi
   695 000011E4 3C3C                <1>     cmp al, "<"
   696 000011E6 740C                <1>     je .inputRedir
   697 000011E8 3C3E                <1>     cmp al, ">"
   698 000011EA 7427                <1>     je .outputRedir
   699 000011EC 3C7C                <1>     cmp al, "|"
   700 000011EE 7441                <1>     je .pipeSetup
   701 000011F0 F8                  <1>     clc
   702                              <1> .redirExit:
   703 000011F1 5F                  <1>     pop rdi
   704 000011F2 59                  <1>     pop rcx
   705                              <1>     return
    13                              <2> %%_ret:
    14 000011F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   706                              <1> .inputRedir:
   707 000011F4 C6054AEEFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   708 000011FB 488D3D(A5030000)    <1>     lea rdi, rdrInFilespec
   709                              <1> .redirCommon:
   710 00001202 E85E320000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   711 00001207 E88A330000          <1>     call cpDelimPathToBufz
   712 0000120C 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   713 0000120F 30C0                <1>     xor al, al  ;Clear the ZF flag
   714 00001211 EBDE                <1>     jmp short .redirExit
   715                              <1> .outputRedir:
   716 00001213 C6052CEEFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   717 0000121A 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   718 0000121D 7509                <1>     jne .notDouble
   719 0000121F FE0521EEFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   720 00001225 48FFC6              <1>     inc rsi ;Go past it too
   721                              <1> .notDouble:
   722 00001228 488D3D(F4030000)    <1>     lea rdi, rdrOutFilespec
   723 0000122F EBD1                <1>     jmp short .redirCommon
   724                              <1> .pipeSetup:
   725 00001231 56                  <1>     push rsi    ;Save rsi pointing to char past |
   726 00001232 E82E320000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   727 00001237 803E7C              <1>     cmp byte [rsi], "|" 
   728 0000123A 7403                <1>     je .badFnd
   729 0000123C 803E0D              <1>     cmp byte [rsi], CR
   730                              <1> .badFnd:
   731 0000123F 5E                  <1>     pop rsi
   732 00001240 F9                  <1>     stc
   733 00001241 EBAE                <1>     jmp short .redirExit
   734                              <1> 
   735                              <1> setupRedirandPipes:
   736                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   737                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   738 00001243 0F8484000000        <1>     jz .redirIn
   739 00001249 488D15(43040000)    <1>     lea rdx, pipe1Filespec
   740 00001250 803A00              <1>     cmp byte [rdx], 0
   741 00001253 7410                <1>     jz .pathFound
   742 00001255 488D15(92040000)    <1>     lea rdx, pipe2Filespec
   743 0000125C 803A00              <1>     cmp byte [rdx], 0
   744 0000125F 0F855EFCFFFF        <1>     jnz pipeFailure
   745                              <1> .pathFound:
   746 00001265 488915(E1040000)    <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   747 0000126C B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   748 00001271 BB01000000          <1>     mov ebx, 1
   749 00001276 CD21                <1>     int 21h
   750 00001278 0F8245FCFFFF        <1>     jc pipeFailure
   751 0000127E 668905BEEDFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   752 00001285 E898310000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   753 0000128A 0441                <1>     add al, "A"
   754 0000128C BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   755 00001291 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   756 00001293 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   757 00001295 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   758 00001297 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   759 0000129C CD21                <1>     int 21h
   760 0000129E 0F821FFCFFFF        <1>     jc pipeFailure
   761                              <1>     ;AX has the handle for this file now, this will become STDOUT
   762                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   763 000012A4 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   764 000012A7 B901000000          <1>     mov ecx, 1
   765 000012AC B800460000          <1>     mov eax, 4600h
   766 000012B1 CD21                <1>     int 21h
   767 000012B3 0F820AFCFFFF        <1>     jc pipeFailure
   768 000012B9 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   769 000012BE CD21                <1>     int 21h
   770 000012C0 0F82FDFBFFFF        <1>     jc pipeFailure
   771 000012C6 C60573EDFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   772                              <1> .redirIn:
   773                              <1> ;Now check if any other redir needs to be setup
   774                              <1> ;Checks and sets up redir as appropriate.
   775                              <1>     ;Setup the redir here for STDIN
   776 000012CD F60571EDFFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   777 000012D4 7449                <1>     jz .redirOut
   778 000012D6 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   779 000012D8 B800450000          <1>     mov eax, 4500h
   780 000012DD CD21                <1>     int 21h
   781 000012DF 0F82D0FBFFFF        <1>     jc redirFailure
   782 000012E5 6689055BEDFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   783 000012EC 488D15(A5030000)    <1>     lea rdx, rdrInFilespec
   784 000012F3 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   785 000012F8 CD21                <1>     int 21h
   786 000012FA 0F82B5FBFFFF        <1>     jc redirFailure
   787 00001300 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   788 00001302 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   789 00001305 B800460000          <1>     mov eax, 4600h
   790 0000130A CD21                <1>     int 21h
   791 0000130C 0F82A3FBFFFF        <1>     jc redirFailure
   792 00001312 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   793 00001317 CD21                <1>     int 21h
   794 00001319 0F8296FBFFFF        <1>     jc redirFailure
   795                              <1> .redirOut:
   796 0000131F F60520EDFFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   797                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001326 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001328 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   798 00001329 803D13EDFFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   799                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001330 75(28)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   800                              <1>     ;Else setup the redir here for STDOUT
   801 00001332 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   802 00001337 B800450000          <1>     mov eax, 4500h
   803 0000133C CD21                <1>     int 21h
   804 0000133E 0F8271FBFFFF        <1>     jc redirFailure
   805 00001344 668905FEECFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   806 0000134B 488D15(F4030000)    <1>     lea rdx, rdrOutFilespec
   807 00001352 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   808 00001357 CD21                <1>     int 21h
   809 00001359 730F                <1>     jnc .fileExists
   810 0000135B B8003C0000          <1>     mov eax, 3C00h
   811 00001360 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   812 00001362 CD21                <1>     int 21h
   813 00001364 0F824BFBFFFF        <1>     jc redirFailure
   814                              <1> .fileExists:
   815 0000136A B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   816 0000136F 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   817 00001372 B800460000          <1>     mov eax, 4600h  ;DUP2
   818 00001377 CD21                <1>     int 21h
   819 00001379 0F8236FBFFFF        <1>     jc redirFailure
   820 0000137F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   821 00001384 CD21                <1>     int 21h
   822 00001386 0F8229FBFFFF        <1>     jc redirFailure
   823 0000138C 803DB3ECFFFF01      <1>     cmp byte [redirOut], 1
   824                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001393 74(28)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   825                              <1>     ;Here we move the file pointer to the end of the file
   826 00001395 31D2                <1>     xor edx, edx    ;Low order 32 bits
   827 00001397 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   828 00001399 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   829 0000139E B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   830 000013A3 CD21                <1>     int 21h
   831 000013A5 0F820AFBFFFF        <1>     jc redirFailure
   832                              <1>     return
    13                              <2> %%_ret:
    14 000013AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> 
   835                              <1> pullCommandline:
   836                              <1> ;This command pulls the command tail down, removing the whole launch command
   837 000013AC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   838                              <1> ;Skip leading separators
   839                              <1> .pctSkipLeading:
   840 000013B3 AC                  <1>     lodsb   ;Get first char
   841 000013B4 E8BA300000          <1>     call isALdelimiter
   842 000013B9 74F8                <1>     je .pctSkipLeading
   843 000013BB 48FFCE              <1>     dec rsi
   844                              <1>     ;rsi points to the start of the command
   845 000013BE 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
   846 000013C5 E876300000          <1>     call strlen ;Get the length of the command
   847 000013CA FFC9                <1>     dec ecx ;Minus the terminating null
   848 000013CC 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   849 000013CF 280D77ECFFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   850 000013D5 280D74ECFFFF        <1>     sub byte [arg2Off], cl
   851 000013DB 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   852 000013DD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   853                              <1> .pctPullChars:
   854 000013E4 AC                  <1>     lodsb
   855 000013E5 AA                  <1>     stosb
   856 000013E6 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   857 000013E8 7404                <1>     je .pctExit
   858 000013EA FFC1                <1>     inc ecx     ;Increment count
   859 000013EC EBF6                <1>     jmp short .pctPullChars 
   860                              <1> .pctExit:
   861 000013EE 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   862                              <1>     return
    13                              <2> %%_ret:
    14 000013F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   863                              <1> 
   864                              <1> getSetMainState:
   865                              <1> ;Resets the buffers lengths, sets stringops and gets the pPSP in r8
   866 000013F6 FC                  <1>     cld ;Ensure stringops are done the right way
   867 000013F7 C605(C2010000)80    <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   868 000013FE C605(44020000)80    <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   869 00001405 C605(C6020000)80    <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   870 0000140C 4C8B05EDEBFFFF      <1>     mov r8, qword [pPSP]              ;Reset the pPSP
   871                              <1>     return
    13                              <2> %%_ret:
    14 00001413 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> 
   873                              <1> 
   874                              <1> int2Eh: 
   875                              <1> ;Very sucky interface for passing command lines to be processed by the 
   876                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   877                              <1> ; more reliable with a critical section flag. Currently, if we are already
   878                              <1> ; processing an Int 2Eh request, this will not process the command.
   879                              <1> ;
   880                              <1> ;Need to add further safeguards for when pipes are also setup and
   881                              <1> ; batchmode is on!
   882                              <1> ;
   883                              <1> ;Input: rsi points to the count byte of a command line.
   884                              <1> ;       Max number of chars is 128 (127 + count byte)
   885                              <1> ;Output:
   886                              <1> ;       CF=NC: Command was processed. ax = Retcode
   887                              <1> ;       CF=CY: Command was not processed.
   888 00001414 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   889 00001419 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   890 00001420 0F85A5000000        <1>     jnz int2EcheckReentry 
   891                              <1> .multiJoin:
   892 00001426 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the bits! Gets the lock!
   893 0000142D 488925(0A000000)    <1>     mov qword [int2Ersp], rsp       ;Save the far stack pointer 
   894 00001434 B8002F0000          <1>     mov eax, 2F00h  ;Get the current DTA in rbx
   895 00001439 CD21                <1>     int 21h
   896 0000143B 48891D(12000000)    <1>     mov qword [int2Edta], rbx       ;We set the dta in the main loop later
   897 00001442 488D25(40060000)    <1>     lea rsp, stackTop               ;Set to use the internal stack
   898 00001449 B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rdx
   899 0000144E CD21                <1>     int 21h
   900 00001450 48891D(02000000)    <1>     mov qword [int2Epsp], rbx
   901 00001457 52                  <1>     push rdx    ;Save on the stack
   902 00001458 488B1DA1EBFFFF      <1>     mov rbx, qword [pPSP] ;Get the psp for this COMMAND.COM
   903 0000145F B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   904 00001464 CD21                <1>     int 21h
   905 00001466 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   906 00001469 4989D9              <1>     mov r9, rbx
   907 0000146C 488D3D(C3010000)    <1>     lea rdi, inBuffer + 1
   908 00001473 B910000000          <1>     mov ecx, 10h    ;80h/8
   909 00001478 FC                  <1>     cld
   910 00001479 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   911 0000147C E875FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   912 00001481 803D(C3010000)00    <1>     cmp byte [inBuffer + 1], 0
   913 00001488 E8F8320000          <1>     call resetNation        ;Now ensure internationalisation is up to date
   914 0000148D 0F85DDF5FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   915                              <1> int2ERet:
   916 00001493 E8FF2F0000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   917 00001498 488B25(0A000000)    <1>     mov rsp, qword [int2Ersp]
   918 0000149F 488B1D(02000000)    <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   919 000014A6 B800500000          <1>     mov eax, 5000h  ;Set Current PSP
   920 000014AB CD21                <1>     int 21h
   921 000014AD 488B15(12000000)    <1>     mov rdx, qword [int2Edta]
   922 000014B4 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA back to where it was upon return
   923 000014B9 CD21                <1>     int 21h
   924 000014BB 0FB705(00000000)    <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   925 000014C2 8025(1A000000)FB    <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   926 000014C9 48CF                <1>     iretq
   927                              <1> 
   928                              <1> int2EcheckReentry:
   929                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   930                              <1> ; else, return with CF=CY.
   931 000014CB B800520000          <1>     mov eax, 5200h  ;Get sysvars
   932 000014D0 CD21                <1>     int 21h
   933 000014D2 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   934 000014D6 7512                <1>     jnz short .multifnd
   935 000014D8 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   936 000014DD CD2F                <1>     int 2Fh
   937 000014DF 84C0                <1>     test al, al ;This must still be zero, else something installed
   938 000014E1 7507                <1>     jnz .multifnd
   939 000014E3 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   940 000014E8 48CF                <1>     iretq   
   941                              <1> .multifnd:
   942                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   943 000014EA F390                <1>     pause
   944 000014EC F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   945 000014F3 75F5                <1>     jnz .multifnd
   946 000014F5 E92CFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    20                                  %include "./src/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Start by creating the FQPath name and building a command line
     5                              <1> ; where the arguments are CR terminated.
     6                              <1> ;Then work out how much memory to allocate and allocate it.
     7                              <1> ;Start by saving the command line
     8 000014FA 488D35(C2010000)    <1>     lea rsi, inBuffer
     9 00001501 488D3D(73000000)    <1>     lea rdi, batCmdline
    10 00001508 B982000000          <1>     mov ecx, cmdBufferL
    11 0000150D F3A4                <1>     rep movsb
    12                              <1> ;Now check if we are executing AUTOEXEC.BAT. If so, 
    13                              <1> ; we suppress F3 recalling of the command
    14 0000150F 488D35D8F2FFFF      <1>     lea rsi, autoSpec + 3   ;Just check the name
    15 00001516 488D3D(68010000)    <1>     lea rdi, cmdFcb + fcb.filename
    16 0000151D B908000000          <1>     mov ecx, 8  ;Only check filename as the extension here must be BAT
    17 00001522 F3A6                <1>     repe cmpsb
    18 00001524 7507                <1>     jne .notAutoexec
    19 00001526 C605(74000000)00    <1>     mov byte [batCmdline + 1], 0    ;Set the count byte to 0
    20                              <1> .notAutoexec:
    21 0000152D 488D35(48030000)    <1>     lea rsi, cmdPathSpec    ;Path here is null terminated.
    22 00001534 488D3D(23000000)    <1>     lea rdi, batFile
    23 0000153B 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    24 0000153E 80FC3A              <1>     cmp ah, ":"
    25 00001541 7472                <1>     je .bbdrvGiven
    26 00001543 3A05C1EAFFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    27 00001549 745D                <1>     je .bbCDrvAbs
    28                              <1> ;Current drive relative
    29 0000154B E8D22E0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    30 00001550 0441                <1>     add al, "A"
    31 00001552 B43A                <1>     mov ah, ":"
    32 00001554 66AB                <1>     stosw   ;Store these two chars, adv rdi
    33                              <1> .bbRelPath:
    34 00001556 8A05AEEAFFFF        <1>     mov al, byte [pathSep]  
    35 0000155C AA                  <1>     stosb   ;Store the pathsep
    36 0000155D 8A05(23000000)      <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    37 00001563 E8E22E0000          <1>     call ucChar             ;UC it
    38 00001568 8805(23000000)      <1>     mov byte [batFile], al  ;and overwrite it :)
    39 0000156E 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    40 00001570 88C2                <1>     mov dl, al
    41 00001572 56                  <1>     push rsi        ;Save remaining char source
    42 00001573 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    43 00001576 B800470000          <1>     mov eax, 4700h  ;Get Current Directory (null terminated)
    44 0000157B CD21                <1>     int 21h
    45 0000157D 5E                  <1>     pop rsi
    46 0000157E 7316                <1>     jnc .bbRelPathOk
    47 00001580 488D15E8EBFFFF      <1>     lea rdx, badBat
    48 00001587 E88E2C0000          <1>     call printString
    49 0000158C E838030000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    50 00001591 E969F4FFFF          <1>     jmp commandMain     ;And start again :)   
    51                              <1> .bbRelPathOk:
    52                              <1> ;Now move rdi to the terminating null   
    53 00001596 31C0                <1>     xor eax, eax
    54 00001598 31C9                <1>     xor ecx, ecx
    55 0000159A F2AE                <1>     repne scasb ;Find the terminating null
    56 0000159C 48FFCF              <1>     dec rdi ;Now point to the terminating null
    57 0000159F 8A0565EAFFFF        <1>     mov al, byte [pathSep]
    58 000015A5 AA                  <1>     stosb   ;Store this pathsep over the original null
    59                              <1>     ;Now we are ready to copy the command line passed to us by the user
    60                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    61 000015A6 EB1B                <1>     jmp short .bbCpName
    62                              <1> .bbCDrvAbs:
    63                              <1> ;Current drive absolute. Get current drive into buffer
    64 000015A8 E8752E0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    65 000015AD 0441                <1>     add al, "A"
    66 000015AF B43A                <1>     mov ah, ":"
    67 000015B1 66AB                <1>     stosw   ;Store these two chars
    68                              <1>     ;Now we are ready to copy the command line passed to us by the user
    69                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    70 000015B3 EB0E                <1>     jmp short .bbCpName
    71                              <1> .bbdrvGiven:
    72                              <1> ;Drive given X:
    73 000015B5 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
    74 000015B7 AC                  <1>     lodsb
    75 000015B8 48FFCE              <1>     dec rsi ;Get the char and point back to it
    76 000015BB 3A0549EAFFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
    77 000015C1 7593                <1>     jne .bbRelPath
    78                              <1> .bbCpName:
    79 000015C3 E85F2E0000          <1>     call strcpy ;Copy the remaining portion
    80 000015C8 488D35(23000000)    <1>     lea rsi, batFile
    81 000015CF E8822E0000          <1>     call normalisePath  ;Normalise the path :)
    82                              <1> ;Now batFile has the FQpathname, construct the new CR delimited command line.
    83 000015D4 488D35(C8020000)    <1>     lea rsi, cmdBuffer + 2
    84 000015DB 488D3D(C7020000)    <1>     lea rdi, cmdBuffer + 1  ;Overwrite count byte as we will null terminate
    85                              <1> .copyCmdline:
    86 000015E2 E87E2E0000          <1>     call skipDelimiters ;Find start of argument
    87                              <1> .cclp:
    88 000015E7 AC                  <1>     lodsb
    89 000015E8 E8862E0000          <1>     call isALdelimiter  ;If we hit delimiter, replace with CR, goto next arg
    90 000015ED 7505                <1>     jne .ccstore
    91 000015EF B00D                <1>     mov al, CR  
    92 000015F1 AA                  <1>     stosb
    93 000015F2 EBEE                <1>     jmp short .copyCmdline
    94                              <1> .ccstore:
    95 000015F4 AA                  <1>     stosb   
    96 000015F5 3C0D                <1>     cmp al, CR  ;Did we just store a CR
    97 000015F7 75EE                <1>     jne .cclp   ;Keep getting chars if so
    98 000015F9 31C0                <1>     xor eax, eax    ;Else store a terminating null now
    99 000015FB AA                  <1>     stosb
   100 000015FC 488D3D(C7020000)    <1>     lea rdi, cmdBuffer + 1    ;Get back the ptr to the head of the new string
   101 00001603 E8382E0000          <1>     call strlen     ;Get the new string length in ecx
   102 00001608 89CB                <1>     mov ebx, ecx    ;Save len in eax (include null)
   103 0000160A 488D3D(23000000)    <1>     lea rdi, batFile
   104 00001611 E82A2E0000          <1>     call strlen     ;Get the filename len in ecx
   105 00001616 01CB                <1>     add ebx, ecx
   106 00001618 81C32F000000        <1>     add ebx, batBlockHdr_size   ;Get the size to allocate for block
   107 0000161E 89D9                <1>     mov ecx, ebx    ;Save the size in bytes in ecx for the cleaning below
   108 00001620 81C30F000000        <1>     add ebx, 0Fh    ;Round up to nearest paragraph!
   109 00001626 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   110 00001629 B800480000          <1>     mov eax, 4800h
   111 0000162E CD21                <1>     int 21h
   112 00001630 730A                <1>     jnc .bbAlloced
   113 00001632 E871030000          <1>     call badNoMemError  ;Print not enough mem error
   114 00001637 E99FF8FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
   115                              <1> .bbAlloced:
   116                              <1> ;Now init the batblock with all the data we need
   117 0000163C 488905(1B000000)    <1>     mov qword [bbPtr], rax  ;Save the ptr here!
   118 00001643 4889C3              <1>     mov rbx, rax
   119 00001646 4889DF              <1>     mov rdi, rbx
   120 00001649 31C0                <1>     xor eax, eax
   121 0000164B F3AA                <1>     rep stosb   ;Clean the block with nulls
   122 0000164D 4889DF              <1>     mov rdi, rbx            ;Point back to the head of the block
   123 00001650 8A05B7E9FFFF        <1>     mov al, byte [echoFlg]
   124 00001656 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
   125 00001659 B8FFFFFFFF          <1>     mov eax, -1
   126 0000165E B905000000          <1>     mov ecx, 5
   127 00001663 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
   128 00001667 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine    
   129 00001669 488D35(23000000)    <1>     lea rsi, batFile
   130 00001670 E8B22D0000          <1>     call strcpy ;Copy the string and the terminating null
   131 00001675 488D35(C7020000)    <1>     lea rsi, cmdBuffer + 1
   132 0000167C 57                  <1>     push rdi    ;Save the ptr to where we will store the cmdline
   133 0000167D E8A52D0000          <1>     call strcpy ;Copy the command tail and the terminating null
   134 00001682 5F                  <1>     pop rdi     ;Get the pointer to the copied cmdline in rdi
   135 00001683 31F6                <1>     xor esi, esi    ;Use esi as argument counter
   136 00001685 31C9                <1>     xor ecx, ecx
   137 00001687 FFC9                <1>     dec ecx ;Init ecx to large number for repne below (stupid hack will work)
   138                              <1> .bbFndLp:
   139 00001689 803F00              <1>     cmp byte [rdi], 0   ;Is this the end of the cmdline?
   140 0000168C 741B                <1>     je .bbArgsDone      
   141                              <1> ;Else add the entry to the table! rbx -> batBlock
   142 0000168E 4889F8              <1>     mov rax, rdi
   143 00001691 4829D8              <1>     sub rax, rbx    ;Now get distance from head of batBlock to this arg in ax
   144 00001694 668944731B          <1>     mov word [rbx + 2*rsi + batBlockHdr.wArgs], ax    ;and store it!
   145 00001699 FFC6                <1>     inc esi
   146 0000169B 81FE0A000000        <1>     cmp esi, 10         ;Did we just process %9?
   147 000016A1 7406                <1>     je .bbArgsDone
   148 000016A3 B00D                <1>     mov al, CR  ;Scan for the next CR and move rdi past it!
   149 000016A5 F2AE                <1>     repne scasb
   150 000016A7 EBE0                <1>     jmp short .bbFndLp   ;If not end of cmdline, see if next char delim
   151                              <1> .bbArgsDone:
   152                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   153                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   154                              <1> ; for SHARING trouble...
   155 000016A9 E853F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   156 000016AE E832F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   157 000016B3 800D(1A000000)08    <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   158 000016BA E940F3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   159                              <1> 
   160                              <1> batFinish:
   161                              <1> ;This is the procedure called after we've processed the last batch line
   162 000016BF E8D42A0000          <1>     call printPrompt    ;Add this to emulate what DOS does
   163 000016C4 E800020000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   164 000016C9 E931F3FFFF          <1>     jmp commandMain     ;And start again :)
   165                              <1> batNextLine:
   166                              <1> ;Read the next line from the file and sets if we are done with copying
   167 000016CE F605(1A000000)10    <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   168 000016D5 75E8                <1>     jnz batFinish
   169 000016D7 E83D020000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   170 000016DC 488B35(1B000000)    <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   171 000016E3 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   172 000016E6 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   173 000016E9 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   174 000016EE CD21                <1>     int 21h
   175 000016F0 C605(45020000)00    <1>     mov byte [batInBuffer + 1], 0  ;Reset the buffer count
   176 000016F7 488D15(46020000)    <1>     lea rdx, batInBuffer + 2   ;Start read pos
   177 000016FE 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   178                              <1> .readlp:
   179 00001700 E848020000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   180 00001705 742F                <1>     jz .eofAddCR
   181 00001707 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   182 0000170A 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   183 0000170D 743D                <1>     je .eolCR
   184 0000170F 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   185 00001712 7447                <1>     je .eolLF
   186 00001714 FE05(45020000)      <1>     inc byte [batInBuffer + 1] ;Inc our char count
   187 0000171A 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   188 0000171D 803D(45020000)80    <1>     cmp byte [batInBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   189 00001724 75DA                <1>     jne .readlp             ;Get next char if not
   190 00001726 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   191 00001729 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   192 0000172C FE0D(45020000)      <1>     dec byte [batInBuffer + 1] ;Reduce the valid char count by one
   193 00001732 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   194 00001734 EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   195                              <1> .eofAddCR:
   196 00001736 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   197                              <1> .eof:
   198 00001739 803D(45020000)00    <1>     cmp byte [batInBuffer + 1], 0      ;If we read any chars, do the line!
   199 00001740 751C                <1>     jne .eol
   200 00001742 E8FE010000          <1>     call batClose                   ;Else close the hdl!
   201 00001747 E973FFFFFF          <1>     jmp batFinish
   202                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   203 0000174C E8FC010000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   204 00001751 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   205 00001753 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   206 00001756 7503                <1>     jne .eolLF          ;Reread this char if not LF
   207 00001758 48FFC7              <1>     inc rdi             ;Else add to the count
   208                              <1> .eolLF:
   209 0000175B C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   210                              <1> .eol:
   211                              <1> ;Close the file, update the batch block file pointer, then proceed.
   212                              <1> ;rsi -> Batch block.
   213 0000175E E8E2010000          <1>     call batClose
   214                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   215 00001763 48017E13            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   216                              <1> ;Now we echo the prompt and command to the console unless the 
   217                              <1> ; first char is @, we hit a label or the echo flag is off.
   218 00001767 488D15(46020000)    <1>     lea rdx, batInBuffer + 2
   219                              <1> ;Labels and @ chars are first non-delim char on line.
   220                              <1> ;Find the first non-delim char in the line and check it!!
   221 0000176E 4889D6              <1>     mov rsi, rdx
   222 00001771 E8EF2C0000          <1>     call skipDelimiters     
   223 00001776 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   224 00001779 0F844FFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   225 0000177F E858000000          <1>     call batPreprocess      ;Else we preprocess now
   226                              <1> 
   227 00001784 488D15(C4010000)    <1>     lea rdx, batCpyBuffer + 2
   228 0000178B 803A40              <1>     cmp byte [rdx], batNoEchoChar   ;Line no echo check! (@)
   229 0000178E 7429                <1>     je .noEchoPull       
   230 00001790 F60576E8FFFFFF      <1>     test byte [echoFlg], -1         
   231 00001797 0F84CAF2FFFF        <1>     jz commandMain.batProceed
   232 0000179D 52                  <1>     push rdx
   233 0000179E E8F5290000          <1>     call printPrompt    ;Now output prompt
   234 000017A3 5A                  <1>     pop rdx
   235 000017A4 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
   236 000017A8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   237 000017AD B800400000          <1>     mov eax, 4000h  ;Write woo!
   238 000017B2 CD21                <1>     int 21h
   239 000017B4 E9A9F2FFFF          <1>     jmp commandMain.batProceedCrlf
   240                              <1> .noEchoPull:
   241 000017B9 FE0D(C3010000)      <1>     dec byte [batCpyBuffer + 1]     ;Eliminate the @ char
   242 000017BF 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   243 000017C5 4889D7              <1>     mov rdi, rdx
   244 000017C8 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   245 000017CC 0FB60D(C3010000)    <1>     movzx ecx, byte [batCpyBuffer + 1]  ;Get the remaining count to copy
   246 000017D3 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   247 000017D5 F3A4                <1>     rep movsb 
   248 000017D7 E98BF2FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   249                              <1> 
   250                              <1> batPreprocess:
   251                              <1> ;Copies the line from batCpyBuffer to batInBuffer for regular processing,
   252                              <1> ; expanding any environment variables as the expansion takes place.
   253                              <1> ;Line is guaranteed only CR terminated.
   254 000017DC 488D2D(C2010000)    <1>     lea rbp, batCpyBuffer   ;Save the ptr for the expandVar function
   255 000017E3 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   256 000017E7 C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   257 000017EB 488D35(46020000)    <1>     lea rsi, qword [batInBuffer + 2]
   258 000017F2 E86E2C0000          <1>     call skipDelimiters ;We strip leading delimiters
   259                              <1> .lp:
   260 000017F7 AC                  <1>     lodsb   ;Get char and advance source ptr
   261 000017F8 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   262 000017FA 7507                <1>     jne .rawcp
   263 000017FC E815000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   264 00001801 EB09                <1>     jmp short .check  
   265                              <1> .rawcp:
   266 00001803 AA                  <1>     stosb   ;Store the char
   267 00001804 3C0D                <1>     cmp al, CR
   268                              <1>     rete    ;Return immediately if we copied a CR. Dont add to count.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001806 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001808 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   269 00001809 FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   270                              <1> .check:
   271 0000180C 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   272 00001810 75E5                <1>     jne .lp
   273 00001812 B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   274 00001814 AA                  <1>     stosb   ;Store this char too
   275                              <1>     return
    13                              <2> %%_ret:
    14 00001815 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> 
   277                              <1> 
   278                              <1> batExpandVar:
   279                              <1> ;Expand any environment variables. 
   280                              <1> ;%% is treated as an escape char for a %.
   281                              <1> ;
   282                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   283                              <1> ;       rdi -> Position to place the substitution string.
   284                              <1> ;       rbp -> Head of destination buffer for copy.
   285                              <1> ;Output:
   286                              <1> ;   Substitution string is placed in buffer if necessary.
   287                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   288                              <1> ;       rdi -> Space for the next char to copy.
   289 00001816 0FB606              <1>     movzx eax, byte [rsi]  ;Is this a parameter like %[0-9]?
   290 00001819 3C30                <1>     cmp al, "0"
   291 0000181B 7204                <1>     jb .notRep  ;If definitely not a number, keep going
   292 0000181D 3C39                <1>     cmp al, "9"
   293 0000181F 7276                <1>     jb .repParm ;If a number, its a replacable parameter :)
   294                              <1> .notRep:
   295 00001821 3C0D                <1>     cmp al, CR          
   296                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001823 74(15)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   297 00001825 3C25                <1>     cmp al, "%" ;If immediately followed by %, then return it
   298 00001827 7505                <1>     jne .notSecond
   299                              <1> ;Here we escape the second %. We cant enter here if we dont have space 
   300                              <1> ; at least 1 char, so store it immediately.
   301 00001829 AA                  <1>     stosb
   302 0000182A FE4501              <1>     inc byte [rbp + 1]
   303                              <1>     return
    13                              <2> %%_ret:
    14 0000182D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   304                              <1> .notSecond:
   305                              <1> ;Now do the env var search. Start by scanning for the terminating
   306                              <1> ; % of the var name. If we strike a delimiter char first, 
   307                              <1> ; we stop the expansion for the envvar.
   308 0000182E 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   309 00001831 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   310                              <1> .envVarLp:
   311 00001834 AC                  <1>     lodsb
   312 00001835 E8392C0000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   313                              <1> .lpExit:
   314 0000183A 480F44F7            <1>     cmove rsi, rdi  ;If a delim found, return rsi to the char past the % sign.
   315 0000183E 480F44FB            <1>     cmove rdi, rbx  ;And return rdi to where it was beforehand :)
   316                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001842 74(2D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   317 00001844 3C0D                <1>     cmp al, CR      ;If we are at the end of the line too, exit!
   318 00001846 74F2                <1>     je .lpExit
   319 00001848 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   320 0000184A 75E8                <1>     jne .envVarLp
   321                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   322 0000184C C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   323 00001850 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   324                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   325 00001851 E837300000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   326 00001856 480F42FB            <1>     cmovc rdi, rbx  ;Reset rdi here if no envvar found and exit!
   327 0000185A 7239                <1>     jc .exit
   328 0000185C 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   329 0000185F B03D                <1>     mov al, "="
   330 00001861 B9FFFFFFFF          <1>     mov ecx, -1
   331 00001866 F2AE                <1>     repne scasb     ;Move rdi to the char past the equals sign
   332 00001868 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   333                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001869 72(2D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334                              <1> 
   335 0000186B 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   336 0000186C 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   337 0000186F E8CC2B0000          <1>     call strlen     ;Get the string length of the envvar value in ecx
   338                              <1> .copyVar:
   339 00001874 FFC9                <1>     dec ecx         ;Drop 0 from count
   340 00001876 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   341 00001879 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   342 0000187D 51                  <1>     push rcx
   343 0000187E 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   344 00001880 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   345 00001886 59                  <1>     pop rcx
   346 00001887 7207                <1>     jb .noTrunc
   347 00001889 B97F000000          <1>     mov ecx, inLen - 1
   348 0000188E 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   349                              <1> .noTrunc:
   350 00001890 004D01              <1>     add byte [rbp + 1], cl
   351 00001893 F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   352                              <1> .exit:
   353 00001895 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001896 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> .repParm:
   356 00001897 2D30000000          <1>     sub eax, "0"
   357 0000189C 48FFC6              <1>     inc rsi ;Move the ptr past the replacable parameter value
   358 0000189F 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   359 000018A6 0FB754431B          <1>     movzx edx, word [rbx + batBlockHdr.wArgs + 2*rax]   ;Get off from cmdLine
   360 000018AB 81FAFFFF0000        <1>     cmp edx, 0FFFFh   ;If there is no var, copy nothing and exit!
   361                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018B1 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 000018B3 56                  <1>     push rsi        ;Save ptr to source of next chars 
   363 000018B4 488D3413            <1>     lea rsi, qword [rbx + rdx]  ;Save ptr to head of string to copy in rsi
   364 000018B8 31C9                <1>     xor ecx, ecx
   365 000018BA FFC9                <1>     dec ecx
   366 000018BC B00D                <1>     mov al, CR      ;Now scan for the terminating CR
   367 000018BE 4887F7              <1>     xchg rsi, rdi   ;Save dest ptr in rsi and point to string to cpy in rdi
   368 000018C1 57                  <1>     push rdi        ;Save the head of the string for copy
   369 000018C2 F2AE                <1>     repne scasb     ;Get the length of the string with terminating CR
   370 000018C4 5F                  <1>     pop rdi         ;Point back to head of string
   371 000018C5 F7D1                <1>     not ecx         ;Convert to one less than the length (drops the CR)
   372 000018C7 EBAB                <1>     jmp short .copyVar
   373                              <1> 
   374                              <1> batCleanup:
   375                              <1> ;This function is called after the last line has been processed by the 
   376                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   377                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   378 000018C9 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   379 000018D0 4885DB              <1>     test rbx, rbx
   380 000018D3 7417                <1>     jz .exit    ;Skip any references using this pointer
   381 000018D5 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   382 000018D8 88052FE7FFFF        <1>     mov byte [echoFlg], al
   383                              <1> ;-----------------------------------------------------------------------
   384                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   385                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   386                              <1> ; But since this is the routine called by the error handler too, it 
   387                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   388                              <1> ; just have a null pointer.
   389                              <1> ;-----------------------------------------------------------------------
   390                              <1>     ;call forFree
   391                              <1> ;Finally free this batch header...
   392 000018DE 4150                <1>     push r8
   393 000018E0 4989D8              <1>     mov r8, rbx
   394 000018E3 B800490000          <1>     mov eax, 4900h
   395 000018E8 CD21                <1>     int 21h
   396 000018EA 4158                <1>     pop r8
   397                              <1> .exit:
   398 000018EC E8F4F5FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   399 000018F1 48C705(1B000000)00- <1>     mov qword [bbPtr], 0    
   399 000018F9 000000              <1>
   400 000018FC 8025(1A000000)E7    <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   401                              <1> ;... and copy the batch command line back to its resting place.
   402 00001903 488D35(73000000)    <1>     lea rsi, batCmdline
   403 0000190A 488D3D(C2010000)    <1>     lea rdi, inBuffer
   404 00001911 B982000000          <1>     mov ecx, cmdBufferL
   405 00001916 F3A4                <1>     rep movsb
   406                              <1>     return
    13                              <2> %%_ret:
    14 00001918 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   407                              <1> 
   408                              <1> batOpen:
   409                              <1> ;Opens the batch file and returns the handle in ebx.
   410                              <1> ;Prints the "replace disk" string if file not found.
   411                              <1> ;
   412                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   413                              <1> ;Output: ebx = File handle for filespec in batFile.
   414                              <1> ;
   415                              <1> ;Funky behaviour worth noting:
   416                              <1> ; If a failure occurs in open, we keep prompting the user to 
   417                              <1> ; replace the disk. The only way out if the error is really bad is 
   418                              <1> ; via ^C which does all the cleanup we need. 
   419                              <1> ; Thus this never returns fail.
   420 00001919 50                  <1>     push rax
   421 0000191A 52                  <1>     push rdx
   422 0000191B 488D15(23000000)    <1>     lea rdx, batFile
   423                              <1> .batOpen:
   424 00001922 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   425 00001927 CD21                <1>     int 21h
   426 00001929 7315                <1>     jnc .batOpened
   427 0000192B 488D1554E8FFFF      <1>     lea rdx, needBat
   428 00001932 E8E3280000          <1>     call printString
   429 00001937 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   430 0000193C CD21                <1>     int 21h
   431 0000193E EBE2                <1>     jmp short .batOpen
   432                              <1> .batOpened:
   433 00001940 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   434 00001942 5A                  <1>     pop rdx
   435 00001943 58                  <1>     pop rax
   436                              <1>     return
    13                              <2> %%_ret:
    14 00001944 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> batClose:
   439                              <1> ;Close the handle in ebx.
   440 00001945 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   441 0000194A CD21                <1>     int 21h         
   442                              <1>     return
    13                              <2> %%_ret:
    14 0000194C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> batReadChar:
   445                              <1> ;Reads a char. 
   446                              <1> ;Input: ebx = Handle to read char from.
   447                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   448                              <1> ;Output: 
   449                              <1> ;   CF=NC:
   450                              <1> ;       ZF=NZ: eax = 1. One char read.
   451                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   452                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   453                              <1> ;Clobbers: None.
   454 0000194D 51                  <1>     push rcx
   455 0000194E B901000000          <1>     mov ecx, 1
   456 00001953 B8003F0000          <1>     mov eax, 3F00h
   457 00001958 CD21                <1>     int 21h 
   458 0000195A 59                  <1>     pop rcx 
   459 0000195B 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   460 0000195D 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   461 0000195F 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   462 00001961 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   463                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001964 75(4C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   464                              <1> .eof:
   465 00001966 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   466 00001967 800D(1A000000)10    <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   467 0000196E 9D                  <1>     popfq
   468                              <1>     return    
    13                              <2> %%_ret:
    14 0000196F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> .bad:
   470 00001970 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   471 00001972 F9                  <1>     stc             ;Never check it but ensure reset of CF.
   472 00001973 EBF1                <1>     jmp short .eof  ;And set the status bit
    21                                  %include "./src/cmdErr.asm"
     1                              <1> ;This file contains the error printing routines
     2                              <1> ;Common Error Messages, jumped to to return from
     3                              <1> badDiskFull:
     4                              <1> ;This is a different error return, as this closes handles and prints
     5                              <1> ; disk full error and resets the command line!
     6 00001975 488D15A9E8FFFF      <1>     lea rdx, noSpace
     7 0000197C 488D0DC9EBFFFF      <1>     lea rcx, pipeErr
     8 00001983 F605B6E6FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
     9 0000198A 747D                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    10 0000198C 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    11 00001990 E874000000          <1>     call badCmn     ;Print the string
    12 00001995 E941F5FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    13                              <1> badForError:    
    14 0000199A E81C260000          <1>     call forFree        ;Free all FOR variables
    15 0000199F 488D158AEBFFFF      <1>     lea rdx, forNest
    16 000019A6 EB61                <1>     jmp short badCmn    
    17                              <1> badNoMemError:
    18 000019A8 488D1569ECFFFF      <1>     lea rdx, noMemMsg
    19 000019AF EB58                <1>     jmp short badCmn
    20                              <1> badSyntaxError:
    21 000019B1 488D1569EBFFFF      <1>     lea rdx, syntaxErr
    22 000019B8 EB4F                <1>     jmp short badCmn
    23                              <1> badEnvSpaceError:
    24 000019BA 488D157EE8FFFF      <1>     lea rdx, noEnvSpace
    25 000019C1 EB46                <1>     jmp short badCmn
    26                              <1> badAccError:
    27 000019C3 488D1503EBFFFF      <1>     lea rdx, accDenMsg
    28 000019CA EB3D                <1>     jmp short badCmn
    29                              <1> badParamError:
    30 000019CC 488D1578E9FFFF      <1>     lea rdx, badParm
    31 000019D3 EB34                <1>     jmp short badCmn
    32                              <1> badDriveError:
    33 000019D5 488D1532E9FFFF      <1>     lea rdx, badDrv
    34 000019DC EB2B                <1>     jmp short badCmn
    35                              <1> badArgError:
    36 000019DE 488D15F9EBFFFF      <1>     lea rdx, badArgs
    37 000019E5 EB22                <1>     jmp short badCmn
    38                              <1> badFileError:
    39 000019E7 488D15D4EBFFFF      <1>     lea rdx, badSpec
    40 000019EE EB19                <1>     jmp short badCmn
    41                              <1> badDupFnf:
    42                              <1> ;Hybrid error message
    43 000019F0 488D1506E8FFFF      <1>     lea rdx, dupName
    44 000019F7 EB10                <1>     jmp short badCmn
    45                              <1> badFnf:
    46 000019F9 488D1514E8FFFF      <1>     lea rdx, fnfMsg
    47 00001A00 EB07                <1>     jmp short badCmn
    48                              <1> badDirError:
    49 00001A02 488D1543EAFFFF      <1>     lea rdx, badDir
    50                              <1> badCmn:
    51 00001A09 E90C280000          <1>     jmp printString
    52                              <1> badCmdError:
    53 00001A0E 488D15CDE7FFFF      <1>     lea rdx, badCmd
    54 00001A15 EBF2                <1>     jmp short badCmn
    22                                  %include "./src/cmdFunc1.asm"
     1                              <1> ;Functions included with name and label:
     2                              <1> ;----------------------------------------------------
     3                              <1> ; LABEL     NAME
     4                              <1> ;----------------------------------------------------
     5                              <1> ; dir       DIR
     6                              <1> ; chdir     CHDIR(CD)
     7                              <1> ; mkdir     MKDIR(MD)
     8                              <1> ; rmdir     RMDIR(RD)
     9                              <1> ; copy      COPY
    10                              <1> ; erase     DEL(ERASE)
    11                              <1> ; date      DATE
    12                              <1> ; time      TIME
    13                              <1> ; ctty      CTTY
    14                              <1> ; cls       CLS
    15                              <1> ; break     BREAK
    16                              <1> ; verify    VERIFY
    17                              <1> ; rename    REN(AME)
    18                              <1> ; truename  TRUENAME
    19                              <1> ; volume    VOL
    20                              <1> ; version   VER
    21                              <1> ; memory    MEM
    22                              <1> ;----------------------------------------------------
    23                              <1> dir:
    24                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    25 00001A17 C605(F5050000)00    <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    26 00001A1E C605(F6050000)00    <1>     mov byte [dirLineCtr], 0
    27 00001A25 C705(F7050000)0000- <1>     mov dword [dirFileCtr], 0
    27 00001A2D 0000                <1>
    28 00001A2F C605(FC050000)00    <1>     mov byte [dirSrchDir], 0
    29 00001A36 66C705(F1040000)00- <1>     mov word [searchSpec], 0
    29 00001A3E 00                  <1>
    30 00001A3F 488D3D(7E060000)    <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    31 00001A46 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    32 00001A49 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    32 00001A52 3F                  <1>
    33 00001A53 48894701            <1>     mov qword [rdi + fcb.filename], rax
    34 00001A57 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    35                              <1>     ;Start by scanning for the switches
    36 00001A5E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    37 00001A65 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    38                              <1> .scanNew:
    39 00001A68 E8F8290000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    40 00001A6D AC                  <1>     lodsb   ;Get this char
    41 00001A6E 3C0D                <1>     cmp al, CR
    42 00001A70 744D                <1>     je .scanDone
    43 00001A72 3A0593E5FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    44 00001A78 7524                <1>     jne .notSwitch
    45 00001A7A AC                  <1>     lodsb   ;Get the next char
    46 00001A7B E8CA290000          <1>     call ucChar
    47 00001A80 3C57                <1>     cmp al, "W"
    48 00001A82 7509                <1>     jne .notWide
    49 00001A84 800D(F5050000)01    <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    50 00001A8B EBDB                <1>     jmp short .scanNew
    51                              <1> .notWide:
    52 00001A8D 3C50                <1>     cmp al, "P"
    53 00001A8F 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    54 00001A95 800D(F5050000)02    <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    55 00001A9C EBCA                <1>     jmp short .scanNew
    56                              <1> .notSwitch:
    57 00001A9E F605(F5050000)04    <1>     test byte [dirFlags], dirFileType
    58 00001AA5 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    59                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    60 00001AAB 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    61 00001AAE E83E2B0000          <1>     call copyArgumentToSearchSpec   
    62 00001AB3 48FFCE              <1>     dec rsi ;Point back to the terminator char
    63 00001AB6 800D(F5050000)04    <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    64 00001ABD EBA9                <1>     jmp short .scanNew
    65                              <1> .scanDone:
    66 00001ABF F605(F5050000)04    <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    67 00001AC6 7438                <1>     jz .currentDrv
    68                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    69 00001AC8 488D35(F1040000)    <1>     lea rsi, searchSpec
    70 00001ACF 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    71 00001AD3 752B                <1>     jne .currentDrv
    72                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    73 00001AD5 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    74 00001ADA 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    75 00001ADE B801290000          <1>     mov eax, 2901h   ;Parse filename
    76 00001AE3 CD21                <1>     int 21h
    77 00001AE5 3CFF                <1>     cmp al, -1
    78 00001AE7 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    79                              <1>     ;Else the drive in the fcb is valid
    80 00001AED 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    81 00001AF2 84C0                <1>     test al, al
    82 00001AF4 740A                <1>     jz .currentDrv
    83 00001AF6 FEC8                <1>     dec al  ;Convert to 0 based drive number
    84 00001AF8 8805(FB050000)      <1>     mov byte [dirDrv], al
    85 00001AFE EB0B                <1>     jmp short .dirPrintVol
    86                              <1> .currentDrv:
    87 00001B00 E81D290000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    88 00001B05 8805(FB050000)      <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    89                              <1> .dirPrintVol:
    90 00001B0B 488D35(F1040000)    <1>     lea rsi, searchSpec
    91                              <1> ;Now construct the path on dirSrchDir.
    92 00001B12 488D3D(FC050000)    <1>     lea rdi, dirSrchDir
    93 00001B19 0FB605(FB050000)    <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
    94 00001B20 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
    95 00001B22 0441                <1>     add al, "A" ;Turn into a letter
    96 00001B24 B43A                <1>     mov ah, ":"
    97 00001B26 66AB                <1>     stosw   ;Store X: into the search path
    98 00001B28 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
    99 00001B2D CD2F                <1>     int 2fh
   100 00001B2F 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   101 00001B31 0F849EFEFFFF        <1>     je badDriveError
   102                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   103 00001B37 8A05CDE4FFFF        <1>     mov al, byte [pathSep]
   104 00001B3D 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   105 00001B3F 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   106 00001B41 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   107 00001B42 FEC2                <1>     inc dl  ;Increment by 1
   108 00001B44 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   109 00001B47 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   110 00001B4C CD21                <1>     int 21h
   111 00001B4E 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   112                              <1>     ;rsi points to the first char in the provided path.
   113                              <1>     ;rdi points to the first char of the cwd.
   114 00001B51 31C0                <1>     xor eax, eax
   115                              <1> .goToEndOfCwd:
   116                              <1> ;Move to the end of the string, could use repne?
   117 00001B53 3807                <1>     cmp byte [rdi], al
   118 00001B55 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   119 00001B57 48FFC7              <1>     inc rdi
   120 00001B5A EBF7                <1>     jmp short .goToEndOfCwd
   121                              <1> .prepCopy:
   122 00001B5C 8A05A8E4FFFF        <1>     mov al, byte [pathSep]
   123 00001B62 3806                <1>     cmp byte [rsi], al
   124 00001B64 7412                <1>     je .copyPathLoop
   125 00001B66 B43A                <1>     mov ah, ":"
   126 00001B68 86C4                <1>     xchg al, ah
   127 00001B6A 663947FE            <1>     cmp word [rdi - 2], ax
   128 00001B6E 7408                <1>     je .copyPathLoop
   129 00001B70 88E0                <1>     mov al, ah
   130 00001B72 3847FF              <1>     cmp byte [rdi - 1], al
   131 00001B75 7401                <1>     je .copyPathLoop
   132 00001B77 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   133                              <1> .copyPathLoop:
   134 00001B78 AC                  <1>     lodsb
   135 00001B79 3A058BE4FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   136 00001B7F 7509                <1>     jne .checkDot  ;If not, store it
   137                              <1> .lpPathseps:
   138 00001B81 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   139 00001B83 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   140 00001B85 48FFC6              <1>     inc rsi
   141 00001B88 EBF7                <1>     jmp short .lpPathseps
   142                              <1> .checkDot:
   143 00001B8A 3C2E                <1>     cmp al, "."
   144 00001B8C 7407                <1>     je .dots
   145                              <1> .store:
   146 00001B8E AA                  <1>     stosb
   147 00001B8F 84C0                <1>     test al, al ;Was the char we just copied a null?
   148 00001B91 7472                <1>     jz .exitPathCopy
   149 00001B93 EBE3                <1>     jmp short .copyPathLoop
   150                              <1> .dots:
   151                              <1>     ;Here handle dot and dot dot
   152                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   153                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   154                              <1>     ; by 1. If it is null, go to top of loop.
   155                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   156 00001B95 8A256FE4FFFF        <1>     mov ah, byte [pathSep]
   157 00001B9B 3867FF              <1>     cmp byte [rdi - 1], ah  
   158 00001B9E 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   159 00001BA0 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   160 00001BA2 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   161 00001BA5 7413                <1>     je .twoDot
   162                              <1>     ;This is only a "current dir" when next char is pathsep or null
   163 00001BA7 3A255DE4FFFF        <1>     cmp ah, byte [pathSep]
   164 00001BAD 7406                <1>     je .skipThisPathsep
   165 00001BAF 84E4                <1>     test ah, ah
   166 00001BB1 74C5                <1>     jz .copyPathLoop
   167 00001BB3 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   168                              <1> .skipThisPathsep:
   169                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   170 00001BB5 48FFC6              <1>     inc rsi ;Point to the pathsep
   171 00001BB8 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   172                              <1> .twoDot:
   173                              <1>     ;Woohoo, this works!
   174 00001BBA 48FFC6              <1>     inc rsi ;Move past the second dot
   175 00001BBD 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   176 00001BBF 3A2545E4FFFF        <1>     cmp ah, byte [pathSep]
   177 00001BC5 7408                <1>     je .tdOk
   178 00001BC7 84E4                <1>     test ah, ah
   179 00001BC9 0F85FDFDFFFF        <1>     jne badParamError
   180                              <1> .tdOk:
   181 00001BCF 8A0535E4FFFF        <1>     mov al, byte byte [pathSep]
   182 00001BD5 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   183 00001BD9 0F84EDFDFFFF        <1>     je badParamError
   184 00001BDF 4881EF02000000      <1>     sub rdi, 2
   185 00001BE6 31C9                <1>     xor ecx, ecx
   186 00001BE8 FFC9                <1>     dec ecx
   187 00001BEA FD                  <1>     std
   188 00001BEB F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   189 00001BED FC                  <1>     cld
   190 00001BEE 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   191 00001BF5 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   192 00001BF7 0F847BFFFFFF        <1>     jz .copyPathLoop
   193 00001BFD 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   194 00001C00 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   195                              <1> .exitPathCopy:
   196                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   197 00001C05 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   198 00001C0C 8A05F8E3FFFF        <1>     mov al, byte [pathSep]
   199 00001C12 B43A                <1>     mov ah, ":"
   200 00001C14 86C4                <1>     xchg al, ah
   201 00001C16 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   202 00001C1A 7409                <1>     je .skipOverwrite
   203 00001C1C 88E0                <1>     mov al, ah
   204 00001C1E 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   205 00001C20 7503                <1>     jne .skipOverwrite
   206 00001C22 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   207                              <1> .skipOverwrite:
   208 00001C25 488D35(FC050000)    <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   209 00001C2C 4889F7              <1>     mov rdi, rsi
   210 00001C2F B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   211 00001C34 CD2F                <1>     int 2fh
   212 00001C36 E8C3290000          <1>     call scanForWildcards
   213 00001C3B 742D                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   214 00001C3D 4889F2              <1>     mov rdx, rsi
   215 00001C40 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   216 00001C44 7424                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   217                              <1> .notNull:
   218 00001C46 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   219 00001C4B B8004E0000          <1>     mov eax, 4E00h ;Find first
   220 00001C50 CD21                <1>     int 21h
   221 00001C52 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   222                              <1> ;Now we have searched for the file, is a directory?
   223 00001C54 F605(8C010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   224 00001C5B 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   225                              <1>     ;Here we are searching IN a directory. Default search pattern!
   226 00001C5D 31C0                <1>     xor eax, eax
   227 00001C5F 31C9                <1>     xor ecx, ecx
   228 00001C61 FFC9                <1>     dec ecx
   229 00001C63 F2AE                <1>     repne scasb
   230 00001C65 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   231 00001C68 EB40                <1>     jmp short .wcDefaultSearch
   232                              <1> .wcSearchPattern:
   233                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   234                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   235 00001C6A 31C0                <1>     xor eax, eax
   236 00001C6C 31C9                <1>     xor ecx, ecx
   237 00001C6E FFC9                <1>     dec ecx
   238 00001C70 F2AE                <1>     repne scasb ;Scan forwards
   239                              <1>     ;Here rdi points past the null at the end
   240 00001C72 8A0592E3FFFF        <1>     mov al, byte [pathSep]
   241 00001C78 31C9                <1>     xor ecx, ecx
   242 00001C7A FFC9                <1>     dec ecx
   243 00001C7C FD                  <1>     std ;Search backwards
   244 00001C7D F2AE                <1>     repne scasb
   245 00001C7F FC                  <1>     cld ;Search forwards again
   246 00001C80 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   247 00001C83 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   248 00001C87 7503                <1>     jne .wcsp1
   249 00001C89 48FFC7              <1>     inc rdi ;Go one char forwards
   250                              <1> .wcsp1:
   251                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   252 00001C8C 57                  <1>     push rdi
   253 00001C8D 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   254 00001C8F 7503                <1>     jne .wcsp2
   255 00001C91 48FFC7              <1>     inc rdi
   256                              <1> .wcsp2:
   257 00001C94 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   258 00001C97 488D3D(7E060000)    <1>     lea rdi, dirSrchFCB
   259 00001C9E B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   260 00001CA3 CD21                <1>     int 21h
   261 00001CA5 5F                  <1>     pop rdi
   262 00001CA6 31C0                <1>     xor eax, eax
   263 00001CA8 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   264                              <1> .wcDefaultSearch:
   265 00001CAA 0FB605(FB050000)    <1>     movzx eax, byte [dirDrv] 
   266 00001CB1 E8FB140000          <1>     call volume.dirEP
   267 00001CB6 488D15F7E7FFFF      <1>     lea rdx, dirMain    ;Print message intro
   268 00001CBD B409                <1>     mov ah, 09h
   269 00001CBF CD21                <1>     int 21h
   270 00001CC1 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   271 00001CC4 488D15(FC050000)    <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   272 00001CCB B409                <1>     mov ah, 09h
   273 00001CCD CD21                <1>     int 21h
   274 00001CCF C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   275 00001CD2 488D1591E4FFFF      <1>     lea rdx, crlf2
   276 00001CD9 B409                <1>     mov ah, 09h
   277 00001CDB CD21                <1>     int 21h
   278                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   279                              <1> ;rdi points to the terminating null
   280 00001CDD 8A0527E3FFFF        <1>     mov al, byte [pathSep]
   281 00001CE3 3847FF              <1>     cmp byte [rdi - 1], al
   282 00001CE6 7403                <1>     je .root
   283 00001CE8 48FFC7              <1>     inc rdi
   284                              <1> .root:
   285 00001CEB 48FFCF              <1>     dec rdi ;Point back to the pathsep
   286 00001CEE AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   287 00001CEF 488D35(7F060000)    <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   288 00001CF6 E845280000          <1>     call FCBToAsciiz    ;Terminates for free
   289 00001CFB E801000000          <1>     call .searchForFile
   290                              <1>     return
    13                              <2> %%_ret:
    14 00001D00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> .searchForFile:
   293 00001D01 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   294 00001D06 488D15(FC050000)    <1>     lea rdx, dirSrchDir
   295 00001D0D B8004E0000          <1>     mov eax, 4E00h ;Find first
   296 00001D12 CD21                <1>     int 21h
   297 00001D14 720B                <1>     jc .dirNoMoreFiles
   298                              <1> .findNext:
   299 00001D16 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   300 00001D1B B44F                <1>     mov ah, 4Fh
   301 00001D1D CD21                <1>     int 21h
   302 00001D1F 73F5                <1>     jnc .findNext 
   303                              <1> .dirNoMoreFiles:
   304 00001D21 F605(F5050000)01    <1>     test byte [dirFlags], dirWideType
   305 00001D28 740B                <1>     jz .dirNoEndNewLine
   306 00001D2A 488D1536E4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   307 00001D31 B409                <1>     mov ah, 09h
   308 00001D33 CD21                <1>     int 21h
   309                              <1> .dirNoEndNewLine:
   310                              <1>     ;Now we print the number of files and the number of bytes on the disk
   311 00001D35 F705(F7050000)FFFF- <1>     test dword [dirFileCtr], -1
   311 00001D3D FFFF                <1>
   312 00001D3F 750D                <1>     jnz .filesFound
   313                              <1>     ;Else print File not found and exit!
   314 00001D41 488D15CCE4FFFF      <1>     lea rdx, fnfMsg
   315 00001D48 E8CD240000          <1>     call printString
   316                              <1>     return
    13                              <2> %%_ret:
    14 00001D4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> .filesFound:
   318 00001D4E 8B05(F7050000)      <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   319 00001D54 B909000000          <1>     mov ecx, 9
   320 00001D59 E8B4280000          <1>     call printDecimalValLB
   321 00001D5E 488D1588E5FFFF      <1>     lea rdx, dirOk
   322 00001D65 B409                <1>     mov ah, 09h
   323 00001D67 CD21                <1>     int 21h
   324 00001D69 B800360000          <1>     mov eax, 3600h ;Get disk info
   325 00001D6E 8A15(FB050000)      <1>     mov dl, byte [dirDrv]
   326 00001D74 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   327 00001D76 CD21                <1>     int 21h ;Get disk free space info
   328 00001D78 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   329 00001D7B 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   330 00001D7E 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   331 00001D80 F7E1                <1>     mul ecx ;Get bytes per cluster
   332 00001D82 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   333                              <1>     ;rax now has the number of free bytes on the disk
   334 00001D85 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   335 00001D8A E883280000          <1>     call printDecimalValLB
   336 00001D8F 488D1561E5FFFF      <1>     lea rdx, bytesOk
   337 00001D96 B409                <1>     mov ah, 09h
   338 00001D98 CD21                <1>     int 21h
   339                              <1>     return
    13                              <2> %%_ret:
    14 00001D9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> .dirPrintFileData:
   342                              <1> ;Use cmdFcb to build the file name with space
   343                              <1> ;Start by print the name (same for both cases)
   344                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   345 00001D9B F605(8C010000)46    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   346                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001DA2 75(9A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00001DA4 488D35(95010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   348 00001DAB 488D3D(67010000)    <1>     lea rdi, cmdFcb
   349 00001DB2 E81B270000          <1>     call asciiFilenameToFCB
   350 00001DB7 488D15(67010000)    <1>     lea rdx, cmdFcb
   351 00001DBE B908000000          <1>     mov ecx, 8  ;Print 8 chars
   352 00001DC3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   353 00001DC8 B440                <1>     mov ah, 40h ;Write handle
   354 00001DCA CD21                <1>     int 21h
   355 00001DCC 52                  <1>     push rdx
   356 00001DCD B220                <1>     mov dl, " "
   357 00001DCF B402                <1>     mov ah, 02h ;Print char
   358 00001DD1 CD21                <1>     int 21h
   359 00001DD3 5A                  <1>     pop rdx
   360 00001DD4 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   361 00001DDB B903000000          <1>     mov ecx, 3  ;Print three chars
   362 00001DE0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 00001DE5 B440                <1>     mov ah, 40h ;Write handle
   364 00001DE7 CD21                <1>     int 21h
   365 00001DE9 F605(F5050000)01    <1>     test byte [dirFlags], dirWideType
   366 00001DF0 757B                <1>     jnz .widePrint
   367                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   368                              <1>     ;Now check if a DIR
   369 00001DF2 F605(8C010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   370 00001DF9 7422                <1>     jz .dirPrintNotDir
   371 00001DFB 488D1503E5FFFF      <1>     lea rdx, dirLbl
   372 00001E02 B409                <1>     mov ah, 09h
   373 00001E04 CD21                <1>     int 21h
   374 00001E06 488D15A4E9FFFF      <1>     lea rdx, threeSpc
   375 00001E0D B409                <1>     mov ah, 09h
   376 00001E0F CD21                <1>     int 21h
   377 00001E11 B409                <1>     mov ah, 09h
   378 00001E13 CD21                <1>     int 21h
   379 00001E15 B220                <1>     mov dl, SPC
   380 00001E17 B402                <1>     mov ah, 02h
   381 00001E19 CD21                <1>     int 21h
   382 00001E1B EB1C                <1>     jmp short .dirPrintFileDT
   383                              <1> .dirPrintNotDir:
   384                              <1> ;Here we print the file size
   385 00001E1D B220                <1>     mov dl, " "
   386 00001E1F B402                <1>     mov ah, 02h
   387 00001E21 CD21                <1>     int 21h
   388 00001E23 8B05(91010000)      <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   389 00001E29 B90D000000          <1>     mov ecx, 13
   390 00001E2E E8DF270000          <1>     call printDecimalValLB
   391 00001E33 B220                <1>     mov dl, SPC
   392 00001E35 B402                <1>     mov ah, 02h
   393 00001E37 CD21                <1>     int 21h
   394                              <1> .dirPrintFileDT:
   395 00001E39 0FB705(8F010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   396 00001E40 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   397 00001E42 E89D210000          <1>     call printDate
   398 00001E47 488D1563E9FFFF      <1>     lea rdx, threeSpc
   399 00001E4E B409                <1>     mov ah, 09h
   400 00001E50 CD21                <1>     int 21h
   401 00001E52 0FB705(8D010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   402 00001E59 E8AC220000          <1>     call printTime
   403 00001E5E 488D1502E3FFFF      <1>     lea rdx, crlf
   404 00001E65 B409                <1>     mov ah, 09h
   405 00001E67 CD21                <1>     int 21h
   406 00001E69 B017                <1>     mov al, 23  ;23 lines... for the next bit
   407 00001E6B EB0D                <1>     jmp short .dirPrintNameExit
   408                              <1> .widePrint:
   409                              <1> ;If /W, print name space ext space space space space
   410 00001E6D 488D1538E9FFFF      <1>     lea rdx, fourSpc
   411 00001E74 B409                <1>     mov ah, 09h ;Print string
   412 00001E76 CD21                <1>     int 21h
   413 00001E78 B073                <1>     mov al, 5*23    ;5 entries per line...
   414                              <1> .dirPrintNameExit:
   415 00001E7A FF05(F7050000)      <1>     inc dword [dirFileCtr]   ;Increment file counter
   416 00001E80 FE05(F6050000)      <1>     inc byte [dirLineCtr]
   417 00001E86 3805(F6050000)      <1>     cmp byte [dirLineCtr], al
   418                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E8C 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E8E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   419 00001E8F F605(F5050000)02    <1>     test byte [dirFlags], dirPageType
   420 00001E96 741A                <1>     jz .dirPrnNoPag
   421 00001E98 488D158DE4FFFF      <1>     lea rdx, pauseMes
   422 00001E9F B409                <1>     mov ah, 09h
   423 00001EA1 CD21                <1>     int 21h
   424 00001EA3 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   425 00001EA5 CD21                <1>     int 21h
   426 00001EA7 488D15B9E2FFFF      <1>     lea rdx, crlf   ;Force new line
   427 00001EAE B409                <1>     mov ah, 09h
   428 00001EB0 CD21                <1>     int 21h
   429                              <1> .dirPrnNoPag:
   430 00001EB2 C605(F6050000)00    <1>     mov byte [dirLineCtr], 0
   431                              <1>     return
    13                              <2> %%_ret:
    14 00001EB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> chdir:
   434 00001EBA F6058AE1FFFFFF      <1>     test byte [arg1Flg], -1
   435 00001EC1 754D                <1>     jnz .changeDir
   436                              <1>     ;Print CWD
   437                              <1> .printCWD:
   438 00001EC3 E8C7230000          <1>     call putCWDInPrompt ;Exactly the same procedure
   439 00001EC8 E846230000          <1>     call printCRLF
   440                              <1>     return
    13                              <2> %%_ret:
    14 00001ECD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> .printDiskCWD:
   442                              <1> ;Print CWD for a specified drive
   443 00001ECE 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   444 00001ED2 88D0                <1>     mov al, dl
   445 00001ED4 0440                <1>     add al, "@" ;Get the UC letter
   446 00001ED6 B43A                <1>     mov ah, ":"
   447 00001ED8 488D3D(F1040000)    <1>     lea rdi, searchSpec
   448 00001EDF 66AB                <1>     stosw   ;Store X:, rdi+=2
   449 00001EE1 8A0523E1FFFF        <1>     mov al, byte [pathSep]
   450 00001EE7 AA                  <1>     stosb   ;Store pathSep, inc rdi
   451 00001EE8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   452 00001EEA 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   453 00001EED CD21                <1>     int 21h
   454 00001EEF E84C250000          <1>     call strlen
   455 00001EF4 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   456 00001EFA B440                <1>     mov ah, 40h ;Write to handle
   457 00001EFC BB01000000          <1>     mov ebx, 1  ;STDOUT
   458 00001F01 488D15(F1040000)    <1>     lea rdx, searchSpec
   459 00001F08 CD21                <1>     int 21h
   460 00001F0A E804230000          <1>     call printCRLF
   461                              <1>     return
    13                              <2> %%_ret:
    14 00001F0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> .changeDir:
   463 00001F10 8A0537E1FFFF        <1>     mov al, byte [arg1FCBret]
   464 00001F16 3CFF                <1>     cmp al, -1 
   465 00001F18 0F84B7FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   466 00001F1E E8B6260000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   467 00001F23 488D15(F1040000)    <1>     lea rdx, searchSpec
   468 00001F2A B43B                <1>     mov ah, 3Bh ;CHDIR
   469 00001F2C CD21                <1>     int 21h
   470 00001F2E 0F82CEFAFFFF        <1>     jc badDirError
   471                              <1>     return
    13                              <2> %%_ret:
    14 00001F34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> mkdir:
   474 00001F35 F6050FE1FFFFFF      <1>     test byte [arg1Flg], -1
   475 00001F3C 0F849CFAFFFF        <1>     jz badArgError
   476 00001F42 F60505E1FFFFFF      <1>     test byte [arg2Flg], -1
   477 00001F49 0F858FFAFFFF        <1>     jnz badArgError
   478                              <1>     ;We have exactly one argument
   479 00001F4F 8A05F8E0FFFF        <1>     mov al, byte [arg1FCBret]
   480 00001F55 3CFF                <1>     cmp al, -1 
   481 00001F57 0F8478FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   482 00001F5D E877260000          <1>     call buildCommandPath
   483 00001F62 488D15(F1040000)    <1>     lea rdx, searchSpec
   484 00001F69 B800390000          <1>     mov eax, 3900h  ;MKDIR
   485 00001F6E CD21                <1>     int 21h
   486                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F70 73(34)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> .badMake:   ;Else, bad make
   488 00001F72 488D15E7E4FFFF      <1>     lea rdx, badMD
   489 00001F79 E99C220000          <1>     jmp printString
   490                              <1> 
   491                              <1> rmdir:
   492 00001F7E F605C6E0FFFFFF      <1>     test byte [arg1Flg], -1
   493 00001F85 0F8453FAFFFF        <1>     jz badArgError
   494 00001F8B F605BCE0FFFFFF      <1>     test byte [arg2Flg], -1
   495 00001F92 0F8546FAFFFF        <1>     jnz badArgError
   496                              <1>     ;We have exactly one argument
   497 00001F98 8A05AFE0FFFF        <1>     mov al, byte [arg1FCBret]
   498 00001F9E 3CFF                <1>     cmp al, -1 
   499 00001FA0 0F842FFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   500 00001FA6 E82E260000          <1>     call buildCommandPath
   501 00001FAB 488D15(F1040000)    <1>     lea rdx, searchSpec
   502 00001FB2 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   503 00001FB7 CD21                <1>     int 21h
   504                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FB9 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FBB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   505                              <1> .badRemove:   ;Else, bad make
   506 00001FBC 488D15BAE4FFFF      <1>     lea rdx, badRD
   507 00001FC3 E952220000          <1>     jmp printString
   508                              <1> 
   509                              <1> copy:
   510 00001FC8 66C705(C2070000)FF- <1>     mov word [sourceHdl], -1
   510 00001FD0 FF                  <1>
   511 00001FD1 66C705(C4070000)FF- <1>     mov word [destHdl], -1
   511 00001FD9 FF                  <1>
   512 00001FDA 66C705(C6070000)FF- <1>     mov word [srcHdlInfo], -1
   512 00001FE2 FF                  <1>
   513 00001FE3 C605(D6070000)00    <1>     mov byte [bCpFlg], 0    ;State flag!
   514 00001FEA 48C705(C8070000)00- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   514 00001FF2 000000              <1>
   515 00001FF5 66C705(D0070000)00- <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   515 00001FFD 00                  <1>
   516 00001FFE C705(D2070000)0000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   516 00002006 0000                <1>
   517 00002008 C605(92060000)00    <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   518 0000200F C605(14070000)00    <1>     mov byte [destSpec], 0
   519 00002016 48C705(96070000)00- <1>     mov qword [srcPtr], 0
   519 0000201E 000000              <1>
   520 00002021 48C705(9E070000)00- <1>     mov qword [destPtr], 0
   520 00002029 000000              <1>
   521 0000202C B800540000          <1>     mov eax, 5400h  ;Get verify flag
   522 00002031 CD21                <1>     int 21h
   523 00002033 8805(C1070000)      <1>     mov byte [verifyFlg], al    ;Save verify flag!
   524                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   525                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   526                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   527 00002039 B800520000          <1>     mov eax, 5200h
   528 0000203E CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   529 00002040 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   530 00002044 89CB                <1>     mov ebx, ecx
   531 00002046 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   532 00002049 B800480000          <1>     mov eax, 4800h
   533 0000204E CD21                <1>     int 21h
   534 00002050 731E                <1>     jnc .bufOk
   535 00002052 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   536 00002054 750C                <1>     jnz .okSize
   537                              <1> .badAlloc:
   538                              <1> ;Not enough memory error!
   539 00002056 488D1573E2FFFF      <1>     lea rdx, cpNoMem
   540 0000205D E9A7F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   541                              <1> .okSize:
   542 00002062 89D9                <1>     mov ecx, ebx    
   543 00002064 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   544 00002067 B800480000          <1>     mov eax, 4800h
   545 0000206C CD21                <1>     int 21h
   546 0000206E 72E6                <1>     jc .badAlloc
   547                              <1> .bufOk:
   548 00002070 488905(C8070000)    <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   549 00002077 66890D(D0070000)    <1>     mov word [wCpBufSz], cx     ;Save buffer size
   550 0000207E E8AB070000          <1>     call copyParse      ;Do Mode 3 prescan
   551 00002083 0F8228F9FFFF        <1>     jc badSyntaxError
   552 00002089 85C9                <1>     test ecx, ecx   
   553 0000208B 0F8420F9FFFF        <1>     jz badSyntaxError
   554                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   555 00002091 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   556 00002098 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   557 000020A0 FFC9                <1>     dec ecx ;Turn into offset
   558 000020A2 4801CE              <1>     add rsi, rcx
   559 000020A5 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   560 000020A7 FD                  <1>     std ;Go in reverse
   561                              <1> .sd:    ;At this point, any switch chars affect destination!
   562 000020A8 E8B8230000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   563 000020AD 8A0558DFFFFF        <1>     mov al, byte [switchChar]
   564 000020B3 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   565 000020B6 7509                <1>     jne .noSwitch
   566                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   567 000020B8 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   568 000020BC 50                  <1>     push rax        ;Push the switchchar
   569 000020BD FFC2                <1>     inc edx         ;Inc the counter
   570 000020BF EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   571                              <1> .noSwitch:
   572                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   573 000020C1 85D2                <1>     test edx, edx
   574 000020C3 7412                <1>     jz .noDestSwitch
   575                              <1> .ns1:
   576 000020C5 58                  <1>     pop rax ;Pop the switch char
   577 000020C6 B304                <1>     mov bl, ascDes
   578 000020C8 E870040000          <1>     call .doSwitchRev
   579 000020CD 0F85DB040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   580 000020D3 FFCA                <1>     dec edx
   581 000020D5 75EE                <1>     jnz .ns1
   582                              <1> .noDestSwitch:
   583                              <1> ;Now search for the starting delimiter or start of line
   584 000020D7 48FFC6              <1>     inc rsi ;Go to the last char in the path
   585                              <1> .noSwitchLp:
   586 000020DA AC                  <1>     lodsb   ;Get char at rsi, go back a char
   587 000020DB E893230000          <1>     call isALdelimiter
   588 000020E0 7412                <1>     je .destFnd
   589 000020E2 8A0523DFFFFF        <1>     mov al, byte [switchChar]
   590 000020E8 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   591 000020EB 7404                <1>     je .se  ;Jump if so!
   592 000020ED FFC9                <1>     dec ecx ;One less char left to search
   593 000020EF EBE9                <1>     jmp short .noSwitchLp
   594                              <1> .se:
   595 000020F1 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   596                              <1> .destFnd:
   597 000020F4 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   598 000020FB FC                  <1>     cld 
   599 000020FC 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   600 000020FF 488D3D(14070000)    <1>     lea rdi, destSpec
   601 00002106 57                  <1>     push rdi
   602 00002107 E88A240000          <1>     call cpDelimPathToBufz ;Copy this over!   
   603 0000210C 5F                  <1>     pop rdi
   604 0000210D E80A240000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   605 00002112 48893D(9E070000)    <1>     mov qword [destPtr], rdi
   606 00002119 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   607 0000211D 7517                <1>     jne .destEnd    ;Dont worry
   608 0000211F 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   609 00002121 E824230000          <1>     call ucChar             ;Make sure we UC the drive letter
   610 00002126 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   611 00002128 4881C702000000      <1>     add rdi, 2              ;Point to this null
   612 0000212F 48893D(9E070000)    <1>     mov qword [destPtr], rdi    ;Store chars over the null
   613                              <1> .destEnd:
   614                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   615 00002136 8025(D6070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   616 0000213D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   617                              <1> .srcLp: ;Jump to with rsi pointing to portion of the cmdline to scan
   618 00002144 E81C230000          <1>     call skipDelimiters 
   619 00002149 8A05BCDEFFFF        <1>     mov al, byte [switchChar]
   620 0000214F 3806                <1>     cmp byte [rsi], al
   621 00002151 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   622                              <1>     ;rsi points to switch after switchchar
   623 00002153 B301                <1>     mov bl, ascSrc
   624 00002155 E8DD030000          <1>     call .doSwitch
   625 0000215A 0F854E040000        <1>     jnz .badExit
   626 00002160 4881C602000000      <1>     add rsi, 2
   627 00002167 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   628                              <1> .noSrcSw:
   629 00002169 4839F5              <1>     cmp rbp, rsi
   630 0000216C 7527                <1>     jne .noSameSrcDest
   631                              <1>     ;Here if the destination we specified earlier is the same as the source
   632                              <1>     ;This means, the actual destination is the current default drive
   633                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   634 0000216E E8AF220000          <1>     call getCurrentDrive    ;Get current drive
   635 00002173 0441                <1>     add al, "A"             ;Turn into a drive letter
   636 00002175 B43A                <1>     mov ah, ":"
   637 00002177 0FB7C0              <1>     movzx eax, ax
   638 0000217A 8905(14070000)      <1>     mov dword [destSpec], eax   ;Add a default null terminator
   639 00002180 488D3D(16070000)    <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   640 00002187 48893D(9E070000)    <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   641 0000218E 800D(D6070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   642                              <1> .noSameSrcDest:
   643 00002195 488D3D(92060000)    <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   644 0000219C 57                  <1>     push rdi
   645 0000219D E8F4230000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   646 000021A2 5F                  <1>     pop rdi
   647                              <1>     ;Now go forwards and pick up any more switches.
   648 000021A3 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   649                              <1> .swSrcSwPost:
   650 000021A6 E8BA220000          <1>     call skipDelimiters ;Skips trailing delimiters
   651 000021AB 8A055ADEFFFF        <1>     mov al, byte [switchChar]
   652 000021B1 3806                <1>     cmp byte [rsi], al
   653 000021B3 7516                <1>     jne .swSrcSwPostExit
   654                              <1>     ;rsi points to switch after switchchar
   655 000021B5 B301                <1>     mov bl, ascSrc
   656 000021B7 E87B030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   657 000021BC 0F85EC030000        <1>     jnz .badExit
   658 000021C2 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   659 000021C9 EBDB                <1>     jmp short .swSrcSwPost
   660                              <1> .swSrcSwPostExit:
   661 000021CB 4889FE              <1>     mov rsi, rdi
   662 000021CE E82B240000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   663 000021D3 7507                <1>     jnz .oneCp
   664 000021D5 800D(D6070000)08    <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   665                              <1> .oneCp:
   666 000021DC E83B230000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   667 000021E1 48893D(96070000)    <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   668 000021E8 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   669 000021EC 7517                <1>     jne .srcEnd             ;Dont worry
   670 000021EE 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   671 000021F0 E855220000          <1>     call ucChar             ;Make sure we UC the drive letter
   672 000021F5 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   673 000021F7 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   674 000021FE 48893D(96070000)    <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   675                              <1> .srcEnd:
   676                              <1> ;Now uppercase both paths
   677 00002205 488D35(92060000)    <1>     lea rsi, srcSpec
   678 0000220C E845220000          <1>     call normalisePath
   679 00002211 488D3D(14070000)    <1>     lea rdi, destSpec
   680 00002218 E839220000          <1>     call normalisePath
   681 0000221D 57                  <1>     push rdi
   682 0000221E F605(D6070000)80    <1>     test byte [bCpFlg], mod3Cpy
   683 00002225 7412                <1>     jz .notm3
   684                              <1> ;Now we scan for a + in the src spc and if one is found, overwrite it with a <NUL>
   685 00002227 4889F7              <1>     mov rdi, rsi    ;Get the src string in rdi
   686 0000222A E811220000          <1>     call strlen 
   687 0000222F B02B                <1>     mov al, "+"
   688 00002231 F2AE                <1>     repne scasb 
   689 00002233 7504                <1>     jne .notm3  ;If not equal, exit
   690 00002235 C647FF00            <1>     mov byte [rdi - 1], 0
   691                              <1> .notm3:
   692                              <1> ;Now establish if the source is a directory or not!
   693 00002239 5F                  <1>     pop rdi ;Get back the destspec ptr
   694 0000223A F605(D6070000)08    <1>     test byte [bCpFlg], wcSrc
   695 00002241 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   696 00002243 488D15(92060000)    <1>     lea rdx, srcSpec
   697 0000224A 4889D6              <1>     mov rsi, rdx
   698 0000224D 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   699 0000224F 80FC3A              <1>     cmp ah, ":"
   700 00002252 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   701 00002254 AC                  <1>     lodsb           ;Get char past :
   702 00002255 84C0                <1>     test al, al     ;Is byte three nul?
   703 00002257 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   704 00002259 3A05ABDDFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   705 0000225F 7515                <1>     jne .isSrcDir
   706 00002261 AC                  <1>     lodsb           ;Get char past char past "X:\"
   707 00002262 84C0                <1>     test al, al     
   708 00002264 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   709                              <1> .srcStorWc:
   710                              <1> ;rsi points past the char to store the WC at
   711 00002266 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   712 0000226D 800D(D6070000)08    <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   713 00002274 EB44                <1>     jmp short .checkDestDir
   714                              <1> .isSrcDir:
   715 00002276 B910000000          <1>     mov ecx, dirDirectory
   716 0000227B B8004E0000          <1>     mov eax, 4E00h
   717 00002280 CD21                <1>     int 21h
   718 00002282 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   719                              <1>     ;Was the file we found actually a directory?
   720 00002284 803D(8C010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   721 0000228B 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   722 0000228D 4889D7              <1>     mov rdi, rdx
   723 00002290 E8AB210000          <1>     call strlen
   724 00002295 FFC9                <1>     dec ecx
   725 00002297 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   726 0000229A 8A056ADDFFFF        <1>     mov al, byte [pathSep]
   727 000022A0 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   728 000022A3 7401                <1>     je .srctpsp
   729 000022A5 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   730                              <1> .srctpsp:
   731 000022A6 48893D(96070000)    <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   732 000022AD B82A2E2A00          <1>     mov eax, "*.*"
   733 000022B2 AB                  <1>     stosd   ;Store the WC with terminating nul!
   734 000022B3 800D(D6070000)08    <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   735                              <1> .checkDestDir:
   736                              <1> ;Now establish if destination is a directory or not!
   737 000022BA F605(D6070000)20    <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   738 000022C1 0F8562010000        <1>     jnz .mod1
   739 000022C7 488D35(14070000)    <1>     lea rsi, destSpec
   740 000022CE 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   741 000022D0 80FC3A              <1>     cmp ah, ":"
   742 000022D3 751A                <1>     jne .isDestDir
   743 000022D5 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   744 000022D7 84C0                <1>     test al, al ;Is byte three nul?
   745 000022D9 0F844A010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   746 000022DF 84E4                <1>     test ah, ah ;Is byte four nul?
   747 000022E1 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   748 000022E3 3A0521DDFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   749 000022E9 0F843A010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   750                              <1> .isDestDir:
   751                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   752 000022EF 488D15(14070000)    <1>     lea rdx, destSpec
   753 000022F6 B910000000          <1>     mov ecx, dirDirectory
   754 000022FB B8004E0000          <1>     mov eax, 4E00h
   755 00002300 CD21                <1>     int 21h
   756 00002302 7237                <1>     jc .mod2
   757                              <1>     ;Was the file we found actually a directory?
   758 00002304 803D(8C010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   759 0000230B 752E                <1>     jne .mod2
   760                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   761                              <1>     ;If not, we need to place one there!
   762 0000230D 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   763 00002310 E82B210000          <1>     call strlen
   764 00002315 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   765 00002317 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   766 0000231A 0FB605E9DCFFFF      <1>     movzx eax, byte [pathSep]
   767 00002321 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   768 00002324 0F84FF000000        <1>     je .mod1        ;If so, skip adding another one!
   769 0000232A 66AB                <1>     stosw           ;Else, store the pathsep and null!
   770 0000232C 48FFCF              <1>     dec rdi         ;Point back to null
   771 0000232F 48893D(9E070000)    <1>     mov qword [destPtr], rdi    ;Save this pointer
   772 00002336 E9EE000000          <1>     jmp .mod1
   773                              <1> .mod2:
   774                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   775                              <1> ; to rename wildcard semantics. Always run through this as the destination
   776                              <1> ; name may have wildcards in it! But we don't add any.
   777 0000233B 800D(D6070000)40    <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   778 00002342 488D35(14070000)    <1>     lea rsi, destSpec
   779 00002349 E8B0220000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   780 0000234E 7407                <1>     jz .m2Wc
   781 00002350 800D(D6070000)10    <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   782                              <1> .m2Wc:
   783                              <1> ;Search for the source file
   784 00002357 488D15(92060000)    <1>     lea rdx, srcSpec
   785 0000235E 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   786 00002360 B8004E0000          <1>     mov eax, 4E00h
   787 00002365 CD21                <1>     int 21h
   788 00002367 0F8237020000        <1>     jc .badSrcFile
   789 0000236D 488B35(9E070000)    <1>     mov rsi, qword [destPtr]
   790 00002374 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   791 00002378 B801290000          <1>     mov eax, 2901h
   792 0000237D CD21                <1>     int 21h
   793                              <1> .md2Lp:
   794 0000237F 488D35(95010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   795 00002386 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   796 0000238A B801290000          <1>     mov eax, 2901h
   797 0000238F CD21                <1>     int 21h  
   798                              <1> ;Now depending on source and dest patterns, build a filename in renName
   799 00002391 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   800 00002395 488D3D(A6070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
   801 0000239C 57                  <1>     push rdi
   802 0000239D 48A5                <1>     movsq
   803 0000239F 66A5                <1>     movsw
   804 000023A1 A4                  <1>     movsb
   805 000023A2 5F                  <1>     pop rdi
   806 000023A3 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   807 000023A7 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   808                              <1> .md2NameMake:
   809 000023AC AC                  <1>     lodsb   ;Get the char from the source string
   810 000023AD 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   811 000023B0 7502                <1>     jne .noStore    ;Dont store the char there
   812 000023B2 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   813                              <1> .noStore:
   814 000023B4 48FFC7              <1>     inc rdi ;Goto next char position
   815 000023B7 FFC9                <1>     dec ecx
   816 000023B9 75F1                <1>     jnz .md2NameMake
   817 000023BB 488D35(95010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   818 000023C2 488B3D(96070000)    <1>     mov rdi, qword [srcPtr]
   819 000023C9 E859200000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   820 000023CE 488D35(A6070000)    <1>     lea rsi, renName
   821 000023D5 488B3D(9E070000)    <1>     mov rdi, qword [destPtr]
   822 000023DC E85F210000          <1>     call FCBToAsciiz
   823 000023E1 E825010000          <1>     call .prntFilespec  ;Prints the source filename
   824 000023E6 E8F8010000          <1>     call copyMain       ;And copy it!
   825 000023EB 731D                <1>     jnc .md2Ok
   826                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   827                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   828 000023ED 3CFD                <1>     cmp al, -3
   829 000023EF 0F848C010000        <1>     je .badBinCdevErr
   830 000023F5 3CFE                <1>     cmp al, -2
   831 000023F7 0F848D010000        <1>     je .rootDirFull
   832 000023FD 3CFF                <1>     cmp al, -1      ;Source and destination same?
   833 000023FF 0F848E010000        <1>     je .badSameFile 
   834 00002405 E9A4010000          <1>     jmp .badExit    ;Else generic error message
   835                              <1> .md2Ok:
   836 0000240A F605(D6070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   837 00002411 0F8489000000        <1>     jz .copyDone        ;Copy complete!
   838 00002417 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   839 0000241C CD21                <1>     int 21h
   840 0000241E 0F827C000000        <1>     jc .copyDone        ;If no more files, we are done!
   841 00002424 E956FFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   842                              <1> .mod1:
   843                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   844 00002429 800D(D6070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   845 00002430 488D15(92060000)    <1>     lea rdx, srcSpec
   846 00002437 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   847 00002439 B8004E0000          <1>     mov eax, 4E00h
   848 0000243E CD21                <1>     int 21h
   849 00002440 0F825E010000        <1>     jc .badSrcFile  ;File not found error!!
   850                              <1> .mod1Lp:
   851 00002446 488D35(95010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   852 0000244D 488B3D(96070000)    <1>     mov rdi, qword [srcPtr]
   853 00002454 E8DD1F0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   854 00002459 488B3D(9E070000)    <1>     mov rdi, qword [destPtr]
   855 00002460 E8D11F0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   856 00002465 E8A1000000          <1>     call .prntFilespec
   857 0000246A E874010000          <1>     call copyMain   ;And copy it!
   858 0000246F 731D                <1>     jnc .mod1Ok
   859                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   860                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   861 00002471 3CFD                <1>     cmp al, -3
   862 00002473 0F8408010000        <1>     je .badBinCdevErr
   863 00002479 3CFE                <1>     cmp al, -2
   864 0000247B 0F8409010000        <1>     je .rootDirFull
   865 00002481 3CFF                <1>     cmp al, -1      ;Source and destination same?
   866 00002483 0F840A010000        <1>     je .badSameFile 
   867 00002489 E920010000          <1>     jmp .badExit    ;Else generic error message
   868                              <1> .mod1Ok:
   869 0000248E F605(D6070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   870 00002495 7409                <1>     jz .copyDone
   871 00002497 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   872 0000249C CD21                <1>     int 21h
   873 0000249E 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   874                              <1> 
   875                              <1> .copyDone:
   876 000024A0 F605(D6070000)80    <1>     test byte [bCpFlg], mod3Cpy ;If not mode 3, just exit!
   877 000024A7 743E                <1>     jz .cdNotM3
   878                              <1> ;Else, we advance the pointers and jump again!
   879 000024A9 488B35(B9070000)    <1>     mov rsi, qword [pNextFspec]
   880 000024B0 483B35(B1070000)    <1>     cmp rsi, qword [pLastFspec] ;Did we check the last section?
   881 000024B7 742E                <1>     je .cdNotM3                 ;If yes, we are done!
   882                              <1> .cdM3lp:
   883 000024B9 E8B9030000          <1>     call copyParse.gotoVar      ;Else move rsi to the var
   884 000024BE 3C0D                <1>     cmp al, CR
   885 000024C0 7425                <1>     je .cdNotM3
   886 000024C2 3C2B                <1>     cmp al, "+"
   887 000024C4 740B                <1>     je .cdPlus
   888 000024C6 E8C7030000          <1>     call copyParse.skipVar  ;Go to the end of the var (guaranteed @ a +)
   889 000024CB 3C0D                <1>     cmp al, CR
   890 000024CD 7418                <1>     je .cdNotM3
   891 000024CF EBE8                <1>     jmp short .cdM3lp
   892                              <1> .cdPlus:
   893 000024D1 48FFC6              <1>     inc rsi ;Go past the + sign
   894 000024D4 488935(B9070000)    <1>     mov qword [pNextFspec], rsi ;Store this ptr
   895 000024DB 8025(D6070000)94    <1>     and byte [bCpFlg], mod3Cpy|oneDest|ascDes   ;Clear flags except 4 dest
   896 000024E2 E95DFCFFFF          <1>     jmp .srcLp
   897                              <1> .cdNotM3:
   898 000024E7 E8CC000000          <1>     call .copyCleanup   ;Clean up resources!
   899 000024EC 8B05(D2070000)      <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   900 000024F2 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   901 000024F7 E816210000          <1>     call printDecimalValLB   ;n File(s) copied
   902 000024FC 488D15BBDDFFFF      <1>     lea rdx, copyOk
   903 00002503 B800090000          <1>     mov eax, 0900h
   904 00002508 CD21                <1>     int 21h    
   905                              <1>     return
    13                              <2> %%_ret:
    14 0000250A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   906                              <1> 
   907                              <1> .prntFilespec:
   908                              <1> ;Prints the filespec to STDOUT. If the path is 
   909 0000250B F605(D6070000)88    <1>     test byte [bCpFlg], wcSrc|mod3Cpy   ;If no wc or mode 3 don't print name
   910                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002512 74(0A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   911 00002514 488D15(92060000)    <1>     lea rdx, srcSpec
   912 0000251B 4889D7              <1>     mov rdi, rdx
   913 0000251E E81D1F0000          <1>     call strlen
   914 00002523 FFC9                <1>     dec ecx     ;Drop terminating null
   915 00002525 BB01000000          <1>     mov ebx, 1  ;STDOUT
   916 0000252A B800400000          <1>     mov eax, 4000h  ;Write
   917 0000252F CD21                <1>     int 21h
   918 00002531 E8DD1C0000          <1>     call printCRLF
   919                              <1>     return
    13                              <2> %%_ret:
    14 00002536 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   920                              <1> .doSwitch:
   921                              <1> ;Since switches can come before or after a name, handle them here!
   922                              <1> ;If invalid switch char, returns ZF=NZ.
   923                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   924                              <1> ;       rsi -> Switchchar
   925 00002537 56                  <1>     push rsi
   926 00002538 48FFC6              <1>     inc rsi ;Point to char past switchchar
   927 0000253B AC                  <1>     lodsb   ;Get this char, goto next char
   928 0000253C 5E                  <1>     pop rsi
   929                              <1> .doSwitchRev:
   930 0000253D E8081F0000          <1>     call ucChar
   931 00002542 3C41                <1>     cmp al, "A"
   932 00002544 7510                <1>     jne .cB
   933 00002546 081D(D6070000)      <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   934 0000254C 8025(D6070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   935                              <1> .cExit:
   936 00002553 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   937                              <1>     return
    13                              <2> %%_ret:
    14 00002555 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   938                              <1> .cB:
   939 00002556 3C42                <1>     cmp al, "B"
   940 00002558 7511                <1>     jne .cV
   941 0000255A F6D3                <1>     not bl  ;Reverse bits
   942 0000255C 201D(D6070000)      <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   943 00002562 800D(D6070000)02    <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   944 00002569 EBE8                <1>     jmp short .cExit
   945                              <1> .cV:
   946 0000256B 3C56                <1>     cmp al, "V"
   947                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000256D 75(55)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   948 0000256F F605(C1070000)FF    <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   949 00002576 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   950                              <1>     ;Else, set it. We return it at the end!
   951 00002578 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   952 0000257D CD21                <1>     int 21h
   953 0000257F EBD2                <1>     jmp short .cExit
   954                              <1> 
   955                              <1> ;COPY Bad Exits!!
   956                              <1> .badBinCdevErr:
   957 00002581 488D15EADFFFFF      <1>     lea rdx, binDevErr
   958 00002588 EB10                <1>     jmp short .badExitCmn
   959                              <1> .rootDirFull:
   960 0000258A 488D15C9DCFFFF      <1>     lea rdx, fulRootDir
   961 00002591 EB07                <1>     jmp short .badExitCmn
   962                              <1> .badSameFile:
   963 00002593 488D15D6DCFFFF      <1>     lea rdx, noSelfCopy
   964                              <1> .badExitCmn:
   965 0000259A E86AF4FFFF          <1>     call badCmn     ;Print error message
   966 0000259F E9FCFEFFFF          <1>     jmp .copyDone   ;Clean resources
   967                              <1> .badSrcFile:
   968 000025A4 E850F4FFFF          <1>     call badFnf  ;File not found!!
   969 000025A9 E9F2FEFFFF          <1>     jmp .copyDone
   970                              <1> .badExit:
   971 000025AE E819F4FFFF          <1>     call badParamError
   972 000025B3 E9E8FEFFFF          <1>     jmp .copyDone
   973                              <1> 
   974                              <1> .copyCleanup:
   975                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   976                              <1> ;Handles are never open in this process!
   977 000025B8 B8002E0000          <1>     mov eax, 2E00h
   978 000025BD 8A05(C1070000)      <1>     mov al, byte [verifyFlg]
   979 000025C3 CD21                <1>     int 21h
   980 000025C5 4150                <1>     push r8
   981 000025C7 4C8B05(C8070000)    <1>     mov r8, qword [cpBufPtr]
   982 000025CE 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   983 000025D1 7407                <1>     jz .skipFree
   984 000025D3 B800490000          <1>     mov eax, 4900h
   985 000025D8 CD21                <1>     int 21h
   986                              <1> .skipFree:
   987 000025DA 4158                <1>     pop r8
   988 000025DC 0F826D210000        <1>     jc freezePC ;If free fails, man....
   989                              <1>     return
    13                              <2> %%_ret:
    14 000025E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   990                              <1> 
   991                              <1> copyMain:
   992                              <1> ;This is the main copying procedure! 
   993                              <1> ;Start by checking the two files are not the same. If so, complain!
   994                              <1> ;If returns CF=CY, error code in al. 
   995                              <1> ;   If al = -1, same filename error!
   996                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   997                              <1> ;   If al = -3, attempted binary read from a device
   998                              <1> ;If returns CF=NC, file copied successfully.
   999                              <1> ;Check the two files are not the same using truename in searchspec
  1000 000025E3 488D35(92060000)    <1>     lea rsi, srcSpec
  1001 000025EA 488D3D(F1040000)    <1>     lea rdi, searchSpec
  1002 000025F1 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1003 000025F6 CD21                <1>     int 21h 
  1004 000025F8 57                  <1>     push rdi    ;Save this searchSpec
  1005 000025F9 488D35(14070000)    <1>     lea rsi, destSpec
  1006 00002600 488D3D(73050000)    <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1007 00002607 B800600000          <1>     mov eax, 6000h
  1008 0000260C CD21                <1>     int 21h
  1009 0000260E 5E                  <1>     pop rsi     ;Get this ptr back
  1010 0000260F B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1011 00002614 CD2F                <1>     int 2Fh
  1012 00002616 755C                <1>     jnz .notSameFile
  1013                              <1> ;Now we check if we are in a concat mode. 
  1014                              <1> ; If in Concat and we are on the first file, just move the file pointer 
  1015                              <1> ; to the end of the file and return.
  1016                              <1> ; If in Concat and we are not on the first file, print content of 
  1017                              <1> ; destination lost and return.
  1018                              <1> ; Else, exist bad.
  1019                              <1> ;Concat is defined as (mod3Cpy or wcSrc) and oneDest
  1020 00002618 0FB605(D6070000)    <1>     movzx eax, byte [bCpFlg]   ;Get the flags
  1021 0000261F 89C1                <1>     mov ecx, eax        ;Copy the flags
  1022 00002621 81E110000000        <1>     and ecx, oneDest    ;Isolate for AND
  1023 00002627 743C                <1>     jz .sameNameExit    ;If not set, not in Concat mode
  1024 00002629 2588000000          <1>     and eax, mod3Cpy | wcSrc   ;Compute the OR
  1025 0000262E 89C1                <1>     mov ecx, eax
  1026 00002630 2580000000          <1>     and eax, mod3Cpy    ;Save this bit
  1027 00002635 81E108000000        <1>     and ecx, wcSrc      ;And this bit
  1028 0000263B 09C8                <1>     or eax, ecx         ;Construct a single vale.
  1029 0000263D 7426                <1>     jz .sameNameExit    ;If neither bit was set, we don't have condition.
  1030 0000263F 488D15(14070000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1031 00002646 F705(D2070000)FFFF- <1>     test dword [dCpCnt], -1 ;Is this the first file?
  1031 0000264E FFFF                <1>
  1032 00002650 7506                <1>     jnz .notFirstLost   ;If not, we skip this file from copy!
  1033 00002652 E889010000          <1>     call .openFile      ;Moving the fp suffices for the copy
  1034                              <1>     return
    13                              <2> %%_ret:
    14 00002657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1035                              <1> .notFirstLost:
  1036 00002658 488D1535DCFFFF      <1>     lea rdx, filLostErr
  1037 0000265F E8B61B0000          <1>     call printString    ;Print this string and skip this file
  1038                              <1>     return
    13                              <2> %%_ret:
    14 00002664 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1039                              <1> .sameNameExit:
  1040 00002665 B0FF                <1>     mov al, -1  ;Same filename error!
  1041                              <1> .badExit:
  1042 00002667 50                  <1>     push rax
  1043 00002668 E8DB000000          <1>     call .exitCleanup
  1044 0000266D 58                  <1>     pop rax
  1045 0000266E F9                  <1>     stc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 0000266F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .badExitNoSpace:
  1048 00002670 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1049 00002672 EBF3                <1>     jmp short .badExit
  1050                              <1> .notSameFile:
  1051                              <1> ;Open source with read permission
  1052                              <1> ;Open destination with write permission
  1053 00002674 488D15(92060000)    <1>     lea rdx, srcSpec
  1054 0000267B B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1055 00002680 CD21                <1>     int 21h
  1056 00002682 72E3                <1>     jc .badExit
  1057 00002684 668905(C2070000)    <1>     mov word [sourceHdl], ax
  1058 0000268B 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1059                              <1> 
  1060 0000268E B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1061 00002693 CD21                <1>     int 21h
  1062 00002695 668915(C6070000)    <1>     mov word [srcHdlInfo], dx   ;Store information here
  1063 0000269C F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1064 0000269F 7412                <1>     jz .prepCopy
  1065                              <1> ;Check the binary flag was not set on this source filespec
  1066 000026A1 B0FD                <1>     mov al, -3  ;Prep the error code
  1067 000026A3 F605(D6070000)02    <1>     test byte [bCpFlg], binSrc
  1068 000026AA 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1069 000026AC 800D(D6070000)01    <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1070                              <1> .prepCopy:
  1071 000026B3 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1072 000026B5 488B15(C8070000)    <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1073                              <1> .copyLoop:
  1074                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1075                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1076                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1077                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1078 000026BC 0FB70D(D0070000)    <1>     movzx ecx, word [wCpBufSz]
  1079 000026C3 0FB71D(C2070000)    <1>     movzx ebx, word [sourceHdl]
  1080 000026CA B8003F0000          <1>     mov eax, 3F00h ;Read
  1081 000026CF CD21                <1>     int 21h
  1082 000026D1 7294                <1>     jc .badExit
  1083 000026D3 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1084 000026D5 F605(D6070000)80    <1>     test byte [bCpFlg], mod3Cpy
  1085 000026DC 750B                <1>     jnz .doMod3BinCheck
  1086 000026DE F605(D6070000)01    <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1087 000026E5 7431                <1>     jz .notAscii
  1088 000026E7 EB09                <1>     jmp short .doAscii
  1089                              <1> .doMod3BinCheck:
  1090 000026E9 F605(D6070000)02    <1>     test byte [bCpFlg], binSrc
  1091 000026F0 7526                <1>     jnz .notAscii
  1092                              <1> .doAscii:
  1093                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1094 000026F2 52                  <1>     push rdx
  1095 000026F3 0FB715(C6070000)    <1>     movzx edx, word [srcHdlInfo]
  1096 000026FA 66F7C28000          <1>     test dx, 80h    ;Is this a chardev?
  1097 000026FF 5A                  <1>     pop rdx
  1098 00002700 7503                <1>     jnz .charDev
  1099 00002702 67E343              <1>     jecxz .exitCleanup  ;We read no bytes from disk so can't scan for an EOF!
  1100                              <1> .charDev:
  1101 00002705 50                  <1>     push rax        ;Save the original char count
  1102 00002706 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1103 00002709 B01A                <1>     mov al, EOF
  1104 0000270B F2AE                <1>     repne scasb     ;Loop thru now!
  1105 0000270D 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1106 0000270F 59                  <1>     pop rcx         ;Get the original read count into ecx
  1107 00002710 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1108                              <1> ;Here if EOF found.
  1109 00002712 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1110 00002714 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1111 00002716 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1112                              <1> .notAscii:
  1113 00002718 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1114 0000271A 742C                <1>     jz .exitCleanup
  1115 0000271C 51                  <1>     push rcx    ;Save the number of bytes to write
  1116 0000271D 52                  <1>     push rdx    ;Save the buffer ptr
  1117 0000271E E891000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1118 00002723 5A                  <1>     pop rdx
  1119 00002724 59                  <1>     pop rcx
  1120 00002725 0F8245FFFFFF        <1>     jc .badExitNoSpace
  1121 0000272B B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1122 00002730 CD21                <1>     int 21h
  1123 00002732 0F822FFFFFFF        <1>     jc .badExit
  1124 00002738 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1125 0000273A 0F8530FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1126 00002740 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1127 00002742 0F8474FFFFFF        <1>     jz .copyLoop            ;Set possible in ASCII mode
  1128                              <1> .exitCleanup:
  1129                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1130 00002748 F605(D6070000)04    <1>     test byte [bCpFlg], ascDes
  1131 0000274F 7425                <1>     jz .ecNoEOF
  1132 00002751 0FBF1D(C4070000)    <1>     movsx ebx, word [destHdl]
  1133 00002758 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1134 0000275E 7416                <1>     je .ecNoEOF
  1135 00002760 488B15(C8070000)    <1>     mov rdx, qword [cpBufPtr]
  1136 00002767 C6021A              <1>     mov byte [rdx], EOF
  1137 0000276A B901000000          <1>     mov ecx, 1
  1138 0000276F B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1139 00002774 CD21                <1>     int 21h
  1140                              <1> .ecNoEOF:
  1141                              <1> ;Now close copy handles!
  1142 00002776 668B1D(C2070000)    <1>     mov bx, word [sourceHdl]
  1143 0000277D 6681FBFFFF          <1>     cmp bx, -1
  1144 00002782 7410                <1>     je .beSkipSource
  1145 00002784 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1146 00002789 CD21                <1>     int 21h
  1147 0000278B 66C705(C2070000)FF- <1>     mov word [sourceHdl], -1    ;Reset the var
  1147 00002793 FF                  <1>
  1148                              <1> .beSkipSource:
  1149 00002794 668B1D(C4070000)    <1>     mov bx, word [destHdl]
  1150 0000279B 6681FBFFFF          <1>     cmp bx, -1
  1151                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000027A0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000027A2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1152 000027A3 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1153 000027A8 CD21                <1>     int 21h
  1154 000027AA 66C705(C4070000)FF- <1>     mov word [destHdl], -1  ;Reset the var
  1154 000027B2 FF                  <1>
  1155                              <1>     return
    13                              <2> %%_ret:
    14 000027B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1156                              <1> 
  1157                              <1> .getWriteHandle:
  1158                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1159                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1160                              <1> ;Input: Nothing
  1161                              <1> ;Output: CF=NC: bx = Handle to the file
  1162                              <1> ;        CF=CY: File failed to open/create. 
  1163 000027B4 0FB71D(C4070000)    <1>     movzx ebx, word [destHdl]
  1164 000027BB 6681FBFFFF          <1>     cmp bx, -1
  1165 000027C0 7402                <1>     je .gwHProceed
  1166 000027C2 F8                  <1>     clc     ;Clear the CF
  1167                              <1>     return
    13                              <2> %%_ret:
    14 000027C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1168                              <1> .gwHProceed:
  1169                              <1> ;Here if the destination has not been opened yet!
  1170 000027C4 488D15(14070000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1171                              <1> ;Now we create/reopen the file here!
  1172 000027CB F605(D6070000)10    <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1173 000027D2 743E                <1>     jz .createFile
  1174                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1175                              <1> ;If this is more than file 0, we open
  1176 000027D4 813D(D2070000)0000- <1>     cmp dword [dCpCnt], 0
  1176 000027DC 0000                <1>
  1177 000027DE 7432                <1>     je .createFile
  1178                              <1> ;Now we open the file instead and append to the end
  1179                              <1> .openFile:
  1180 000027E0 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1181 000027E5 CD21                <1>     int 21h
  1182                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000027E7 72(C3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1183 000027E9 FF05(D2070000)      <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1184 000027EF 668905(C4070000)    <1>     mov word [destHdl], ax
  1185 000027F6 0FB7D8              <1>     movzx ebx, ax
  1186 000027F9 31C9                <1>     xor ecx, ecx
  1187 000027FB 31D2                <1>     xor edx, edx
  1188 000027FD F605(D6070000)04    <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1189 00002804 7404                <1>     jz .gwHNoAscii
  1190 00002806 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1191 00002808 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1192                              <1> .gwHNoAscii:
  1193 0000280A B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1194 0000280F CD21                <1>     int 21h
  1195                              <1>     return
    13                              <2> %%_ret:
    14 00002811 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1196                              <1> .createFile:
  1197 00002812 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1198 00002817 31C9                <1>     xor ecx, ecx    ;No file attributes
  1199 00002819 CD21                <1>     int 21h
  1200                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000281B 72(11)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1201 0000281D FF05(D2070000)      <1>     inc dword [dCpCnt]  ;File created for writing!
  1202 00002823 668905(C4070000)    <1>     mov word [destHdl], ax
  1203 0000282A 0FB7D8              <1>     movzx ebx, ax
  1204                              <1>     return
    13                              <2> %%_ret:
    14 0000282D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1205                              <1> 
  1206                              <1> copyParse:
  1207                              <1> ;Checks to see if we are in mode 3. If we are, sets up the 
  1208                              <1> ; mode 3 variables. Ignores switches making life so much better.
  1209 0000282E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1210 00002835 488935(B9070000)    <1>     mov qword [pNextFspec], rsi     ;Setup this var here
  1211 0000283C 31C9                <1>     xor ecx, ecx    ;Use as a filespec counter in a "+ +" region
  1212                              <1> .cp1:
  1213 0000283E E834000000          <1>     call .gotoVar   ;Goto filespec. Move rsi->First non-terminator char or +
  1214 00002843 3C0D                <1>     cmp al, CR
  1215 00002845 7428                <1>     je .cpExit
  1216 00002847 3C2B                <1>     cmp al, "+"
  1217 00002849 740F                <1>     je .cpPlus
  1218 0000284B FFC1                <1>     inc ecx ;Add another file to the count
  1219 0000284D E840000000          <1>     call .skipVar   ;Goto end of var. Move rsi->First terminator char or +
  1220 00002852 3C0D                <1>     cmp al, CR
  1221 00002854 7419                <1>     je .cpExit
  1222 00002856 3C2B                <1>     cmp al, "+"
  1223 00002858 75E4                <1>     jne .cp1 
  1224                              <1> .cpPlus:
  1225                              <1> ;Here we hit a "+"
  1226 0000285A 31C9                <1>     xor ecx, ecx    ;Clean this var again
  1227 0000285C 800D(D6070000)80    <1>     or byte [bCpFlg], mod3Cpy   ;We are in mode 3 if we are here
  1228 00002863 48FFC6              <1>     inc rsi         ;Go past the + sign
  1229 00002866 488935(B1070000)    <1>     mov qword [pLastFspec], rsi ;Save this var as we go
  1230 0000286D EBCF                <1>     jmp short .cp1
  1231                              <1> .cpExit:
  1232 0000286F 81F903000000        <1>     cmp ecx, 3  ;If we have more than 2 files w/o a + between them, syntax err
  1233 00002875 F5                  <1>     cmc         ;Compliment CF to make CF=CY on error!
  1234                              <1>     return
    13                              <2> %%_ret:
    14 00002876 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1235                              <1> .gotoVar:
  1236                              <1> ;Goes to the next variable, plus sign or CR.
  1237                              <1> ;Returns rsi -> First char of the pathspec, + or CR
  1238 00002877 AC                  <1>     lodsb
  1239 00002878 E8F61B0000          <1>     call isALdelimiter  
  1240 0000287D 74F8                <1>     je .gotoVar         ;Skips delimiters
  1241 0000287F 3A0586D7FFFF        <1>     cmp al, byte [switchChar]
  1242 00002885 7507                <1>     jne .vexit
  1243 00002887 E806000000          <1>     call .skipVar   ;Now skip the string after the cmdline switch
  1244 0000288C EBE9                <1>     jmp short .gotoVar  ;And switches
  1245                              <1> .vexit:
  1246 0000288E 48FFCE              <1>     dec rsi ;Return back to the break condition char
  1247                              <1>     return
    13                              <2> %%_ret:
    14 00002891 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1248                              <1> .skipVar:
  1249                              <1> ;Goes to the delimiter for this string
  1250 00002892 AC                  <1>     lodsb
  1251 00002893 3C0D                <1>     cmp al, CR
  1252 00002895 74F7                <1>     je .vexit
  1253 00002897 3C2B                <1>     cmp al, "+"
  1254 00002899 74F3                <1>     je .vexit
  1255 0000289B E8D31B0000          <1>     call isALdelimiter
  1256 000028A0 74EC                <1>     je .vexit
  1257 000028A2 EBEE                <1>     jmp short .skipVar
  1258                              <1> 
  1259                              <1> 
  1260                              <1> erase:
  1261 000028A4 F605A0D7FFFFFF      <1>     test byte [arg1Flg], -1
  1262 000028AB 0F842DF1FFFF        <1>     jz badArgError
  1263 000028B1 E8231D0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1264                              <1> .dirLp:
  1265 000028B6 488D3D(F1040000)    <1>     lea rdi, searchSpec
  1266 000028BD E85A1C0000          <1>     call findLastPathComponant
  1267 000028C2 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1268 000028C5 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1269 000028C9 B03F                <1>     mov al, "?"
  1270                              <1>     ;Store question marks in the name field
  1271 000028CB 57                  <1>     push rdi
  1272 000028CC 48FFC7              <1>     inc rdi ;Goto the first char
  1273 000028CF B90B000000          <1>     mov ecx, 11
  1274 000028D4 F3AA                <1>     rep stosb
  1275 000028D6 5F                  <1>     pop rdi
  1276 000028D7 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1277 000028DA B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1278 000028DF CD21                <1>     int 21h
  1279 000028E1 3C01                <1>     cmp al, 1
  1280 000028E3 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1281                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1282                              <1>     ;No dirs to handle in here
  1283 000028E9 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1284 000028ED 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1285 000028F0 E84B1C0000          <1>     call FCBToAsciiz    ;Null terminates for free
  1286                              <1>     ;Count the number of ?'s, if 11, we print the message
  1287 000028F5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1288 000028F9 31C9                <1>     xor ecx, ecx
  1289                              <1> .wcScan:
  1290 000028FB AC                  <1>     lodsb
  1291 000028FC 3C3F                <1>     cmp al, "?"
  1292 000028FE 7534                <1>     jne .endCount
  1293 00002900 FFC1                <1>     inc ecx
  1294 00002902 81F90B000000        <1>     cmp ecx, 11
  1295 00002908 75F1                <1>     jne .wcScan
  1296                              <1> .ynmsg:
  1297 0000290A 488D15EFDAFFFF      <1>     lea rdx, ynMes
  1298 00002911 E804190000          <1>     call printString
  1299 00002916 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1300 00002918 CD21                <1>     int 21h ;Get char in al
  1301 0000291A E82B1B0000          <1>     call ucChar ;Uppercase the char
  1302 0000291F 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1303 00002921 740C                <1>     je .endCount1
  1304 00002923 3C4E                <1>     cmp al, "N"
  1305                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002925 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002927 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1306 00002928 E8E6180000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1307 0000292D EBDB                <1>     jmp short .ynmsg    
  1308                              <1> .endCount1:
  1309 0000292F E8DF180000          <1>     call printCRLF
  1310                              <1> .endCount:
  1311                              <1>     ;Now we copy our search template pathstring to delPath
  1312 00002934 488D3D(92060000)    <1>     lea rdi, delPath
  1313 0000293B 488D35(F1040000)    <1>     lea rsi, searchSpec ;Source the chars from here
  1314 00002942 E8EF1A0000          <1>     call strcpy2         ;Copy the string over to delPath
  1315                              <1> .findFile:
  1316                              <1>     ;Now we find first/find next our way through the files
  1317 00002947 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1318 0000294A 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1319 0000294C B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1320 00002951 CD21                <1>     int 21h
  1321 00002953 0F82A0F0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1322                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1323 00002959 E8BE1B0000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1324 0000295E 488D35(95010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1325                              <1> .delNextFile:
  1326                              <1> ;rsi and rdi dont move here
  1327 00002965 E8CC1A0000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1328 0000296A 488D15(92060000)    <1>     lea rdx, delPath
  1329 00002971 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1330 00002976 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1331 00002978 488D15(F1040000)    <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1332 0000297F B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1333 00002984 CD21                <1>     int 21h
  1334 00002986 73DD                <1>     jnc .delNextFile    
  1335 00002988 F8                  <1>     clc ;Clear carry to indicate success
  1336                              <1>     return
    13                              <2> %%_ret:
    14 00002989 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1337                              <1> .noWildcard:
  1338                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1339                              <1>     ; a \*.*<NUL> over the null terminator
  1340 0000298A 488D15(F1040000)    <1>     lea rdx, searchSpec
  1341 00002991 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1342 00002996 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1343 0000299B CD21                <1>     int 21h
  1344 0000299D 0F8256F0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1345 000029A3 F605(8C010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1346 000029AA 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1347                              <1>     ;Else, we are dealing with a dir
  1348 000029AC 4889D7              <1>     mov rdi, rdx
  1349 000029AF 31C9                <1>     xor ecx, ecx
  1350 000029B1 FFC9                <1>     dec ecx
  1351 000029B3 F2AE                <1>     repne scasb ;Go to the end of the line!
  1352 000029B5 48FFCF              <1>     dec rdi
  1353 000029B8 0FB6054BD6FFFF      <1>     movzx eax, byte [pathSep]
  1354 000029BF AA                  <1>     stosb
  1355 000029C0 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1356 000029C5 AB                  <1>     stosd
  1357 000029C6 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1358                              <1> .delMain:   ;Call with rdx -> buffer!
  1359 000029CB B800410000          <1>     mov eax, 4100h  ;Delete File 
  1360 000029D0 CD21                <1>     int 21h
  1361                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029D2 73(89)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1362 000029D4 3C05                <1>     cmp al, errAccDen
  1363 000029D6 0F84E7EFFFFF        <1>     je badAccError ;If the file is RO, fail!
  1364 000029DC E906F0FFFF          <1>     jmp badFileError
  1365                              <1>     return
    13                              <2> %%_ret:
    14 000029E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1366                              <1> 
  1367                              <1> date:
  1368 000029E2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1369 000029E9 E8771A0000          <1>     call skipDelimiters
  1370 000029EE 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1371 000029F1 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1372                              <1> .init:
  1373                              <1>     ;Else, we do interactive mode!
  1374 000029F3 488D1589D9FFFF      <1>     lea rdx, curDate
  1375 000029FA B409                <1>     mov ah, 09h
  1376 000029FC CD21                <1>     int 21h
  1377 000029FE E858190000          <1>     call printFmtDate
  1378                              <1> .noCur:
  1379 00002A03 488D158AD9FFFF      <1>     lea rdx, newDate
  1380 00002A0A B409                <1>     mov ah, 09h
  1381 00002A0C CD21                <1>     int 21h
  1382 00002A0E 488D159ED9FFFF      <1>     lea rdx, ukDate
  1383 00002A15 488D058AD9FFFF      <1>     lea rax, usDate
  1384 00002A1C 488D1D9DD9FFFF      <1>     lea rbx, jpDate
  1385 00002A23 803D(FE000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1386 00002A2A 480F47D3            <1>     cmova rdx, rbx
  1387 00002A2E 480F42D0            <1>     cmovb rdx, rax
  1388 00002A32 B409                <1>     mov ah, 09h
  1389 00002A34 CD21                <1>     int 21h
  1390                              <1> 
  1391 00002A36 488D15(44020000)    <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1392 00002A3D C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1393 00002A40 B40A                <1>     mov ah, 0Ah
  1394 00002A42 CD21                <1>     int 21h
  1395 00002A44 52                  <1>     push rdx
  1396 00002A45 E8C9170000          <1>     call printCRLF
  1397 00002A4A 5A                  <1>     pop rdx
  1398 00002A4B 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1399                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A4F 74(E1)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1400                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1401 00002A51 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1402                              <1> .goDate:
  1403 00002A55 31C0                <1>     xor eax, eax    
  1404 00002A57 803D(FE000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1405 00002A5E 727B                <1>     jb .us
  1406 00002A60 0F87B7000000        <1>     ja .jpn
  1407                              <1>     ;Here for UK style dates
  1408 00002A66 E8A71C0000          <1>     call getByte
  1409 00002A6B 725D                <1>     jc .badDate
  1410 00002A6D 8805(90060000)      <1>     mov byte [td3], al  ;Store the day
  1411 00002A73 E80C010000          <1>     call .validSep
  1412 00002A78 7550                <1>     jne .badDate
  1413 00002A7A E8931C0000          <1>     call getByte
  1414 00002A7F 7249                <1>     jc .badDate
  1415 00002A81 8805(91060000)      <1>     mov byte [td4], al  ;Store month
  1416 00002A87 E8F8000000          <1>     call .validSep
  1417 00002A8C 753C                <1>     jne .badDate
  1418 00002A8E E88B1C0000          <1>     call getNum
  1419 00002A93 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1420 00002A98 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1421 00002A9D 732B                <1>     jae .badDate
  1422 00002A9F 668905(8E060000)    <1>     mov word [td1], ax  ;Store the word directly
  1423                              <1> .writeDate:
  1424 00002AA6 E8BA190000          <1>     call skipDelimiters
  1425 00002AAB 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1426 00002AAE 751A                <1>     jne .badDate
  1427 00002AB0 0FB70D(8E060000)    <1>     movzx ecx, word [td1]   ;Get the year
  1428 00002AB7 668B15(90060000)    <1>     mov dx, word [td3]      ;Read time and date together!
  1429 00002ABE B8002B0000          <1>     mov eax, 2B00h
  1430 00002AC3 CD21                <1>     int 21h
  1431 00002AC5 84C0                <1>     test al, al
  1432                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002AC7 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002AC9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1433                              <1> .badDate:
  1434 00002ACA 488D15A3D8FFFF      <1>     lea rdx, badDate
  1435 00002AD1 E844170000          <1>     call printString
  1436 00002AD6 E928FFFFFF          <1>     jmp date.noCur
  1437                              <1> .us:
  1438 00002ADB E8321C0000          <1>     call getByte
  1439 00002AE0 72E8                <1>     jc .badDate
  1440 00002AE2 8805(91060000)      <1>     mov byte [td4], al  ;Store the month
  1441 00002AE8 E897000000          <1>     call .validSep
  1442 00002AED 75DB                <1>     jne .badDate
  1443 00002AEF E81E1C0000          <1>     call getByte
  1444 00002AF4 72D4                <1>     jc .badDate
  1445 00002AF6 8805(90060000)      <1>     mov byte [td3], al  ;Store day
  1446 00002AFC E883000000          <1>     call .validSep
  1447 00002B01 75C7                <1>     jne .badDate
  1448 00002B03 E8161C0000          <1>     call getNum
  1449 00002B08 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1450 00002B0D 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1451 00002B12 73B6                <1>     jae .badDate
  1452 00002B14 668905(8E060000)    <1>     mov word [td1], ax  ;Store the word directly
  1453                              <1> .writeHop:
  1454 00002B1B EB89                <1>     jmp short .writeDate
  1455                              <1> .jpn:
  1456 00002B1D E8FC1B0000          <1>     call getNum
  1457 00002B22 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1458 00002B27 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1459 00002B2C 739C                <1>     jae .badDate
  1460 00002B2E 668905(8E060000)    <1>     mov word [td1], ax  ;Store the word directly
  1461 00002B35 E84A000000          <1>     call .validSep
  1462 00002B3A 758E                <1>     jne .badDate
  1463 00002B3C E8D11B0000          <1>     call getByte
  1464 00002B41 7287                <1>     jc .badDate
  1465 00002B43 8805(90060000)      <1>     mov byte [td3], al  ;Store the day
  1466 00002B49 E836000000          <1>     call .validSep
  1467 00002B4E 0F8576FFFFFF        <1>     jne .badDate
  1468 00002B54 E8B91B0000          <1>     call getByte
  1469 00002B59 0F826BFFFFFF        <1>     jc .badDate
  1470 00002B5F 8805(91060000)      <1>     mov byte [td4], al  ;Store month
  1471 00002B65 EBB4                <1>     jmp short .writeHop
  1472                              <1> .doYear:
  1473 00002B67 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1474                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B6C 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B6E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1475                              <1> ;If the user specifies 80-99 it means 1980-1999
  1476                              <1> ;If the user specifies 00-79 it means 2000-2079
  1477 00002B6F BBD0070000          <1>     mov ebx, 2000
  1478 00002B74 B96C070000          <1>     mov ecx, 1900
  1479 00002B79 3D50000000          <1>     cmp eax, 80     
  1480 00002B7E 0F42CB              <1>     cmovb ecx, ebx
  1481 00002B81 01C8                <1>     add eax, ecx
  1482                              <1>     return
    13                              <2> %%_ret:
    14 00002B83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1483                              <1> .validSep:
  1484 00002B84 AC                  <1>     lodsb           ;Get the char and return
  1485 00002B85 3C2E                <1>     cmp al, "."
  1486                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002B87 74(83)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1487 00002B89 3C2F                <1>     cmp al, "/"
  1488                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002B8B 74(83)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1489 00002B8D 3C2D                <1>     cmp al, "-"
  1490                              <1>     return
    13                              <2> %%_ret:
    14 00002B8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1491                              <1> 
  1492                              <1> time:
  1493 00002B90 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1494 00002B97 E8C9180000          <1>     call skipDelimiters
  1495 00002B9C 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1496 00002B9F 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1497                              <1> .init:
  1498 00002BA1 488D1534D8FFFF      <1>     lea rdx, curTime
  1499 00002BA8 B409                <1>     mov ah, 09h
  1500 00002BAA CD21                <1>     int 21h
  1501 00002BAC E841170000          <1>     call printFmtTime
  1502                              <1> .noCur:
  1503 00002BB1 488D1535D8FFFF      <1>     lea rdx, newTime
  1504 00002BB8 B409                <1>     mov ah, 09h
  1505 00002BBA CD21                <1>     int 21h
  1506                              <1> 
  1507 00002BBC 488D15(44020000)    <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1508 00002BC3 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1509 00002BC6 B40A                <1>     mov ah, 0Ah
  1510 00002BC8 CD21                <1>     int 21h
  1511 00002BCA 52                  <1>     push rdx
  1512 00002BCB 488D1595D5FFFF      <1>     lea rdx, crlf
  1513 00002BD2 B409                <1>     mov ah, 09h
  1514 00002BD4 CD21                <1>     int 21h
  1515 00002BD6 5A                  <1>     pop rdx
  1516 00002BD7 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1517                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002BDB 74(8F)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1518 00002BDD 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1519                              <1> .goTime:
  1520 00002BE1 C705(8E060000)0000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1520 00002BE9 0000                <1>
  1521 00002BEB 31C0                <1>     xor eax, eax   
  1522 00002BED E8201B0000          <1>     call getByte
  1523 00002BF2 0F8298000000        <1>     jc .badTime         ;Get the number in eax
  1524 00002BF8 8805(8F060000)      <1>     mov byte [td2], al  ;Save hours
  1525 00002BFE E89E000000          <1>     call .validsep
  1526 00002C03 0F8587000000        <1>     jne .badTime
  1527 00002C09 E8041B0000          <1>     call getByte
  1528 00002C0E 0F827C000000        <1>     jc .badTime
  1529 00002C14 8805(8E060000)      <1>     mov byte [td1], al  ;Save minutes
  1530 00002C1A E882000000          <1>     call .validsep
  1531 00002C1F 740F                <1>     je .goSec
  1532 00002C21 48FFCE              <1>     dec rsi ;Go back a char
  1533 00002C24 E83C180000          <1>     call skipDelimiters ;Skip any delimiters
  1534 00002C29 803E0D              <1>     cmp byte [rsi], CR
  1535 00002C2C 743E                <1>     je .setTime
  1536 00002C2E EB60                <1>     jmp short .badTime
  1537                              <1> .goSec:
  1538 00002C30 E878000000          <1>     call .checkNum
  1539 00002C35 7259                <1>     jc .badTime
  1540 00002C37 E8D61A0000          <1>     call getByte
  1541 00002C3C 7252                <1>     jc .badTime
  1542 00002C3E 8805(91060000)      <1>     mov byte [td4], al  ;Save seconds
  1543 00002C44 AC                  <1>     lodsb       ;Move rsi forwards
  1544 00002C45 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1545 00002C47 740F                <1>     je .goMsec
  1546 00002C49 48FFCE              <1>     dec rsi ;Go back a char
  1547 00002C4C E814180000          <1>     call skipDelimiters ;Skip any delimiters
  1548 00002C51 803E0D              <1>     cmp byte [rsi], CR
  1549 00002C54 7416                <1>     je .setTime
  1550 00002C56 EB38                <1>     jmp short .badTime
  1551                              <1> .goMsec:
  1552 00002C58 E850000000          <1>     call .checkNum
  1553 00002C5D 7231                <1>     jc .badTime
  1554 00002C5F E8AE1A0000          <1>     call getByte
  1555 00002C64 722A                <1>     jc .badTime
  1556 00002C66 8805(90060000)      <1>     mov byte [td3], al  ;Save miliseconds
  1557                              <1> .setTime:
  1558 00002C6C E8F4170000          <1>     call skipDelimiters
  1559 00002C71 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1560 00002C74 751A                <1>     jne .badTime
  1561 00002C76 0FB70D(8E060000)    <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1562 00002C7D 0FB715(90060000)    <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1563 00002C84 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1564 00002C89 CD21                <1>     int 21h
  1565 00002C8B A8FF                <1>     test al, -1
  1566                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C8D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C8F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1567                              <1> .badTime:
  1568 00002C90 488D1536D7FFFF      <1>     lea rdx, badTime
  1569 00002C97 E87E150000          <1>     call printString
  1570 00002C9C E910FFFFFF          <1>     jmp time.noCur
  1571                              <1> .validsep:
  1572 00002CA1 AC                  <1>     lodsb
  1573 00002CA2 3A05(0B010000)      <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002CA8 74(8F)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1575 00002CAA 3C2E                <1>     cmp al, "."
  1576                              <1>     return
    13                              <2> %%_ret:
    14 00002CAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1577                              <1> .checkNum:
  1578 00002CAD AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1579 00002CAE 48FFCE              <1>     dec rsi
  1580 00002CB1 3C30                <1>     cmp al, "0"
  1581 00002CB3 7206                <1>     jb .cnbad
  1582 00002CB5 3C39                <1>     cmp al, "9"
  1583 00002CB7 7702                <1>     ja .cnbad
  1584 00002CB9 F8                  <1>     clc
  1585                              <1>     return
    13                              <2> %%_ret:
    14 00002CBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1586                              <1> .cnbad:
  1587 00002CBB F9                  <1>     stc
  1588                              <1>     return
    13                              <2> %%_ret:
    14 00002CBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1589                              <1> ctty:
  1590 00002CBD F60587D3FFFFFF      <1>     test byte [arg1Flg], -1
  1591 00002CC4 0F8414EDFFFF        <1>     jz badArgError
  1592 00002CCA F6057DD3FFFFFF      <1>     test byte [arg2Flg], -1
  1593 00002CD1 0F8507EDFFFF        <1>     jnz badArgError
  1594 00002CD7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1595 00002CDE 0FB60567D3FFFF      <1>     movzx eax, byte [arg1Off]
  1596 00002CE5 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1597 00002CE8 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1598 00002CEC 750F                <1>     jne .noDrive
  1599 00002CEE 0FB60558D3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1600 00002CF5 3CFF                <1>     cmp al, -1
  1601 00002CF7 0F84D8ECFFFF        <1>     je badDriveError
  1602                              <1> .noDrive:
  1603                              <1>     ;Now we open the provided file
  1604 00002CFD E8EF180000          <1>     call copyArgumentToSearchSpec
  1605 00002D02 488D15(F1040000)    <1>     lea rdx, searchSpec
  1606                              <1> .loadSwap:
  1607 00002D09 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1608 00002D0E CD21                <1>     int 21h
  1609 00002D10 0F82D1ECFFFF        <1>     jc badFileError
  1610 00002D16 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1611 00002D19 B800440000          <1>     mov eax, 4400h  ;Get device word
  1612 00002D1E CD21                <1>     int 21h
  1613 00002D20 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1614 00002D23 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1615                              <1>     ;Now we set this handle to be STDIO
  1616 00002D25 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1617 00002D28 30F6                <1>     xor dh, dh
  1618 00002D2A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1619 00002D2F CD21                <1>     int 21h
  1620                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1621 00002D31 31C9                <1>     xor ecx, ecx    ;STDIN
  1622 00002D33 B800460000          <1>     mov eax, 4600h
  1623 00002D38 CD21                <1>     int 21h
  1624 00002D3A FFC1                <1>     inc ecx         ;STDOUT
  1625 00002D3C B800460000          <1>     mov eax, 4600h
  1626 00002D41 CD21                <1>     int 21h
  1627 00002D43 FFC1                <1>     inc ecx         ;STDERR
  1628 00002D45 B800460000          <1>     mov eax, 4600h
  1629 00002D4A CD21                <1>     int 21h
  1630 00002D4C B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1631 00002D51 CD21                <1>     int 21h
  1632                              <1>     return
    13                              <2> %%_ret:
    14 00002D53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1633                              <1> .badCharDev:
  1634 00002D54 488D15A3D7FFFF      <1>     lea rdx, badDev
  1635 00002D5B B409                <1>     mov ah, 09h
  1636 00002D5D CD21                <1>     int 21h
  1637 00002D5F B43E                <1>     mov ah, 3Eh ;Close opened handle
  1638 00002D61 CD21                <1>     int 21h
  1639                              <1>     return
    13                              <2> %%_ret:
    14 00002D63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1640                              <1> 
  1641                              <1> cls:  
  1642 00002D64 B800440000          <1>     mov eax, 4400h  ;Get device info
  1643 00002D69 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1644 00002D6E CD21                <1>     int 21h         ;in dx
  1645 00002D70 F7C280000000        <1>     test edx, devCharDev
  1646 00002D76 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1647 00002D78 F7C210000000        <1>     test edx, charDevFastOut
  1648 00002D7E 7421                <1>     jz .doAnsi
  1649                              <1>     ;Test if Int 29h uses Int 30h
  1650                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1651                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1652 00002D80 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1653 00002D85 CD21                <1>     int 21h
  1654 00002D87 B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1655                              <1> .biosCheck:
  1656 00002D8C 66813BCD30          <1>     cmp word [rbx], 30CDh
  1657 00002D91 7426                <1>     je .biosConfirmed
  1658 00002D93 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1659 00002D98 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1660 00002D9A 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1661 00002D9D FFC9                <1>     dec ecx
  1662 00002D9F 75EB                <1>     jnz .biosCheck
  1663                              <1> .doAnsi:
  1664                              <1> ;4 chars in the ansi routine
  1665                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1666                              <1> ; understand ANSI codes
  1667 00002DA1 488D3500DAFFFF      <1>     lea rsi, ansiCls
  1668 00002DA8 B904000000          <1>     mov ecx, 4
  1669 00002DAD B406                <1>     mov ah, 06h ;Raw char output
  1670                              <1> .ansiLp:
  1671 00002DAF AC                  <1>     lodsb   ;Get the char in 
  1672 00002DB0 88C2                <1>     mov dl, al
  1673 00002DB2 CD21                <1>     int 21h
  1674 00002DB4 FFC9                <1>     dec ecx
  1675 00002DB6 75F7                <1>     jnz .ansiLp
  1676                              <1>     return
    13                              <2> %%_ret:
    14 00002DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1677                              <1> .biosConfirmed:
  1678                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1679 00002DB9 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1680 00002DBB 31DB                <1>     xor ebx, ebx
  1681 00002DBD CD30                <1>     int 30h
  1682 00002DBF B40F                <1>     mov ah, 0Fh ;Get screen mode
  1683 00002DC1 CD30                <1>     int 30h
  1684 00002DC3 53                  <1>     push rbx
  1685 00002DC4 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1686 00002DC7 FECA                <1>     dec dl
  1687 00002DC9 B619                <1>     mov dh, 25  ;Number of rows is standard
  1688 00002DCB 31C0                <1>     xor eax, eax
  1689 00002DCD 89C1                <1>     mov ecx, eax
  1690 00002DCF B707                <1>     mov bh, 7   ;Screen attributes
  1691 00002DD1 B406                <1>     mov ah, 6   ;Scroll
  1692 00002DD3 CD30                <1>     int 30h
  1693 00002DD5 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1694 00002DD7 5B                  <1>     pop rbx
  1695 00002DD8 B402                <1>     mov ah, 2
  1696 00002DDA CD30                <1>     int 30h
  1697                              <1>     return
    13                              <2> %%_ret:
    14 00002DDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1698                              <1> 
  1699                              <1> break:
  1700 00002DDD F60567D2FFFFFF      <1>     test byte [arg1Flg], -1
  1701 00002DE4 752D                <1>     jnz .argumentProvided
  1702                              <1>     ;Here we just get the status of break
  1703 00002DE6 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1704 00002DEB CD21                <1>     int 21h
  1705 00002DED 88D3                <1>     mov bl, dl
  1706 00002DEF 488D15AED7FFFF      <1>     lea rdx, breakIs
  1707 00002DF6 B409                <1>     mov ah, 09h
  1708 00002DF8 CD21                <1>     int 21h
  1709 00002DFA 488D159ED7FFFF      <1>     lea rdx, onMes
  1710 00002E01 488D0D91D7FFFF      <1>     lea rcx, offMes
  1711 00002E08 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1712 00002E0A 480F44D1            <1>     cmovz rdx, rcx
  1713 00002E0E B409                <1>     mov ah, 09h
  1714 00002E10 CD21                <1>     int 21h
  1715                              <1>     return
    13                              <2> %%_ret:
    14 00002E12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1716                              <1> .argumentProvided:
  1717 00002E13 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1718 00002E17 AD                  <1>     lodsd   ;Read the word
  1719 00002E18 89C3                <1>     mov ebx, eax
  1720 00002E1A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1721 00002E1F C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1722 00002E22 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1723 00002E27 7416                <1>     je .maybeOn
  1724 00002E29 663D4F46            <1>     cmp ax, "OF"
  1725 00002E2D 7523                <1>     jne .badOnOff
  1726 00002E2F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1727 00002E34 6681FB4620          <1>     cmp bx, "F "
  1728 00002E39 7517                <1>     jne .badOnOff
  1729                              <1>     ;Set off
  1730 00002E3B 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1731 00002E3D EB0B                <1>     jmp short .setBreak
  1732                              <1> .maybeOn:
  1733 00002E3F 663D4F4E            <1>     cmp ax, "ON"
  1734 00002E43 750D                <1>     jne .badOnOff
  1735                              <1>     ;Set on
  1736 00002E45 BA01000000          <1>     mov edx, 1
  1737                              <1> .setBreak:
  1738 00002E4A B801330000          <1>     mov eax, 3301h  ;Set break
  1739 00002E4F CD21                <1>     int 21h
  1740                              <1>     return
    13                              <2> %%_ret:
    14 00002E51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1741                              <1> .badOnOff:
  1742 00002E52 488D155FD9FFFF      <1>     lea rdx, badOnOff
  1743 00002E59 B409                <1>     mov ah, 09h
  1744 00002E5B CD21                <1>     int 21h
  1745                              <1>     return
    13                              <2> %%_ret:
    14 00002E5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1746                              <1> 
  1747                              <1> verify:
  1748 00002E5E F605E6D1FFFFFF      <1>     test byte [arg1Flg], -1
  1749 00002E65 752D                <1>     jnz .argumentProvided
  1750                              <1>     ;Here we just get the status of break
  1751 00002E67 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1752 00002E6C CD21                <1>     int 21h
  1753 00002E6E 88C3                <1>     mov bl, al
  1754 00002E70 488D1537D7FFFF      <1>     lea rdx, verifyIs
  1755 00002E77 B409                <1>     mov ah, 09h
  1756 00002E79 CD21                <1>     int 21h
  1757 00002E7B 488D151DD7FFFF      <1>     lea rdx, onMes
  1758 00002E82 488D0D10D7FFFF      <1>     lea rcx, offMes
  1759 00002E89 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1760 00002E8B 480F44D1            <1>     cmovz rdx, rcx
  1761 00002E8F B409                <1>     mov ah, 09h
  1762 00002E91 CD21                <1>     int 21h
  1763                              <1>     return
    13                              <2> %%_ret:
    14 00002E93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1764                              <1> .argumentProvided:
  1765 00002E94 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1766 00002E98 AD                  <1>     lodsd   ;Read the word
  1767 00002E99 89C3                <1>     mov ebx, eax
  1768 00002E9B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1769 00002EA0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1770 00002EA3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1771 00002EA8 7416                <1>     je .maybeOn
  1772 00002EAA 663D4F46            <1>     cmp ax, "OF"
  1773 00002EAE 751F                <1>     jne .badOnOff
  1774 00002EB0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1775 00002EB5 6681FB4620          <1>     cmp bx, "F "
  1776 00002EBA 7513                <1>     jne .badOnOff
  1777                              <1>     ;Set off
  1778 00002EBC 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1779 00002EBE EB0A                <1>     jmp short .setVerify
  1780                              <1> .maybeOn:
  1781 00002EC0 663D4F4E            <1>     cmp ax, "ON"
  1782 00002EC4 7509                <1>     jne .badOnOff
  1783                              <1>     ;Set on
  1784 00002EC6 31C0                <1>     xor eax, eax
  1785 00002EC8 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1786                              <1> .setVerify:
  1787 00002ECA B42E                <1>     mov ah, 2Eh  ;Set Verify
  1788 00002ECC CD21                <1>     int 21h
  1789                              <1>     return
    13                              <2> %%_ret:
    14 00002ECE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1790                              <1> .badOnOff:
  1791 00002ECF 488D15E2D8FFFF      <1>     lea rdx, badOnOff
  1792 00002ED6 B409                <1>     mov ah, 09h
  1793 00002ED8 CD21                <1>     int 21h
  1794                              <1>     return
    13                              <2> %%_ret:
    14 00002EDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1795                              <1> 
  1796                              <1> rename:
  1797 00002EDB F60569D1FFFFFF      <1>     test byte [arg1Flg], -1
  1798 00002EE2 0F84F6EAFFFF        <1>     jz badArgError
  1799 00002EE8 F6055FD1FFFFFF      <1>     test byte [arg2Flg], -1
  1800 00002EEF 0F84E9EAFFFF        <1>     jz badArgError    
  1801                              <1>     ;Initialise the variables!
  1802 00002EF5 488D35(92060000)    <1>     lea rsi, srcSpec
  1803 00002EFC 488935(96070000)    <1>     mov qword [srcPtr], rsi
  1804 00002F03 488D35(14070000)    <1>     lea rsi, destSpec
  1805 00002F0A 488935(9E070000)    <1>     mov qword [destPtr], rsi
  1806                              <1>     ;Check the second path is just a filename!
  1807 00002F11 0FB60537D1FFFF      <1>     movzx eax, byte [arg2Off]
  1808 00002F18 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1809 00002F1F 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1810 00002F22 488D3D(F1040000)    <1>     lea rdi, searchSpec
  1811 00002F29 57                  <1>     push rdi
  1812 00002F2A E867160000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1813 00002F2F 5F                  <1>     pop rdi
  1814 00002F30 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1815 00002F34 0F84A4EAFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1816                              <1> ;Check if a drive specifier has been given
  1817 00002F3A 0FB6050BD1FFFF      <1>     movzx eax, byte [arg1Off]
  1818 00002F41 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1819 00002F48 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1820 00002F4B 66AD                <1>     lodsw   ;Get the first two chars
  1821 00002F4D 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1822 00002F50 752A                <1>     jne .curDrvSrc
  1823                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1824 00002F52 488B35(96070000)    <1>     mov rsi, qword [srcPtr]
  1825 00002F59 668906              <1>     mov word [rsi], ax
  1826 00002F5C 488105(96070000)02- <1>     add qword [srcPtr], 2   
  1826 00002F64 000000              <1>
  1827 00002F67 488B35(9E070000)    <1>     mov rsi, qword [destPtr]
  1828 00002F6E 668906              <1>     mov word [rsi], ax
  1829 00002F71 488105(9E070000)02- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1829 00002F79 000000              <1>
  1830                              <1> .curDrvSrc:
  1831 00002F7C 4889FE              <1>     mov rsi, rdi
  1832                              <1> .destScan:
  1833 00002F7F AC                  <1>     lodsb   ;Get the char
  1834 00002F80 3A0584D0FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1835 00002F86 0F8452EAFFFF        <1>     je badArgError
  1836 00002F8C 84C0                <1>     test al, al
  1837 00002F8E 75EF                <1>     jnz .destScan
  1838                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1839 00002F90 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1840 00002F94 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1840 00002F9D 3F                  <1>
  1841 00002F9E B903000000          <1>     mov ecx, 3  ;24 bytes
  1842 00002FA3 F348AB              <1>     rep stosq
  1843 00002FA6 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1844 00002FA7 488D35(F1040000)    <1>     lea rsi, searchSpec
  1845 00002FAE 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1846 00002FB2 B80D290000          <1>     mov eax, 290Dh
  1847 00002FB7 CD21                <1>     int 21h     
  1848 00002FB9 50                  <1>     push rax    ;Save the WC signature
  1849 00002FBA E81A160000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1850 00002FBF 488D3D(F1040000)    <1>     lea rdi, searchSpec
  1851 00002FC6 E851150000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1852 00002FCB 4889FE              <1>     mov rsi, rdi
  1853 00002FCE 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1854 00002FD1 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1855 00002FD5 B80D290000          <1>     mov eax, 290Dh
  1856 00002FDA CD21                <1>     int 21h
  1857 00002FDC 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1858 00002FDD 88CC                <1>     mov ah, cl
  1859 00002FDF 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1860 00002FE2 0F84E6000000        <1>     jz .noWC
  1861 00002FE8 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1862 00002FEA 0F84EEE9FFFF        <1>     je badArgError
  1863 00002FF0 488D35(F1040000)    <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1864                              <1>     ;Now we check if we have a path to actually handle
  1865 00002FF7 4839F3              <1>     cmp rbx, rsi
  1866 00002FFA 7444                <1>     je .noPath
  1867 00002FFC C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1868 00003000 488D35(F1040000)    <1>     lea rsi, searchSpec
  1869 00003007 488B3D(92060000)    <1>     mov rdi, qword [srcSpec]
  1870 0000300E 56                  <1>     push rsi
  1871 0000300F E813140000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1872 00003014 5E                  <1>     pop rsi
  1873 00003015 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1874 00003018 8A05ECCFFFFF        <1>     mov al, byte [pathSep]
  1875 0000301E AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1876 0000301F 48893D(96070000)    <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1877 00003026 488B3D(9E070000)    <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1878 0000302D E8F5130000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1879 00003032 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1880 00003035 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1881 00003036 48893D(9E070000)    <1>     mov qword [destPtr], rdi
  1882 0000303D 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1883                              <1> .noPath:
  1884                              <1>     ;Now we have where to copy the files to, we can start our work!
  1885 00003040 488D15(F1040000)    <1>     lea rdx, searchSpec
  1886 00003047 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1887 00003049 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1888 0000304E CD21                <1>     int 21h
  1889 00003050 0F829AE9FFFF        <1>     jc badDupFnf    ;If no file was found!
  1890                              <1> .wcLoop:
  1891                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1892 00003056 488D35(95010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1893 0000305D 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1894 00003061 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1895 00003066 CD21                <1>     int 21h 
  1896                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1897 00003068 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1898 0000306C 488D3D(A6070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
  1899 00003073 57                  <1>     push rdi
  1900 00003074 48A5                <1>     movsq
  1901 00003076 66A5                <1>     movsw
  1902 00003078 A4                  <1>     movsb
  1903 00003079 5F                  <1>     pop rdi
  1904 0000307A 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1905 0000307E B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1906                              <1> .wcNameMake:
  1907 00003083 AC                  <1>     lodsb   ;Get the char from the source string
  1908 00003084 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1909 00003087 7502                <1>     jne .noStore    ;Dont store the char there
  1910 00003089 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1911                              <1> .noStore:
  1912 0000308B 48FFC7              <1>     inc rdi ;Goto next char position
  1913 0000308E FFC9                <1>     dec ecx
  1914 00003090 75F1                <1>     jnz .wcNameMake
  1915                              <1> ;renName now has the FCB name for the file we wish to make!
  1916                              <1> ;Now make the two paths!
  1917 00003092 488D35(95010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1918 00003099 488B3D(96070000)    <1>     mov rdi, qword [srcPtr]
  1919 000030A0 E882130000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1920 000030A5 488D35(A6070000)    <1>     lea rsi, renName
  1921 000030AC 488B3D(9E070000)    <1>     mov rdi, qword [destPtr]
  1922 000030B3 E888140000          <1>     call FCBToAsciiz
  1923 000030B8 488D15(92060000)    <1>     lea rdx, srcSpec
  1924 000030BF E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1925 000030C4 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1926 000030C9 CD21                <1>     int 21h
  1927 000030CB 7389                <1>     jnc .wcLoop     ;And process it too!
  1928                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000030CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1929                              <1> .noWC:
  1930 000030CE E806150000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1931 000030D3 0FB60575CFFFFF      <1>     movzx eax, byte [arg2Off]
  1932 000030DA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1933 000030E1 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1934 000030E4 488B3D(9E070000)    <1>     mov rdi, qword [destPtr]    
  1935 000030EB E8A6140000          <1>     call cpDelimPathToBufz
  1936 000030F0 488D15(F1040000)    <1>     lea rdx, searchSpec
  1937 000030F7 E807000000          <1>     call .ren
  1938                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000030FC 73(CD)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1939 000030FE E9EDE8FFFF          <1>     jmp badDupFnf   ;Always just return this
  1940                              <1> .ren:
  1941 00003103 488D3D(14070000)    <1>     lea rdi, destSpec
  1942 0000310A B800560000          <1>     mov eax, 5600h
  1943 0000310F CD21                <1>     int 21h
  1944                              <1>     return
    13                              <2> %%_ret:
    14 00003111 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1945                              <1> 
  1946                              <1> truename:
  1947 00003112 F60532CFFFFFFF      <1>     test byte [arg1Flg], -1
  1948 00003119 0F84BFE8FFFF        <1>     jz badArgError
  1949 0000311F E8B5140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1950 00003124 488D35(F1040000)    <1>     lea rsi, searchSpec     ;Store the path here
  1951 0000312B 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1952 0000312E B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1953 00003133 CD21                <1>     int 21h
  1954 00003135 730D                <1>     jnc .writePath
  1955 00003137 3C02                <1>     cmp al, errFnf
  1956 00003139 0F84A8E8FFFF        <1>     je badFileError
  1957 0000313F E988E8FFFF          <1>     jmp badParamError
  1958                              <1> .writePath:
  1959 00003144 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1960 00003147 B9FFFFFFFF          <1>     mov ecx, -1
  1961 0000314C 30C0                <1>     xor al, al
  1962 0000314E F2AE                <1>     repne scasb     ;Get the new len
  1963 00003150 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1964 00003152 FFC9                <1>     dec ecx
  1965 00003154 BB01000000          <1>     mov ebx, 01
  1966 00003159 B440                <1>     mov ah, 40h
  1967 0000315B CD21                <1>     int 21h
  1968 0000315D E8B1100000          <1>     call printCRLF
  1969                              <1>     return
    13                              <2> %%_ret:
    14 00003162 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1970                              <1> 
  1971                              <1> volume:
  1972                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1973 00003163 F605E4CEFFFFFF      <1>     test byte [arg2Flg], -1
  1974 0000316A 0F856EE8FFFF        <1>     jnz badArgError
  1975 00003170 F605D4CEFFFFFF      <1>     test byte [arg1Flg], -1
  1976 00003177 7507                <1>     jnz .notCurrentDrive
  1977 00003179 E8A4120000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1978 0000317E EB31                <1>     jmp short .dirEP
  1979                              <1> .notCurrentDrive:
  1980 00003180 E854140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1981 00003185 488D35(F1040000)    <1>     lea rsi, searchSpec
  1982 0000318C E8D4120000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1983 00003191 66AD                <1>     lodsw                   ;Get this word
  1984 00003193 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1985 00003196 0F8542E8FFFF        <1>     jne badArgError
  1986 0000319C 8A05ABCEFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1987 000031A2 A8FF                <1>     test al, -1
  1988 000031A4 0F852BE8FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1989 000031AA 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1990 000031AF FFC8                <1>     dec eax ;Convert to 0 based number
  1991                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1992 000031B1 488D1558CEFFFF      <1>     lea rdx, volFcb
  1993 000031B8 FFC0                <1>     inc eax ;Get 1 based drive number
  1994 000031BA 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1995 000031BC 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1996 000031BF B800110000          <1>     mov eax, 1100h ;Find first FCB
  1997 000031C4 CD21                <1>     int 21h
  1998 000031C6 50                  <1>     push rax
  1999                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2000 000031C7 488D1599CFFFFF      <1>     lea rdx, crlf
  2001 000031CE B409                <1>     mov ah, 09h
  2002 000031D0 CD21                <1>     int 21h
  2003 000031D2 488D154ED2FFFF      <1>     lea rdx, volMes
  2004 000031D9 B409                <1>     mov ah, 09h
  2005 000031DB CD21                <1>     int 21h
  2006 000031DD 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2007 000031DF 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2008 000031E2 B402                <1>     mov ah, 02h
  2009 000031E4 CD21                <1>     int 21h
  2010 000031E6 58                  <1>     pop rax
  2011 000031E7 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2012 000031E9 7409                <1>     jz .volIDOk
  2013 000031EB 488D154CD2FFFF      <1>     lea rdx, volNo
  2014 000031F2 EB19                <1>     jmp short .volEndPrint
  2015                              <1> .volIDOk:
  2016 000031F4 488D153ED2FFFF      <1>     lea rdx, volOk
  2017 000031FB B409                <1>     mov ah, 09h
  2018 000031FD CD21                <1>     int 21h
  2019 000031FF C605(8A010000)24    <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2020 00003206 488D15(7F010000)    <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2021                              <1> .volEndPrint:
  2022 0000320D B409                <1>     mov ah, 09h
  2023 0000320F CD21                <1>     int 21h
  2024 00003211 488D154FCFFFFF      <1>     lea rdx, crlf
  2025 00003218 B409                <1>     mov ah, 09h
  2026 0000321A CD21                <1>     int 21h
  2027                              <1>     return
    13                              <2> %%_ret:
    14 0000321C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2028                              <1> 
  2029                              <1> version:
  2030 0000321D 488D1543CFFFFF      <1>     lea rdx, crlf
  2031 00003224 B409                <1>     mov ah, 09h
  2032 00003226 CD21                <1>     int 21h
  2033 00003228 488D15E6D1FFFF      <1>     lea rdx, dosVer
  2034 0000322F B409                <1>     mov ah, 09h
  2035 00003231 CD21                <1>     int 21h
  2036 00003233 E80C000000          <1>     call .printVersionNumber
  2037 00003238 488D1528CFFFFF      <1>     lea rdx, crlf
  2038 0000323F B409                <1>     mov ah, 09h
  2039 00003241 CD21                <1>     int 21h
  2040                              <1>     return
    13                              <2> %%_ret:
    14 00003243 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2041                              <1> .printVersionNumber:
  2042 00003244 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2043 00003246 CD21                <1>     int 21h
  2044 00003248 50                  <1>     push rax
  2045 00003249 0FB6C0              <1>     movzx eax, al
  2046 0000324C E861140000          <1>     call printDecimalWord
  2047 00003251 B22E                <1>     mov dl, "."
  2048 00003253 B402                <1>     mov ah, 02h
  2049 00003255 CD21                <1>     int 21h
  2050 00003257 58                  <1>     pop rax
  2051 00003258 0FB6C4              <1>     movzx eax, ah
  2052 0000325B E852140000          <1>     call printDecimalWord
  2053                              <1>     return
    13                              <2> %%_ret:
    14 00003260 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2054                              <1> 
  2055                              <1> 
  2056                              <1> memory:
  2057 00003261 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2058 00003266 CD21                <1>     int 21h
  2059 00003268 4885DB              <1>     test rbx, rbx
  2060 0000326B 7510                <1>     jnz .sysvarsOK
  2061 0000326D 488D15ABD4FFFF      <1>     lea rdx, memBad0
  2062 00003274 B409                <1>     mov ah, 09h
  2063 00003276 CD21                <1>     int 21h
  2064 00003278 E9DD140000          <1>     jmp freezePC.altEP
  2065                              <1> .sysvarsOK:
  2066                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2067                              <1>     ; and rcx to store Application memory
  2068 0000327D 31F6                <1>     xor esi, esi
  2069 0000327F 31FF                <1>     xor edi, edi
  2070 00003281 31ED                <1>     xor ebp, ebp
  2071 00003283 31C9                <1>     xor ecx, ecx
  2072 00003285 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2073 00003289 488B1B              <1>     mov rbx, qword [rbx]
  2074                              <1> .memLp:
  2075 0000328C 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2076 0000328F 7409                <1>     je .validMCB
  2077 00003291 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2078 00003294 0F8506010000        <1>     jne .badMCBFound
  2079                              <1> .validMCB:
  2080 0000329A 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2081 0000329D 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2082 000032A1 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2083 000032A9 7505                <1>     jne .notDOS
  2084 000032AB 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2085 000032AE EB21                <1>     jmp short .gotoNext
  2086                              <1> .notDOS:
  2087 000032B0 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2088 000032B8 7505                <1>     jne .notFree
  2089 000032BA 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2090 000032BD EB12                <1>     jmp short .gotoNext
  2091                              <1> .notFree:
  2092 000032BF 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2093 000032C7 7505                <1>     jne .notHole
  2094 000032C9 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2095 000032CC EB03                <1>     jmp short .gotoNext
  2096                              <1> .notHole:
  2097 000032CE 4801C1              <1>     add rcx, rax    ;Add to Application count
  2098                              <1> .gotoNext:
  2099 000032D1 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2100 000032D4 7407                <1>     je .endOfWalk
  2101 000032D6 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2102 000032DB EBAF                <1>     jmp short .memLp
  2103                              <1> .endOfWalk:
  2104                              <1>     
  2105 000032DD 488D159CD3FFFF      <1>     lea rdx, memDOS
  2106 000032E4 B409                <1>     mov ah, 09h
  2107 000032E6 CD21                <1>     int 21h
  2108 000032E8 4889F0              <1>     mov rax, rsi
  2109 000032EB E89D000000          <1>     call .mcbPrintAmount
  2110 000032F0 488D1521D4FFFF      <1>     lea rdx, memByte
  2111 000032F7 B409                <1>     mov ah, 09h
  2112 000032F9 CD21                <1>     int 21h
  2113                              <1> 
  2114 000032FB 4885ED              <1>     test rbp, rbp
  2115 000032FE 741E                <1>     jz .skipHole
  2116 00003300 488D15C5D3FFFF      <1>     lea rdx, memHole
  2117 00003307 B409                <1>     mov ah, 09h
  2118 00003309 CD21                <1>     int 21h
  2119 0000330B 4889E8              <1>     mov rax, rbp
  2120 0000330E E87A000000          <1>     call .mcbPrintAmount
  2121 00003313 488D15FED3FFFF      <1>     lea rdx, memByte
  2122 0000331A B409                <1>     mov ah, 09h
  2123 0000331C CD21                <1>     int 21h
  2124                              <1> .skipHole:
  2125                              <1> 
  2126 0000331E 488D1581D3FFFF      <1>     lea rdx, memApp
  2127 00003325 B409                <1>     mov ah, 09h
  2128 00003327 CD21                <1>     int 21h
  2129 00003329 4889C8              <1>     mov rax, rcx
  2130 0000332C E85C000000          <1>     call .mcbPrintAmount
  2131 00003331 488D15E0D3FFFF      <1>     lea rdx, memByte
  2132 00003338 B409                <1>     mov ah, 09h
  2133 0000333A CD21                <1>     int 21h
  2134                              <1> 
  2135 0000333C 488D15AFD3FFFF      <1>     lea rdx, memFree
  2136 00003343 B409                <1>     mov ah, 09h
  2137 00003345 CD21                <1>     int 21h
  2138 00003347 4889F8              <1>     mov rax, rdi
  2139 0000334A E83E000000          <1>     call .mcbPrintAmount
  2140 0000334F 488D15C2D3FFFF      <1>     lea rdx, memByte
  2141 00003356 B409                <1>     mov ah, 09h
  2142 00003358 CD21                <1>     int 21h
  2143                              <1> 
  2144 0000335A 488D15F9D2FFFF      <1>     lea rdx, memSys
  2145 00003361 B409                <1>     mov ah, 09h
  2146 00003363 CD21                <1>     int 21h
  2147 00003365 4889F0              <1>     mov rax, rsi
  2148 00003368 4801F8              <1>     add rax, rdi
  2149 0000336B 4801C8              <1>     add rax, rcx
  2150 0000336E 4801E8              <1>     add rax, rbp
  2151 00003371 E817000000          <1>     call .mcbPrintAmount
  2152 00003376 488D159BD3FFFF      <1>     lea rdx, memByte
  2153 0000337D B409                <1>     mov ah, 09h
  2154 0000337F CD21                <1>     int 21h
  2155                              <1> 
  2156 00003381 488D15DFCDFFFF      <1>     lea rdx, crlf
  2157 00003388 B409                <1>     mov ah, 09h
  2158 0000338A CD21                <1>     int 21h
  2159                              <1>     return
    13                              <2> %%_ret:
    14 0000338C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2160                              <1> 
  2161                              <1> .mcbPrintAmount:
  2162 0000338D 51                  <1>     push rcx
  2163 0000338E 56                  <1>     push rsi
  2164 0000338F 57                  <1>     push rdi
  2165 00003390 55                  <1>     push rbp
  2166 00003391 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2167 00003396 E877120000          <1>     call printDecimalValLB
  2168 0000339B 5D                  <1>     pop rbp
  2169 0000339C 5F                  <1>     pop rdi
  2170 0000339D 5E                  <1>     pop rsi
  2171 0000339E 59                  <1>     pop rcx
  2172                              <1>     return
    13                              <2> %%_ret:
    14 0000339F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2173                              <1> .badMCBFound:
  2174 000033A0 488D15B8D3FFFF      <1>     lea rdx, memBad2
  2175 000033A7 B409                <1>     mov ah, 09h
  2176 000033A9 CD21                <1>     int 21h
  2177 000033AB E9AA130000          <1>     jmp freezePC.altEP
  2178                              <1> 
    23                                  %include "./src/cmdFunc2.asm"
     1                              <1> ;The second file with internal functions.
     2                              <1> ;Functions included with name and label:
     3                              <1> ;----------------------------------------------------
     4                              <1> ; LABEL         NAME
     5                              <1> ;----------------------------------------------------
     6                              <1> ; type          TYPE
     7                              <1> ; exit          EXIT
     8                              <1> ; launchChild   <LAUNCH CHILD>
     9                              <1> ; set           SET
    10                              <1> ; pathEdit      PATH
    11                              <1> ; prompt        PROMPT
    12                              <1> ; echo          ECHO
    13                              <1> ; pauza         PAUSE
    14                              <1> ; remark        REM 
    15                              <1> ; shift         SHIFT
    16                              <1> ; goto          GOTO 
    17                              <1> ; ifCmd         IF  
    18                              <1> ; forCmd        FOR
    19                              <1> ;----------------------------------------------------
    20                              <1> 
    21                              <1> type:
    22 000033B0 F60594CCFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
    23 000033B7 0F8421E6FFFF        <1>     jz badArgError
    24 000033BD F6058ACCFFFFFF      <1>     test byte [arg2Flg], -1
    25 000033C4 0F8514E6FFFF        <1>     jnz badArgError         ;If this set, error
    26 000033CA 4C8B052FCCFFFF      <1>     mov r8, [pPSP]
    27 000033D1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
    28 000033D8 0FB6056DCCFFFF      <1>     movzx eax, byte [arg1Off]
    29 000033DF 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
    30 000033E2 803E0D              <1>     cmp byte [rsi], CR
    31 000033E5 0F84F3E5FFFF        <1>     je badArgError
    32 000033EB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
    33 000033EF 750F                <1>     jne .noDrive
    34 000033F1 0FB60555CCFFFF      <1>     movzx eax, byte [arg1FCBret]
    35 000033F8 3CFF                <1>     cmp al, -1
    36 000033FA 0F84D5E5FFFF        <1>     je badDriveError
    37                              <1> .noDrive:
    38                              <1>     ;Now we open the provided file
    39 00003400 E8D4110000          <1>     call buildCommandPath
    40 00003405 488D15(F1040000)    <1>     lea rdx, searchSpec
    41 0000340C B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
    42 00003411 CD21                <1>     int 21h
    43 00003413 0F82CEE5FFFF        <1>     jc badFileError
    44 00003419 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
    45 00003420 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
    46                              <1> .lp:
    47 00003423 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
    48 00003428 B43F                <1>     mov ah, 3Fh ;Read handle
    49 0000342A CD21                <1>     int 21h
    50 0000342C 89C1                <1>     mov ecx, eax
    51 0000342E 67E317              <1>     jecxz .exit
    52 00003431 53                  <1>     push rbx    ;Save the original in handle
    53 00003432 BB01000000          <1>     mov ebx, 1  ;STDOUT
    54 00003437 B440                <1>     mov ah, 40h
    55 00003439 CD21                <1>     int 21h
    56 0000343B 5B                  <1>     pop rbx ;Get back the original read handle
    57 0000343C 720F                <1>     jc .exitBad
    58 0000343E 39C8                <1>     cmp eax, ecx
    59 00003440 74E1                <1>     je .lp
    60 00003442 FFC9                <1>     dec ecx ;One less for a ^Z
    61 00003444 39C8                <1>     cmp eax, ecx
    62 00003446 7505                <1>     jne .exitBad
    63                              <1> .exit:
    64 00003448 B43E                <1>     mov ah, 3Eh ;Close handle
    65 0000344A CD21                <1>     int 21h
    66                              <1>     return
    13                              <2> %%_ret:
    14 0000344C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .exitBad:
    68                              <1>     ;If it is a char device, don't print an error
    69 0000344D B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
    70 00003452 BB01000000          <1>     mov ebx, 1
    71 00003457 CD21                <1>     int 21h
    72 00003459 F6C280              <1>     test dl, devCharDev
    73                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000345C 75(4C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    74 0000345E E912E5FFFF          <1>     jmp badDiskFull
    75                              <1> 
    76                              <1> exit:
    77 00003463 F605(1A000000)01    <1>     test byte [statFlg1], permaShell
    78 0000346A 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
    79 0000346C F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;If perma and single command
    80 00003473 0F851AE0FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
    81                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003479 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    82                              <1> .ouch:
    83 0000347A B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
    84 0000347F CD21                <1>     int 21h
    85                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003481 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> launchChild:
    88                              <1>     ;We execute an external command here.
    89                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
    90                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
    91                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
    92                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
    93                              <1>     ;We know the drive we are on is valid so no need to double check that!      
    94                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
    95 00003482 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
    96 00003489 4889FE              <1>     mov rsi, rdi
    97 0000348C B811120000          <1>     mov eax, 1211h  ;Normalise this path first
    98 00003491 CD2F                <1>     int 2fh
    99 00003493 E884100000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   100 00003498 4889FE              <1>     mov rsi, rdi    ;Source here
   101 0000349B 488D3D(67010000)    <1>     lea rdi, cmdFcb
   102 000034A2 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   103 000034A7 CD21                <1>     int 21h
   104 000034A9 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
   105 000034AB 0F855DE5FFFF        <1>     jnz badCmdError
   106 000034B1 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
   107                              <1> .pathLoop:
   108 000034B4 488D35(70010000)    <1>     lea rsi, qword [cmdFcb + fcb.fileext]
   109 000034BB 488D3D17D3FFFF      <1>     lea rdi, extStr
   110 000034C2 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
   111                              <1> .extLp:
   112 000034C7 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
   113 000034C8 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
   114 000034CD F3A6                <1>     rep cmpsb   ;Compare the two strings
   115 000034CF 5E                  <1>     pop rsi
   116 000034D0 85C9                <1>     test ecx, ecx
   117 000034D2 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
   118 000034D4 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
   119 000034D7 FFCA                <1>     dec edx         ;Else one less extension type to check
   120 000034D9 75EC                <1>     jnz .extLp
   121                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
   122                              <1>     ;If not, error.
   123 000034DB B903000000          <1>     mov ecx, 3
   124 000034E0 4889F7              <1>     mov rdi, rsi
   125 000034E3 B020                <1>     mov al, SPC
   126 000034E5 F3AE                <1>     rep scasb   
   127 000034E7 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
   128 000034E9 0F851FE5FFFF        <1>     jnz badCmdError    ;If not, error!
   129                              <1>     ;Now we search first with COM, then EXE, then BAT. 
   130 000034EF 488D35E3D2FFFF      <1>     lea rsi, extStr
   131 000034F6 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
   132                              <1> .extSrchLp:
   133 000034FB 488D3D(70010000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   134 00003502 B903000000          <1>     mov ecx, 3
   135 00003507 F3A4                <1>     rep movsb   ;Copy the extension over!
   136 00003509 E847010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
   137 0000350E 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
   138 00003510 FFCB                <1>     dec ebx                 ;Decrement extension counter
   139 00003512 75E7                <1>     jnz .extSrchLp
   140                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
   141                              <1> ; we start prepending path componants and trying again. To do this, we reset
   142                              <1> ; by setting the fcb extension back to all spaces.
   143 00003514 488D3D(70010000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   144 0000351B B903000000          <1>     mov ecx, 3
   145 00003520 B020                <1>     mov al, SPC
   146 00003522 F3AA                <1>     rep stosb   ;Store back the empty extension!
   147 00003524 EB71                <1>     jmp short .pathHandle
   148                              <1> .extFnd:
   149                              <1> ;Here if the file had the right extension.
   150 00003526 E82A010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
   151 0000352B 726A                <1>     jc .pathHandle
   152                              <1> .extSrchFnd:
   153                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
   154                              <1> ; a BAT. If it is, separate handling!
   155 0000352D 803D(70010000)42    <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
   156 00003534 0F84C0DFFFFF        <1>     je batLaunch
   157 0000353A 488D1D(A2010000)    <1>     lea rbx, launchBlock
   158 00003541 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
   159 00003545 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
   160 00003548 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
   161 0000354F 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
   162 00003553 498D405C            <1>     lea rax, qword [r8 + fcb1]
   163 00003557 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   164 0000355B 498D406C            <1>     lea rax, qword [r8 + fcb2]
   165 0000355F 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   166 00003563 488D15(48030000)    <1>     lea rdx, cmdPathSpec
   167 0000356A B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
   168 0000356F CD21                <1>     int 21h
   169                              <1> ;If the program failed to start, verify why!
   170 00003571 B800590000          <1>     mov eax, 5900h      ;Get extended error
   171 00003576 31DB                <1>     xor ebx, ebx
   172 00003578 CD21                <1>     int 21h
   173                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   174                              <1> ; The below doesnt make any sense. Retcode is
   175                              <1> ; is not the DOS error code.
   176                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   177                              <1>     ;mov word [returnCode], ax   ;Error code from EXEC
   178                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   179 0000357A 3C05                <1>     cmp al, errAccDen   ;Access denied?
   180 0000357C 0F8441E4FFFF        <1>     je badAccError
   181 00003582 3C08                <1>     cmp al, errNoMem    ;If not enough memory, print so
   182 00003584 0F841EE4FFFF        <1>     je badNoMemError    
   183 0000358A 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
   184 0000358C 0F84BD110000        <1>     je freezePC
   185 00003592 E977E4FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
   186                              <1> .pathHandle:        
   187                              <1> ;First check if rbp is null. If it is, its a first time entry. 
   188                              <1> ;al has error code!
   189 00003597 4885ED              <1>     test rbp, rbp
   190 0000359A 0F85A3000000        <1>     jnz .pathReentry
   191                              <1> ;Now check if the command we recieved included an absolute path.
   192                              <1> ;If so, we don't do path substitution and just fail at this point
   193 000035A0 488D35(48030000)    <1>     lea rsi, cmdPathSpec
   194 000035A7 66AD                <1>     lodsw   ;Get the first two chars
   195 000035A9 3A055BCAFFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
   196 000035AF 0F8459E4FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   197 000035B5 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
   198 000035B7 7412                <1>     je .pathGetEnv
   199 000035B9 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
   200 000035BC 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
   201 000035BE AC                  <1>     lodsb   ;Get the third char
   202 000035BF 3A0545CAFFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
   203 000035C5 0F8443E4FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   204                              <1> .pathGetEnv:
   205                              <1> ;Now get a pointer to the environment and search for PATH=
   206                              <1> ;We only take the final portion of the path and add it to each path componant
   207                              <1> ;This agrees with DOS 3.3
   208 000035CB E863120000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
   209 000035D0 0F8438E4FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
   210                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
   211                              <1>     ;Now we know we dont have to keep track of chars!!
   212 000035D6 488D3D1ED2FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
   213 000035DD E8AB120000          <1>     call searchForEnvVar
   214 000035E2 0F8226E4FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
   215 000035E8 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
   216 000035EB 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
   217                              <1> .pathRejoin:
   218 000035F2 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
   219 000035F5 0F8413E4FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
   220 000035FB 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
   221 000035FE 488D3D(F1040000)    <1>     lea rdi, searchSpec ;Build the path in searchSpec
   222                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
   223                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
   224                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
   225                              <1>     ;This is impossible to do if env edited by COMMAND.COM
   226 00003605 E8760F0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
   227 0000360A 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
   228 0000360D 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
   229 00003610 48FFCF              <1>     dec rdi ;Point to the null terminator
   230 00003613 8A05F1C9FFFF        <1>     mov al, byte [pathSep]
   231 00003619 3847FF              <1>     cmp byte [rdi - 1], al
   232 0000361C 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
   233 0000361E AA                  <1>     stosb   ;Store a pathsep onto the null terminator
   234                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
   235 0000361F 488D35(68010000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   236 00003626 E8150F0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
   237 0000362B 488D35(F1040000)    <1>     lea rsi, searchSpec 
   238 00003632 488D3D(48030000)    <1>     lea rdi, cmdPathSpec
   239 00003639 E8E90D0000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
   240 0000363E E971FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
   241                              <1> .pathReentry:
   242 00003643 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
   243 00003647 0F84C1E3FFFF        <1>     je badCmdError
   244                              <1> ;Currently, because we dont swap drives, we wont print this message.
   245                              <1> ;Not really a big deal...
   246                              <1>     ;cmp al, errBadDrv
   247                              <1>     ;jne .pathDrvOk
   248                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
   249                              <1>     ;mov eax, 0900h
   250                              <1>     ;int 21h
   251                              <1> ;.pathDrvOk:
   252 0000364D 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
   253 00003650 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
   254 00003653 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
   255                              <1> 
   256                              <1> .prepAndSearch:
   257                              <1> ;Copies over the name and extension in UC to the last componant of the 
   258                              <1> ;cmdPathSpec and null terminates. 
   259                              <1> ;Input: cmdFcb name + ext setup. 
   260                              <1> ;Output: rdx -> Filled in cmdPathSpec 
   261                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
   262 00003655 51                  <1>     push rcx
   263 00003656 56                  <1>     push rsi
   264 00003657 57                  <1>     push rdi
   265 00003658 488D3D(48030000)    <1>     lea rdi, cmdPathSpec 
   266 0000365F 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
   267 00003662 E8B50E0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
   268 00003667 807F013A            <1>     cmp byte [rdi + 1], ":"
   269 0000366B 7507                <1>     jne .notdriveRel
   270 0000366D 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
   271                              <1> .notdriveRel:
   272 00003674 488D35(68010000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   273 0000367B E8C00E0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
   274 00003680 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   275 00003685 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
   276 00003687 CD21                <1>     int 21h
   277 00003689 5F                  <1>     pop rdi
   278 0000368A 5E                  <1>     pop rsi
   279 0000368B 59                  <1>     pop rcx
   280                              <1>     return
    13                              <2> %%_ret:
    14 0000368C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> set:
   283 0000368D F605B7C9FFFFFF      <1>     test byte [arg1Flg], -1
   284 00003694 7539                <1>     jnz .editEnv
   285                              <1>     ;Here we just print the environment.
   286 00003696 E898110000          <1>     call checkEnvGoodAndGet 
   287 0000369B 0F8419E3FFFF        <1>     jz badEnvSpaceError
   288                              <1>     ;We know this is a good env so keep going! env ptr in rsi
   289 000036A1 4889F7              <1>     mov rdi, rsi
   290 000036A4 4889F2              <1>     mov rdx, rsi
   291                              <1> .findLp:
   292 000036A7 B9FFFFFFFF          <1>     mov ecx, -1
   293 000036AC 31C0                <1>     xor eax, eax
   294                              <1> .scanLp:
   295 000036AE F2AE                <1>     repne scasb
   296 000036B0 75FC                <1>     jne .scanLp
   297 000036B2 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
   298                              <1>     ;Else, we now print this environment variable and CRLF it
   299                              <1>     ;rdx points to the start of the string aleady
   300                              <1>     ;ecx has the bytes to print
   301 000036B4 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
   302 000036B9 B800400000          <1>     mov eax, 4000h  ;Print to handle
   303 000036BE CD21                <1>     int 21h
   304 000036C0 E84E0B0000          <1>     call printCRLF
   305 000036C5 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
   306                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000036C8 74(8C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 000036CA 4889FA              <1>     mov rdx, rdi   
   308 000036CD EBD8                <1>     jmp short .findLp
   309                              <1> .editEnv:
   310 000036CF E85F110000          <1>     call checkEnvGoodAndGet
   311 000036D4 0F84E0E2FFFF        <1>     jz badEnvSpaceError
   312 000036DA 0FB6056BC9FFFF      <1>     movzx eax, byte [arg1Off]
   313 000036E1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   314 000036E8 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
   315                              <1> .altEp:
   316 000036EB 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
   317 000036EE B00D                <1>     mov al, CR              ;Search for the CR
   318 000036F0 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
   319 000036F8 89CB                <1>     mov ebx, ecx            ;Save this count 
   320 000036FA 53                  <1>     push rbx                ;Save this count on the stack too!
   321 000036FB F2AE                <1>     repne scasb             ;Now get the length of this env string
   322 000036FD 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
   323 000036FF 66891D(D7070000)    <1>     mov word [envVarSz], bx ;Store the count
   324 00003706 59                  <1>     pop rcx                 ;Get the char count back!
   325 00003707 89CB                <1>     mov ebx, ecx            
   326 00003709 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
   327 0000370C B03D                <1>     mov al, "="             ;Scan for an equals sign
   328 0000370E F2AE                <1>     repne scasb
   329 00003710 0F859BE2FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
   330 00003716 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
   331 00003718 66891D(D9070000)    <1>     mov word [envVarNamSz], bx
   332 0000371F 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
   333 00003722 7477                <1>     je .delEnvVar           ;Free the envvar and return
   334 00003724 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
   335 00003725 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   336 00003728 E860110000          <1>     call searchForEnvVar    ;Look for the environment variable
   337 0000372D 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
   338 0000372F E887110000          <1>     call envFree            ;Free the var in rsi
   339                              <1> .editNewEnv:
   340 00003734 E8BB110000          <1>     call getFreeSpace       ;Get the free space in env in ecx
   341 00003739 E8DB110000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
   342 0000373E 5E                  <1>     pop rsi                 ;Get back the ptr to the string
   343 0000373F 31C0                <1>     xor eax, eax            ;Prepare null length!
   344 00003741 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
   345 00003747 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
   346 0000374A 720B                <1>     jb .reallocTry          ;Try to reallocate!
   347 0000374C FFC9                <1>     dec ecx                 ;Save a byte for end magic null
   348 0000374E 663B0D(D7070000)    <1>     cmp cx, word [envVarSz] ;Do we have enough space?
   349 00003755 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
   350                              <1> .reallocTry:
   351                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
   352                              <1>     ; we proceed with the environment size.
   353 00003757 E8D2110000          <1>     call growEnvBlock   ;Attempt to grow the environment
   354 0000375C 7319                <1>     jnc .reallocOk
   355 0000375E 0F8456E2FFFF        <1>     jz badEnvSpaceError    ;Max environment space
   356                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
   357                              <1>     ; partially the variable into the env. If so we do that. If the name
   358                              <1>     ; cannot fit, we don't bother
   359                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
   360 00003764 663B0D(D9070000)    <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
   361                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000376B 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000376D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 0000376E E847E2FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
   363 00003773 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
   364 00003775 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
   365                              <1> .reallocOk:
   366                              <1>     ;Here we have all the space to just copy the full path
   367 00003777 0FB70D(D7070000)    <1>     movzx ecx, word [envVarSz]
   368                              <1> .nameCp:
   369                              <1> ;Now copy over the env var, ecx = #ofchars to copy
   370                              <1> ;Always enough memory for name= here
   371 0000377E AC                  <1>     lodsb
   372 0000377F E8C60C0000          <1>     call ucChar
   373 00003784 AA                  <1>     stosb
   374 00003785 66FFC9              <1>     dec cx      ;Always decrement this count
   375 00003788 3C3D                <1>     cmp al, "="
   376 0000378A 75F2                <1>     jne .nameCp
   377                              <1> .exitNameCp:
   378 0000378C AC                  <1>     lodsb
   379 0000378D 3C0D                <1>     cmp al, CR
   380 0000378F 7405                <1>     je .exitCp
   381 00003791 AA                  <1>     stosb
   382 00003792 FFC9                <1>     dec ecx
   383 00003794 75F6                <1>     jnz .exitNameCp
   384                              <1> .exitCp:
   385 00003796 31C0                <1>     xor eax, eax
   386 00003798 66AB                <1>     stosw   ;Store the final null word
   387                              <1>     return
    13                              <2> %%_ret:
    14 0000379A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> .delEnvVar:
   389                              <1>     ;rsi -> Start of the envvar name in user buffer
   390 0000379B 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   391 0000379E E8EA100000          <1>     call searchForEnvVar    ;Look for the environment variable
   392 000037A3 7205                <1>     jc .delEnvVarSkip
   393 000037A5 E811110000          <1>     call envFree    ;Free the env var at rsi
   394                              <1> .delEnvVarSkip:
   395 000037AA F8                  <1>     clc             ;Clear CF if the var doesnt exist
   396                              <1>     return
    13                              <2> %%_ret:
    14 000037AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> pathEdit:
   399                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
   400                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
   401                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
   402                              <1> ; end there. Error with too many arguments error!
   403                              <1> ;If after the equals sign there is nothing, we just print the path!
   404                              <1> ;Gotta process the command line ourselves first
   405 000037AC E882100000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   406 000037B1 0F8403E2FFFF        <1>     jz badEnvSpaceError
   407                              <1>     ;Now we know we can use r8 to get the envptr when needed
   408 000037B7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   409 000037BE E8AD000000          <1>     call .skipPathDelimiters
   410 000037C3 3C0D                <1>     cmp al, CR
   411 000037C5 7466                <1>     je .printPath
   412                              <1> ;Else use the set command to setup the path in the searchSpec.
   413 000037C7 56                  <1>     push rsi    ;Save the first char of the command line string
   414 000037C8 488D352CD0FFFF      <1>     lea rsi, pathEVar
   415 000037CF 488D3D(F1040000)    <1>     lea rdi, searchSpec
   416 000037D6 E84C0C0000          <1>     call strcpy
   417 000037DB 48FFCF              <1>     dec rdi     ;Point to the terminating null
   418 000037DE 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
   419 000037DF 31C9                <1>     xor ecx, ecx    ;Make a count of chars
   420                              <1> .cpLp:
   421 000037E1 AC                  <1>     lodsb
   422 000037E2 3C0D                <1>     cmp al, CR
   423 000037E4 7411                <1>     je .cpLpExit
   424 000037E6 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
   425 000037EB 740A                <1>     je .cpLpExit
   426 000037ED E8580C0000          <1>     call ucChar ;Uppercase the char
   427 000037F2 AA                  <1>     stosb       ;Store it
   428 000037F3 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
   429 000037F5 EBEA                <1>     jmp short .cpLp
   430                              <1> .cpLpExit:
   431                              <1>     ;Remove trailing semicolons
   432 000037F7 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
   433 000037FB 7507                <1>     jne .cpLpNoIntervene
   434 000037FD FFC9                <1>     dec ecx     ;Reduce the count by one
   435 000037FF 48FFCF              <1>     dec rdi     ;Go back a char
   436 00003802 EBF3                <1>     jmp short .cpLpExit ;Keep removing
   437                              <1> .cpLpNoIntervene:
   438 00003804 B00D                <1>     mov al, CR  ;Now we store the terminator!
   439 00003806 AA                  <1>     stosb       ;Store it!
   440 00003807 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
   441 0000380D 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
   442 00003814 FFC1                <1>     inc ecx     ;Add the CR for copying over
   443 00003816 488D35(F1040000)    <1>     lea rsi, searchSpec
   444 0000381D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   445 00003824 57                  <1>     push rdi
   446 00003825 F3A4                <1>     rep movsb
   447 00003827 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
   448 00003828 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
   449                              <1> .printPath:
   450 0000382D 488D3DC7CFFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
   451 00003834 E854100000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
   452 00003839 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
   453 0000383B 4889F7              <1>     mov rdi, rsi        
   454 0000383E E8FD0B0000          <1>     call strlen         ;Get the length of the path in rdi
   455 00003843 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
   456 00003849 7411                <1>     je .noPathPrnt      ;Print no path!
   457 0000384B FFC9                <1>     dec ecx             ;Drop the terminating null from the count
   458 0000384D 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
   459 00003850 BB01000000          <1>     mov ebx, 1          ;STDOUT
   460 00003855 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
   461 0000385A EB0C                <1>     jmp short .pathExit
   462                              <1> .noPathPrnt:
   463 0000385C 488D1561CCFFFF      <1>     lea rdx, noPath
   464 00003863 B800090000          <1>     mov eax, 0900h
   465                              <1> .pathExit:
   466 00003868 CD21                <1>     int 21h
   467 0000386A E8A4090000          <1>     call printCRLF      ;Print a crlf at the end
   468                              <1>     return
    13                              <2> %%_ret:
    14 0000386F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> .skipPathDelimiters:
   470                              <1> ;Input: rsi -> Start of string to parse
   471                              <1> ;Output: rsi -> First non-delimiter char of string
   472                              <1> ;        al = First non delim char
   473 00003870 AC                  <1>     lodsb
   474 00003871 E806000000          <1>     call .isALPathDelimiter
   475 00003876 74F8                <1>     je .skipPathDelimiters
   476 00003878 48FFCE              <1>     dec rsi
   477                              <1>     return
    13                              <2> %%_ret:
    14 0000387B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .isALPathDelimiter:
   479                              <1> ;Same as before without semicolon
   480 0000387C 3C20                <1>     cmp al, SPC
   481                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000387E 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   482 00003880 3C09                <1>     cmp al, TAB
   483                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003882 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   484 00003884 3C2C                <1>     cmp al, ","
   485                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003886 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   486 00003888 3C3D                <1>     cmp al, "="
   487                              <1>     return
    13                              <2> %%_ret:
    14 0000388A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   488                              <1> 
   489                              <1> prompt:
   490 0000388B E8A30F0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   491 00003890 0F8424E1FFFF        <1>     jz badEnvSpaceError
   492                              <1>     ;Now we know we can use r8 to get the envptr when needed
   493 00003896 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   494 0000389D E8C30B0000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
   495 000038A2 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
   496 000038A5 742C                <1>     je .reset   ;Reset if so
   497 000038A7 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
   498 000038A8 488D3522CFFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
   499 000038AF 488D3D(F1040000)    <1>     lea rdi, searchSpec
   500 000038B6 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
   501 000038BB F3A4                <1>     rep movsb
   502 000038BD 5E                  <1>     pop rsi ;Get back ptr to the user typed line
   503 000038BE 31C9                <1>     xor ecx, ecx    ;Get char count
   504                              <1> .cp:    ;Now copy the user string over
   505 000038C0 AC                  <1>     lodsb
   506 000038C1 AA                  <1>     stosb 
   507 000038C2 3C0D                <1>     cmp al, CR
   508 000038C4 7404                <1>     je .cpOk
   509 000038C6 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
   510 000038C8 EBF6                <1>     jmp short .cp
   511                              <1> .cpOk:
   512 000038CA 488D35(F1040000)    <1>     lea rsi, searchSpec ;Source the string from here
   513 000038D1 EB09                <1>     jmp short .goSet    ;Got the CR-less count
   514                              <1> .reset:
   515                              <1> ;Delete the environment variable!
   516 000038D3 488D35F7CEFFFF      <1>     lea rsi, promptEVar 
   517 000038DA 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
   518                              <1> .goSet:
   519 000038DC 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
   520 000038E2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
   521 000038E9 FFC1                <1>     inc ecx     ;Include CR in copy
   522 000038EB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   523 000038F2 57                  <1>     push rdi
   524 000038F3 F3A4                <1>     rep movsb
   525 000038F5 5E                  <1>     pop rsi
   526 000038F6 E9F0FDFFFF          <1>     jmp set.altEp
   527                              <1> 
   528                              <1> echo:
   529 000038FB F60549C7FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
   530 00003902 752A                <1>     jnz .argGiven
   531 00003904 488D15AECCFFFF      <1>     lea rdx, echoIs
   532 0000390B E80A090000          <1>     call printString
   533 00003910 488D1588CCFFFF      <1>     lea rdx, onMes
   534 00003917 488D0D7BCCFFFF      <1>     lea rcx, offMes
   535 0000391E F605E8C6FFFFFF      <1>     test byte [echoFlg], -1
   536 00003925 480F44D1            <1>     cmovz rdx, rcx
   537 00003929 E9EC080000          <1>     jmp printString
   538                              <1> .argGiven:
   539 0000392E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   540 00003935 0FB60510C7FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
   541 0000393C 4801C6              <1>     add rsi, rax
   542 0000393F AC                  <1>     lodsb   ;Get this char
   543 00003940 48FFCE              <1>     dec rsi ;And go back to the start of the string
   544 00003943 E8020B0000          <1>     call ucChar
   545 00003948 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
   546 0000394A 755A                <1>     jne .directEcho
   547 0000394C 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
   548 0000394F E8F60A0000          <1>     call ucChar
   549 00003954 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
   550 00003956 751B                <1>     jne .checkOff
   551 00003958 56                  <1>     push rsi
   552 00003959 4881C602000000      <1>     add rsi, 2  ;Go past on string
   553 00003960 E8000B0000          <1>     call skipDelimiters
   554 00003965 803E0D              <1>     cmp byte [rsi], CR
   555 00003968 5E                  <1>     pop rsi
   556 00003969 753B                <1>     jne .directEcho ;If its not, just echo the string
   557 0000396B C6059BC6FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
   558                              <1>     return
    13                              <2> %%_ret:
    14 00003972 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> .checkOff:
   560 00003973 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
   561 00003976 E8CF0A0000          <1>     call ucChar
   562 0000397B 3C46                <1>     cmp al, "F" ;Is it an F?
   563 0000397D 7527                <1>     jne .directEcho ;No, just direct echo
   564 0000397F 8A4602              <1>     mov al, byte [rsi + 2]
   565 00003982 E8C30A0000          <1>     call ucChar
   566 00003987 3C46                <1>     cmp al, "F"
   567 00003989 751B                <1>     jne .directEcho
   568 0000398B 56                  <1>     push rsi
   569 0000398C 4881C603000000      <1>     add rsi, 3
   570 00003993 E8CD0A0000          <1>     call skipDelimiters
   571 00003998 803E0D              <1>     cmp byte [rsi], CR
   572 0000399B 5E                  <1>     pop rsi
   573 0000399C 7508                <1>     jne .directEcho
   574 0000399E C60568C6FFFF00      <1>     mov byte [echoFlg], 0
   575                              <1>     return
    13                              <2> %%_ret:
    14 000039A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> .directEcho: 
   577 000039A6 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
   578 000039AD 4889F3              <1>     mov rbx, rsi    
   579 000039B0 4829D3              <1>     sub rbx, rdx
   580 000039B3 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
   581 000039BB 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
   582 000039BD 0F8247080000        <1>     jc printCRLFecho    ;If something weird, echo nothing
   583 000039C3 4889F2              <1>     mov rdx, rsi
   584 000039C6 BB01000000          <1>     mov ebx, 1
   585 000039CB B800400000          <1>     mov eax, 4000h
   586 000039D0 CD21                <1>     int 21h
   587 000039D2 E93C080000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
   588                              <1> 
   589                              <1> pauza:  ;Well... pause is an instruction in english 0:)
   590                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
   591                              <1> ; with just... the actual command tail being echoed with the command -_-
   592 000039D7 F6052FC6FFFFFF      <1>     test byte [echoFlg], -1
   593 000039DE 7528                <1>     jnz .echoTail
   594                              <1> ;Since we havent echoed the command out, type the tail out manually
   595 000039E0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
   596 000039E7 E8790A0000          <1>     call skipDelimiters ;Skip leading delims
   597 000039EC 4889F2              <1>     mov rdx, rsi
   598 000039EF 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
   599 000039F7 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
   600 000039FC B800400000          <1>     mov eax, 4000h  ;Write
   601 00003A01 CD21                <1>     int 21h
   602 00003A03 E80B080000          <1>     call printCRLF
   603                              <1> .echoTail:
   604 00003A08 488D151DC9FFFF      <1>     lea rdx, pauseMes
   605 00003A0F E806080000          <1>     call printString
   606 00003A14 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
   607 00003A19 CD21                <1>     int 21h
   608 00003A1B E8F3070000          <1>     call printCRLF
   609                              <1>     return
    13                              <2> %%_ret:
    14 00003A20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> remark:
   611                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
   612 00003A21 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   613                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A28 74(20)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   614                              <1> .go:
   615 00003A2A 5B                  <1>     pop rbx
   616 00003A2B 5B                  <1>     pop rbx ;Realign the stack back :)
   617 00003A2C E8C5D9FFFF          <1>     call getSetMainState
   618 00003A31 E9FACFFFFF          <1>     jmp commandMain.inputGetAgain   ;Clean any redirs and get input
   619                              <1> 
   620                              <1> shift:
   621                              <1> ;If not in batch, immediately return!
   622 00003A36 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   623                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A3D 74(20)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   624 00003A3F 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]  ;Get the batch block
   625 00003A46 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]
   626 00003A4A 488D7702            <1>     lea rsi, qword [rdi + 2]    ;Source from one word ahead
   627 00003A4E B909000000          <1>     mov ecx, 9
   628 00003A53 31C0                <1>     xor eax, eax
   629                              <1> .lp:
   630 00003A55 66AD                <1>     lodsw
   631 00003A57 66AB                <1>     stosw
   632 00003A59 3DFFFF0000          <1>     cmp eax, 0FFFFh   ;Once we xfer a -1 word, no more args on cmd line
   633                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A5E 74(20)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   634 00003A60 FFC9                <1>     dec ecx
   635 00003A62 75F1                <1>     jnz .lp
   636                              <1> ;Now we gotta scan for one more cmdline argument
   637 00003A64 66C7432DFFFF        <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], -1   ;Init a -1 at the end
   638 00003A6A B00D                <1>     mov al, CR
   639 00003A6C 31C9                <1>     xor ecx, ecx
   640 00003A6E FFC9                <1>     dec ecx ;
   641 00003A70 488D3C03            <1>     lea rdi, qword [rbx + rax]  ;rax has the last offset
   642 00003A74 F2AE                <1>     repne scasb ;Find CR which terminated old last argument, go past it
   643 00003A76 803F00              <1>     cmp byte [rdi], 0   ;If this is the terminating null, leave as -1
   644                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A79 74(20)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   645 00003A7B 4829DF              <1>     sub rdi, rbx    ;Get the offset from batBlockHdr
   646 00003A7E 66897B2D            <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], di    ;Store the difference
   647                              <1>     return
    13                              <2> %%_ret:
    14 00003A82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1>     
   649                              <1> goto:
   650                              <1> ;If not in batch, immediately return!
   651 00003A83 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   652                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A8A 74(82)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   653 00003A8C 488B2D(1B000000)    <1>     mov rbp, qword [bbPtr]
   654 00003A93 4885ED              <1>     test rbp, rbp
   655                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003A96 74(82)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   656                              <1> ;Start by copying the command line label to fcb1
   657 00003A98 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   658 00003A9F 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
   659 00003AA3 E8BD090000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
   660 00003AA8 B908000000          <1>     mov ecx, 8
   661 00003AAD 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
   662 00003AB0 7503                <1>     jne .startCopy
   663 00003AB2 48FFC6              <1>     inc rsi
   664                              <1> .startCopy:
   665 00003AB5 AC                  <1>     lodsb
   666 00003AB6 3C20                <1>     cmp al, SPC         ;Skip any spaces
   667 00003AB8 74FB                <1>     je .startCopy       
   668 00003ABA 3C0D                <1>     cmp al, CR          ;If CR, exit copy
   669 00003ABC 740C                <1>     je .endCopy
   670 00003ABE E8B0090000          <1>     call isALdelimiter  ;If delimiter char, exit copy
   671 00003AC3 7405                <1>     jz .endCopy
   672 00003AC5 AA                  <1>     stosb           
   673 00003AC6 FFC9                <1>     dec ecx             ;Decrement counter
   674 00003AC8 75EB                <1>     jnz .startCopy
   675                              <1> .endCopy:
   676                              <1> ;Now search the batch file for the label.
   677 00003ACA F7D9                <1>     neg ecx
   678 00003ACC 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
   679 00003AD2 498D505C            <1>     lea rdx, qword [r8 + fcb1]
   680 00003AD6 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
   681 00003AD8 E8CB000000          <1>     call .ucChars   ;Now we UC the chars in the string
   682 00003ADD 48C7451300000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
   683 00003AE5 E82FDEFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
   684                              <1> ;File opened from the start. Now start byte by byte read.
   685                              <1> .notLabelLp:
   686 00003AEA F605(1A000000)10    <1>     test byte [statFlg1], batchEOF  
   687 00003AF1 0F859F000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
   688 00003AF7 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
   689                              <1> .findLbl:
   690                              <1> ;Keep searching for a label
   691 00003AFB E84DDEFFFF          <1>     call batReadChar
   692 00003B00 0F8490000000        <1>     jz .eof
   693 00003B06 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   694 00003B0A 803A3A              <1>     cmp byte [rdx], ":"
   695 00003B0D 75EC                <1>     jne .findLbl 
   696                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
   697 00003B0F 31C9                <1>     xor ecx, ecx
   698                              <1> .loadRead:
   699 00003B11 E837DEFFFF          <1>     call batReadChar
   700 00003B16 744D                <1>     jz .lblDone
   701 00003B18 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
   702 00003B1A 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   703 00003B1E 3C0D                <1>     cmp al, CR
   704 00003B20 7433                <1>     je .lblDoneCR
   705 00003B22 3C0A                <1>     cmp al, LF
   706 00003B24 743F                <1>     je .lblDone
   707 00003B26 3C20                <1>     cmp al, SPC
   708 00003B28 74E7                <1>     je .loadRead
   709 00003B2A E844090000          <1>     call isALdelimiter
   710 00003B2F 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
   711 00003B31 48FFC2              <1>     inc rdx ;Inc the storage pointer
   712 00003B34 FFC1                <1>     inc ecx ;Inc the count
   713 00003B36 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
   714 00003B3C 75D3                <1>     jne .loadRead
   715                              <1> .pullEol:
   716 00003B3E E80ADEFFFF          <1>     call batReadChar
   717 00003B43 7420                <1>     jz .lblDone
   718 00003B45 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   719 00003B49 803A0D              <1>     cmp byte [rdx], CR
   720 00003B4C 7407                <1>     je .lblDoneCR
   721 00003B4E 803A0A              <1>     cmp byte [rdx], LF
   722 00003B51 7412                <1>     je .lblDone
   723 00003B53 EBE9                <1>     jmp short .pullEol
   724                              <1> .lblDoneCR:
   725                              <1> ;Read a CR, check if the next char is an LF and scan past it.
   726 00003B55 E8F3DDFFFF          <1>     call batReadChar
   727 00003B5A 7409                <1>     jz .lblDone
   728 00003B5C 803A0A              <1>     cmp byte [rdx], LF
   729 00003B5F 7504                <1>     jne .lblDone    ;No LF
   730                              <1> ;Else include the LF in the count to go past
   731 00003B61 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
   732                              <1> .lblDone:
   733                              <1> ;Check what we have to see if it is possible to form a label
   734 00003B65 498D506C            <1>     lea rdx, qword [r8 + fcb2]
   735 00003B69 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
   736 00003B6B E838000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
   737                              <1> ;Now compare the strings (trailing space padding)
   738 00003B70 488D32              <1>     lea rsi, qword [rdx]
   739 00003B73 AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
   740 00003B74 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
   741 00003B77 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
   742 00003B7B 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
   743 00003B7E 0F8566FFFFFF        <1>     jne .notLabelLp
   744 00003B84 F3A6                <1>     repe cmpsb  ;Now do a string cmp
   745 00003B86 0F855EFFFFFF        <1>     jne .notLabelLp
   746                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
   747 00003B8C E8B4DDFFFF          <1>     call batClose   ;Close the handle
   748 00003B91 E994FEFFFF          <1>     jmp remark.go   ;Now behave like rem to get the next line!
   749                              <1> .eof:
   750                              <1> ;Print label not found, end batch mode and return
   751 00003B96 488D1572C9FFFF      <1>     lea rdx, badLbl
   752 00003B9D E878060000          <1>     call printString
   753 00003BA2 E818DBFFFF          <1>     call batFinish  ;Kill the batch processor
   754                              <1>     return
    13                              <2> %%_ret:
    14 00003BA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> .ucChars:
   757                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
   758                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
   759 00003BA8 50                  <1>     push rax
   760 00003BA9 51                  <1>     push rcx
   761 00003BAA 56                  <1>     push rsi
   762                              <1> 
   763 00003BAB 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
   764 00003BAF 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
   765                              <1> .ucclp:
   766 00003BB2 AC                  <1>     lodsb   ;Get the char
   767 00003BB3 E892080000          <1>     call ucChar
   768 00003BB8 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
   769 00003BBB FFC9                <1>     dec ecx     
   770 00003BBD 75F3                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
   771                              <1>     
   772 00003BBF 5E                  <1>     pop rsi
   773 00003BC0 59                  <1>     pop rcx
   774 00003BC1 58                  <1>     pop rax
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003BC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> ifCmd:
   778 00003BC3 C605(72000000)00    <1>     mov byte [ifFlg], ifReset ;Reset not state
   779 00003BCA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   780 00003BD1 E8250C0000          <1>     call getNextArg    ;Skip leading delimiters
   781 00003BD6 4889F3              <1>     mov rbx, rsi        ;Save the possible start of string ptr (if string)
   782 00003BD9 E8FE0B0000          <1>     call makeAsciizAdv ;Move rsi to next word, rdi -> ASCIZ string
   783 00003BDE 56                  <1>     push rsi    ;Save ptr to the next word on stack
   784 00003BDF 488D3555CAFFFF      <1>     lea rsi, notString
   785 00003BE6 E8250C0000          <1>     call strcmp
   786 00003BEB 5E                  <1>     pop rsi
   787 00003BEC 750F                <1>     jne .chkErlvl
   788 00003BEE 800D(72000000)01    <1>     or byte [ifFlg], ifNot  ;Set not on
   789 00003BF5 4889F3              <1>     mov rbx, rsi    ;Save the start of string ptr (if string)
   790 00003BF8 E8DF0B0000          <1>     call makeAsciizAdv     ;Goto next word
   791                              <1> .chkErlvl:
   792 00003BFD 56                  <1>     push rsi    ;rsi points to the argument
   793 00003BFE 488D353ACAFFFF      <1>     lea rsi, errlvlStr
   794 00003C05 E8060C0000          <1>     call strcmp
   795 00003C0A 5E                  <1>     pop rsi
   796 00003C0B 0F849A000000        <1>     je .errorLvl
   797 00003C11 56                  <1>     push rsi
   798 00003C12 488D3531CAFFFF      <1>     lea rsi, existStr
   799 00003C19 E8F20B0000          <1>     call strcmp
   800 00003C1E 5E                  <1>     pop rsi
   801 00003C1F 7472                <1>     je .exist
   802                              <1> ;Here we check condition string1==string2
   803                              <1> ;rsi points to the start of the string to check condition of
   804 00003C21 4889DE              <1>     mov rsi, rbx    ;Get back the start of the string
   805 00003C24 4889F7              <1>     mov rdi, rsi    ;Move rdi to the start of the string
   806 00003C27 31C9                <1>     xor ecx, ecx    ;String length cnt
   807                              <1> .scCheck:
   808 00003C29 AC                  <1>     lodsb
   809 00003C2A 3C3D                <1>     cmp al, "="
   810 00003C2C 7417                <1>     je .scEqFnd
   811 00003C2E E840080000          <1>     call isALdelimiter
   812 00003C33 0F8478DDFFFF        <1>     je badSyntaxError
   813 00003C39 3C0D                <1>     cmp al, CR
   814 00003C3B 0F8470DDFFFF        <1>     je badSyntaxError
   815 00003C41 FFC1                <1>     inc ecx         ;One more char to count
   816 00003C43 EBE4                <1>     jmp short .scCheck
   817                              <1> .scEqFnd:
   818 00003C45 AC                  <1>     lodsb   ;Move rsi to the char past this equal sign
   819 00003C46 3C3D                <1>     cmp al, "=" ;Is the second char an equal too?
   820 00003C48 0F8563DDFFFF        <1>     jne badSyntaxError
   821 00003C4E F3A6                <1>     repe cmpsb  ;Compare the strings, leave rsi past string 2
   822 00003C50 7507                <1>     jnz .cndMiss
   823                              <1> .cndHit:
   824 00003C52 800D(72000000)02    <1>     or byte [ifFlg], ifCond ;The default condition was hit
   825                              <1> .cndMiss:
   826 00003C59 0FB605(72000000)    <1>     movzx eax, byte [ifFlg]
   827 00003C60 89C3                <1>     mov ebx, eax
   828 00003C62 D1EB                <1>     shr ebx, 1      ;Get bit 1 to bit 0
   829 00003C64 2501000000          <1>     and eax, 1      ;Isolate bit 0
   830 00003C69 31D8                <1>     xor eax, ebx    ;xor the condition hit bit with not. If 1, execute!
   831                              <1>     retz            ;Else return silently!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003C6B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003C6D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   832                              <1> ;Now rsi points to delims before the command. 
   833                              <1> ; Skip the delims and copy the argument!
   834 00003C6E E8F2070000          <1>     call skipDelimiters    ;Now go to the next argument (No need for CR check)
   835 00003C73 488D3D(C4010000)    <1>     lea rdi, qword [inBuffer + 2]
   836 00003C7A 31C9                <1>     xor ecx, ecx
   837                              <1> .cpExitLp:
   838 00003C7C AC                  <1>     lodsb
   839 00003C7D AA                  <1>     stosb
   840 00003C7E FFC1                <1>     inc ecx ;Add a new char to the count
   841 00003C80 3C0D                <1>     cmp al, CR
   842 00003C82 75F8                <1>     jne .cpExitLp
   843 00003C84 FFC9                <1>     dec ecx ;Drop CR from count
   844 00003C86 880D(C3010000)      <1>     mov byte [inBuffer + 1], cl
   845 00003C8C 58                  <1>     pop rax ;Balance the stack
   846 00003C8D 58                  <1>     pop rax
   847 00003C8E E9D4CDFFFF          <1>     jmp commandMain.batProceed    ;And execute the command now!
   848                              <1> .exist:
   849                              <1> ;Here we do the check for file existance
   850 00003C93 E8440B0000          <1>     call makeAsciizAdv
   851 00003C98 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   852 00003C9D 4889FA              <1>     mov rdx, rdi    ;Move the ptr to rdx
   853 00003CA0 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   854 00003CA5 CD21                <1>     int 21h
   855 00003CA7 73A9                <1>     jnc .cndHit
   856 00003CA9 EBAE                <1>     jmp short .cndMiss
   857                              <1> .errorLvl:
   858                              <1> ;Here we do the check for error level
   859 00003CAB E82C0B0000          <1>     call makeAsciizAdv
   860 00003CB0 4887FE              <1>     xchg rdi, rsi
   861 00003CB3 E8660A0000          <1>     call getNum     ;Get value in eax
   862 00003CB8 3DFF000000          <1>     cmp eax, 255    ;Value can't be bigger than 255
   863 00003CBD 0F87EEDCFFFF        <1>     ja badSyntaxError
   864 00003CC3 4887FE              <1>     xchg rdi, rsi
   865 00003CC6 3A05(00000000)      <1>     cmp al, byte [returnCode]
   866 00003CCC 7484                <1>     je .cndHit
   867 00003CCE E986FFFFFF          <1>     jmp .cndMiss
   868                              <1> 
   869                              <1> forCmd:
   870                              <1> ;FOR %<var> IN (list) DO command
   871                              <1> ;Allocate a FOR block, parse the for command line and fill in the forBlk.
   872                              <1> ; Works by writing a new version of the commandline for each element in the
   873                              <1> ; list. If %<arg> in the command, it just executes the command n times where 
   874                              <1> ; n is the number of elements in the list.
   875 00003CD3 F605(F5000000)FF    <1>     test byte [forFlg], -1
   876 00003CDA 0F85BADCFFFF        <1>     jnz badForError
   877 00003CE0 BB19000000          <1>     mov ebx, ((forBlk_size + 0Fh) >> 4) ;Get paras to allocate
   878 00003CE5 B800480000          <1>     mov eax, 4800h  ;ALLOC
   879 00003CEA CD21                <1>     int 21h
   880 00003CEC 0F82B6DCFFFF        <1>     jc badNoMemError
   881 00003CF2 C605(F5000000)FF    <1>     mov byte [forFlg], -1   ;Set var
   882 00003CF9 488905(F6000000)    <1>     mov qword [pForBlk], rax    ;Save the ptr to the ForBlk
   883 00003D00 4889C5              <1>     mov rbp, rax            ;Move forblk ptr to rbp
   884                              <1> ;Clean the memory block for use
   885 00003D03 4889C7              <1>     mov rdi, rax
   886 00003D06 31C0                <1>     xor eax, eax
   887 00003D08 B986010000          <1>     mov ecx, forBlk_size
   888 00003D0D F3AA                <1>     rep stosb
   889                              <1> ;Clean any pre-established redirs
   890 00003D0F E8D1D1FFFF          <1>     call cleanupRedirs  ;Preserves rbp
   891                              <1> ;Now copy the command line to the block :)
   892 00003D14 488D35(C2010000)    <1>     lea rsi, inBuffer   ;Start reading what we typed in
   893 00003D1B 488DBD95000000      <1>     lea rdi, qword [rbp + forBlk.sCmdLine]
   894 00003D22 57                  <1>     push rdi
   895 00003D23 B982000000          <1>     mov ecx, cmdBufferL
   896 00003D28 F3A4                <1>     rep movsb   ;And copy!
   897 00003D2A 5E                  <1>     pop rsi     ;Now source the command line from our copy! :)
   898                              <1> ;Now we parse the command line.
   899 00003D2B 4881C602000000      <1>     add rsi, 2  ;Now skip the buffer length bytes
   900 00003D32 E8C40A0000          <1>     call getNextArg     ;Moves rdi to the FOR. Guaranteed to be so! 
   901                              <1> .findForLp:
   902 00003D37 E8A00A0000          <1>     call makeAsciizAdv  ;Move rsi to the next word (%<VAR>) [LAZY!]
   903 00003D3C 56                  <1>     push rsi
   904 00003D3D 488D3504C8FFFF      <1>     lea rsi, forStr
   905 00003D44 E8C70A0000          <1>     call strcmp
   906 00003D49 5E                  <1>     pop rsi
   907 00003D4A 75EB                <1>     jne .findForLp  ;We are guaranteed to have a FOR in the command line
   908 00003D4C E88B0A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to IN
   909 00003D51 803F25              <1>     cmp byte [rdi], "%"
   910 00003D54 0F85D3000000        <1>     jne .forBadSynExit
   911 00003D5A 807F0200            <1>     cmp byte [rdi + 2], 0
   912 00003D5E 0F85C9000000        <1>     jne .forBadSynExit
   913 00003D64 0FB64701            <1>     movzx eax, byte [rdi + 1]
   914 00003D68 888585010000        <1>     mov byte [rbp + forBlk.bLpVar], al  ;Store the loopchar
   915 00003D6E E8690A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to "("
   916 00003D73 56                  <1>     push rsi
   917 00003D74 488D35D5C8FFFF      <1>     lea rsi, inStr
   918 00003D7B E8900A0000          <1>     call strcmp
   919 00003D80 5E                  <1>     pop rsi
   920 00003D81 0F85A6000000        <1>     jne .forBadSynExit
   921                              <1> ;Need special handling now as "(" might be appended to element
   922 00003D87 AC                  <1>     lodsb   ;Get the byte, advance rsi past it 
   923 00003D88 3A05C8C8FFFF        <1>     cmp al, byte [listOpenStr]
   924 00003D8E 0F8599000000        <1>     jne .forBadSynExit
   925 00003D94 E8620A0000          <1>     call getNextArg
   926                              <1>     ;rsi points to the first list element
   927                              <1> .argCpy:
   928 00003D99 E83E0A0000          <1>     call makeAsciizAdv  ;Move rsi to the next list element
   929                              <1> ;Now we check if this is just a ")"
   930 00003D9E 0FB707              <1>     movzx eax, word [rdi]   ;Get this word
   931 00003DA1 663B05B0C8FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   932 00003DA8 744F                <1>     je .argCpyEnd
   933                              <1> ;Here we have a list element, rsi points to next entry in list
   934 00003DAA FE4500              <1>     inc byte [rbp + forBlk.bListc]  ;We have one more argument
   935 00003DAD 488B9D85000000      <1>     mov rbx, qword [rbp + forBlk.pLstCurr]  ;Get ptr to space for list element
   936 00003DB4 4885DB              <1>     test rbx, rbx
   937 00003DB7 7504                <1>     jnz .inProgress
   938                              <1> ;Here we have the first list element
   939 00003DB9 488D5D01            <1>     lea rbx, qword [rbp + forBlk.sListBlk]   ;Start writing here
   940                              <1> .inProgress:
   941                              <1> ;Now check if this command is terminated with a ). If it is, end of list.
   942 00003DBD 57                  <1>     push rdi
   943 00003DBE E87D060000          <1>     call strlen ;Get the string length 
   944 00003DC3 81E902000000        <1>     sub ecx, 2     ;Drop terminating null
   945 00003DC9 4801CF              <1>     add rdi, rcx    ;Point to the final char
   946 00003DCC 0FB707              <1>     movzx eax, word [rdi]   ;Get this char
   947 00003DCF 663B0582C8FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   948 00003DD6 7503                <1>     jne .notEnd
   949 00003DD8 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null over the ")"
   950                              <1> .notEnd:
   951 00003DDB 5F                  <1>     pop rdi
   952 00003DDC 56                  <1>     push rsi
   953 00003DDD 4889FE              <1>     mov rsi, rdi    ;Source ASCIZ from the buffer we built in
   954 00003DE0 4889DF              <1>     mov rdi, rbx    ;Write here
   955 00003DE3 E83F060000          <1>     call strcpy     ;Copy and advance pointers with terminating null
   956 00003DE8 4889BD85000000      <1>     mov qword [rbp + forBlk.pLstCurr], rdi  ;Store next arg here
   957 00003DEF 5E                  <1>     pop rsi
   958 00003DF0 663B0561C8FFFF      <1>     cmp ax, word [listClosStr]  ;Check again
   959 00003DF7 75A0                <1>     jne .argCpy ;If not equal, we loop again
   960                              <1> .argCpyEnd:
   961                              <1> ;rsi points to DO command here. 
   962                              <1> ;Parsed all arguments, store ptr to head of asciiz list for processing
   963 00003DF9 E8DE090000          <1>     call makeAsciizAdv  ;Move rsi to the command string
   964 00003DFE 56                  <1>     push rsi
   965 00003DFF 488D354DC8FFFF      <1>     lea rsi, doStr
   966 00003E06 E8050A0000          <1>     call strcmp
   967 00003E0B 5E                  <1>     pop rsi
   968 00003E0C 751F                <1>     jne .forBadSynExit
   969 00003E0E 4889B58D000000      <1>     mov qword [rbp + forBlk.pCmd], rsi  ;Store ptr to head of cmd string :)
   970 00003E15 48C785850000000000- <1>     mov qword [rbp + forBlk.pLstCurr], 0 ;Signal to start from first arg
   970 00003E1E 0000                <1>
   971 00003E20 807D0000            <1>     cmp byte [rbp + forBlk.bListc], 0   ;If the count of args 0, syntax error
   972 00003E24 7407                <1>     je .forBadSynExit
   973 00003E26 E8E8030000          <1>     call printCRLF  ;Else print CRLF to indicate command accepted 
   974 00003E2B EB0A                <1>     jmp short forProceed    ;And go!!!!
   975                              <1> .forBadSynExit:
   976 00003E2D E889010000          <1>     call forFree
   977 00003E32 E97ADBFFFF          <1>     jmp badSyntaxError
   978                              <1> 
   979                              <1> forProceed:
   980                              <1> ;Start by getting the forblk pointer and set the FFblock immediately
   981 00003E37 488B2D(F6000000)    <1>     mov rbp, qword [pForBlk]    ;Get the ptr to the for block
   982 00003E3E 488D955A010000      <1>     lea rdx, qword [rbp + forBlk.sFFBuffer]
   983 00003E45 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA to the FFblock dta
   984 00003E4A CD21                <1>     int 21h
   985                              <1> ;Now we ascertain whether or not we need a new list entry or use existing
   986                              <1> .longString:
   987 00003E4C F68583000000FF      <1>     test byte [rbp + forBlk.bCmdWC], -1 ;If entry has WC, keep using
   988 00003E53 0F8598000000        <1>     jne .ctnFor
   989                              <1> ;Here we go for a new entry! Check if we are at the start of the list.
   990 00003E59 48F78585000000FFFF- <1>     test qword [rbp + forBlk.pLstCurr], -1    ;If null, just starting
   990 00003E62 FFFF                <1>
   991 00003E64 7506                <1>     jnz .getNextListElement
   992                              <1> ;Here if we are starting a new for command.
   993 00003E66 488D7501            <1>     lea rsi, qword [rbp + forBlk.sListBlk]  ;First arg is here
   994 00003E6A EB2F                <1>     jmp short .useString
   995                              <1> .getNextListElement:
   996                              <1> ;Else get the ptr and advance it!
   997 00003E6C C6858300000000      <1>     mov byte [rbp + forBlk.bCmdWC], 0   ;Turn off wildcard if on
   998 00003E73 488BB585000000      <1>     mov rsi, qword [rbp + forBlk.pLstCurr]  ;Get last processed arg ptr
   999 00003E7A 4889F7              <1>     mov rdi, rsi    ;Need for strlen
  1000 00003E7D E8BE050000          <1>     call strlen
  1001 00003E82 4801CE              <1>     add rsi, rcx    ;Goto next arg!
  1002 00003E85 0FB64D00            <1>     movzx ecx, byte [rbp + forBlk.bListc]
  1003 00003E89 FE8584000000        <1>     inc byte [rbp + forBlk.bArgNum] ;We've gone to the next arg
  1004 00003E8F 388D84000000        <1>     cmp byte [rbp + forBlk.bArgNum], cl
  1005 00003E95 0F84CD000000        <1>     je forEnd  ;Once equal, we have processed all args. Game over!
  1006                              <1> .useString:
  1007                              <1> ;Now update the pointer in the block!
  1008 00003E9B 4889B585000000      <1>     mov qword [rbp + forBlk.pLstCurr], rsi  ;Now working on this arg.
  1009                              <1> ;Now scan string for wildcards
  1010 00003EA2 56                  <1>     push rsi
  1011                              <1> .wcCheck:
  1012 00003EA3 AC                  <1>     lodsb
  1013 00003EA4 84C0                <1>     test al, al 
  1014 00003EA6 740F                <1>     jz .wcCheckEnd
  1015 00003EA8 3C2A                <1>     cmp al, "*"
  1016 00003EAA 7404                <1>     je .wcFnd
  1017 00003EAC 3C3F                <1>     cmp al, "?"
  1018 00003EAE 75F3                <1>     jne .wcCheck
  1019                              <1> .wcFnd:
  1020 00003EB0 C68583000000FF      <1>     mov byte [rbp + forBlk.bCmdWC], -1  ;We have wildcards!
  1021                              <1> .wcCheckEnd:
  1022                              <1> ;Here we copy the argument to the buffer (for possible expansion)
  1023 00003EB7 5E                  <1>     pop rsi ;Pop back the head of the string to copy over
  1024 00003EB8 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1025 00003EBF E872050000          <1>     call strcpy2    ;Copy w/o moving the pointers
  1026                              <1> ;rsi now can be trashed!
  1027 00003EC4 B910000000          <1>     mov ecx, dirDirectory
  1028 00003EC9 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1029                              <1> .searchAgain:   ;Need rdi -> Path for below
  1030 00003ECE 4889FA              <1>     mov rdx, rdi    ;Move the pointer to rdx for search. 
  1031 00003ED1 CD21                <1>     int 21h 
  1032 00003ED3 7297                <1>     jc .getNextListElement  ;Get next list element.
  1033 00003ED5 80BD83000000FF      <1>     cmp byte [rbp + forBlk.bCmdWC], -1  ;If no WC, use sNameBuf as is!
  1034 00003EDC 7521                <1>     jne .copyCommand
  1035                              <1> ;Else, we must replace the wildcards. Cannot be in path as find first
  1036                              <1> ; doesn't resolve wildcards in path componants, only filename.
  1037 00003EDE E839060000          <1>     call findLastPathComponant  ;Point rdi to the last path componant
  1038                              <1> ;We don't need rsi pointing to the string anymore.
  1039 00003EE3 488DB578010000      <1>     lea rsi, qword [rbp + forBlk.sFFBuffer + ffBlock.asciizName]
  1040 00003EEA E847050000          <1>     call strcpy2    ;Copy w/o moving pointers
  1041 00003EEF EB0E                <1>     jmp short .copyCommand
  1042                              <1> .ctnFor:
  1043                              <1> ;If we searched a filespec with a wildcard, we come here for the next
  1044                              <1> ; in the series. forBlk.sNameBuf is not corrupted while executing a command
  1045 00003EF1 B8004F0000          <1>     mov eax, 4F00h  ;Find Next file for the file found in FFBuffer
  1046 00003EF6 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]  ;Need for getting last pathcomp
  1047 00003EFD EBCF                <1>     jmp short .searchAgain  ;We have a WC, get next file!
  1048                              <1> .copyCommand:
  1049                              <1> ;We substitute the string in forBlk.sNameBuf into the command line when we
  1050                              <1> ; hit a matching %<var>
  1051 00003EFF 488BB58D000000      <1>     mov rsi, qword [rbp + forBlk.pCmd]  ;Copy the command line
  1052 00003F06 488D3D(C4010000)    <1>     lea rdi, qword [inBuffer + 2]   ;We will be writing to this buffer
  1053 00003F0D 31C9                <1>     xor ecx, ecx    ;Keep track of chars we copy over
  1054                              <1> .ccLp:
  1055 00003F0F AC                  <1>     lodsb
  1056 00003F10 3C25                <1>     cmp al, "%"     
  1057 00003F12 7411                <1>     je .ccMeta      ;Go if metachar found!
  1058                              <1> .ccLp1:
  1059 00003F14 3C0D                <1>     cmp al, CR
  1060 00003F16 7444                <1>     jz .ccLpEnd     ;Exit if CR terminator found!
  1061 00003F18 81F980000000        <1>     cmp ecx, inLen  ;If we are at space for CR w/o it then string too long.
  1062 00003F1E 743C                <1>     je .ccLpEnd     ;Truncate here
  1063 00003F20 FFC1                <1>     inc ecx         ;Else, add one more char
  1064 00003F22 AA                  <1>     stosb           ;And shove it!
  1065 00003F23 EBEA                <1>     jmp short .ccLp
  1066                              <1> .ccMeta:
  1067 00003F25 AC                  <1>     lodsb           ;Get the next char
  1068 00003F26 3A8585010000        <1>     cmp al, byte [rbp + forBlk.bLpVar]  ;Compare if this is a var
  1069 00003F2C 75E6                <1>     jne .ccLp1  ;If not a var, strip the % and store the char directly
  1070                              <1> ;Else, here we expand!
  1071 00003F2E 56                  <1>     push rsi
  1072 00003F2F 57                  <1>     push rdi
  1073 00003F30 89CA                <1>     mov edx, ecx    ;Save current char count in edx
  1074 00003F32 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1075 00003F39 E802050000          <1>     call strlen     ;Get replacement char count to ecx
  1076 00003F3E FFC9                <1>     dec ecx         ;Drop the terminating null from the count
  1077 00003F40 01CA                <1>     add edx, ecx    ;Get their sum
  1078 00003F42 81FA80000000        <1>     cmp edx, inLen  ;Position 128 is saved for CR. sum must be less
  1079 00003F48 7207                <1>     jb .ccOk
  1080 00003F4A 5F                  <1>     pop rdi
  1081 00003F4B 5E                  <1>     pop rsi
  1082 00003F4C E9FBFEFFFF          <1>     jmp .longString     ;Get the next argument!
  1083                              <1> .ccOk:
  1084 00003F51 4889FE              <1>     mov rsi, rdi    ;Source from the name buffer
  1085 00003F54 5F                  <1>     pop rdi         ;Now get the original position to write the string in
  1086 00003F55 F3A4                <1>     rep movsb       ;Copy over the string
  1087 00003F57 5E                  <1>     pop rsi         ;And keep sourcing cha
  1088 00003F58 89D1                <1>     mov ecx, edx    ;Get the current count of chars back into ecx
  1089 00003F5A EBB3                <1>     jmp short .ccLp ;And get the next char
  1090                              <1> .ccLpEnd:
  1091 00003F5C AA                  <1>     stosb       ;Store the terminating CR
  1092 00003F5D 880D(C3010000)      <1>     mov byte [inBuffer + 1], cl ;Store var count here
  1093 00003F63 E908CBFFFF          <1>     jmp commandMain.goSingle    ;And do it! :)
  1094                              <1> forEnd:
  1095 00003F68 488DB595000000      <1>     lea rsi, qword [rbp + forBlk.sCmdLine]
  1096 00003F6F 488D3D(C2010000)    <1>     lea rdi, inBuffer
  1097 00003F76 B982000000          <1>     mov ecx, cmdBufferL
  1098 00003F7B F3A4                <1>     rep movsb   ;Zoom zoom copy the cmdline back home :)
  1099 00003F7D E839000000          <1>     call forFree
  1100 00003F82 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
  1101                              <1> ;Since we flushed buffers and reset cmdprocessor state before entering
  1102                              <1> ; we can jump directly to get input. There cannot be any redirections as
  1103                              <1> ; redirections are interpreted as part of the command that was looped on.
  1104 00003F89 E9A2CAFFFF          <1>     jmp commandMain.inputGetAgain
  1105                              <1> 
  1106                              <1> forPrintCmd:
  1107 00003F8E 9C                  <1>     pushfq
  1108 00003F8F F605(F5000000)FF    <1>     test byte [forFlg], -1
  1109 00003F96 7421                <1>     jz .exit    ;If not in a for, return
  1110 00003F98 E8FB010000          <1>     call printPrompt    ;Now output prompt
  1111 00003F9D 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]   ;Get pre-pull cmdline!
  1112 00003FA4 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
  1113 00003FA8 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1114 00003FAD B800400000          <1>     mov eax, 4000h  ;Write woo!
  1115 00003FB2 CD21                <1>     int 21h
  1116 00003FB4 E851020000          <1>     call printCRLFecho  ;Only print if ECHO ON. Note we have accepted input!
  1117                              <1> .exit:
  1118 00003FB9 9D                  <1>     popfq
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00003FBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> 
  1121                              <1> forFree:
  1122                              <1> ;Reset FOR state. Frees the for block and clears the vars.
  1123 00003FBB 50                  <1>     push rax
  1124 00003FBC 4150                <1>     push r8
  1125 00003FBE 4C8B05(F6000000)    <1>     mov r8, qword [pForBlk]
  1126 00003FC5 4D85C0              <1>     test r8, r8
  1127 00003FC8 7407                <1>     jz .exit
  1128 00003FCA B800490000          <1>     mov eax, 4900h  ;Free block!
  1129 00003FCF CD21                <1>     int 21h
  1130                              <1> .exit:
  1131 00003FD1 31C0                <1>     xor eax, eax
  1132 00003FD3 488905(F6000000)    <1>     mov qword [pForBlk], rax
  1133 00003FDA 8805(F5000000)      <1>     mov byte [forFlg], al
  1134 00003FE0 4158                <1>     pop r8
  1135 00003FE2 58                  <1>     pop rax
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00003FE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    24                                  %include "./src/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003FE4 53                  <1>     push rbx
    11 00003FE5 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003FE7 803D(FE000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003FEE 7244                <1>     jb .usDate
    14 00003FF0 0F877C000000        <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003FF6 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003FFB E8B0000000          <1>     call .printFirst
    18 00004000 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00004006 B402                <1>     mov ah, 02h
    20 00004008 CD21                <1>     int 21h
    21                              <1> 
    22 0000400A 89C8                <1>     mov eax, ecx
    23 0000400C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00004011 C1E805              <1>     shr eax, 5
    25 00004014 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00004019 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 0000401F B402                <1>     mov ah, 02h
    29 00004021 CD21                <1>     int 21h
    30                              <1> 
    31 00004023 89C8                <1>     mov eax, ecx
    32 00004025 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000402A C1E809              <1>     shr eax, 9
    34 0000402D 5B                  <1>     pop rbx ;Get the year signature back
    35 0000402E E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004033 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004034 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004039 C1E805              <1>     shr eax, 5
    41 0000403C E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004041 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004047 B402                <1>     mov ah, 02h
    45 00004049 CD21                <1>     int 21h
    46                              <1> 
    47 0000404B 89C8                <1>     mov eax, ecx
    48 0000404D 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00004052 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004057 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000405D B402                <1>     mov ah, 02h
    53 0000405F CD21                <1>     int 21h
    54                              <1> 
    55 00004061 89C8                <1>     mov eax, ecx
    56 00004063 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004068 C1E809              <1>     shr eax, 9
    58 0000406B 5B                  <1>     pop rbx ;Get the year signature back
    59 0000406C E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00004072 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00004077 C1E809              <1>     shr eax, 9
    65 0000407A 5B                  <1>     pop rbx ;Get the year signature back
    66 0000407B E85C000000          <1>     call .printYear
    67                              <1> 
    68 00004080 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00004086 B402                <1>     mov ah, 02h
    70 00004088 CD21                <1>     int 21h
    71                              <1> 
    72 0000408A 89C8                <1>     mov eax, ecx
    73 0000408C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00004091 C1E805              <1>     shr eax, 5
    75 00004094 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00004099 8A15(09010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 0000409F B402                <1>     mov ah, 02h
    79 000040A1 CD21                <1>     int 21h
    80                              <1> 
    81 000040A3 89C8                <1>     mov eax, ecx
    82 000040A5 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000040AA E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000040AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000040B0 51                  <1>     push rcx
    89 000040B1 E835060000          <1>     call getDecimalWord
    90 000040B6 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000040B8 7504                <1>     jnz .skipSpace
    92 000040BA 88CD                <1>     mov ch, cl
    93 000040BC B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000040BE 88CA                <1>     mov dl, cl
    96 000040C0 B402                <1>     mov ah, 02h
    97 000040C2 CD21                <1>     int 21h
    98 000040C4 88EA                <1>     mov dl, ch
    99 000040C6 B402                <1>     mov ah, 02h
   100 000040C8 CD21                <1>     int 21h
   101 000040CA 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000040CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000040CC 51                  <1>     push rcx
   105 000040CD E819060000          <1>     call getDecimalWord
   106 000040D2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000040D4 75E8                <1>     jnz .skipSpace
   108 000040D6 88CD                <1>     mov ch, cl
   109 000040D8 B130                <1>     mov cl, "0"
   110 000040DA EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000040DC 05BC070000          <1>     add eax, 1980
   113 000040E1 51                  <1>     push rcx
   114 000040E2 53                  <1>     push rbx
   115 000040E3 E803060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000040E8 5B                  <1>     pop rbx
   117 000040E9 84DB                <1>     test bl, bl
   118 000040EB 740C                <1>     jz .twoDigitYear
   119 000040ED 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000040EF B402                <1>     mov ah, 02h
   121 000040F1 CD21                <1>     int 21h
   122 000040F3 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000040F5 B402                <1>     mov ah, 02h
   124 000040F7 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000040F9 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000040FC 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000040FE B402                <1>     mov ah, 02h
   129 00004100 CD21                <1>     int 21h
   130 00004102 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00004104 B402                <1>     mov ah, 02h
   132 00004106 CD21                <1>     int 21h
   133 00004108 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00004109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000410A 89C1                <1>     mov ecx, eax
   142 0000410C 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00004111 C1E80B              <1>     shr eax, 11
   144 00004114 803D(0F010000)01    <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000411B 750B                <1>     jne .ampm
   146 0000411D E85A000000          <1>     call .printHours
   147 00004122 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004128 3D0C000000          <1>     cmp eax, 12
   151 0000412D 7713                <1>     ja .pm
   152 0000412F 7416                <1>     je .pm2
   153 00004131 E846000000          <1>     call .printHours
   154 00004136 E81D000000          <1>     call .printMinutes
   155 0000413B B261                <1>     mov dl, "a"
   156 0000413D B402                <1>     mov ah, 02h
   157 0000413F CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004141 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004142 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004147 E830000000          <1>     call .printHours
   163 0000414C E807000000          <1>     call .printMinutes
   164 00004151 B270                <1>     mov dl, "p"
   165 00004153 B402                <1>     mov ah, 02h
   166 00004155 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004157 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004158 8A15(0B010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000415E B402                <1>     mov ah, 02h
   171 00004160 CD21                <1>     int 21h
   172                              <1> 
   173 00004162 89C8                <1>     mov eax, ecx
   174 00004164 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004169 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000416C 51                  <1>     push rcx
   178 0000416D E879050000          <1>     call getDecimalWord
   179 00004172 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00004174 7514                <1>     jnz .skipSpace
   181 00004176 88CD                <1>     mov ch, cl
   182 00004178 B130                <1>     mov cl, "0"
   183 0000417A EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000417C 51                  <1>     push rcx
   186 0000417D E869050000          <1>     call getDecimalWord
   187 00004182 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00004184 7504                <1>     jnz .skipSpace
   189 00004186 88CD                <1>     mov ch, cl
   190 00004188 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 0000418A 88CA                <1>     mov dl, cl
   193 0000418C B402                <1>     mov ah, 02h
   194 0000418E CD21                <1>     int 21h
   195 00004190 88EA                <1>     mov dl, ch
   196 00004192 B402                <1>     mov ah, 02h
   197 00004194 CD21                <1>     int 21h
   198 00004196 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004197 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004198 F6056EBEFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000419F 74(97)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000041A1 488D3D29C6FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000041A8 E8E0060000          <1>     call searchForEnvVar
   206 000041AD 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000041AF E8DB000000          <1>     call putCWDInPrompt
   209 000041B4 E8A7000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000041B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000041BA 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000041C1 AC                  <1>     lodsb   ;Get the char
   216 000041C2 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000041C4 74(B9)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000041C6 3C24                <1>     cmp al, "$"
   219 000041C8 7409                <1>     je .escapeChar
   220 000041CA 88C2                <1>     mov dl, al
   221 000041CC E8B9000000          <1>     call outChar    ;Prints the char in dl
   222 000041D1 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000041D3 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000041D4 E871020000          <1>     call ucChar ;Uppercase this char in al
   226 000041D9 488D1D60BFFFFF      <1>     lea rbx, pTbl
   227 000041E0 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000041E5 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000041E7 740D                <1>     je .escapeFnd
   231 000041E9 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000041F0 FFC9                <1>     dec ecx
   233 000041F2 75F1                <1>     jnz .escapeLp
   234 000041F4 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000041F6 488D0543BFFFFF      <1>     lea rax, pTbl              ;Get the table addr
   237 000041FD 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00004201 4801D8              <1>     add rax, rbx                ;Add these
   239 00004204 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004205 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004207 5E                  <1>     pop rsi
   242 00004208 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> printCRLFecho:
   245 0000420A F605FCBDFFFFFF      <1>     test byte [echoFlg], -1
   246                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004211 74(B9)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   247                              <1> printCRLF:
   248 00004213 488D154DBFFFFF      <1>     lea rdx, crlf
   249                              <1> printString:
   250 0000421A B800090000          <1>     mov eax, 0900h  ;Print string
   251 0000421F CD21                <1>     int 21h
   252                              <1>     return
    13                              <2> %%_ret:
    14 00004221 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> putVersionInPrompt:
   255 00004222 488D15ECC1FFFF      <1>     lea rdx, dosVer
   256 00004229 B409                <1>     mov ah, 09h ;Print String
   257 0000422B CD21                <1>     int 21h
   258 0000422D B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   259 0000422F CD21                <1>     int 21h
   260 00004231 50                  <1>     push rax    ;Save minor version
   261 00004232 E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   262 00004237 E8AE010000          <1>     call printPackedBCD ;Print al
   263 0000423C B22E                <1>     mov dl, "."
   264 0000423E B402                <1>     mov ah, 02h
   265 00004240 CD21                <1>     int 21h
   266 00004242 58                  <1>     pop rax
   267 00004243 88E0                <1>     mov al, ah  ;Get the minor version low
   268 00004245 E883010000          <1>     call hexToBCD
   269 0000424A E89B010000          <1>     call printPackedBCD
   270                              <1>     return
    13                              <2> %%_ret:
    14 0000424F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> putEscInPrompt:
   272 00004250 B21B                <1>     mov dl, ESC
   273 00004252 EB36                <1>     jmp short outChar
   274                              <1> 
   275                              <1> putMoneyInPrompt:
   276 00004254 B224                <1>     mov dl, "$"
   277 00004256 EB32                <1>     jmp short outChar
   278                              <1> 
   279                              <1> putEquInPrompt:
   280 00004258 B23D                <1>     mov dl, "="
   281 0000425A EB2E                <1>     jmp short outChar
   282                              <1> 
   283                              <1> putPipeInPrompt:
   284 0000425C B27C                <1>     mov dl, "|"
   285 0000425E EB2A                <1>     jmp short outChar
   286                              <1> 
   287                              <1> putGTinPrompt:
   288 00004260 B23E                <1>     mov dl, ">"
   289 00004262 EB26                <1>     jmp short outChar
   290                              <1> 
   291                              <1> putLTinPrompt:
   292 00004264 B23C                <1>     mov dl, "<"
   293 00004266 EB22                <1>     jmp short outChar
   294                              <1> 
   295                              <1> putBSPinPrompt:
   296 00004268 488D15A5C3FFFF      <1>     lea rdx, backSpace
   297 0000426F B903000000          <1>     mov ecx, 3
   298 00004274 BB01000000          <1>     mov ebx, 1
   299 00004279 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   300 0000427E CD21                <1>     int 21h
   301                              <1>     return
    13                              <2> %%_ret:
    14 00004280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> putDriveInPrompt:
   304 00004281 E89C010000          <1>     call getCurrentDrive
   305 00004286 0441                <1>     add al, "A" ;Convert to letter
   306 00004288 88C2                <1>     mov dl, al
   307                              <1> outChar:
   308 0000428A B402                <1>     mov ah, 02h ;Echo to STDOUT
   309 0000428C CD21                <1>     int 21h
   310                              <1>     return
    13                              <2> %%_ret:
    14 0000428E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> putCWDInPrompt:
   312 0000428F E88E010000          <1>     call getCurrentDrive
   313 00004294 380572BDFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   314 0000429A C6056BBDFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   315 000042A1 7443                <1>     je .badDrive 
   316 000042A3 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   317 000042A5 FEC2                <1>     inc dl
   318 000042A7 0441                <1>     add al, "A" ;Convert to letter
   319 000042A9 B43A                <1>     mov ah, ":"
   320 000042AB 488D3D(24010000)    <1>     lea rdi, currDirStr ;Update the current directory string
   321 000042B2 66AB                <1>     stosw   ;Store X:, rdi+=2
   322 000042B4 8A0550BDFFFF        <1>     mov al, byte [pathSep]
   323 000042BA AA                  <1>     stosb   ;Store pathSep, inc rdi
   324 000042BB B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   325 000042C0 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   326 000042C3 CD21                <1>     int 21h
   327 000042C5 721F                <1>     jc .badDrive
   328 000042C7 E874010000          <1>     call strlen
   329 000042CC 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   330                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   331 000042D2 B800400000          <1>     mov eax, 4000h ;Write to handle
   332 000042D7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   333 000042DC 488D15(24010000)    <1>     lea rdx, currDirStr
   334 000042E3 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 000042E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .badDrive:
   337                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   338 000042E6 488D15F0C1FFFF      <1>     lea rdx, badDrvMsg
   339 000042ED E928FFFFFF          <1>     jmp printString
   340                              <1> printFmtTime:
   341                              <1> ;Outputs the formatted time
   342 000042F2 E847000000          <1>     call getTime
   343 000042F7 0FB6C5              <1>     movzx eax, ch
   344 000042FA E87DFEFFFF          <1>     call printTime.printHours
   345 000042FF 8A15(0B010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   346 00004305 B402                <1>     mov ah, 02h
   347 00004307 CD21                <1>     int 21h
   348 00004309 0FB605(8E060000)    <1>     movzx eax, byte [td1]   ;Minutes
   349 00004310 E857FEFFFF          <1>     call printTime.printMinutesAlt
   350 00004315 8A15(0B010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   351 0000431B B402                <1>     mov ah, 02h
   352 0000431D CD21                <1>     int 21h
   353 0000431F 0FB605(91060000)    <1>     movzx eax, byte [td4]   ;Seconds
   354 00004326 E841FEFFFF          <1>     call printTime.printMinutesAlt
   355 0000432B B22E                <1>     mov dl, "."
   356 0000432D B402                <1>     mov ah, 02h
   357 0000432F CD21                <1>     int 21h
   358 00004331 0FB605(90060000)    <1>     movzx eax, byte [td3]   ;Hundreths
   359 00004338 E82FFEFFFF          <1>     call printTime.printMinutesAlt
   360                              <1>     return
    13                              <2> %%_ret:
    14 0000433D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> getTime:
   362 0000433E B42C                <1>     mov ah, 2Ch ;DOS get time
   363 00004340 CD21                <1>     int 21h
   364                              <1>     ;CH = hour (0-23)
   365                              <1> 	;CL = minutes (0-59)
   366                              <1> 	;DH = seconds (0-59)
   367                              <1> 	;DL = hundredths (0-99)
   368 00004342 880D(8E060000)      <1>     mov byte [td1], cl
   369 00004348 882D(8F060000)      <1>     mov byte [td2], ch
   370 0000434E 8815(90060000)      <1>     mov byte [td3], dl
   371 00004354 8835(91060000)      <1>     mov byte [td4], dh
   372                              <1>     return
    13                              <2> %%_ret:
    14 0000435A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> printFmtDate:
   375                              <1> ;Outputs the formatted date
   376 0000435B B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   377 00004360 CD21                <1>     int 21h
   378                              <1> 	;AL = day of the week (0=Sunday)
   379                              <1> 	;CX = year (1980-2099)
   380                              <1> 	;DH = month (1-12)
   381                              <1> 	;DL = day (1-31)
   382 00004362 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   383 00004367 66890D(8E060000)    <1>     mov word [td1], cx
   384 0000436E 8815(90060000)      <1>     mov byte [td3], dl
   385 00004374 8835(91060000)      <1>     mov byte [td4], dh
   386 0000437A 0FB6C0              <1>     movzx eax, al
   387 0000437D 89C3                <1>     mov ebx, eax
   388 0000437F D1E3                <1>     shl ebx, 1   ;Multiply by 2
   389 00004381 01D8                <1>     add eax, ebx ;Make it 3 times 
   390 00004383 488D15D5BFFFFF      <1>     lea rdx, dayName
   391 0000438A 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   392 0000438E B903000000          <1>     mov ecx, 3  ;Print three chars
   393 00004393 BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 00004398 B440                <1>     mov ah, 40h ;Write to handle
   395 0000439A CD21                <1>     int 21h
   396 0000439C B220                <1>     mov dl, " "
   397 0000439E E8E7FEFFFF          <1>     call outChar
   398                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   399                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   400                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   401 000043A3 0FB705(8E060000)    <1>     movzx eax, word [td1]   ;Get this word
   402 000043AA C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   403 000043AD 0FB61D(91060000)    <1>     movzx ebx, byte [td4]
   404 000043B4 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   405 000043B7 09D8                <1>     or eax, ebx ;Add this date to eax
   406 000043B9 0FB61D(90060000)    <1>     movzx ebx, byte [td3]
   407 000043C0 09D8                <1>     or eax, ebx
   408 000043C2 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   409 000043C7 E818FCFFFF          <1>     call printDate
   410                              <1>     return
    13                              <2> %%_ret:
    14 000043CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> 
   413                              <1> hexToBCD:
   414                              <1> ;Converts a Hex byte into two BCD digits
   415                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   416 000043CD 51                  <1>     push rcx
   417 000043CE 0FB6C0              <1>     movzx eax, al   ;Zero extend
   418 000043D1 31C9                <1>     xor ecx, ecx
   419                              <1> .htb0:
   420 000043D3 3D0A000000          <1>     cmp eax, 10
   421 000043D8 7209                <1>     jb .htb1
   422 000043DA 2D0A000000          <1>     sub eax, 10
   423 000043DF FFC1                <1>     inc ecx
   424 000043E1 EBF0                <1>     jmp short .htb0
   425                              <1> .htb1:
   426 000043E3 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   427 000043E6 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   428 000043E8 59                  <1>     pop rcx
   429 000043E9 C3                  <1>     ret
   430                              <1> 
   431                              <1> printPackedBCD:
   432                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   433                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   434                              <1> ;Preserves all registers
   435 000043EA 50                  <1>     push rax
   436 000043EB 52                  <1>     push rdx
   437 000043EC 88C4                <1>     mov ah, al
   438 000043EE 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   439 000043F0 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   440 000043F3 7508                <1>     jnz .upperNybble
   441 000043F5 B220                <1>     mov dl, " "
   442 000043F7 B402                <1>     mov ah, 02h
   443 000043F9 CD21                <1>     int 21h
   444 000043FB EB0E                <1>     jmp short .lowerNybble
   445                              <1> .upperNybble:
   446 000043FD 50                  <1>     push rax
   447 000043FE C0EC04              <1>     shr ah, 4
   448 00004401 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   449 00004404 88E2                <1>     mov dl, ah
   450 00004406 B402                <1>     mov ah, 02h ;Print DL
   451 00004408 CD21                <1>     int 21h
   452 0000440A 58                  <1>     pop rax
   453                              <1> .lowerNybble:
   454 0000440B 0430                <1>     add al, "0"
   455 0000440D 88C2                <1>     mov dl, al
   456 0000440F B402                <1>     mov ah, 02h ;Print DL
   457 00004411 CD21                <1>     int 21h
   458 00004413 5A                  <1>     pop rdx
   459 00004414 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 00004415 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> setDrive:
   463                              <1> ;Input: dl = 0 based Drive number to set to
   464                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   465                              <1> ;AX trashed.
   466 00004416 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   467 00004418 CD21                <1>     int 21h 
   468 0000441A E803000000          <1>     call getCurrentDrive
   469 0000441F 38D0                <1>     cmp al, dl  ;Is this the same drive?
   470                              <1>     return
    13                              <2> %%_ret:
    14 00004421 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> getCurrentDrive:
   472                              <1> ;Returns the 0 based current drive in al
   473 00004422 B419                <1>     mov ah, 19h
   474 00004424 CD21                <1>     int 21h
   475                              <1>     return
    13                              <2> %%_ret:
    14 00004426 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> strcpy:
   478                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   479                              <1> ;rsi -> Source
   480                              <1> ;rdi -> Destination
   481 00004427 51                  <1>     push rcx
   482 00004428 57                  <1>     push rdi
   483 00004429 4889F7              <1>     mov rdi, rsi
   484 0000442C E80F000000          <1>     call strlen ;Get the length of the string in rsi
   485 00004431 5F                  <1>     pop rdi
   486 00004432 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   487 00004434 59                  <1>     pop rcx
   488                              <1>     return
    13                              <2> %%_ret:
    14 00004435 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> strcpy2:
   491                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   492                              <1> ;rsi -> Source
   493                              <1> ;rdi -> Destination
   494 00004436 56                  <1>     push rsi
   495 00004437 57                  <1>     push rdi
   496 00004438 E8EAFFFFFF          <1>     call strcpy 
   497 0000443D 5F                  <1>     pop rdi
   498 0000443E 5E                  <1>     pop rsi
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000443F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strlen:
   502                              <1> ;Gets the length of a ASCIIZ string
   503                              <1> ;Input: rdi = Source buffer
   504                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   505 00004440 50                  <1>     push rax
   506 00004441 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   507 00004446 CD2F                <1>     int 2fh
   508 00004448 58                  <1>     pop rax
   509                              <1>     return
    13                              <2> %%_ret:
    14 00004449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> ucChar:
   512                              <1> ;Input: al = Char to uppercase
   513                              <1> ;Output: al = Adjusted char 
   514 0000444A 53                  <1>     push rbx
   515 0000444B 50                  <1>     push rax    ;Push the char twice on the stack
   516 0000444C B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   517 00004451 CD2F                <1>     int 2fh         ;Returns the processed char in al
   518 00004453 5B                  <1>     pop rbx         ;Pop the old word off the stack
   519 00004454 5B                  <1>     pop rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 00004455 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> normalisePath:
   523                              <1> ;Uppercases chars and flips pathseps
   524                              <1> ;Input: rsi -> Path to normalise
   525 00004456 50                  <1>     push rax
   526 00004457 57                  <1>     push rdi
   527 00004458 4889F7              <1>     mov rdi, rsi
   528 0000445B B811120000          <1>     mov eax, 1211h
   529 00004460 CD2F                <1>     int 2fh
   530 00004462 5F                  <1>     pop rdi
   531 00004463 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 00004464 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> skipDelimiters:
   535                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   536                              <1> ; command delimiters but a subset thereof. 
   537                              <1> ;These are the same across all codepages.
   538                              <1> ;Input: rsi must point to the start of the data string
   539                              <1> ;Output: rsi points to the first non-delimiter char
   540 00004465 50                  <1>     push rax
   541                              <1> .l1:
   542 00004466 AC                  <1>     lodsb
   543 00004467 E807000000          <1>     call isALdelimiter
   544 0000446C 74F8                <1>     jz .l1
   545                              <1> .exit:
   546 0000446E 58                  <1>     pop rax
   547 0000446F 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   548                              <1>     return
    13                              <2> %%_ret:
    14 00004472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> isALdelimiter:
   551                              <1> ;Returns: ZF=NZ if al is not a command separator 
   552                              <1> ;         ZF=ZE if al is a command separator
   553 00004473 3C20                <1>     cmp al, " "
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004475 74(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 00004477 3C3B                <1>     cmp al, ";"
   556                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004479 74(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 0000447B 3C3D                <1>     cmp al, "="
   558                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000447D 74(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559 0000447F 3C2C                <1>     cmp al, ","
   560                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004481 74(72)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 00004483 3C09                <1>     cmp al, TAB
   562                              <1>     return
    13                              <2> %%_ret:
    14 00004485 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> clearCommandState:
   565                              <1> ;Clears the command state
   566 00004486 488D3DBEBBFFFF      <1>     lea rdi, cmdStatePtr
   567 0000448D B907000000          <1>     mov ecx, cmdStateL
   568 00004492 31C0                <1>     xor eax, eax
   569 00004494 F3AA                <1>     rep stosb
   570                              <1>     return
    13                              <2> %%_ret:
    14 00004496 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> clearCommandLineState:
   573                              <1> ;Clears the command line state after a 0Dh encountered
   574 00004497 488D3DA2BBFFFF      <1>     lea rdi, cmdLineStatePtr
   575 0000449E B912000000          <1>     mov ecx, cmdLineStateL
   576 000044A3 31C0                <1>     xor eax, eax
   577 000044A5 F3AA                <1>     rep stosb
   578 000044A7 C70590BBFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   578 000044B0 FF                  <1>
   579 000044B1 C7058CBBFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   579 000044BA FF                  <1>
   580                              <1> ;Close all handles from 5->MAX
   581 000044BB 0FB70D46BBFFFF      <1>     movzx ecx, word [numHdls]
   582 000044C2 BB05000000          <1>     mov ebx, 5
   583                              <1> .lp:
   584 000044C7 B43E                <1>     mov ah, 3Eh ;File close
   585 000044C9 CD21                <1>     int 21h
   586 000044CB FFC3                <1>     inc ebx ;Goto next file
   587 000044CD 39CB                <1>     cmp ebx, ecx
   588 000044CF 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   589                              <1>     return
    13                              <2> %%_ret:
    14 000044D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> asciiFilenameToFCB:
   592                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   593                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   594                              <1> ;Also doesn't check if chars are valid
   595                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   596                              <1> ;Name is space padded.
   597                              <1> ;Input: rsi = ASCII string buffer
   598                              <1> ;       rdi = FCB name buffer
   599                              <1> ;Output: al = Char that terminated the source string 
   600 000044D2 53                  <1>     push rbx    
   601 000044D3 57                  <1>     push rdi
   602 000044D4 B90B000000          <1>     mov ecx, 11
   603 000044D9 B020                <1>     mov al, " "
   604 000044DB F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   605 000044DD 5F                  <1>     pop rdi
   606 000044DE 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   607                              <1>     ;Preprocess for Dir Searches
   608 000044E1 803E2E              <1>     cmp byte [rsi], "."
   609 000044E4 7509                <1>     jne .processName
   610 000044E6 A4                  <1>     movsb   ;Store the first dot
   611 000044E7 803E2E              <1>     cmp byte [rsi], "."
   612 000044EA 752C                <1>     jne .exitBadChar
   613 000044EC A4                  <1>     movsb
   614 000044ED EB29                <1>     jmp short .exitBadChar
   615                              <1> .processName:
   616 000044EF AC                  <1>     lodsb   ;Get the char in al
   617 000044F0 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   618 000044F2 7426                <1>     jz .exit
   619 000044F4 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   620 000044F6 7407                <1>     je .extSpace
   621 000044F8 3C2E                <1>     cmp al, "."
   622 000044FA 740C                <1>     je .ext
   623 000044FC AA                  <1>     stosb   ;Store the char
   624 000044FD EBF0                <1>     jmp short .processName
   625                              <1> .extSpace:
   626                              <1> ;Now we scan for a period in the name
   627 000044FF AC                  <1>     lodsb   ;Get a char and increase rsi
   628 00004500 84C0                <1>     test al, al
   629 00004502 7416                <1>     jz .exit
   630 00004504 3C2E                <1>     cmp al, "."     ;If al is not a period...
   631 00004506 75F7                <1>     jne .extSpace   ; keep searching
   632                              <1> .ext:
   633 00004508 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   634                              <1> .processExt:
   635 0000450C AC                  <1>     lodsb
   636 0000450D 84C0                <1>     test al, al
   637 0000450F 7409                <1>     jz .exit
   638 00004511 3C20                <1>     cmp al, " "
   639 00004513 7405                <1>     je .exit
   640 00004515 AA                  <1>     stosb
   641 00004516 EBF4                <1>     jmp short .processExt
   642                              <1> .exitBadChar:
   643 00004518 30C0                <1>     xor al, al  ;Return a null terminator
   644                              <1> .exit:
   645 0000451A 5B                  <1>     pop rbx
   646                              <1>     return
    13                              <2> %%_ret:
    14 0000451B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> findLastPathComponant:
   649                              <1> ;Finds the last path componant of an ASCIIZ path string
   650                              <1> ;Input: rdi -> Head of the path to find last componant on
   651                              <1> ;Output: rdi -> Start of the last componant
   652 0000451C 50                  <1>     push rax
   653 0000451D 51                  <1>     push rcx
   654 0000451E 31C9                <1>     xor ecx, ecx
   655 00004520 FFC9                <1>     dec ecx
   656 00004522 31C0                <1>     xor eax, eax
   657 00004524 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   658 00004526 F7D1                <1>     not ecx     ;This gets the count of chars  
   659 00004528 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   660 0000452B 8A05D9BAFFFF        <1>     mov al, byte [pathSep]
   661 00004531 FD                  <1>     std
   662 00004532 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   663 00004534 FC                  <1>     cld
   664 00004535 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   665 00004537 48FFC7              <1>     inc rdi     ;Point at pathsep
   666                              <1> .exit:
   667 0000453A 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   668 0000453D 59                  <1>     pop rcx
   669 0000453E 58                  <1>     pop rax
   670                              <1>     return
    13                              <2> %%_ret:
    14 0000453F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> FCBToAsciiz:
   673                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   674                              <1> ;Name is space padded too
   675                              <1> ;Input: rsi = FCB name buffer
   676                              <1> ;       rdi = ASCIIZ string buffer
   677 00004540 B908000000          <1>     mov ecx, 8
   678 00004545 F3A4                <1>     rep movsb   ;Move the name over
   679                              <1> .scanNameSpace:
   680 00004547 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   681 0000454B 750D                <1>     jne .ext
   682 0000454D 48FFCF              <1>     dec rdi
   683 00004550 FFC1                <1>     inc ecx
   684 00004552 81F908000000        <1>     cmp ecx, 8
   685 00004558 72ED                <1>     jb .scanNameSpace
   686                              <1> .ext:
   687 0000455A 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   688 0000455F 7506                <1>     jne .validExt
   689 00004561 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   690 00004565 7415                <1>     je .exit
   691                              <1> .validExt:
   692 00004567 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   693 00004569 AA                  <1>     stosb
   694 0000456A B903000000          <1>     mov ecx, 3
   695 0000456F F3A4                <1>     rep movsb   ;Move the three extension chars over
   696                              <1> .scanExtSpace:
   697 00004571 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   698 00004575 7505                <1>     jne .exit
   699 00004577 48FFCF              <1>     dec rdi
   700 0000457A EBF5                <1>     jmp short .scanExtSpace
   701                              <1> .exit:
   702 0000457C 31C0                <1>     xor eax, eax
   703 0000457E AA                  <1>     stosb   ;Store a null at the end
   704                              <1>     return
    13                              <2> %%_ret:
    14 0000457F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> 
   706                              <1> cpDelimOrCtrlStringToBufz:
   707                              <1> ;Copy a delimited or control char terminated string to a buffer
   708                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   709                              <1> ;       rdi -> Buffer to store null terminated string in
   710                              <1> ;Output: rsi -> First char past string end
   711                              <1> ;       rdi -> One char past null terminator on string buffer
   712 00004580 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   713                              <1> .lp:
   714 00004583 AC                  <1>     lodsb
   715 00004584 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   716 00004586 760A                <1>     jbe .exit
   717 00004588 E8E6FEFFFF          <1>     call isALdelimiter
   718 0000458D 7403                <1>     je .exit
   719 0000458F AA                  <1>     stosb
   720 00004590 EBF1                <1>     jmp short .lp
   721                              <1> .exit:
   722 00004592 31C0                <1>     xor eax, eax
   723 00004594 AA                  <1>     stosb   ;Store a null terminator
   724                              <1>     return
    13                              <2> %%_ret:
    14 00004595 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> 
   727                              <1> cpDelimPathToBufz:
   728                              <1> ;Copy a delimited path into buffer and null terminate.
   729                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   730                              <1> ;       rdi -> Buffer to store null terminated path in
   731                              <1> ;Output: rsi -> First char past pathname delimiter
   732                              <1> ;       rdi -> One char past null terminator on pathname buffer
   733 00004596 53                  <1>     push rbx
   734 00004597 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   735 0000459A C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   736                              <1> .lp:
   737 0000459D AC                  <1>     lodsb   ;Get the char
   738 0000459E 3C0D                <1>     cmp al, CR
   739 000045A0 7412                <1>     je .gotRedirPath
   740 000045A2 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   741 000045A7 740B                <1>     jz .gotRedirPath 
   742 000045A9 3A055CBAFFFF        <1>     cmp al, byte [switchChar]
   743 000045AF 7403                <1>     je .gotRedirPath
   744 000045B1 AA                  <1>     stosb   ;Store this char and loop next char
   745 000045B2 EBE9                <1>     jmp short .lp
   746                              <1> .gotRedirPath:
   747 000045B4 50                  <1>     push rax    ;Save the char on stack
   748 000045B5 30C0                <1>     xor al, al  ;Get null terminator char
   749 000045B7 4829FB              <1>     sub rbx, rdi
   750 000045BA 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   751 000045C1 7412                <1>     je .notColon
   752 000045C3 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   753 000045CA 7409                <1>     je .notColon
   754 000045CC 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   755 000045D0 7503                <1>     jne .notColon
   756 000045D2 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   757                              <1> .notColon:
   758 000045D5 AA                  <1>     stosb   ;Store the null terminator for the redir path
   759 000045D6 58                  <1>     pop rax ;Get back the char in al
   760 000045D7 5B                  <1>     pop rbx
   761                              <1>     return
    13                              <2> %%_ret:
    14 000045D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> 
   763                              <1> buildCommandPath:
   764                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   765 000045D9 0FB6056CBAFFFF      <1>     movzx eax, byte [arg1Off]
   766 000045E0 4C8B0519BAFFFF      <1>     mov r8, [pPSP]
   767 000045E7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   768 000045EE 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   769                              <1> copyArgumentToSearchSpec:
   770                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   771                              <1> ; and null terminates
   772 000045F1 488D3D(F1040000)    <1>     lea rdi, searchSpec
   773 000045F8 E899FFFFFF          <1>     call cpDelimPathToBufz
   774                              <1>     return
    13                              <2> %%_ret:
    14 000045FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> scanForWildcards:
   777                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   778                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   779 000045FE 50                  <1>     push rax
   780 000045FF 56                  <1>     push rsi
   781                              <1> .lp:
   782 00004600 AC                  <1>     lodsb
   783 00004601 3C3F                <1>     cmp al, "?"
   784 00004603 740A                <1>     je .exit
   785 00004605 3C2A                <1>     cmp al, "*"
   786 00004607 7406                <1>     je .exit
   787 00004609 84C0                <1>     test al, al
   788 0000460B 75F3                <1>     jnz .lp
   789 0000460D FEC0                <1>     inc al  ;This will clear the ZF
   790                              <1> .exit:
   791 0000460F 5E                  <1>     pop rsi
   792 00004610 58                  <1>     pop rax
   793                              <1>     return
    13                              <2> %%_ret:
    14 00004611 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> printDecimalValLB:
   796                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   797                              <1> ; blanks and inserts commas where appropriate.
   798                              <1> ;Input: rax = Value to print
   799                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   800 00004612 4889E5              <1>     mov rbp, rsp
   801 00004615 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   802 00004618 4889EF              <1>     mov rdi, rbp
   803 0000461B 4829CF              <1>     sub rdi, rcx
   804 0000461E 50                  <1>     push rax
   805 0000461F 51                  <1>     push rcx
   806 00004620 57                  <1>     push rdi
   807 00004621 31C0                <1>     xor eax, eax
   808 00004623 F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   809 00004625 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   810 00004626 59                  <1>     pop rcx
   811 00004627 58                  <1>     pop rax
   812 00004628 51                  <1>     push rcx    ;Save this value to keep the buffer length
   813 00004629 E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   814 0000462E 59                  <1>     pop rcx     ;Now print the buffer
   815 0000462F 4889EF              <1>     mov rdi, rbp
   816 00004632 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   817 00004635 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   818                              <1> .skipLp:
   819 00004637 8A1F                <1>     mov bl, byte [rdi]
   820 00004639 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   821 0000463B 7513                <1>     jne .printLp
   822 0000463D B402                <1>     mov ah, 02h
   823 0000463F B220                <1>     mov dl, " "
   824 00004641 CD21                <1>     int 21h
   825 00004643 48FFCF              <1>     dec rdi
   826 00004646 FFC9                <1>     dec ecx
   827 00004648 81F901000000        <1>     cmp ecx, 1
   828 0000464E 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   829                              <1> .printLp:
   830 00004650 8A17                <1>     mov dl, byte [rdi]
   831 00004652 B402                <1>     mov ah, 02h
   832 00004654 CD21                <1>     int 21h
   833 00004656 48FFCF              <1>     dec rdi
   834 00004659 FFC9                <1>     dec ecx
   835 0000465B 75F3                <1>     jnz .printLp
   836                              <1> .exit:
   837 0000465D 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   838                              <1>     return
    13                              <2> %%_ret:
    14 00004660 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> .errPrint:
   840                              <1> ;Print a default ? symbol if an overflow occurs.
   841 00004661 B23F                <1>     mov dl, "?"
   842 00004663 B800020000          <1>     mov eax, 0200h
   843 00004668 CD21                <1>     int 21h
   844 0000466A EBF1                <1>     jmp short .exit
   845                              <1> 
   846                              <1> decimalise:
   847                              <1> ;Input: rax = value to decimalise
   848                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   849                              <1> ;       ecx = buffer length
   850                              <1> ;Output: Buffer @ rdi filled in! 
   851                              <1> ;       ecx = Number of chars in buffer.
   852                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   853                              <1> ;   we return with CF=CY. Else, CF=NC.
   854 0000466C 57                  <1>     push rdi
   855 0000466D 89CE                <1>     mov esi, ecx    
   856 0000466F 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   857 00004671 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   858                              <1> .lp:
   859 00004676 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   860 00004679 7514                <1>     jne .skipSep
   861 0000467B 4038CE              <1>     cmp sil, cl
   862 0000467E 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   863 00004680 8A15(05010000)      <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   864 00004686 8817                <1>     mov byte [rdi], dl
   865 00004688 48FFC7              <1>     inc rdi 
   866 0000468B FEC1                <1>     inc cl          ;Inc number of chars
   867 0000468D 30ED                <1>     xor ch, ch      ;Reset comma counter
   868                              <1> .skipSep:
   869 0000468F 4038CE              <1>     cmp sil, cl
   870 00004692 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   871 00004694 31D2                <1>     xor edx, edx
   872 00004696 48F7F3              <1>     div rbx         ;Divide rax by 10
   873 00004699 80C230              <1>     add dl, "0"     
   874 0000469C 8817                <1>     mov byte [rdi], dl
   875 0000469E 48FFC7              <1>     inc rdi
   876 000046A1 FEC1                <1>     inc cl          ;Inc number of chars
   877 000046A3 FEC5                <1>     inc ch          ;Inc to keep track of commas
   878 000046A5 4885C0              <1>     test rax, rax
   879 000046A8 75CC                <1>     jnz .lp
   880                              <1> ;The test cleared CF if we are here
   881 000046AA 0FB6C9              <1>     movzx ecx, cl
   882                              <1> .exit:
   883 000046AD 5F                  <1>     pop rdi
   884                              <1>     return
    13                              <2> %%_ret:
    14 000046AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .exitErr:
   886 000046AF F9                  <1>     stc
   887 000046B0 EBFB                <1>     jmp short .exit
   888                              <1> printDecimalWord:
   889                              <1> ;Takes a word in ax and print it's decimal representation.
   890                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   891                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   892                              <1> ;Input: eax = Zero extended word to print
   893 000046B2 31C9                <1>     xor ecx, ecx
   894 000046B4 85C0                <1>     test eax, eax
   895 000046B6 750C                <1>     jnz .notZero
   896 000046B8 B930000000          <1>     mov ecx, "0"
   897 000046BD BD01000000          <1>     mov ebp, 1  ;Print one digit
   898 000046C2 EB19                <1>     jmp short .goPrint
   899                              <1> .notZero:
   900 000046C4 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   901 000046C6 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   902                              <1> .mainLp:
   903 000046CB FFC5                <1>     inc ebp
   904 000046CD C1E108              <1>     shl ecx, 8    ;Space for next nybble
   905 000046D0 31D2                <1>     xor edx, edx
   906 000046D2 F7F6                <1>     div esi
   907 000046D4 80C230              <1>     add dl, '0'
   908 000046D7 88D1                <1>     mov cl, dl    ;Save remainder byte
   909 000046D9 85C0                <1>     test eax, eax   ;We zero yet?
   910 000046DB 75EE                <1>     jnz .mainLp
   911                              <1> .goPrint:
   912 000046DD 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   913 000046DF C1E908              <1>     shr ecx, 8    ;Get next digit down
   914 000046E2 B402                <1>     mov ah, 02h
   915 000046E4 CD21                <1>     int 21h
   916 000046E6 FFCD                <1>     dec ebp
   917 000046E8 75F3                <1>     jnz .goPrint
   918                              <1>     return
    13                              <2> %%_ret:
    14 000046EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   919                              <1> 
   920                              <1> getDecimalWord:
   921                              <1> ;Works on MAX A dword in eax
   922                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   923 000046EB 31C9                <1>     xor ecx, ecx
   924 000046ED 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   925 000046EF BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   926                              <1> .dpfb0:
   927 000046F4 FFC5                <1>     inc ebp
   928 000046F6 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   929 000046FA 31D2                <1>     xor edx, edx
   930 000046FC 48F7F3              <1>     div rbx
   931 000046FF 80C230              <1>     add dl, '0'
   932 00004702 80FA39              <1>     cmp dl, '9'
   933 00004705 7603                <1>     jbe .dpfb1
   934 00004707 80C207              <1>     add dl, 'A'-'0'-10
   935                              <1> .dpfb1:
   936 0000470A 88D1                <1>     mov cl, dl    ;Save remainder byte
   937 0000470C 4885C0              <1>     test rax, rax
   938 0000470F 75E3                <1>     jnz .dpfb0
   939                              <1>     return
    13                              <2> %%_ret:
    14 00004711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> getByte:
   941                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   942 00004712 E807000000          <1>     call getNum
   943 00004717 3D00010000          <1>     cmp eax, 100h
   944 0000471C F5                  <1>     cmc
   945                              <1>     return
    13                              <2> %%_ret:
    14 0000471D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> getNum:
   947                              <1> ;Gets a number from a command line.
   948                              <1> ;Input: rsi -> String to get number from
   949                              <1> ;Output: rsi -> Char which terminated the accumulation
   950                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   951                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   952 0000471E 51                  <1>     push rcx
   953 0000471F 53                  <1>     push rbx
   954 00004720 31DB                <1>     xor ebx, ebx
   955 00004722 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   956 00004724 31C0                <1>     xor eax, eax    
   957                              <1> .lp:
   958 00004726 AC                  <1>     lodsb
   959 00004727 3C30                <1>     cmp al, "0"
   960 00004729 721B                <1>     jb .exit
   961 0000472B 3C39                <1>     cmp al, "9"
   962 0000472D 7717                <1>     ja .exit
   963 0000472F 2C30                <1>     sub al, "0"                     ;Convert to binary 
   964 00004731 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   965 00004735 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   966 00004737 01C1                <1>     add ecx, eax
   967 00004739 FFC3                <1>     inc ebx
   968 0000473B 81FB09000000        <1>     cmp ebx, 9
   969 00004741 75E3                <1>     jne short .lp   ;Get next digit
   970 00004743 F9                  <1>     stc             ;Yikesaroony
   971 00004744 EB01                <1>     jmp short .exitBad
   972                              <1> .exit:
   973 00004746 F8                  <1>     clc             ;Clear CF
   974                              <1> .exitBad:
   975 00004747 89C8                <1>     mov eax, ecx
   976 00004749 5B                  <1>     pop rbx
   977 0000474A 59                  <1>     pop rcx
   978 0000474B 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   979                              <1>     return
    13                              <2> %%_ret:
    14 0000474E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> freezePC:
   983 0000474F 488D15EFBFFFFF      <1>     lea rdx, memBad1
   984 00004756 B409                <1>     mov ah, 09h
   985 00004758 CD21                <1>     int 21h
   986                              <1> .altEP:
   987 0000475A 488D150DC0FFFF      <1>     lea rdx, memBad3
   988 00004761 B409                <1>     mov ah, 09h
   989 00004763 CD21                <1>     int 21h
   990                              <1> .lp:
   991 00004765 F390                <1>     pause
   992 00004767 F4                  <1>     hlt
   993 00004768 EBFB                <1>     jmp short .lp
   994                              <1> 
   995                              <1> setDTA:
   996 0000476A 50                  <1>     push rax
   997 0000476B 52                  <1>     push rdx
   998 0000476C 488D15(77010000)    <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   999 00004773 B8001A0000          <1>     mov eax, 1A00h
  1000 00004778 CD21                <1>     int 21h
  1001 0000477A 5A                  <1>     pop rdx
  1002 0000477B 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 0000477C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> 
  1005                              <1> getDTA:
  1006 0000477D 488D15(77010000)    <1>     lea rdx, cmdFFBlock
  1007                              <1>     return
    13                              <2> %%_ret:
    14 00004784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> resetNation:
  1010                              <1> ;(Re)sets the country and switchar data
  1011 00004785 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
  1012 0000478A CD21                <1>     int 21h
  1013 0000478C 3CFF                <1>     cmp al, -1
  1014 0000478E 7412                <1>     je .skipSwitch
  1015 00004790 881575B8FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
  1016 00004796 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
  1017 00004799 7507                <1>     jne .skipSwitch
  1018 0000479B C60568B8FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
  1019                              <1> .skipSwitch:
  1020 000047A2 B800380000          <1>     mov eax, 3800h  ;Get current country data
  1021 000047A7 488D15(FE000000)    <1>     lea rdx, ctryData
  1022 000047AE CD21                <1>     int 21h ;Write the data to the internal country table 
  1023                              <1>     return
    13                              <2> %%_ret:
    14 000047B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> 
  1025                              <1> resetIDTentries:
  1026                              <1> ;Resets the IDT entries if they were changed by dead child process
  1027 000047B1 488D15AD020000      <1>     lea rdx, critErrorHandler
  1028 000047B8 B824250000          <1>     mov eax, 2524h
  1029 000047BD CD21                <1>     int 21h
  1030 000047BF 488D15B3010000      <1>     lea rdx, ctrlCHandler
  1031 000047C6 B823250000          <1>     mov eax, 2523h
  1032 000047CB CD21                <1>     int 21h
  1033 000047CD 488D159DC6FFFF      <1>     lea rdx, appRet
  1034 000047D4 B822250000          <1>     mov eax, 2522h
  1035 000047D9 CD21                <1>     int 21h
  1036                              <1>     return
    13                              <2> %%_ret:
    14 000047DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1037                              <1> 
  1038                              <1> ;------------------------
  1039                              <1> ;   For/If routines
  1040                              <1> ;------------------------
  1041                              <1> makeAsciizAdv:
  1042                              <1> ;Input: rsi -> Non delimiter char string
  1043                              <1> ;Output: rsi -> Next substring past delimiters
  1044                              <1> ;       rdi -> ASCIIZ version of the string we just passed
  1045 000047DC 58                  <1>     pop rax ;Align the stack so if we hit a CR its getNextArg doesnt crash
  1046 000047DD E807000000          <1>     call makeArgAsciz      ;Get in rdi -> ASCIZ argument. rsi -> terminator
  1047 000047E2 E814000000          <1>     call getNextArg        ;rsi -> Command
  1048 000047E7 FFE0                <1>     jmp rax                 ;Go to this address now
  1049                              <1> 
  1050                              <1> makeArgAsciz:
  1051                              <1> ;Creates a null terminated string in the search spec.
  1052                              <1> ;Input: rsi -> String to copy with null terminator
  1053                              <1> ;Ouput: rsi -> Terminator
  1054                              <1> ;       rdi -> Search Spec with filled ASCIZ string
  1055 000047E9 50                  <1>     push rax    ;Preserve rax
  1056 000047EA E802FEFFFF          <1>     call copyArgumentToSearchSpec
  1057 000047EF 58                  <1>     pop rax
  1058 000047F0 488D3D(F1040000)    <1>     lea rdi, searchSpec
  1059 000047F7 48FFCE              <1>     dec rsi     ;Point back to the delimiter char
  1060                              <1>     return
    13                              <2> %%_ret:
    14 000047FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> getNextArg:
  1063                              <1> ;Moves rsi to the first next element. If a CR is encountered, it exits
  1064                              <1> ;Input: rsi -> String
  1065                              <1> ;Output: rsi -> First non delimiter char after initial position
  1066 000047FB E865FCFFFF          <1>     call skipDelimiters     ;Preserves rax
  1067 00004800 803E0D              <1>     cmp byte [rsi], CR
  1068                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004803 75(FA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1069 00004805 E8B1F7FFFF          <1>     call forFree    ;Harmless if used in IF. Registers preserved.
  1070 0000480A 58                  <1>     pop rax ;Pop the return address off the stack
  1071 0000480B E9A1D1FFFF          <1>     jmp badSyntaxError  ;And jump error out
  1072                              <1> 
  1073                              <1> strcmp:
  1074 00004810 B81E120000          <1>     mov eax, 121Eh
  1075 00004815 CD2F                <1>     int 2fh
  1076                              <1>     return
    13                              <2> %%_ret:
    14 00004817 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> 
  1079                              <1> ;-------------------------------
  1080                              <1> ; Environment utility functions
  1081                              <1> ;-------------------------------
  1082                              <1> 
  1083                              <1> cmpEnvVar:
  1084                              <1> ;Checks that we have found the environment variable we are looking for.
  1085                              <1> ;Input: rsi -> Environment var to verify the name of
  1086                              <1> ;       rdi -> Supplied var name to compare against
  1087                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1088 00004818 56                  <1>     push rsi
  1089 00004819 57                  <1>     push rdi
  1090 0000481A 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1091                              <1> .lp:
  1092 0000481D AC                  <1>     lodsb               ;Pick up from environment string
  1093 0000481E E827FCFFFF          <1>     call ucChar         ;Upper case it!
  1094 00004823 3807                <1>     cmp byte [rdi], al  
  1095 00004825 7509                <1>     jne .exit
  1096 00004827 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1097 00004829 7405                <1>     je .exit
  1098 0000482B 48FFC7              <1>     inc rdi
  1099 0000482E EBED                <1>     jmp short .lp
  1100                              <1> .exit:
  1101 00004830 5F                  <1>     pop rdi
  1102 00004831 5E                  <1>     pop rsi
  1103                              <1>     return
    13                              <2> %%_ret:
    14 00004832 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> 
  1105                              <1> checkEnvGoodAndGet:
  1106                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1107                              <1> ;Output:
  1108                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1109                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1110                              <1> ;           rsi -> Environment pointer
  1111 00004833 50                  <1>     push rax
  1112 00004834 51                  <1>     push rcx
  1113 00004835 57                  <1>     push rdi
  1114 00004836 4150                <1>     push r8
  1115 00004838 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1116 0000483C 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1117 0000483F 741A                <1>     jz .badExit
  1118 00004841 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1119 00004844 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1120                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1121 00004847 31C0                <1>     xor eax, eax
  1122                              <1> .pathNulScan:
  1123 00004849 F2AE                <1>     repne scasb
  1124 0000484B 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1125 0000484D 740C                <1>     jz .badExit
  1126 0000484F 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1127 00004851 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1128 00004853 31C0                <1>     xor eax, eax
  1129 00004855 FFC0                <1>     inc eax ;Clear the ZF
  1130 00004857 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1131                              <1> .badExit:
  1132 0000485B 4158                <1>     pop r8
  1133 0000485D 5F                  <1>     pop rdi
  1134 0000485E 59                  <1>     pop rcx
  1135 0000485F 58                  <1>     pop rax
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00004860 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> 
  1139                              <1> findEnvSpace:
  1140                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1141                              <1> ; free space in the pointer and a count of free space in the environment.
  1142                              <1> ;If count is zero, pointer is not to be used.
  1143                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1144 00004861 31C9                <1>     xor ecx, ecx
  1145 00004863 31C0                <1>     xor eax, eax    ;Clear eax too
  1146 00004865 51                  <1>     push rcx
  1147 00004866 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1148 0000486B 59                  <1>     pop rcx
  1149                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000486C 74(60)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1150 0000486E 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1151 00004872 FFC9                <1>     dec ecx ;Make into a large counter
  1152 00004874 4889F7              <1>     mov rdi, rsi    
  1153                              <1> .endsearch:
  1154 00004877 F2AE                <1>     repne scasb ;Scan
  1155 00004879 803F00              <1>     cmp byte [rdi], 0
  1156 0000487C 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1157                              <1>     ;Here we are at the end of the environment
  1158 0000487E F7D9                <1>     neg ecx
  1159 00004880 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1160 00004882 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1161 00004885 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1162 00004888 29C8                <1>     sub eax, ecx
  1163 0000488A 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1164                              <1>     return
    13                              <2> %%_ret:
    14 0000488C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> 
  1166                              <1> searchForEnvVar:
  1167                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1168                              <1> ;Input: rdi -> Var name to look for.
  1169                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1170 0000488D 57                  <1>     push rdi
  1171 0000488E 51                  <1>     push rcx
  1172 0000488F 52                  <1>     push rdx
  1173 00004890 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1174 00004894 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1175                              <1> .varLp:
  1176 00004897 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1177 0000489A E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1178 0000489F 7416                <1>     je .varFound
  1179 000048A1 31C0                <1>     xor eax, eax        ;Search for a null
  1180 000048A3 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1181 000048A6 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1182 000048AB F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1183 000048AD 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1184 000048AF 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1185 000048B1 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1186 000048B4 EBE1                <1>     jmp short .varLp    ;And scan again!
  1187                              <1> .varNotFound:
  1188 000048B6 F9                  <1>     stc
  1189                              <1> .varFound:
  1190 000048B7 59                  <1>     pop rcx
  1191 000048B8 5A                  <1>     pop rdx
  1192 000048B9 5F                  <1>     pop rdi
  1193                              <1>     return
    13                              <2> %%_ret:
    14 000048BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> 
  1195                              <1> envFree:
  1196                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1197                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1198                              <1> ; free byte of the environment!
  1199                              <1> ;Input: rsi -> Variable to free.
  1200                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1201                              <1> ;        ecx = Number of free bytes in env
  1202 000048BB 4889F7              <1>     mov rdi, rsi
  1203 000048BE 31C0                <1>     xor eax, eax
  1204                              <1> .freeLp:
  1205 000048C0 803F00              <1>     cmp byte [rdi], 0
  1206 000048C3 7403                <1>     je .exitLp
  1207 000048C5 AA                  <1>     stosb
  1208 000048C6 EBF8                <1>     jmp short .freeLp
  1209                              <1> .exitLp:
  1210                              <1> ;rdi points to the terminating null of the var we just deleted
  1211                              <1> ;rsi points to the start of the free space
  1212 000048C8 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1213 000048CB 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1214 000048D0 7504                <1>     jne .prepPullup
  1215 000048D2 31C0                <1>     xor eax, eax
  1216 000048D4 EB0E                <1>     jmp short .cleanEnv
  1217                              <1> .prepPullup:
  1218 000048D6 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1219                              <1> .pullUp:
  1220 000048D9 AC                  <1>     lodsb
  1221 000048DA AA                  <1>     stosb
  1222 000048DB 84C0                <1>     test al, al ;Did we pick up a zero
  1223 000048DD 75FA                <1>     jne .pullUp ;If not, keep copying
  1224 000048DF 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1225 000048E2 75F5                <1>     jne .pullUp
  1226                              <1> ;We are at the end of the copy!
  1227                              <1> .cleanEnv:
  1228 000048E4 AA                  <1>     stosb   ;Store the famous second null
  1229 000048E5 48FFCF              <1>     dec rdi ;without incrementing it!!
  1230 000048E8 E807000000          <1>     call getFreeSpace
  1231 000048ED 31C0                <1>     xor eax, eax
  1232 000048EF 51                  <1>     push rcx
  1233 000048F0 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1234 000048F2 59                  <1>     pop rcx
  1235                              <1>     return
    13                              <2> %%_ret:
    14 000048F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1236                              <1> 
  1237                              <1> getFreeSpace:
  1238                              <1> ;Output: ecx = Number of free bytes in the environment block
  1239 000048F4 56                  <1>     push rsi
  1240 000048F5 57                  <1>     push rdi
  1241 000048F6 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1242 000048FB 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1243 000048FF 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1244 00004902 E805000000          <1>     call getEnvSize ;Get total block size
  1245 00004907 29F9                <1>     sub ecx, edi    ;Get difference!
  1246 00004909 5F                  <1>     pop rdi
  1247 0000490A 5E                  <1>     pop rsi
  1248                              <1>     return
    13                              <2> %%_ret:
    14 0000490B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> getEnvSize:
  1251                              <1> ;Gets the number of bytes in the environment allocation
  1252                              <1> ;Output: ecx = Number of bytes in the environment!
  1253 0000490C 53                  <1>     push rbx
  1254 0000490D 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1255 00004911 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1256 00004914 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1257 00004917 5B                  <1>     pop rbx
  1258                              <1>     return
    13                              <2> %%_ret:
    14 00004918 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1259                              <1> 
  1260                              <1> getPtrToEndOfEnv:
  1261                              <1> ;Gets ptr to end of the environment
  1262                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1263 00004919 50                  <1>     push rax
  1264 0000491A 51                  <1>     push rcx
  1265 0000491B 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1266 0000491F 31C0                <1>     xor eax, eax
  1267 00004921 31C9                <1>     xor ecx, ecx
  1268 00004923 FFC9                <1>     dec ecx
  1269                              <1> .lp:
  1270 00004925 F2AE                <1>     repne scasb
  1271 00004927 3807                <1>     cmp byte [rdi], al
  1272 00004929 75FA                <1>     jne .lp
  1273 0000492B 59                  <1>     pop rcx
  1274 0000492C 58                  <1>     pop rax
  1275                              <1>     return
    13                              <2> %%_ret:
    14 0000492D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1276                              <1> 
  1277                              <1> growEnvBlock:
  1278                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1279                              <1> ; newly allocated 160 byte block of the environment.
  1280                              <1> ;Returns:   CF=NC - Environment grown ok!
  1281                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1282                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1283 0000492E 50                  <1>     push rax
  1284 0000492F 53                  <1>     push rbx
  1285 00004930 51                  <1>     push rcx
  1286 00004931 56                  <1>     push rsi
  1287 00004932 57                  <1>     push rdi
  1288 00004933 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1289 00004938 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1290 0000493D 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1291 00004941 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1292 00004944 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1293 0000494A 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1294 00004950 7321                <1>     jae .tooLarge
  1295                              <1>     ;Here ZF must be NZ.
  1296 00004952 4150                <1>     push r8
  1297 00004954 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1298 00004958 B8004A0000          <1>     mov eax, 4A00h
  1299 0000495D CD21                <1>     int 21h
  1300 0000495F 4158                <1>     pop r8
  1301 00004961 720A                <1>     jc .exit
  1302                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1303                              <1>     ; so we add 160 zeros to the count of bytes
  1304 00004963 81C1A0000000        <1>     add ecx, 0A0h
  1305 00004969 31C0                <1>     xor eax, eax
  1306 0000496B F3AA                <1>     rep stosb
  1307                              <1> .exit:
  1308 0000496D 5F                  <1>     pop rdi
  1309 0000496E 5E                  <1>     pop rsi
  1310 0000496F 59                  <1>     pop rcx
  1311 00004970 5B                  <1>     pop rbx
  1312 00004971 58                  <1>     pop rax
  1313                              <1>     return
    13                              <2> %%_ret:
    14 00004972 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1314                              <1> .tooLarge:
  1315 00004973 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1316 00004976 F9                  <1>     stc             ;Set CF
  1317 00004977 EBF4                <1>     jmp short .exit
    25                                  %include "./src/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004979 F605(1A000000)80    <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004980 7411                <1>     jz .notLoading
     4 00004982 F605(1A000000)40    <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004989 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000498B 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004991 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004993 F605(1A000000)02    <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000499A 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000499C 84E4                <1>     test ah, ah
    17 0000499E 7424                <1>     jz .inInt23 
    18 000049A0 80FC0C              <1>     cmp ah, 0Ch
    19 000049A3 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000049A5 50                  <1>     push rax
    23 000049A6 488D0512000000      <1>     lea rax, .i23Bounce
    24 000049AD 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000049B2 31C0                <1>     xor eax, eax
    26 000049B4 668CC8              <1>     mov ax, cs
    27 000049B7 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 000049BC 58                  <1>     pop rax
    29 000049BD 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 000049BF 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 000049C4 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 000049C6 800D(1A000000)02    <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 000049CD F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 000049D4 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 000049D6 50                  <1>     push rax
    43 000049D7 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 000049DC CD21                <1>     int 21h
    45 000049DE 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 000049DF F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 000049E6 7462                <1>     jz .notBat
    49 000049E8 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 000049EF 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 000049F1 E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 000049F6 488D15C7B7FFFF      <1>     lea rdx, batFail
    57 000049FD E818F8FFFF          <1>     call printString
    58 00004A02 488D1533B6FFFF      <1>     lea rdx, batYNstr
    59 00004A09 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004A0F B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004A14 CD21                <1>     int 21h
    62 00004A16 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004A18 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004A1B E82AFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004A20 3C59                <1>     cmp al, "Y"
    66 00004A22 740E                <1>     je .killBat
    67 00004A24 3C4E                <1>     cmp al, "N"
    68 00004A26 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004A28 E8E6F7FFFF          <1>     call printCRLF
    74 00004A2D E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004A32 E892CEFFFF          <1>     call batCleanup
    77 00004A37 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004A39 E88BCEFFFF          <1>     call batCleanup
    80 00004A3E 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC   
    81 00004A45 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004A4A 66813DBBB5FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004A53 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004A55 E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004A5A 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 00004A61 F9                  <1>     stc     ;Set CF to kill the task
    91 00004A62 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    26                                  %include "./src/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004A65 53                  <1>     push rbx
    25 00004A66 51                  <1>     push rcx
    26 00004A67 52                  <1>     push rdx
    27 00004A68 57                  <1>     push rdi
    28 00004A69 56                  <1>     push rsi
    29 00004A6A E80F020000          <1>     call errSwapHdls
    30 00004A6F FC                  <1>     cld         ;Make String ops go forward
    31 00004A70 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004A73 880593B5FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004A79 488D15E7B6FFFF      <1>     lea rdx, crlf
    34 00004A80 E895F7FFFF          <1>     call printString    ;Trashes ax
    35 00004A85 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004A88 53                  <1>     push rbx        ;Save the action bitfield
    38 00004A89 56                  <1>     push rsi        ;Save the driver pointer
    39 00004A8A B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004A8F CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004A91 488D3584BEFFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004A98 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004A9B 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004A9D 66A5                <1>     movsw
    51 00004A9F A4                  <1>     movsb
    52 00004AA0 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004AA3 5E                  <1>     pop rsi
    54 00004AA4 5B                  <1>     pop rbx
    55 00004AA5 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004AAB 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004AAD 81FF24000000        <1>     cmp edi, errShrFul
    60 00004AB3 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004AB5 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004ABA CD21                <1>     int 21h
    65 00004ABC 3CFF                <1>     cmp al, -1
    66 00004ABE 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004AC0 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004AC2 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004AC4 CD21                <1>     int 21h
    70 00004AC6 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004AC8 4889FA              <1>     mov rdx, rdi        
    76 00004ACB 50                  <1>     push rax            
    77 00004ACC 31C0                <1>     xor eax, eax
    78 00004ACE 89C1                <1>     mov ecx, eax
    79 00004AD0 FFC9                <1>     dec ecx
    80 00004AD2 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004AD4 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004AD8 E83DF7FFFF          <1>     call printString 
    83 00004ADD C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004AE1 58                  <1>     pop rax
    85 00004AE2 84C0                <1>     test al, al ;Is this zero?
    86 00004AE4 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004AE6 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004AEB 488D155FBEFFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004AF2 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004AF4 BA1F000000          <1>     mov edx, errGF
    98 00004AF9 81FF24000000        <1>     cmp edi, errShrFul
    99 00004AFF 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004B02 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004B07 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004B0D 0F42FA              <1>     cmovb edi, edx
   104 00004B10 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004B16 57                  <1>     push rdi    ;Save the error code for checking
   106 00004B17 488D15F8BCFFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004B1E 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004B21 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004B25 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004B28 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004B29 E8ECF6FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004B2E 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004B34 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004B36 488D1532BEFFFF      <1>     lea rdx, readMsg
   120 00004B3D 488D3D3ABEFFFF      <1>     lea rdi, writeMsg
   121 00004B44 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004B47 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004B4B E8CAF6FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004B50 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004B53 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004B59 488D1508BEFFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004B60 E8B5F6FFFF          <1>     call printString
   130 00004B65 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004B67 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004B6A B402                <1>     mov ah, 02h ;Print char in dl
   133 00004B6C CD21                <1>     int 21h
   134                              <1>     
   135 00004B6E 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004B70 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004B75 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004B7A 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004B7C B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004B7E E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004B83 E88BF6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004B88 488D15FEBDFFFF      <1>     lea rdx, abortMsg
   149 00004B8F E886F6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004B94 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004B97 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004B99 488D1505BEFFFF      <1>     lea rdx, betweenMsg
   154 00004BA0 E875F6FFFF          <1>     call printString
   155 00004BA5 488D15EEBDFFFF      <1>     lea rdx, retryMsg
   156 00004BAC E869F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004BB1 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004BB4 7418                <1>     jz .userFail
   160 00004BB6 488D15E8BDFFFF      <1>     lea rdx, betweenMsg
   161 00004BBD E858F6FFFF          <1>     call printString
   162 00004BC2 488D15CABDFFFF      <1>     lea rdx, ignoreMsg
   163 00004BC9 E84CF6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004BCE F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004BD1 7418                <1>     jz .userMsgEnd
   167 00004BD3 488D15CBBDFFFF      <1>     lea rdx, betweenMsg
   168 00004BDA E83BF6FFFF          <1>     call printString
   169 00004BDF 488D15BABDFFFF      <1>     lea rdx, failMsg
   170 00004BE6 E82FF6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004BEB 488D15B6BDFFFF      <1>     lea rdx, endMsg
   173 00004BF2 E823F6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004BF7 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004BF9 488D3DABBDFFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004C00 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004C05 CD21                <1>     int 21h ;Get char in al
   179 00004C07 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004C09 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004C0B 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004C0D AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004C0E 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004C10 FFC1                <1>     inc ecx
   186 00004C12 81F904000000        <1>     cmp ecx, 4
   187 00004C18 75F3                <1>     jne .uip1
   188 00004C1A E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004C1F E8EFF5FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004C24 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004C26 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004C28 7427                <1>     je .cehExit
   195 00004C2A 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004C2C 740F                <1>     je .viIgnore
   197 00004C2E 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004C30 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004C32 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004C35 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004C3B EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004C3D F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004C40 0F843DFFFFFF        <1>     jz .userInput
   206 00004C46 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004C48 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004C4B 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004C51 E845000000          <1>     call errRetHdls
   212 00004C56 5E                  <1>     pop rsi
   213 00004C57 5F                  <1>     pop rdi
   214 00004C58 5A                  <1>     pop rdx
   215 00004C59 59                  <1>     pop rcx
   216 00004C5A 5B                  <1>     pop rbx
   217 00004C5B 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004C5D C605A8B3FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004C64 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004C69 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004C70 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004C71 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004C73 B402                <1>     mov ah, 02h
   226 00004C75 CD21                <1>     int 21h ;Print char
   227 00004C77 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004C79 E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004C7E 50                  <1>     push rax
   236 00004C7F 53                  <1>     push rbx
   237 00004C80 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004C85 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004C88 6689057FB3FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004C8F 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004C93 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004C95 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004C98 5B                  <1>     pop rbx
   244 00004C99 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004C9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004C9B 50                  <1>     push rax
   250 00004C9C 53                  <1>     push rbx
   251 00004C9D E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004CA2 0FB70565B3FFFF      <1>     movzx eax, word [errHdls]
   253 00004CA9 66C7055CB3FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004CB2 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004CB5 5B                  <1>     pop rbx
   256 00004CB6 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004CB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004CB8 50                  <1>     push rax        ;Save rax
   263 00004CB9 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004CBE CD21                <1>     int 21h
   265 00004CC0 58                  <1>     pop rax
   266 00004CC1 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004CC7 7605                <1>     jbe .pspJftExit
   268 00004CC9 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004CCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004CCE 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004CD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  cmdLdrE:
    28                                  
    29                                  Segment bss nobits align=1 follows=cmd
    30                                  %include "./dat/cmdBss.asm"
     1                              <1> 
     2                              <1> ;Moved most strings and initialised 0 variables here to reduce disk image size
     3 00000000 ????                <1> returnCode  dw ?    ;Return Code from a child process
     4 00000002 ????????????????    <1> int2Epsp    dq ?    ;
     5 0000000A ????????????????    <1> int2Ersp    dq ?    ;Save the far Int 2E entry stack pointer!
     6 00000012 ????????????????    <1> int2Edta    dq ?    ;
     7                              <1> ;=============================================================
     8 0000001A ??                  <1> statFlg1    db ?    ;Flags 1 for the command interpreter
     9                              <1> ;=============================================================
    10                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    11                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    12                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    13                              <1> inBatch     equ 8   ;Up if processing a batch file
    14                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    15                              <1> inCritical  equ 20h ;Up if processing a command.
    16                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    17                              <1> inLdr       equ 80h ;Up if in loader
    18                              <1> ;Batch state variables.
    19 0000001B ????????????????    <1> bbPtr       dq ?                    ;Ptr to the batch block
    20 00000023 <res 4Fh>           <1> batFile     db fileSpecZL dup (?)   ;Path to bat to execute. Qual with 
    21 00000072 ??                  <1> ifFlg       db ?                    ;Flags for IF
    22                              <1> ifReset     equ 0                   ;Value to reset the flags
    23                              <1> ifNot       equ 1                   ;Set if NOT encountered
    24                              <1> ifCond      equ 2                   ;Set if condition encountered     
    25 00000073 <res 82h>           <1> batCmdline  db cmdBufferL dup (?)   ;Stores original commandline
    26                              <1> ;FOR state variables
    27 000000F5 ??                  <1> forFlg      db ?                    ;For flag. Set if in a forloop
    28 000000F6 ????????????????    <1> pForBlk     dq ?                    ;Ptr to the for block
    29                              <1> 
    30                              <1> ;Structs and strings
    31 000000FE <res 26h>           <1> ctryData    db countryStruc_size dup (?)    ;Length of the country table
    32 00000124 <res 43h>           <1> currDirStr  db fullDirPathZL dup (?)        ;Current Directory String
    33 00000167 <res 10h>           <1> cmdFcb      db 10h dup (?) ;Internal "fcb" for parsing the command name
    34 00000177 <res 2Bh>           <1> cmdFFBlock  db ffBlock_size dup (?) ;Internal Find First Block to use as default DTA
    35                              <1> 
    36 000001A2 <res 20h>           <1> launchBlock db execProg_size dup (?)
    37                              <1> 
    38                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    39                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    40                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    41                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    42                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    43                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    44                              <1> inLen   equ 128 
    45                              <1> batCpyBuffer:   ;Ptr to the buffer to drop the processed line into
    46 000001C2 <res 82h>           <1> inBuffer    db cmdBufferL dup (?)   ;Original input from user! 128 chars max!
    47                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    48 00000244 <res 82h>           <1> cpyBuffer   db cmdBufferL dup (?)   ;Copied input for processing
    49 000002C6 <res 82h>           <1> cmdBuffer   db cmdBufferL dup (?)   ;Buffer with the command pipeline
    50 00000348 <res 4Fh>           <1> cmdPathSpec db fileSpecZL dup (?)   ;Space for full path to a ext cmd
    51 00000397 <res Eh>            <1> cmdName     db cmdNameL dup (?)     ;Cmd name prefixed by length 
    52                              <1> 
    53 000003A5 <res 4Fh>           <1> rdrInFilespec   db fileSpecZL dup (?)   ;Space for the redir in filespec
    54 000003F4 <res 4Fh>           <1> rdrOutFilespec  db fileSpecZL dup (?)   ;Space for the redir out filespec
    55                              <1> 
    56                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    57 00000443 <res 4Fh>           <1> pipe1Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    58 00000492 <res 4Fh>           <1> pipe2Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    59                              <1> 
    60 000004E1 ????????????????    <1> newPipe dq ?    ;Pointer to the new pathspec (STDOUT)
    61 000004E9 ????????????????    <1> oldPipe dq ?    ;Pointer to the old pathspec (STDIN)
    62                              <1> 
    63                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    64                              <1> ; a really long invalid DOS path for PATH to work properly.
    65 000004F1 <res 104h>          <1> searchSpec  db 2*cmdBufferL dup (?)   
    66                              <1> 
    67                              <1> ;Internal Function vars
    68                              <1> ;Dir Vars
    69 000005F5 ??                  <1> dirFlags    db ?    ;Dir Flags.     Bit[0] set => /W or /w specified
    70                              <1> ;                                   Bit[1] set => /P or /p specified
    71                              <1> ;                                   Bit[2] set => A file/path specified
    72 000005F6 ??                  <1> dirLineCtr  db ?    ;Counter to keep track of which line we printed (0-23)
    73 000005F7 ????????            <1> dirFileCtr  dd ?    ;Used in /W mode, rollover after 5
    74 000005FB ??                  <1> dirDrv      db ?    ;0 based drive number to use
    75 000005FC <res 82h>           <1> dirSrchDir  db cmdBufferL dup (?)   ;Search directory 
    76 0000067E <res 10h>           <1> dirSrchFCB  db 10h dup (?)    ;We copy the search pattern here, inited in dir
    77                              <1> dirWideType equ 1
    78                              <1> dirPageType equ 2
    79                              <1> dirFileType equ 4
    80                              <1> 
    81                              <1> ;Time/Date vars
    82 0000068E ??                  <1> td1 db ?    ;Minutes/Year
    83 0000068F ??                  <1> td2 db ?    ;Hours/Zero
    84 00000690 ??                  <1> td3 db ?    ;Hundredths/Day
    85 00000691 ??                  <1> td4 db ?    ;Seconds/Month
    86                              <1> 
    87                              <1> ;Rename/Copy/Delete Buffers
    88                              <1> delPath:
    89                              <1> comspecDir:    ;Used to store the directory passed during startup
    90 00000692 <res 82h>           <1> srcSpec     db cmdBufferL dup (?)
    91 00000714 <res 82h>           <1> destSpec    db cmdBufferL dup (?)
    92 00000796 ????????????????    <1> srcPtr      dq ?    ;Where to copy pattern to in src path
    93 0000079E ????????????????    <1> destPtr     dq ?    ;Where to copy pattern to in dest path
    94 000007A6 <res Bh>            <1> renName     db 11 dup (?) ;Build a name pattern here in FCB format
    95                              <1> ;Copy vars
    96 000007B1 ????????????????    <1> pLastFspec  dq ?    ;Ptr to first char past last + in source of Mode 3 copy
    97 000007B9 ????????????????    <1> pNextFspec  dq ?    ;Ptr to first char past next + in source of Mode 3 copy
    98 000007C1 ??                  <1> verifyFlg   db ?    ;Set if verify on before copy
    99 000007C2 ????                <1> sourceHdl   dw ?    ;These get set to -1 on entry to copy
   100 000007C4 ????                <1> destHdl     dw ?
   101 000007C6 ????                <1> srcHdlInfo  dw ?    ;Save the hdl device info (bit 7 Set -> Char dev)
   102 000007C8 ????????????????    <1> cpBufPtr    dq ?    ;Ptr to the xfr arena
   103 000007D0 ????                <1> wCpBufSz    dw ?    ;Copy Buffer size, max 4096 bytes
   104 000007D2 ????????            <1> dCpCnt      dd ?    ;Number of files we have copied
   105 000007D6 ??                  <1> bCpFlg      db ?    ;Copy state flag   
   106                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   107                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   108                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   109                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   110                              <1> oneDest     equ 10h ;Single destination, not dir 
   111                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   112                              <1> mod2Cpy     equ 40h ;Set if copying files with new names (unused)
   113                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   114                              <1> 
   115                              <1> ;Environment manipulation vars
   116 000007D7 ????                <1> envVarSz        dw ?    ;Env var size
   117 000007D9 ????                <1> envVarNamSz     dw ?    ;Env var "name="" length
    31                                  bssLen equ ($ - $$)
    32                                  
    33                                  Segment stack nobits align=1 follows=bss
    34                                      alignb 10h
    35 00000000 <res 640h>                  dq 200 dup (?)  ;1.6K stack, para aligned
    36                                  stackTop:   ;Top of the stack
    37 00000640 ????????????????            dq ?    ;Extra paragraph
    38 00000648 ????????????????            dq ?
    39                                  endOfAlloc: ;Symbol to free from once init is over!
    40                                  stackLen equ ($ - $$)
    41                                  
    42                                  Segment init align=1 valign=1 follows=cmd vfollows=stack
    43                                  %define currSegVBase section.init.vstart
    44                                  %include "./src/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;Start by copying the loader forwards to make space for the BSS
     3                              <1> ;This section needs to use r8 as the base pointer for the copy.
     4                              <1> ;DO NOT USE RIP RELATIVE ADDRESSING AS RIP IS ASSUMED TO BE AT
     5                              <1> ; VIRTUAL START.
     6 00000000 488D35F9FFFFFF      <1>     lea rsi, cmdLdr
     7 00000007 498DB8[00000000]    <1>     lea rdi, qword [r8 + section.init.vstart]
     8 0000000E B919050000          <1>     mov ecx, initLen
     9 00000013 F3A4                <1>     rep movsb
    10 00000015 498DB8[1E000000]    <1>     lea rdi, qword [r8 + startInit]
    11 0000001C 57                  <1>     push rdi
    12 0000001D C3                  <1>     ret ;Goto next instruction but reallocated!
    13                              <1> 
    14                              <1> startInit:
    15                              <1> ;First check if the version is ok. If not, return.
    16 0000001E B430                <1>     mov ah, 30h
    17 00000020 CD21                <1>     int 21h
    18 00000022 3C01                <1>     cmp al, 01h ;Version 1
    19 00000024 760D                <1>     jbe .okVersion
    20 00000026 488D158C040000      <1>     lea rdx, badVerStr
    21 0000002D B409                <1>     mov ah, 09h
    22 0000002F CD21                <1>     int 21h
    23                              <1> .exitBad:
    24 00000031 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    25                              <1> .okVersion:
    26                              <1> ;Now the version is ok we store self as parent in the PSP, 
    27                              <1> ; to prevent accidental closure
    28 00000033 800D(1A000000)80    <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    29 0000003A 4C8905(00000000)    <1>     mov qword [pPSP], r8        ;Store PSP ptr in internal var 
    30 00000041 488D25(40060000)    <1>     lea rsp, stackTop           ;And set the stack pointer to our stack
    31 00000048 488D3D(00000000)    <1>     lea rdi, section.bss.start
    32 0000004F B9DB070000          <1>     mov ecx, bssLen
    33 00000054 31C0                <1>     xor eax, eax
    34 00000056 F3AA                <1>     rep stosb
    35                              <1> ;Now eject all the unneeded space, to make space for allocating.
    36                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    37 00000058 488D1DBA040000      <1>     lea rbx, endOfInitAlloc
    38 0000005F 4C29C3              <1>     sub rbx, r8 ;Convert to number of bytes (Could get assembler to do this)
    39 00000062 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
    40 00000068 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    41 0000006B B8004A0000          <1>     mov eax, 4A00h ;Realloc
    42 00000070 CD21                <1>     int 21h
    43 00000072 72BD                <1>     jc .exitBad
    44 00000074 E8(85470000)        <1>     call resetNation
    45                              <1> ;Now space has been made, time to parse the command tail
    46 00000079 E8EC000000          <1>     call parseCmdLine   ;Now parse the command tail.
    47 0000007E E8F0020000          <1>     call doEnv          ;Now enact the command tail actions
    48 00000083 E8(B1470000)        <1>     call resetIDTentries    ;Setup IDT entries now. 
    49 00000088 F605(1A000000)01    <1>     test byte [statFlg1], permaShell ;Are we perma?
    50 0000008F 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    51                              <1> ;Ok so we are master COMMAND.COM
    52                              <1> ;Now make myself my own parent task. We already are the current psp
    53 00000095 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    54                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    55 00000099 488D15(654A0000)    <1>     lea rdx, critErrorHandler
    56 000000A0 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    57 000000A4 488D15(79490000)    <1>     lea rdx, ctrlCHandler
    58 000000AB 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    59 000000AF 488D15(710E0000)    <1>     lea rdx, appRet
    60 000000B6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    61 000000BA 488D15(14140000)    <1>     lea rdx, int2Eh
    62 000000C1 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    63 000000C6 CD21                <1>     int 21h
    64                              <1> ;Always get the Autoexec from the root dir we are booting into
    65 000000C8 E8(22440000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
    66 000000CD 0441                <1>     add al, "A"
    67 000000CF 8805(EB070000)      <1>     mov byte [autoSpec], al ;
    68                              <1> ;Now, open AUTOEXEC.BAT. 
    69 000000D5 488D15(EB070000)    <1>     lea rdx, autoSpec
    70 000000DC B8003D0000          <1>     mov eax, 3D00h  ;Open file
    71 000000E1 CD21                <1>     int 21h
    72 000000E3 7212                <1>     jc .noAutoexec
    73                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    74                              <1>     ; the normal hello there! string
    75 000000E5 89C3                <1>     mov ebx, eax
    76 000000E7 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    77 000000EC CD21                <1>     int 21h
    78                              <1> ;Now we do the same as at the end, prepping for jettisoning
    79 000000EE 31D2                <1>     xor edx, edx
    80 000000F0 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    81 000000F2 E954000000          <1>     jmp .prepStart
    82                              <1> .noAutoexec:
    83                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    84 000000F7 488D15(67010000)    <1>     lea rdx, crlf
    85 000000FE B409                <1>     mov ah, 09h
    86 00000100 CD21                <1>     int 21h
    87 00000102 800D(1A000000)40    <1>     or byte [statFlg1], inLdrDT
    88 00000109 E8(A12B0000)        <1>     call time.init
    89 0000010E E8(F3290000)        <1>     call date.init
    90 00000113 8025(1A000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    91 0000011A 488D15(67010000)    <1>     lea rdx, crlf
    92 00000121 B409                <1>     mov ah, 09h
    93 00000123 CD21                <1>     int 21h
    94                              <1>     ;Now fall thru.
    95                              <1> .notMaster:    
    96                              <1> ;Finish by printing INIT string.
    97 00000125 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    98 0000012C 7529                <1>     jnz .singleCom
    99 0000012E 488D154B030000      <1>     lea rdx, initString
   100 00000135 B409                <1>     mov ah, 09h
   101 00000137 CD21                <1>     int 21h ;Print init string
   102 00000139 E8(44320000)        <1>     call version.printVersionNumber
   103 0000013E 488D154E030000      <1>     lea rdx, initString2
   104 00000145 B409                <1>     mov ah, 09h
   105 00000147 CD21                <1>     int 21h ;Print init string
   106 00000149 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   107                              <1> .prepStart:
   108 0000014B 8025(1A000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   109 00000152 E9(AF090000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   110                              <1> .singleCom:
   111                              <1> ;In single command mode, check the length of the input string was not 0.
   112                              <1> ; If it was, exit, else proceed
   113 00000157 803D(C3010000)00    <1>     cmp byte [inBuffer + 1], 0
   114 0000015E 0F84(63340000)      <1>     je exit
   115 00000164 31D2                <1>     xor edx, edx
   116 00000166 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   117 00000168 EBE1                <1>     jmp short .prepStart
   118                              <1> 
   119                              <1> 
   120                              <1> parseCmdLine:
   121                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   122                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   123                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   124                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   125                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   126                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   127                              <1> ;           Default is CON
   128                              <1> ;[/C string] means execute the string as a command and terminate immediately
   129                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   130                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   131                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   132                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   133                              <1> ; permanent. Needs a colon after E. 
   134                              <1> ;
   135                              <1> ;Start by setting up the default comspec dir, null terminated
   136 0000016A E8(22440000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
   137 0000016F 0441                <1>     add al, "A"
   138 00000171 B43A                <1>     mov ah, ":"
   139 00000173 488D3D(92060000)    <1>     lea rdi, comspecDir
   140 0000017A 66AB                <1>     stosw   ;Store drive specifier
   141 0000017C 0FB605(0A000000)    <1>     movzx eax, byte [pathSep]
   142 00000183 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   143                              <1> 
   144 00000185 E8(6A470000)        <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   145 0000018A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   146                              <1> .parseLp:
   147 00000191 E8(65440000)        <1>     call skipDelimiters             ;Strip delims
   148 00000196 AC                  <1>     lodsb
   149 00000197 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   150 0000019A 3C0D                <1>     cmp al, CR
   151 0000019C 0F847C010000        <1>     je .endScan
   152 000001A2 3A05(0B000000)      <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   153 000001A8 752D                <1>     jne .file
   154                              <1> .switch:
   155 000001AA 48FFC6              <1>     inc rsi ;Go past the switch char
   156 000001AD AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   157 000001AE E8(4A440000)        <1>     call ucChar
   158 000001B3 3C43                <1>     cmp al, "C"
   159 000001B5 0F842F010000        <1>     je .switchStr
   160 000001BB 3C50                <1>     cmp al, "P"
   161 000001BD 0F8403010000        <1>     je .switchPerma
   162 000001C3 3C45                <1>     cmp al, "E"
   163 000001C5 0F84B0000000        <1>     je .switchEnv
   164 000001CB 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   165                              <1> .badparm:
   166 000001CE 488D15(4B030000)    <1>     lea rdx, badParm
   167 000001D5 EBBA                <1>     jmp short .parseLp
   168                              <1> ;-----------------------------------------------------------------
   169                              <1> ;Search for the filespec
   170                              <1> .file:
   171 000001D7 E8(F1450000)        <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   172 000001DC 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   173 000001DF 488D15(F1040000)    <1>     lea rdx, searchSpec
   174 000001E6 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   175 000001EB B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   176 000001F0 CD21                <1>     int 21h
   177 000001F2 7319                <1>     jnc .charOrDir
   178                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   179 000001F4 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   180 000001F6 30C0                <1>     xor al, al
   181 000001F8 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   182 000001FD 741C                <1>     je .dir ;If so, root dir specified, all oki!
   183                              <1> .badSpec:
   184                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   185 000001FF 488D15CB020000      <1>     lea rdx, badCmdDir
   186                              <1> .bs0:
   187 00000206 E8(1A420000)        <1>     call printString
   188                              <1> .plhop:
   189 0000020B EB84                <1>     jmp short .parseLp
   190                              <1> ;-----------------------------------------------------------------
   191                              <1> ;Check if a char or directory here
   192                              <1> .charOrDir:
   193 0000020D 8A05(8C010000)      <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   194 00000213 2450                <1>     and al, dirCharDev | dirDirectory
   195 00000215 74E8                <1>     jz .badSpec
   196 00000217 A840                <1>     test al, dirCharDev
   197 00000219 7525                <1>     jnz .charDev
   198                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   199                              <1> .dir:
   200 0000021B 56                  <1>     push rsi
   201 0000021C 488D35(F1040000)    <1>     lea rsi, searchSpec 
   202 00000223 488D3D(92060000)    <1>     lea rdi, comspecDir
   203 0000022A E8(36440000)        <1>     call strcpy2
   204 0000022F B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   205 00000234 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   206 00000236 5E                  <1>     pop rsi
   207 00000237 C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   208 0000023E EBCB                <1>     jmp short .plhop
   209                              <1> ;-----------------------------------------------------------------
   210                              <1> ;Handle char dev here
   211                              <1> .charDev:
   212                              <1> ;Check the name is max 8 chars in length
   213 00000240 488D3D(F1040000)    <1>     lea rdi, searchSpec
   214 00000247 E8(40440000)        <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   215 0000024C 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   216 00000252 771E                <1>     ja .badChar
   217 00000254 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   218 00000255 488D35(F1040000)    <1>     lea rsi, searchSpec
   219 0000025C 488D3D(E2070000)    <1>     lea rdi, devName
   220 00000263 E8(27440000)        <1>     call strcpy ;Copy this string over
   221 00000268 5E                  <1>     pop rsi
   222 00000269 C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   223                              <1> .plhop1:
   224 00000270 EB99                <1>     jmp short .plhop    ;parseLp
   225                              <1> .badChar:
   226 00000272 488D15(FE040000)    <1>     lea rdx, badDev
   227                              <1> .bs1:
   228 00000279 EB8B                <1>     jmp short .bs0
   229                              <1> ;-----------------------------------------------------------------
   230                              <1> .switchEnv:
   231 0000027B AC                  <1>     lodsb
   232 0000027C 48FFCE              <1>     dec rsi
   233 0000027F 3C3A                <1>     cmp al, ":"
   234 00000281 0F8547FFFFFF        <1>     jne .badparm
   235 00000287 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   236 0000028A E8(65440000)        <1>     call skipDelimiters
   237 0000028F AC                  <1>     lodsb       ;Get the first non-delimiter
   238 00000290 48FFCE              <1>     dec rsi     ;Point back at it
   239 00000293 3C0D                <1>     cmp al, CR
   240 00000295 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   241                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   242 0000029B E8(1E470000)        <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   243 000002A0 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   244 000002A6 3D00800000          <1>     cmp eax, 8000h
   245 000002AB 7710                <1>     ja .badEnv
   246 000002AD 3DA0000000          <1>     cmp eax, 0A0h
   247 000002B2 7209                <1>     jb .badEnv
   248 000002B4 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   249                              <1> .plhop2:
   250 000002BB EBB3                <1>     jmp short .plhop1  ;parseLp
   251                              <1> .badEnv:
   252 000002BD 488D1536020000      <1>     lea rdx, badEnvSz
   253 000002C4 EBB3                <1>     jmp short .bs1
   254                              <1> ;-----------------------------------------------------------------
   255                              <1> .switchPerma:
   256 000002C6 AC                  <1>     lodsb   ;Get the second char after the P
   257 000002C7 48FFCE              <1>     dec rsi ;Point back at it
   258 000002CA 3C0D                <1>     cmp al, CR
   259 000002CC 7413                <1>     je .spEmbCr ;Allow CR after the P
   260 000002CE 3A05(0B000000)      <1>     cmp al, byte [switchChar]
   261 000002D4 740B                <1>     je .spEmbCr ;Allow switch char after P
   262 000002D6 E8(73440000)        <1>     call isALdelimiter
   263 000002DB 0F85EDFEFFFF        <1>     jne .badparm
   264                              <1> .spEmbCr:
   265 000002E1 800D(1A000000)01    <1>     or byte [statFlg1], permaShell  ;Set the bit
   266 000002E8 EBD1                <1>     jmp short .plhop2  ;parseLp
   267                              <1> ;-----------------------------------------------------------------
   268                              <1> .switchStr:
   269 000002EA AC                  <1>     lodsb       ;Get the char after the C
   270 000002EB 48FFCE              <1>     dec rsi     ;Point back at it
   271 000002EE 3C0D                <1>     cmp al, CR
   272 000002F0 740B                <1>     je .ssembCr         ;Embedded CR ok
   273 000002F2 E8(73440000)        <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   274 000002F7 0F85D1FEFFFF        <1>     jne .badparm
   275                              <1> .ssembCr:
   276 000002FD E8(65440000)        <1>     call skipDelimiters     ;Move rsi past the delimiters
   277 00000302 488D3D(C4010000)    <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   278                              <1> .ssLp:
   279 00000309 AC                  <1>     lodsb
   280 0000030A AA                  <1>     stosb
   281 0000030B 3C0D                <1>     cmp al, CR
   282 0000030D 7408                <1>     je .ssOk
   283 0000030F FE05(C3010000)      <1>     inc byte [inBuffer + 1] ;Increment the char count
   284 00000315 EBF2                <1>     jmp short .ssLp
   285                              <1> .ssOk:
   286 00000317 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the single flag
   287                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   288                              <1> ;-----------------------------------------------------------------
   289                              <1> .endScan:
   290                              <1> ;Now copy our name to the end of the dir specified
   291 0000031E 488D3D(92060000)    <1>     lea rdi, comspecDir
   292 00000325 E8(40440000)        <1>     call strlen ;Get the length in ecx, preserve rdi
   293 0000032A FFC9                <1>     dec ecx ;Point to null terminator
   294 0000032C 8A05(0A000000)      <1>     mov al, byte [pathSep]
   295 00000332 4801CF              <1>     add rdi, rcx    ;Now point to the null
   296 00000335 3847FF              <1>     cmp byte [rdi - 1], al
   297 00000338 7401                <1>     je .esSkipPathsep
   298 0000033A AA                  <1>     stosb
   299                              <1> .esSkipPathsep:
   300 0000033B 488D35(0A080000)    <1>     lea rsi, cspec
   301 00000342 E8(27440000)        <1>     call strcpy ;Now copy over the name of our beloved shell
   302 00000347 E812000000          <1>     call .replacestdio
   303                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   304                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   305 0000034C F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   306                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000353 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000355 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 00000356 8025(1A000000)FE    <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   308                              <1>     return
    13                              <2> %%_ret:
    14 0000035D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .replacestdio:
   310 0000035E F605B1010000FF      <1>     test byte [initNewDev], -1
   311                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000365 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   312 00000367 488D15(E2070000)    <1>     lea rdx, devName
   313 0000036E E9(092D0000)        <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   314                              <1> 
   315                              <1> doEnv:
   316                              <1> ;Will do the environment adjustments as needed
   317 00000373 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   318 00000377 4885F6              <1>     test rsi, rsi
   319 0000037A 7447                <1>     jz .noInitEnv
   320 0000037C 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   321                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000385 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   322                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   323                              <1> ;copy the environment from the master and free the original block.
   324                              <1> ;If the block we allocate is smaller than the original block, 
   325                              <1> ; print out of env space and stop there
   326                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   327                              <1> ; comspec. 
   328 00000387 F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   329 0000038E 752E                <1>     jnz .prepNewEnv
   330                              <1>     ;Else, we create new alloc and copy master into it
   331 00000390 E867000000          <1>     call .allocEnv
   332 00000395 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   333 00000398 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   334 0000039D 57                  <1>     push rdi            ;Save the start of the environment block
   335 0000039E E893000000          <1>     call .cpEnv         ;Copy the environment
   336 000003A3 5F                  <1>     pop rdi
   337 000003A4 E805000000          <1>     call .freeCurrentEnv
   338 000003A9 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   339                              <1>     return  
    13                              <2> %%_ret:
    14 000003AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> .freeCurrentEnv:
   341 000003AE 4150                <1>     push r8
   342 000003B0 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   343 000003B4 B800490000          <1>     mov eax, 4900h
   344 000003B9 CD21                <1>     int 21h
   345 000003BB 4158                <1>     pop r8
   346                              <1>     return
    13                              <2> %%_ret:
    14 000003BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   347                              <1> .prepNewEnv:
   348 000003BE E8EBFFFFFF          <1>     call .freeCurrentEnv
   349                              <1> .noInitEnv:
   350                              <1> ;Build the initial block.
   351 000003C3 E834000000          <1>     call .allocEnv
   352 000003C8 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   353 000003CB 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   354 000003CF 57                  <1>     push rdi            ;Save the environment ptr!
   355 000003D0 488D35(FB070000)    <1>     lea rsi, pathEVar
   356 000003D7 E8(27440000)        <1>     call strcpy
   357 000003DC 488D35(01080000)    <1>     lea rsi, comspecEVar
   358 000003E3 E8(27440000)        <1>     call strcpy
   359 000003E8 48FFCF              <1>     dec rdi ;Write over the terminating null
   360 000003EB 488D35(92060000)    <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   361 000003F2 E8(27440000)        <1>     call strcpy 
   362 000003F7 30C0                <1>     xor al, al
   363 000003F9 AA                  <1>     stosb   ;Store the second terminating null
   364 000003FA 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   365                              <1>     return
    13                              <2> %%_ret:
    14 000003FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> .allocEnv:
   368                              <1> ;Output: rax -> Ptr to the environment block. 
   369                              <1> ;   If anything goes wrong, error message and exit the shell!
   370 000003FC 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   371 00000403 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   372 00000405 750C                <1>     jnz .goAlloc
   373 00000407 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   374 0000040C 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   375                              <1> .goAlloc:
   376 00000413 81C30F000000        <1>     add ebx, 0Fh
   377 00000419 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   378 0000041C B800480000          <1>     mov eax, 4800h
   379 00000421 CD21                <1>     int 21h
   380                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000423 73D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00000425 488D15(45070000)    <1>     lea rdx, memBad1
   382 0000042C E8(1A420000)        <1>     call printString
   383 00000431 E9(7A340000)        <1>     jmp exit.ouch 
   384                              <1> 
   385                              <1> .cpEnv:
   386                              <1> ;Copies the environment
   387                              <1> ;Input: rsi -> Source to copy from
   388                              <1> ;       rdi -> Destination to copy to
   389 00000436 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   390                              <1> .lp:
   391 0000043D AC                  <1>     lodsb
   392 0000043E AA                  <1>     stosb
   393 0000043F 84C0                <1>     test al, al
   394 00000441 750A                <1>     jnz .notNul
   395 00000443 3806                <1>     cmp byte [rsi], al
   396 00000445 7506                <1>     jnz .notNul
   397                              <1>     ;Here, we have encountered our double null!
   398 00000447 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   399 00000449 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   400 0000044B AA                  <1>     stosb
   401                              <1>     return
    13                              <2> %%_ret:
    14 0000044C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> .notNul:
   403 0000044D FFC9                <1>     dec ecx ;One less char to copy over
   404 0000044F 75EC                <1>     jnz .lp
   405                              <1> .err:
   406 00000451 4881EF02000000      <1>     sub rdi, 2
   407 00000458 488D15(3F020000)    <1>     lea rdx, noEnvSpace
   408 0000045F E8(1A420000)        <1>     call printString
   409 00000464 31C0                <1>     xor eax, eax
   410 00000466 66AB                <1>     stosw   ;Store 0 word
   411                              <1>     return
    13                              <2> %%_ret:
    14 00000468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> getMasterEnv:
   414                              <1> ;Walks the psp chain to the first self parent.
   415                              <1> ;Output: rsi -> Environment of the first self-parent program
   416 00000469 4150                <1>     push r8
   417                              <1> .lp:
   418 0000046B 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   419 0000046F 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   420 00000472 7405                <1>     je .exit
   421 00000474 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   422 00000477 EBF2                <1>     jmp short .lp
   423                              <1> .exit:
   424 00000479 4158                <1>     pop r8
   425 0000047B 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000047F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> 
   429                              <1> ;Loader Data here
   430                              <1> initString: 
   431 00000480 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   431 00000489 2056657273696F6E20- <1>
   431 00000492 24                  <1>
   432                              <1> initString2:
   433 00000493 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   433 0000049C 687420323032322C20- <1>
   433 000004A5 323032342C20596C6C- <1>
   433 000004AE 2042757A6F6B752E    <1>
   434 000004B6 0D0A24              <1>     db CR,LF,"$"
   435 000004B9 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   435 000004C2 20444F532076657273- <1>
   435 000004CB 696F6E0D0A24        <1>
   436 000004D1 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   436 000004DA 20434F4D4D414E4420- <1>
   436 000004E3 736561726368206469- <1>
   436 000004EC 726563746F72792062- <1>
   436 000004F5 61640D0A24          <1>
   437 000004FA 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   437 00000503 6E7669726F6E6D656E- <1>
   437 0000050C 742053697A650D0A24  <1>
   438 00000515 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   439 00000516 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   440 00000517 0000                <1> initEnvSz   dw 0    ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    45                                  endOfInitAlloc: ;Symbol to free during init
    46                                  initLen equ ($ - $$)
    47                                  
    48                                  ;Amount of space to make for bss/stack
    49                                  initOffset  equ bssLen + stackLen  
    49          ------------------       info: assembly required 1+5+2 passes

