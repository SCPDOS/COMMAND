     1                                  ;COMMAND.COM main file
     2                                  [map all ./lst/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  ;Used to ensure that the init on disk and bss virtually are aligned equally
     7                                  cmdAlign    equ 10h 
     8                                  
     9                                  %include "./inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
    10                                  %include "./inc/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
    11                                  %include "./inc/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    12                                  %include "./inc/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    13                                  %include "./inc/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> 
    47                              <1> 
    48                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    49 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    50 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    51 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    52 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    53 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc execProg  ;For use with EXEC-ing a child task
    57 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    58 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    59 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    60 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    61                              <1> endstruc
    62                              <1> 
    63                              <1> ;Directory attribute equates
    64                              <1>     dirReadOnly     equ 01h
    65                              <1>     dirHidden       equ 02h
    66                              <1>     dirSystem       equ 04h
    67                              <1>     dirVolumeID     equ 08h
    68                              <1>     dirDirectory    equ 10h
    69                              <1>     dirArchive      equ 20h
    70                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    71                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    72                              <1>     ;If any of the three bits are set, then ALL three bits are set
    73                              <1>     ; in addition to whatever the user passed to search for.
    74                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    75                              <1>     dirIncFiles     equ dirHidden | dirSystem
    14                                  
    15                                  Segment cmd align=1 valign=1
    16                                  %define currSegVBase 0
    17                                  %include "./dat/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3                              <1> pPSP:       ;Internal pointer to the task PSP
     4 00000000 E9(E0F1FFFF)        <1>     jmp cmdLdr - initOffset  ;This instruction is 5 bytes
     5 00000005 CCCCCC              <1>     db 3 dup (0CCh) ;So add three bytes to turn it into a variable after use
     6 00000008 1400                <1> numHdls     dw 20   ;Get number of handles permitted
     7 0000000A 5C                  <1> pathSep     db "\"  ;Default path sep
     8 0000000B 2F                  <1> switchChar  db "/"  ;Default switch char
     9 0000000C FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    10 0000000D 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    11 0000000E FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    12                              <1> ;Volume static FCB for filesearches
    13                              <1> volFcb:
    14                              <1>     istruc exFcb
    15 00000010 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    16 00000011 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    17 00000017 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    18 00000018 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    19 00000020 3F3F3F              <1>     at exFcb.fileext,   db "???"
    20 00000023 00000000            <1>     at exFcb.curBlock,  dd 0
    21 00000027 00<rep 15h>         <1>     iend 
    22                              <1> 
    23                              <1> ;The string for Y/N prompt for batch ^C handler
    24 0000003C 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    25                              <1> ;==============================================================================
    26                              <1> ; Do not split the blocks below!
    27                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    28                              <1> cmdLineStatePtr:
    29 00000040 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 00000041 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 00000043 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 00000045 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 00000046 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 00000047 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 00000049 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> ;------------------------------------------------------------------------------
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 0000004B 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 0000004C 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 0000004D 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 0000004E 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 0000004F 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 00000050 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 00000051 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    18                                  %include "./dat/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000052 03444952            <1>     db 3, "DIR"
     8 00000056 E219                <1>     dw dir - startLbl
     9                              <1> 
    10 00000058 024344              <1>     db 2, "CD"
    11 0000005B 851E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000005D 054348444952        <1>     db 5, "CHDIR"
    14 00000063 851E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000065 024D44              <1>     db 2, "MD"
    17 00000068 001F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000006A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000070 001F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000072 025244              <1>     db 2, "RD"
    23 00000075 491F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000077 05524D444952        <1>     db 5, "RMDIR"
    26 0000007D 491F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000007F 0344454C            <1>     db 3, "DEL"
    29 00000083 0727                <1>     dw erase - startLbl
    30                              <1> 
    31 00000085 054552415345        <1>     db 5, "ERASE"
    32 0000008B 0727                <1>     dw erase - startLbl
    33                              <1> 
    34 0000008D 0444415445          <1>     db 4, "DATE"
    35 00000092 4528                <1>     dw date - startLbl
    36                              <1> 
    37 00000094 0454494D45          <1>     db 4, "TIME"
    38 00000099 F329                <1>     dw time - startLbl
    39                              <1> 
    40 0000009B 04434F5059          <1>     db 4, "COPY"
    41 000000A0 931F                <1>     dw copy - startLbl
    42                              <1> 
    43 000000A2 0443545459          <1>     db 4, "CTTY"
    44 000000A7 202B                <1>     dw ctty - startLbl
    45                              <1> 
    46 000000A9 03434C53            <1>     db 3, "CLS"
    47 000000AD C72B                <1>     dw cls - startLbl
    48                              <1> 
    49 000000AF 05425245414B        <1>     db 5, "BREAK"
    50 000000B5 402C                <1>     dw break - startLbl
    51                              <1> 
    52 000000B7 06564552494659      <1>     db 6, "VERIFY"
    53 000000BE C12C                <1>     dw verify - startLbl
    54                              <1> 
    55 000000C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000000C7 3E2D                <1>     dw rename - startLbl
    57                              <1> 
    58 000000C9 0352454E            <1>     db 3, "REN"
    59 000000CD 3E2D                <1>     dw rename - startLbl
    60                              <1>     
    61 000000CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000000D8 752F                <1>     dw truename - startLbl
    63                              <1> 
    64 000000DA 03564552            <1>     db 3, "VER"
    65 000000DE 8030                <1>     dw version - startLbl
    66                              <1> 
    67 000000E0 03564F4C            <1>     db 3, "VOL"
    68 000000E4 C62F                <1>     dw volume - startLbl
    69                              <1> 
    70 000000E6 034D454D            <1>     db 3, "MEM"
    71 000000EA C430                <1>     dw memory - startLbl
    72                              <1> 
    73 000000EC 0445584954          <1>     db 4, "EXIT"
    74 000000F1 C632                <1>     dw exit - startLbl
    75                              <1> 
    76 000000F3 0454595045          <1>     db 4, "TYPE"
    77 000000F8 1332                <1>     dw type - startLbl
    78                              <1> 
    79 000000FA 0450415448          <1>     db 4, "PATH"
    80 000000FF 0736                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000101 03534554            <1>     db 3, "SET"
    83 00000105 E834                <1>     dw set - startLbl
    84                              <1> 
    85 00000107 0650524F4D5054      <1>     db 6, "PROMPT"
    86 0000010E E636                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000110 044543484F          <1>     db 4, "ECHO"
    90 00000115 5637                <1>     dw echo - startLbl
    91                              <1> 
    92 00000117 055041555345        <1>     db 5, "PAUSE"
    93 0000011D 3238                <1>     dw pauza - startLbl
    94                              <1> 
    95 0000011F 0352454D            <1>     db 3, "REM"
    96 00000123 7C38                <1>     dw remark - startLbl
    97                              <1> 
    98 00000125 04474F544F          <1>     db 4, "GOTO"
    99 0000012A DE38                <1>     dw goto - startLbl
   100                              <1> 
   101 0000012C 055348494654        <1>     db 5, "SHIFT"
   102 00000132 9138                <1>     dw shift - startLbl
   103                              <1> 
   104 00000134 024946              <1>     db 2, "IF"
   105 00000137 1E3A                <1>     dw ifCmd - startLbl
   106                              <1> ;-----------------------------
   107                              <1> ; Commands left to implement 
   108                              <1> ;-----------------------------
   109 00000139 03464F52            <1>     db 3, "FOR"
   110 0000013D 653B                <1>     dw forCmd - startLbl
   111                              <1> ;-----------------------------
   112 0000013F FF                  <1>     db -1   ;End of table
   113                              <1> 
   114                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   115                              <1> pTbl:
   116 00000140 42                  <1>     db "B", 
   117 00000141 9E3C                <1>     dw putPipeInPrompt - pTbl     ;Pipe char
   118 00000143 44                  <1>     db "D", 
   119 00000144 9D3D                <1>     dw printFmtDate - pTbl        ;Current date
   120 00000146 45                  <1>     db "E", 
   121 00000147 923C                <1>     dw putEscInPrompt - pTbl      ;ANSI Escape char
   122 00000149 47                  <1>     db "G", 
   123 0000014A A23C                <1>     dw putGTinPrompt - pTbl       ;Greater than char
   124 0000014C 48                  <1>     db "H", 
   125 0000014D AA3C                <1>     dw putBSPinPrompt - pTbl      ;Backspace
   126 0000014F 4C                  <1>     db "L", 
   127 00000150 A63C                <1>     dw putLTinPrompt - pTbl       ;Less than char
   128 00000152 4E                  <1>     db "N", 
   129 00000153 C33C                <1>     dw putDriveInPrompt - pTbl    ;Current drive letter
   130 00000155 50                  <1>     db "P", 
   131 00000156 D13C                <1>     dw putCWDInPrompt - pTbl      ;Current drive and path
   132 00000158 51                  <1>     db "Q", 
   133 00000159 9A3C                <1>     dw putEquInPrompt - pTbl      ;Equals char
   134 0000015B 54                  <1>     db "T", 
   135 0000015C 343D                <1>     dw printFmtTime - pTbl        ;Current time in hh:mm:ss.hh fmt
   136 0000015E 56                  <1>     db "V", 
   137 0000015F 643C                <1>     dw putVersionInPrompt - pTbl  ;DOS version number
   138 00000161 5F                  <1>     db "_", 
   139 00000162 553C                <1>     dw printCRLF - pTbl           ;CRLF pair
   140 00000164 24                  <1>     db "$", 
   141 00000165 963C                <1>     dw putMoneyInPrompt - pTbl    ;Dollar sign
   142                              <1> pTblL equ $ - pTbl
    19                                  %include "./dat/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000167 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000016A 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000016F 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000178 696C65206D69737369- <1>
     4 00000181 6E670D0A24          <1>
     5 00000186 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000018F 6469736B2077697468- <1>
     5 00000198 206261746368206669- <1>
     5 000001A1 6C65                <1>
     6 000001A3 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000001AC 737320616E79206B65- <1>
     6 000001B5 79207768656E207265- <1>
     6 000001BE 6164790D0A24        <1>
     7 000001C4 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000001CD 746520626174636820- <1>
     7 000001D6 6A6F622028592F4E29- <1>
     7 000001DF 3F2024              <1>
     8 000001E2 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000001EB 6E64206F722066696C- <1>
     8 000001F4 65206E616D650D0A24  <1>
     9 000001FD 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000206 2066696C65206E616D- <1>
     9 0000020F 65206F7220          <1>
    10 00000214 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 0000021D 666F756E640D0A24    <1>
    11 00000225 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 0000022E 656E74206469736B20- <1>
    11 00000237 73706163650D0A24    <1>
    12 0000023F 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000248 7669726F6E6D656E74- <1>
    12 00000251 2073706163650D0A24  <1>
    13 0000025A 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 00000263 74696F6E206572726F- <1>
    13 0000026C 720D0A24            <1>
    14 00000270 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000279 6F7420626520636F70- <1>
    14 00000282 696564206F6E746F20- <1>
    14 0000028B 697473656C660D0A24  <1>
    15 00000294 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 0000029D 662064657374696E61- <1>
    15 000002A6 74696F6E206C6F7374- <1>
    15 000002AF 206265666F72652063- <1>
    15 000002B8 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000002BE 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000002C7 636F706965640D0A24  <1>
    18 000002D0 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000002D9 68206D656D6F727920- <1>
    18 000002E2 666F7220434F50590D- <1>
    18 000002EB 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000002ED 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 000002F6 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 000002F7 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000300 65650D0A24          <1>
    23 00000305 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 0000030E 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000317 726976652073706563- <1>
    25 00000320 696669636174696F6E- <1>
    25 00000329 0D0A24              <1>
    26 0000032C 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000335 6B6579207768656E20- <1>
    26 0000033E 7265616479202E202E- <1>
    26 00000347 202E2024            <1>
    27 0000034B 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000354 6172616D657465720D- <1>
    27 0000035D 0A24                <1>
    28                              <1> 
    29 0000035F 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000368 576564546875467269- <1>
    29 00000371 536174              <1>
    30 00000374 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 0000037D 206461746524        <1>
    31 00000383 43757272656E742064- <1> curDate db  "Current date is $"
    31 0000038C 6174652069732024    <1>
    32 00000394 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 0000039D 657720646174652024  <1>
    33 000003A6 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 000003AF 293A2024            <1>
    34 000003B3 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 000003BC 293A2024            <1>
    35 000003C0 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 000003C9 293A2024            <1>
    36 000003CD 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 000003D6 2074696D6524        <1>
    37 000003DC 43757272656E742074- <1> curTime db  "Current time is $"
    37 000003E5 696D652069732024    <1>
    38 000003ED 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 000003F6 65772074696D653A20- <1>
    38 000003FF 24                  <1>
    39                              <1> 
    40 00000400 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000409 7572652028592F4E29- <1>
    40 00000412 3F2024              <1>
    41                              <1> 
    42 00000415 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 0000041E 56657273696F6E2024  <1>
    43                              <1> 
    44 00000427 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000430 6E2064726976652024  <1>
    45 00000439 2069732024          <1> volOk   db " is $"
    46 0000043E 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000447 6162656C24          <1>
    47                              <1> 
    48 0000044C 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000455 69726563746F72790D- <1>
    48 0000045E 0A24                <1>
    49 00000460 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000469 206372656174652064- <1>
    49 00000472 69726563746F72790D- <1>
    49 0000047B 0A24                <1>
    50 0000047D 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000486 6174682C206E6F7420- <1>
    50 0000048F 6469726563746F7279- <1>
    50 00000498 2C0D0A              <1>
    51 0000049B 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 000004A4 6F7279206E6F742065- <1>
    51 000004AD 6D7074790D0A24      <1>
    52 000004B4 204469726563746F72- <1> dirMain db " Directory of  $"
    52 000004BD 79206F66202024      <1>
    53 000004C4 4E6F20506174682024  <1> noPath  db "No Path $"
    54 000004CD 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 000004D6 6E6965640D0A24      <1>
    55 000004DD 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 000004E6 72697665206973206E- <1>
    55 000004EF 6F206C6F6E67657220- <1>
    55 000004F8 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 000004FE 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000507 65766963650D0A24    <1>
    58 0000050F 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000518 20666F756E640D0A24  <1>
    59 00000521 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 0000052A 726F720D0A24        <1>
    60 00000530 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000539 6F74206265206E6573- <1>
    60 00000542 7465640D0A24        <1>
    61 00000548 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000551 6174652066696C6520- <1>
    61 0000055A 6572726F7220647572- <1>
    61 00000563 696E6720706970650D- <1>
    61 0000056C 0A24                <1>
    62 0000056E 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000577 2062696E6172792072- <1>
    62 00000580 656164732066726F6D- <1>
    62 00000589 206120646576696365- <1>
    62 00000592 0D0A24              <1>
    63 00000595 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 0000059B 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 000005A0 425245414B20697320- <1> breakIs db "BREAK is $"
    65 000005A9 24                  <1>
    66 000005AA 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 000005B3 2024                <1>
    67 000005B5 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 000005BE 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 000005C7 617468206F72206669- <1>
    68 000005D0 6C65206E616D650D0A- <1>
    68 000005D9 24                  <1>
    69 000005DA 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 000005E3 756D626572206F6620- <1>
    69 000005EC 706172616D65746572- <1>
    69 000005F5 730D0A24            <1>
    70 000005F9 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000602 74696E6720746F2064- <1>
    70 0000060B 6576696365          <1>
    71 00000610 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000614 50726F6772616D2074- <1> noMemMsg    db "Program too big to fit in memory",CR,LF,"$"
    72 0000061D 6F6F2062696720746F- <1>
    72 00000626 2066697420696E206D- <1>
    72 0000062F 656D6F72790D0A24    <1>
    73 00000637 4E4F5400            <1> notString   db "NOT",0
    74 0000063B 4552524F524C455645- <1> errlvlStr   db "ERRORLEVEL",0
    74 00000644 4C00                <1>
    75 00000646 455849535400        <1> existStr    db "EXIST",0
    76                              <1> 
    77 0000064C 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    77 00000655 20202020202020546F- <1>
    77 0000065E 74616C207379737465- <1>
    77 00000667 6D206D656D6F72793A- <1>
    77 00000670 2024                <1>
    78 00000672 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    78 0000067B 20202020202020204D- <1>
    78 00000684 656D6F727920757365- <1>
    78 0000068D 6420627920444F533A- <1>
    78 00000696 2024                <1>
    79 00000698 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    79 000006A1 656D6F727920757365- <1>
    79 000006AA 64206279206170706C- <1>
    79 000006B3 69636174696F6E733A- <1>
    79 000006BC 2024                <1>
    80 000006BE 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    80 000006C7 656D6F727920726573- <1>
    80 000006D0 657276656420627920- <1>
    80 000006D9 68617264776172653A- <1>
    80 000006E2 2024                <1>
    81 000006E4 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    81 000006ED 202020202020202020- <1>
    81 000006F6 2020202020204D656D- <1>
    81 000006FF 6F727920667265653A- <1>
    81 00000708 2024                <1>
    82 0000070A 20627974657324      <1> memByte db " bytes$"
    83 00000711 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    83 0000071A 6F7420417373657274- <1>
    83 00000723 61696E20444F532045- <1>
    83 0000072C 6E74727920506F696E- <1>
    83 00000735 7424                <1>
    84 00000737 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    84 00000740 416C6C6F636174696F- <1>
    84 00000749 6E204572726F7224    <1>
    85 00000751 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    85 0000075A 4572726F7224        <1>
    86 00000760 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    86 00000769 68616C74656424      <1>
    87                              <1> 
    88 00000770 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    88 00000779 206372656174652070- <1>
    88 00000782 6970650D0A          <1>
    89                              <1> pipeErrMsgL equ $ - pipeErrMsg
    90 00000787 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    90 00000790 6F6E206572726F720D- <1>
    90 00000799 0A                  <1>
    91                              <1> redirErrMsgL   equ $ - redirErrMsg
    92                              <1> 
    93 0000079A 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    94 0000079E 2020202024          <1> fourSpc  db "    $"
    95 000007A3 20202024            <1> threeSpc db "   $"
    96 000007A7 202024              <1> twoSpc   db "  $"
    97                              <1> 
    98 000007AA 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    98 000007B3 696679204F4E206F72- <1>
    98 000007BC 204F46460D0A24      <1>
    99                              <1> 
   100 000007C3 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
   101 000007CB 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   102                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   103                              <1> ; handles and reopen this device. Defaults to CON
   104 000007D4 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   105 000007DD 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   105 000007E6 45432E42415400      <1>
   106                              <1> autoSpecL equ $ - autoSpec
   107 000007ED 504154483D00        <1> pathEVar    db "PATH=",0
   108 000007F3 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   109 000007FC 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   109 00000805 4F4D00              <1>
   110                              <1> 
   111                              <1> ;Int 24h strings
   112                              <1> errMsgPtrTbl:
   113 00000808 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   114 0000080A 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   115 0000080C 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   116 0000080E 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   117 00000810 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   118 00000812 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   119 00000814 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   120 00000816 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   121 00000818 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   122 0000081A 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   123 0000081C A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   124 0000081E B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   125 00000820 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   126 00000822 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   127 00000824 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   128 00000826 F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   129 00000828 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   130 0000082A 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   131                              <1> errorMsgTbl:
   132 0000082C 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   132 00000835 63746563742024      <1>
   133 0000083C 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   133 00000845 6E69742024          <1>
   134 0000084A 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   134 00000853 2024                <1>
   135 00000855 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   135 0000085E 6F6D6D616E642024    <1>
   136 00000866 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   137 0000086C 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   137 00000875 73742024            <1>
   138 00000879 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   139 0000087F 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   139 00000888 656469612024        <1>
   140 0000088E 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   140 00000897 7420466F756E642024  <1>
   141 000008A0 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   141 000008A9 7065722024          <1>
   142 000008AE 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   142 000008B7 6C742024            <1>
   143 000008BB 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   143 000008C4 742024              <1>
   144 000008C7 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   144 000008D0 61696C7572652024    <1>
   145 000008D8 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   145 000008E1 696F6C6174696F6E20- <1>
   145 000008EA 24                  <1>
   146 000008EB 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   146 000008F4 6174696F6E2024      <1>
   147 000008FB 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   147 00000904 73657274206469736B- <1>
   147 0000090D 20                  <1>
   148 0000090E 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   148 00000917 2020                <1>
   149 00000919 0D0A24              <1>         db CR,LF,"$"
   150                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   151 0000091C 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   151 00000925 696C61626C652024    <1>
   152 0000092D 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   152 00000936 756666657220657272- <1>
   152 0000093F 6F722024            <1>
   153                              <1> 
   154                              <1> ;Anything above this is a generic network error.
   155 00000943 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   155 0000094C 6574776F726B204572- <1>
   155 00000955 726F722024          <1>
   156                              <1> 
   157                              <1> ;Rest of the Int 24h error messages go here
   158 0000095A 64726976652024      <1> drvMsg      db "drive $"
   159 00000961 6572726F7220726561- <1> readMsg     db "error reading $"
   159 0000096A 64696E672024        <1>
   160 00000970 6572726F7220777269- <1> writeMsg    db "error writing $"
   160 00000979 74696E672024        <1>
   161 0000097F 41626F727424        <1> abortMsg    db "Abort$" 
   162 00000985 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   163 0000098C 526574727924        <1> retryMsg    db "Retry$"
   164 00000992 4661696C24          <1> failMsg     db "Fail$"
   165 00000997 2C2024              <1> betweenMsg  db ", $"
   166 0000099A 3F2024              <1> endMsg      db "? $"
   167 0000099D 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    20                                  %include "./src/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1> ;Now resize the allocation
     4 000009A1 488D1D(50060000)    <1>     lea rbx, endOfAlloc
     5 000009A8 4C29C3              <1>     sub rbx, r8 ;Get # of bytes for COMMAND.COM and stack
     6 000009AB 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
     7 000009B1 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000009B4 B8004A0000          <1>     mov eax, 4A00h ;Realloc
     9 000009B9 CD21                <1>     int 21h
    10 000009BB 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    11 000009BD 7432                <1>     jz commandMain
    12 000009BF E8120A0000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    13                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    14 000009C4 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
    15 000009CB 0F8584000000        <1>     jnz commandMain.goSingle 
    16                              <1>     ;Only enter here if we are autoexec :)
    17 000009D1 C605(BA010000)0F    <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    18 000009D8 488D35FEFDFFFF      <1>     lea rsi, autoSpec
    19 000009DF 488D3D(BB010000)    <1>     lea rdi, inBuffer + 2
    20 000009E6 E8BE350000          <1>     call strcpy
    21 000009EB C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    22 000009EF EB5B                <1>     jmp short commandMain.batProceed
    23                              <1> commandMain:
    24 000009F1 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset internal stack pointer pos
    25 000009F8 E8D9090000          <1>     call getSetMainState
    26                              <1> .inputMain:         ;Only reset once per line!
    27 000009FD F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    28 00000A04 0F85BC280000        <1>     jnz exit
    29 00000A0A E87D330000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    30 00000A0F B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    31 00000A14 CD21                <1>     int 21h
    32 00000A16 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    33 00000A1B BA01000000          <1>     mov edx, 1      ;Start new print job
    34 00000A20 CD21                <1>     int 21h
    35                              <1> .inputGetAgain:
    36 00000A22 E8F2350000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    37                              <1> .inputGetCmdlineAgain:
    38 00000A27 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    39 00000A2E 0F857A0C0000        <1>     jnz batNextLine
    40 00000A34 E8E1320000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00000A39 488D15(B9010000)    <1>     lea rdx, inBuffer
    42 00000A40 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    43 00000A45 CD21                <1>     int 21h
    44                              <1> .batProceedCrlf:
    45 00000A47 E849330000          <1>     call printCRLF      ;Note we have accepted input
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47                              <1> ;First check we had something typed in of length greater than 0
    48 00000A4C 803D(BA010000)00    <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    49 00000A53 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    50                              <1> .goSingle:
    51                              <1> ;Copy over the input text
    52 00000A55 488D35(B9010000)    <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    53 00000A5C 488D3D(3B020000)    <1>     lea rdi, cpyBuffer
    54 00000A63 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    55 00000A68 F3A4                <1>     rep movsb
    56 00000A6A E875000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    57                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    58 00000A6F 488D35(BF020000)    <1>     lea rsi, cmdBuffer + 2
    59 00000A76 E86C350000          <1>     call skipDelimiters
    60 00000A7B 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    61 00000A7E 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    62 00000A80 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    63 00000A83 0F8402040000        <1>     je hardSynErr
    64                              <1> .pipeLoop:
    65 00000A89 4C8B0570F5FFFF      <1>     mov r8, qword [pPSP]  ;Point back to home segment
    66 00000A90 E8A9000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    67                              <1>     ;ZF here indicates if we are at the end of the command or nots
    68 00000A95 E889070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    69 00000A9A E8F8000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    70 00000A9F E848380000          <1>     call setDTA             ;Set the DTA back to us before we proceed!
    71 00000AA4 E866020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 00000AA9 E87A050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 00000AAE F6058BF5FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 00000AB5 0F8442FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 00000ABB E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 00000AC0 488D3D(BF020000)    <1>     lea rdi, cmdBuffer + 2
    79 00000AC7 4889F1              <1>     mov rcx, rsi
    80 00000ACA 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 00000ACD 280D(BE020000)      <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 00000AD3 8A0D(BE020000)      <1>     mov cl, byte [cmdBuffer + 1]
    83 00000AD9 FFC1                <1>     inc ecx     ;One more for the terminating char
    84 00000ADB F3A4                <1>     rep movsb   ;Move the chars over    
    85 00000ADD E826350000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000AE2 EBA5                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 00000AE4 488D35(3D020000)    <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 00000AEB 31C9                <1>     xor ecx, ecx
    94 00000AED 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 00000AF0 AC                  <1>     lodsb
    97 00000AF1 3C22                <1>     cmp al, '"'
    98 00000AF3 7507                <1>     jne .notQuoteToCount
    99 00000AF5 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 00000AF7 E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 00000AFC 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 00000AFE 75F0                <1>     jne .countQuotes
   104 00000B00 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 00000B03 488D3D(BF020000)    <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 00000B0A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 00000B0B 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 00000B0D 750E                <1>     jne .notQuote
   110 00000B0F FECD                <1>     dec ch          ;We have a quote, now decrement
   111 00000B11 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 00000B13 AA                  <1>     stosb   ;Store char and inc rdi
   115 00000B14 FEC1                <1>     inc cl
   116 00000B16 AC                  <1>     lodsb   ;Get next char
   117 00000B17 3C22                <1>     cmp al, '"'
   118 00000B19 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00000B1B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00000B1D E8A0060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00000B22 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 00000B24 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 00000B26 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 00000B28 0F845D030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00000B2E AA                  <1>     stosb       ;Store char and advance rdi
   130 00000B2F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00000B31 7404                <1>     je .exit
   132 00000B33 FEC1                <1>     inc cl      ;Increment char count
   133 00000B35 EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 00000B37 880D(BE020000)      <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00000B3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00000B3E 488D35(BF020000)    <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 00000B45 31C9                <1>     xor ecx, ecx
   145 00000B47 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00000B4A AC                  <1>     lodsb
   148 00000B4B 3C22                <1>     cmp al, '"'
   149 00000B4D 7507                <1>     jne .notQuoteToCount
   150 00000B4F FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00000B51 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 00000B56 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 00000B58 75F0                <1>     jne .countQuotes
   155 00000B5A 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00000B5D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 00000B64 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 00000B65 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 00000B67 750E                <1>     jne .notQuote
   161 00000B69 FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00000B6B 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00000B6D AA                  <1>     stosb   ;Store char and inc rdi
   166 00000B6E FEC1                <1>     inc cl
   167 00000B70 AC                  <1>     lodsb   ;Get next char
   168 00000B71 3C22                <1>     cmp al, '"'
   169 00000B73 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 00000B75 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 00000B77 3C7C                <1>     cmp al, "|"
   173 00000B79 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00000B7B B00D                <1>     mov al, CR          ;Store the pipe char
   175 00000B7D 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00000B80 AA                  <1>     stosb       ;Store char and advance rdi
   178 00000B81 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 00000B83 7404                <1>     je .exit
   180 00000B85 FEC1                <1>     inc cl      ;Increment char count
   181 00000B87 EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 00000B89 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 00000B8C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 00000B93 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 00000B96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 00000B97 C605(8E030000)00    <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 00000B9E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 00000BA5 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 00000BA8 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 00000BAC 8A0559F4FFFF        <1>     mov al, byte [switchChar]
   197 00000BB2 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 00000BB4 7506                <1>     jne .noSwitchFnd
   199 00000BB6 F61595F4FFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 00000BBC E826340000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 00000BC1 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000BC4 74(96)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00000BC6 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 00000BC9 488D3D(5E010000)    <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 00000BD0 B801290000          <1>     mov eax, 2901h
   208 00000BD5 CD21                <1>     int 21h
   209 00000BD7 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 00000BD9 0F8423010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 00000BDF 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 00000BE3 7505                <1>     jne .noTrailingDots
   215 00000BE5 48FFCE              <1>     dec rsi
   216 00000BE8 EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 00000BEA 8A051AF4FFFF        <1>     mov al, byte [pathSep]  
   219 00000BF0 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 00000BF2 7525                <1>     jne .notPs
   221 00000BF4 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 00000BF7 AC                  <1>     lodsb   ;Get this char
   223 00000BF8 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 00000BFB 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 00000BFD 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 00000BFF 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 00000C01 7413                <1>     je .delimfnd
   228 00000C03 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 00000C05 740F                <1>     je .delimfnd
   230 00000C07 3C2E                <1>     cmp al, byte "."
   231 00000C09 740B                <1>     je .delimfnd
   232 00000C0B 3C22                <1>     cmp al, byte '"'
   233 00000C0D 7407                <1>     je .delimfnd
   234 00000C0F E8E1330000          <1>     call isALdelimiter  ;Is this a delim char?
   235 00000C14 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 00000C16 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 00000C19 4889F1              <1>     mov rcx, rsi
   242 00000C1C 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00000C1F 0F84D5000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   244 00000C25 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   245 00000C28 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
   246 00000C2F F3A4                <1>     rep movsb
   247 00000C31 30C0                <1>     xor al, al
   248 00000C33 AA                  <1>     stosb   ;Store a terminating null
   249 00000C34 4887DE              <1>     xchg rbx, rsi
   250                              <1> ;Now we build FCBs for the arguments!
   251 00000C37 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   252 00000C3E E8AE000000          <1>     call .skipAndCheckCR
   253 00000C43 745B                <1>     je .setupCmdVars
   254 00000C45 C605FFF3FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   255 00000C4C 4889F0              <1>     mov rax, rsi
   256 00000C4F 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   257 00000C52 8805F4F3FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   258 00000C58 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   259 00000C5C B801290000          <1>     mov eax, 2901h
   260 00000C61 CD21                <1>     int 21h
   261 00000C63 8805E4F3FFFF        <1>     mov byte [arg1FCBret], al
   262                              <1> .skipArg:
   263 00000C69 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   264 00000C6A 3C0D                <1>     cmp al, CR
   265 00000C6C 7432                <1>     je .setupCmdVars
   266 00000C6E E882330000          <1>     call isALdelimiter
   267 00000C73 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   268 00000C75 E877000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   269 00000C7A 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   270 00000C7C C605CBF3FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   271 00000C83 4889F0              <1>     mov rax, rsi            
   272 00000C86 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   273 00000C89 8805C0F3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   274 00000C8F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 00000C93 B801290000          <1>     mov eax, 2901h
   276 00000C98 CD21                <1>     int 21h
   277 00000C9A 8805B0F3FFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .setupCmdVars:
   279                              <1> ;Before returning, we copy the command name to cmdName 
   280 00000CA0 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
   281 00000CA7 E8F2330000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   282 00000CAC E811330000          <1>     call strlen ;Get the length of the null terminated final path componant
   283 00000CB1 807F013A            <1>     cmp byte [rdi + 1], ":"
   284 00000CB5 7515                <1>     jne .noDrivePath
   285 00000CB7 8A054DF3FFFF        <1>     mov al, byte [pathSep]
   286 00000CBD 384702              <1>     cmp byte [rdi + 2], al
   287 00000CC0 740A                <1>     je .noDrivePath
   288                              <1>     ;Here if the filename is an FCB name A:12345678.9AB<NUL> (15 chars)
   289 00000CC2 81F90F000000        <1>     cmp ecx, 15
   290 00000CC8 7730                <1>     ja .exitBad
   291 00000CCA EB08                <1>     jmp short .proceedCp
   292                              <1> .noDrivePath:
   293                              <1> ;Normal paths come here
   294 00000CCC 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   295 00000CD2 7726                <1>     ja .exitBad     ;Return error
   296                              <1> .proceedCp:
   297 00000CD4 4889FE              <1>     mov rsi, rdi
   298 00000CD7 488D3D(8E030000)    <1>     lea rdi, cmdName
   299 00000CDE FFC9                <1>     dec ecx ;Minus the terminating null
   300 00000CE0 880F                <1>     mov byte [rdi], cl ;Store the length here
   301 00000CE2 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   302                              <1> .cpCmdName:
   303 00000CE5 AC                  <1>     lodsb
   304 00000CE6 E8E1320000          <1>     call ucChar ;Uppercase the char
   305 00000CEB AA                  <1>     stosb
   306 00000CEC FFC9                <1>     dec ecx
   307 00000CEE 75F5                <1>     jnz .cpCmdName
   308                              <1>     return
    13                              <2> %%_ret:
    14 00000CF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .skipAndCheckCR:
   310                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   311 00000CF1 E8F1320000          <1>     call skipDelimiters ;Go to the next char in the input line
   312 00000CF6 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   313                              <1>     return
    13                              <2> %%_ret:
    14 00000CF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .exitBad:
   315 00000CFA C605(8E030000)FF    <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   316                              <1>     return
    13                              <2> %%_ret:
    14 00000D01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> .exitBadDrv:
   318 00000D02 C605(8E030000)FE    <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   319 00000D09 E8920C0000          <1>     call badDriveError
   320                              <1>     return
    13                              <2> %%_ret:
    14 00000D0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> doCommandLine:
   323                              <1>     ;The following check accounts for the end of a piped command
   324 00000D0F 803D(8E030000)00    <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   325 00000D16 0F846F010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   326 00000D1C 803D(8E030000)FF    <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   327 00000D23 0F84B00C0000        <1>     je badCmdError
   328 00000D29 803D(8E030000)FE    <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D30 74(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 00000D32 488D35(3F030000)    <1>     lea rsi, cmdPathSpec
   331 00000D39 0FB71D(3F030000)    <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   332 00000D40 80FF3A              <1>     cmp bh, ":"
   333 00000D43 7520                <1>     jne .noDriveSpecified
   334 00000D45 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   335 00000D47 E880320000          <1>     call ucChar     ;Uppercase al
   336 00000D4C 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   337                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   338 00000D4E 803D(8E030000)02    <1>     cmp byte [cmdName], 2
   339 00000D55 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   340 00000D57 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   341 00000D59 E83A320000          <1>     call setDrive
   342                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D5E 74(0E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   343 00000D60 E93B0C0000          <1>     jmp badDriveError
   344                              <1> .noDriveSpecified:
   345                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   346 00000D65 488D1D(BD020000)    <1>     lea rbx, cmdBuffer       ;Take your buffer
   347 00000D6C 488D35(8E030000)    <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   348 00000D73 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   349 00000D78 BAFFFF0000          <1>     mov edx, 0FFFFh
   350 00000D7D B5FF                <1>     mov ch, -1
   351 00000D7F CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   352 00000D81 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   353 00000D86 BAFFFF0000          <1>     mov edx, 0FFFFh
   354 00000D8B 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   355 00000D8D CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   356                              <1>             ;        al = 0  if the command should be executed as usual
   357 00000D8F 84C0                <1>     test al, al
   358 00000D91 7444                <1>     jz .executeInternal
   359                              <1>     ;Here we execute externally and return to the prompt
   360                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   361 00000D93 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   362 00000D9A 488D35(8E030000)    <1>     lea rsi, cmdName        
   363 00000DA1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   364 00000DA6 BAFFFF0000          <1>     mov edx, 0FFFFh
   365 00000DAB B5FF                <1>     mov ch, -1
   366 00000DAD CD2F                <1>     int 2Fh
   367 00000DAF 803D(8E030000)00    <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   368                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000DB6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000DB8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   369                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   370                              <1>     ; is an external command that is in the CD or in the PATH.
   371                              <1>     ;Should not be used for this purpose but it is here...
   372 00000DB9 E8CE050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   373 00000DBE 488D35(8E030000)    <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   374 00000DC5 AC                  <1>     lodsb                   ;Get the name length
   375 00000DC6 0FB6C8              <1>     movzx ecx, al
   376 00000DC9 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   377 00000DD0 F3A4                <1>     rep movsb   
   378 00000DD2 31C0                <1>     xor eax, eax
   379 00000DD4 AA                  <1>     stosb   ;Store null terminator
   380 00000DD5 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   381                              <1> .executeInternal:
   382 00000DD7 E8B0050000          <1>     call pullCommandline    ;Now pull the tail down
   383 00000DDC 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
   384 00000DE3 E8DA310000          <1>     call strlen ;Get the length of the input command
   385 00000DE8 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   386 00000DEA 380D(8E030000)      <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   387 00000DF0 0F85EF240000        <1>     jne launchChild     ;If not, a path was specified, exit!
   388                              <1> .executeInternal2:
   389                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   390 00000DF6 488D1D55F2FFFF      <1>     lea rbx, functionTable
   391                              <1> .nextEntry:
   392 00000DFD 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   393 00000E00 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   394 00000E03 0F84DC240000        <1>     je launchChild      ;If so, check externally now
   395 00000E09 380D(8E030000)      <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   396 00000E0F 7534                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   397                              <1>     ;Here they have the same length so lets see if the name is the same
   398 00000E11 56                  <1>     push rsi
   399                              <1>     ;ecx has the length to compare
   400 00000E12 51                  <1>     push rcx
   401 00000E13 488D7301            <1>     lea rsi, qword [rbx + 1]
   402 00000E17 488D3D(8F030000)    <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   403 00000E1E F3A6                <1>     rep cmpsb   ;Check the strings are equal
   404 00000E20 59                  <1>     pop rcx
   405 00000E21 5E                  <1>     pop rsi
   406 00000E22 7521                <1>     jne .gotoNextEntry
   407                              <1>     ;Here it was found both strings are equal.
   408 00000E24 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   409 00000E29 480FB71F            <1>     movzx rbx, word [rdi]
   410 00000E2D 488D3DCCF1FFFF      <1>     lea rdi, startLbl
   411 00000E34 4801FB              <1>     add rbx, rdi
   412 00000E37 FFD3                <1>     call rbx        ;Call the internal function!
   413                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   414                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   415                              <1> ;No need for the below because the retcode is 
   416                              <1> ; zeroed when we it from DOS.
   417                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   418                              <1> ;    mov byte [returnCode], 0 
   419                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   420                              <1>     ;jmp short appRet    ;Now once we are done, goto appRet!
   421                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   422                              <1> 
   423                              <1> ;This new exit preserves the retcode, and now allows for internal
   424                              <1> ; commands to implement retcodes which we don't use for now.
   425                              <1> ;I doubt we need to reset the stackptr as to get here, the stack has to
   426                              <1> ; have been balanced which means when we pop, we go back to okRet anyway...
   427 00000E39 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
   428 00000E40 E964FCFFFF          <1>     jmp commandMain.okRet   
   429                              <1> .gotoNextEntry:
   430 00000E45 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   431 00000E4C 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   432 00000E4F EBAC                <1>     jmp short .nextEntry
   433                              <1> 
   434                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   435                              <1> ;Can depend on RSP here because DOS stack bug fixed.
   436 00000E51 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr anyway.
   437                              <1> ;Start by resetting our PSP vectors (and IVT copies) in the event 
   438                              <1> ; they got mangled.
   439 00000E58 E8D6340000          <1>     call resetIDTentries
   440 00000E5D E8A5340000          <1>     call resetNation    ;Reset switchchar and nation if exernal cmd fired!
   441 00000E62 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, sets to 0 for internal commands
   442 00000E67 CD21                <1>     int 21h
   443 00000E69 668905(00000000)    <1>     mov word [returnCode], ax
   444 00000E70 84E4                <1>     test ah, ah     ;Regular exit
   445 00000E72 0F8431FCFFFF        <1>     jz commandMain.okRet
   446 00000E78 80FC03              <1>     cmp ah, 3       ;TSR exit
   447 00000E7B 0F8428FCFFFF        <1>     je commandMain.okRet
   448                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   449                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   450                              <1>     ; as we always close the COMMAND.COM instance at this point.
   451 00000E81 E83F000000          <1>     call cleanupRedirs
   452 00000E86 E966FBFFFF          <1>     jmp commandMain
   453                              <1> 
   454                              <1> hardSynErr:
   455                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   456 00000E8B E8EC0A0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   457 00000E90 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   458                              <1> redirFailure:
   459 00000E95 488D15EBF8FFFF      <1>     lea rdx, redirErrMsg
   460 00000E9C B913000000          <1>     mov ecx, redirErrMsgL
   461 00000EA1 EB0C                <1>     jmp short redirPipeFailureCommon
   462                              <1> pipeFailure:
   463 00000EA3 488D15C6F8FFFF      <1>     lea rdx, pipeErrMsg
   464 00000EAA B917000000          <1>     mov ecx, pipeErrMsgL
   465                              <1> redirPipeFailureCommon:
   466                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   467                              <1> ;This routine tries to close whatever handles are not -1 and delete
   468                              <1> ; pipe files if the pipe count is not 0.
   469                              <1> ;It resets all variables and jumps to reset the stack!
   470 00000EAF B800400000          <1>     mov eax, 4000h  ;Write handle
   471 00000EB4 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   472 00000EB9 CD21                <1>     int 21h
   473                              <1> .noPrint:
   474 00000EBB E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   475 00000EC0 E92CFBFFFF          <1>     jmp commandMain ;Retake input from the command line
   476                              <1> 
   477                              <1> cleanupRedirs:
   478                              <1> ;Cleans all active redirections, returning to the saved state.
   479                              <1> ;Deletes any pipe files, leaves any redir out files.
   480                              <1> ;Resets the internal vars
   481 00000EC5 0FB7057BF1FFFF      <1>     movzx eax, word [redirSTDIN]
   482 00000ECC 0FB7156EF1FFFF      <1>     movzx edx, word [pipeSTDIN]
   483 00000ED3 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   484 00000ED5 E8CC000000          <1>     call .closeAndReplace
   485 00000EDA 0FB70568F1FFFF      <1>     movzx eax, word [redirSTDOUT]
   486 00000EE1 0FB7155BF1FFFF      <1>     movzx edx, word [pipeSTDOUT]
   487 00000EE8 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   488 00000EEA E8B7000000          <1>     call .closeAndReplace
   489 00000EEF 66C7054DF1FFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   490 00000EF8 0FB71D48F1FFFF      <1>     movzx ebx, word [redirSTDIN]
   491 00000EFF E892000000          <1>     call .closeHandle
   492                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   493 00000F04 66C7053AF1FFFFFFFF  <1>     mov word [redirSTDIN], -1
   494 00000F0D 0FB71D35F1FFFF      <1>     movzx ebx, word [redirSTDOUT]
   495 00000F14 E87D000000          <1>     call .closeHandle
   496 00000F19 66C70527F1FFFFFFFF  <1>     mov word [redirSTDOUT], -1
   497 00000F22 0FB71D18F1FFFF      <1>     movzx ebx, word [pipeSTDIN]
   498 00000F29 E868000000          <1>     call .closeHandle
   499 00000F2E 66C7050AF1FFFFFFFF  <1>     mov word [pipeSTDIN], -1
   500 00000F37 0FB71D05F1FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   501 00000F3E E853000000          <1>     call .closeHandle
   502 00000F43 66C705F7F0FFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   503 00000F4C C605EDF0FFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   504 00000F53 488D15(3A040000)    <1>     lea rdx, qword [pipe1Filespec]
   505 00000F5A 803A00              <1>     cmp byte [rdx], 0
   506 00000F5D 7407                <1>     jz .checkOld
   507 00000F5F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   508 00000F64 CD21                <1>     int 21h
   509                              <1> .checkOld:
   510 00000F66 488D15(89040000)    <1>     lea rdx, qword [pipe2Filespec]
   511 00000F6D 803A00              <1>     cmp byte [rdx],0
   512 00000F70 7407                <1>     jz .pipeNamesComplete
   513 00000F72 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   514 00000F77 CD21                <1>     int 21h
   515                              <1> .pipeNamesComplete:
   516 00000F79 31C0                <1>     xor eax, eax
   517                              <1>     ;Invalidate the pointers and the paths too
   518 00000F7B 488905(D8040000)    <1>     mov qword [newPipe], rax
   519 00000F82 488905(E0040000)    <1>     mov qword [oldPipe], rax
   520 00000F89 8905(3A040000)      <1>     mov dword [pipe1Filespec], eax
   521 00000F8F 8905(89040000)      <1>     mov dword [pipe2Filespec], eax
   522                              <1>     return
    13                              <2> %%_ret:
    14 00000F95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> .closeHandle:
   525 00000F96 81FBFFFFFFFF        <1>     cmp ebx, -1
   526                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000F9C 74(95)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   527 00000F9E B8003E0000          <1>     mov eax, 3E00h
   528 00000FA3 CD21                <1>     int 21h
   529                              <1>     return
    13                              <2> %%_ret:
    14 00000FA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> .closeAndReplace:
   531                              <1> ;Input: ax = one possible handle, dx = second possible handle
   532                              <1> ;       bx = handle to close and copy ax/dx into
   533                              <1> ;Output: Handle intervened on. bx preserved
   534 00000FA6 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   535 00000FA9 09D0                <1>     or eax, edx     ;Form packed
   536 00000FAB 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   537                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FB0 74(A5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   538 00000FB2 E8DFFFFFFF          <1>     call .closeHandle
   539 00000FB7 663DFFFF            <1>     cmp ax, -1      
   540 00000FBB 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   541 00000FBF 53                  <1>     push rbx
   542 00000FC0 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   543 00000FC3 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   544 00000FC8 CD21                <1>     int 21h
   545 00000FCA 5B                  <1>     pop rbx
   546                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FCB 73(A5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   547                              <1>     ;Else we now try to force default device to open!
   548 00000FCD E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   549 00000FD2 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   550 00000FD7 488D15F6F7FFFF      <1>     lea rdx, devName
   551 00000FDE CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00000FE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> cleanRedirOut:
   555                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   556                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   557                              <1> ; particular cases like launching bat files which needs special handling in 
   558                              <1> ; that all redirs need to be completely removed.
   559 00000FE1 66813D5FF0FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   560                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FEA 74(E0)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 00000FEC 0FB71D56F0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   562 00000FF3 B901000000          <1>     mov ecx, 1      ;STDOUT
   563 00000FF8 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   564 00000FFD CD21                <1>     int 21h
   565 00000FFF 0FB71D43F0FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   566 00001006 B8003E0000          <1>     mov eax, 3E00h  
   567 0000100B CD21                <1>     int 21h
   568 0000100D 66C70533F0FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   569 00001016 488D15(EB030000)    <1>     lea rdx, rdrOutFilespec
   570 0000101D B800410000          <1>     mov eax, 4100h      ;Del stdout file
   571 00001022 CD21                <1>     int 21h
   572 00001024 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   573                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   574                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   575                              <1>     return
    13                              <2> %%_ret:
    14 00001027 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> advanceRedir:
   578                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   579                              <1> ;Close stdin redir then stdout redir. 
   580 00001028 F60516F0FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   581 0000102F 0F8585000000        <1>     jnz .redirIn
   582 00001035 F60504F0FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   583 0000103C 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   584 00001042 0FBF05F8EFFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   585 00001049 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   586 0000104E 0F84EB000000        <1>     je .pipeOut              
   587                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   588 00001054 0FB71DE6EFFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   589 0000105B 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   590 0000105D B800460000          <1>     mov eax, 4600h
   591 00001062 CD21                <1>     int 21h
   592 00001064 0F8239FEFFFF        <1>     jc pipeFailure
   593 0000106A B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   594 0000106F CD21                <1>     int 21h
   595 00001071 0F822CFEFFFF        <1>     jc pipeFailure
   596 00001077 488B15(E0040000)    <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   597 0000107E B800410000          <1>     mov eax, 4100h  ;Delete the file!
   598 00001083 CD21                <1>     int 21h
   599 00001085 0F8218FEFFFF        <1>     jc pipeFailure
   600 0000108B C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   601 0000108E 66C705AAEFFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   602                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   603                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   604                              <1>     ;Else exit!
   605 00001097 0FBF05A5EFFFFF      <1>     movsx eax, word [pipeSTDOUT]
   606 0000109E 3DFFFFFFFF          <1>     cmp eax, -1
   607 000010A3 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   608 000010A9 C60590EFFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   609 000010B0 F6058FEFFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   610 000010B7 753D                <1>     jnz .redirOut               ;Go for it if so!
   611                              <1>     return
    13                              <2> %%_ret:
    14 000010B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   612                              <1> .redirIn:
   613                              <1> ;Here we clean redirIn
   614 000010BA 0FB71D86EFFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   615 000010C1 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   616 000010C3 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   617 000010C8 CD21                <1>     int 21h
   618 000010CA 0F82C5FDFFFF        <1>     jc redirFailure
   619 000010D0 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   620 000010D5 CD21                <1>     int 21h
   621 000010D7 0F82B8FDFFFF        <1>     jc redirFailure
   622 000010DD 66C70561EFFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   623 000010E6 C60558EFFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   624 000010ED F6054CEFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   625 000010F4 7549                <1>     jnz .pipeOut
   626                              <1> .redirOut:
   627 000010F6 F60549EFFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   628                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000010FD 74(B9)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   629                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   630 000010FF F6053AEFFFFFFF      <1>     test byte [pipeFlag], -1
   631 00001106 7537                <1>     jnz short .pipeOut
   632 00001108 0FB71D3AEFFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   633 0000110F B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   634 00001114 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   635 00001119 CD21                <1>     int 21h
   636 0000111B 0F8274FDFFFF        <1>     jc redirFailure
   637 00001121 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   638 00001126 CD21                <1>     int 21h
   639 00001128 0F8267FDFFFF        <1>     jc redirFailure
   640 0000112E 66C70512EFFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   641 00001137 C60508EFFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   642                              <1>     return
    13                              <2> %%_ret:
    14 0000113E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .pipeOut:
   644                              <1> ;Duplicate STDIN to save across pipe
   645 0000113F 0FBF05FDEEFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   646 00001146 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   647                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000114B 74(3E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   648 0000114D B800450000          <1>     mov eax, 4500h
   649 00001152 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   650 00001154 CD21                <1>     int 21h
   651 00001156 0F8247FDFFFF        <1>     jc pipeFailure
   652 0000115C 668905DEEEFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   653                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   654 00001163 B800460000          <1>     mov eax, 4600h
   655 00001168 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   656 0000116A FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   657 0000116C CD21                <1>     int 21h
   658 0000116E 0F822FFDFFFF        <1>     jc pipeFailure
   659                              <1> ;Now return the original stdout to stdout
   660 00001174 89D9                <1>     mov ecx, ebx
   661 00001176 0FB71DC6EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   662 0000117D B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   663 00001182 CD21                <1>     int 21h
   664 00001184 0F8219FDFFFF        <1>     jc pipeFailure
   665                              <1> ;Now close the DUP'ed STDOUT
   666 0000118A B8003E0000          <1>     mov eax, 3E00h
   667 0000118F CD21                <1>     int 21h
   668 00001191 0F820CFDFFFF        <1>     jc pipeFailure
   669                              <1> ;Finally unwind STDIN to the beginning of the file
   670 00001197 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   671 0000119C 31DB                <1>     xor ebx, ebx    ;STDIN handle
   672 0000119E 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   673 000011A0 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   674 000011A2 CD21                <1>     int 21h
   675 000011A4 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   676 000011AA 488B15(D8040000)    <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   677 000011B1 488915(E0040000)    <1>     mov qword [oldPipe], rdx
   678 000011B8 66C70582EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   679                              <1>     return
    13                              <2> %%_ret:
    14 000011C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> 
   682                              <1> peelRedir:
   683                              <1> ;Checks and sets up redir as appropriate
   684                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   685                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   686                              <1> ;Output: ZF=NZ => No redir
   687                              <1> ;        ZF=ZY => Redir
   688                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   689                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   690 000011C2 51                  <1>     push rcx
   691 000011C3 57                  <1>     push rdi
   692 000011C4 3C3C                <1>     cmp al, "<"
   693 000011C6 740C                <1>     je .inputRedir
   694 000011C8 3C3E                <1>     cmp al, ">"
   695 000011CA 7427                <1>     je .outputRedir
   696 000011CC 3C7C                <1>     cmp al, "|"
   697 000011CE 7441                <1>     je .pipeSetup
   698 000011D0 F8                  <1>     clc
   699                              <1> .redirExit:
   700 000011D1 5F                  <1>     pop rdi
   701 000011D2 59                  <1>     pop rcx
   702                              <1>     return
    13                              <2> %%_ret:
    14 000011D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   703                              <1> .inputRedir:
   704 000011D4 C6056AEEFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   705 000011DB 488D3D(9C030000)    <1>     lea rdi, rdrInFilespec
   706                              <1> .redirCommon:
   707 000011E2 E8002E0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   708 000011E7 E82C2F0000          <1>     call cpDelimPathToBufz
   709 000011EC 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   710 000011EF 30C0                <1>     xor al, al  ;Clear the ZF flag
   711 000011F1 EBDE                <1>     jmp short .redirExit
   712                              <1> .outputRedir:
   713 000011F3 C6054CEEFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   714 000011FA 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   715 000011FD 7509                <1>     jne .notDouble
   716 000011FF FE0541EEFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   717 00001205 48FFC6              <1>     inc rsi ;Go past it too
   718                              <1> .notDouble:
   719 00001208 488D3D(EB030000)    <1>     lea rdi, rdrOutFilespec
   720 0000120F EBD1                <1>     jmp short .redirCommon
   721                              <1> .pipeSetup:
   722 00001211 56                  <1>     push rsi    ;Save rsi pointing to char past |
   723 00001212 E8D02D0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   724 00001217 803E7C              <1>     cmp byte [rsi], "|" 
   725 0000121A 7403                <1>     je .badFnd
   726 0000121C 803E0D              <1>     cmp byte [rsi], CR
   727                              <1> .badFnd:
   728 0000121F 5E                  <1>     pop rsi
   729 00001220 F9                  <1>     stc
   730 00001221 EBAE                <1>     jmp short .redirExit
   731                              <1> 
   732                              <1> setupRedirandPipes:
   733                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   734                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   735 00001223 0F8484000000        <1>     jz .redirIn
   736 00001229 488D15(3A040000)    <1>     lea rdx, pipe1Filespec
   737 00001230 803A00              <1>     cmp byte [rdx], 0
   738 00001233 7410                <1>     jz .pathFound
   739 00001235 488D15(89040000)    <1>     lea rdx, pipe2Filespec
   740 0000123C 803A00              <1>     cmp byte [rdx], 0
   741 0000123F 0F855EFCFFFF        <1>     jnz pipeFailure
   742                              <1> .pathFound:
   743 00001245 488915(D8040000)    <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   744 0000124C B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   745 00001251 BB01000000          <1>     mov ebx, 1
   746 00001256 CD21                <1>     int 21h
   747 00001258 0F8245FCFFFF        <1>     jc pipeFailure
   748 0000125E 668905DEEDFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   749 00001265 E83A2D0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   750 0000126A 0441                <1>     add al, "A"
   751 0000126C BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   752 00001271 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   753 00001273 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   754 00001275 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   755 00001277 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   756 0000127C CD21                <1>     int 21h
   757 0000127E 0F821FFCFFFF        <1>     jc pipeFailure
   758                              <1>     ;AX has the handle for this file now, this will become STDOUT
   759                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   760 00001284 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   761 00001287 B901000000          <1>     mov ecx, 1
   762 0000128C B800460000          <1>     mov eax, 4600h
   763 00001291 CD21                <1>     int 21h
   764 00001293 0F820AFCFFFF        <1>     jc pipeFailure
   765 00001299 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   766 0000129E CD21                <1>     int 21h
   767 000012A0 0F82FDFBFFFF        <1>     jc pipeFailure
   768 000012A6 C60593EDFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   769                              <1> .redirIn:
   770                              <1> ;Now check if any other redir needs to be setup
   771                              <1> ;Checks and sets up redir as appropriate.
   772                              <1>     ;Setup the redir here for STDIN
   773 000012AD F60591EDFFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   774 000012B4 7449                <1>     jz .redirOut
   775 000012B6 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   776 000012B8 B800450000          <1>     mov eax, 4500h
   777 000012BD CD21                <1>     int 21h
   778 000012BF 0F82D0FBFFFF        <1>     jc redirFailure
   779 000012C5 6689057BEDFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   780 000012CC 488D15(9C030000)    <1>     lea rdx, rdrInFilespec
   781 000012D3 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   782 000012D8 CD21                <1>     int 21h
   783 000012DA 0F82B5FBFFFF        <1>     jc redirFailure
   784 000012E0 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   785 000012E2 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   786 000012E5 B800460000          <1>     mov eax, 4600h
   787 000012EA CD21                <1>     int 21h
   788 000012EC 0F82A3FBFFFF        <1>     jc redirFailure
   789 000012F2 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   790 000012F7 CD21                <1>     int 21h
   791 000012F9 0F8296FBFFFF        <1>     jc redirFailure
   792                              <1> .redirOut:
   793 000012FF F60540EDFFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   794                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001306 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001308 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   795 00001309 803D33EDFFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   796                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001310 75(08)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   797                              <1>     ;Else setup the redir here for STDOUT
   798 00001312 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   799 00001317 B800450000          <1>     mov eax, 4500h
   800 0000131C CD21                <1>     int 21h
   801 0000131E 0F8271FBFFFF        <1>     jc redirFailure
   802 00001324 6689051EEDFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   803 0000132B 488D15(EB030000)    <1>     lea rdx, rdrOutFilespec
   804 00001332 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   805 00001337 CD21                <1>     int 21h
   806 00001339 730F                <1>     jnc .fileExists
   807 0000133B B8003C0000          <1>     mov eax, 3C00h
   808 00001340 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   809 00001342 CD21                <1>     int 21h
   810 00001344 0F824BFBFFFF        <1>     jc redirFailure
   811                              <1> .fileExists:
   812 0000134A B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   813 0000134F 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   814 00001352 B800460000          <1>     mov eax, 4600h  ;DUP2
   815 00001357 CD21                <1>     int 21h
   816 00001359 0F8236FBFFFF        <1>     jc redirFailure
   817 0000135F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   818 00001364 CD21                <1>     int 21h
   819 00001366 0F8229FBFFFF        <1>     jc redirFailure
   820 0000136C 803DD3ECFFFF01      <1>     cmp byte [redirOut], 1
   821                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001373 74(08)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   822                              <1>     ;Here we move the file pointer to the end of the file
   823 00001375 31D2                <1>     xor edx, edx    ;Low order 32 bits
   824 00001377 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   825 00001379 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   826 0000137E B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   827 00001383 CD21                <1>     int 21h
   828 00001385 0F820AFBFFFF        <1>     jc redirFailure
   829                              <1>     return
    13                              <2> %%_ret:
    14 0000138B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   830                              <1> 
   831                              <1> 
   832                              <1> pullCommandline:
   833                              <1> ;This command pulls the command tail down, removing the whole launch command
   834 0000138C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   835                              <1> ;Skip leading separators
   836                              <1> .pctSkipLeading:
   837 00001393 AC                  <1>     lodsb   ;Get first char
   838 00001394 E85C2C0000          <1>     call isALdelimiter
   839 00001399 74F8                <1>     je .pctSkipLeading
   840 0000139B 48FFCE              <1>     dec rsi
   841                              <1>     ;rsi points to the start of the command
   842 0000139E 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
   843 000013A5 E8182C0000          <1>     call strlen ;Get the length of the command
   844 000013AA FFC9                <1>     dec ecx ;Minus the terminating null
   845 000013AC 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   846 000013AF 280D97ECFFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   847 000013B5 280D94ECFFFF        <1>     sub byte [arg2Off], cl
   848 000013BB 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   849 000013BD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   850                              <1> .pctPullChars:
   851 000013C4 AC                  <1>     lodsb
   852 000013C5 AA                  <1>     stosb
   853 000013C6 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   854 000013C8 7404                <1>     je .pctExit
   855 000013CA FFC1                <1>     inc ecx     ;Increment count
   856 000013CC EBF6                <1>     jmp short .pctPullChars 
   857                              <1> .pctExit:
   858 000013CE 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   859                              <1>     return
    13                              <2> %%_ret:
    14 000013D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   860                              <1> 
   861                              <1> getSetMainState:
   862                              <1> ;Resets the buffers lengths, sets stringops and gets the pPSP in r8
   863 000013D6 FC                  <1>     cld ;Ensure stringops are done the right way
   864 000013D7 C605(B9010000)80    <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   865 000013DE C605(3B020000)80    <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   866 000013E5 C605(BD020000)80    <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   867 000013EC 4C8B050DECFFFF      <1>     mov r8, qword [pPSP]              ;Reset the pPSP
   868                              <1>     return
    13                              <2> %%_ret:
    14 000013F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   869                              <1> 
   870                              <1> 
   871                              <1> int2Eh: 
   872                              <1> ;Very sucky interface for passing command lines to be processed by the 
   873                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   874                              <1> ; more reliable with a critical section flag. Currently, if we are already
   875                              <1> ; processing an Int 2Eh request, this will not process the command.
   876                              <1> ;
   877                              <1> ;Need to add further safeguards for when pipes are also setup and
   878                              <1> ; batchmode is on!
   879                              <1> ;
   880                              <1> ;Input: rsi points to the count byte of a command line.
   881                              <1> ;       Max number of chars is 128 (127 + count byte)
   882                              <1> ;Output:
   883                              <1> ;       CF=NC: Command was processed. ax = Retcode
   884                              <1> ;       CF=CY: Command was not processed.
   885 000013F4 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   886 000013F9 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   887 00001400 0F85A5000000        <1>     jnz int2EcheckReentry 
   888                              <1> .multiJoin:
   889 00001406 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the bits! Gets the lock!
   890 0000140D 488925(0A000000)    <1>     mov qword [int2Ersp], rsp       ;Save the far stack pointer 
   891 00001414 B8002F0000          <1>     mov eax, 2F00h  ;Get the current DTA in rbx
   892 00001419 CD21                <1>     int 21h
   893 0000141B 48891D(12000000)    <1>     mov qword [int2Edta], rbx       ;We set the dta in the main loop later
   894 00001422 488D25(40060000)    <1>     lea rsp, stackTop               ;Set to use the internal stack
   895 00001429 B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rdx
   896 0000142E CD21                <1>     int 21h
   897 00001430 48891D(02000000)    <1>     mov qword [int2Epsp], rbx
   898 00001437 52                  <1>     push rdx    ;Save on the stack
   899 00001438 488B1DC1EBFFFF      <1>     mov rbx, qword [pPSP] ;Get the psp for this COMMAND.COM
   900 0000143F B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   901 00001444 CD21                <1>     int 21h
   902 00001446 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   903 00001449 4989D9              <1>     mov r9, rbx
   904 0000144C 488D3D(BA010000)    <1>     lea rdi, inBuffer + 1
   905 00001453 B910000000          <1>     mov ecx, 10h    ;80h/8
   906 00001458 FC                  <1>     cld
   907 00001459 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   908 0000145C E875FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   909 00001461 803D(BA010000)00    <1>     cmp byte [inBuffer + 1], 0
   910 00001468 E89A2E0000          <1>     call resetNation        ;Now ensure internationalisation is up to date
   911 0000146D 0F85E2F5FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   912                              <1> int2ERet:
   913 00001473 E8A12B0000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   914 00001478 488B25(0A000000)    <1>     mov rsp, qword [int2Ersp]
   915 0000147F 488B1D(02000000)    <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   916 00001486 B800500000          <1>     mov eax, 5000h  ;Set Current PSP
   917 0000148B CD21                <1>     int 21h
   918 0000148D 488B15(12000000)    <1>     mov rdx, qword [int2Edta]
   919 00001494 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA back to where it was upon return
   920 00001499 CD21                <1>     int 21h
   921 0000149B 0FB705(00000000)    <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   922 000014A2 8025(1A000000)FB    <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   923 000014A9 48CF                <1>     iretq
   924                              <1> 
   925                              <1> int2EcheckReentry:
   926                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   927                              <1> ; else, return with CF=CY.
   928 000014AB B800520000          <1>     mov eax, 5200h  ;Get sysvars
   929 000014B0 CD21                <1>     int 21h
   930 000014B2 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   931 000014B6 7512                <1>     jnz short .multifnd
   932 000014B8 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   933 000014BD CD2F                <1>     int 2Fh
   934 000014BF 84C0                <1>     test al, al ;This must still be zero, else something installed
   935 000014C1 7507                <1>     jnz .multifnd
   936 000014C3 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   937 000014C8 48CF                <1>     iretq   
   938                              <1> .multifnd:
   939                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   940 000014CA F390                <1>     pause
   941 000014CC F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   942 000014D3 75F5                <1>     jnz .multifnd
   943 000014D5 E92CFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    21                                  %include "./src/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Start by creating the FQPath name and building a command line
     5                              <1> ; where the arguments are CR terminated.
     6                              <1> ;Then work out how much memory to allocate and allocate it.
     7                              <1> 
     8                              <1> ;Start by saving the command line
     9 000014DA 488D35(B9010000)    <1>     lea rsi, inBuffer
    10 000014E1 488D3D(73000000)    <1>     lea rdi, batCmdline
    11 000014E8 B982000000          <1>     mov ecx, cmdBufferL
    12 000014ED F3A4                <1>     rep movsb
    13                              <1> ;Now check if we are executing AUTOEXEC.BAT. If so, 
    14                              <1> ; we suppress F3 recalling of the command
    15 000014EF 488D35EAF2FFFF      <1>     lea rsi, autoSpec + 3   ;Just check the name
    16 000014F6 488D3D(5F010000)    <1>     lea rdi, cmdFcb + fcb.filename
    17 000014FD B908000000          <1>     mov ecx, 8  ;Only check filename as the extension here must be BAT
    18 00001502 F3A6                <1>     repe cmpsb
    19 00001504 7507                <1>     jne .notAutoexec
    20 00001506 C605(74000000)00    <1>     mov byte [batCmdline + 1], 0    ;Set the count byte to 0
    21                              <1> .notAutoexec:
    22 0000150D 488D35(3F030000)    <1>     lea rsi, cmdPathSpec    ;Path here is null terminated.
    23 00001514 488D3D(23000000)    <1>     lea rdi, batFile
    24 0000151B 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    25 0000151E 80FC3A              <1>     cmp ah, ":"
    26 00001521 7472                <1>     je .bbdrvGiven
    27 00001523 3A05E1EAFFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    28 00001529 745D                <1>     je .bbCDrvAbs
    29                              <1> ;Current drive relative
    30 0000152B E8742A0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    31 00001530 0441                <1>     add al, "A"
    32 00001532 B43A                <1>     mov ah, ":"
    33 00001534 66AB                <1>     stosw   ;Store these two chars, adv rdi
    34                              <1> .bbRelPath:
    35 00001536 8A05CEEAFFFF        <1>     mov al, byte [pathSep]  
    36 0000153C AA                  <1>     stosb   ;Store the pathsep
    37 0000153D 8A05(23000000)      <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    38 00001543 E8842A0000          <1>     call ucChar             ;UC it
    39 00001548 8805(23000000)      <1>     mov byte [batFile], al  ;and overwrite it :)
    40 0000154E 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    41 00001550 88C2                <1>     mov dl, al
    42 00001552 56                  <1>     push rsi        ;Save remaining char source
    43 00001553 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    44 00001556 B800470000          <1>     mov eax, 4700h  ;Get Current Directory (null terminated)
    45 0000155B CD21                <1>     int 21h
    46 0000155D 5E                  <1>     pop rsi
    47 0000155E 7316                <1>     jnc .bbRelPathOk
    48 00001560 488D1508ECFFFF      <1>     lea rdx, badBat
    49 00001567 E830280000          <1>     call printString
    50 0000156C E836030000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    51 00001571 E97BF4FFFF          <1>     jmp commandMain     ;And start again :)   
    52                              <1> .bbRelPathOk:
    53                              <1> ;Now move rdi to the terminating null   
    54 00001576 31C0                <1>     xor eax, eax
    55 00001578 31C9                <1>     xor ecx, ecx
    56 0000157A F2AE                <1>     repne scasb ;Find the terminating null
    57 0000157C 48FFCF              <1>     dec rdi ;Now point to the terminating null
    58 0000157F 8A0585EAFFFF        <1>     mov al, byte [pathSep]
    59 00001585 AA                  <1>     stosb   ;Store this pathsep over the original null
    60                              <1>     ;Now we are ready to copy the command line passed to us by the user
    61                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    62 00001586 EB1B                <1>     jmp short .bbCpName
    63                              <1> .bbCDrvAbs:
    64                              <1> ;Current drive absolute. Get current drive into buffer
    65 00001588 E8172A0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    66 0000158D 0441                <1>     add al, "A"
    67 0000158F B43A                <1>     mov ah, ":"
    68 00001591 66AB                <1>     stosw   ;Store these two chars
    69                              <1>     ;Now we are ready to copy the command line passed to us by the user
    70                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    71 00001593 EB0E                <1>     jmp short .bbCpName
    72                              <1> .bbdrvGiven:
    73                              <1> ;Drive given X:
    74 00001595 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
    75 00001597 AC                  <1>     lodsb
    76 00001598 48FFCE              <1>     dec rsi ;Get the char and point back to it
    77 0000159B 3A0569EAFFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
    78 000015A1 7593                <1>     jne .bbRelPath
    79                              <1> .bbCpName:
    80 000015A3 E8012A0000          <1>     call strcpy ;Copy the remaining portion
    81 000015A8 488D35(23000000)    <1>     lea rsi, batFile
    82 000015AF E8242A0000          <1>     call normalisePath  ;Normalise the path :)
    83                              <1> ;Now batFile has the FQpathname, construct the new CR delimited command line.
    84 000015B4 488D35(BF020000)    <1>     lea rsi, cmdBuffer + 2
    85 000015BB 488D3D(BE020000)    <1>     lea rdi, cmdBuffer + 1  ;Overwrite count byte as we will null terminate
    86                              <1> .copyCmdline:
    87 000015C2 E8202A0000          <1>     call skipDelimiters ;Find start of argument
    88                              <1> .cclp:
    89 000015C7 AC                  <1>     lodsb
    90 000015C8 E8282A0000          <1>     call isALdelimiter  ;If we hit delimiter, replace with CR, goto next arg
    91 000015CD 7505                <1>     jne .ccstore
    92 000015CF B00D                <1>     mov al, CR  
    93 000015D1 AA                  <1>     stosb
    94 000015D2 EBEE                <1>     jmp short .copyCmdline
    95                              <1> .ccstore:
    96 000015D4 AA                  <1>     stosb   
    97 000015D5 3C0D                <1>     cmp al, CR  ;Did we just store a CR
    98 000015D7 75EE                <1>     jne .cclp   ;Keep getting chars if so
    99 000015D9 31C0                <1>     xor eax, eax    ;Else store a terminating null now
   100 000015DB AA                  <1>     stosb
   101 000015DC 488D3D(BE020000)    <1>     lea rdi, cmdBuffer + 1    ;Get back the ptr to the head of the new string
   102 000015E3 E8DA290000          <1>     call strlen     ;Get the new string length in ecx
   103 000015E8 89CB                <1>     mov ebx, ecx    ;Save len in eax (include null)
   104 000015EA 488D3D(23000000)    <1>     lea rdi, batFile
   105 000015F1 E8CC290000          <1>     call strlen     ;Get the filename len in ecx
   106 000015F6 01CB                <1>     add ebx, ecx
   107 000015F8 81C32F000000        <1>     add ebx, batBlockHdr_size   ;Get the size to allocate for block
   108 000015FE 89D9                <1>     mov ecx, ebx    ;Save the size in bytes in ecx for the cleaning below
   109 00001600 81C30F000000        <1>     add ebx, 0Fh    ;Round up to nearest paragraph!
   110 00001606 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   111 00001609 B800480000          <1>     mov eax, 4800h
   112 0000160E CD21                <1>     int 21h
   113 00001610 730A                <1>     jnc .bbAlloced
   114 00001612 E85C030000          <1>     call badNoMemError  ;Print not enough mem error
   115 00001617 E99FF8FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
   116                              <1> .bbAlloced:
   117                              <1> ;Now init the batblock with all the data we need
   118 0000161C 488905(1B000000)    <1>     mov qword [bbPtr], rax  ;Save the ptr here!
   119 00001623 4889C3              <1>     mov rbx, rax
   120 00001626 4889DF              <1>     mov rdi, rbx
   121 00001629 31C0                <1>     xor eax, eax
   122 0000162B F3AA                <1>     rep stosb   ;Clean the block with nulls
   123 0000162D 4889DF              <1>     mov rdi, rbx            ;Point back to the head of the block
   124 00001630 8A05D7E9FFFF        <1>     mov al, byte [echoFlg]
   125 00001636 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
   126 00001639 B8FFFFFFFF          <1>     mov eax, -1
   127 0000163E B905000000          <1>     mov ecx, 5
   128 00001643 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
   129 00001647 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine    
   130 00001649 488D35(23000000)    <1>     lea rsi, batFile
   131 00001650 E854290000          <1>     call strcpy ;Copy the string and the terminating null
   132 00001655 488D35(BE020000)    <1>     lea rsi, cmdBuffer + 1
   133 0000165C 57                  <1>     push rdi    ;Save the ptr to where we will store the cmdline
   134 0000165D E847290000          <1>     call strcpy ;Copy the command tail and the terminating null
   135 00001662 5F                  <1>     pop rdi     ;Get the pointer to the copied cmdline in rdi
   136 00001663 31F6                <1>     xor esi, esi    ;Use esi as argument counter
   137 00001665 31C9                <1>     xor ecx, ecx
   138 00001667 FFC9                <1>     dec ecx ;Init ecx to large number for repne below (stupid hack will work)
   139                              <1> .bbFndLp:
   140 00001669 803F00              <1>     cmp byte [rdi], 0   ;Is this the end of the cmdline?
   141 0000166C 741B                <1>     je .bbArgsDone      
   142                              <1> ;Else add the entry to the table! rbx -> batBlock
   143 0000166E 4889F8              <1>     mov rax, rdi
   144 00001671 4829D8              <1>     sub rax, rbx    ;Now get distance from head of batBlock to this arg in ax
   145 00001674 668944731B          <1>     mov word [rbx + 2*rsi + batBlockHdr.wArgs], ax    ;and store it!
   146 00001679 FFC6                <1>     inc esi
   147 0000167B 81FE0A000000        <1>     cmp esi, 10         ;Did we just process %9?
   148 00001681 7406                <1>     je .bbArgsDone
   149 00001683 B00D                <1>     mov al, CR  ;Scan for the next CR and move rdi past it!
   150 00001685 F2AE                <1>     repne scasb
   151 00001687 EBE0                <1>     jmp short .bbFndLp   ;If not end of cmdline, see if next char delim
   152                              <1> .bbArgsDone:
   153                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   154                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   155                              <1> ; for SHARING trouble...
   156 00001689 E853F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   157 0000168E E832F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   158 00001693 800D(1A000000)08    <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   159 0000169A E952F3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   160                              <1> 
   161                              <1> batFinish:
   162                              <1> ;This is the procedure called after we've processed the last batch line
   163 0000169F E876260000          <1>     call printPrompt    ;Add this to emulate what DOS does
   164 000016A4 E8FE010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   165 000016A9 E943F3FFFF          <1>     jmp commandMain     ;And start again :)
   166                              <1> batNextLine:
   167                              <1> ;Read the next line from the file and sets if we are done with copying
   168 000016AE F605(1A000000)10    <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   169 000016B5 75E8                <1>     jnz batFinish
   170 000016B7 E836020000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   171 000016BC 488B35(1B000000)    <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   172 000016C3 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   173 000016C6 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   174 000016C9 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   175 000016CE CD21                <1>     int 21h
   176 000016D0 C605(3C020000)00    <1>     mov byte [batInBuffer + 1], 0  ;Reset the buffer count
   177 000016D7 488D15(3D020000)    <1>     lea rdx, batInBuffer + 2   ;Start read pos
   178 000016DE 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   179                              <1> .readlp:
   180 000016E0 E841020000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   181 000016E5 742F                <1>     jz .eofAddCR
   182 000016E7 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   183 000016EA 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   184 000016ED 743D                <1>     je .eolCR
   185 000016EF 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   186 000016F2 7447                <1>     je .eolLF
   187 000016F4 FE05(3C020000)      <1>     inc byte [batInBuffer + 1] ;Inc our char count
   188 000016FA 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   189 000016FD 803D(3C020000)80    <1>     cmp byte [batInBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   190 00001704 75DA                <1>     jne .readlp             ;Get next char if not
   191 00001706 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   192 00001709 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   193 0000170C FE0D(3C020000)      <1>     dec byte [batInBuffer + 1] ;Reduce the valid char count by one
   194 00001712 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   195 00001714 EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   196                              <1> .eofAddCR:
   197 00001716 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   198                              <1> .eof:
   199 00001719 803D(3C020000)00    <1>     cmp byte [batInBuffer + 1], 0      ;If we read any chars, do the line!
   200 00001720 751C                <1>     jne .eol
   201 00001722 E8F7010000          <1>     call batClose                   ;Else close the hdl!
   202 00001727 E973FFFFFF          <1>     jmp batFinish
   203                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   204 0000172C E8F5010000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   205 00001731 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   206 00001733 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   207 00001736 7503                <1>     jne .eolLF          ;Reread this char if not LF
   208 00001738 48FFC7              <1>     inc rdi             ;Else add to the count
   209                              <1> .eolLF:
   210 0000173B C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   211                              <1> .eol:
   212                              <1> ;Close the file, update the batch block file pointer, then proceed.
   213                              <1> ;rsi -> Batch block.
   214 0000173E E8DB010000          <1>     call batClose
   215                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   216 00001743 48017E13            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   217                              <1> ;Now we echo the prompt and command to the console unless the 
   218                              <1> ; first char is @, we hit a label or the echo flag is off.
   219 00001747 488D15(3D020000)    <1>     lea rdx, batInBuffer + 2
   220                              <1> ;Labels and @ chars are first non-delim char on line.
   221                              <1> ;Find the first non-delim char in the line and check it!!
   222 0000174E 4889D6              <1>     mov rsi, rdx
   223 00001751 E891280000          <1>     call skipDelimiters     
   224 00001756 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   225 00001759 0F844FFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   226 0000175F E85B000000          <1>     call batPreprocess      ;Else we preprocess now
   227                              <1> 
   228 00001764 488D15(BB010000)    <1>     lea rdx, batCpyBuffer + 2
   229 0000176B 803A40              <1>     cmp byte [rdx], batNoEchoChar   ;Line no echo check! (@)
   230 0000176E 742C                <1>     je .noEchoPull       
   231 00001770 F60596E8FFFFFF      <1>     test byte [echoFlg], -1         
   232 00001777 0F84CFF2FFFF        <1>     jz commandMain.batProceed
   233 0000177D 52                  <1>     push rdx
   234 0000177E E897250000          <1>     call printPrompt    ;Now output prompt
   235 00001783 5A                  <1>     pop rdx
   236 00001784 0FB60D(BA010000)    <1>     movzx ecx, byte [batCpyBuffer + 1]    ;Get the number of chars to print
   237 0000178B BB01000000          <1>     mov ebx, 1  ;STDOUT
   238 00001790 B800400000          <1>     mov eax, 4000h  ;Write woo!
   239 00001795 CD21                <1>     int 21h
   240 00001797 E9ABF2FFFF          <1>     jmp commandMain.batProceedCrlf
   241                              <1> .noEchoPull:
   242 0000179C FE0D(BA010000)      <1>     dec byte [batCpyBuffer + 1]     ;Eliminate the @ char
   243 000017A2 0F8406FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   244 000017A8 4889D7              <1>     mov rdi, rdx
   245 000017AB 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   246 000017AF 0FB60D(BA010000)    <1>     movzx ecx, byte [batCpyBuffer + 1]  ;Get the remaining count to copy
   247 000017B6 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   248 000017B8 F3A4                <1>     rep movsb 
   249 000017BA E98DF2FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   250                              <1> 
   251                              <1> batPreprocess:
   252                              <1> ;Copies the line from batCpyBuffer to batInBuffer for regular processing,
   253                              <1> ; expanding any environment variables as the expansion takes place.
   254                              <1> ;Line is guaranteed only CR terminated.
   255 000017BF 488D2D(B9010000)    <1>     lea rbp, batCpyBuffer   ;Save the ptr for the expandVar function
   256 000017C6 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   257 000017CA C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   258 000017CE 488D35(3D020000)    <1>     lea rsi, qword [batInBuffer + 2]
   259 000017D5 E80D280000          <1>     call skipDelimiters ;We strip leading delimiters
   260                              <1> .lp:
   261 000017DA AC                  <1>     lodsb   ;Get char and advance source ptr
   262 000017DB 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   263 000017DD 7507                <1>     jne .rawcp
   264 000017DF E815000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   265 000017E4 EB09                <1>     jmp short .check  
   266                              <1> .rawcp:
   267 000017E6 AA                  <1>     stosb   ;Store the char
   268 000017E7 3C0D                <1>     cmp al, CR
   269                              <1>     rete    ;Return immediately if we copied a CR. Dont add to count.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000017E9 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000017EB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   270 000017EC FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   271                              <1> .check:
   272 000017EF 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   273 000017F3 75E5                <1>     jne .lp
   274 000017F5 B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   275 000017F7 AA                  <1>     stosb   ;Store this char too
   276                              <1>     return
    13                              <2> %%_ret:
    14 000017F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   277                              <1> 
   278                              <1> 
   279                              <1> batExpandVar:
   280                              <1> ;Expand any environment variables. 
   281                              <1> ;%% is treated as an escape char for a %.
   282                              <1> ;
   283                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   284                              <1> ;       rdi -> Position to place the substitution string.
   285                              <1> ;       rbp -> Head of destination buffer for copy.
   286                              <1> ;Output:
   287                              <1> ;   Substitution string is placed in buffer if necessary.
   288                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   289                              <1> ;       rdi -> Space for the next char to copy.
   290 000017F9 0FB606              <1>     movzx eax, byte [rsi]  ;Is this a parameter like %[0-9]?
   291 000017FC 3C30                <1>     cmp al, "0"
   292 000017FE 7204                <1>     jb .notRep  ;If definitely not a number, keep going
   293 00001800 3C39                <1>     cmp al, "9"
   294 00001802 7271                <1>     jb .repParm ;If a number, its a replacable parameter :)
   295                              <1> .notRep:
   296 00001804 3C0D                <1>     cmp al, CR          
   297                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001806 74(F8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   298 00001808 3C25                <1>     cmp al, "%" ;If immediately followed by %, then return it
   299                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000180A 74(F8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   300                              <1> ;Now do the env var search. Start by scanning for the terminating
   301                              <1> ; % of the var name. If we strike a delimiter char first, 
   302                              <1> ; we stop the expansion for the envvar.
   303 0000180C 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   304 0000180F 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   305                              <1> .envVarLp:
   306 00001812 AC                  <1>     lodsb
   307 00001813 E8DD270000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   308                              <1> .lpExit:
   309 00001818 480F44F7            <1>     cmove rsi, rdi  ;If a delim found, return rsi to the char past the % sign.
   310 0000181C 480F44FB            <1>     cmove rdi, rbx  ;And return rdi to where it was beforehand :)
   311                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001820 74(F8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   312 00001822 3C0D                <1>     cmp al, CR      ;If we are at the end of the line too, exit!
   313 00001824 74F2                <1>     je .lpExit
   314 00001826 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   315 00001828 75E8                <1>     jne .envVarLp
   316                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   317 0000182A C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   318 0000182E 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   319                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   320 0000182F E89F2B0000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   321 00001834 480F42FB            <1>     cmovc rdi, rbx  ;Reset rdi here if no envvar found and exit!
   322 00001838 7239                <1>     jc .exit
   323 0000183A 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   324 0000183D B03D                <1>     mov al, "="
   325 0000183F B9FFFFFFFF          <1>     mov ecx, -1
   326 00001844 F2AE                <1>     repne scasb     ;Move rdi to the char past the equals sign
   327 00001846 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   328                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001847 72(F8)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   329                              <1> 
   330 00001849 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   331 0000184A 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   332 0000184D E870270000          <1>     call strlen     ;Get the string length of the envvar value in ecx
   333                              <1> .copyVar:
   334 00001852 FFC9                <1>     dec ecx         ;Drop 0 from count
   335 00001854 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   336 00001857 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   337 0000185B 51                  <1>     push rcx
   338 0000185C 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   339 0000185E 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   340 00001864 59                  <1>     pop rcx
   341 00001865 7207                <1>     jb .noTrunc
   342 00001867 B97F000000          <1>     mov ecx, inLen - 1
   343 0000186C 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   344                              <1> .noTrunc:
   345 0000186E 004D01              <1>     add byte [rbp + 1], cl
   346 00001871 F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   347                              <1> .exit:
   348 00001873 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001874 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .repParm:
   351 00001875 2D30000000          <1>     sub eax, "0"
   352 0000187A 48FFC6              <1>     inc rsi ;Move the ptr past the replacable parameter value
   353 0000187D 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   354 00001884 0FB754431B          <1>     movzx edx, word [rbx + batBlockHdr.wArgs + 2*rax]   ;Get off from cmdLine
   355 00001889 81FAFFFF0000        <1>     cmp edx, 0FFFFh   ;If there is no var, copy nothing and exit!
   356                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000188F 74(74)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   357 00001891 56                  <1>     push rsi        ;Save ptr to source of next chars 
   358 00001892 488D3413            <1>     lea rsi, qword [rbx + rdx]  ;Save ptr to head of string to copy in rsi
   359 00001896 31C9                <1>     xor ecx, ecx
   360 00001898 FFC9                <1>     dec ecx
   361 0000189A B00D                <1>     mov al, CR      ;Now scan for the terminating CR
   362 0000189C 4887F7              <1>     xchg rsi, rdi   ;Save dest ptr in rsi and point to string to cpy in rdi
   363 0000189F 57                  <1>     push rdi        ;Save the head of the string for copy
   364 000018A0 F2AE                <1>     repne scasb     ;Get the length of the string with terminating CR
   365 000018A2 5F                  <1>     pop rdi         ;Point back to head of string
   366 000018A3 F7D1                <1>     not ecx         ;Convert to one less than the length (drops the CR)
   367 000018A5 EBAB                <1>     jmp short .copyVar
   368                              <1> 
   369                              <1> batCleanup:
   370                              <1> ;This function is called after the last line has been processed by the 
   371                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   372                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   373 000018A7 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   374 000018AE 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   375 000018B1 880556E7FFFF        <1>     mov byte [echoFlg], al
   376                              <1> ;-----------------------------------------------------------------------
   377                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   378                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   379                              <1> ; But since this is the routine called by the error handler too, it 
   380                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   381                              <1> ; just have a null pointer.
   382                              <1> ;-----------------------------------------------------------------------
   383                              <1> ;Finally free this batch header...
   384 000018B7 4150                <1>     push r8
   385 000018B9 4989D8              <1>     mov r8, rbx
   386 000018BC B800490000          <1>     mov eax, 4900h
   387 000018C1 CD21                <1>     int 21h
   388 000018C3 4158                <1>     pop r8
   389 000018C5 E8FBF5FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   390 000018CA 48C705(1B000000)00- <1>     mov qword [bbPtr], 0    
   390 000018D2 000000              <1>
   391 000018D5 8025(1A000000)E7    <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   392                              <1> ;... and copy the batch command line back to its resting place.
   393 000018DC 488D35(73000000)    <1>     lea rsi, batCmdline
   394 000018E3 488D3D(B9010000)    <1>     lea rdi, inBuffer
   395 000018EA B982000000          <1>     mov ecx, cmdBufferL
   396 000018EF F3A4                <1>     rep movsb
   397                              <1>     return
    13                              <2> %%_ret:
    14 000018F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> batOpen:
   400                              <1> ;Opens the batch file and returns the handle in ebx.
   401                              <1> ;Prints the "replace disk" string if file not found.
   402                              <1> ;
   403                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   404                              <1> ;Output: ebx = File handle for filespec in batFile.
   405                              <1> ;
   406                              <1> ;Funky behaviour worth noting:
   407                              <1> ; If a failure occurs in open, we keep prompting the user to 
   408                              <1> ; replace the disk. The only way out if the error is really bad is 
   409                              <1> ; via ^C which does all the cleanup we need. 
   410                              <1> ; Thus this never returns fail.
   411 000018F2 50                  <1>     push rax
   412 000018F3 52                  <1>     push rdx
   413 000018F4 488D15(23000000)    <1>     lea rdx, batFile
   414                              <1> .batOpen:
   415 000018FB B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   416 00001900 CD21                <1>     int 21h
   417 00001902 7315                <1>     jnc .batOpened
   418 00001904 488D157BE8FFFF      <1>     lea rdx, needBat
   419 0000190B E88C240000          <1>     call printString
   420 00001910 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   421 00001915 CD21                <1>     int 21h
   422 00001917 EBE2                <1>     jmp short .batOpen
   423                              <1> .batOpened:
   424 00001919 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   425 0000191B 5A                  <1>     pop rdx
   426 0000191C 58                  <1>     pop rax
   427                              <1>     return
    13                              <2> %%_ret:
    14 0000191D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> batClose:
   430                              <1> ;Close the handle in ebx.
   431 0000191E B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   432 00001923 CD21                <1>     int 21h         
   433                              <1>     return
    13                              <2> %%_ret:
    14 00001925 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> batReadChar:
   436                              <1> ;Reads a char. 
   437                              <1> ;Input: ebx = Handle to read char from.
   438                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   439                              <1> ;Output: 
   440                              <1> ;   CF=NC:
   441                              <1> ;       ZF=NZ: eax = 1. One char read.
   442                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   443                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   444                              <1> ;Clobbers: None.
   445 00001926 51                  <1>     push rcx
   446 00001927 B901000000          <1>     mov ecx, 1
   447 0000192C B8003F0000          <1>     mov eax, 3F00h
   448 00001931 CD21                <1>     int 21h 
   449 00001933 59                  <1>     pop rcx 
   450 00001934 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   451 00001936 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   452 00001938 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   453 0000193A 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   454                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000193D 75(25)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   455                              <1> .eof:
   456 0000193F 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   457 00001940 800D(1A000000)10    <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   458 00001947 9D                  <1>     popfq
   459                              <1>     return    
    13                              <2> %%_ret:
    14 00001948 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> .bad:
   461 00001949 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   462 0000194B F9                  <1>     stc             ;Never check it but ensure reset of CF.
   463 0000194C EBF1                <1>     jmp short .eof  ;And set the status bit
    22                                  %include "./src/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 0000194E 488D15D0E8FFFF      <1>     lea rdx, noSpace
    10 00001955 488D0DECEBFFFF      <1>     lea rcx, pipeErr
    11 0000195C F605DDE6FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001963 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001965 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001969 E866000000          <1>     call badCmn     ;Print the string
    15 0000196E E948F5FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001973 488D159AECFFFF      <1>     lea rdx, noMemMsg
    18 0000197A EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 0000197C 488D159EEBFFFF      <1>     lea rdx, syntaxErr
    21 00001983 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001985 488D15B3E8FFFF      <1>     lea rdx, noEnvSpace
    24 0000198C EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 0000198E 488D1538EBFFFF      <1>     lea rdx, accDenMsg
    27 00001995 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001997 488D15ADE9FFFF      <1>     lea rdx, badParm
    30 0000199E EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 000019A0 488D1567E9FFFF      <1>     lea rdx, badDrv
    33 000019A7 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 000019A9 488D152AECFFFF      <1>     lea rdx, badArgs
    36 000019B0 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 000019B2 488D1505ECFFFF      <1>     lea rdx, badSpec
    39 000019B9 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 000019BB 488D153BE8FFFF      <1>     lea rdx, dupName
    43 000019C2 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 000019C4 488D1549E8FFFF      <1>     lea rdx, fnfMsg
    46 000019CB EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 000019CD 488D1578EAFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 000019D4 E9C3230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 000019D9 488D1502E8FFFF      <1>     lea rdx, badCmd
    53 000019E0 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 000019E2 C605(EC050000)00    <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 000019E9 C605(ED050000)00    <1>     mov byte [dirLineCtr], 0
    58 000019F0 C705(EE050000)0000- <1>     mov dword [dirFileCtr], 0
    58 000019F8 0000                <1>
    59 000019FA C605(F3050000)00    <1>     mov byte [dirSrchDir], 0
    60 00001A01 66C705(E8040000)00- <1>     mov word [searchSpec], 0
    60 00001A09 00                  <1>
    61 00001A0A 488D3D(75060000)    <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001A11 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001A14 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001A1D 3F                  <1>
    64 00001A1E 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001A22 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001A29 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001A30 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001A33 E8AF250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001A38 AC                  <1>     lodsb   ;Get this char
    72 00001A39 3C0D                <1>     cmp al, CR
    73 00001A3B 744D                <1>     je .scanDone
    74 00001A3D 3A05C8E5FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001A43 7524                <1>     jne .notSwitch
    76 00001A45 AC                  <1>     lodsb   ;Get the next char
    77 00001A46 E881250000          <1>     call ucChar
    78 00001A4B 3C57                <1>     cmp al, "W"
    79 00001A4D 7509                <1>     jne .notWide
    80 00001A4F 800D(EC050000)01    <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001A56 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001A58 3C50                <1>     cmp al, "P"
    84 00001A5A 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001A60 800D(EC050000)02    <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001A67 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001A69 F605(EC050000)04    <1>     test byte [dirFlags], dirFileType
    89 00001A70 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001A76 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001A79 E8F5260000          <1>     call copyArgumentToSearchSpec   
    93 00001A7E 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001A81 800D(EC050000)04    <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001A88 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001A8A F605(EC050000)04    <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001A91 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001A93 488D35(E8040000)    <1>     lea rsi, searchSpec
   101 00001A9A 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001A9E 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001AA0 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001AA5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001AA9 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001AAE CD21                <1>     int 21h
   108 00001AB0 3CFF                <1>     cmp al, -1
   109 00001AB2 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001AB8 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001ABD 84C0                <1>     test al, al
   113 00001ABF 740A                <1>     jz .currentDrv
   114 00001AC1 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001AC3 8805(F2050000)      <1>     mov byte [dirDrv], al
   116 00001AC9 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001ACB E8D4240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001AD0 8805(F2050000)      <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001AD6 488D35(E8040000)    <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001ADD 488D3D(F3050000)    <1>     lea rdi, dirSrchDir
   124 00001AE4 0FB605(F2050000)    <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001AEB 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001AED 0441                <1>     add al, "A" ;Turn into a letter
   127 00001AEF B43A                <1>     mov ah, ":"
   128 00001AF1 66AB                <1>     stosw   ;Store X: into the search path
   129 00001AF3 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001AF8 CD2F                <1>     int 2fh
   131 00001AFA 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001AFC 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001B02 8A0502E5FFFF        <1>     mov al, byte [pathSep]
   135 00001B08 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001B0A 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001B0C AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001B0D FEC2                <1>     inc dl  ;Increment by 1
   139 00001B0F 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001B12 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001B17 CD21                <1>     int 21h
   142 00001B19 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001B1C 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001B1E 3807                <1>     cmp byte [rdi], al
   149 00001B20 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001B22 48FFC7              <1>     inc rdi
   151 00001B25 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001B27 8A05DDE4FFFF        <1>     mov al, byte [pathSep]
   154 00001B2D 3806                <1>     cmp byte [rsi], al
   155 00001B2F 7412                <1>     je .copyPathLoop
   156 00001B31 B43A                <1>     mov ah, ":"
   157 00001B33 86C4                <1>     xchg al, ah
   158 00001B35 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001B39 7408                <1>     je .copyPathLoop
   160 00001B3B 88E0                <1>     mov al, ah
   161 00001B3D 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001B40 7401                <1>     je .copyPathLoop
   163 00001B42 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001B43 AC                  <1>     lodsb
   166 00001B44 3A05C0E4FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001B4A 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001B4C 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001B4E 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001B50 48FFC6              <1>     inc rsi
   172 00001B53 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001B55 3C2E                <1>     cmp al, "."
   175 00001B57 7407                <1>     je .dots
   176                              <1> .store:
   177 00001B59 AA                  <1>     stosb
   178 00001B5A 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001B5C 7472                <1>     jz .exitPathCopy
   180 00001B5E EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001B60 8A25A4E4FFFF        <1>     mov ah, byte [pathSep]
   188 00001B66 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001B69 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001B6B 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001B6D 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001B70 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001B72 3A2592E4FFFF        <1>     cmp ah, byte [pathSep]
   195 00001B78 7406                <1>     je .skipThisPathsep
   196 00001B7A 84E4                <1>     test ah, ah
   197 00001B7C 74C5                <1>     jz .copyPathLoop
   198 00001B7E EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001B80 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001B83 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001B85 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001B88 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001B8A 3A257AE4FFFF        <1>     cmp ah, byte [pathSep]
   208 00001B90 7408                <1>     je .tdOk
   209 00001B92 84E4                <1>     test ah, ah
   210 00001B94 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001B9A 8A056AE4FFFF        <1>     mov al, byte byte [pathSep]
   213 00001BA0 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001BA4 0F84EDFDFFFF        <1>     je badParamError
   215 00001BAA 4881EF02000000      <1>     sub rdi, 2
   216 00001BB1 31C9                <1>     xor ecx, ecx
   217 00001BB3 FFC9                <1>     dec ecx
   218 00001BB5 FD                  <1>     std
   219 00001BB6 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001BB8 FC                  <1>     cld
   221 00001BB9 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001BC0 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001BC2 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001BC8 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001BCB E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001BD0 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001BD7 8A052DE4FFFF        <1>     mov al, byte [pathSep]
   230 00001BDD B43A                <1>     mov ah, ":"
   231 00001BDF 86C4                <1>     xchg al, ah
   232 00001BE1 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001BE5 7409                <1>     je .skipOverwrite
   234 00001BE7 88E0                <1>     mov al, ah
   235 00001BE9 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001BEB 7503                <1>     jne .skipOverwrite
   237 00001BED C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001BF0 488D35(F3050000)    <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001BF7 4889F7              <1>     mov rdi, rsi
   241 00001BFA B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001BFF CD2F                <1>     int 2fh
   243 00001C01 E87A250000          <1>     call scanForWildcards
   244 00001C06 742D                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001C08 4889F2              <1>     mov rdx, rsi
   246 00001C0B 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001C0F 7424                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001C11 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   250 00001C16 B8004E0000          <1>     mov eax, 4E00h ;Find first
   251 00001C1B CD21                <1>     int 21h
   252 00001C1D 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   253                              <1> ;Now we have searched for the file, is a directory?
   254 00001C1F F605(83010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   255 00001C26 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   256                              <1>     ;Here we are searching IN a directory. Default search pattern!
   257 00001C28 31C0                <1>     xor eax, eax
   258 00001C2A 31C9                <1>     xor ecx, ecx
   259 00001C2C FFC9                <1>     dec ecx
   260 00001C2E F2AE                <1>     repne scasb
   261 00001C30 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   262 00001C33 EB40                <1>     jmp short .wcDefaultSearch
   263                              <1> .wcSearchPattern:
   264                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   265                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   266 00001C35 31C0                <1>     xor eax, eax
   267 00001C37 31C9                <1>     xor ecx, ecx
   268 00001C39 FFC9                <1>     dec ecx
   269 00001C3B F2AE                <1>     repne scasb ;Scan forwards
   270                              <1>     ;Here rdi points past the null at the end
   271 00001C3D 8A05C7E3FFFF        <1>     mov al, byte [pathSep]
   272 00001C43 31C9                <1>     xor ecx, ecx
   273 00001C45 FFC9                <1>     dec ecx
   274 00001C47 FD                  <1>     std ;Search backwards
   275 00001C48 F2AE                <1>     repne scasb
   276 00001C4A FC                  <1>     cld ;Search forwards again
   277 00001C4B 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   278 00001C4E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   279 00001C52 7503                <1>     jne .wcsp1
   280 00001C54 48FFC7              <1>     inc rdi ;Go one char forwards
   281                              <1> .wcsp1:
   282                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   283 00001C57 57                  <1>     push rdi
   284 00001C58 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   285 00001C5A 7503                <1>     jne .wcsp2
   286 00001C5C 48FFC7              <1>     inc rdi
   287                              <1> .wcsp2:
   288 00001C5F 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   289 00001C62 488D3D(75060000)    <1>     lea rdi, dirSrchFCB
   290 00001C69 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   291 00001C6E CD21                <1>     int 21h
   292 00001C70 5F                  <1>     pop rdi
   293 00001C71 31C0                <1>     xor eax, eax
   294 00001C73 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   295                              <1> .wcDefaultSearch:
   296 00001C75 0FB605(F2050000)    <1>     movzx eax, byte [dirDrv] 
   297 00001C7C E893130000          <1>     call volume.dirEP
   298 00001C81 488D152CE8FFFF      <1>     lea rdx, dirMain    ;Print message intro
   299 00001C88 B409                <1>     mov ah, 09h
   300 00001C8A CD21                <1>     int 21h
   301 00001C8C C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   302 00001C8F 488D15(F3050000)    <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   303 00001C96 B409                <1>     mov ah, 09h
   304 00001C98 CD21                <1>     int 21h
   305 00001C9A C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   306 00001C9D 488D15C6E4FFFF      <1>     lea rdx, crlf2
   307 00001CA4 B409                <1>     mov ah, 09h
   308 00001CA6 CD21                <1>     int 21h
   309                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   310                              <1> ;rdi points to the terminating null
   311 00001CA8 8A055CE3FFFF        <1>     mov al, byte [pathSep]
   312 00001CAE 3847FF              <1>     cmp byte [rdi - 1], al
   313 00001CB1 7403                <1>     je .root
   314 00001CB3 48FFC7              <1>     inc rdi
   315                              <1> .root:
   316 00001CB6 48FFCF              <1>     dec rdi ;Point back to the pathsep
   317 00001CB9 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   318 00001CBA 488D35(76060000)    <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   319 00001CC1 E8FC230000          <1>     call FCBToAsciiz    ;Terminates for free
   320 00001CC6 E801000000          <1>     call .searchForFile
   321                              <1>     return
    13                              <2> %%_ret:
    14 00001CCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> .searchForFile:
   324 00001CCC B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   325 00001CD1 488D15(F3050000)    <1>     lea rdx, dirSrchDir
   326 00001CD8 B8004E0000          <1>     mov eax, 4E00h ;Find first
   327 00001CDD CD21                <1>     int 21h
   328 00001CDF 720B                <1>     jc .dirNoMoreFiles
   329                              <1> .findNext:
   330 00001CE1 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   331 00001CE6 B44F                <1>     mov ah, 4Fh
   332 00001CE8 CD21                <1>     int 21h
   333 00001CEA 73F5                <1>     jnc .findNext 
   334                              <1> .dirNoMoreFiles:
   335 00001CEC F605(EC050000)01    <1>     test byte [dirFlags], dirWideType
   336 00001CF3 740B                <1>     jz .dirNoEndNewLine
   337 00001CF5 488D156BE4FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   338 00001CFC B409                <1>     mov ah, 09h
   339 00001CFE CD21                <1>     int 21h
   340                              <1> .dirNoEndNewLine:
   341                              <1>     ;Now we print the number of files and the number of bytes on the disk
   342 00001D00 F705(EE050000)FFFF- <1>     test dword [dirFileCtr], -1
   342 00001D08 FFFF                <1>
   343 00001D0A 750D                <1>     jnz .filesFound
   344                              <1>     ;Else print File not found and exit!
   345 00001D0C 488D1501E5FFFF      <1>     lea rdx, fnfMsg
   346 00001D13 E884200000          <1>     call printString
   347                              <1>     return
    13                              <2> %%_ret:
    14 00001D18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   348                              <1> .filesFound:
   349 00001D19 8B05(EE050000)      <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   350 00001D1F B909000000          <1>     mov ecx, 9
   351 00001D24 E86B240000          <1>     call printDecimalValLB
   352 00001D29 488D15BDE5FFFF      <1>     lea rdx, dirOk
   353 00001D30 B409                <1>     mov ah, 09h
   354 00001D32 CD21                <1>     int 21h
   355 00001D34 B800360000          <1>     mov eax, 3600h ;Get disk info
   356 00001D39 8A15(F2050000)      <1>     mov dl, byte [dirDrv]
   357 00001D3F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   358 00001D41 CD21                <1>     int 21h ;Get disk free space info
   359 00001D43 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   360 00001D46 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   361 00001D49 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   362 00001D4B F7E1                <1>     mul ecx ;Get bytes per cluster
   363 00001D4D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   364                              <1>     ;rax now has the number of free bytes on the disk
   365 00001D50 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   366 00001D55 E83A240000          <1>     call printDecimalValLB
   367 00001D5A 488D1596E5FFFF      <1>     lea rdx, bytesOk
   368 00001D61 B409                <1>     mov ah, 09h
   369 00001D63 CD21                <1>     int 21h
   370                              <1>     return
    13                              <2> %%_ret:
    14 00001D65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   371                              <1> 
   372                              <1> .dirPrintFileData:
   373                              <1> ;Use cmdFcb to build the file name with space
   374                              <1> ;Start by print the name (same for both cases)
   375                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   376 00001D66 F605(83010000)46    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   377                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001D6D 75(65)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   378 00001D6F 488D35(8C010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   379 00001D76 488D3D(5E010000)    <1>     lea rdi, cmdFcb
   380 00001D7D E8D2220000          <1>     call asciiFilenameToFCB
   381 00001D82 488D15(5E010000)    <1>     lea rdx, cmdFcb
   382 00001D89 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   383 00001D8E BB01000000          <1>     mov ebx, 1  ;STDOUT
   384 00001D93 B440                <1>     mov ah, 40h ;Write handle
   385 00001D95 CD21                <1>     int 21h
   386 00001D97 52                  <1>     push rdx
   387 00001D98 B220                <1>     mov dl, " "
   388 00001D9A B402                <1>     mov ah, 02h ;Print char
   389 00001D9C CD21                <1>     int 21h
   390 00001D9E 5A                  <1>     pop rdx
   391 00001D9F 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   392 00001DA6 B903000000          <1>     mov ecx, 3  ;Print three chars
   393 00001DAB BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 00001DB0 B440                <1>     mov ah, 40h ;Write handle
   395 00001DB2 CD21                <1>     int 21h
   396 00001DB4 F605(EC050000)01    <1>     test byte [dirFlags], dirWideType
   397 00001DBB 757B                <1>     jnz .widePrint
   398                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   399                              <1>     ;Now check if a DIR
   400 00001DBD F605(83010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   401 00001DC4 7422                <1>     jz .dirPrintNotDir
   402 00001DC6 488D1538E5FFFF      <1>     lea rdx, dirLbl
   403 00001DCD B409                <1>     mov ah, 09h
   404 00001DCF CD21                <1>     int 21h
   405 00001DD1 488D15CBE9FFFF      <1>     lea rdx, threeSpc
   406 00001DD8 B409                <1>     mov ah, 09h
   407 00001DDA CD21                <1>     int 21h
   408 00001DDC B409                <1>     mov ah, 09h
   409 00001DDE CD21                <1>     int 21h
   410 00001DE0 B220                <1>     mov dl, SPC
   411 00001DE2 B402                <1>     mov ah, 02h
   412 00001DE4 CD21                <1>     int 21h
   413 00001DE6 EB1C                <1>     jmp short .dirPrintFileDT
   414                              <1> .dirPrintNotDir:
   415                              <1> ;Here we print the file size
   416 00001DE8 B220                <1>     mov dl, " "
   417 00001DEA B402                <1>     mov ah, 02h
   418 00001DEC CD21                <1>     int 21h
   419 00001DEE 8B05(88010000)      <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   420 00001DF4 B90D000000          <1>     mov ecx, 13
   421 00001DF9 E896230000          <1>     call printDecimalValLB
   422 00001DFE B220                <1>     mov dl, SPC
   423 00001E00 B402                <1>     mov ah, 02h
   424 00001E02 CD21                <1>     int 21h
   425                              <1> .dirPrintFileDT:
   426 00001E04 0FB705(86010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   427 00001E0B 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   428 00001E0D E8541D0000          <1>     call printDate
   429 00001E12 488D158AE9FFFF      <1>     lea rdx, threeSpc
   430 00001E19 B409                <1>     mov ah, 09h
   431 00001E1B CD21                <1>     int 21h
   432 00001E1D 0FB705(84010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   433 00001E24 E8631E0000          <1>     call printTime
   434 00001E29 488D1537E3FFFF      <1>     lea rdx, crlf
   435 00001E30 B409                <1>     mov ah, 09h
   436 00001E32 CD21                <1>     int 21h
   437 00001E34 B017                <1>     mov al, 23  ;23 lines... for the next bit
   438 00001E36 EB0D                <1>     jmp short .dirPrintNameExit
   439                              <1> .widePrint:
   440                              <1> ;If /W, print name space ext space space space space
   441 00001E38 488D155FE9FFFF      <1>     lea rdx, fourSpc
   442 00001E3F B409                <1>     mov ah, 09h ;Print string
   443 00001E41 CD21                <1>     int 21h
   444 00001E43 B073                <1>     mov al, 5*23    ;5 entries per line...
   445                              <1> .dirPrintNameExit:
   446 00001E45 FF05(EE050000)      <1>     inc dword [dirFileCtr]   ;Increment file counter
   447 00001E4B FE05(ED050000)      <1>     inc byte [dirLineCtr]
   448 00001E51 3805(ED050000)      <1>     cmp byte [dirLineCtr], al
   449                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E57 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E59 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   450 00001E5A F605(EC050000)02    <1>     test byte [dirFlags], dirPageType
   451 00001E61 741A                <1>     jz .dirPrnNoPag
   452 00001E63 488D15C2E4FFFF      <1>     lea rdx, pauseMes
   453 00001E6A B409                <1>     mov ah, 09h
   454 00001E6C CD21                <1>     int 21h
   455 00001E6E B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   456 00001E70 CD21                <1>     int 21h
   457 00001E72 488D15EEE2FFFF      <1>     lea rdx, crlf   ;Force new line
   458 00001E79 B409                <1>     mov ah, 09h
   459 00001E7B CD21                <1>     int 21h
   460                              <1> .dirPrnNoPag:
   461 00001E7D C605(ED050000)00    <1>     mov byte [dirLineCtr], 0
   462                              <1>     return
    13                              <2> %%_ret:
    14 00001E84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> chdir:
   465 00001E85 F605BFE1FFFFFF      <1>     test byte [arg1Flg], -1
   466 00001E8C 754D                <1>     jnz .changeDir
   467                              <1>     ;Print CWD
   468                              <1> .printCWD:
   469 00001E8E E87E1F0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   470 00001E93 E8FD1E0000          <1>     call printCRLF
   471                              <1>     return
    13                              <2> %%_ret:
    14 00001E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> .printDiskCWD:
   473                              <1> ;Print CWD for a specified drive
   474 00001E99 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   475 00001E9D 88D0                <1>     mov al, dl
   476 00001E9F 0440                <1>     add al, "@" ;Get the UC letter
   477 00001EA1 B43A                <1>     mov ah, ":"
   478 00001EA3 488D3D(E8040000)    <1>     lea rdi, searchSpec
   479 00001EAA 66AB                <1>     stosw   ;Store X:, rdi+=2
   480 00001EAC 8A0558E1FFFF        <1>     mov al, byte [pathSep]
   481 00001EB2 AA                  <1>     stosb   ;Store pathSep, inc rdi
   482 00001EB3 B447                <1>     mov ah, 47h ;Get Current Working Directory
   483 00001EB5 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   484 00001EB8 CD21                <1>     int 21h
   485 00001EBA E803210000          <1>     call strlen
   486 00001EBF 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   487 00001EC5 B440                <1>     mov ah, 40h ;Write to handle
   488 00001EC7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   489 00001ECC 488D15(E8040000)    <1>     lea rdx, searchSpec
   490 00001ED3 CD21                <1>     int 21h
   491 00001ED5 E8BB1E0000          <1>     call printCRLF
   492                              <1>     return
    13                              <2> %%_ret:
    14 00001EDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   493                              <1> .changeDir:
   494 00001EDB 8A056CE1FFFF        <1>     mov al, byte [arg1FCBret]
   495 00001EE1 3CFF                <1>     cmp al, -1 
   496 00001EE3 0F84B7FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   497 00001EE9 E86D220000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   498 00001EEE 488D15(E8040000)    <1>     lea rdx, searchSpec
   499 00001EF5 B43B                <1>     mov ah, 3Bh ;CHDIR
   500 00001EF7 CD21                <1>     int 21h
   501 00001EF9 0F82CEFAFFFF        <1>     jc badDirError
   502                              <1>     return
    13                              <2> %%_ret:
    14 00001EFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> mkdir:
   505 00001F00 F60544E1FFFFFF      <1>     test byte [arg1Flg], -1
   506 00001F07 0F849CFAFFFF        <1>     jz badArgError
   507 00001F0D F6053AE1FFFFFF      <1>     test byte [arg2Flg], -1
   508 00001F14 0F858FFAFFFF        <1>     jnz badArgError
   509                              <1>     ;We have exactly one argument
   510 00001F1A 8A052DE1FFFF        <1>     mov al, byte [arg1FCBret]
   511 00001F20 3CFF                <1>     cmp al, -1 
   512 00001F22 0F8478FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   513 00001F28 E82E220000          <1>     call buildCommandPath
   514 00001F2D 488D15(E8040000)    <1>     lea rdx, searchSpec
   515 00001F34 B800390000          <1>     mov eax, 3900h  ;MKDIR
   516 00001F39 CD21                <1>     int 21h
   517                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001F3B 73(FF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   518                              <1> .badMake:   ;Else, bad make
   519 00001F3D 488D151CE5FFFF      <1>     lea rdx, badMD
   520 00001F44 E9531E0000          <1>     jmp printString
   521                              <1> 
   522                              <1> rmdir:
   523 00001F49 F605FBE0FFFFFF      <1>     test byte [arg1Flg], -1
   524 00001F50 0F8453FAFFFF        <1>     jz badArgError
   525 00001F56 F605F1E0FFFFFF      <1>     test byte [arg2Flg], -1
   526 00001F5D 0F8546FAFFFF        <1>     jnz badArgError
   527                              <1>     ;We have exactly one argument
   528 00001F63 8A05E4E0FFFF        <1>     mov al, byte [arg1FCBret]
   529 00001F69 3CFF                <1>     cmp al, -1 
   530 00001F6B 0F842FFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   531 00001F71 E8E5210000          <1>     call buildCommandPath
   532 00001F76 488D15(E8040000)    <1>     lea rdx, searchSpec
   533 00001F7D B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   534 00001F82 CD21                <1>     int 21h
   535                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F84 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F86 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1> .badRemove:   ;Else, bad make
   537 00001F87 488D15EFE4FFFF      <1>     lea rdx, badRD
   538 00001F8E E9091E0000          <1>     jmp printString
   539                              <1> 
   540                              <1> copy:
   541 00001F93 66C705(A9070000)FF- <1>     mov word [sourceHdl], -1
   541 00001F9B FF                  <1>
   542 00001F9C 66C705(AB070000)FF- <1>     mov word [destHdl], -1
   542 00001FA4 FF                  <1>
   543 00001FA5 66C705(AD070000)FF- <1>     mov word [srcHdlInfo], -1
   543 00001FAD FF                  <1>
   544 00001FAE C605(BD070000)00    <1>     mov byte [bCpFlg], 0    ;State flag!
   545 00001FB5 48C705(AF070000)00- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   545 00001FBD 000000              <1>
   546 00001FC0 66C705(B7070000)00- <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   546 00001FC8 00                  <1>
   547 00001FC9 C705(B9070000)0000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   547 00001FD1 0000                <1>
   548 00001FD3 C605(89060000)00    <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   549 00001FDA C605(0B070000)00    <1>     mov byte [destSpec], 0
   550 00001FE1 48C705(8D070000)00- <1>     mov qword [srcPtr], 0
   550 00001FE9 000000              <1>
   551 00001FEC 48C705(95070000)00- <1>     mov qword [destPtr], 0
   551 00001FF4 000000              <1>
   552 00001FF7 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   553 00001FFC CD21                <1>     int 21h
   554 00001FFE 8805(A8070000)      <1>     mov byte [verifyFlg], al    ;Save verify flag!
   555                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   556                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   557                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   558 00002004 B800520000          <1>     mov eax, 5200h
   559 00002009 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   560 0000200B 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   561 0000200F 89CB                <1>     mov ebx, ecx
   562 00002011 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   563 00002014 B800480000          <1>     mov eax, 4800h
   564 00002019 CD21                <1>     int 21h
   565 0000201B 731E                <1>     jnc .bufOk
   566 0000201D 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   567 0000201F 750C                <1>     jnz .okSize
   568                              <1> .badAlloc:
   569                              <1> ;Not enough memory error!
   570 00002021 488D15A8E2FFFF      <1>     lea rdx, cpNoMem
   571 00002028 E9A7F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   572                              <1> .okSize:
   573 0000202D 89D9                <1>     mov ecx, ebx    
   574 0000202F C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   575 00002032 B800480000          <1>     mov eax, 4800h
   576 00002037 CD21                <1>     int 21h
   577 00002039 72E6                <1>     jc .badAlloc
   578                              <1> .bufOk:
   579 0000203B 488905(AF070000)    <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   580 00002042 66890D(B7070000)    <1>     mov word [wCpBufSz], cx     ;Save buffer size
   581                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   582 00002049 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   583 00002050 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   584 00002058 FFC9                <1>     dec ecx ;Turn into offset
   585 0000205A 4801CE              <1>     add rsi, rcx
   586 0000205D 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   587 0000205F FD                  <1>     std ;Go in reverse
   588                              <1> .sd:    ;At this point, any switch chars affect destination!
   589 00002060 E8821F0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   590 00002065 8A05A0DFFFFF        <1>     mov al, byte [switchChar]
   591 0000206B 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   592 0000206E 7509                <1>     jne .noSwitch
   593                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   594 00002070 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   595 00002074 50                  <1>     push rax        ;Push the switchchar
   596 00002075 FFC2                <1>     inc edx         ;Inc the counter
   597 00002077 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   598                              <1> .noSwitch:
   599                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   600 00002079 85D2                <1>     test edx, edx
   601 0000207B 7412                <1>     jz .noDestSwitch
   602                              <1> .ns1:
   603 0000207D 58                  <1>     pop rax ;Pop the switch char
   604 0000207E B304                <1>     mov bl, ascDes
   605 00002080 E809040000          <1>     call .doSwitchRev
   606 00002085 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   607 0000208B FFCA                <1>     dec edx
   608 0000208D 75EE                <1>     jnz .ns1
   609                              <1> .noDestSwitch:
   610                              <1> ;Now search for the starting delimiter or start of line
   611 0000208F 48FFC6              <1>     inc rsi ;Go to the last char in the path
   612                              <1> .noSwitchLp:
   613 00002092 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   614 00002093 E85D1F0000          <1>     call isALdelimiter
   615 00002098 7412                <1>     je .destFnd
   616 0000209A 8A056BDFFFFF        <1>     mov al, byte [switchChar]
   617 000020A0 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   618 000020A3 7404                <1>     je .se  ;Jump if so!
   619 000020A5 FFC9                <1>     dec ecx ;One less char left to search
   620 000020A7 EBE9                <1>     jmp short .noSwitchLp
   621                              <1> .se:
   622 000020A9 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   623                              <1> .destFnd:
   624 000020AC 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   625 000020B3 FC                  <1>     cld 
   626 000020B4 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   627 000020B7 488D3D(0B070000)    <1>     lea rdi, destSpec
   628 000020BE 57                  <1>     push rdi
   629 000020BF E854200000          <1>     call cpDelimPathToBufz ;Copy this over!   
   630 000020C4 5F                  <1>     pop rdi
   631 000020C5 E8D41F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   632 000020CA 48893D(95070000)    <1>     mov qword [destPtr], rdi
   633 000020D1 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   634 000020D5 7517                <1>     jne .destEnd    ;Dont worry
   635 000020D7 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   636 000020D9 E8EE1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   637 000020DE 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   638 000020E0 4881C702000000      <1>     add rdi, 2              ;Point to this null
   639 000020E7 48893D(95070000)    <1>     mov qword [destPtr], rdi    ;Store chars over the null
   640                              <1> .destEnd:
   641                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   642 000020EE 8025(BD070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   643 000020F5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   644                              <1> .srcLp:
   645 000020FC E8E61E0000          <1>     call skipDelimiters 
   646 00002101 8A0504DFFFFF        <1>     mov al, byte [switchChar]
   647 00002107 3806                <1>     cmp byte [rsi], al
   648 00002109 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   649                              <1>     ;rsi points to switch after switchchar
   650 0000210B B301                <1>     mov bl, ascSrc
   651 0000210D E876030000          <1>     call .doSwitch
   652 00002112 0F85E7030000        <1>     jnz .badExit
   653 00002118 4881C602000000      <1>     add rsi, 2
   654 0000211F EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   655                              <1> .noSrcSw:
   656 00002121 4839F5              <1>     cmp rbp, rsi
   657 00002124 7527                <1>     jne .noSameSrcDest
   658                              <1>     ;Here if the destination we specified earlier is the same as the source
   659                              <1>     ;This means, the actual destination is the current default drive
   660                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   661 00002126 E8791E0000          <1>     call getCurrentDrive    ;Get current drive
   662 0000212B 0441                <1>     add al, "A"             ;Turn into a drive letter
   663 0000212D B43A                <1>     mov ah, ":"
   664 0000212F 0FB7C0              <1>     movzx eax, ax
   665 00002132 8905(0B070000)      <1>     mov dword [destSpec], eax   ;Add a default null terminator
   666 00002138 488D3D(0D070000)    <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   667 0000213F 48893D(95070000)    <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   668 00002146 800D(BD070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   669                              <1> .noSameSrcDest:
   670 0000214D 488D3D(89060000)    <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   671 00002154 57                  <1>     push rdi
   672 00002155 E8BE1F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   673 0000215A 5F                  <1>     pop rdi
   674                              <1>     ;Now go forwards and pick up any more switches.
   675                              <1>     ;Also any "+" signs here!!
   676 0000215B 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   677                              <1> .swSrcSwPost:
   678 0000215E E8841E0000          <1>     call skipDelimiters ;Skips trailing delimiters
   679 00002163 8A05A2DEFFFF        <1>     mov al, byte [switchChar]
   680 00002169 3806                <1>     cmp byte [rsi], al
   681 0000216B 7516                <1>     jne .swSrcSwPostExit
   682                              <1>     ;rsi points to switch after switchchar
   683 0000216D B301                <1>     mov bl, ascSrc
   684 0000216F E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   685 00002174 0F8585030000        <1>     jnz .badExit
   686 0000217A 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   687 00002181 EBDB                <1>     jmp short .swSrcSwPost
   688                              <1> .swSrcSwPostExit:
   689 00002183 4889FE              <1>     mov rsi, rdi
   690 00002186 E8F51F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   691 0000218B 7507                <1>     jnz .oneCp
   692 0000218D 800D(BD070000)08    <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   693                              <1> .oneCp:
   694 00002194 E8051F0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   695 00002199 48893D(8D070000)    <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   696 000021A0 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   697 000021A4 7517                <1>     jne .srcEnd             ;Dont worry
   698 000021A6 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   699 000021A8 E81F1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   700 000021AD 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   701 000021AF 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   702 000021B6 48893D(8D070000)    <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   703                              <1> .srcEnd:
   704                              <1> ;Now uppercase both paths
   705 000021BD 488D35(89060000)    <1>     lea rsi, srcSpec
   706 000021C4 E80F1E0000          <1>     call normalisePath
   707 000021C9 488D3D(0B070000)    <1>     lea rdi, destSpec
   708 000021D0 E8031E0000          <1>     call normalisePath
   709                              <1> ;Now establish if the source is a directory or not!
   710 000021D5 F605(BD070000)08    <1>     test byte [bCpFlg], wcSrc
   711 000021DC 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   712 000021DE 488D15(89060000)    <1>     lea rdx, srcSpec
   713 000021E5 4889D6              <1>     mov rsi, rdx
   714 000021E8 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   715 000021EA 80FC3A              <1>     cmp ah, ":"
   716 000021ED 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   717 000021EF AC                  <1>     lodsb           ;Get char past :
   718 000021F0 84C0                <1>     test al, al     ;Is byte three nul?
   719 000021F2 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   720 000021F4 3A0510DEFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   721 000021FA 7515                <1>     jne .isSrcDir
   722 000021FC AC                  <1>     lodsb           ;Get char past char past "X:\"
   723 000021FD 84C0                <1>     test al, al     
   724 000021FF 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   725                              <1> .srcStorWc:
   726                              <1> ;rsi points past the char to store the WC at
   727 00002201 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   728 00002208 800D(BD070000)08    <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   729 0000220F EB44                <1>     jmp short .checkDestDir
   730                              <1> .isSrcDir:
   731 00002211 B910000000          <1>     mov ecx, dirDirectory
   732 00002216 B8004E0000          <1>     mov eax, 4E00h
   733 0000221B CD21                <1>     int 21h
   734 0000221D 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   735                              <1>     ;Was the file we found actually a directory?
   736 0000221F 803D(83010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   737 00002226 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   738 00002228 4889D7              <1>     mov rdi, rdx
   739 0000222B E8921D0000          <1>     call strlen
   740 00002230 FFC9                <1>     dec ecx
   741 00002232 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   742 00002235 8A05CFDDFFFF        <1>     mov al, byte [pathSep]
   743 0000223B 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   744 0000223E 7401                <1>     je .srctpsp
   745 00002240 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   746                              <1> .srctpsp:
   747 00002241 48893D(8D070000)    <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   748 00002248 B82A2E2A00          <1>     mov eax, "*.*"
   749 0000224D AB                  <1>     stosd   ;Store the WC with terminating nul!
   750 0000224E 800D(BD070000)08    <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   751                              <1> .checkDestDir:
   752                              <1> ;Now establish if destination is a directory or not!
   753 00002255 F605(BD070000)20    <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   754 0000225C 0F8562010000        <1>     jnz .mod1
   755 00002262 488D35(0B070000)    <1>     lea rsi, destSpec
   756 00002269 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   757 0000226B 80FC3A              <1>     cmp ah, ":"
   758 0000226E 751A                <1>     jne .isDestDir
   759 00002270 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   760 00002272 84C0                <1>     test al, al ;Is byte three nul?
   761 00002274 0F844A010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   762 0000227A 84E4                <1>     test ah, ah ;Is byte four nul?
   763 0000227C 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   764 0000227E 3A0586DDFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   765 00002284 0F843A010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   766                              <1> .isDestDir:
   767                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   768 0000228A 488D15(0B070000)    <1>     lea rdx, destSpec
   769 00002291 B910000000          <1>     mov ecx, dirDirectory
   770 00002296 B8004E0000          <1>     mov eax, 4E00h
   771 0000229B CD21                <1>     int 21h
   772 0000229D 7237                <1>     jc .mod2
   773                              <1>     ;Was the file we found actually a directory?
   774 0000229F 803D(83010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   775 000022A6 752E                <1>     jne .mod2
   776                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   777                              <1>     ;If not, we need to place one there!
   778 000022A8 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   779 000022AB E8121D0000          <1>     call strlen
   780 000022B0 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   781 000022B2 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   782 000022B5 0FB6054EDDFFFF      <1>     movzx eax, byte [pathSep]
   783 000022BC 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   784 000022BF 0F84FF000000        <1>     je .mod1        ;If so, skip adding another one!
   785 000022C5 66AB                <1>     stosw           ;Else, store the pathsep and null!
   786 000022C7 48FFCF              <1>     dec rdi         ;Point back to null
   787 000022CA 48893D(95070000)    <1>     mov qword [destPtr], rdi    ;Save this pointer
   788 000022D1 E9EE000000          <1>     jmp .mod1
   789                              <1> .mod2:
   790                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   791                              <1> ; to rename wildcard semantics. Always run through this as the destination
   792                              <1> ; name may have wildcards in it! But we don't add any.
   793 000022D6 800D(BD070000)40    <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   794 000022DD 488D35(0B070000)    <1>     lea rsi, destSpec
   795 000022E4 E8971E0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   796 000022E9 7407                <1>     jz .m2Wc
   797 000022EB 800D(BD070000)10    <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   798                              <1> .m2Wc:
   799                              <1> ;Search for the source file
   800 000022F2 488D15(89060000)    <1>     lea rdx, srcSpec
   801 000022F9 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   802 000022FB B8004E0000          <1>     mov eax, 4E00h
   803 00002300 CD21                <1>     int 21h
   804 00002302 0F82ED010000        <1>     jc .badSrcFile
   805 00002308 488B35(95070000)    <1>     mov rsi, qword [destPtr]
   806 0000230F 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   807 00002313 B801290000          <1>     mov eax, 2901h
   808 00002318 CD21                <1>     int 21h
   809                              <1> .md2Lp:
   810 0000231A 488D35(8C010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   811 00002321 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   812 00002325 B801290000          <1>     mov eax, 2901h
   813 0000232A CD21                <1>     int 21h  
   814                              <1> ;Now depending on source and dest patterns, build a filename in renName
   815 0000232C 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   816 00002330 488D3D(9D070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
   817 00002337 57                  <1>     push rdi
   818 00002338 48A5                <1>     movsq
   819 0000233A 66A5                <1>     movsw
   820 0000233C A4                  <1>     movsb
   821 0000233D 5F                  <1>     pop rdi
   822 0000233E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   823 00002342 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   824                              <1> .md2NameMake:
   825 00002347 AC                  <1>     lodsb   ;Get the char from the source string
   826 00002348 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   827 0000234B 7502                <1>     jne .noStore    ;Dont store the char there
   828 0000234D 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   829                              <1> .noStore:
   830 0000234F 48FFC7              <1>     inc rdi ;Goto next char position
   831 00002352 FFC9                <1>     dec ecx
   832 00002354 75F1                <1>     jnz .md2NameMake
   833 00002356 488D35(8C010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   834 0000235D 488B3D(8D070000)    <1>     mov rdi, qword [srcPtr]
   835 00002364 E8401C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   836 00002369 488D35(9D070000)    <1>     lea rsi, renName
   837 00002370 488B3D(95070000)    <1>     mov rdi, qword [destPtr]
   838 00002377 E8461D0000          <1>     call FCBToAsciiz
   839 0000237C E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   840 00002381 E8AE010000          <1>     call copyMain       ;And copy it!
   841 00002386 731D                <1>     jnc .md2Ok
   842                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   843                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   844 00002388 3CFD                <1>     cmp al, -3
   845 0000238A 0F8442010000        <1>     je .badBinCdevErr
   846 00002390 3CFE                <1>     cmp al, -2
   847 00002392 0F8443010000        <1>     je .rootDirFull
   848 00002398 3CFF                <1>     cmp al, -1      ;Source and destination same?
   849 0000239A 0F8444010000        <1>     je .badSameFile 
   850 000023A0 E95A010000          <1>     jmp .badExit    ;Else generic error message
   851                              <1> .md2Ok:
   852 000023A5 F605(BD070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   853 000023AC 0F8489000000        <1>     jz .copyDone        ;Copy complete!
   854 000023B2 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   855 000023B7 CD21                <1>     int 21h
   856 000023B9 0F827C000000        <1>     jc .copyDone        ;If no more files, we are done!
   857 000023BF E956FFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   858                              <1> .mod1:
   859                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   860 000023C4 800D(BD070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   861 000023CB 488D15(89060000)    <1>     lea rdx, srcSpec
   862 000023D2 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   863 000023D4 B8004E0000          <1>     mov eax, 4E00h
   864 000023D9 CD21                <1>     int 21h
   865 000023DB 0F8214010000        <1>     jc .badSrcFile  ;File not found error!!
   866                              <1> .mod1Lp:
   867 000023E1 488D35(8C010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   868 000023E8 488B3D(8D070000)    <1>     mov rdi, qword [srcPtr]
   869 000023EF E8C41B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   870 000023F4 488B3D(95070000)    <1>     mov rdi, qword [destPtr]
   871 000023FB E8B81B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   872 00002400 E857000000          <1>     call .prntFilespec
   873 00002405 E82A010000          <1>     call copyMain   ;And copy it!
   874 0000240A 731D                <1>     jnc .mod1Ok
   875                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   876                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   877 0000240C 3CFD                <1>     cmp al, -3
   878 0000240E 0F84BE000000        <1>     je .badBinCdevErr
   879 00002414 3CFE                <1>     cmp al, -2
   880 00002416 0F84BF000000        <1>     je .rootDirFull
   881 0000241C 3CFF                <1>     cmp al, -1      ;Source and destination same?
   882 0000241E 0F84C0000000        <1>     je .badSameFile 
   883 00002424 E9D6000000          <1>     jmp .badExit    ;Else generic error message
   884                              <1> .mod1Ok:
   885 00002429 F605(BD070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   886 00002430 7409                <1>     jz .copyDone
   887 00002432 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   888 00002437 CD21                <1>     int 21h
   889 00002439 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   890                              <1> 
   891                              <1> .copyDone:
   892 0000243B E8C9000000          <1>     call .copyCleanup   ;Clean up resources!
   893 00002440 8B05(B9070000)      <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   894 00002446 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   895 0000244B E8441D0000          <1>     call printDecimalValLB   ;n File(s) copied
   896 00002450 488D1567DEFFFF      <1>     lea rdx, copyOk
   897 00002457 B409                <1>     mov ah, 09h
   898 00002459 CD21                <1>     int 21h    
   899                              <1>     return
    13                              <2> %%_ret:
    14 0000245B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   900                              <1> 
   901                              <1> .prntFilespec:
   902                              <1> ;Prints the filespec to STDOUT. If the path is 
   903 0000245C F605(BD070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   904                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002463 74(5B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   905 00002465 488D15(89060000)    <1>     lea rdx, srcSpec
   906 0000246C 4889D7              <1>     mov rdi, rdx
   907 0000246F E84E1B0000          <1>     call strlen
   908 00002474 FFC9                <1>     dec ecx     ;Drop terminating null
   909 00002476 BB01000000          <1>     mov ebx, 1  ;STDOUT
   910 0000247B B800400000          <1>     mov eax, 4000h  ;Write
   911 00002480 CD21                <1>     int 21h
   912 00002482 E80E190000          <1>     call printCRLF
   913                              <1>     return
    13                              <2> %%_ret:
    14 00002487 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   914                              <1> .doSwitch:
   915                              <1> ;Since switches can come before or after a name, handle them here!
   916                              <1> ;If invalid switch char, returns ZF=NZ.
   917                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   918                              <1> ;       rsi -> Switchchar
   919 00002488 56                  <1>     push rsi
   920 00002489 48FFC6              <1>     inc rsi ;Point to char past switchchar
   921 0000248C AC                  <1>     lodsb   ;Get this char, goto next char
   922 0000248D 5E                  <1>     pop rsi
   923                              <1> .doSwitchRev:
   924 0000248E E8391B0000          <1>     call ucChar
   925 00002493 3C41                <1>     cmp al, "A"
   926 00002495 7510                <1>     jne .cB
   927 00002497 081D(BD070000)      <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   928 0000249D 8025(BD070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   929                              <1> .cExit:
   930 000024A4 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   931                              <1>     return
    13                              <2> %%_ret:
    14 000024A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932                              <1> .cB:
   933 000024A7 3C42                <1>     cmp al, "B"
   934 000024A9 7511                <1>     jne .cV
   935 000024AB F6D3                <1>     not bl  ;Reverse bits
   936 000024AD 201D(BD070000)      <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   937 000024B3 800D(BD070000)02    <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   938 000024BA EBE8                <1>     jmp short .cExit
   939                              <1> .cV:
   940 000024BC 3C56                <1>     cmp al, "V"
   941                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000024BE 75(A6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   942 000024C0 F605(A8070000)FF    <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   943 000024C7 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   944                              <1>     ;Else, set it. We return it at the end!
   945 000024C9 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   946 000024CE CD21                <1>     int 21h
   947 000024D0 EBD2                <1>     jmp short .cExit
   948                              <1> 
   949                              <1> ;COPY Bad Exits!!
   950                              <1> .badBinCdevErr:
   951 000024D2 488D1595E0FFFF      <1>     lea rdx, binDevErr
   952 000024D9 EB10                <1>     jmp short .badExitCmn
   953                              <1> .rootDirFull:
   954 000024DB 488D1578DDFFFF      <1>     lea rdx, fulRootDir
   955 000024E2 EB07                <1>     jmp short .badExitCmn
   956                              <1> .badSameFile:
   957 000024E4 488D1585DDFFFF      <1>     lea rdx, noSelfCopy
   958                              <1> .badExitCmn:
   959 000024EB E8E4F4FFFF          <1>     call badCmn     ;Print error message
   960 000024F0 E946FFFFFF          <1>     jmp .copyDone   ;Clean resources
   961                              <1> .badSrcFile:
   962 000024F5 E8CAF4FFFF          <1>     call badFnf  ;File not found!!
   963 000024FA E93CFFFFFF          <1>     jmp .copyDone
   964                              <1> .badExit:
   965 000024FF E893F4FFFF          <1>     call badParamError
   966 00002504 E932FFFFFF          <1>     jmp .copyDone
   967                              <1> 
   968                              <1> .copyCleanup:
   969                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   970                              <1> ;Handles are never open in this process!
   971 00002509 B8002E0000          <1>     mov eax, 2E00h
   972 0000250E 8A05(A8070000)      <1>     mov al, byte [verifyFlg]
   973 00002514 CD21                <1>     int 21h
   974 00002516 4150                <1>     push r8
   975 00002518 4C8B05(AF070000)    <1>     mov r8, qword [cpBufPtr]
   976 0000251F 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   977 00002522 7407                <1>     jz .skipFree
   978 00002524 B800490000          <1>     mov eax, 4900h
   979 00002529 CD21                <1>     int 21h
   980                              <1> .skipFree:
   981 0000252B 4158                <1>     pop r8
   982 0000252D 0F829E1D0000        <1>     jc freezePC ;If free fails, man....
   983                              <1>     return
    13                              <2> %%_ret:
    14 00002533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   984                              <1> 
   985                              <1> copyMain:
   986                              <1> ;This is the main copying procedure! 
   987                              <1> ;Start by checking the two files are not the same. If so, complain!
   988                              <1> ;If returns CF=CY, error code in al. 
   989                              <1> ;   If al = -1, same filename error!
   990                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   991                              <1> ;   If al = -3, attempted binary read from a device
   992                              <1> ;If returns CF=NC, file copied successfully.
   993                              <1> ;Check the two files are not the same using truename in searchspec
   994 00002534 488D35(89060000)    <1>     lea rsi, srcSpec
   995 0000253B 488D3D(E8040000)    <1>     lea rdi, searchSpec
   996 00002542 B800600000          <1>     mov eax, 6000h  ;TRUENAME
   997 00002547 CD21                <1>     int 21h 
   998 00002549 57                  <1>     push rdi    ;Save this searchSpec
   999 0000254A 488D35(0B070000)    <1>     lea rsi, destSpec
  1000 00002551 488D3D(6A050000)    <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1001 00002558 B800600000          <1>     mov eax, 6000h
  1002 0000255D CD21                <1>     int 21h
  1003 0000255F 5E                  <1>     pop rsi     ;Get this ptr back
  1004 00002560 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1005 00002565 CD2F                <1>     int 2Fh
  1006 00002567 750F                <1>     jnz .notSameFile
  1007 00002569 B0FF                <1>     mov al, -1  ;Same filename error!
  1008                              <1> .badExit:
  1009 0000256B 50                  <1>     push rax
  1010 0000256C E8B0000000          <1>     call .exitCleanup
  1011 00002571 58                  <1>     pop rax
  1012 00002572 F9                  <1>     stc
  1013                              <1>     return
    13                              <2> %%_ret:
    14 00002573 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1014                              <1> .badExitNoSpace:
  1015 00002574 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1016 00002576 EBF3                <1>     jmp short .badExit
  1017                              <1> .notSameFile:
  1018                              <1> ;Open source with read permission
  1019                              <1> ;Open destination with write permission
  1020 00002578 488D15(89060000)    <1>     lea rdx, srcSpec
  1021 0000257F B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1022 00002584 CD21                <1>     int 21h
  1023 00002586 72E3                <1>     jc .badExit
  1024 00002588 668905(A9070000)    <1>     mov word [sourceHdl], ax
  1025 0000258F 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1026                              <1> 
  1027 00002592 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1028 00002597 CD21                <1>     int 21h
  1029 00002599 668915(AD070000)    <1>     mov word [srcHdlInfo], dx   ;Store information here
  1030 000025A0 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1031 000025A3 7412                <1>     jz .prepCopy
  1032                              <1> ;Check the binary flag was not set on this source filespec
  1033 000025A5 B0FD                <1>     mov al, -3  ;Prep the error code
  1034 000025A7 F605(BD070000)02    <1>     test byte [bCpFlg], binSrc
  1035 000025AE 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1036 000025B0 800D(BD070000)01    <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1037                              <1> .prepCopy:
  1038 000025B7 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1039 000025B9 488B15(AF070000)    <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1040                              <1> .copyLoop:
  1041                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1042                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1043                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1044                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1045 000025C0 0FB70D(B7070000)    <1>     movzx ecx, word [wCpBufSz]
  1046 000025C7 0FB71D(A9070000)    <1>     movzx ebx, word [sourceHdl]
  1047 000025CE B8003F0000          <1>     mov eax, 3F00h ;Read
  1048 000025D3 CD21                <1>     int 21h
  1049 000025D5 7294                <1>     jc .badExit
  1050 000025D7 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1051 000025D9 F605(BD070000)01    <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1052 000025E0 7413                <1>     jz .notAscii
  1053                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1054 000025E2 50                  <1>     push rax        ;Save the original char count
  1055 000025E3 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1056 000025E6 B01A                <1>     mov al, EOF
  1057 000025E8 F2AE                <1>     repne scasb     ;Loop thru now!
  1058 000025EA 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1059 000025EC 59                  <1>     pop rcx         ;Get the original read count into ecx
  1060 000025ED 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1061                              <1> ;Here if EOF found.
  1062 000025EF FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1063 000025F1 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1064 000025F3 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1065                              <1> .notAscii:
  1066 000025F5 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1067 000025F7 7428                <1>     jz .exitCleanup
  1068 000025F9 51                  <1>     push rcx    ;Save the number of bytes to write
  1069 000025FA 52                  <1>     push rdx    ;Save the buffer ptr
  1070 000025FB E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1071 00002600 5A                  <1>     pop rdx
  1072 00002601 59                  <1>     pop rcx
  1073 00002602 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1074 00002608 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1075 0000260D CD21                <1>     int 21h
  1076 0000260F 0F8256FFFFFF        <1>     jc .badExit
  1077 00002615 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1078 00002617 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1079 0000261D 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1080 0000261F 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1081                              <1> .exitCleanup:
  1082                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1083 00002621 F605(BD070000)04    <1>     test byte [bCpFlg], ascDes
  1084 00002628 7425                <1>     jz .ecNoEOF
  1085 0000262A 0FBF1D(AB070000)    <1>     movsx ebx, word [destHdl]
  1086 00002631 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1087 00002637 7416                <1>     je .ecNoEOF
  1088 00002639 488B15(AF070000)    <1>     mov rdx, qword [cpBufPtr]
  1089 00002640 C6021A              <1>     mov byte [rdx], EOF
  1090 00002643 B901000000          <1>     mov ecx, 1
  1091 00002648 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1092 0000264D CD21                <1>     int 21h
  1093                              <1> .ecNoEOF:
  1094                              <1> ;Now close copy handles!
  1095 0000264F 668B1D(A9070000)    <1>     mov bx, word [sourceHdl]
  1096 00002656 6681FBFFFF          <1>     cmp bx, -1
  1097 0000265B 7410                <1>     je .beSkipSource
  1098 0000265D B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1099 00002662 CD21                <1>     int 21h
  1100 00002664 66C705(A9070000)FF- <1>     mov word [sourceHdl], -1    ;Reset the var
  1100 0000266C FF                  <1>
  1101                              <1> .beSkipSource:
  1102 0000266D 668B1D(AB070000)    <1>     mov bx, word [destHdl]
  1103 00002674 6681FBFFFF          <1>     cmp bx, -1
  1104                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002679 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000267B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1105 0000267C B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1106 00002681 CD21                <1>     int 21h
  1107 00002683 66C705(AB070000)FF- <1>     mov word [destHdl], -1  ;Reset the var
  1107 0000268B FF                  <1>
  1108                              <1>     return
    13                              <2> %%_ret:
    14 0000268C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1109                              <1> 
  1110                              <1> .getWriteHandle:
  1111                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1112                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1113                              <1> ;Input: Nothing
  1114                              <1> ;Output: CF=NC: bx = Handle to the file
  1115                              <1> ;        CF=CY: File failed to open/create. 
  1116 0000268D 0FB71D(AB070000)    <1>     movzx ebx, word [destHdl]
  1117 00002694 6681FBFFFF          <1>     cmp bx, -1
  1118 00002699 7402                <1>     je .gwHProceed
  1119 0000269B F8                  <1>     clc     ;Clear the CF
  1120                              <1>     return
    13                              <2> %%_ret:
    14 0000269C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1121                              <1> .gwHProceed:
  1122                              <1> ;Here if the destination has not been opened yet!
  1123 0000269D 488D15(0B070000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1124                              <1> ;Now we create/reopen the file here!
  1125 000026A4 F605(BD070000)10    <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1126 000026AB 743E                <1>     jz .createFile
  1127                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1128                              <1> ;If this is more than file 0, we open
  1129 000026AD 813D(B9070000)0000- <1>     cmp dword [dCpCnt], 0
  1129 000026B5 0000                <1>
  1130 000026B7 7432                <1>     je .createFile
  1131                              <1>     ;Now we open the file instead and append to the end
  1132 000026B9 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1133 000026BE CD21                <1>     int 21h
  1134                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026C0 72(9C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1135 000026C2 FF05(B9070000)      <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1136 000026C8 668905(AB070000)    <1>     mov word [destHdl], ax
  1137 000026CF 0FB7D8              <1>     movzx ebx, ax
  1138 000026D2 31C9                <1>     xor ecx, ecx
  1139 000026D4 31D2                <1>     xor edx, edx
  1140 000026D6 F605(BD070000)04    <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1141 000026DD 7404                <1>     jz .gwHNoAscii
  1142 000026DF FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1143 000026E1 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1144                              <1> .gwHNoAscii:
  1145 000026E3 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1146 000026E8 CD21                <1>     int 21h
  1147                              <1>     return
    13                              <2> %%_ret:
    14 000026EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1148                              <1> .createFile:
  1149 000026EB B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1150 000026F0 31C9                <1>     xor ecx, ecx    ;No file attributes
  1151 000026F2 CD21                <1>     int 21h
  1152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000026F4 72(EA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1153 000026F6 FF05(B9070000)      <1>     inc dword [dCpCnt]  ;File created for writing!
  1154 000026FC 668905(AB070000)    <1>     mov word [destHdl], ax
  1155 00002703 0FB7D8              <1>     movzx ebx, ax
  1156                              <1>     return
    13                              <2> %%_ret:
    14 00002706 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1157                              <1> 
  1158                              <1> erase:
  1159 00002707 F6053DD9FFFFFF      <1>     test byte [arg1Flg], -1
  1160 0000270E 0F8495F2FFFF        <1>     jz badArgError
  1161 00002714 E8421A0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1162                              <1> .dirLp:
  1163 00002719 488D3D(E8040000)    <1>     lea rdi, searchSpec
  1164 00002720 E879190000          <1>     call findLastPathComponant
  1165 00002725 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1166 00002728 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1167 0000272C B03F                <1>     mov al, "?"
  1168                              <1>     ;Store question marks in the name field
  1169 0000272E 57                  <1>     push rdi
  1170 0000272F 48FFC7              <1>     inc rdi ;Goto the first char
  1171 00002732 B90B000000          <1>     mov ecx, 11
  1172 00002737 F3AA                <1>     rep stosb
  1173 00002739 5F                  <1>     pop rdi
  1174 0000273A 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1175 0000273D B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1176 00002742 CD21                <1>     int 21h
  1177 00002744 3C01                <1>     cmp al, 1
  1178 00002746 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1179                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1180                              <1>     ;No dirs to handle in here
  1181 0000274C 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1182 00002750 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1183 00002753 E86A190000          <1>     call FCBToAsciiz    ;Null terminates for free
  1184                              <1>     ;Count the number of ?'s, if 11, we print the message
  1185 00002758 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1186 0000275C 31C9                <1>     xor ecx, ecx
  1187                              <1> .wcScan:
  1188 0000275E AC                  <1>     lodsb
  1189 0000275F 3C3F                <1>     cmp al, "?"
  1190 00002761 7534                <1>     jne .endCount
  1191 00002763 FFC1                <1>     inc ecx
  1192 00002765 81F90B000000        <1>     cmp ecx, 11
  1193 0000276B 75F1                <1>     jne .wcScan
  1194                              <1> .ynmsg:
  1195 0000276D 488D158CDCFFFF      <1>     lea rdx, ynMes
  1196 00002774 E823160000          <1>     call printString
  1197 00002779 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1198 0000277B CD21                <1>     int 21h ;Get char in al
  1199 0000277D E84A180000          <1>     call ucChar ;Uppercase the char
  1200 00002782 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1201 00002784 740C                <1>     je .endCount1
  1202 00002786 3C4E                <1>     cmp al, "N"
  1203                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002788 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000278A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1204 0000278B E805160000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1205 00002790 EBDB                <1>     jmp short .ynmsg    
  1206                              <1> .endCount1:
  1207 00002792 E8FE150000          <1>     call printCRLF
  1208                              <1> .endCount:
  1209                              <1>     ;Now we copy our search template pathstring to delPath
  1210 00002797 488D3D(89060000)    <1>     lea rdi, delPath
  1211 0000279E 488D35(E8040000)    <1>     lea rsi, searchSpec ;Source the chars from here
  1212 000027A5 E80E180000          <1>     call strcpy2         ;Copy the string over to delPath
  1213                              <1> .findFile:
  1214                              <1>     ;Now we find first/find next our way through the files
  1215 000027AA 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1216 000027AD 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1217 000027AF B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1218 000027B4 CD21                <1>     int 21h
  1219 000027B6 0F8208F2FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1220                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1221 000027BC E8DD180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1222 000027C1 488D35(8C010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1223                              <1> .delNextFile:
  1224                              <1> ;rsi and rdi dont move here
  1225 000027C8 E8EB170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1226 000027CD 488D15(89060000)    <1>     lea rdx, delPath
  1227 000027D4 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1228 000027D9 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1229 000027DB 488D15(E8040000)    <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1230 000027E2 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1231 000027E7 CD21                <1>     int 21h
  1232 000027E9 73DD                <1>     jnc .delNextFile    
  1233 000027EB F8                  <1>     clc ;Clear carry to indicate success
  1234                              <1>     return
    13                              <2> %%_ret:
    14 000027EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1235                              <1> .noWildcard:
  1236                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1237                              <1>     ; a \*.*<NUL> over the null terminator
  1238 000027ED 488D15(E8040000)    <1>     lea rdx, searchSpec
  1239 000027F4 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1240 000027F9 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1241 000027FE CD21                <1>     int 21h
  1242 00002800 0F82BEF1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1243 00002806 F605(83010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1244 0000280D 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1245                              <1>     ;Else, we are dealing with a dir
  1246 0000280F 4889D7              <1>     mov rdi, rdx
  1247 00002812 31C9                <1>     xor ecx, ecx
  1248 00002814 FFC9                <1>     dec ecx
  1249 00002816 F2AE                <1>     repne scasb ;Go to the end of the line!
  1250 00002818 48FFCF              <1>     dec rdi
  1251 0000281B 0FB605E8D7FFFF      <1>     movzx eax, byte [pathSep]
  1252 00002822 AA                  <1>     stosb
  1253 00002823 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1254 00002828 AB                  <1>     stosd
  1255 00002829 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1256                              <1> .delMain:   ;Call with rdx -> buffer!
  1257 0000282E B800410000          <1>     mov eax, 4100h  ;Delete File 
  1258 00002833 CD21                <1>     int 21h
  1259                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002835 73(EC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1260 00002837 3C05                <1>     cmp al, errAccDen
  1261 00002839 0F844FF1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1262 0000283F E96EF1FFFF          <1>     jmp badFileError
  1263                              <1>     return
    13                              <2> %%_ret:
    14 00002844 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1264                              <1> 
  1265                              <1> date:
  1266 00002845 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1267 0000284C E896170000          <1>     call skipDelimiters
  1268 00002851 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1269 00002854 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1270                              <1> .init:
  1271                              <1>     ;Else, we do interactive mode!
  1272 00002856 488D1526DBFFFF      <1>     lea rdx, curDate
  1273 0000285D B409                <1>     mov ah, 09h
  1274 0000285F CD21                <1>     int 21h
  1275 00002861 E877160000          <1>     call printFmtDate
  1276                              <1> .noCur:
  1277 00002866 488D1527DBFFFF      <1>     lea rdx, newDate
  1278 0000286D B409                <1>     mov ah, 09h
  1279 0000286F CD21                <1>     int 21h
  1280 00002871 488D153BDBFFFF      <1>     lea rdx, ukDate
  1281 00002878 488D0527DBFFFF      <1>     lea rax, usDate
  1282 0000287F 488D1D3ADBFFFF      <1>     lea rbx, jpDate
  1283 00002886 803D(F5000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1284 0000288D 480F47D3            <1>     cmova rdx, rbx
  1285 00002891 480F42D0            <1>     cmovb rdx, rax
  1286 00002895 B409                <1>     mov ah, 09h
  1287 00002897 CD21                <1>     int 21h
  1288                              <1> 
  1289 00002899 488D15(3B020000)    <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1290 000028A0 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1291 000028A3 B40A                <1>     mov ah, 0Ah
  1292 000028A5 CD21                <1>     int 21h
  1293 000028A7 52                  <1>     push rdx
  1294 000028A8 E8E8140000          <1>     call printCRLF
  1295 000028AD 5A                  <1>     pop rdx
  1296 000028AE 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1297                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000028B2 74(44)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1298                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1299 000028B4 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1300                              <1> .goDate:
  1301 000028B8 31C0                <1>     xor eax, eax    
  1302 000028BA 803D(F5000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1303 000028C1 727B                <1>     jb .us
  1304 000028C3 0F87B7000000        <1>     ja .jpn
  1305                              <1>     ;Here for UK style dates
  1306 000028C9 E8C6190000          <1>     call getByte
  1307 000028CE 725D                <1>     jc .badDate
  1308 000028D0 8805(87060000)      <1>     mov byte [td3], al  ;Store the day
  1309 000028D6 E80C010000          <1>     call .validSep
  1310 000028DB 7550                <1>     jne .badDate
  1311 000028DD E8B2190000          <1>     call getByte
  1312 000028E2 7249                <1>     jc .badDate
  1313 000028E4 8805(88060000)      <1>     mov byte [td4], al  ;Store month
  1314 000028EA E8F8000000          <1>     call .validSep
  1315 000028EF 753C                <1>     jne .badDate
  1316 000028F1 E8AA190000          <1>     call getNum
  1317 000028F6 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1318 000028FB 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1319 00002900 732B                <1>     jae .badDate
  1320 00002902 668905(85060000)    <1>     mov word [td1], ax  ;Store the word directly
  1321                              <1> .writeDate:
  1322 00002909 E8D9160000          <1>     call skipDelimiters
  1323 0000290E 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1324 00002911 751A                <1>     jne .badDate
  1325 00002913 0FB70D(85060000)    <1>     movzx ecx, word [td1]   ;Get the year
  1326 0000291A 668B15(87060000)    <1>     mov dx, word [td3]      ;Read time and date together!
  1327 00002921 B8002B0000          <1>     mov eax, 2B00h
  1328 00002926 CD21                <1>     int 21h
  1329 00002928 84C0                <1>     test al, al
  1330                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000292A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000292C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1331                              <1> .badDate:
  1332 0000292D 488D1540DAFFFF      <1>     lea rdx, badDate
  1333 00002934 E863140000          <1>     call printString
  1334 00002939 E928FFFFFF          <1>     jmp date.noCur
  1335                              <1> .us:
  1336 0000293E E851190000          <1>     call getByte
  1337 00002943 72E8                <1>     jc .badDate
  1338 00002945 8805(88060000)      <1>     mov byte [td4], al  ;Store the month
  1339 0000294B E897000000          <1>     call .validSep
  1340 00002950 75DB                <1>     jne .badDate
  1341 00002952 E83D190000          <1>     call getByte
  1342 00002957 72D4                <1>     jc .badDate
  1343 00002959 8805(87060000)      <1>     mov byte [td3], al  ;Store day
  1344 0000295F E883000000          <1>     call .validSep
  1345 00002964 75C7                <1>     jne .badDate
  1346 00002966 E835190000          <1>     call getNum
  1347 0000296B E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1348 00002970 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1349 00002975 73B6                <1>     jae .badDate
  1350 00002977 668905(85060000)    <1>     mov word [td1], ax  ;Store the word directly
  1351                              <1> .writeHop:
  1352 0000297E EB89                <1>     jmp short .writeDate
  1353                              <1> .jpn:
  1354 00002980 E81B190000          <1>     call getNum
  1355 00002985 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1356 0000298A 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1357 0000298F 739C                <1>     jae .badDate
  1358 00002991 668905(85060000)    <1>     mov word [td1], ax  ;Store the word directly
  1359 00002998 E84A000000          <1>     call .validSep
  1360 0000299D 758E                <1>     jne .badDate
  1361 0000299F E8F0180000          <1>     call getByte
  1362 000029A4 7287                <1>     jc .badDate
  1363 000029A6 8805(87060000)      <1>     mov byte [td3], al  ;Store the day
  1364 000029AC E836000000          <1>     call .validSep
  1365 000029B1 0F8576FFFFFF        <1>     jne .badDate
  1366 000029B7 E8D8180000          <1>     call getByte
  1367 000029BC 0F826BFFFFFF        <1>     jc .badDate
  1368 000029C2 8805(88060000)      <1>     mov byte [td4], al  ;Store month
  1369 000029C8 EBB4                <1>     jmp short .writeHop
  1370                              <1> .doYear:
  1371 000029CA 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1372                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000029CF 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000029D1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1373                              <1> ;If the user specifies 80-99 it means 1980-1999
  1374                              <1> ;If the user specifies 00-79 it means 2000-2079
  1375 000029D2 BBD0070000          <1>     mov ebx, 2000
  1376 000029D7 B96C070000          <1>     mov ecx, 1900
  1377 000029DC 3D50000000          <1>     cmp eax, 80     
  1378 000029E1 0F42CB              <1>     cmovb ecx, ebx
  1379 000029E4 01C8                <1>     add eax, ecx
  1380                              <1>     return
    13                              <2> %%_ret:
    14 000029E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1381                              <1> .validSep:
  1382 000029E7 AC                  <1>     lodsb           ;Get the char and return
  1383 000029E8 3C2E                <1>     cmp al, "."
  1384                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029EA 74(E6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1385 000029EC 3C2F                <1>     cmp al, "/"
  1386                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000029EE 74(E6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1387 000029F0 3C2D                <1>     cmp al, "-"
  1388                              <1>     return
    13                              <2> %%_ret:
    14 000029F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1389                              <1> 
  1390                              <1> time:
  1391 000029F3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1392 000029FA E8E8150000          <1>     call skipDelimiters
  1393 000029FF 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1394 00002A02 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1395                              <1> .init:
  1396 00002A04 488D15D1D9FFFF      <1>     lea rdx, curTime
  1397 00002A0B B409                <1>     mov ah, 09h
  1398 00002A0D CD21                <1>     int 21h
  1399 00002A0F E860140000          <1>     call printFmtTime
  1400                              <1> .noCur:
  1401 00002A14 488D15D2D9FFFF      <1>     lea rdx, newTime
  1402 00002A1B B409                <1>     mov ah, 09h
  1403 00002A1D CD21                <1>     int 21h
  1404                              <1> 
  1405 00002A1F 488D15(3B020000)    <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1406 00002A26 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1407 00002A29 B40A                <1>     mov ah, 0Ah
  1408 00002A2B CD21                <1>     int 21h
  1409 00002A2D 52                  <1>     push rdx
  1410 00002A2E 488D1532D7FFFF      <1>     lea rdx, crlf
  1411 00002A35 B409                <1>     mov ah, 09h
  1412 00002A37 CD21                <1>     int 21h
  1413 00002A39 5A                  <1>     pop rdx
  1414 00002A3A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1415                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A3E 74(F2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 00002A40 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1417                              <1> .goTime:
  1418 00002A44 C705(85060000)0000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1418 00002A4C 0000                <1>
  1419 00002A4E 31C0                <1>     xor eax, eax   
  1420 00002A50 E83F180000          <1>     call getByte
  1421 00002A55 0F8298000000        <1>     jc .badTime         ;Get the number in eax
  1422 00002A5B 8805(86060000)      <1>     mov byte [td2], al  ;Save hours
  1423 00002A61 E89E000000          <1>     call .validsep
  1424 00002A66 0F8587000000        <1>     jne .badTime
  1425 00002A6C E823180000          <1>     call getByte
  1426 00002A71 0F827C000000        <1>     jc .badTime
  1427 00002A77 8805(85060000)      <1>     mov byte [td1], al  ;Save minutes
  1428 00002A7D E882000000          <1>     call .validsep
  1429 00002A82 740F                <1>     je .goSec
  1430 00002A84 48FFCE              <1>     dec rsi ;Go back a char
  1431 00002A87 E85B150000          <1>     call skipDelimiters ;Skip any delimiters
  1432 00002A8C 803E0D              <1>     cmp byte [rsi], CR
  1433 00002A8F 743E                <1>     je .setTime
  1434 00002A91 EB60                <1>     jmp short .badTime
  1435                              <1> .goSec:
  1436 00002A93 E878000000          <1>     call .checkNum
  1437 00002A98 7259                <1>     jc .badTime
  1438 00002A9A E8F5170000          <1>     call getByte
  1439 00002A9F 7252                <1>     jc .badTime
  1440 00002AA1 8805(88060000)      <1>     mov byte [td4], al  ;Save seconds
  1441 00002AA7 AC                  <1>     lodsb       ;Move rsi forwards
  1442 00002AA8 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1443 00002AAA 740F                <1>     je .goMsec
  1444 00002AAC 48FFCE              <1>     dec rsi ;Go back a char
  1445 00002AAF E833150000          <1>     call skipDelimiters ;Skip any delimiters
  1446 00002AB4 803E0D              <1>     cmp byte [rsi], CR
  1447 00002AB7 7416                <1>     je .setTime
  1448 00002AB9 EB38                <1>     jmp short .badTime
  1449                              <1> .goMsec:
  1450 00002ABB E850000000          <1>     call .checkNum
  1451 00002AC0 7231                <1>     jc .badTime
  1452 00002AC2 E8CD170000          <1>     call getByte
  1453 00002AC7 722A                <1>     jc .badTime
  1454 00002AC9 8805(87060000)      <1>     mov byte [td3], al  ;Save miliseconds
  1455                              <1> .setTime:
  1456 00002ACF E813150000          <1>     call skipDelimiters
  1457 00002AD4 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1458 00002AD7 751A                <1>     jne .badTime
  1459 00002AD9 0FB70D(85060000)    <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1460 00002AE0 0FB715(87060000)    <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1461 00002AE7 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1462 00002AEC CD21                <1>     int 21h
  1463 00002AEE A8FF                <1>     test al, -1
  1464                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002AF0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002AF2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1465                              <1> .badTime:
  1466 00002AF3 488D15D3D8FFFF      <1>     lea rdx, badTime
  1467 00002AFA E89D120000          <1>     call printString
  1468 00002AFF E910FFFFFF          <1>     jmp time.noCur
  1469                              <1> .validsep:
  1470 00002B04 AC                  <1>     lodsb
  1471 00002B05 3A05(02010000)      <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1472                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002B0B 74(F2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1473 00002B0D 3C2E                <1>     cmp al, "."
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00002B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1475                              <1> .checkNum:
  1476 00002B10 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1477 00002B11 48FFCE              <1>     dec rsi
  1478 00002B14 3C30                <1>     cmp al, "0"
  1479 00002B16 7206                <1>     jb .cnbad
  1480 00002B18 3C39                <1>     cmp al, "9"
  1481 00002B1A 7702                <1>     ja .cnbad
  1482 00002B1C F8                  <1>     clc
  1483                              <1>     return
    13                              <2> %%_ret:
    14 00002B1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1484                              <1> .cnbad:
  1485 00002B1E F9                  <1>     stc
  1486                              <1>     return
    13                              <2> %%_ret:
    14 00002B1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1487                              <1> ctty:
  1488 00002B20 F60524D5FFFFFF      <1>     test byte [arg1Flg], -1
  1489 00002B27 0F847CEEFFFF        <1>     jz badArgError
  1490 00002B2D F6051AD5FFFFFF      <1>     test byte [arg2Flg], -1
  1491 00002B34 0F856FEEFFFF        <1>     jnz badArgError
  1492 00002B3A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1493 00002B41 0FB60504D5FFFF      <1>     movzx eax, byte [arg1Off]
  1494 00002B48 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1495 00002B4B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1496 00002B4F 750F                <1>     jne .noDrive
  1497 00002B51 0FB605F5D4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1498 00002B58 3CFF                <1>     cmp al, -1
  1499 00002B5A 0F8440EEFFFF        <1>     je badDriveError
  1500                              <1> .noDrive:
  1501                              <1>     ;Now we open the provided file
  1502 00002B60 E80E160000          <1>     call copyArgumentToSearchSpec
  1503 00002B65 488D15(E8040000)    <1>     lea rdx, searchSpec
  1504                              <1> .loadSwap:
  1505 00002B6C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1506 00002B71 CD21                <1>     int 21h
  1507 00002B73 0F8239EEFFFF        <1>     jc badFileError
  1508 00002B79 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1509 00002B7C B800440000          <1>     mov eax, 4400h  ;Get device word
  1510 00002B81 CD21                <1>     int 21h
  1511 00002B83 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1512 00002B86 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1513                              <1>     ;Now we set this handle to be STDIO
  1514 00002B88 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1515 00002B8B 30F6                <1>     xor dh, dh
  1516 00002B8D B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1517 00002B92 CD21                <1>     int 21h
  1518                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1519 00002B94 31C9                <1>     xor ecx, ecx    ;STDIN
  1520 00002B96 B800460000          <1>     mov eax, 4600h
  1521 00002B9B CD21                <1>     int 21h
  1522 00002B9D FFC1                <1>     inc ecx         ;STDOUT
  1523 00002B9F B800460000          <1>     mov eax, 4600h
  1524 00002BA4 CD21                <1>     int 21h
  1525 00002BA6 FFC1                <1>     inc ecx         ;STDERR
  1526 00002BA8 B800460000          <1>     mov eax, 4600h
  1527 00002BAD CD21                <1>     int 21h
  1528 00002BAF B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1529 00002BB4 CD21                <1>     int 21h
  1530                              <1>     return
    13                              <2> %%_ret:
    14 00002BB6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1531                              <1> .badCharDev:
  1532 00002BB7 488D1540D9FFFF      <1>     lea rdx, badDev
  1533 00002BBE B409                <1>     mov ah, 09h
  1534 00002BC0 CD21                <1>     int 21h
  1535 00002BC2 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1536 00002BC4 CD21                <1>     int 21h
  1537                              <1>     return
    13                              <2> %%_ret:
    14 00002BC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1538                              <1> 
  1539                              <1> cls:  
  1540 00002BC7 B800440000          <1>     mov eax, 4400h  ;Get device info
  1541 00002BCC BB01000000          <1>     mov ebx, 1      ;for handle 1
  1542 00002BD1 CD21                <1>     int 21h         ;in dx
  1543 00002BD3 F7C280000000        <1>     test edx, devCharDev
  1544 00002BD9 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1545 00002BDB F7C210000000        <1>     test edx, charDevFastOut
  1546 00002BE1 7421                <1>     jz .doAnsi
  1547                              <1>     ;Test if Int 29h uses Int 30h
  1548                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1549                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1550 00002BE3 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1551 00002BE8 CD21                <1>     int 21h
  1552 00002BEA B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1553                              <1> .biosCheck:
  1554 00002BEF 66813BCD30          <1>     cmp word [rbx], 30CDh
  1555 00002BF4 7426                <1>     je .biosConfirmed
  1556 00002BF6 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1557 00002BFB 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1558 00002BFD 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1559 00002C00 FFC9                <1>     dec ecx
  1560 00002C02 75EB                <1>     jnz .biosCheck
  1561                              <1> .doAnsi:
  1562                              <1> ;4 chars in the ansi routine
  1563                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1564                              <1> ; understand ANSI codes
  1565 00002C04 488D358FDBFFFF      <1>     lea rsi, ansiCls
  1566 00002C0B B904000000          <1>     mov ecx, 4
  1567 00002C10 B406                <1>     mov ah, 06h ;Raw char output
  1568                              <1> .ansiLp:
  1569 00002C12 AC                  <1>     lodsb   ;Get the char in 
  1570 00002C13 88C2                <1>     mov dl, al
  1571 00002C15 CD21                <1>     int 21h
  1572 00002C17 FFC9                <1>     dec ecx
  1573 00002C19 75F7                <1>     jnz .ansiLp
  1574                              <1>     return
    13                              <2> %%_ret:
    14 00002C1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1575                              <1> .biosConfirmed:
  1576                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1577 00002C1C B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1578 00002C1E 31DB                <1>     xor ebx, ebx
  1579 00002C20 CD30                <1>     int 30h
  1580 00002C22 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1581 00002C24 CD30                <1>     int 30h
  1582 00002C26 53                  <1>     push rbx
  1583 00002C27 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1584 00002C2A FECA                <1>     dec dl
  1585 00002C2C B619                <1>     mov dh, 25  ;Number of rows is standard
  1586 00002C2E 31C0                <1>     xor eax, eax
  1587 00002C30 89C1                <1>     mov ecx, eax
  1588 00002C32 B707                <1>     mov bh, 7   ;Screen attributes
  1589 00002C34 B406                <1>     mov ah, 6   ;Scroll
  1590 00002C36 CD30                <1>     int 30h
  1591 00002C38 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1592 00002C3A 5B                  <1>     pop rbx
  1593 00002C3B B402                <1>     mov ah, 2
  1594 00002C3D CD30                <1>     int 30h
  1595                              <1>     return
    13                              <2> %%_ret:
    14 00002C3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1596                              <1> 
  1597                              <1> break:
  1598 00002C40 F60504D4FFFFFF      <1>     test byte [arg1Flg], -1
  1599 00002C47 752D                <1>     jnz .argumentProvided
  1600                              <1>     ;Here we just get the status of break
  1601 00002C49 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1602 00002C4E CD21                <1>     int 21h
  1603 00002C50 88D3                <1>     mov bl, dl
  1604 00002C52 488D1547D9FFFF      <1>     lea rdx, breakIs
  1605 00002C59 B409                <1>     mov ah, 09h
  1606 00002C5B CD21                <1>     int 21h
  1607 00002C5D 488D1537D9FFFF      <1>     lea rdx, onMes
  1608 00002C64 488D0D2AD9FFFF      <1>     lea rcx, offMes
  1609 00002C6B 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1610 00002C6D 480F44D1            <1>     cmovz rdx, rcx
  1611 00002C71 B409                <1>     mov ah, 09h
  1612 00002C73 CD21                <1>     int 21h
  1613                              <1>     return
    13                              <2> %%_ret:
    14 00002C75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1614                              <1> .argumentProvided:
  1615 00002C76 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1616 00002C7A AD                  <1>     lodsd   ;Read the word
  1617 00002C7B 89C3                <1>     mov ebx, eax
  1618 00002C7D 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1619 00002C82 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1620 00002C85 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1621 00002C8A 7416                <1>     je .maybeOn
  1622 00002C8C 663D4F46            <1>     cmp ax, "OF"
  1623 00002C90 7523                <1>     jne .badOnOff
  1624 00002C92 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1625 00002C97 6681FB4620          <1>     cmp bx, "F "
  1626 00002C9C 7517                <1>     jne .badOnOff
  1627                              <1>     ;Set off
  1628 00002C9E 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1629 00002CA0 EB0B                <1>     jmp short .setBreak
  1630                              <1> .maybeOn:
  1631 00002CA2 663D4F4E            <1>     cmp ax, "ON"
  1632 00002CA6 750D                <1>     jne .badOnOff
  1633                              <1>     ;Set on
  1634 00002CA8 BA01000000          <1>     mov edx, 1
  1635                              <1> .setBreak:
  1636 00002CAD B801330000          <1>     mov eax, 3301h  ;Set break
  1637 00002CB2 CD21                <1>     int 21h
  1638                              <1>     return
    13                              <2> %%_ret:
    14 00002CB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1639                              <1> .badOnOff:
  1640 00002CB5 488D15EEDAFFFF      <1>     lea rdx, badOnOff
  1641 00002CBC B409                <1>     mov ah, 09h
  1642 00002CBE CD21                <1>     int 21h
  1643                              <1>     return
    13                              <2> %%_ret:
    14 00002CC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1644                              <1> 
  1645                              <1> verify:
  1646 00002CC1 F60583D3FFFFFF      <1>     test byte [arg1Flg], -1
  1647 00002CC8 752D                <1>     jnz .argumentProvided
  1648                              <1>     ;Here we just get the status of break
  1649 00002CCA B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1650 00002CCF CD21                <1>     int 21h
  1651 00002CD1 88C3                <1>     mov bl, al
  1652 00002CD3 488D15D0D8FFFF      <1>     lea rdx, verifyIs
  1653 00002CDA B409                <1>     mov ah, 09h
  1654 00002CDC CD21                <1>     int 21h
  1655 00002CDE 488D15B6D8FFFF      <1>     lea rdx, onMes
  1656 00002CE5 488D0DA9D8FFFF      <1>     lea rcx, offMes
  1657 00002CEC 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1658 00002CEE 480F44D1            <1>     cmovz rdx, rcx
  1659 00002CF2 B409                <1>     mov ah, 09h
  1660 00002CF4 CD21                <1>     int 21h
  1661                              <1>     return
    13                              <2> %%_ret:
    14 00002CF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1662                              <1> .argumentProvided:
  1663 00002CF7 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1664 00002CFB AD                  <1>     lodsd   ;Read the word
  1665 00002CFC 89C3                <1>     mov ebx, eax
  1666 00002CFE 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1667 00002D03 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1668 00002D06 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1669 00002D0B 7416                <1>     je .maybeOn
  1670 00002D0D 663D4F46            <1>     cmp ax, "OF"
  1671 00002D11 751F                <1>     jne .badOnOff
  1672 00002D13 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1673 00002D18 6681FB4620          <1>     cmp bx, "F "
  1674 00002D1D 7513                <1>     jne .badOnOff
  1675                              <1>     ;Set off
  1676 00002D1F 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1677 00002D21 EB0A                <1>     jmp short .setVerify
  1678                              <1> .maybeOn:
  1679 00002D23 663D4F4E            <1>     cmp ax, "ON"
  1680 00002D27 7509                <1>     jne .badOnOff
  1681                              <1>     ;Set on
  1682 00002D29 31C0                <1>     xor eax, eax
  1683 00002D2B FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1684                              <1> .setVerify:
  1685 00002D2D B42E                <1>     mov ah, 2Eh  ;Set Verify
  1686 00002D2F CD21                <1>     int 21h
  1687                              <1>     return
    13                              <2> %%_ret:
    14 00002D31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1688                              <1> .badOnOff:
  1689 00002D32 488D1571DAFFFF      <1>     lea rdx, badOnOff
  1690 00002D39 B409                <1>     mov ah, 09h
  1691 00002D3B CD21                <1>     int 21h
  1692                              <1>     return
    13                              <2> %%_ret:
    14 00002D3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1693                              <1> 
  1694                              <1> rename:
  1695 00002D3E F60506D3FFFFFF      <1>     test byte [arg1Flg], -1
  1696 00002D45 0F845EECFFFF        <1>     jz badArgError
  1697 00002D4B F605FCD2FFFFFF      <1>     test byte [arg2Flg], -1
  1698 00002D52 0F8451ECFFFF        <1>     jz badArgError    
  1699                              <1>     ;Initialise the variables!
  1700 00002D58 488D35(89060000)    <1>     lea rsi, srcSpec
  1701 00002D5F 488935(8D070000)    <1>     mov qword [srcPtr], rsi
  1702 00002D66 488D35(0B070000)    <1>     lea rsi, destSpec
  1703 00002D6D 488935(95070000)    <1>     mov qword [destPtr], rsi
  1704                              <1>     ;Check the second path is just a filename!
  1705 00002D74 0FB605D4D2FFFF      <1>     movzx eax, byte [arg2Off]
  1706 00002D7B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1707 00002D82 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1708 00002D85 488D3D(E8040000)    <1>     lea rdi, searchSpec
  1709 00002D8C 57                  <1>     push rdi
  1710 00002D8D E886130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1711 00002D92 5F                  <1>     pop rdi
  1712 00002D93 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1713 00002D97 0F840CECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1714                              <1> ;Check if a drive specifier has been given
  1715 00002D9D 0FB605A8D2FFFF      <1>     movzx eax, byte [arg1Off]
  1716 00002DA4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1717 00002DAB 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1718 00002DAE 66AD                <1>     lodsw   ;Get the first two chars
  1719 00002DB0 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1720 00002DB3 752A                <1>     jne .curDrvSrc
  1721                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1722 00002DB5 488B35(8D070000)    <1>     mov rsi, qword [srcPtr]
  1723 00002DBC 668906              <1>     mov word [rsi], ax
  1724 00002DBF 488105(8D070000)02- <1>     add qword [srcPtr], 2   
  1724 00002DC7 000000              <1>
  1725 00002DCA 488B35(95070000)    <1>     mov rsi, qword [destPtr]
  1726 00002DD1 668906              <1>     mov word [rsi], ax
  1727 00002DD4 488105(95070000)02- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1727 00002DDC 000000              <1>
  1728                              <1> .curDrvSrc:
  1729 00002DDF 4889FE              <1>     mov rsi, rdi
  1730                              <1> .destScan:
  1731 00002DE2 AC                  <1>     lodsb   ;Get the char
  1732 00002DE3 3A0521D2FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1733 00002DE9 0F84BAEBFFFF        <1>     je badArgError
  1734 00002DEF 84C0                <1>     test al, al
  1735 00002DF1 75EF                <1>     jnz .destScan
  1736                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1737 00002DF3 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1738 00002DF7 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1738 00002E00 3F                  <1>
  1739 00002E01 B903000000          <1>     mov ecx, 3  ;24 bytes
  1740 00002E06 F348AB              <1>     rep stosq
  1741 00002E09 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1742 00002E0A 488D35(E8040000)    <1>     lea rsi, searchSpec
  1743 00002E11 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1744 00002E15 B80D290000          <1>     mov eax, 290Dh
  1745 00002E1A CD21                <1>     int 21h     
  1746 00002E1C 50                  <1>     push rax    ;Save the WC signature
  1747 00002E1D E839130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1748 00002E22 488D3D(E8040000)    <1>     lea rdi, searchSpec
  1749 00002E29 E870120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1750 00002E2E 4889FE              <1>     mov rsi, rdi
  1751 00002E31 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1752 00002E34 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1753 00002E38 B80D290000          <1>     mov eax, 290Dh
  1754 00002E3D CD21                <1>     int 21h
  1755 00002E3F 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1756 00002E40 88CC                <1>     mov ah, cl
  1757 00002E42 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1758 00002E45 0F84E6000000        <1>     jz .noWC
  1759 00002E4B 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1760 00002E4D 0F8456EBFFFF        <1>     je badArgError
  1761 00002E53 488D35(E8040000)    <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1762                              <1>     ;Now we check if we have a path to actually handle
  1763 00002E5A 4839F3              <1>     cmp rbx, rsi
  1764 00002E5D 7444                <1>     je .noPath
  1765 00002E5F C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1766 00002E63 488D35(E8040000)    <1>     lea rsi, searchSpec
  1767 00002E6A 488B3D(89060000)    <1>     mov rdi, qword [srcSpec]
  1768 00002E71 56                  <1>     push rsi
  1769 00002E72 E832110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1770 00002E77 5E                  <1>     pop rsi
  1771 00002E78 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1772 00002E7B 8A0589D1FFFF        <1>     mov al, byte [pathSep]
  1773 00002E81 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1774 00002E82 48893D(8D070000)    <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1775 00002E89 488B3D(95070000)    <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1776 00002E90 E814110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1777 00002E95 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1778 00002E98 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1779 00002E99 48893D(95070000)    <1>     mov qword [destPtr], rdi
  1780 00002EA0 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1781                              <1> .noPath:
  1782                              <1>     ;Now we have where to copy the files to, we can start our work!
  1783 00002EA3 488D15(E8040000)    <1>     lea rdx, searchSpec
  1784 00002EAA 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1785 00002EAC B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1786 00002EB1 CD21                <1>     int 21h
  1787 00002EB3 0F8202EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1788                              <1> .wcLoop:
  1789                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1790 00002EB9 488D35(8C010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1791 00002EC0 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1792 00002EC4 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1793 00002EC9 CD21                <1>     int 21h 
  1794                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1795 00002ECB 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1796 00002ECF 488D3D(9D070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
  1797 00002ED6 57                  <1>     push rdi
  1798 00002ED7 48A5                <1>     movsq
  1799 00002ED9 66A5                <1>     movsw
  1800 00002EDB A4                  <1>     movsb
  1801 00002EDC 5F                  <1>     pop rdi
  1802 00002EDD 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1803 00002EE1 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1804                              <1> .wcNameMake:
  1805 00002EE6 AC                  <1>     lodsb   ;Get the char from the source string
  1806 00002EE7 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1807 00002EEA 7502                <1>     jne .noStore    ;Dont store the char there
  1808 00002EEC 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1809                              <1> .noStore:
  1810 00002EEE 48FFC7              <1>     inc rdi ;Goto next char position
  1811 00002EF1 FFC9                <1>     dec ecx
  1812 00002EF3 75F1                <1>     jnz .wcNameMake
  1813                              <1> ;renName now has the FCB name for the file we wish to make!
  1814                              <1> ;Now make the two paths!
  1815 00002EF5 488D35(8C010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1816 00002EFC 488B3D(8D070000)    <1>     mov rdi, qword [srcPtr]
  1817 00002F03 E8A1100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1818 00002F08 488D35(9D070000)    <1>     lea rsi, renName
  1819 00002F0F 488B3D(95070000)    <1>     mov rdi, qword [destPtr]
  1820 00002F16 E8A7110000          <1>     call FCBToAsciiz
  1821 00002F1B 488D15(89060000)    <1>     lea rdx, srcSpec
  1822 00002F22 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1823 00002F27 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1824 00002F2C CD21                <1>     int 21h
  1825 00002F2E 7389                <1>     jnc .wcLoop     ;And process it too!
  1826                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002F30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1827                              <1> .noWC:
  1828 00002F31 E825120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1829 00002F36 0FB60512D1FFFF      <1>     movzx eax, byte [arg2Off]
  1830 00002F3D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1831 00002F44 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1832 00002F47 488B3D(95070000)    <1>     mov rdi, qword [destPtr]    
  1833 00002F4E E8C5110000          <1>     call cpDelimPathToBufz
  1834 00002F53 488D15(E8040000)    <1>     lea rdx, searchSpec
  1835 00002F5A E807000000          <1>     call .ren
  1836                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002F5F 73(30)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1837 00002F61 E955EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1838                              <1> .ren:
  1839 00002F66 488D3D(0B070000)    <1>     lea rdi, destSpec
  1840 00002F6D B800560000          <1>     mov eax, 5600h
  1841 00002F72 CD21                <1>     int 21h
  1842                              <1>     return
    13                              <2> %%_ret:
    14 00002F74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1843                              <1> 
  1844                              <1> truename:
  1845 00002F75 F605CFD0FFFFFF      <1>     test byte [arg1Flg], -1
  1846 00002F7C 0F8427EAFFFF        <1>     jz badArgError
  1847 00002F82 E8D4110000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1848 00002F87 488D35(E8040000)    <1>     lea rsi, searchSpec     ;Store the path here
  1849 00002F8E 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1850 00002F91 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1851 00002F96 CD21                <1>     int 21h
  1852 00002F98 730D                <1>     jnc .writePath
  1853 00002F9A 3C02                <1>     cmp al, errFnf
  1854 00002F9C 0F8410EAFFFF        <1>     je badFileError
  1855 00002FA2 E9F0E9FFFF          <1>     jmp badParamError
  1856                              <1> .writePath:
  1857 00002FA7 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1858 00002FAA B9FFFFFFFF          <1>     mov ecx, -1
  1859 00002FAF 30C0                <1>     xor al, al
  1860 00002FB1 F2AE                <1>     repne scasb     ;Get the new len
  1861 00002FB3 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1862 00002FB5 FFC9                <1>     dec ecx
  1863 00002FB7 BB01000000          <1>     mov ebx, 01
  1864 00002FBC B440                <1>     mov ah, 40h
  1865 00002FBE CD21                <1>     int 21h
  1866 00002FC0 E8D00D0000          <1>     call printCRLF
  1867                              <1>     return
    13                              <2> %%_ret:
    14 00002FC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1868                              <1> 
  1869                              <1> volume:
  1870                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1871 00002FC6 F60581D0FFFFFF      <1>     test byte [arg2Flg], -1
  1872 00002FCD 0F85D6E9FFFF        <1>     jnz badArgError
  1873 00002FD3 F60571D0FFFFFF      <1>     test byte [arg1Flg], -1
  1874 00002FDA 7507                <1>     jnz .notCurrentDrive
  1875 00002FDC E8C30F0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1876 00002FE1 EB31                <1>     jmp short .dirEP
  1877                              <1> .notCurrentDrive:
  1878 00002FE3 E873110000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1879 00002FE8 488D35(E8040000)    <1>     lea rsi, searchSpec
  1880 00002FEF E8F30F0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1881 00002FF4 66AD                <1>     lodsw                   ;Get this word
  1882 00002FF6 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1883 00002FF9 0F85AAE9FFFF        <1>     jne badArgError
  1884 00002FFF 8A0548D0FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1885 00003005 A8FF                <1>     test al, -1
  1886 00003007 0F8593E9FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1887 0000300D 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1888 00003012 FFC8                <1>     dec eax ;Convert to 0 based number
  1889                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1890 00003014 488D15F5CFFFFF      <1>     lea rdx, volFcb
  1891 0000301B FFC0                <1>     inc eax ;Get 1 based drive number
  1892 0000301D 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1893 0000301F 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1894 00003022 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1895 00003027 CD21                <1>     int 21h
  1896 00003029 50                  <1>     push rax
  1897                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1898 0000302A 488D1536D1FFFF      <1>     lea rdx, crlf
  1899 00003031 B409                <1>     mov ah, 09h
  1900 00003033 CD21                <1>     int 21h
  1901 00003035 488D15EBD3FFFF      <1>     lea rdx, volMes
  1902 0000303C B409                <1>     mov ah, 09h
  1903 0000303E CD21                <1>     int 21h
  1904 00003040 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1905 00003042 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1906 00003045 B402                <1>     mov ah, 02h
  1907 00003047 CD21                <1>     int 21h
  1908 00003049 58                  <1>     pop rax
  1909 0000304A 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1910 0000304C 7409                <1>     jz .volIDOk
  1911 0000304E 488D15E9D3FFFF      <1>     lea rdx, volNo
  1912 00003055 EB19                <1>     jmp short .volEndPrint
  1913                              <1> .volIDOk:
  1914 00003057 488D15DBD3FFFF      <1>     lea rdx, volOk
  1915 0000305E B409                <1>     mov ah, 09h
  1916 00003060 CD21                <1>     int 21h
  1917 00003062 C605(81010000)24    <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1918 00003069 488D15(76010000)    <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1919                              <1> .volEndPrint:
  1920 00003070 B409                <1>     mov ah, 09h
  1921 00003072 CD21                <1>     int 21h
  1922 00003074 488D15ECD0FFFF      <1>     lea rdx, crlf
  1923 0000307B B409                <1>     mov ah, 09h
  1924 0000307D CD21                <1>     int 21h
  1925                              <1>     return
    13                              <2> %%_ret:
    14 0000307F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1926                              <1> 
  1927                              <1> version:
  1928 00003080 488D15E0D0FFFF      <1>     lea rdx, crlf
  1929 00003087 B409                <1>     mov ah, 09h
  1930 00003089 CD21                <1>     int 21h
  1931 0000308B 488D1583D3FFFF      <1>     lea rdx, dosVer
  1932 00003092 B409                <1>     mov ah, 09h
  1933 00003094 CD21                <1>     int 21h
  1934 00003096 E80C000000          <1>     call .printVersionNumber
  1935 0000309B 488D15C5D0FFFF      <1>     lea rdx, crlf
  1936 000030A2 B409                <1>     mov ah, 09h
  1937 000030A4 CD21                <1>     int 21h
  1938                              <1>     return
    13                              <2> %%_ret:
    14 000030A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1939                              <1> .printVersionNumber:
  1940 000030A7 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1941 000030A9 CD21                <1>     int 21h
  1942 000030AB 50                  <1>     push rax
  1943 000030AC 0FB6C0              <1>     movzx eax, al
  1944 000030AF E880110000          <1>     call printDecimalWord
  1945 000030B4 B22E                <1>     mov dl, "."
  1946 000030B6 B402                <1>     mov ah, 02h
  1947 000030B8 CD21                <1>     int 21h
  1948 000030BA 58                  <1>     pop rax
  1949 000030BB 0FB6C4              <1>     movzx eax, ah
  1950 000030BE E871110000          <1>     call printDecimalWord
  1951                              <1>     return
    13                              <2> %%_ret:
    14 000030C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1952                              <1> 
  1953                              <1> 
  1954                              <1> memory:
  1955 000030C4 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  1956 000030C9 CD21                <1>     int 21h
  1957 000030CB 4885DB              <1>     test rbx, rbx
  1958 000030CE 7510                <1>     jnz .sysvarsOK
  1959 000030D0 488D153AD6FFFF      <1>     lea rdx, memBad0
  1960 000030D7 B409                <1>     mov ah, 09h
  1961 000030D9 CD21                <1>     int 21h
  1962 000030DB E9FC110000          <1>     jmp freezePC.altEP
  1963                              <1> .sysvarsOK:
  1964                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1965                              <1>     ; and rcx to store Application memory
  1966 000030E0 31F6                <1>     xor esi, esi
  1967 000030E2 31FF                <1>     xor edi, edi
  1968 000030E4 31ED                <1>     xor ebp, ebp
  1969 000030E6 31C9                <1>     xor ecx, ecx
  1970 000030E8 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1971 000030EC 488B1B              <1>     mov rbx, qword [rbx]
  1972                              <1> .memLp:
  1973 000030EF 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1974 000030F2 7409                <1>     je .validMCB
  1975 000030F4 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1976 000030F7 0F8506010000        <1>     jne .badMCBFound
  1977                              <1> .validMCB:
  1978 000030FD 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1979 00003100 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1980 00003104 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1981 0000310C 7505                <1>     jne .notDOS
  1982 0000310E 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1983 00003111 EB21                <1>     jmp short .gotoNext
  1984                              <1> .notDOS:
  1985 00003113 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1986 0000311B 7505                <1>     jne .notFree
  1987 0000311D 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1988 00003120 EB12                <1>     jmp short .gotoNext
  1989                              <1> .notFree:
  1990 00003122 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1991 0000312A 7505                <1>     jne .notHole
  1992 0000312C 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1993 0000312F EB03                <1>     jmp short .gotoNext
  1994                              <1> .notHole:
  1995 00003131 4801C1              <1>     add rcx, rax    ;Add to Application count
  1996                              <1> .gotoNext:
  1997 00003134 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1998 00003137 7407                <1>     je .endOfWalk
  1999 00003139 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2000 0000313E EBAF                <1>     jmp short .memLp
  2001                              <1> .endOfWalk:
  2002                              <1>     
  2003 00003140 488D152BD5FFFF      <1>     lea rdx, memDOS
  2004 00003147 B409                <1>     mov ah, 09h
  2005 00003149 CD21                <1>     int 21h
  2006 0000314B 4889F0              <1>     mov rax, rsi
  2007 0000314E E89D000000          <1>     call .mcbPrintAmount
  2008 00003153 488D15B0D5FFFF      <1>     lea rdx, memByte
  2009 0000315A B409                <1>     mov ah, 09h
  2010 0000315C CD21                <1>     int 21h
  2011                              <1> 
  2012 0000315E 4885ED              <1>     test rbp, rbp
  2013 00003161 741E                <1>     jz .skipHole
  2014 00003163 488D1554D5FFFF      <1>     lea rdx, memHole
  2015 0000316A B409                <1>     mov ah, 09h
  2016 0000316C CD21                <1>     int 21h
  2017 0000316E 4889E8              <1>     mov rax, rbp
  2018 00003171 E87A000000          <1>     call .mcbPrintAmount
  2019 00003176 488D158DD5FFFF      <1>     lea rdx, memByte
  2020 0000317D B409                <1>     mov ah, 09h
  2021 0000317F CD21                <1>     int 21h
  2022                              <1> .skipHole:
  2023                              <1> 
  2024 00003181 488D1510D5FFFF      <1>     lea rdx, memApp
  2025 00003188 B409                <1>     mov ah, 09h
  2026 0000318A CD21                <1>     int 21h
  2027 0000318C 4889C8              <1>     mov rax, rcx
  2028 0000318F E85C000000          <1>     call .mcbPrintAmount
  2029 00003194 488D156FD5FFFF      <1>     lea rdx, memByte
  2030 0000319B B409                <1>     mov ah, 09h
  2031 0000319D CD21                <1>     int 21h
  2032                              <1> 
  2033 0000319F 488D153ED5FFFF      <1>     lea rdx, memFree
  2034 000031A6 B409                <1>     mov ah, 09h
  2035 000031A8 CD21                <1>     int 21h
  2036 000031AA 4889F8              <1>     mov rax, rdi
  2037 000031AD E83E000000          <1>     call .mcbPrintAmount
  2038 000031B2 488D1551D5FFFF      <1>     lea rdx, memByte
  2039 000031B9 B409                <1>     mov ah, 09h
  2040 000031BB CD21                <1>     int 21h
  2041                              <1> 
  2042 000031BD 488D1588D4FFFF      <1>     lea rdx, memSys
  2043 000031C4 B409                <1>     mov ah, 09h
  2044 000031C6 CD21                <1>     int 21h
  2045 000031C8 4889F0              <1>     mov rax, rsi
  2046 000031CB 4801F8              <1>     add rax, rdi
  2047 000031CE 4801C8              <1>     add rax, rcx
  2048 000031D1 4801E8              <1>     add rax, rbp
  2049 000031D4 E817000000          <1>     call .mcbPrintAmount
  2050 000031D9 488D152AD5FFFF      <1>     lea rdx, memByte
  2051 000031E0 B409                <1>     mov ah, 09h
  2052 000031E2 CD21                <1>     int 21h
  2053                              <1> 
  2054 000031E4 488D157CCFFFFF      <1>     lea rdx, crlf
  2055 000031EB B409                <1>     mov ah, 09h
  2056 000031ED CD21                <1>     int 21h
  2057                              <1>     return
    13                              <2> %%_ret:
    14 000031EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2058                              <1> 
  2059                              <1> .mcbPrintAmount:
  2060 000031F0 51                  <1>     push rcx
  2061 000031F1 56                  <1>     push rsi
  2062 000031F2 57                  <1>     push rdi
  2063 000031F3 55                  <1>     push rbp
  2064 000031F4 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2065 000031F9 E8960F0000          <1>     call printDecimalValLB
  2066 000031FE 5D                  <1>     pop rbp
  2067 000031FF 5F                  <1>     pop rdi
  2068 00003200 5E                  <1>     pop rsi
  2069 00003201 59                  <1>     pop rcx
  2070                              <1>     return
    13                              <2> %%_ret:
    14 00003202 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2071                              <1> .badMCBFound:
  2072 00003203 488D1547D5FFFF      <1>     lea rdx, memBad2
  2073 0000320A B409                <1>     mov ah, 09h
  2074 0000320C CD21                <1>     int 21h
  2075 0000320E E9C9100000          <1>     jmp freezePC.altEP
  2076                              <1> 
  2077                              <1> type:
  2078 00003213 F60531CEFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2079 0000321A 0F8489E7FFFF        <1>     jz badArgError
  2080 00003220 F60527CEFFFFFF      <1>     test byte [arg2Flg], -1
  2081 00003227 0F857CE7FFFF        <1>     jnz badArgError         ;If this set, error
  2082 0000322D 4C8B05CCCDFFFF      <1>     mov r8, [pPSP]
  2083 00003234 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2084 0000323B 0FB6050ACEFFFF      <1>     movzx eax, byte [arg1Off]
  2085 00003242 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2086 00003245 803E0D              <1>     cmp byte [rsi], CR
  2087 00003248 0F845BE7FFFF        <1>     je badArgError
  2088 0000324E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2089 00003252 750F                <1>     jne .noDrive
  2090 00003254 0FB605F2CDFFFF      <1>     movzx eax, byte [arg1FCBret]
  2091 0000325B 3CFF                <1>     cmp al, -1
  2092 0000325D 0F843DE7FFFF        <1>     je badDriveError
  2093                              <1> .noDrive:
  2094                              <1>     ;Now we open the provided file
  2095 00003263 E8F30E0000          <1>     call buildCommandPath
  2096 00003268 488D15(E8040000)    <1>     lea rdx, searchSpec
  2097 0000326F B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2098 00003274 CD21                <1>     int 21h
  2099 00003276 0F8236E7FFFF        <1>     jc badFileError
  2100 0000327C 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2101 00003283 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2102                              <1> .lp:
  2103 00003286 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2104 0000328B B43F                <1>     mov ah, 3Fh ;Read handle
  2105 0000328D CD21                <1>     int 21h
  2106 0000328F 89C1                <1>     mov ecx, eax
  2107 00003291 67E317              <1>     jecxz .exit
  2108 00003294 53                  <1>     push rbx    ;Save the original in handle
  2109 00003295 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2110 0000329A B440                <1>     mov ah, 40h
  2111 0000329C CD21                <1>     int 21h
  2112 0000329E 5B                  <1>     pop rbx ;Get back the original read handle
  2113 0000329F 720F                <1>     jc .exitBad
  2114 000032A1 39C8                <1>     cmp eax, ecx
  2115 000032A3 74E1                <1>     je .lp
  2116 000032A5 FFC9                <1>     dec ecx ;One less for a ^Z
  2117 000032A7 39C8                <1>     cmp eax, ecx
  2118 000032A9 7505                <1>     jne .exitBad
  2119                              <1> .exit:
  2120 000032AB B43E                <1>     mov ah, 3Eh ;Close handle
  2121 000032AD CD21                <1>     int 21h
  2122                              <1>     return
    13                              <2> %%_ret:
    14 000032AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2123                              <1> .exitBad:
  2124                              <1>     ;If it is a char device, don't print an error
  2125 000032B0 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2126 000032B5 BB01000000          <1>     mov ebx, 1
  2127 000032BA CD21                <1>     int 21h
  2128 000032BC F6C280              <1>     test dl, devCharDev
  2129                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000032BF 75(AF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2130 000032C1 E988E6FFFF          <1>     jmp badDiskFull
  2131                              <1> 
  2132                              <1> exit:
  2133 000032C6 F605(1A000000)01    <1>     test byte [statFlg1], permaShell
  2134 000032CD 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2135 000032CF F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2136 000032D6 0F8597E1FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2137                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 000032DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2138                              <1> .ouch:
  2139 000032DD B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2140 000032E2 CD21                <1>     int 21h
  2141                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000032E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2142                              <1> 
  2143                              <1> launchChild:
  2144                              <1>     ;We execute an external command here.
  2145                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2146                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2147                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2148                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2149                              <1>     ;We know the drive we are on is valid so no need to double check that!      
  2150                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2151 000032E5 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
  2152 000032EC 4889FE              <1>     mov rsi, rdi
  2153 000032EF B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2154 000032F4 CD2F                <1>     int 2fh
  2155 000032F6 E8A30D0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2156 000032FB 4889FE              <1>     mov rsi, rdi    ;Source here
  2157 000032FE 488D3D(5E010000)    <1>     lea rdi, cmdFcb
  2158 00003305 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2159 0000330A CD21                <1>     int 21h
  2160 0000330C 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2161 0000330E 0F85C5E6FFFF        <1>     jnz badCmdError
  2162 00003314 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2163                              <1> .pathLoop:
  2164 00003317 488D35(67010000)    <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2165 0000331E 488D3DA6D4FFFF      <1>     lea rdi, extStr
  2166 00003325 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2167                              <1> .extLp:
  2168 0000332A 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2169 0000332B B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2170 00003330 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2171 00003332 5E                  <1>     pop rsi
  2172 00003333 85C9                <1>     test ecx, ecx
  2173 00003335 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2174 00003337 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2175 0000333A FFCA                <1>     dec edx         ;Else one less extension type to check
  2176 0000333C 75EC                <1>     jnz .extLp
  2177                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2178                              <1>     ;If not, error.
  2179 0000333E B903000000          <1>     mov ecx, 3
  2180 00003343 4889F7              <1>     mov rdi, rsi
  2181 00003346 B020                <1>     mov al, SPC
  2182 00003348 F3AE                <1>     rep scasb   
  2183 0000334A 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2184 0000334C 0F8587E6FFFF        <1>     jnz badCmdError    ;If not, error!
  2185                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2186 00003352 488D3572D4FFFF      <1>     lea rsi, extStr
  2187 00003359 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2188                              <1> .extSrchLp:
  2189 0000335E 488D3D(67010000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2190 00003365 B903000000          <1>     mov ecx, 3
  2191 0000336A F3A4                <1>     rep movsb   ;Copy the extension over!
  2192 0000336C E83F010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2193 00003371 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2194 00003373 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2195 00003375 75E7                <1>     jnz .extSrchLp
  2196                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2197                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2198                              <1> ; by setting the fcb extension back to all spaces.
  2199 00003377 488D3D(67010000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2200 0000337E B903000000          <1>     mov ecx, 3
  2201 00003383 B020                <1>     mov al, SPC
  2202 00003385 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2203 00003387 EB69                <1>     jmp short .pathHandle
  2204                              <1> .extFnd:
  2205                              <1> ;Here if the file had the right extension.
  2206 00003389 E822010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2207 0000338E 7262                <1>     jc .pathHandle
  2208                              <1> .extSrchFnd:
  2209                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2210                              <1> ; a BAT. If it is, separate handling!
  2211 00003390 803D(67010000)42    <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2212 00003397 0F843DE1FFFF        <1>     je batLaunch
  2213 0000339D 488D1D(99010000)    <1>     lea rbx, launchBlock
  2214 000033A4 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2215 000033A8 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2216 000033AB 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2217 000033B2 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2218 000033B6 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2219 000033BA 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2220 000033BE 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2221 000033C2 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2222 000033C6 488D15(3F030000)    <1>     lea rdx, cmdPathSpec
  2223 000033CD B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2224 000033D2 CD21                <1>     int 21h
  2225                              <1> ;If the program failed to start, verify why!
  2226 000033D4 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2227 000033D9 31DB                <1>     xor ebx, ebx
  2228 000033DB CD21                <1>     int 21h
  2229                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2230                              <1> ; The below doesnt make any sense. Retcode is
  2231                              <1> ; is not the DOS error code.
  2232                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2233                              <1>     ;mov word [returnCode], ax   ;Error code from EXEC
  2234                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  2235 000033DD 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2236 000033DF 0F84A9E5FFFF        <1>     je badAccError
  2237 000033E5 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2238 000033E7 0F84E40E0000        <1>     je freezePC
  2239 000033ED E9E7E5FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2240                              <1> .pathHandle:        
  2241                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2242                              <1> ;al has error code!
  2243 000033F2 4885ED              <1>     test rbp, rbp
  2244 000033F5 0F85A3000000        <1>     jnz .pathReentry
  2245                              <1> ;Now check if the command we recieved included an absolute path.
  2246                              <1> ;If so, we don't do path substitution and just fail at this point
  2247 000033FB 488D35(3F030000)    <1>     lea rsi, cmdPathSpec
  2248 00003402 66AD                <1>     lodsw   ;Get the first two chars
  2249 00003404 3A0500CCFFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2250 0000340A 0F84C9E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2251 00003410 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2252 00003412 7412                <1>     je .pathGetEnv
  2253 00003414 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2254 00003417 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2255 00003419 AC                  <1>     lodsb   ;Get the third char
  2256 0000341A 3A05EACBFFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2257 00003420 0F84B3E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2258                              <1> .pathGetEnv:
  2259                              <1> ;Now get a pointer to the environment and search for PATH=
  2260                              <1> ;We only take the final portion of the path and add it to each path componant
  2261                              <1> ;This agrees with DOS 3.3
  2262 00003426 E84E0F0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2263 0000342B 0F84A8E5FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2264                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2265                              <1>     ;Now we know we dont have to keep track of chars!!
  2266 00003431 488D3DB5D3FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2267 00003438 E8960F0000          <1>     call searchForEnvVar
  2268 0000343D 0F8296E5FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2269 00003443 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2270 00003446 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2271                              <1> .pathRejoin:
  2272 0000344D 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2273 00003450 0F8483E5FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2274 00003456 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2275 00003459 488D3D(E8040000)    <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2276                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2277                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2278                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2279                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2280 00003460 E89D0C0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2281 00003465 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2282 00003468 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2283 0000346B 48FFCF              <1>     dec rdi ;Point to the null terminator
  2284 0000346E 8A0596CBFFFF        <1>     mov al, byte [pathSep]
  2285 00003474 3847FF              <1>     cmp byte [rdi - 1], al
  2286 00003477 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2287 00003479 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2288                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2289 0000347A 488D35(5F010000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2290 00003481 E83C0C0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2291 00003486 488D35(E8040000)    <1>     lea rsi, searchSpec 
  2292 0000348D 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec
  2293 00003494 E8100B0000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2294 00003499 E979FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2295                              <1> .pathReentry:
  2296 0000349E 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2297 000034A2 0F8431E5FFFF        <1>     je badCmdError
  2298                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2299                              <1> ;Not really a big deal...
  2300                              <1>     ;cmp al, errBadDrv
  2301                              <1>     ;jne .pathDrvOk
  2302                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2303                              <1>     ;mov eax, 0900h
  2304                              <1>     ;int 21h
  2305                              <1> ;.pathDrvOk:
  2306 000034A8 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2307 000034AB 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2308 000034AE EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2309                              <1> 
  2310                              <1> .prepAndSearch:
  2311                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2312                              <1> ;cmdPathSpec and null terminates. 
  2313                              <1> ;Input: cmdFcb name + ext setup. 
  2314                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2315                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2316 000034B0 51                  <1>     push rcx
  2317 000034B1 56                  <1>     push rsi
  2318 000034B2 57                  <1>     push rdi
  2319 000034B3 488D3D(3F030000)    <1>     lea rdi, cmdPathSpec 
  2320 000034BA 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2321 000034BD E8DC0B0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2322 000034C2 807F013A            <1>     cmp byte [rdi + 1], ":"
  2323 000034C6 7507                <1>     jne .notdriveRel
  2324 000034C8 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2325                              <1> .notdriveRel:
  2326 000034CF 488D35(5F010000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2327 000034D6 E8E70B0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2328 000034DB B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2329 000034E0 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2330 000034E2 CD21                <1>     int 21h
  2331 000034E4 5F                  <1>     pop rdi
  2332 000034E5 5E                  <1>     pop rsi
  2333 000034E6 59                  <1>     pop rcx
  2334                              <1>     return
    13                              <2> %%_ret:
    14 000034E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2335                              <1> 
  2336                              <1> set:
  2337 000034E8 F6055CCBFFFFFF      <1>     test byte [arg1Flg], -1
  2338 000034EF 7539                <1>     jnz .editEnv
  2339                              <1>     ;Here we just print the environment.
  2340 000034F1 E8830E0000          <1>     call checkEnvGoodAndGet 
  2341 000034F6 0F8489E4FFFF        <1>     jz badEnvSpaceError
  2342                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2343 000034FC 4889F7              <1>     mov rdi, rsi
  2344 000034FF 4889F2              <1>     mov rdx, rsi
  2345                              <1> .findLp:
  2346 00003502 B9FFFFFFFF          <1>     mov ecx, -1
  2347 00003507 31C0                <1>     xor eax, eax
  2348                              <1> .scanLp:
  2349 00003509 F2AE                <1>     repne scasb
  2350 0000350B 75FC                <1>     jne .scanLp
  2351 0000350D F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2352                              <1>     ;Else, we now print this environment variable and CRLF it
  2353                              <1>     ;rdx points to the start of the string aleady
  2354                              <1>     ;ecx has the bytes to print
  2355 0000350F BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2356 00003514 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2357 00003519 CD21                <1>     int 21h
  2358 0000351B E875080000          <1>     call printCRLF
  2359 00003520 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2360                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003523 74(E7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2361 00003525 4889FA              <1>     mov rdx, rdi   
  2362 00003528 EBD8                <1>     jmp short .findLp
  2363                              <1> .editEnv:
  2364 0000352A E84A0E0000          <1>     call checkEnvGoodAndGet
  2365 0000352F 0F8450E4FFFF        <1>     jz badEnvSpaceError
  2366 00003535 0FB60510CBFFFF      <1>     movzx eax, byte [arg1Off]
  2367 0000353C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2368 00003543 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2369                              <1> .altEp:
  2370 00003546 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2371 00003549 B00D                <1>     mov al, CR              ;Search for the CR
  2372 0000354B 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2373 00003553 89CB                <1>     mov ebx, ecx            ;Save this count 
  2374 00003555 53                  <1>     push rbx                ;Save this count on the stack too!
  2375 00003556 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2376 00003558 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2377 0000355A 66891D(BE070000)    <1>     mov word [envVarSz], bx ;Store the count
  2378 00003561 59                  <1>     pop rcx                 ;Get the char count back!
  2379 00003562 89CB                <1>     mov ebx, ecx            
  2380 00003564 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2381 00003567 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2382 00003569 F2AE                <1>     repne scasb
  2383 0000356B 0F850BE4FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2384 00003571 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2385 00003573 66891D(C0070000)    <1>     mov word [envVarNamSz], bx
  2386 0000357A 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2387 0000357D 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2388 0000357F 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2389 00003580 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2390 00003583 E84B0E0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2391 00003588 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2392 0000358A E8720E0000          <1>     call envFree            ;Free the var in rsi
  2393                              <1> .editNewEnv:
  2394 0000358F E8A60E0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2395 00003594 E8C60E0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2396 00003599 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2397 0000359A 31C0                <1>     xor eax, eax            ;Prepare null length!
  2398 0000359C 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2399 000035A2 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2400 000035A5 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2401 000035A7 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2402 000035A9 663B0D(BE070000)    <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2403 000035B0 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2404                              <1> .reallocTry:
  2405                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2406                              <1>     ; we proceed with the environment size.
  2407 000035B2 E8BD0E0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2408 000035B7 7319                <1>     jnc .reallocOk
  2409 000035B9 0F84C6E3FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2410                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2411                              <1>     ; partially the variable into the env. If so we do that. If the name
  2412                              <1>     ; cannot fit, we don't bother
  2413                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2414 000035BF 663B0D(C0070000)    <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2415                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000035C6 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000035C8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2416 000035C9 E8B7E3FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2417 000035CE FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2418 000035D0 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2419                              <1> .reallocOk:
  2420                              <1>     ;Here we have all the space to just copy the full path
  2421 000035D2 0FB70D(BE070000)    <1>     movzx ecx, word [envVarSz]
  2422                              <1> .nameCp:
  2423                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2424                              <1> ;Always enough memory for name= here
  2425 000035D9 AC                  <1>     lodsb
  2426 000035DA E8ED090000          <1>     call ucChar
  2427 000035DF AA                  <1>     stosb
  2428 000035E0 66FFC9              <1>     dec cx      ;Always decrement this count
  2429 000035E3 3C3D                <1>     cmp al, "="
  2430 000035E5 75F2                <1>     jne .nameCp
  2431                              <1> .exitNameCp:
  2432 000035E7 AC                  <1>     lodsb
  2433 000035E8 3C0D                <1>     cmp al, CR
  2434 000035EA 7405                <1>     je .exitCp
  2435 000035EC AA                  <1>     stosb
  2436 000035ED FFC9                <1>     dec ecx
  2437 000035EF 75F6                <1>     jnz .exitNameCp
  2438                              <1> .exitCp:
  2439 000035F1 31C0                <1>     xor eax, eax
  2440 000035F3 66AB                <1>     stosw   ;Store the final null word
  2441                              <1>     return
    13                              <2> %%_ret:
    14 000035F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2442                              <1> .delEnvVar:
  2443                              <1>     ;rsi -> Start of the envvar name in user buffer
  2444 000035F6 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2445 000035F9 E8D50D0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2446 000035FE 7205                <1>     jc .delEnvVarSkip
  2447 00003600 E8FC0D0000          <1>     call envFree    ;Free the env var at rsi
  2448                              <1> .delEnvVarSkip:
  2449 00003605 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2450                              <1>     return
    13                              <2> %%_ret:
    14 00003606 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2451                              <1> 
  2452                              <1> pathEdit:
  2453                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2454                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2455                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2456                              <1> ; end there. Error with too many arguments error!
  2457                              <1> ;If after the equals sign there is nothing, we just print the path!
  2458                              <1> ;Gotta process the command line ourselves first
  2459 00003607 E86D0D0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2460 0000360C 0F8473E3FFFF        <1>     jz badEnvSpaceError
  2461                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2462 00003612 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2463 00003619 E8AD000000          <1>     call .skipPathDelimiters
  2464 0000361E 3C0D                <1>     cmp al, CR
  2465 00003620 7466                <1>     je .printPath
  2466                              <1> ;Else use the set command to setup the path in the searchSpec.
  2467 00003622 56                  <1>     push rsi    ;Save the first char of the command line string
  2468 00003623 488D35C3D1FFFF      <1>     lea rsi, pathEVar
  2469 0000362A 488D3D(E8040000)    <1>     lea rdi, searchSpec
  2470 00003631 E873090000          <1>     call strcpy
  2471 00003636 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2472 00003639 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2473 0000363A 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2474                              <1> .cpLp:
  2475 0000363C AC                  <1>     lodsb
  2476 0000363D 3C0D                <1>     cmp al, CR
  2477 0000363F 7411                <1>     je .cpLpExit
  2478 00003641 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2479 00003646 740A                <1>     je .cpLpExit
  2480 00003648 E87F090000          <1>     call ucChar ;Uppercase the char
  2481 0000364D AA                  <1>     stosb       ;Store it
  2482 0000364E FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2483 00003650 EBEA                <1>     jmp short .cpLp
  2484                              <1> .cpLpExit:
  2485                              <1>     ;Remove trailing semicolons
  2486 00003652 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2487 00003656 7507                <1>     jne .cpLpNoIntervene
  2488 00003658 FFC9                <1>     dec ecx     ;Reduce the count by one
  2489 0000365A 48FFCF              <1>     dec rdi     ;Go back a char
  2490 0000365D EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2491                              <1> .cpLpNoIntervene:
  2492 0000365F B00D                <1>     mov al, CR  ;Now we store the terminator!
  2493 00003661 AA                  <1>     stosb       ;Store it!
  2494 00003662 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2495 00003668 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2496 0000366F FFC1                <1>     inc ecx     ;Add the CR for copying over
  2497 00003671 488D35(E8040000)    <1>     lea rsi, searchSpec
  2498 00003678 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2499 0000367F 57                  <1>     push rdi
  2500 00003680 F3A4                <1>     rep movsb
  2501 00003682 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2502 00003683 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2503                              <1> .printPath:
  2504 00003688 488D3D5ED1FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2505 0000368F E83F0D0000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2506 00003694 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2507 00003696 4889F7              <1>     mov rdi, rsi        
  2508 00003699 E824090000          <1>     call strlen         ;Get the length of the path in rdi
  2509 0000369E 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2510 000036A4 7411                <1>     je .noPathPrnt      ;Print no path!
  2511 000036A6 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2512 000036A8 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2513 000036AB BB01000000          <1>     mov ebx, 1          ;STDOUT
  2514 000036B0 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2515 000036B5 EB0C                <1>     jmp short .pathExit
  2516                              <1> .noPathPrnt:
  2517 000036B7 488D1506CEFFFF      <1>     lea rdx, noPath
  2518 000036BE B800090000          <1>     mov eax, 0900h
  2519                              <1> .pathExit:
  2520 000036C3 CD21                <1>     int 21h
  2521 000036C5 E8CB060000          <1>     call printCRLF      ;Print a crlf at the end
  2522                              <1>     return
    13                              <2> %%_ret:
    14 000036CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2523                              <1> .skipPathDelimiters:
  2524                              <1> ;Input: rsi -> Start of string to parse
  2525                              <1> ;Output: rsi -> First non-delimiter char of string
  2526                              <1> ;        al = First non delim char
  2527 000036CB AC                  <1>     lodsb
  2528 000036CC E806000000          <1>     call .isALPathDelimiter
  2529 000036D1 74F8                <1>     je .skipPathDelimiters
  2530 000036D3 48FFCE              <1>     dec rsi
  2531                              <1>     return
    13                              <2> %%_ret:
    14 000036D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2532                              <1> .isALPathDelimiter:
  2533                              <1> ;Same as before without semicolon
  2534 000036D7 3C20                <1>     cmp al, SPC
  2535                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000036D9 74(D6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2536 000036DB 3C09                <1>     cmp al, TAB
  2537                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000036DD 74(D6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2538 000036DF 3C2C                <1>     cmp al, ","
  2539                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000036E1 74(D6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2540 000036E3 3C3D                <1>     cmp al, "="
  2541                              <1>     return
    13                              <2> %%_ret:
    14 000036E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2542                              <1> 
  2543                              <1> prompt:
  2544 000036E6 E88E0C0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2545 000036EB 0F8494E2FFFF        <1>     jz badEnvSpaceError
  2546                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2547 000036F1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2548 000036F8 E8EA080000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2549 000036FD 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2550 00003700 742C                <1>     je .reset   ;Reset if so
  2551 00003702 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2552 00003703 488D35B9D0FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2553 0000370A 488D3D(E8040000)    <1>     lea rdi, searchSpec
  2554 00003711 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2555 00003716 F3A4                <1>     rep movsb
  2556 00003718 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2557 00003719 31C9                <1>     xor ecx, ecx    ;Get char count
  2558                              <1> .cp:    ;Now copy the user string over
  2559 0000371B AC                  <1>     lodsb
  2560 0000371C AA                  <1>     stosb 
  2561 0000371D 3C0D                <1>     cmp al, CR
  2562 0000371F 7404                <1>     je .cpOk
  2563 00003721 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2564 00003723 EBF6                <1>     jmp short .cp
  2565                              <1> .cpOk:
  2566 00003725 488D35(E8040000)    <1>     lea rsi, searchSpec ;Source the string from here
  2567 0000372C EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2568                              <1> .reset:
  2569                              <1> ;Delete the environment variable!
  2570 0000372E 488D358ED0FFFF      <1>     lea rsi, promptEVar 
  2571 00003735 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2572                              <1> .goSet:
  2573 00003737 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2574 0000373D 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2575 00003744 FFC1                <1>     inc ecx     ;Include CR in copy
  2576 00003746 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2577 0000374D 57                  <1>     push rdi
  2578 0000374E F3A4                <1>     rep movsb
  2579 00003750 5E                  <1>     pop rsi
  2580 00003751 E9F0FDFFFF          <1>     jmp set.altEp
  2581                              <1> 
  2582                              <1> echo:
  2583 00003756 F605EEC8FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2584 0000375D 752A                <1>     jnz .argGiven
  2585 0000375F 488D154FCEFFFF      <1>     lea rdx, echoIs
  2586 00003766 E831060000          <1>     call printString
  2587 0000376B 488D1529CEFFFF      <1>     lea rdx, onMes
  2588 00003772 488D0D1CCEFFFF      <1>     lea rcx, offMes
  2589 00003779 F6058DC8FFFFFF      <1>     test byte [echoFlg], -1
  2590 00003780 480F44D1            <1>     cmovz rdx, rcx
  2591 00003784 E913060000          <1>     jmp printString
  2592                              <1> .argGiven:
  2593 00003789 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2594 00003790 0FB605B5C8FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2595 00003797 4801C6              <1>     add rsi, rax
  2596 0000379A AC                  <1>     lodsb   ;Get this char
  2597 0000379B 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2598 0000379E E829080000          <1>     call ucChar
  2599 000037A3 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2600 000037A5 755A                <1>     jne .directEcho
  2601 000037A7 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2602 000037AA E81D080000          <1>     call ucChar
  2603 000037AF 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2604 000037B1 751B                <1>     jne .checkOff
  2605 000037B3 56                  <1>     push rsi
  2606 000037B4 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2607 000037BB E827080000          <1>     call skipDelimiters
  2608 000037C0 803E0D              <1>     cmp byte [rsi], CR
  2609 000037C3 5E                  <1>     pop rsi
  2610 000037C4 753B                <1>     jne .directEcho ;If its not, just echo the string
  2611 000037C6 C60540C8FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2612                              <1>     return
    13                              <2> %%_ret:
    14 000037CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2613                              <1> .checkOff:
  2614 000037CE 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2615 000037D1 E8F6070000          <1>     call ucChar
  2616 000037D6 3C46                <1>     cmp al, "F" ;Is it an F?
  2617 000037D8 7527                <1>     jne .directEcho ;No, just direct echo
  2618 000037DA 8A4602              <1>     mov al, byte [rsi + 2]
  2619 000037DD E8EA070000          <1>     call ucChar
  2620 000037E2 3C46                <1>     cmp al, "F"
  2621 000037E4 751B                <1>     jne .directEcho
  2622 000037E6 56                  <1>     push rsi
  2623 000037E7 4881C603000000      <1>     add rsi, 3
  2624 000037EE E8F4070000          <1>     call skipDelimiters
  2625 000037F3 803E0D              <1>     cmp byte [rsi], CR
  2626 000037F6 5E                  <1>     pop rsi
  2627 000037F7 7508                <1>     jne .directEcho
  2628 000037F9 C6050DC8FFFF00      <1>     mov byte [echoFlg], 0
  2629                              <1>     return
    13                              <2> %%_ret:
    14 00003800 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2630                              <1> .directEcho: 
  2631 00003801 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2632 00003808 4889F3              <1>     mov rbx, rsi    
  2633 0000380B 4829D3              <1>     sub rbx, rdx
  2634 0000380E 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2635 00003816 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2636 00003818 0F826E050000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2637 0000381E 4889F2              <1>     mov rdx, rsi
  2638 00003821 BB01000000          <1>     mov ebx, 1
  2639 00003826 B800400000          <1>     mov eax, 4000h
  2640 0000382B CD21                <1>     int 21h
  2641 0000382D E963050000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2642                              <1> 
  2643                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2644                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2645                              <1> ; with just... the actual command tail being echoed with the command -_-
  2646 00003832 F605D4C7FFFFFF      <1>     test byte [echoFlg], -1
  2647 00003839 7528                <1>     jnz .echoTail
  2648                              <1> ;Since we havent echoed the command out, type the tail out manually
  2649 0000383B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2650 00003842 E8A0070000          <1>     call skipDelimiters ;Skip leading delims
  2651 00003847 4889F2              <1>     mov rdx, rsi
  2652 0000384A 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2653 00003852 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2654 00003857 B800400000          <1>     mov eax, 4000h  ;Write
  2655 0000385C CD21                <1>     int 21h
  2656 0000385E E832050000          <1>     call printCRLF
  2657                              <1> .echoTail:
  2658 00003863 488D15C2CAFFFF      <1>     lea rdx, pauseMes
  2659 0000386A E82D050000          <1>     call printString
  2660 0000386F B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2661 00003874 CD21                <1>     int 21h
  2662 00003876 E81A050000          <1>     call printCRLF
  2663                              <1>     return
    13                              <2> %%_ret:
    14 0000387B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2664                              <1> remark:
  2665                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
  2666 0000387C F605(1A000000)08    <1>     test byte [statFlg1], inBatch
  2667                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003883 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2668                              <1> .go:
  2669 00003885 5B                  <1>     pop rbx
  2670 00003886 5B                  <1>     pop rbx ;Realign the stack back :)
  2671 00003887 E84ADBFFFF          <1>     call getSetMainState
  2672 0000388C E991D1FFFF          <1>     jmp commandMain.inputGetAgain   ;Clean any redirs and get input
  2673                              <1> 
  2674                              <1> shift:
  2675                              <1> ;If not in batch, immediately return!
  2676 00003891 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
  2677                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003898 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2678 0000389A 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]  ;Get the batch block
  2679 000038A1 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]
  2680 000038A5 488D7702            <1>     lea rsi, qword [rdi + 2]    ;Source from one word ahead
  2681 000038A9 B909000000          <1>     mov ecx, 9
  2682 000038AE 31C0                <1>     xor eax, eax
  2683                              <1> .lp:
  2684 000038B0 66AD                <1>     lodsw
  2685 000038B2 66AB                <1>     stosw
  2686 000038B4 3DFFFF0000          <1>     cmp eax, 0FFFFh   ;Once we xfer a -1 word, no more args on cmd line
  2687                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000038B9 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2688 000038BB FFC9                <1>     dec ecx
  2689 000038BD 75F1                <1>     jnz .lp
  2690                              <1> ;Now we gotta scan for one more cmdline argument
  2691 000038BF 66C7432DFFFF        <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], -1   ;Init a -1 at the end
  2692 000038C5 B00D                <1>     mov al, CR
  2693 000038C7 31C9                <1>     xor ecx, ecx
  2694 000038C9 FFC9                <1>     dec ecx ;
  2695 000038CB 488D3C03            <1>     lea rdi, qword [rbx + rax]  ;rax has the last offset
  2696 000038CF F2AE                <1>     repne scasb ;Find CR which terminated old last argument, go past it
  2697 000038D1 803F00              <1>     cmp byte [rdi], 0   ;If this is the terminating null, leave as -1
  2698                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000038D4 74(7B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2699 000038D6 4829DF              <1>     sub rdi, rbx    ;Get the offset from batBlockHdr
  2700 000038D9 66897B2D            <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], di    ;Store the difference
  2701                              <1>     return
    13                              <2> %%_ret:
    14 000038DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2702                              <1>     
  2703                              <1> goto:
  2704                              <1> ;If not in batch, immediately return!
  2705 000038DE F605(1A000000)08    <1>     test byte [statFlg1], inBatch
  2706                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000038E5 74(DD)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2707 000038E7 488B2D(1B000000)    <1>     mov rbp, qword [bbPtr]
  2708 000038EE 4885ED              <1>     test rbp, rbp
  2709                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000038F1 74(DD)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2710                              <1> ;Start by copying the command line label to fcb1
  2711 000038F3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2712 000038FA 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
  2713 000038FE E8E4060000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
  2714 00003903 B908000000          <1>     mov ecx, 8
  2715 00003908 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
  2716 0000390B 7503                <1>     jne .startCopy
  2717 0000390D 48FFC6              <1>     inc rsi
  2718                              <1> .startCopy:
  2719 00003910 AC                  <1>     lodsb
  2720 00003911 3C20                <1>     cmp al, SPC         ;Skip any spaces
  2721 00003913 74FB                <1>     je .startCopy       
  2722 00003915 3C0D                <1>     cmp al, CR          ;If CR, exit copy
  2723 00003917 740C                <1>     je .endCopy
  2724 00003919 E8D7060000          <1>     call isALdelimiter  ;If delimiter char, exit copy
  2725 0000391E 7405                <1>     jz .endCopy
  2726 00003920 AA                  <1>     stosb           
  2727 00003921 FFC9                <1>     dec ecx             ;Decrement counter
  2728 00003923 75EB                <1>     jnz .startCopy
  2729                              <1> .endCopy:
  2730                              <1> ;Now search the batch file for the label.
  2731 00003925 F7D9                <1>     neg ecx
  2732 00003927 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
  2733 0000392D 498D505C            <1>     lea rdx, qword [r8 + fcb1]
  2734 00003931 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
  2735 00003933 E8CB000000          <1>     call .ucChars   ;Now we UC the chars in the string
  2736 00003938 48C7451300000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
  2737 00003940 E8ADDFFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
  2738                              <1> ;File opened from the start. Now start byte by byte read.
  2739                              <1> .notLabelLp:
  2740 00003945 F605(1A000000)10    <1>     test byte [statFlg1], batchEOF  
  2741 0000394C 0F859F000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
  2742 00003952 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
  2743                              <1> .findLbl:
  2744                              <1> ;Keep searching for a label
  2745 00003956 E8CBDFFFFF          <1>     call batReadChar
  2746 0000395B 0F8490000000        <1>     jz .eof
  2747 00003961 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2748 00003965 803A3A              <1>     cmp byte [rdx], ":"
  2749 00003968 75EC                <1>     jne .findLbl 
  2750                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
  2751 0000396A 31C9                <1>     xor ecx, ecx
  2752                              <1> .loadRead:
  2753 0000396C E8B5DFFFFF          <1>     call batReadChar
  2754 00003971 744D                <1>     jz .lblDone
  2755 00003973 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
  2756 00003975 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2757 00003979 3C0D                <1>     cmp al, CR
  2758 0000397B 7433                <1>     je .lblDoneCR
  2759 0000397D 3C0A                <1>     cmp al, LF
  2760 0000397F 743F                <1>     je .lblDone
  2761 00003981 3C20                <1>     cmp al, SPC
  2762 00003983 74E7                <1>     je .loadRead
  2763 00003985 E86B060000          <1>     call isALdelimiter
  2764 0000398A 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
  2765 0000398C 48FFC2              <1>     inc rdx ;Inc the storage pointer
  2766 0000398F FFC1                <1>     inc ecx ;Inc the count
  2767 00003991 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
  2768 00003997 75D3                <1>     jne .loadRead
  2769                              <1> .pullEol:
  2770 00003999 E888DFFFFF          <1>     call batReadChar
  2771 0000399E 7420                <1>     jz .lblDone
  2772 000039A0 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2773 000039A4 803A0D              <1>     cmp byte [rdx], CR
  2774 000039A7 7407                <1>     je .lblDoneCR
  2775 000039A9 803A0A              <1>     cmp byte [rdx], LF
  2776 000039AC 7412                <1>     je .lblDone
  2777 000039AE EBE9                <1>     jmp short .pullEol
  2778                              <1> .lblDoneCR:
  2779                              <1> ;Read a CR, check if the next char is an LF and scan past it.
  2780 000039B0 E871DFFFFF          <1>     call batReadChar
  2781 000039B5 7409                <1>     jz .lblDone
  2782 000039B7 803A0A              <1>     cmp byte [rdx], LF
  2783 000039BA 7504                <1>     jne .lblDone    ;No LF
  2784                              <1> ;Else include the LF in the count to go past
  2785 000039BC 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
  2786                              <1> .lblDone:
  2787                              <1> ;Check what we have to see if it is possible to form a label
  2788 000039C0 498D506C            <1>     lea rdx, qword [r8 + fcb2]
  2789 000039C4 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
  2790 000039C6 E838000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
  2791                              <1> ;Now compare the strings (trailing space padding)
  2792 000039CB 488D32              <1>     lea rsi, qword [rdx]
  2793 000039CE AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
  2794 000039CF 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
  2795 000039D2 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
  2796 000039D6 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
  2797 000039D9 0F8566FFFFFF        <1>     jne .notLabelLp
  2798 000039DF F3A6                <1>     repe cmpsb  ;Now do a string cmp
  2799 000039E1 0F855EFFFFFF        <1>     jne .notLabelLp
  2800                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
  2801 000039E7 E832DFFFFF          <1>     call batClose   ;Close the handle
  2802 000039EC E994FEFFFF          <1>     jmp remark.go   ;Now behave like rem to get the next line!
  2803                              <1> .eof:
  2804                              <1> ;Print label not found, end batch mode and return
  2805 000039F1 488D1517CBFFFF      <1>     lea rdx, badLbl
  2806 000039F8 E89F030000          <1>     call printString
  2807 000039FD E89DDCFFFF          <1>     call batFinish  ;Kill the batch processor
  2808                              <1>     return
    13                              <2> %%_ret:
    14 00003A02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2809                              <1> 
  2810                              <1> .ucChars:
  2811                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
  2812                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
  2813 00003A03 50                  <1>     push rax
  2814 00003A04 51                  <1>     push rcx
  2815 00003A05 56                  <1>     push rsi
  2816                              <1> 
  2817 00003A06 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
  2818 00003A0A 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
  2819                              <1> .ucclp:
  2820 00003A0D AC                  <1>     lodsb   ;Get the char
  2821 00003A0E E8B9050000          <1>     call ucChar
  2822 00003A13 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
  2823 00003A16 FFC9                <1>     dec ecx     
  2824 00003A18 75F3                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
  2825                              <1>     
  2826 00003A1A 5E                  <1>     pop rsi
  2827 00003A1B 59                  <1>     pop rcx
  2828 00003A1C 58                  <1>     pop rax
  2829                              <1>     return
    13                              <2> %%_ret:
    14 00003A1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2830                              <1> 
  2831                              <1> ifCmd:
  2832                              <1> ;Use the fact we parse the first two words into the FCBs to check 
  2833                              <1> ; for NOT and then the condition word
  2834 00003A1E C605(72000000)00    <1>     mov byte [ifFlg], ifReset ;Reset not state
  2835 00003A25 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2836 00003A2C E81C010000          <1>     call .getNextArg    ;Skip leading delimiters
  2837 00003A31 4889F3              <1>     mov rbx, rsi        ;Save the possible start of string ptr (if string)
  2838 00003A34 E8F5000000          <1>     call .makeAsciizAdv ;Move rsi to next word, rdi -> ASCIZ string
  2839 00003A39 56                  <1>     push rsi    ;Save ptr to the next word on stack
  2840 00003A3A 488D35F6CBFFFF      <1>     lea rsi, notString
  2841 00003A41 E817010000          <1>     call .strcmp
  2842 00003A46 5E                  <1>     pop rsi
  2843 00003A47 750F                <1>     jne .chkErlvl
  2844 00003A49 800D(72000000)01    <1>     or byte [ifFlg], ifNot  ;Set not on
  2845 00003A50 4889F3              <1>     mov rbx, rsi    ;Save the start of string ptr (if string)
  2846 00003A53 E8D6000000          <1>     call .makeAsciizAdv     ;Goto next word
  2847                              <1> .chkErlvl:
  2848 00003A58 56                  <1>     push rsi    ;rsi points to the argument
  2849 00003A59 488D35DBCBFFFF      <1>     lea rsi, errlvlStr
  2850 00003A60 E8F8000000          <1>     call .strcmp
  2851 00003A65 5E                  <1>     pop rsi
  2852 00003A66 0F849A000000        <1>     je .errorLvl
  2853 00003A6C 56                  <1>     push rsi
  2854 00003A6D 488D35D2CBFFFF      <1>     lea rsi, existStr
  2855 00003A74 E8E4000000          <1>     call .strcmp
  2856 00003A79 5E                  <1>     pop rsi
  2857 00003A7A 7472                <1>     je .exist
  2858                              <1> ;Here we check condition string1==string2
  2859                              <1> ;rsi points to the start of the string to check condition of
  2860 00003A7C 4889DE              <1>     mov rsi, rbx    ;Get back the start of the string
  2861 00003A7F 4889F7              <1>     mov rdi, rsi    ;Move rdi to the start of the string
  2862 00003A82 31C9                <1>     xor ecx, ecx    ;String length cnt
  2863                              <1> .scCheck:
  2864 00003A84 AC                  <1>     lodsb
  2865 00003A85 3C3D                <1>     cmp al, "="
  2866 00003A87 7417                <1>     je .scEqFnd
  2867 00003A89 E867050000          <1>     call isALdelimiter
  2868 00003A8E 0F84E8DEFFFF        <1>     je badSyntaxError
  2869 00003A94 3C0D                <1>     cmp al, CR
  2870 00003A96 0F84E0DEFFFF        <1>     je badSyntaxError
  2871 00003A9C FFC1                <1>     inc ecx         ;One more char to count
  2872 00003A9E EBE4                <1>     jmp short .scCheck
  2873                              <1> .scEqFnd:
  2874 00003AA0 AC                  <1>     lodsb   ;Move rsi to the char past this equal sign
  2875 00003AA1 3C3D                <1>     cmp al, "=" ;Is the second char an equal too?
  2876 00003AA3 0F85D3DEFFFF        <1>     jne badSyntaxError
  2877 00003AA9 F3A6                <1>     repe cmpsb  ;Compare the strings, leave rsi past string 2
  2878 00003AAB 7507                <1>     jnz .cndMiss
  2879                              <1> .cndHit:
  2880 00003AAD 800D(72000000)02    <1>     or byte [ifFlg], ifCond ;The default condition was hit
  2881                              <1> .cndMiss:
  2882 00003AB4 0FB605(72000000)    <1>     movzx eax, byte [ifFlg]
  2883 00003ABB 89C3                <1>     mov ebx, eax
  2884 00003ABD D1EB                <1>     shr ebx, 1      ;Get bit 1 to bit 0
  2885 00003ABF 2501000000          <1>     and eax, 1      ;Isolate bit 0
  2886 00003AC4 31D8                <1>     xor eax, ebx    ;xor the condition hit bit with not. If 1, execute!
  2887                              <1>     retz            ;Else return silently!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003AC6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003AC8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2888                              <1> ;Now rsi points to delims before the command. 
  2889                              <1> ; Skip the delims and copy the argument!
  2890 00003AC9 E819050000          <1>     call skipDelimiters    ;Now go to the next argument (No need for CR check)
  2891 00003ACE 488D3D(BB010000)    <1>     lea rdi, qword [inBuffer + 2]
  2892 00003AD5 31C9                <1>     xor ecx, ecx
  2893                              <1> .cpExitLp:
  2894 00003AD7 AC                  <1>     lodsb
  2895 00003AD8 AA                  <1>     stosb
  2896 00003AD9 FFC1                <1>     inc ecx ;Add a new char to the count
  2897 00003ADB 3C0D                <1>     cmp al, CR
  2898 00003ADD 75F8                <1>     jne .cpExitLp
  2899 00003ADF FFC9                <1>     dec ecx ;Drop CR from count
  2900 00003AE1 880D(BA010000)      <1>     mov byte [inBuffer + 1], cl
  2901 00003AE7 58                  <1>     pop rax ;Balance the stack
  2902 00003AE8 58                  <1>     pop rax
  2903 00003AE9 E95ECFFFFF          <1>     jmp commandMain.batProceed    ;And execute the command now!
  2904                              <1> .exist:
  2905                              <1> ;Here we do the check for file existance
  2906 00003AEE E83B000000          <1>     call .makeAsciizAdv
  2907 00003AF3 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  2908 00003AF8 4889FA              <1>     mov rdx, rdi    ;Move the ptr to rdx
  2909 00003AFB B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2910 00003B00 CD21                <1>     int 21h
  2911 00003B02 73A9                <1>     jnc .cndHit
  2912 00003B04 EBAE                <1>     jmp short .cndMiss
  2913                              <1> .errorLvl:
  2914                              <1> ;Here we do the check for error level
  2915 00003B06 E823000000          <1>     call .makeAsciizAdv
  2916 00003B0B 4887FE              <1>     xchg rdi, rsi
  2917 00003B0E E88D070000          <1>     call getNum     ;Get value in eax
  2918 00003B13 3DFF000000          <1>     cmp eax, 255    ;Value can't be bigger than 255
  2919 00003B18 0F875EDEFFFF        <1>     ja badSyntaxError
  2920 00003B1E 4887FE              <1>     xchg rdi, rsi
  2921 00003B21 3A05(00000000)      <1>     cmp al, byte [returnCode]
  2922 00003B27 7484                <1>     je .cndHit
  2923 00003B29 E986FFFFFF          <1>     jmp .cndMiss
  2924                              <1> ;------------------------
  2925                              <1> ;      If routines
  2926                              <1> ;------------------------
  2927                              <1> .makeAsciizAdv:
  2928                              <1> ;Input: rsi -> Non delimiter char string
  2929                              <1> ;Output: rsi -> Next substring past delimiters
  2930                              <1> ;       rdi -> ASCIIZ version of the string we just passed
  2931 00003B2E 58                  <1>     pop rax ;Align the stack so if we hit a CR its .getNextArg doesnt crash
  2932 00003B2F E807000000          <1>     call .makeArgAsciz      ;Get in rdi -> ASCIZ argument. rsi -> terminator
  2933 00003B34 E814000000          <1>     call .getNextArg        ;rsi -> Command
  2934 00003B39 FFE0                <1>     jmp rax                 ;Go to this address now
  2935                              <1> 
  2936                              <1> .makeArgAsciz:
  2937                              <1> ;Creates a null terminated string in the search spec.
  2938                              <1> ;Input: rsi -> String to copy with null terminator
  2939                              <1> ;Ouput: rsi -> Terminator
  2940                              <1> ;       rdi -> Search Spec with filled ASCIZ string
  2941 00003B3B 50                  <1>     push rax    ;Preserve rax
  2942 00003B3C E832060000          <1>     call copyArgumentToSearchSpec
  2943 00003B41 58                  <1>     pop rax
  2944 00003B42 488D3D(E8040000)    <1>     lea rdi, searchSpec
  2945 00003B49 48FFCE              <1>     dec rsi     ;Point back to the delimiter char
  2946                              <1>     return
    13                              <2> %%_ret:
    14 00003B4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2947                              <1> 
  2948                              <1> .getNextArg:
  2949                              <1> ;Moves rsi to the first next element. If a CR is encountered, it exits
  2950                              <1> ;Input: rsi -> String
  2951                              <1> ;Output: rsi -> First non delimiter char after initial position
  2952 00003B4D E895040000          <1>     call skipDelimiters     ;Preserves rax
  2953 00003B52 803E0D              <1>     cmp byte [rsi], CR
  2954                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B55 75(4C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2955 00003B57 58                  <1>     pop rax ;Pop the return address off the stack
  2956 00003B58 E91FDEFFFF          <1>     jmp badSyntaxError  ;And jump error out
  2957                              <1> 
  2958                              <1> .strcmp:
  2959 00003B5D B81E120000          <1>     mov eax, 121Eh
  2960 00003B62 CD2F                <1>     int 2fh
  2961                              <1>     return
    13                              <2> %%_ret:
    14 00003B64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2962                              <1> 
  2963                              <1> 
  2964                              <1> forCmd:
  2965                              <1>     return
    13                              <2> %%_ret:
    14 00003B65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                                  %include "./src/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003B66 53                  <1>     push rbx
    11 00003B67 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003B69 803D(F5000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003B70 7244                <1>     jb .usDate
    14 00003B72 0F877C000000        <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003B78 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003B7D E8B0000000          <1>     call .printFirst
    18 00003B82 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003B88 B402                <1>     mov ah, 02h
    20 00003B8A CD21                <1>     int 21h
    21                              <1> 
    22 00003B8C 89C8                <1>     mov eax, ecx
    23 00003B8E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003B93 C1E805              <1>     shr eax, 5
    25 00003B96 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003B9B 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003BA1 B402                <1>     mov ah, 02h
    29 00003BA3 CD21                <1>     int 21h
    30                              <1> 
    31 00003BA5 89C8                <1>     mov eax, ecx
    32 00003BA7 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003BAC C1E809              <1>     shr eax, 9
    34 00003BAF 5B                  <1>     pop rbx ;Get the year signature back
    35 00003BB0 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003BB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003BB6 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003BBB C1E805              <1>     shr eax, 5
    41 00003BBE E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003BC3 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003BC9 B402                <1>     mov ah, 02h
    45 00003BCB CD21                <1>     int 21h
    46                              <1> 
    47 00003BCD 89C8                <1>     mov eax, ecx
    48 00003BCF 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003BD4 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003BD9 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003BDF B402                <1>     mov ah, 02h
    53 00003BE1 CD21                <1>     int 21h
    54                              <1> 
    55 00003BE3 89C8                <1>     mov eax, ecx
    56 00003BE5 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003BEA C1E809              <1>     shr eax, 9
    58 00003BED 5B                  <1>     pop rbx ;Get the year signature back
    59 00003BEE E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003BF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003BF4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003BF9 C1E809              <1>     shr eax, 9
    65 00003BFC 5B                  <1>     pop rbx ;Get the year signature back
    66 00003BFD E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003C02 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003C08 B402                <1>     mov ah, 02h
    70 00003C0A CD21                <1>     int 21h
    71                              <1> 
    72 00003C0C 89C8                <1>     mov eax, ecx
    73 00003C0E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003C13 C1E805              <1>     shr eax, 5
    75 00003C16 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003C1B 8A15(00010000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003C21 B402                <1>     mov ah, 02h
    79 00003C23 CD21                <1>     int 21h
    80                              <1> 
    81 00003C25 89C8                <1>     mov eax, ecx
    82 00003C27 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003C2C E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003C31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003C32 51                  <1>     push rcx
    89 00003C33 E835060000          <1>     call getDecimalWord
    90 00003C38 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003C3A 7504                <1>     jnz .skipSpace
    92 00003C3C 88CD                <1>     mov ch, cl
    93 00003C3E B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003C40 88CA                <1>     mov dl, cl
    96 00003C42 B402                <1>     mov ah, 02h
    97 00003C44 CD21                <1>     int 21h
    98 00003C46 88EA                <1>     mov dl, ch
    99 00003C48 B402                <1>     mov ah, 02h
   100 00003C4A CD21                <1>     int 21h
   101 00003C4C 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003C4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003C4E 51                  <1>     push rcx
   105 00003C4F E819060000          <1>     call getDecimalWord
   106 00003C54 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003C56 75E8                <1>     jnz .skipSpace
   108 00003C58 88CD                <1>     mov ch, cl
   109 00003C5A B130                <1>     mov cl, "0"
   110 00003C5C EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003C5E 05BC070000          <1>     add eax, 1980
   113 00003C63 51                  <1>     push rcx
   114 00003C64 53                  <1>     push rbx
   115 00003C65 E803060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003C6A 5B                  <1>     pop rbx
   117 00003C6B 84DB                <1>     test bl, bl
   118 00003C6D 740C                <1>     jz .twoDigitYear
   119 00003C6F 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003C71 B402                <1>     mov ah, 02h
   121 00003C73 CD21                <1>     int 21h
   122 00003C75 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003C77 B402                <1>     mov ah, 02h
   124 00003C79 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003C7B C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003C7E 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003C80 B402                <1>     mov ah, 02h
   129 00003C82 CD21                <1>     int 21h
   130 00003C84 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003C86 B402                <1>     mov ah, 02h
   132 00003C88 CD21                <1>     int 21h
   133 00003C8A 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003C8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003C8C 89C1                <1>     mov ecx, eax
   142 00003C8E 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003C93 C1E80B              <1>     shr eax, 11
   144 00003C96 803D(06010000)01    <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003C9D 750B                <1>     jne .ampm
   146 00003C9F E85A000000          <1>     call .printHours
   147 00003CA4 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003CA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003CAA 3D0C000000          <1>     cmp eax, 12
   151 00003CAF 7713                <1>     ja .pm
   152 00003CB1 7416                <1>     je .pm2
   153 00003CB3 E846000000          <1>     call .printHours
   154 00003CB8 E81D000000          <1>     call .printMinutes
   155 00003CBD B261                <1>     mov dl, "a"
   156 00003CBF B402                <1>     mov ah, 02h
   157 00003CC1 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003CC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003CC4 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003CC9 E830000000          <1>     call .printHours
   163 00003CCE E807000000          <1>     call .printMinutes
   164 00003CD3 B270                <1>     mov dl, "p"
   165 00003CD5 B402                <1>     mov ah, 02h
   166 00003CD7 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003CD9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003CDA 8A15(02010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003CE0 B402                <1>     mov ah, 02h
   171 00003CE2 CD21                <1>     int 21h
   172                              <1> 
   173 00003CE4 89C8                <1>     mov eax, ecx
   174 00003CE6 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003CEB C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003CEE 51                  <1>     push rcx
   178 00003CEF E879050000          <1>     call getDecimalWord
   179 00003CF4 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003CF6 7514                <1>     jnz .skipSpace
   181 00003CF8 88CD                <1>     mov ch, cl
   182 00003CFA B130                <1>     mov cl, "0"
   183 00003CFC EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003CFE 51                  <1>     push rcx
   186 00003CFF E869050000          <1>     call getDecimalWord
   187 00003D04 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003D06 7504                <1>     jnz .skipSpace
   189 00003D08 88CD                <1>     mov ch, cl
   190 00003D0A B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003D0C 88CA                <1>     mov dl, cl
   193 00003D0E B402                <1>     mov ah, 02h
   194 00003D10 CD21                <1>     int 21h
   195 00003D12 88EA                <1>     mov dl, ch
   196 00003D14 B402                <1>     mov ah, 02h
   197 00003D16 CD21                <1>     int 21h
   198 00003D18 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003D19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003D1A F605ECC2FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D21 74(19)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003D23 488D3D99CAFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003D2A E8A4060000          <1>     call searchForEnvVar
   206 00003D2F 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003D31 E8DB000000          <1>     call putCWDInPrompt
   209 00003D36 E8A7000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003D3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003D3C 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003D43 AC                  <1>     lodsb   ;Get the char
   216 00003D44 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D46 74(3B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003D48 3C24                <1>     cmp al, "$"
   219 00003D4A 7409                <1>     je .escapeChar
   220 00003D4C 88C2                <1>     mov dl, al
   221 00003D4E E8B9000000          <1>     call outChar    ;Prints the char in dl
   222 00003D53 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003D55 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003D56 E871020000          <1>     call ucChar ;Uppercase this char in al
   226 00003D5B 488D1DDEC3FFFF      <1>     lea rbx, pTbl
   227 00003D62 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003D67 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003D69 740D                <1>     je .escapeFnd
   231 00003D6B 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003D72 FFC9                <1>     dec ecx
   233 00003D74 75F1                <1>     jnz .escapeLp
   234 00003D76 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003D78 488D05C1C3FFFF      <1>     lea rax, pTbl              ;Get the table addr
   237 00003D7F 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003D83 4801D8              <1>     add rax, rbx                ;Add these
   239 00003D86 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003D87 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003D89 5E                  <1>     pop rsi
   242 00003D8A EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> printCRLFecho:
   245 00003D8C F6057AC2FFFFFF      <1>     test byte [echoFlg], -1
   246                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003D93 74(3B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   247                              <1> printCRLF:
   248 00003D95 488D15CBC3FFFF      <1>     lea rdx, crlf
   249                              <1> printString:
   250 00003D9C B800090000          <1>     mov eax, 0900h  ;Print string
   251 00003DA1 CD21                <1>     int 21h
   252                              <1>     return
    13                              <2> %%_ret:
    14 00003DA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> putVersionInPrompt:
   255 00003DA4 488D156AC6FFFF      <1>     lea rdx, dosVer
   256 00003DAB B409                <1>     mov ah, 09h ;Print String
   257 00003DAD CD21                <1>     int 21h
   258 00003DAF B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   259 00003DB1 CD21                <1>     int 21h
   260 00003DB3 50                  <1>     push rax    ;Save minor version
   261 00003DB4 E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   262 00003DB9 E8AE010000          <1>     call printPackedBCD ;Print al
   263 00003DBE B22E                <1>     mov dl, "."
   264 00003DC0 B402                <1>     mov ah, 02h
   265 00003DC2 CD21                <1>     int 21h
   266 00003DC4 58                  <1>     pop rax
   267 00003DC5 88E0                <1>     mov al, ah  ;Get the minor version low
   268 00003DC7 E883010000          <1>     call hexToBCD
   269 00003DCC E89B010000          <1>     call printPackedBCD
   270                              <1>     return
    13                              <2> %%_ret:
    14 00003DD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> putEscInPrompt:
   272 00003DD2 B21B                <1>     mov dl, ESC
   273 00003DD4 EB36                <1>     jmp short outChar
   274                              <1> 
   275                              <1> putMoneyInPrompt:
   276 00003DD6 B224                <1>     mov dl, "$"
   277 00003DD8 EB32                <1>     jmp short outChar
   278                              <1> 
   279                              <1> putEquInPrompt:
   280 00003DDA B23D                <1>     mov dl, "="
   281 00003DDC EB2E                <1>     jmp short outChar
   282                              <1> 
   283                              <1> putPipeInPrompt:
   284 00003DDE B27C                <1>     mov dl, "|"
   285 00003DE0 EB2A                <1>     jmp short outChar
   286                              <1> 
   287                              <1> putGTinPrompt:
   288 00003DE2 B23E                <1>     mov dl, ">"
   289 00003DE4 EB26                <1>     jmp short outChar
   290                              <1> 
   291                              <1> putLTinPrompt:
   292 00003DE6 B23C                <1>     mov dl, "<"
   293 00003DE8 EB22                <1>     jmp short outChar
   294                              <1> 
   295                              <1> putBSPinPrompt:
   296 00003DEA 488D151FC8FFFF      <1>     lea rdx, backSpace
   297 00003DF1 B903000000          <1>     mov ecx, 3
   298 00003DF6 BB01000000          <1>     mov ebx, 1
   299 00003DFB B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   300 00003E00 CD21                <1>     int 21h
   301                              <1>     return
    13                              <2> %%_ret:
    14 00003E02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> putDriveInPrompt:
   304 00003E03 E89C010000          <1>     call getCurrentDrive
   305 00003E08 0441                <1>     add al, "A" ;Convert to letter
   306 00003E0A 88C2                <1>     mov dl, al
   307                              <1> outChar:
   308 00003E0C B402                <1>     mov ah, 02h ;Echo to STDOUT
   309 00003E0E CD21                <1>     int 21h
   310                              <1>     return
    13                              <2> %%_ret:
    14 00003E10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> putCWDInPrompt:
   312 00003E11 E88E010000          <1>     call getCurrentDrive
   313 00003E16 3805F0C1FFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   314 00003E1C C605E9C1FFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   315 00003E23 7443                <1>     je .badDrive 
   316 00003E25 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   317 00003E27 FEC2                <1>     inc dl
   318 00003E29 0441                <1>     add al, "A" ;Convert to letter
   319 00003E2B B43A                <1>     mov ah, ":"
   320 00003E2D 488D3D(1B010000)    <1>     lea rdi, currDirStr ;Update the current directory string
   321 00003E34 66AB                <1>     stosw   ;Store X:, rdi+=2
   322 00003E36 8A05CEC1FFFF        <1>     mov al, byte [pathSep]
   323 00003E3C AA                  <1>     stosb   ;Store pathSep, inc rdi
   324 00003E3D B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   325 00003E42 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   326 00003E45 CD21                <1>     int 21h
   327 00003E47 721F                <1>     jc .badDrive
   328 00003E49 E874010000          <1>     call strlen
   329 00003E4E 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   330                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   331 00003E54 B800400000          <1>     mov eax, 4000h ;Write to handle
   332 00003E59 BB01000000          <1>     mov ebx, 1  ;STDOUT
   333 00003E5E 488D15(1B010000)    <1>     lea rdx, currDirStr
   334 00003E65 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 00003E67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .badDrive:
   337                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   338 00003E68 488D156EC6FFFF      <1>     lea rdx, badDrvMsg
   339 00003E6F E928FFFFFF          <1>     jmp printString
   340                              <1> printFmtTime:
   341                              <1> ;Outputs the formatted time
   342 00003E74 E847000000          <1>     call getTime
   343 00003E79 0FB6C5              <1>     movzx eax, ch
   344 00003E7C E87DFEFFFF          <1>     call printTime.printHours
   345 00003E81 8A15(02010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   346 00003E87 B402                <1>     mov ah, 02h
   347 00003E89 CD21                <1>     int 21h
   348 00003E8B 0FB605(85060000)    <1>     movzx eax, byte [td1]   ;Minutes
   349 00003E92 E857FEFFFF          <1>     call printTime.printMinutesAlt
   350 00003E97 8A15(02010000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   351 00003E9D B402                <1>     mov ah, 02h
   352 00003E9F CD21                <1>     int 21h
   353 00003EA1 0FB605(88060000)    <1>     movzx eax, byte [td4]   ;Seconds
   354 00003EA8 E841FEFFFF          <1>     call printTime.printMinutesAlt
   355 00003EAD B22E                <1>     mov dl, "."
   356 00003EAF B402                <1>     mov ah, 02h
   357 00003EB1 CD21                <1>     int 21h
   358 00003EB3 0FB605(87060000)    <1>     movzx eax, byte [td3]   ;Hundreths
   359 00003EBA E82FFEFFFF          <1>     call printTime.printMinutesAlt
   360                              <1>     return
    13                              <2> %%_ret:
    14 00003EBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> getTime:
   362 00003EC0 B42C                <1>     mov ah, 2Ch ;DOS get time
   363 00003EC2 CD21                <1>     int 21h
   364                              <1>     ;CH = hour (0-23)
   365                              <1> 	;CL = minutes (0-59)
   366                              <1> 	;DH = seconds (0-59)
   367                              <1> 	;DL = hundredths (0-99)
   368 00003EC4 880D(85060000)      <1>     mov byte [td1], cl
   369 00003ECA 882D(86060000)      <1>     mov byte [td2], ch
   370 00003ED0 8815(87060000)      <1>     mov byte [td3], dl
   371 00003ED6 8835(88060000)      <1>     mov byte [td4], dh
   372                              <1>     return
    13                              <2> %%_ret:
    14 00003EDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> printFmtDate:
   375                              <1> ;Outputs the formatted date
   376 00003EDD B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   377 00003EE2 CD21                <1>     int 21h
   378                              <1> 	;AL = day of the week (0=Sunday)
   379                              <1> 	;CX = year (1980-2099)
   380                              <1> 	;DH = month (1-12)
   381                              <1> 	;DL = day (1-31)
   382 00003EE4 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   383 00003EE9 66890D(85060000)    <1>     mov word [td1], cx
   384 00003EF0 8815(87060000)      <1>     mov byte [td3], dl
   385 00003EF6 8835(88060000)      <1>     mov byte [td4], dh
   386 00003EFC 0FB6C0              <1>     movzx eax, al
   387 00003EFF 89C3                <1>     mov ebx, eax
   388 00003F01 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   389 00003F03 01D8                <1>     add eax, ebx ;Make it 3 times 
   390 00003F05 488D1553C4FFFF      <1>     lea rdx, dayName
   391 00003F0C 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   392 00003F10 B903000000          <1>     mov ecx, 3  ;Print three chars
   393 00003F15 BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 00003F1A B440                <1>     mov ah, 40h ;Write to handle
   395 00003F1C CD21                <1>     int 21h
   396 00003F1E B220                <1>     mov dl, " "
   397 00003F20 E8E7FEFFFF          <1>     call outChar
   398                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   399                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   400                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   401 00003F25 0FB705(85060000)    <1>     movzx eax, word [td1]   ;Get this word
   402 00003F2C C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   403 00003F2F 0FB61D(88060000)    <1>     movzx ebx, byte [td4]
   404 00003F36 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   405 00003F39 09D8                <1>     or eax, ebx ;Add this date to eax
   406 00003F3B 0FB61D(87060000)    <1>     movzx ebx, byte [td3]
   407 00003F42 09D8                <1>     or eax, ebx
   408 00003F44 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   409 00003F49 E818FCFFFF          <1>     call printDate
   410                              <1>     return
    13                              <2> %%_ret:
    14 00003F4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> 
   413                              <1> hexToBCD:
   414                              <1> ;Converts a Hex byte into two BCD digits
   415                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   416 00003F4F 51                  <1>     push rcx
   417 00003F50 0FB6C0              <1>     movzx eax, al   ;Zero extend
   418 00003F53 31C9                <1>     xor ecx, ecx
   419                              <1> .htb0:
   420 00003F55 3D0A000000          <1>     cmp eax, 10
   421 00003F5A 7209                <1>     jb .htb1
   422 00003F5C 2D0A000000          <1>     sub eax, 10
   423 00003F61 FFC1                <1>     inc ecx
   424 00003F63 EBF0                <1>     jmp short .htb0
   425                              <1> .htb1:
   426 00003F65 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   427 00003F68 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   428 00003F6A 59                  <1>     pop rcx
   429 00003F6B C3                  <1>     ret
   430                              <1> 
   431                              <1> printPackedBCD:
   432                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   433                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   434                              <1> ;Preserves all registers
   435 00003F6C 50                  <1>     push rax
   436 00003F6D 52                  <1>     push rdx
   437 00003F6E 88C4                <1>     mov ah, al
   438 00003F70 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   439 00003F72 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   440 00003F75 7508                <1>     jnz .upperNybble
   441 00003F77 B220                <1>     mov dl, " "
   442 00003F79 B402                <1>     mov ah, 02h
   443 00003F7B CD21                <1>     int 21h
   444 00003F7D EB0E                <1>     jmp short .lowerNybble
   445                              <1> .upperNybble:
   446 00003F7F 50                  <1>     push rax
   447 00003F80 C0EC04              <1>     shr ah, 4
   448 00003F83 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   449 00003F86 88E2                <1>     mov dl, ah
   450 00003F88 B402                <1>     mov ah, 02h ;Print DL
   451 00003F8A CD21                <1>     int 21h
   452 00003F8C 58                  <1>     pop rax
   453                              <1> .lowerNybble:
   454 00003F8D 0430                <1>     add al, "0"
   455 00003F8F 88C2                <1>     mov dl, al
   456 00003F91 B402                <1>     mov ah, 02h ;Print DL
   457 00003F93 CD21                <1>     int 21h
   458 00003F95 5A                  <1>     pop rdx
   459 00003F96 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 00003F97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> setDrive:
   463                              <1> ;Input: dl = 0 based Drive number to set to
   464                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   465                              <1> ;AX trashed.
   466 00003F98 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   467 00003F9A CD21                <1>     int 21h 
   468 00003F9C E803000000          <1>     call getCurrentDrive
   469 00003FA1 38D0                <1>     cmp al, dl  ;Is this the same drive?
   470                              <1>     return
    13                              <2> %%_ret:
    14 00003FA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> getCurrentDrive:
   472                              <1> ;Returns the 0 based current drive in al
   473 00003FA4 B419                <1>     mov ah, 19h
   474 00003FA6 CD21                <1>     int 21h
   475                              <1>     return
    13                              <2> %%_ret:
    14 00003FA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> strcpy:
   478                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   479                              <1> ;rsi -> Source
   480                              <1> ;rdi -> Destination
   481 00003FA9 51                  <1>     push rcx
   482 00003FAA 57                  <1>     push rdi
   483 00003FAB 4889F7              <1>     mov rdi, rsi
   484 00003FAE E80F000000          <1>     call strlen ;Get the length of the string in rsi
   485 00003FB3 5F                  <1>     pop rdi
   486 00003FB4 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   487 00003FB6 59                  <1>     pop rcx
   488                              <1>     return
    13                              <2> %%_ret:
    14 00003FB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> strcpy2:
   491                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   492                              <1> ;rsi -> Source
   493                              <1> ;rdi -> Destination
   494 00003FB8 56                  <1>     push rsi
   495 00003FB9 57                  <1>     push rdi
   496 00003FBA E8EAFFFFFF          <1>     call strcpy 
   497 00003FBF 5F                  <1>     pop rdi
   498 00003FC0 5E                  <1>     pop rsi
   499                              <1>     return
    13                              <2> %%_ret:
    14 00003FC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strlen:
   502                              <1> ;Gets the length of a ASCIIZ string
   503                              <1> ;Input: rdi = Source buffer
   504                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   505 00003FC2 50                  <1>     push rax
   506 00003FC3 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   507 00003FC8 CD2F                <1>     int 2fh
   508 00003FCA 58                  <1>     pop rax
   509                              <1>     return
    13                              <2> %%_ret:
    14 00003FCB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> ucChar:
   512                              <1> ;Input: al = Char to uppercase
   513                              <1> ;Output: al = Adjusted char 
   514 00003FCC 53                  <1>     push rbx
   515 00003FCD 50                  <1>     push rax    ;Push the char twice on the stack
   516 00003FCE B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   517 00003FD3 CD2F                <1>     int 2fh         ;Returns the processed char in al
   518 00003FD5 5B                  <1>     pop rbx         ;Pop the old word off the stack
   519 00003FD6 5B                  <1>     pop rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 00003FD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> normalisePath:
   523                              <1> ;Uppercases chars and flips pathseps
   524                              <1> ;Input: rsi -> Path to normalise
   525 00003FD8 50                  <1>     push rax
   526 00003FD9 57                  <1>     push rdi
   527 00003FDA 4889F7              <1>     mov rdi, rsi
   528 00003FDD B811120000          <1>     mov eax, 1211h
   529 00003FE2 CD2F                <1>     int 2fh
   530 00003FE4 5F                  <1>     pop rdi
   531 00003FE5 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 00003FE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> skipDelimiters:
   535                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   536                              <1> ; command delimiters but a subset thereof. 
   537                              <1> ;These are the same across all codepages.
   538                              <1> ;Input: rsi must point to the start of the data string
   539                              <1> ;Output: rsi points to the first non-delimiter char
   540 00003FE7 50                  <1>     push rax
   541                              <1> .l1:
   542 00003FE8 AC                  <1>     lodsb
   543 00003FE9 E807000000          <1>     call isALdelimiter
   544 00003FEE 74F8                <1>     jz .l1
   545                              <1> .exit:
   546 00003FF0 58                  <1>     pop rax
   547 00003FF1 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   548                              <1>     return
    13                              <2> %%_ret:
    14 00003FF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> isALdelimiter:
   551                              <1> ;Returns: ZF=NZ if al is not a command separator 
   552                              <1> ;         ZF=ZE if al is a command separator
   553 00003FF5 3C20                <1>     cmp al, " "
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003FF7 74(F4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 00003FF9 3C3B                <1>     cmp al, ";"
   556                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003FFB 74(F4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 00003FFD 3C3D                <1>     cmp al, "="
   558                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003FFF 74(F4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559 00004001 3C2C                <1>     cmp al, ","
   560                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004003 74(F4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 00004005 3C09                <1>     cmp al, TAB
   562                              <1>     return
    13                              <2> %%_ret:
    14 00004007 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> clearCommandState:
   565                              <1> ;Clears the command state
   566 00004008 488D3D3CC0FFFF      <1>     lea rdi, cmdStatePtr
   567 0000400F B907000000          <1>     mov ecx, cmdStateL
   568 00004014 31C0                <1>     xor eax, eax
   569 00004016 F3AA                <1>     rep stosb
   570                              <1>     return
    13                              <2> %%_ret:
    14 00004018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> clearCommandLineState:
   573                              <1> ;Clears the command line state after a 0Dh encountered
   574 00004019 488D3D20C0FFFF      <1>     lea rdi, cmdLineStatePtr
   575 00004020 B912000000          <1>     mov ecx, cmdLineStateL
   576 00004025 31C0                <1>     xor eax, eax
   577 00004027 F3AA                <1>     rep stosb
   578 00004029 C7050EC0FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   578 00004032 FF                  <1>
   579 00004033 C7050AC0FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   579 0000403C FF                  <1>
   580                              <1> ;Close all handles from 5->MAX
   581 0000403D 0FB70DC4BFFFFF      <1>     movzx ecx, word [numHdls]
   582 00004044 BB05000000          <1>     mov ebx, 5
   583                              <1> .lp:
   584 00004049 B43E                <1>     mov ah, 3Eh ;File close
   585 0000404B CD21                <1>     int 21h
   586 0000404D FFC3                <1>     inc ebx ;Goto next file
   587 0000404F 39CB                <1>     cmp ebx, ecx
   588 00004051 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   589                              <1>     return
    13                              <2> %%_ret:
    14 00004053 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> asciiFilenameToFCB:
   592                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   593                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   594                              <1> ;Also doesn't check if chars are valid
   595                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   596                              <1> ;Name is space padded.
   597                              <1> ;Input: rsi = ASCII string buffer
   598                              <1> ;       rdi = FCB name buffer
   599                              <1> ;Output: al = Char that terminated the source string 
   600 00004054 53                  <1>     push rbx    
   601 00004055 57                  <1>     push rdi
   602 00004056 B90B000000          <1>     mov ecx, 11
   603 0000405B B020                <1>     mov al, " "
   604 0000405D F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   605 0000405F 5F                  <1>     pop rdi
   606 00004060 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   607                              <1>     ;Preprocess for Dir Searches
   608 00004063 803E2E              <1>     cmp byte [rsi], "."
   609 00004066 7509                <1>     jne .processName
   610 00004068 A4                  <1>     movsb   ;Store the first dot
   611 00004069 803E2E              <1>     cmp byte [rsi], "."
   612 0000406C 752C                <1>     jne .exitBadChar
   613 0000406E A4                  <1>     movsb
   614 0000406F EB29                <1>     jmp short .exitBadChar
   615                              <1> .processName:
   616 00004071 AC                  <1>     lodsb   ;Get the char in al
   617 00004072 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   618 00004074 7426                <1>     jz .exit
   619 00004076 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   620 00004078 7407                <1>     je .extSpace
   621 0000407A 3C2E                <1>     cmp al, "."
   622 0000407C 740C                <1>     je .ext
   623 0000407E AA                  <1>     stosb   ;Store the char
   624 0000407F EBF0                <1>     jmp short .processName
   625                              <1> .extSpace:
   626                              <1> ;Now we scan for a period in the name
   627 00004081 AC                  <1>     lodsb   ;Get a char and increase rsi
   628 00004082 84C0                <1>     test al, al
   629 00004084 7416                <1>     jz .exit
   630 00004086 3C2E                <1>     cmp al, "."     ;If al is not a period...
   631 00004088 75F7                <1>     jne .extSpace   ; keep searching
   632                              <1> .ext:
   633 0000408A 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   634                              <1> .processExt:
   635 0000408E AC                  <1>     lodsb
   636 0000408F 84C0                <1>     test al, al
   637 00004091 7409                <1>     jz .exit
   638 00004093 3C20                <1>     cmp al, " "
   639 00004095 7405                <1>     je .exit
   640 00004097 AA                  <1>     stosb
   641 00004098 EBF4                <1>     jmp short .processExt
   642                              <1> .exitBadChar:
   643 0000409A 30C0                <1>     xor al, al  ;Return a null terminator
   644                              <1> .exit:
   645 0000409C 5B                  <1>     pop rbx
   646                              <1>     return
    13                              <2> %%_ret:
    14 0000409D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> findLastPathComponant:
   649                              <1> ;Finds the last path componant of an ASCIIZ path string
   650                              <1> ;Input: rdi -> Head of the path to find last componant on
   651                              <1> ;Output: rdi -> Start of the last componant
   652 0000409E 50                  <1>     push rax
   653 0000409F 51                  <1>     push rcx
   654 000040A0 31C9                <1>     xor ecx, ecx
   655 000040A2 FFC9                <1>     dec ecx
   656 000040A4 31C0                <1>     xor eax, eax
   657 000040A6 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   658 000040A8 F7D1                <1>     not ecx     ;This gets the count of chars  
   659 000040AA 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   660 000040AD 8A0557BFFFFF        <1>     mov al, byte [pathSep]
   661 000040B3 FD                  <1>     std
   662 000040B4 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   663 000040B6 FC                  <1>     cld
   664 000040B7 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   665 000040B9 48FFC7              <1>     inc rdi     ;Point at pathsep
   666                              <1> .exit:
   667 000040BC 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   668 000040BF 59                  <1>     pop rcx
   669 000040C0 58                  <1>     pop rax
   670                              <1>     return
    13                              <2> %%_ret:
    14 000040C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> FCBToAsciiz:
   673                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   674                              <1> ;Name is space padded too
   675                              <1> ;Input: rsi = FCB name buffer
   676                              <1> ;       rdi = ASCIIZ string buffer
   677 000040C2 B908000000          <1>     mov ecx, 8
   678 000040C7 F3A4                <1>     rep movsb   ;Move the name over
   679                              <1> .scanNameSpace:
   680 000040C9 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   681 000040CD 750D                <1>     jne .ext
   682 000040CF 48FFCF              <1>     dec rdi
   683 000040D2 FFC1                <1>     inc ecx
   684 000040D4 81F908000000        <1>     cmp ecx, 8
   685 000040DA 72ED                <1>     jb .scanNameSpace
   686                              <1> .ext:
   687 000040DC 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   688 000040E1 7506                <1>     jne .validExt
   689 000040E3 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   690 000040E7 7415                <1>     je .exit
   691                              <1> .validExt:
   692 000040E9 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   693 000040EB AA                  <1>     stosb
   694 000040EC B903000000          <1>     mov ecx, 3
   695 000040F1 F3A4                <1>     rep movsb   ;Move the three extension chars over
   696                              <1> .scanExtSpace:
   697 000040F3 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   698 000040F7 7505                <1>     jne .exit
   699 000040F9 48FFCF              <1>     dec rdi
   700 000040FC EBF5                <1>     jmp short .scanExtSpace
   701                              <1> .exit:
   702 000040FE 31C0                <1>     xor eax, eax
   703 00004100 AA                  <1>     stosb   ;Store a null at the end
   704                              <1>     return
    13                              <2> %%_ret:
    14 00004101 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> 
   706                              <1> cpDelimOrCtrlStringToBufz:
   707                              <1> ;Copy a delimited or control char terminated string to a buffer
   708                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   709                              <1> ;       rdi -> Buffer to store null terminated string in
   710                              <1> ;Output: rsi -> First char past string end
   711                              <1> ;       rdi -> One char past null terminator on string buffer
   712 00004102 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   713                              <1> .lp:
   714 00004105 AC                  <1>     lodsb
   715 00004106 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   716 00004108 760A                <1>     jbe .exit
   717 0000410A E8E6FEFFFF          <1>     call isALdelimiter
   718 0000410F 7403                <1>     je .exit
   719 00004111 AA                  <1>     stosb
   720 00004112 EBF1                <1>     jmp short .lp
   721                              <1> .exit:
   722 00004114 31C0                <1>     xor eax, eax
   723 00004116 AA                  <1>     stosb   ;Store a null terminator
   724                              <1>     return
    13                              <2> %%_ret:
    14 00004117 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> 
   727                              <1> cpDelimPathToBufz:
   728                              <1> ;Copy a delimited path into buffer and null terminate.
   729                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   730                              <1> ;       rdi -> Buffer to store null terminated path in
   731                              <1> ;Output: rsi -> First char past pathname delimiter
   732                              <1> ;       rdi -> One char past null terminator on pathname buffer
   733 00004118 53                  <1>     push rbx
   734 00004119 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   735 0000411C C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   736                              <1> .lp:
   737 0000411F AC                  <1>     lodsb   ;Get the char
   738 00004120 3C0D                <1>     cmp al, CR
   739 00004122 7412                <1>     je .gotRedirPath
   740 00004124 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   741 00004129 740B                <1>     jz .gotRedirPath 
   742 0000412B 3A05DABEFFFF        <1>     cmp al, byte [switchChar]
   743 00004131 7403                <1>     je .gotRedirPath
   744 00004133 AA                  <1>     stosb   ;Store this char and loop next char
   745 00004134 EBE9                <1>     jmp short .lp
   746                              <1> .gotRedirPath:
   747 00004136 50                  <1>     push rax    ;Save the char on stack
   748 00004137 30C0                <1>     xor al, al  ;Get null terminator char
   749 00004139 4829FB              <1>     sub rbx, rdi
   750 0000413C 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   751 00004143 7412                <1>     je .notColon
   752 00004145 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   753 0000414C 7409                <1>     je .notColon
   754 0000414E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   755 00004152 7503                <1>     jne .notColon
   756 00004154 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   757                              <1> .notColon:
   758 00004157 AA                  <1>     stosb   ;Store the null terminator for the redir path
   759 00004158 58                  <1>     pop rax ;Get back the char in al
   760 00004159 5B                  <1>     pop rbx
   761                              <1>     return
    13                              <2> %%_ret:
    14 0000415A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> 
   763                              <1> buildCommandPath:
   764                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   765 0000415B 0FB605EABEFFFF      <1>     movzx eax, byte [arg1Off]
   766 00004162 4C8B0597BEFFFF      <1>     mov r8, [pPSP]
   767 00004169 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   768 00004170 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   769                              <1> copyArgumentToSearchSpec:
   770                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   771                              <1> ; and null terminates
   772 00004173 488D3D(E8040000)    <1>     lea rdi, searchSpec
   773 0000417A E899FFFFFF          <1>     call cpDelimPathToBufz
   774                              <1>     return
    13                              <2> %%_ret:
    14 0000417F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> scanForWildcards:
   777                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   778                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   779 00004180 50                  <1>     push rax
   780 00004181 56                  <1>     push rsi
   781                              <1> .lp:
   782 00004182 AC                  <1>     lodsb
   783 00004183 3C3F                <1>     cmp al, "?"
   784 00004185 740A                <1>     je .exit
   785 00004187 3C2A                <1>     cmp al, "*"
   786 00004189 7406                <1>     je .exit
   787 0000418B 84C0                <1>     test al, al
   788 0000418D 75F3                <1>     jnz .lp
   789 0000418F FEC0                <1>     inc al  ;This will clear the ZF
   790                              <1> .exit:
   791 00004191 5E                  <1>     pop rsi
   792 00004192 58                  <1>     pop rax
   793                              <1>     return
    13                              <2> %%_ret:
    14 00004193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> printDecimalValLB:
   796                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   797                              <1> ; blanks and inserts commas where appropriate.
   798                              <1> ;Input: rax = Value to print
   799                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   800 00004194 4889E5              <1>     mov rbp, rsp
   801 00004197 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   802 0000419A 4889EF              <1>     mov rdi, rbp
   803 0000419D 4829CF              <1>     sub rdi, rcx
   804 000041A0 50                  <1>     push rax
   805 000041A1 51                  <1>     push rcx
   806 000041A2 57                  <1>     push rdi
   807 000041A3 31C0                <1>     xor eax, eax
   808 000041A5 F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   809 000041A7 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   810 000041A8 59                  <1>     pop rcx
   811 000041A9 58                  <1>     pop rax
   812 000041AA 51                  <1>     push rcx    ;Save this value to keep the buffer length
   813 000041AB E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   814 000041B0 59                  <1>     pop rcx     ;Now print the buffer
   815 000041B1 4889EF              <1>     mov rdi, rbp
   816 000041B4 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   817 000041B7 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   818                              <1> .skipLp:
   819 000041B9 8A1F                <1>     mov bl, byte [rdi]
   820 000041BB 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   821 000041BD 7513                <1>     jne .printLp
   822 000041BF B402                <1>     mov ah, 02h
   823 000041C1 B220                <1>     mov dl, " "
   824 000041C3 CD21                <1>     int 21h
   825 000041C5 48FFCF              <1>     dec rdi
   826 000041C8 FFC9                <1>     dec ecx
   827 000041CA 81F901000000        <1>     cmp ecx, 1
   828 000041D0 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   829                              <1> .printLp:
   830 000041D2 8A17                <1>     mov dl, byte [rdi]
   831 000041D4 B402                <1>     mov ah, 02h
   832 000041D6 CD21                <1>     int 21h
   833 000041D8 48FFCF              <1>     dec rdi
   834 000041DB FFC9                <1>     dec ecx
   835 000041DD 75F3                <1>     jnz .printLp
   836                              <1> .exit:
   837 000041DF 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   838                              <1>     return
    13                              <2> %%_ret:
    14 000041E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> .errPrint:
   840                              <1> ;Print a default ? symbol if an overflow occurs.
   841 000041E3 B23F                <1>     mov dl, "?"
   842 000041E5 B800020000          <1>     mov eax, 0200h
   843 000041EA CD21                <1>     int 21h
   844 000041EC EBF1                <1>     jmp short .exit
   845                              <1> 
   846                              <1> decimalise:
   847                              <1> ;Input: rax = value to decimalise
   848                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   849                              <1> ;       ecx = buffer length
   850                              <1> ;Output: Buffer @ rdi filled in! 
   851                              <1> ;       ecx = Number of chars in buffer.
   852                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   853                              <1> ;   we return with CF=CY. Else, CF=NC.
   854 000041EE 57                  <1>     push rdi
   855 000041EF 89CE                <1>     mov esi, ecx    
   856 000041F1 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   857 000041F3 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   858                              <1> .lp:
   859 000041F8 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   860 000041FB 7514                <1>     jne .skipSep
   861 000041FD 4038CE              <1>     cmp sil, cl
   862 00004200 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   863 00004202 8A15(FC000000)      <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   864 00004208 8817                <1>     mov byte [rdi], dl
   865 0000420A 48FFC7              <1>     inc rdi 
   866 0000420D FEC1                <1>     inc cl          ;Inc number of chars
   867 0000420F 30ED                <1>     xor ch, ch      ;Reset comma counter
   868                              <1> .skipSep:
   869 00004211 4038CE              <1>     cmp sil, cl
   870 00004214 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   871 00004216 31D2                <1>     xor edx, edx
   872 00004218 48F7F3              <1>     div rbx         ;Divide rax by 10
   873 0000421B 80C230              <1>     add dl, "0"     
   874 0000421E 8817                <1>     mov byte [rdi], dl
   875 00004220 48FFC7              <1>     inc rdi
   876 00004223 FEC1                <1>     inc cl          ;Inc number of chars
   877 00004225 FEC5                <1>     inc ch          ;Inc to keep track of commas
   878 00004227 4885C0              <1>     test rax, rax
   879 0000422A 75CC                <1>     jnz .lp
   880                              <1> ;The test cleared CF if we are here
   881 0000422C 0FB6C9              <1>     movzx ecx, cl
   882                              <1> .exit:
   883 0000422F 5F                  <1>     pop rdi
   884                              <1>     return
    13                              <2> %%_ret:
    14 00004230 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .exitErr:
   886 00004231 F9                  <1>     stc
   887 00004232 EBFB                <1>     jmp short .exit
   888                              <1> printDecimalWord:
   889                              <1> ;Takes a word in ax and print it's decimal representation.
   890                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   891                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   892                              <1> ;Input: eax = Zero extended word to print
   893 00004234 31C9                <1>     xor ecx, ecx
   894 00004236 85C0                <1>     test eax, eax
   895 00004238 750C                <1>     jnz .notZero
   896 0000423A B930000000          <1>     mov ecx, "0"
   897 0000423F BD01000000          <1>     mov ebp, 1  ;Print one digit
   898 00004244 EB19                <1>     jmp short .goPrint
   899                              <1> .notZero:
   900 00004246 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   901 00004248 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   902                              <1> .mainLp:
   903 0000424D FFC5                <1>     inc ebp
   904 0000424F C1E108              <1>     shl ecx, 8    ;Space for next nybble
   905 00004252 31D2                <1>     xor edx, edx
   906 00004254 F7F6                <1>     div esi
   907 00004256 80C230              <1>     add dl, '0'
   908 00004259 88D1                <1>     mov cl, dl    ;Save remainder byte
   909 0000425B 85C0                <1>     test eax, eax   ;We zero yet?
   910 0000425D 75EE                <1>     jnz .mainLp
   911                              <1> .goPrint:
   912 0000425F 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   913 00004261 C1E908              <1>     shr ecx, 8    ;Get next digit down
   914 00004264 B402                <1>     mov ah, 02h
   915 00004266 CD21                <1>     int 21h
   916 00004268 FFCD                <1>     dec ebp
   917 0000426A 75F3                <1>     jnz .goPrint
   918                              <1>     return
    13                              <2> %%_ret:
    14 0000426C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   919                              <1> 
   920                              <1> getDecimalWord:
   921                              <1> ;Works on MAX A dword in eax
   922                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   923 0000426D 31C9                <1>     xor ecx, ecx
   924 0000426F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   925 00004271 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   926                              <1> .dpfb0:
   927 00004276 FFC5                <1>     inc ebp
   928 00004278 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   929 0000427C 31D2                <1>     xor edx, edx
   930 0000427E 48F7F3              <1>     div rbx
   931 00004281 80C230              <1>     add dl, '0'
   932 00004284 80FA39              <1>     cmp dl, '9'
   933 00004287 7603                <1>     jbe .dpfb1
   934 00004289 80C207              <1>     add dl, 'A'-'0'-10
   935                              <1> .dpfb1:
   936 0000428C 88D1                <1>     mov cl, dl    ;Save remainder byte
   937 0000428E 4885C0              <1>     test rax, rax
   938 00004291 75E3                <1>     jnz .dpfb0
   939                              <1>     return
    13                              <2> %%_ret:
    14 00004293 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> getByte:
   941                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   942 00004294 E807000000          <1>     call getNum
   943 00004299 3D00010000          <1>     cmp eax, 100h
   944 0000429E F5                  <1>     cmc
   945                              <1>     return
    13                              <2> %%_ret:
    14 0000429F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> getNum:
   947                              <1> ;Gets a number from a command line.
   948                              <1> ;Input: rsi -> String to get number from
   949                              <1> ;Output: rsi -> Char which terminated the accumulation
   950                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   951                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   952 000042A0 51                  <1>     push rcx
   953 000042A1 53                  <1>     push rbx
   954 000042A2 31DB                <1>     xor ebx, ebx
   955 000042A4 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   956 000042A6 31C0                <1>     xor eax, eax    
   957                              <1> .lp:
   958 000042A8 AC                  <1>     lodsb
   959 000042A9 3C30                <1>     cmp al, "0"
   960 000042AB 721B                <1>     jb .exit
   961 000042AD 3C39                <1>     cmp al, "9"
   962 000042AF 7717                <1>     ja .exit
   963 000042B1 2C30                <1>     sub al, "0"                     ;Convert to binary 
   964 000042B3 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   965 000042B7 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   966 000042B9 01C1                <1>     add ecx, eax
   967 000042BB FFC3                <1>     inc ebx
   968 000042BD 81FB09000000        <1>     cmp ebx, 9
   969 000042C3 75E3                <1>     jne short .lp   ;Get next digit
   970 000042C5 F9                  <1>     stc             ;Yikesaroony
   971 000042C6 EB01                <1>     jmp short .exitBad
   972                              <1> .exit:
   973 000042C8 F8                  <1>     clc             ;Clear CF
   974                              <1> .exitBad:
   975 000042C9 89C8                <1>     mov eax, ecx
   976 000042CB 5B                  <1>     pop rbx
   977 000042CC 59                  <1>     pop rcx
   978 000042CD 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   979                              <1>     return
    13                              <2> %%_ret:
    14 000042D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> freezePC:
   983 000042D1 488D155FC4FFFF      <1>     lea rdx, memBad1
   984 000042D8 B409                <1>     mov ah, 09h
   985 000042DA CD21                <1>     int 21h
   986                              <1> .altEP:
   987 000042DC 488D157DC4FFFF      <1>     lea rdx, memBad3
   988 000042E3 B409                <1>     mov ah, 09h
   989 000042E5 CD21                <1>     int 21h
   990                              <1> .lp:
   991 000042E7 F390                <1>     pause
   992 000042E9 F4                  <1>     hlt
   993 000042EA EBFB                <1>     jmp short .lp
   994                              <1> 
   995                              <1> setDTA:
   996 000042EC 50                  <1>     push rax
   997 000042ED 52                  <1>     push rdx
   998 000042EE 488D15(6E010000)    <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   999 000042F5 B8001A0000          <1>     mov eax, 1A00h
  1000 000042FA CD21                <1>     int 21h
  1001 000042FC 5A                  <1>     pop rdx
  1002 000042FD 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 000042FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> 
  1005                              <1> getDTA:
  1006 000042FF 488D15(6E010000)    <1>     lea rdx, cmdFFBlock
  1007                              <1>     return
    13                              <2> %%_ret:
    14 00004306 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> resetNation:
  1010                              <1> ;(Re)sets the country and switchar data
  1011 00004307 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
  1012 0000430C CD21                <1>     int 21h
  1013 0000430E 3CFF                <1>     cmp al, -1
  1014 00004310 7412                <1>     je .skipSwitch
  1015 00004312 8815F3BCFFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
  1016 00004318 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
  1017 0000431B 7507                <1>     jne .skipSwitch
  1018 0000431D C605E6BCFFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
  1019                              <1> .skipSwitch:
  1020 00004324 B800380000          <1>     mov eax, 3800h  ;Get current country data
  1021 00004329 488D15(F5000000)    <1>     lea rdx, ctryData
  1022 00004330 CD21                <1>     int 21h ;Write the data to the internal country table 
  1023                              <1>     return
    13                              <2> %%_ret:
    14 00004332 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> 
  1025                              <1> resetIDTentries:
  1026                              <1> ;Resets the IDT entries if they were changed by dead child process
  1027 00004333 488D1571020000      <1>     lea rdx, critErrorHandler
  1028 0000433A B824250000          <1>     mov eax, 2524h
  1029 0000433F CD21                <1>     int 21h
  1030 00004341 488D1577010000      <1>     lea rdx, ctrlCHandler
  1031 00004348 B823250000          <1>     mov eax, 2523h
  1032 0000434D CD21                <1>     int 21h
  1033 0000434F 488D15FBCAFFFF      <1>     lea rdx, appRet
  1034 00004356 B822250000          <1>     mov eax, 2522h
  1035 0000435B CD21                <1>     int 21h
  1036                              <1>     return
    13                              <2> %%_ret:
    14 0000435D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1037                              <1> 
  1038                              <1> ;-------------------------------
  1039                              <1> ; Environment utility functions
  1040                              <1> ;-------------------------------
  1041                              <1> 
  1042                              <1> cmpEnvVar:
  1043                              <1> ;Checks that we have found the environment variable we are looking for.
  1044                              <1> ;Input: rsi -> Environment var to verify the name of
  1045                              <1> ;       rdi -> Supplied var name to compare against
  1046                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1047 0000435E 56                  <1>     push rsi
  1048 0000435F 57                  <1>     push rdi
  1049 00004360 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1050                              <1> .lp:
  1051 00004363 AC                  <1>     lodsb               ;Pick up from environment string
  1052 00004364 E863FCFFFF          <1>     call ucChar         ;Upper case it!
  1053 00004369 3807                <1>     cmp byte [rdi], al  
  1054 0000436B 7509                <1>     jne .exit
  1055 0000436D 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1056 0000436F 7405                <1>     je .exit
  1057 00004371 48FFC7              <1>     inc rdi
  1058 00004374 EBED                <1>     jmp short .lp
  1059                              <1> .exit:
  1060 00004376 5F                  <1>     pop rdi
  1061 00004377 5E                  <1>     pop rsi
  1062                              <1>     return
    13                              <2> %%_ret:
    14 00004378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1063                              <1> 
  1064                              <1> checkEnvGoodAndGet:
  1065                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1066                              <1> ;Output:
  1067                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1068                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1069                              <1> ;           rsi -> Environment pointer
  1070 00004379 50                  <1>     push rax
  1071 0000437A 51                  <1>     push rcx
  1072 0000437B 57                  <1>     push rdi
  1073 0000437C 4150                <1>     push r8
  1074 0000437E 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1075 00004382 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1076 00004385 741A                <1>     jz .badExit
  1077 00004387 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1078 0000438A C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1079                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1080 0000438D 31C0                <1>     xor eax, eax
  1081                              <1> .pathNulScan:
  1082 0000438F F2AE                <1>     repne scasb
  1083 00004391 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1084 00004393 740C                <1>     jz .badExit
  1085 00004395 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1086 00004397 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1087 00004399 31C0                <1>     xor eax, eax
  1088 0000439B FFC0                <1>     inc eax ;Clear the ZF
  1089 0000439D 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1090                              <1> .badExit:
  1091 000043A1 4158                <1>     pop r8
  1092 000043A3 5F                  <1>     pop rdi
  1093 000043A4 59                  <1>     pop rcx
  1094 000043A5 58                  <1>     pop rax
  1095                              <1>     return
    13                              <2> %%_ret:
    14 000043A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> 
  1097                              <1> 
  1098                              <1> findEnvSpace:
  1099                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1100                              <1> ; free space in the pointer and a count of free space in the environment.
  1101                              <1> ;If count is zero, pointer is not to be used.
  1102                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1103 000043A7 31C9                <1>     xor ecx, ecx
  1104 000043A9 31C0                <1>     xor eax, eax    ;Clear eax too
  1105 000043AB 51                  <1>     push rcx
  1106 000043AC E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1107 000043B1 59                  <1>     pop rcx
  1108                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000043B2 74(A6)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1109 000043B4 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1110 000043B8 FFC9                <1>     dec ecx ;Make into a large counter
  1111 000043BA 4889F7              <1>     mov rdi, rsi    
  1112                              <1> .endsearch:
  1113 000043BD F2AE                <1>     repne scasb ;Scan
  1114 000043BF 803F00              <1>     cmp byte [rdi], 0
  1115 000043C2 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1116                              <1>     ;Here we are at the end of the environment
  1117 000043C4 F7D9                <1>     neg ecx
  1118 000043C6 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1119 000043C8 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1120 000043CB 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1121 000043CE 29C8                <1>     sub eax, ecx
  1122 000043D0 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1123                              <1>     return
    13                              <2> %%_ret:
    14 000043D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> searchForEnvVar:
  1126                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1127                              <1> ;Input: rdi -> Var name to look for.
  1128                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1129 000043D3 57                  <1>     push rdi
  1130 000043D4 51                  <1>     push rcx
  1131 000043D5 52                  <1>     push rdx
  1132 000043D6 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1133 000043DA 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1134                              <1> .varLp:
  1135 000043DD 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1136 000043E0 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1137 000043E5 7416                <1>     je .varFound
  1138 000043E7 31C0                <1>     xor eax, eax        ;Search for a null
  1139 000043E9 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1140 000043EC B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1141 000043F1 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1142 000043F3 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1143 000043F5 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1144 000043F7 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1145 000043FA EBE1                <1>     jmp short .varLp    ;And scan again!
  1146                              <1> .varNotFound:
  1147 000043FC F9                  <1>     stc
  1148                              <1> .varFound:
  1149 000043FD 59                  <1>     pop rcx
  1150 000043FE 5A                  <1>     pop rdx
  1151 000043FF 5F                  <1>     pop rdi
  1152                              <1>     return
    13                              <2> %%_ret:
    14 00004400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1153                              <1> 
  1154                              <1> envFree:
  1155                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1156                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1157                              <1> ; free byte of the environment!
  1158                              <1> ;Input: rsi -> Variable to free.
  1159                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1160                              <1> ;        ecx = Number of free bytes in env
  1161 00004401 4889F7              <1>     mov rdi, rsi
  1162 00004404 31C0                <1>     xor eax, eax
  1163                              <1> .freeLp:
  1164 00004406 803F00              <1>     cmp byte [rdi], 0
  1165 00004409 7403                <1>     je .exitLp
  1166 0000440B AA                  <1>     stosb
  1167 0000440C EBF8                <1>     jmp short .freeLp
  1168                              <1> .exitLp:
  1169                              <1> ;rdi points to the terminating null of the var we just deleted
  1170                              <1> ;rsi points to the start of the free space
  1171 0000440E 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1172 00004411 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1173 00004416 7504                <1>     jne .prepPullup
  1174 00004418 31C0                <1>     xor eax, eax
  1175 0000441A EB0E                <1>     jmp short .cleanEnv
  1176                              <1> .prepPullup:
  1177 0000441C 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1178                              <1> .pullUp:
  1179 0000441F AC                  <1>     lodsb
  1180 00004420 AA                  <1>     stosb
  1181 00004421 84C0                <1>     test al, al ;Did we pick up a zero
  1182 00004423 75FA                <1>     jne .pullUp ;If not, keep copying
  1183 00004425 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1184 00004428 75F5                <1>     jne .pullUp
  1185                              <1> ;We are at the end of the copy!
  1186                              <1> .cleanEnv:
  1187 0000442A AA                  <1>     stosb   ;Store the famous second null
  1188 0000442B 48FFCF              <1>     dec rdi ;without incrementing it!!
  1189 0000442E E807000000          <1>     call getFreeSpace
  1190 00004433 31C0                <1>     xor eax, eax
  1191 00004435 51                  <1>     push rcx
  1192 00004436 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1193 00004438 59                  <1>     pop rcx
  1194                              <1>     return
    13                              <2> %%_ret:
    14 00004439 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1195                              <1> 
  1196                              <1> getFreeSpace:
  1197                              <1> ;Output: ecx = Number of free bytes in the environment block
  1198 0000443A 56                  <1>     push rsi
  1199 0000443B 57                  <1>     push rdi
  1200 0000443C E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1201 00004441 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1202 00004445 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1203 00004448 E805000000          <1>     call getEnvSize ;Get total block size
  1204 0000444D 29F9                <1>     sub ecx, edi    ;Get difference!
  1205 0000444F 5F                  <1>     pop rdi
  1206 00004450 5E                  <1>     pop rsi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00004451 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> 
  1209                              <1> getEnvSize:
  1210                              <1> ;Gets the number of bytes in the environment allocation
  1211                              <1> ;Output: ecx = Number of bytes in the environment!
  1212 00004452 53                  <1>     push rbx
  1213 00004453 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1214 00004457 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1215 0000445A C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1216 0000445D 5B                  <1>     pop rbx
  1217                              <1>     return
    13                              <2> %%_ret:
    14 0000445E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1218                              <1> 
  1219                              <1> getPtrToEndOfEnv:
  1220                              <1> ;Gets ptr to end of the environment
  1221                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1222 0000445F 50                  <1>     push rax
  1223 00004460 51                  <1>     push rcx
  1224 00004461 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1225 00004465 31C0                <1>     xor eax, eax
  1226 00004467 31C9                <1>     xor ecx, ecx
  1227 00004469 FFC9                <1>     dec ecx
  1228                              <1> .lp:
  1229 0000446B F2AE                <1>     repne scasb
  1230 0000446D 3807                <1>     cmp byte [rdi], al
  1231 0000446F 75FA                <1>     jne .lp
  1232 00004471 59                  <1>     pop rcx
  1233 00004472 58                  <1>     pop rax
  1234                              <1>     return
    13                              <2> %%_ret:
    14 00004473 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1235                              <1> 
  1236                              <1> growEnvBlock:
  1237                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1238                              <1> ; newly allocated 160 byte block of the environment.
  1239                              <1> ;Returns:   CF=NC - Environment grown ok!
  1240                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1241                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1242 00004474 50                  <1>     push rax
  1243 00004475 53                  <1>     push rbx
  1244 00004476 51                  <1>     push rcx
  1245 00004477 56                  <1>     push rsi
  1246 00004478 57                  <1>     push rdi
  1247 00004479 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1248 0000447E E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1249 00004483 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1250 00004487 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1251 0000448A 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1252 00004490 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1253 00004496 7321                <1>     jae .tooLarge
  1254                              <1>     ;Here ZF must be NZ.
  1255 00004498 4150                <1>     push r8
  1256 0000449A 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1257 0000449E B8004A0000          <1>     mov eax, 4A00h
  1258 000044A3 CD21                <1>     int 21h
  1259 000044A5 4158                <1>     pop r8
  1260 000044A7 720A                <1>     jc .exit
  1261                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1262                              <1>     ; so we add 160 zeros to the count of bytes
  1263 000044A9 81C1A0000000        <1>     add ecx, 0A0h
  1264 000044AF 31C0                <1>     xor eax, eax
  1265 000044B1 F3AA                <1>     rep stosb
  1266                              <1> .exit:
  1267 000044B3 5F                  <1>     pop rdi
  1268 000044B4 5E                  <1>     pop rsi
  1269 000044B5 59                  <1>     pop rcx
  1270 000044B6 5B                  <1>     pop rbx
  1271 000044B7 58                  <1>     pop rax
  1272                              <1>     return
    13                              <2> %%_ret:
    14 000044B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1273                              <1> .tooLarge:
  1274 000044B9 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1275 000044BC F9                  <1>     stc             ;Set CF
  1276 000044BD EBF4                <1>     jmp short .exit
    24                                  %include "./src/int23h.asm"
     1                              <1> ctrlCHandler:
     2 000044BF F605(1A000000)80    <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 000044C6 7411                <1>     jz .notLoading
     4 000044C8 F605(1A000000)40    <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 000044CF 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 000044D1 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 000044D7 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 000044D9 F605(1A000000)02    <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 000044E0 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 000044E2 84E4                <1>     test ah, ah
    17 000044E4 7424                <1>     jz .inInt23 
    18 000044E6 80FC0C              <1>     cmp ah, 0Ch
    19 000044E9 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 000044EB 50                  <1>     push rax
    23 000044EC 488D0512000000      <1>     lea rax, .i23Bounce
    24 000044F3 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000044F8 31C0                <1>     xor eax, eax
    26 000044FA 668CC8              <1>     mov ax, cs
    27 000044FD 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004502 58                  <1>     pop rax
    29 00004503 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004505 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 0000450A 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 0000450C 800D(1A000000)02    <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004513 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 0000451A 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 0000451C 50                  <1>     push rax
    43 0000451D B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004522 CD21                <1>     int 21h
    45 00004524 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004525 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 0000452C 7462                <1>     jz .notBat
    49 0000452E F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004535 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004537 E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 0000453C 488D1581BCFFFF      <1>     lea rdx, batFail
    57 00004543 E854F8FFFF          <1>     call printString
    58 00004548 488D15EDBAFFFF      <1>     lea rdx, batYNstr
    59 0000454F 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004555 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 0000455A CD21                <1>     int 21h
    62 0000455C 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 0000455E 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004561 E866FAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004566 3C59                <1>     cmp al, "Y"
    66 00004568 740E                <1>     je .killBat
    67 0000456A 3C4E                <1>     cmp al, "N"
    68 0000456C 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 0000456E E822F8FFFF          <1>     call printCRLF
    74 00004573 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004578 E82AD3FFFF          <1>     call batCleanup
    77 0000457D EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 0000457F E823D3FFFF          <1>     call batCleanup
    80 00004584 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC   
    81 0000458B E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004590 66813D75BAFFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004599 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 0000459B E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 000045A0 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 000045A7 F9                  <1>     stc     ;Set CF to kill the task
    91 000045A8 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    25                                  %include "./src/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000045AB 53                  <1>     push rbx
    25 000045AC 51                  <1>     push rcx
    26 000045AD 52                  <1>     push rdx
    27 000045AE 57                  <1>     push rdi
    28 000045AF 56                  <1>     push rsi
    29 000045B0 E80F020000          <1>     call errSwapHdls
    30 000045B5 FC                  <1>     cld         ;Make String ops go forward
    31 000045B6 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000045B9 88054DBAFFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 000045BF 488D15A1BBFFFF      <1>     lea rdx, crlf
    34 000045C6 E8D1F7FFFF          <1>     call printString    ;Trashes ax
    35 000045CB 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 000045CE 53                  <1>     push rbx        ;Save the action bitfield
    38 000045CF 56                  <1>     push rsi        ;Save the driver pointer
    39 000045D0 B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 000045D5 CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 000045D7 488D3530C3FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 000045DE 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 000045E1 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 000045E3 66A5                <1>     movsw
    51 000045E5 A4                  <1>     movsb
    52 000045E6 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 000045E9 5E                  <1>     pop rsi
    54 000045EA 5B                  <1>     pop rbx
    55 000045EB 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 000045F1 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 000045F3 81FF24000000        <1>     cmp edi, errShrFul
    60 000045F9 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 000045FB B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004600 CD21                <1>     int 21h
    65 00004602 3CFF                <1>     cmp al, -1
    66 00004604 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004606 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004608 B405                <1>     mov ah, 05h         ;Get the string we need
    69 0000460A CD21                <1>     int 21h
    70 0000460C 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 0000460E 4889FA              <1>     mov rdx, rdi        
    76 00004611 50                  <1>     push rax            
    77 00004612 31C0                <1>     xor eax, eax
    78 00004614 89C1                <1>     mov ecx, eax
    79 00004616 FFC9                <1>     dec ecx
    80 00004618 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 0000461A C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 0000461E E879F7FFFF          <1>     call printString 
    83 00004623 C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004627 58                  <1>     pop rax
    85 00004628 84C0                <1>     test al, al ;Is this zero?
    86 0000462A 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 0000462C E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004631 488D150BC3FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004638 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 0000463A BA1F000000          <1>     mov edx, errGF
    98 0000463F 81FF24000000        <1>     cmp edi, errShrFul
    99 00004645 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004648 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 0000464D 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004653 0F42FA              <1>     cmovb edi, edx
   104 00004656 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 0000465C 57                  <1>     push rdi    ;Save the error code for checking
   106 0000465D 488D15A4C1FFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004664 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004667 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 0000466B 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 0000466E 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 0000466F E828F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004674 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 0000467A 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 0000467C 488D15DEC2FFFF      <1>     lea rdx, readMsg
   120 00004683 488D3DE6C2FFFF      <1>     lea rdi, writeMsg
   121 0000468A F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 0000468D 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004691 E806F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004696 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004699 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 0000469F 488D15B4C2FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 000046A6 E8F1F6FFFF          <1>     call printString
   130 000046AB 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 000046AD 80C241              <1>     add dl, "A" ;Add ASCII code
   132 000046B0 B402                <1>     mov ah, 02h ;Print char in dl
   133 000046B2 CD21                <1>     int 21h
   134                              <1>     
   135 000046B4 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 000046B6 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 000046BB 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 000046C0 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 000046C2 B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 000046C4 E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 000046C9 E8C7F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 000046CE 488D15AAC2FFFF      <1>     lea rdx, abortMsg
   149 000046D5 E8C2F6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 000046DA F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 000046DD 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 000046DF 488D15B1C2FFFF      <1>     lea rdx, betweenMsg
   154 000046E6 E8B1F6FFFF          <1>     call printString
   155 000046EB 488D159AC2FFFF      <1>     lea rdx, retryMsg
   156 000046F2 E8A5F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 000046F7 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 000046FA 7418                <1>     jz .userFail
   160 000046FC 488D1594C2FFFF      <1>     lea rdx, betweenMsg
   161 00004703 E894F6FFFF          <1>     call printString
   162 00004708 488D1576C2FFFF      <1>     lea rdx, ignoreMsg
   163 0000470F E888F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004714 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004717 7418                <1>     jz .userMsgEnd
   167 00004719 488D1577C2FFFF      <1>     lea rdx, betweenMsg
   168 00004720 E877F6FFFF          <1>     call printString
   169 00004725 488D1566C2FFFF      <1>     lea rdx, failMsg
   170 0000472C E86BF6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004731 488D1562C2FFFF      <1>     lea rdx, endMsg
   173 00004738 E85FF6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 0000473D 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 0000473F 488D3D57C2FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004746 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 0000474B CD21                <1>     int 21h ;Get char in al
   179 0000474D 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 0000474F 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004751 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004753 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004754 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004756 FFC1                <1>     inc ecx
   186 00004758 81F904000000        <1>     cmp ecx, 4
   187 0000475E 75F3                <1>     jne .uip1
   188 00004760 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004765 E82BF6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 0000476A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 0000476C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 0000476E 7427                <1>     je .cehExit
   195 00004770 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004772 740F                <1>     je .viIgnore
   197 00004774 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004776 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004778 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 0000477B 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004781 EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004783 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004786 0F843DFFFFFF        <1>     jz .userInput
   206 0000478C EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 0000478E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004791 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004797 E845000000          <1>     call errRetHdls
   212 0000479C 5E                  <1>     pop rsi
   213 0000479D 5F                  <1>     pop rdi
   214 0000479E 5A                  <1>     pop rdx
   215 0000479F 59                  <1>     pop rcx
   216 000047A0 5B                  <1>     pop rbx
   217 000047A1 48CF                <1>     iretq
   218                              <1> .charError:
   219 000047A3 C60562B8FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 000047AA B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 000047AF 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 000047B6 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 000047B7 88C2                <1>     mov dl, al  ;Move char into dl
   225 000047B9 B402                <1>     mov ah, 02h
   226 000047BB CD21                <1>     int 21h ;Print char
   227 000047BD E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 000047BF E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 000047C4 50                  <1>     push rax
   236 000047C5 53                  <1>     push rbx
   237 000047C6 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 000047CB 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 000047CE 66890539B8FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 000047D5 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 000047D9 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 000047DB 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 000047DE 5B                  <1>     pop rbx
   244 000047DF 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 000047E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 000047E1 50                  <1>     push rax
   250 000047E2 53                  <1>     push rbx
   251 000047E3 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 000047E8 0FB7051FB8FFFF      <1>     movzx eax, word [errHdls]
   253 000047EF 66C70516B8FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 000047F8 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 000047FB 5B                  <1>     pop rbx
   256 000047FC 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 000047FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 000047FE 50                  <1>     push rax        ;Save rax
   263 000047FF B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004804 CD21                <1>     int 21h
   265 00004806 58                  <1>     pop rax
   266 00004807 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 0000480D 7605                <1>     jbe .pspJftExit
   268 0000480F 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004813 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004814 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004818 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                                  
    27                                  Segment bss nobits align=cmdAlign follows=cmd
    28                                  %include "./dat/cmdBss.asm"
     1                              <1> 
     2                              <1> ;Moved most strings and initialised 0 variables here to reduce disk image size
     3 00000000 ????                <1> returnCode  dw ?    ;Return Code from a child process
     4 00000002 ????????????????    <1> int2Epsp    dq ?    ;
     5 0000000A ????????????????    <1> int2Ersp    dq ?    ;Save the far Int 2E entry stack pointer!
     6 00000012 ????????????????    <1> int2Edta    dq ?    ;
     7                              <1> ;=============================================================
     8 0000001A ??                  <1> statFlg1    db ?    ;Flags 1 for the command interpreter
     9                              <1> ;=============================================================
    10                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    11                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    12                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    13                              <1> inBatch     equ 8   ;Up if processing a batch file
    14                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    15                              <1> inCritical  equ 20h ;Up if processing a command.
    16                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    17                              <1> inLdr       equ 80h ;Up if in loader
    18                              <1> ;Batch state variables.
    19 0000001B ????????????????    <1> bbPtr       dq ?                    ;Ptr to the batch block
    20 00000023 <res 4Fh>           <1> batFile     db fileSpecZL dup (?)   ;Path to bat to execute. Qual with 
    21 00000072 ??                  <1> ifFlg       db ?                    ;Flags for IF
    22                              <1> ifReset     equ 0                   ;Value to reset the flags
    23                              <1> ifNot       equ 1                   ;Set if NOT encountered
    24                              <1> ifCond      equ 2                   ;Set if condition encountered     
    25 00000073 <res 82h>           <1> batCmdline  db cmdBufferL dup (?)   ;Stores original commandline
    26                              <1> 
    27                              <1> ;Structs and strings
    28 000000F5 <res 26h>           <1> ctryData    db countryStruc_size dup (?)    ;Length of the country table
    29 0000011B <res 43h>           <1> currDirStr  db fullDirPathZL dup (?)        ;Current Directory String
    30 0000015E <res 10h>           <1> cmdFcb      db 10h dup (?) ;Internal "fcb" for parsing the command name
    31 0000016E <res 2Bh>           <1> cmdFFBlock  db ffBlock_size dup (?) ;Internal Find First Block to use as default DTA
    32                              <1> 
    33 00000199 <res 20h>           <1> launchBlock db execProg_size dup (?)
    34                              <1> 
    35                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    36                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    37                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    38                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    39                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    40                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    41                              <1> inLen   equ 128 
    42                              <1> batCpyBuffer:   ;Ptr to the buffer to drop the processed line into
    43 000001B9 <res 82h>           <1> inBuffer    db cmdBufferL dup (?)   ;Original input from user! 128 chars max!
    44                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    45 0000023B <res 82h>           <1> cpyBuffer   db cmdBufferL dup (?)   ;Copied input for processing
    46 000002BD <res 82h>           <1> cmdBuffer   db cmdBufferL dup (?)   ;Buffer with the command pipeline
    47 0000033F <res 4Fh>           <1> cmdPathSpec db fileSpecZL dup (?)   ;Space for full path to a ext cmd
    48 0000038E <res Eh>            <1> cmdName     db cmdNameL dup (?)     ;Cmd name prefixed by length 
    49                              <1> 
    50 0000039C <res 4Fh>           <1> rdrInFilespec   db fileSpecZL dup (?)   ;Space for the redir in filespec
    51 000003EB <res 4Fh>           <1> rdrOutFilespec  db fileSpecZL dup (?)   ;Space for the redir out filespec
    52                              <1> 
    53                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    54 0000043A <res 4Fh>           <1> pipe1Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    55 00000489 <res 4Fh>           <1> pipe2Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    56                              <1> 
    57 000004D8 ????????????????    <1> newPipe dq ?    ;Pointer to the new pathspec (STDOUT)
    58 000004E0 ????????????????    <1> oldPipe dq ?    ;Pointer to the old pathspec (STDIN)
    59                              <1> 
    60                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    61                              <1> ; a really long invalid DOS path for PATH to work properly.
    62 000004E8 <res 104h>          <1> searchSpec  db 2*cmdBufferL dup (?)   
    63                              <1> 
    64                              <1> ;Internal Function vars
    65                              <1> ;Dir Vars
    66 000005EC ??                  <1> dirFlags    db ?    ;Dir Flags.     Bit[0] set => /W or /w specified
    67                              <1> ;                                   Bit[1] set => /P or /p specified
    68                              <1> ;                                   Bit[2] set => A file/path specified
    69 000005ED ??                  <1> dirLineCtr  db ?    ;Counter to keep track of which line we printed (0-23)
    70 000005EE ????????            <1> dirFileCtr  dd ?    ;Used in /W mode, rollover after 5
    71 000005F2 ??                  <1> dirDrv      db ?    ;0 based drive number to use
    72 000005F3 <res 82h>           <1> dirSrchDir  db cmdBufferL dup (?)   ;Search directory 
    73 00000675 <res 10h>           <1> dirSrchFCB  db 10h dup (?)    ;We copy the search pattern here, inited in dir
    74                              <1> dirWideType equ 1
    75                              <1> dirPageType equ 2
    76                              <1> dirFileType equ 4
    77                              <1> 
    78                              <1> ;Time/Date vars
    79 00000685 ??                  <1> td1 db ?    ;Minutes/Year
    80 00000686 ??                  <1> td2 db ?    ;Hours/Zero
    81 00000687 ??                  <1> td3 db ?    ;Hundredths/Day
    82 00000688 ??                  <1> td4 db ?    ;Seconds/Month
    83                              <1> 
    84                              <1> ;Rename/Copy/Delete Buffers
    85                              <1> delPath:
    86                              <1> comspecDir:    ;Used to store the directory passed during startup
    87 00000689 <res 82h>           <1> srcSpec     db cmdBufferL dup (?)
    88 0000070B <res 82h>           <1> destSpec    db cmdBufferL dup (?)
    89 0000078D ????????????????    <1> srcPtr      dq ?    ;Where to copy pattern to in src path
    90 00000795 ????????????????    <1> destPtr     dq ?    ;Where to copy pattern to in dest path
    91 0000079D <res Bh>            <1> renName     db 11 dup (?) ;Build a name pattern here in FCB format
    92                              <1> ;Copy vars
    93 000007A8 ??                  <1> verifyFlg   db ?    ;Set if verify on before copy
    94 000007A9 ????                <1> sourceHdl   dw ?    ;These get set to -1 on entry to copy
    95 000007AB ????                <1> destHdl     dw ?
    96 000007AD ????                <1> srcHdlInfo  dw ?    ;Save the hdl device info (bit 7 Set -> Char dev)
    97 000007AF ????????????????    <1> cpBufPtr    dq ?    ;Ptr to the xfr arena
    98 000007B7 ????                <1> wCpBufSz    dw ?    ;Copy Buffer size, max 4096 bytes
    99 000007B9 ????????            <1> dCpCnt      dd ?    ;Number of files we have copied
   100 000007BD ??                  <1> bCpFlg      db ?    ;Copy state flag
   101                              <1> 
   102                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   103                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   104                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   105                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   106                              <1> oneDest     equ 10h ;Single destination, not dir 
   107                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   108                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   109                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   110                              <1> 
   111                              <1> ;Environment manipulation vars
   112 000007BE ????                <1> envVarSz        dw ?    ;Env var size
   113 000007C0 ????                <1> envVarNamSz     dw ?    ;Env var "name="" length
    29 000007C2 <res Eh>                    alignb 10h
    30                                  bssLen equ ($ - $$)
    31                                  
    32                                  Segment stack nobits align=16 follows=bss
    33 00000000 <res 640h>                  dq 200 dup (?)  ;1.6K stack, para aligned
    34                                  stackTop:   ;Top of the stack
    35 00000640 ????????????????            dq ?    ;Extra paragraph
    36 00000648 ????????????????            dq ?
    37                                  endOfAlloc: ;Symbol to free from once init is over!
    38                                  stackLen equ ($ - $$)
    39                                  
    40                                  Segment init align=cmdAlign valign=cmdAlign follows=cmd vfollows=stack
    41                                  %define currSegVBase section.init.vstart
    42                                  %include "./src/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;Start by copying the loader forwards to make space for the BSS
     3 00000000 488D35F9FFFFFF      <1>     lea rsi, cmdLdr
     4 00000007 488D3D120E0000      <1>     lea rdi, section.init.vstart + initOffset
     5 0000000E B919050000          <1>     mov ecx, initLen
     6 00000013 F3A4                <1>     rep movsb
     7 00000015 488D3D220E0000      <1>     lea rdi, startInit + initOffset
     8 0000001C 57                  <1>     push rdi
     9 0000001D C3                  <1>     ret ;Goto next instruction but reallocated!
    10                              <1> 
    11                              <1> startInit:
    12                              <1> ;First check if the version is ok. If not, return.
    13 0000001E B430                <1>     mov ah, 30h
    14 00000020 CD21                <1>     int 21h
    15 00000022 3C01                <1>     cmp al, 01h ;Version 1
    16 00000024 760D                <1>     jbe .okVersion
    17 00000026 488D158C040000      <1>     lea rdx, badVerStr
    18 0000002D B409                <1>     mov ah, 09h
    19 0000002F CD21                <1>     int 21h
    20                              <1> .exitBad:
    21 00000031 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    22                              <1> .okVersion:
    23                              <1> ;Now the version is ok we store self as parent in the PSP, 
    24                              <1> ; to prevent accidental closure
    25 00000033 800D(1A000000)80    <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    26 0000003A 4C8905(00000000)    <1>     mov qword [pPSP], r8        ;Store PSP ptr in internal var 
    27 00000041 488D25(40060000)    <1>     lea rsp, stackTop           ;And set the stack pointer to our stack
    28 00000048 488D3D(00000000)    <1>     lea rdi, section.bss.start
    29 0000004F B9D0070000          <1>     mov ecx, bssLen
    30 00000054 31C0                <1>     xor eax, eax
    31 00000056 F3AA                <1>     rep stosb
    32                              <1> ;Now eject all the unneeded space, to make space for allocating.
    33                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    34 00000058 488D1DBA040000      <1>     lea rbx, endOfInitAlloc
    35 0000005F 4C29C3              <1>     sub rbx, r8 ;Convert to number of bytes (Could get assembler to do this)
    36 00000062 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
    37 00000068 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    38 0000006B B8004A0000          <1>     mov eax, 4A00h ;Realloc
    39 00000070 CD21                <1>     int 21h
    40 00000072 72BD                <1>     jc .exitBad
    41 00000074 E8(07430000)        <1>     call resetNation
    42                              <1> ;Now space has been made, time to parse the command tail
    43 00000079 E8EC000000          <1>     call parseCmdLine   ;Now parse the command tail.
    44 0000007E E8F0020000          <1>     call doEnv          ;Now enact the command tail actions
    45 00000083 E8(33430000)        <1>     call resetIDTentries    ;Setup IDT entries now. 
    46 00000088 F605(1A000000)01    <1>     test byte [statFlg1], permaShell ;Are we perma?
    47 0000008F 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    48                              <1> ;Ok so we are master COMMAND.COM
    49                              <1> ;Now make myself my own parent task. We already are the current psp
    50 00000095 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    51                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    52 00000099 488D15(AB450000)    <1>     lea rdx, critErrorHandler
    53 000000A0 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    54 000000A4 488D15(BF440000)    <1>     lea rdx, ctrlCHandler
    55 000000AB 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    56 000000AF 488D15(510E0000)    <1>     lea rdx, appRet
    57 000000B6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    58 000000BA 488D15(F4130000)    <1>     lea rdx, int2Eh
    59 000000C1 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000C6 CD21                <1>     int 21h
    61                              <1> ;Always get the Autoexec from the root dir we are booting into
    62 000000C8 E8(A43F0000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
    63 000000CD 0441                <1>     add al, "A"
    64 000000CF 8805(DD070000)      <1>     mov byte [autoSpec], al ;
    65                              <1> ;Now, open AUTOEXEC.BAT. 
    66 000000D5 488D15(DD070000)    <1>     lea rdx, autoSpec
    67 000000DC B8003D0000          <1>     mov eax, 3D00h  ;Open file
    68 000000E1 CD21                <1>     int 21h
    69 000000E3 7212                <1>     jc .noAutoexec
    70                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    71                              <1>     ; the normal hello there! string
    72 000000E5 89C3                <1>     mov ebx, eax
    73 000000E7 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    74 000000EC CD21                <1>     int 21h
    75                              <1> ;Now we do the same as at the end, prepping for jettisoning
    76 000000EE 31D2                <1>     xor edx, edx
    77 000000F0 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    78 000000F2 E954000000          <1>     jmp .prepStart
    79                              <1> .noAutoexec:
    80                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    81 000000F7 488D15(67010000)    <1>     lea rdx, crlf
    82 000000FE B409                <1>     mov ah, 09h
    83 00000100 CD21                <1>     int 21h
    84 00000102 800D(1A000000)40    <1>     or byte [statFlg1], inLdrDT
    85 00000109 E8(042A0000)        <1>     call time.init
    86 0000010E E8(56280000)        <1>     call date.init
    87 00000113 8025(1A000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    88 0000011A 488D15(67010000)    <1>     lea rdx, crlf
    89 00000121 B409                <1>     mov ah, 09h
    90 00000123 CD21                <1>     int 21h
    91                              <1>     ;Now fall thru.
    92                              <1> .notMaster:    
    93                              <1> ;Finish by printing INIT string.
    94 00000125 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    95 0000012C 7529                <1>     jnz .singleCom
    96 0000012E 488D154B030000      <1>     lea rdx, initString
    97 00000135 B409                <1>     mov ah, 09h
    98 00000137 CD21                <1>     int 21h ;Print init string
    99 00000139 E8(A7300000)        <1>     call version.printVersionNumber
   100 0000013E 488D154E030000      <1>     lea rdx, initString2
   101 00000145 B409                <1>     mov ah, 09h
   102 00000147 CD21                <1>     int 21h ;Print init string
   103 00000149 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   104                              <1> .prepStart:
   105 0000014B 8025(1A000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00000152 E9(A1090000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00000157 803D(BA010000)00    <1>     cmp byte [inBuffer + 1], 0
   111 0000015E 0F84(C6320000)      <1>     je exit
   112 00000164 31D2                <1>     xor edx, edx
   113 00000166 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00000168 EBE1                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> 
   117                              <1> parseCmdLine:
   118                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   119                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   120                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   121                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   122                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   123                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   124                              <1> ;           Default is CON
   125                              <1> ;[/C string] means execute the string as a command and terminate immediately
   126                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   127                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   128                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   129                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   130                              <1> ; permanent. Needs a colon after E. 
   131                              <1> ;
   132                              <1> ;Start by setting up the default comspec dir, null terminated
   133 0000016A E8(A43F0000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
   134 0000016F 0441                <1>     add al, "A"
   135 00000171 B43A                <1>     mov ah, ":"
   136 00000173 488D3D(89060000)    <1>     lea rdi, comspecDir
   137 0000017A 66AB                <1>     stosw   ;Store drive specifier
   138 0000017C 0FB605(0A000000)    <1>     movzx eax, byte [pathSep]
   139 00000183 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   140                              <1> 
   141 00000185 E8(EC420000)        <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   142 0000018A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   143                              <1> .parseLp:
   144 00000191 E8(E73F0000)        <1>     call skipDelimiters             ;Strip delims
   145 00000196 AC                  <1>     lodsb
   146 00000197 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   147 0000019A 3C0D                <1>     cmp al, CR
   148 0000019C 0F847C010000        <1>     je .endScan
   149 000001A2 3A05(0B000000)      <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   150 000001A8 752D                <1>     jne .file
   151                              <1> .switch:
   152 000001AA 48FFC6              <1>     inc rsi ;Go past the switch char
   153 000001AD AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   154 000001AE E8(CC3F0000)        <1>     call ucChar
   155 000001B3 3C43                <1>     cmp al, "C"
   156 000001B5 0F842F010000        <1>     je .switchStr
   157 000001BB 3C50                <1>     cmp al, "P"
   158 000001BD 0F8403010000        <1>     je .switchPerma
   159 000001C3 3C45                <1>     cmp al, "E"
   160 000001C5 0F84B0000000        <1>     je .switchEnv
   161 000001CB 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   162                              <1> .badparm:
   163 000001CE 488D15(4B030000)    <1>     lea rdx, badParm
   164 000001D5 EBBA                <1>     jmp short .parseLp
   165                              <1> ;-----------------------------------------------------------------
   166                              <1> ;Search for the filespec
   167                              <1> .file:
   168 000001D7 E8(73410000)        <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   169 000001DC 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   170 000001DF 488D15(E8040000)    <1>     lea rdx, searchSpec
   171 000001E6 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   172 000001EB B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   173 000001F0 CD21                <1>     int 21h
   174 000001F2 7319                <1>     jnc .charOrDir
   175                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   176 000001F4 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   177 000001F6 30C0                <1>     xor al, al
   178 000001F8 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   179 000001FD 741C                <1>     je .dir ;If so, root dir specified, all oki!
   180                              <1> .badSpec:
   181                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   182 000001FF 488D15CB020000      <1>     lea rdx, badCmdDir
   183                              <1> .bs0:
   184 00000206 E8(9C3D0000)        <1>     call printString
   185                              <1> .plhop:
   186 0000020B EB84                <1>     jmp short .parseLp
   187                              <1> ;-----------------------------------------------------------------
   188                              <1> ;Check if a char or directory here
   189                              <1> .charOrDir:
   190 0000020D 8A05(83010000)      <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   191 00000213 2450                <1>     and al, dirCharDev | dirDirectory
   192 00000215 74E8                <1>     jz .badSpec
   193 00000217 A840                <1>     test al, dirCharDev
   194 00000219 7525                <1>     jnz .charDev
   195                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   196                              <1> .dir:
   197 0000021B 56                  <1>     push rsi
   198 0000021C 488D35(E8040000)    <1>     lea rsi, searchSpec 
   199 00000223 488D3D(89060000)    <1>     lea rdi, comspecDir
   200 0000022A E8(B83F0000)        <1>     call strcpy2
   201 0000022F B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   202 00000234 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   203 00000236 5E                  <1>     pop rsi
   204 00000237 C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   205 0000023E EBCB                <1>     jmp short .plhop
   206                              <1> ;-----------------------------------------------------------------
   207                              <1> ;Handle char dev here
   208                              <1> .charDev:
   209                              <1> ;Check the name is max 8 chars in length
   210 00000240 488D3D(E8040000)    <1>     lea rdi, searchSpec
   211 00000247 E8(C23F0000)        <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   212 0000024C 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   213 00000252 771E                <1>     ja .badChar
   214 00000254 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   215 00000255 488D35(E8040000)    <1>     lea rsi, searchSpec
   216 0000025C 488D3D(D4070000)    <1>     lea rdi, devName
   217 00000263 E8(A93F0000)        <1>     call strcpy ;Copy this string over
   218 00000268 5E                  <1>     pop rsi
   219 00000269 C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   220                              <1> .plhop1:
   221 00000270 EB99                <1>     jmp short .plhop    ;parseLp
   222                              <1> .badChar:
   223 00000272 488D15(FE040000)    <1>     lea rdx, badDev
   224                              <1> .bs1:
   225 00000279 EB8B                <1>     jmp short .bs0
   226                              <1> ;-----------------------------------------------------------------
   227                              <1> .switchEnv:
   228 0000027B AC                  <1>     lodsb
   229 0000027C 48FFCE              <1>     dec rsi
   230 0000027F 3C3A                <1>     cmp al, ":"
   231 00000281 0F8547FFFFFF        <1>     jne .badparm
   232 00000287 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   233 0000028A E8(E73F0000)        <1>     call skipDelimiters
   234 0000028F AC                  <1>     lodsb       ;Get the first non-delimiter
   235 00000290 48FFCE              <1>     dec rsi     ;Point back at it
   236 00000293 3C0D                <1>     cmp al, CR
   237 00000295 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   238                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   239 0000029B E8(A0420000)        <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   240 000002A0 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   241 000002A6 3D00800000          <1>     cmp eax, 8000h
   242 000002AB 7710                <1>     ja .badEnv
   243 000002AD 3DA0000000          <1>     cmp eax, 0A0h
   244 000002B2 7209                <1>     jb .badEnv
   245 000002B4 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   246                              <1> .plhop2:
   247 000002BB EBB3                <1>     jmp short .plhop1  ;parseLp
   248                              <1> .badEnv:
   249 000002BD 488D1536020000      <1>     lea rdx, badEnvSz
   250 000002C4 EBB3                <1>     jmp short .bs1
   251                              <1> ;-----------------------------------------------------------------
   252                              <1> .switchPerma:
   253 000002C6 AC                  <1>     lodsb   ;Get the second char after the P
   254 000002C7 48FFCE              <1>     dec rsi ;Point back at it
   255 000002CA 3C0D                <1>     cmp al, CR
   256 000002CC 7413                <1>     je .spEmbCr ;Allow CR after the P
   257 000002CE 3A05(0B000000)      <1>     cmp al, byte [switchChar]
   258 000002D4 740B                <1>     je .spEmbCr ;Allow switch char after P
   259 000002D6 E8(F53F0000)        <1>     call isALdelimiter
   260 000002DB 0F85EDFEFFFF        <1>     jne .badparm
   261                              <1> .spEmbCr:
   262 000002E1 800D(1A000000)01    <1>     or byte [statFlg1], permaShell  ;Set the bit
   263 000002E8 EBD1                <1>     jmp short .plhop2  ;parseLp
   264                              <1> ;-----------------------------------------------------------------
   265                              <1> .switchStr:
   266 000002EA AC                  <1>     lodsb       ;Get the char after the C
   267 000002EB 48FFCE              <1>     dec rsi     ;Point back at it
   268 000002EE 3C0D                <1>     cmp al, CR
   269 000002F0 740B                <1>     je .ssembCr         ;Embedded CR ok
   270 000002F2 E8(F53F0000)        <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   271 000002F7 0F85D1FEFFFF        <1>     jne .badparm
   272                              <1> .ssembCr:
   273 000002FD E8(E73F0000)        <1>     call skipDelimiters     ;Move rsi past the delimiters
   274 00000302 488D3D(BB010000)    <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   275                              <1> .ssLp:
   276 00000309 AC                  <1>     lodsb
   277 0000030A AA                  <1>     stosb
   278 0000030B 3C0D                <1>     cmp al, CR
   279 0000030D 7408                <1>     je .ssOk
   280 0000030F FE05(BA010000)      <1>     inc byte [inBuffer + 1] ;Increment the char count
   281 00000315 EBF2                <1>     jmp short .ssLp
   282                              <1> .ssOk:
   283 00000317 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the single flag
   284                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   285                              <1> ;-----------------------------------------------------------------
   286                              <1> .endScan:
   287                              <1> ;Now copy our name to the end of the dir specified
   288 0000031E 488D3D(89060000)    <1>     lea rdi, comspecDir
   289 00000325 E8(C23F0000)        <1>     call strlen ;Get the length in ecx, preserve rdi
   290 0000032A FFC9                <1>     dec ecx ;Point to null terminator
   291 0000032C 8A05(0A000000)      <1>     mov al, byte [pathSep]
   292 00000332 4801CF              <1>     add rdi, rcx    ;Now point to the null
   293 00000335 3847FF              <1>     cmp byte [rdi - 1], al
   294 00000338 7401                <1>     je .esSkipPathsep
   295 0000033A AA                  <1>     stosb
   296                              <1> .esSkipPathsep:
   297 0000033B 488D35(FC070000)    <1>     lea rsi, cspec
   298 00000342 E8(A93F0000)        <1>     call strcpy ;Now copy over the name of our beloved shell
   299 00000347 E812000000          <1>     call .replacestdio
   300                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   301                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   302 0000034C F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   303                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000353 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000355 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   304 00000356 8025(1A000000)FE    <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   305                              <1>     return
    13                              <2> %%_ret:
    14 0000035D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   306                              <1> .replacestdio:
   307 0000035E F605B1010000FF      <1>     test byte [initNewDev], -1
   308                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000365 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   309 00000367 488D15(D4070000)    <1>     lea rdx, devName
   310 0000036E E9(6C2B0000)        <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   311                              <1> 
   312                              <1> doEnv:
   313                              <1> ;Will do the environment adjustments as needed
   314 00000373 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   315 00000377 4885F6              <1>     test rsi, rsi
   316 0000037A 7447                <1>     jz .noInitEnv
   317 0000037C 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   318                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000385 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   320                              <1> ;copy the environment from the master and free the original block.
   321                              <1> ;If the block we allocate is smaller than the original block, 
   322                              <1> ; print out of env space and stop there
   323                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   324                              <1> ; comspec. 
   325 00000387 F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   326 0000038E 752E                <1>     jnz .prepNewEnv
   327                              <1>     ;Else, we create new alloc and copy master into it
   328 00000390 E867000000          <1>     call .allocEnv
   329 00000395 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   330 00000398 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   331 0000039D 57                  <1>     push rdi            ;Save the start of the environment block
   332 0000039E E893000000          <1>     call .cpEnv         ;Copy the environment
   333 000003A3 5F                  <1>     pop rdi
   334 000003A4 E805000000          <1>     call .freeCurrentEnv
   335 000003A9 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   336                              <1>     return  
    13                              <2> %%_ret:
    14 000003AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> .freeCurrentEnv:
   338 000003AE 4150                <1>     push r8
   339 000003B0 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   340 000003B4 B800490000          <1>     mov eax, 4900h
   341 000003B9 CD21                <1>     int 21h
   342 000003BB 4158                <1>     pop r8
   343                              <1>     return
    13                              <2> %%_ret:
    14 000003BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> .prepNewEnv:
   345 000003BE E8EBFFFFFF          <1>     call .freeCurrentEnv
   346                              <1> .noInitEnv:
   347                              <1> ;Build the initial block.
   348 000003C3 E834000000          <1>     call .allocEnv
   349 000003C8 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   350 000003CB 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   351 000003CF 57                  <1>     push rdi            ;Save the environment ptr!
   352 000003D0 488D35(ED070000)    <1>     lea rsi, pathEVar
   353 000003D7 E8(A93F0000)        <1>     call strcpy
   354 000003DC 488D35(F3070000)    <1>     lea rsi, comspecEVar
   355 000003E3 E8(A93F0000)        <1>     call strcpy
   356 000003E8 48FFCF              <1>     dec rdi ;Write over the terminating null
   357 000003EB 488D35(89060000)    <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   358 000003F2 E8(A93F0000)        <1>     call strcpy 
   359 000003F7 30C0                <1>     xor al, al
   360 000003F9 AA                  <1>     stosb   ;Store the second terminating null
   361 000003FA 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   362                              <1>     return
    13                              <2> %%_ret:
    14 000003FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> .allocEnv:
   365                              <1> ;Output: rax -> Ptr to the environment block. 
   366                              <1> ;   If anything goes wrong, error message and exit the shell!
   367 000003FC 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   368 00000403 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   369 00000405 750C                <1>     jnz .goAlloc
   370 00000407 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   371 0000040C 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   372                              <1> .goAlloc:
   373 00000413 81C30F000000        <1>     add ebx, 0Fh
   374 00000419 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   375 0000041C B800480000          <1>     mov eax, 4800h
   376 00000421 CD21                <1>     int 21h
   377                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000423 73D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   378 00000425 488D15(37070000)    <1>     lea rdx, memBad1
   379 0000042C E8(9C3D0000)        <1>     call printString
   380 00000431 E9(DD320000)        <1>     jmp exit.ouch 
   381                              <1> 
   382                              <1> .cpEnv:
   383                              <1> ;Copies the environment
   384                              <1> ;Input: rsi -> Source to copy from
   385                              <1> ;       rdi -> Destination to copy to
   386 00000436 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   387                              <1> .lp:
   388 0000043D AC                  <1>     lodsb
   389 0000043E AA                  <1>     stosb
   390 0000043F 84C0                <1>     test al, al
   391 00000441 750A                <1>     jnz .notNul
   392 00000443 3806                <1>     cmp byte [rsi], al
   393 00000445 7506                <1>     jnz .notNul
   394                              <1>     ;Here, we have encountered our double null!
   395 00000447 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   396 00000449 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   397 0000044B AA                  <1>     stosb
   398                              <1>     return
    13                              <2> %%_ret:
    14 0000044C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> .notNul:
   400 0000044D FFC9                <1>     dec ecx ;One less char to copy over
   401 0000044F 75EC                <1>     jnz .lp
   402                              <1> .err:
   403 00000451 4881EF02000000      <1>     sub rdi, 2
   404 00000458 488D15(3F020000)    <1>     lea rdx, noEnvSpace
   405 0000045F E8(9C3D0000)        <1>     call printString
   406 00000464 31C0                <1>     xor eax, eax
   407 00000466 66AB                <1>     stosw   ;Store 0 word
   408                              <1>     return
    13                              <2> %%_ret:
    14 00000468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> getMasterEnv:
   411                              <1> ;Walks the psp chain to the first self parent.
   412                              <1> ;Output: rsi -> Environment of the first self-parent program
   413 00000469 4150                <1>     push r8
   414                              <1> .lp:
   415 0000046B 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   416 0000046F 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   417 00000472 7405                <1>     je .exit
   418 00000474 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   419 00000477 EBF2                <1>     jmp short .lp
   420                              <1> .exit:
   421 00000479 4158                <1>     pop r8
   422 0000047B 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   423                              <1>     return
    13                              <2> %%_ret:
    14 0000047F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   424                              <1> 
   425                              <1> 
   426                              <1> ;Loader Data here
   427                              <1> initString: 
   428 00000480 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   428 00000489 2056657273696F6E20- <1>
   428 00000492 24                  <1>
   429                              <1> initString2:
   430 00000493 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   430 0000049C 687420323032322C20- <1>
   430 000004A5 323032342C20596C6C- <1>
   430 000004AE 2042757A6F6B752E    <1>
   431 000004B6 0D0A24              <1>     db CR,LF,"$"
   432 000004B9 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   432 000004C2 20444F532076657273- <1>
   432 000004CB 696F6E0D0A24        <1>
   433 000004D1 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   433 000004DA 20434F4D4D414E4420- <1>
   433 000004E3 736561726368206469- <1>
   433 000004EC 726563746F72792062- <1>
   433 000004F5 61640D0A24          <1>
   434 000004FA 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   434 00000503 6E7669726F6E6D656E- <1>
   434 0000050C 742053697A650D0A24  <1>
   435 00000515 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   436 00000516 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   437 00000517 0000                <1> initEnvSz   dw 0    ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    43                                  endOfInitAlloc: ;Symbol to free during init
    44                                  initLen equ ($ - $$)
    45                                  
    46                                  ;Amount of space to make for bss/stack
    47                                  initOffset  equ bssLen + stackLen  
    47          ------------------       info: assembly required 1+5+2 passes

