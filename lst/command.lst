     1                                  ;COMMAND.COM main file
     2                                  [map all ./lst/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  
     7                                  %include "./inc/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./inc/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./inc/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./inc/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./inc/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pLink      dq ?    ;Pointer to the previous batch block when CALLed
    30                              <1> ;    .pForBlk    dq ?    ;Pointer to the active FOR block
    31 0000000A ??                  <1>     .bStatFlg   db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 0000000B ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 0000000F ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 00000013 <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> struc forBlk
    47                              <1> ;forBlk.sListv is double null terminated at the end of the string
    48 00000000 ??                  <1>     .bListc     db ?    ;Number of elements in the list
    49 00000001 <res 82h>           <1>     .sListBlk   db cmdBufferL dup (?)   ;Null terminated entries of list.
    50 00000083 ??                  <1>     .bCmdWC     db ?    ;Set if the list entry has a wildcard
    51 00000084 ??                  <1>     .bArgNum    db ?    ;Number of the current argument
    52 00000085 ????????????????    <1>     .pLstCurr   dq ?    ;Ptr to current list element we are treating
    53 0000008D ????????????????    <1>     .pCmd       dq ?    ;Ptr to command string
    54 00000095 <res 82h>           <1>     .sCmdLine   db cmdBufferL dup (?)   ;Copy of cmdline to execute with %<var> 
    55 00000117 <res 43h>           <1>     .sNameBuf   db fullDirPathZL dup (?)    ;Used for building a search spec.
    56 0000015A <res 2Bh>           <1>     .sFFBuffer  db ffBlock_size dup (?) ;ffblock for searching list elements
    57 00000185 ??                  <1>     .bLpVar     db ?    ;Char of loop var
    58                              <1> endstruc
    59                              <1> 
    60                              <1> 
    61                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    62 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    63 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    64 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    65 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    66 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    67                              <1> endstruc
    68                              <1> 
    69                              <1> struc execProg  ;For use with EXEC-ing a child task
    70 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    71 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    72 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    73 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    74                              <1> endstruc
    75                              <1> 
    76                              <1> ;Directory attribute equates
    77                              <1>     dirReadOnly     equ 01h
    78                              <1>     dirHidden       equ 02h
    79                              <1>     dirSystem       equ 04h
    80                              <1>     dirVolumeID     equ 08h
    81                              <1>     dirDirectory    equ 10h
    82                              <1>     dirArchive      equ 20h
    83                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    84                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    85                              <1>     ;If any of the three bits are set, then ALL three bits are set
    86                              <1>     ; in addition to whatever the user passed to search for.
    87                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    88                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  
    13                                      ORG 100h    ;Allows for r8 to be used as a base pointer for section reloc
    14                                  Segment cmd align=1 valign=1
    15                                  %define currSegVBase 0
    16                                  %include "./dat/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3                              <1> pPSP:       ;Internal pointer to the task PSP
     4 00000000 E9B04D0000          <1>     jmp cmdLdrE
     5 00000005 CCCCCC              <1>     db 3 dup (0CCh) ;So add three bytes to turn it into a variable after use
     6 00000008 1400                <1> numHdls     dw 20   ;Get number of handles permitted
     7 0000000A 5C                  <1> pathSep     db "\"  ;Default path sep
     8 0000000B 2F                  <1> switchChar  db "/"  ;Default switch char
     9 0000000C FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    10 0000000D 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    11 0000000E FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    12                              <1> ;Volume static FCB for filesearches
    13                              <1> volFcb:
    14                              <1>     istruc exFcb
    15 00000010 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    16 00000011 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    17 00000017 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    18 00000018 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    19 00000020 3F3F3F              <1>     at exFcb.fileext,   db "???"
    20 00000023 00000000            <1>     at exFcb.curBlock,  dd 0
    21 00000027 00<rep 15h>         <1>     iend 
    22                              <1> 
    23                              <1> ;The string for Y/N prompt for batch ^C handler
    24 0000003C 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    25                              <1> ;==============================================================================
    26                              <1> ; Do not split the blocks below!
    27                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    28                              <1> cmdLineStatePtr:
    29 00000040 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    30 00000041 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    31 00000043 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    32                              <1> ;These variables are valid for a SINGLE command in a command line
    33                              <1> ;Next two bytes, if set to -1, flags error
    34 00000045 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    35 00000046 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    36                              <1> ;                    If 2, we are redirecting output to a file, by appending
    37 00000047 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    38 00000049 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    39                              <1> ;------------------------------------------------------------------------------
    40                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    41 0000004B 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    42 0000004C 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    43 0000004D 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    44                              <1> 
    45 0000004E 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    46 0000004F 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    47 00000050 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    48                              <1> 
    49 00000051 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    50                              <1> cmdStateL equ $ - cmdStatePtr
    51                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    52                              <1> ;------------------------------------------------------------------------------
    53                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    17                                  %include "./dat/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000052 03444952            <1>     db 3, "DIR"
     8 00000056 B71A                <1>     dw dir - startLbl
     9                              <1> 
    10 00000058 024344              <1>     db 2, "CD"
    11 0000005B 5A1F                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000005D 054348444952        <1>     db 5, "CHDIR"
    14 00000063 5A1F                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000065 024D44              <1>     db 2, "MD"
    17 00000068 D51F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000006A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000070 D51F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000072 025244              <1>     db 2, "RD"
    23 00000075 1E20                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000077 05524D444952        <1>     db 5, "RMDIR"
    26 0000007D 1E20                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000007F 0344454C            <1>     db 3, "DEL"
    29 00000083 3F29                <1>     dw erase - startLbl
    30                              <1> 
    31 00000085 054552415345        <1>     db 5, "ERASE"
    32 0000008B 3F29                <1>     dw erase - startLbl
    33                              <1> 
    34 0000008D 0444415445          <1>     db 4, "DATE"
    35 00000092 7D2A                <1>     dw date - startLbl
    36                              <1> 
    37 00000094 0454494D45          <1>     db 4, "TIME"
    38 00000099 2B2C                <1>     dw time - startLbl
    39                              <1> 
    40 0000009B 04434F5059          <1>     db 4, "COPY"
    41 000000A0 6820                <1>     dw copy - startLbl
    42                              <1> 
    43 000000A2 0443545459          <1>     db 4, "CTTY"
    44 000000A7 582D                <1>     dw ctty - startLbl
    45                              <1> 
    46 000000A9 03434C53            <1>     db 3, "CLS"
    47 000000AD FF2D                <1>     dw cls - startLbl
    48                              <1> 
    49 000000AF 05425245414B        <1>     db 5, "BREAK"
    50 000000B5 782E                <1>     dw break - startLbl
    51                              <1> 
    52 000000B7 06564552494659      <1>     db 6, "VERIFY"
    53 000000BE F92E                <1>     dw verify - startLbl
    54                              <1> 
    55 000000C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000000C7 762F                <1>     dw rename - startLbl
    57                              <1> 
    58 000000C9 0352454E            <1>     db 3, "REN"
    59 000000CD 762F                <1>     dw rename - startLbl
    60                              <1>     
    61 000000CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000000D8 AD31                <1>     dw truename - startLbl
    63                              <1> 
    64 000000DA 03564552            <1>     db 3, "VER"
    65 000000DE ED32                <1>     dw version - startLbl
    66                              <1> 
    67 000000E0 03564F4C            <1>     db 3, "VOL"
    68 000000E4 3332                <1>     dw volume - startLbl
    69                              <1> 
    70 000000E6 034D454D            <1>     db 3, "MEM"
    71 000000EA 3133                <1>     dw memory - startLbl
    72                              <1> 
    73 000000EC 0445584954          <1>     db 4, "EXIT"
    74 000000F1 3335                <1>     dw exit - startLbl
    75                              <1> 
    76 000000F3 0454595045          <1>     db 4, "TYPE"
    77 000000F8 8034                <1>     dw type - startLbl
    78                              <1> 
    79 000000FA 0450415448          <1>     db 4, "PATH"
    80 000000FF 7C38                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000101 03534554            <1>     db 3, "SET"
    83 00000105 5D37                <1>     dw set - startLbl
    84                              <1> 
    85 00000107 0650524F4D5054      <1>     db 6, "PROMPT"
    86 0000010E 5B39                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000110 044543484F          <1>     db 4, "ECHO"
    90 00000115 CB39                <1>     dw echo - startLbl
    91                              <1> 
    92 00000117 055041555345        <1>     db 5, "PAUSE"
    93 0000011D 7A3A                <1>     dw pauza - startLbl
    94                              <1> 
    95 0000011F 0352454D            <1>     db 3, "REM"
    96 00000123 C33A                <1>     dw remark - startLbl
    97                              <1> 
    98 00000125 04474F544F          <1>     db 4, "GOTO"
    99 0000012A 113B                <1>     dw goto - startLbl
   100                              <1> 
   101 0000012C 055348494654        <1>     db 5, "SHIFT"
   102 00000132 C43A                <1>     dw shift - startLbl
   103                              <1> 
   104 00000134 024946              <1>     db 2, "IF"
   105 00000137 4D3C                <1>     dw ifCmd - startLbl
   106                              <1> 
   107 00000139 03464F52            <1>     db 3, "FOR"
   108 0000013D 5D3D                <1>     dw forCmd - startLbl
   109                              <1> 
   110 0000013F 0443414C4C          <1>     db 4, "CALL"
   111 00000144 6E40                <1>     dw callCmd - startLbl
   112                              <1> ;-----------------------------
   113 00000146 FF                  <1>     db -1   ;End of table
   114                              <1> 
   115                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   116                              <1> pTbl:
   117 00000147 42                  <1>     db "B", 
   118 00000148 ED41                <1>     dw putPipeInPrompt - pTbl     ;Pipe char
   119 0000014A 44                  <1>     db "D", 
   120 0000014B EC42                <1>     dw printFmtDate - pTbl        ;Current date
   121 0000014D 45                  <1>     db "E", 
   122 0000014E E141                <1>     dw putEscInPrompt - pTbl      ;ANSI Escape char
   123 00000150 47                  <1>     db "G", 
   124 00000151 F141                <1>     dw putGTinPrompt - pTbl       ;Greater than char
   125 00000153 48                  <1>     db "H", 
   126 00000154 F941                <1>     dw putBSPinPrompt - pTbl      ;Backspace
   127 00000156 4C                  <1>     db "L", 
   128 00000157 F541                <1>     dw putLTinPrompt - pTbl       ;Less than char
   129 00000159 4E                  <1>     db "N", 
   130 0000015A 1242                <1>     dw putDriveInPrompt - pTbl    ;Current drive letter
   131 0000015C 50                  <1>     db "P", 
   132 0000015D 2042                <1>     dw putCWDInPrompt - pTbl      ;Current drive and path
   133 0000015F 51                  <1>     db "Q", 
   134 00000160 E941                <1>     dw putEquInPrompt - pTbl      ;Equals char
   135 00000162 54                  <1>     db "T", 
   136 00000163 8342                <1>     dw printFmtTime - pTbl        ;Current time in hh:mm:ss.hh fmt
   137 00000165 56                  <1>     db "V", 
   138 00000166 B341                <1>     dw putVersionInPrompt - pTbl  ;DOS version number
   139 00000168 5F                  <1>     db "_", 
   140 00000169 A441                <1>     dw printCRLF - pTbl           ;CRLF pair
   141 0000016B 24                  <1>     db "$", 
   142 0000016C E541                <1>     dw putMoneyInPrompt - pTbl    ;Dollar sign
   143                              <1> pTblL equ $ - pTbl
    18                                  %include "./dat/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000016E 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000171 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000176 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000017F 696C65206D69737369- <1>
     4 00000188 6E670D0A24          <1>
     5 0000018D 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000196 6469736B2077697468- <1>
     5 0000019F 206261746368206669- <1>
     5 000001A8 6C65                <1>
     6 000001AA 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000001B3 737320616E79206B65- <1>
     6 000001BC 79207768656E207265- <1>
     6 000001C5 6164790D0A24        <1>
     7 000001CB 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000001D4 746520626174636820- <1>
     7 000001DD 6A6F622028592F4E29- <1>
     7 000001E6 3F2024              <1>
     8 000001E9 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000001F2 6E64206F722066696C- <1>
     8 000001FB 65206E616D650D0A24  <1>
     9 00000204 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 0000020D 2066696C65206E616D- <1>
     9 00000216 65206F7220          <1>
    10 0000021B 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000224 666F756E640D0A24    <1>
    11 0000022C 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000235 656E74206469736B20- <1>
    11 0000023E 73706163650D0A24    <1>
    12 00000246 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 0000024F 7669726F6E6D656E74- <1>
    12 00000258 2073706163650D0A24  <1>
    13 00000261 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000026A 74696F6E206572726F- <1>
    13 00000273 720D0A24            <1>
    14 00000277 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000280 6F7420626520636F70- <1>
    14 00000289 696564206F6E746F20- <1>
    14 00000292 697473656C660D0A24  <1>
    15 0000029B 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000002A4 662064657374696E61- <1>
    15 000002AD 74696F6E206C6F7374- <1>
    15 000002B6 206265666F72652063- <1>
    15 000002BF 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000002C5 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000002CE 636F706965640D0A24  <1>
    18 000002D7 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000002E0 68206D656D6F727920- <1>
    18 000002E9 666F7220434F50590D- <1>
    18 000002F2 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000002F4 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 000002FD 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 000002FE 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000307 65650D0A24          <1>
    23 0000030C 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000315 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 0000031E 726976652073706563- <1>
    25 00000327 696669636174696F6E- <1>
    25 00000330 0D0A24              <1>
    26 00000333 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 0000033C 6B6579207768656E20- <1>
    26 00000345 7265616479202E202E- <1>
    26 0000034E 202E2024            <1>
    27 00000352 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 0000035B 6172616D657465720D- <1>
    27 00000364 0A24                <1>
    28                              <1> 
    29 00000366 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 0000036F 576564546875467269- <1>
    29 00000378 536174              <1>
    30 0000037B 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000384 206461746524        <1>
    31 0000038A 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000393 6174652069732024    <1>
    32 0000039B 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 000003A4 657720646174652024  <1>
    33 000003AD 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 000003B6 293A2024            <1>
    34 000003BA 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 000003C3 293A2024            <1>
    35 000003C7 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 000003D0 293A2024            <1>
    36 000003D4 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 000003DD 2074696D6524        <1>
    37 000003E3 43757272656E742074- <1> curTime db  "Current time is $"
    37 000003EC 696D652069732024    <1>
    38 000003F4 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 000003FD 65772074696D653A20- <1>
    38 00000406 24                  <1>
    39                              <1> 
    40 00000407 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000410 7572652028592F4E29- <1>
    40 00000419 3F2024              <1>
    41                              <1> 
    42 0000041C 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000425 56657273696F6E2024  <1>
    43                              <1> 
    44 0000042E 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000437 6E2064726976652024  <1>
    45 00000440 2069732024          <1> volOk   db " is $"
    46 00000445 20686173206E6F206C- <1> volNo   db " has no label$"
    46 0000044E 6162656C24          <1>
    47                              <1> 
    48 00000453 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 0000045C 69726563746F72790D- <1>
    48 00000465 0A24                <1>
    49 00000467 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000470 206372656174652064- <1>
    49 00000479 69726563746F72790D- <1>
    49 00000482 0A24                <1>
    50 00000484 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 0000048D 6174682C206E6F7420- <1>
    50 00000496 6469726563746F7279- <1>
    50 0000049F 2C0D0A              <1>
    51 000004A2 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 000004AB 6F7279206E6F742065- <1>
    51 000004B4 6D7074790D0A24      <1>
    52 000004BB 204469726563746F72- <1> dirMain db " Directory of  $"
    52 000004C4 79206F66202024      <1>
    53 000004CB 4E6F20506174682024  <1> noPath  db "No Path $"
    54 000004D4 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 000004DD 6E6965640D0A24      <1>
    55 000004E4 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 000004ED 72697665206973206E- <1>
    55 000004F6 6F206C6F6E67657220- <1>
    55 000004FF 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000505 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 0000050E 65766963650D0A24    <1>
    58 00000516 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 0000051F 20666F756E640D0A24  <1>
    59 00000528 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000531 726F720D0A24        <1>
    60 00000537 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000540 6F74206265206E6573- <1>
    60 00000549 7465640D0A24        <1>
    61 0000054F 464F5200            <1> forStr  db "FOR",0
    62 00000553 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    62 0000055C 6174652066696C6520- <1>
    62 00000565 6572726F7220647572- <1>
    62 0000056E 696E6720706970650D- <1>
    62 00000577 0A24                <1>
    63 00000579 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    63 00000582 2062696E6172792072- <1>
    63 0000058B 656164732066726F6D- <1>
    63 00000594 206120646576696365- <1>
    63 0000059D 0D0A24              <1>
    64 000005A0 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    65 000005A6 4F464600            <1> offStr  db "OFF",0
    66 000005AA 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    67 000005AF 4F4E00              <1> onStr   db "ON",0
    68 000005B2 425245414B20697320- <1> breakIs db "BREAK is $"
    68 000005BB 24                  <1>
    69 000005BC 564552494659206973- <1> verifyIs    db "VERIFY is $"
    69 000005C5 2024                <1>
    70 000005C7 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    71 000005D0 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    71 000005D9 617468206F72206669- <1>
    71 000005E2 6C65206E616D650D0A- <1>
    71 000005EB 24                  <1>
    72 000005EC 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    72 000005F5 756D626572206F6620- <1>
    72 000005FE 706172616D65746572- <1>
    72 00000607 730D0A24            <1>
    73 0000060B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    73 00000614 74696E6720746F2064- <1>
    73 0000061D 6576696365          <1>
    74 00000622 08200800            <1> backSpace   db BSP," ",BSP,NUL
    75 00000626 50726F6772616D2074- <1> noMemMsg    db "Program too big to fit in memory",CR,LF,"$"
    75 0000062F 6F6F2062696720746F- <1>
    75 00000638 2066697420696E206D- <1>
    75 00000641 656D6F72790D0A24    <1>
    76 00000649 4E4F5400            <1> notString   db "NOT",0
    77 0000064D 4552524F524C455645- <1> errlvlStr   db "ERRORLEVEL",0
    77 00000656 4C00                <1>
    78 00000658 455849535400        <1> existStr    db "EXIST",0
    79 0000065E 494E00              <1> inStr       db "IN",0
    80 00000661 444F00              <1> doStr       db "DO",0
    81 00000664 2800                <1> listOpenStr db "(",0
    82 00000666 2900                <1> listClosStr db ")",0
    83                              <1> 
    84 00000668 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    84 00000671 20202020202020546F- <1>
    84 0000067A 74616C207379737465- <1>
    84 00000683 6D206D656D6F72793A- <1>
    84 0000068C 2024                <1>
    85 0000068E 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    85 00000697 20202020202020204D- <1>
    85 000006A0 656D6F727920757365- <1>
    85 000006A9 6420627920444F533A- <1>
    85 000006B2 2024                <1>
    86 000006B4 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    86 000006BD 656D6F727920757365- <1>
    86 000006C6 64206279206170706C- <1>
    86 000006CF 69636174696F6E733A- <1>
    86 000006D8 2024                <1>
    87 000006DA 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    87 000006E3 656D6F727920726573- <1>
    87 000006EC 657276656420627920- <1>
    87 000006F5 68617264776172653A- <1>
    87 000006FE 2024                <1>
    88 00000700 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    88 00000709 202020202020202020- <1>
    88 00000712 2020202020204D656D- <1>
    88 0000071B 6F727920667265653A- <1>
    88 00000724 2024                <1>
    89 00000726 20627974657324      <1> memByte db " bytes$"
    90 0000072D 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    90 00000736 6F7420417373657274- <1>
    90 0000073F 61696E20444F532045- <1>
    90 00000748 6E74727920506F696E- <1>
    90 00000751 7424                <1>
    91 00000753 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    91 0000075C 416C6C6F636174696F- <1>
    91 00000765 6E204572726F7224    <1>
    92 0000076D 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    92 00000776 4572726F7224        <1>
    93 0000077C 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    93 00000785 68616C74656424      <1>
    94                              <1> 
    95 0000078C 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    95 00000795 206372656174652070- <1>
    95 0000079E 6970650D0A          <1>
    96                              <1> pipeErrMsgL equ $ - pipeErrMsg
    97 000007A3 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    97 000007AC 6F6E206572726F720D- <1>
    97 000007B5 0A                  <1>
    98                              <1> redirErrMsgL   equ $ - redirErrMsg
    99                              <1> 
   100 000007B6 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
   101 000007BA 2020202024          <1> fourSpc  db "    $"
   102 000007BF 20202024            <1> threeSpc db "   $"
   103 000007C3 202024              <1> twoSpc   db "  $"
   104                              <1> 
   105 000007C6 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
   105 000007CF 696679204F4E206F72- <1>
   105 000007D8 204F46460D0A24      <1>
   106                              <1> 
   107 000007DF 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
   108 000007E7 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   109                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   110                              <1> ; handles and reopen this device. Defaults to CON
   111 000007F0 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   112 000007F9 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   112 00000802 45432E42415400      <1>
   113                              <1> autoSpecL equ $ - autoSpec
   114 00000809 504154483D00        <1> pathEVar    db "PATH=",0
   115 0000080F 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   116 00000818 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   116 00000821 4F4D00              <1>
   117                              <1> 
   118                              <1> ;Int 24h strings
   119                              <1> errMsgPtrTbl:
   120 00000824 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   121 00000826 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   122 00000828 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   123 0000082A 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   124 0000082C 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   125 0000082E 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   126 00000830 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   127 00000832 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   128 00000834 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   129 00000836 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   130 00000838 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   131 0000083A B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   132 0000083C BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   133 0000083E D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   134 00000840 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   135 00000842 F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   136 00000844 2901                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   137 00000846 3A01                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   138                              <1> errorMsgTbl:
   139 00000848 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   139 00000851 63746563742024      <1>
   140 00000858 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   140 00000861 6E69742024          <1>
   141 00000866 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   141 0000086F 2024                <1>
   142 00000871 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   142 0000087A 6F6D6D616E642024    <1>
   143 00000882 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   144 00000888 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   144 00000891 73742024            <1>
   145 00000895 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   146 0000089B 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   146 000008A4 656469612024        <1>
   147 000008AA 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   147 000008B3 7420466F756E642024  <1>
   148 000008BC 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   148 000008C5 7065722024          <1>
   149 000008CA 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   149 000008D3 6C742024            <1>
   150 000008D7 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   150 000008E0 742024              <1>
   151 000008E3 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   151 000008EC 61696C7572652024    <1>
   152 000008F4 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   152 000008FD 696F6C6174696F6E20- <1>
   152 00000906 24                  <1>
   153 00000907 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   153 00000910 6174696F6E2024      <1>
   154                              <1> ;Driver Error F / DOS Error 022h
   155 00000917 496E76616C69642044- <1> .F: db "Invalid Disk Change",CR,LF,"Please Insert disk "    
   155 00000920 69736B204368616E67- <1>
   155 00000929 650D0A506C65617365- <1>
   155 00000932 20496E736572742064- <1>
   155 0000093B 69736B20            <1>
   156 0000093F 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   156 00000948 2020                <1>
   157 0000094A 0D0A24              <1>         db CR,LF,"$"
   158                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   159 0000094D 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   159 00000956 696C61626C652024    <1>
   160 0000095E 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   160 00000967 756666657220657272- <1>
   160 00000970 6F722024            <1>
   161                              <1> 
   162                              <1> ;Anything above this is a generic network error.
   163 00000974 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   163 0000097D 6574776F726B204572- <1>
   163 00000986 726F722024          <1>
   164                              <1> 
   165                              <1> ;Rest of the Int 24h error messages go here
   166 0000098B 64726976652024      <1> drvMsg      db "drive $"
   167 00000992 6572726F7220726561- <1> readMsg     db "error reading $"
   167 0000099B 64696E672024        <1>
   168 000009A1 6572726F7220777269- <1> writeMsg    db "error writing $"
   168 000009AA 74696E672024        <1>
   169 000009B0 41626F727424        <1> abortMsg    db "Abort$" 
   170 000009B6 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   171 000009BD 526574727924        <1> retryMsg    db "Retry$"
   172 000009C3 4661696C24          <1> failMsg     db "Fail$"
   173 000009C8 2C2024              <1> betweenMsg  db ", $"
   174 000009CB 3F2024              <1> endMsg      db "? $"
   175 000009CE 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    19                                  %include "./src/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1> ;Now resize the allocation
     4 000009D2 488D1D(50060000)    <1>     lea rbx, endOfAlloc
     5 000009D9 4C29C3              <1>     sub rbx, r8 ;Get # of bytes for COMMAND.COM and stack
     6 000009DC 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
     7 000009E2 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000009E5 B8004A0000          <1>     mov eax, 4A00h ;Realloc
     9 000009EA CD21                <1>     int 21h
    10 000009EC 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    11 000009EE 7435                <1>     jz commandMain
    12 000009F0 E8370A0000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    13                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    14 000009F5 F605(1A000000)04    <1>     test byte [statFlg1], inSingle
    15 000009FC 0F85B0000000        <1>     jnz commandMain.goSingle 
    16                              <1>     ;Only enter here if we are autoexec :)
    17 00000A02 C605(C4010000)0F    <1>     mov byte [cLineBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    18 00000A09 488D35E9FDFFFF      <1>     lea rsi, autoSpec
    19 00000A10 488D3D(C5010000)    <1>     lea rdi, cLineBuffer + 2
    20 00000A17 E8E33A0000          <1>     call strcpy
    21 00000A1C C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    22 00000A20 E984000000          <1>     jmp commandMain.batProceed
    23                              <1> commandMain:
    24 00000A25 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset internal stack pointer pos
    25 00000A2C E8FB090000          <1>     call getSetMainState
    26                              <1> .inputMain:         ;Only reset once per line!
    27 00000A31 F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    28 00000A38 0F85F52A0000        <1>     jnz exit
    29 00000A3E E89F380000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    30 00000A43 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    31 00000A48 CD21                <1>     int 21h
    32 00000A4A B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    33 00000A4F BA01000000          <1>     mov edx, 1      ;Start new print job
    34 00000A54 CD21                <1>     int 21h
    35                              <1> .inputGetAgain:
    36 00000A56 E8143B0000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    37                              <1> .inputGetCmdlineAgain:
    38 00000A5B F605(74000000)FF    <1>     test byte [forFlg], -1  ;If we are in a FOR loop, proceed with for
    39 00000A62 0F8559340000        <1>     jne forProceed
    40 00000A68 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    41 00000A6F 0F85DB0C0000        <1>     jnz batNextLine
    42 00000A75 C605(73000000)00    <1>     mov byte [callFlg], 0   ;If we need to get input from cmdline, no more call!
    43 00000A7C E8EF370000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    44 00000A81 488D15(41010000)    <1>     lea rdx, inBuffer
    45 00000A88 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    46 00000A8D CD21                <1>     int 21h
    47                              <1> ;Copy over the input text
    48 00000A8F 488D35(41010000)    <1>     lea rsi, inBuffer       ;Preserve what was input
    49 00000A96 488D3D(C3010000)    <1>     lea rdi, cLineBuffer
    50 00000A9D B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    51 00000AA2 F3A4                <1>     rep movsb
    52                              <1> .batProceedCrlf:
    53 00000AA4 E842380000          <1>     call printCRLF      ;Note we have accepted input
    54                              <1> .batProceed:            ;Jump here to copy the batch input line 
    55                              <1> ;First check we had something typed in of length greater than 0
    56 00000AA9 803D(C4010000)00    <1>     cmp byte [cLineBuffer + 1], 0  ;Check input length valid
    57 00000AB0 74A9                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    58                              <1> .goSingle:
    59 00000AB2 E87A000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    60                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    61 00000AB7 488D35(47020000)    <1>     lea rsi, cmdBuffer + 2
    62 00000ABE E87A3A0000          <1>     call skipDelimiters
    63 00000AC3 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    64 00000AC6 748E                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    65 00000AC8 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    66 00000ACB 0F8407040000        <1>     je hardSynErr
    67                              <1> .pipeLoop:
    68 00000AD1 4C8B0528F5FFFF      <1>     mov r8, qword [pPSP]  ;Point back to home segment
    69 00000AD8 E8AE000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    70                              <1>     ;ZF here indicates if we are at the end of the command or nots
    71 00000ADD E836350000          <1>     call forPrintCmd        ;Print cmd if in a FOR loop. Flag preserved.
    72 00000AE2 E889070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    73 00000AE7 E8F8000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    74 00000AEC E8513D0000          <1>     call setDTA             ;Set the DTA back to us before we proceed!
    75 00000AF1 E866020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    76                              <1> .okRet:                     ;Normal return point for processing
    77 00000AF6 E87A050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    78 00000AFB F6053EF5FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    79 00000B02 0F8429FFFFFF        <1>     jz .inputMain
    80                              <1>     ;Now we pull the commandline forwards. 
    81 00000B08 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    82 00000B0D 488D3D(47020000)    <1>     lea rdi, cmdBuffer + 2
    83 00000B14 4889F1              <1>     mov rcx, rsi
    84 00000B17 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    85 00000B1A 280D(46020000)      <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    86 00000B20 8A0D(46020000)      <1>     mov cl, byte [cmdBuffer + 1]
    87 00000B26 FFC1                <1>     inc ecx     ;One more for the terminating char
    88 00000B28 F3A4                <1>     rep movsb   ;Move the chars over    
    89 00000B2A E82F3A0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    90 00000B2F EBA0                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    91                              <1> 
    92                              <1> makeCmdBuffer:
    93                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    94                              <1> ; copy buffer. Called only once in a cycle.
    95                              <1> ;Throughout: CL has char count, CH has quote count
    96 00000B31 488D35(C5010000)    <1>     lea rsi, [cLineBuffer + 2]    ;Goto copy buffer + 2
    97 00000B38 31C9                <1>     xor ecx, ecx
    98 00000B3A 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    99                              <1> .countQuotes:
   100 00000B3D AC                  <1>     lodsb
   101 00000B3E 3C22                <1>     cmp al, '"'
   102 00000B40 7507                <1>     jne .notQuoteToCount
   103 00000B42 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   104 00000B44 E9F4FFFFFF          <1>     jmp .countQuotes
   105                              <1> .notQuoteToCount:
   106 00000B49 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   107 00000B4B 75F0                <1>     jne .countQuotes
   108 00000B4D 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   109 00000B50 488D3D(47020000)    <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   110                              <1> .getChar:
   111 00000B57 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   112 00000B58 3C22                <1>     cmp al, '"'     ;Is char a quote?
   113 00000B5A 750E                <1>     jne .notQuote
   114 00000B5C FECD                <1>     dec ch          ;We have a quote, now decrement
   115 00000B5E 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   116                              <1> .searchForClosingQuote:
   117                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   118 00000B60 AA                  <1>     stosb   ;Store char and inc rdi
   119 00000B61 FEC1                <1>     inc cl
   120 00000B63 AC                  <1>     lodsb   ;Get next char
   121 00000B64 3C22                <1>     cmp al, '"'
   122 00000B66 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   123 00000B68 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   124                              <1> .notQuote:
   125 00000B6A E8A0060000          <1>     call peelRedir      ;Intervene redir if needed
   126 00000B6F 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   127 00000B71 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   128 00000B73 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   129                              <1> .pipeHandle:
   130                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   131 00000B75 0F845D030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   132                              <1> .notRedir:
   133 00000B7B AA                  <1>     stosb       ;Store char and advance rdi
   134 00000B7C 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   135 00000B7E 7404                <1>     je .exit
   136 00000B80 FEC1                <1>     inc cl      ;Increment char count
   137 00000B82 EBD3                <1>     jmp short .getChar    ;If not, get next char
   138                              <1> .exit:
   139 00000B84 880D(46020000)      <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   140                              <1>     return
    13                              <2> %%_ret:
    14 00000B8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> makeCmdString:
   143                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   144                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   145                              <1> ; Copies into the psp.
   146                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   147 00000B8B 488D35(47020000)    <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   148 00000B92 31C9                <1>     xor ecx, ecx
   149 00000B94 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   150                              <1> .countQuotes:
   151 00000B97 AC                  <1>     lodsb
   152 00000B98 3C22                <1>     cmp al, '"'
   153 00000B9A 7507                <1>     jne .notQuoteToCount
   154 00000B9C FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   155 00000B9E E9F4FFFFFF          <1>     jmp .countQuotes
   156                              <1> .notQuoteToCount:
   157 00000BA3 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   158 00000BA5 75F0                <1>     jne .countQuotes
   159 00000BA7 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   160 00000BAA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   161                              <1> .getChar:
   162 00000BB1 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   163 00000BB2 3C22                <1>     cmp al, '"'     ;Is char a quote?
   164 00000BB4 750E                <1>     jne .notQuote
   165 00000BB6 FECD                <1>     dec ch          ;We have a quote, now decrement
   166 00000BB8 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   167                              <1> .searchForClosingQuote:
   168                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   169 00000BBA AA                  <1>     stosb   ;Store char and inc rdi
   170 00000BBB FEC1                <1>     inc cl
   171 00000BBD AC                  <1>     lodsb   ;Get next char
   172 00000BBE 3C22                <1>     cmp al, '"'
   173 00000BC0 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   174 00000BC2 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   175                              <1> .notQuote:
   176 00000BC4 3C7C                <1>     cmp al, "|"
   177 00000BC6 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   178 00000BC8 B00D                <1>     mov al, CR          ;Store the pipe char
   179 00000BCA 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   180                              <1> .notPipe:
   181 00000BCD AA                  <1>     stosb       ;Store char and advance rdi
   182 00000BCE 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   183 00000BD0 7404                <1>     je .exit
   184 00000BD2 FEC1                <1>     inc cl      ;Increment char count
   185 00000BD4 EBDB                <1>     jmp short .getChar    ;If not, get next char
   186                              <1> .exit:
   187 00000BD6 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   188 00000BD9 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   189 00000BE0 803E0D              <1>     cmp byte [rsi], CR  
   190                              <1>     return
    13                              <2> %%_ret:
    14 00000BE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> analyseCmdline:
   193                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   194                              <1> ; processes the command name into the FCB.  
   195 00000BE4 C605(16030000)00    <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   196                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   197 00000BEB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   198 00000BF2 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   199 00000BF5 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   200 00000BF9 8A050CF4FFFF        <1>     mov al, byte [switchChar]
   201 00000BFF F2AE                <1>     repne scasb                     ;Scan for the switch char
   202 00000C01 7506                <1>     jne .noSwitchFnd
   203 00000C03 F61548F4FFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   204                              <1> .noSwitchFnd:
   205 00000C09 E82F390000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   206 00000C0E 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   207                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000C11 74(E3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   208 00000C13 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   209                              <1> .plp:
   210 00000C16 488D3D(E6000000)    <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   211 00000C1D B801290000          <1>     mov eax, 2901h
   212 00000C22 CD21                <1>     int 21h
   213 00000C24 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   214 00000C26 0F8423010000        <1>     je .exitBadDrv
   215                              <1> .trailingDotLp:
   216                              <1> ;Reverse along trailing dots!
   217 00000C2C 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   218 00000C30 7505                <1>     jne .noTrailingDots
   219 00000C32 48FFCE              <1>     dec rsi
   220 00000C35 EBF5                <1>     jmp short .trailingDotLp
   221                              <1> .noTrailingDots:
   222 00000C37 8A05CDF3FFFF        <1>     mov al, byte [pathSep]  
   223 00000C3D 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   224 00000C3F 7525                <1>     jne .notPs
   225 00000C41 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   226 00000C44 AC                  <1>     lodsb   ;Get this char
   227 00000C45 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   228 00000C48 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   229 00000C4A 7217                <1>     jb .delimfnd    ;Also a delimiter
   230 00000C4C 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   231 00000C4E 7413                <1>     je .delimfnd
   232 00000C50 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   233 00000C52 740F                <1>     je .delimfnd
   234 00000C54 3C2E                <1>     cmp al, byte "."
   235 00000C56 740B                <1>     je .delimfnd
   236 00000C58 3C22                <1>     cmp al, byte '"'
   237 00000C5A 7407                <1>     je .delimfnd
   238 00000C5C E8EA380000          <1>     call isALdelimiter  ;Is this a delim char?
   239 00000C61 75B3                <1>     jne .plp            ;If not, we loop again
   240                              <1> .delimfnd:
   241 00000C63 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   242                              <1> .notPs:
   243                              <1> ;Now we have reached the end of the command, rsi points to the first char
   244                              <1> ; after the command, whether a delimiter or not.
   245 00000C66 4889F1              <1>     mov rcx, rsi
   246 00000C69 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   247 00000C6C 0F84D5000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   248 00000C72 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   249 00000C75 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   250 00000C7C F3A4                <1>     rep movsb
   251 00000C7E 30C0                <1>     xor al, al
   252 00000C80 AA                  <1>     stosb   ;Store a terminating null
   253 00000C81 4887DE              <1>     xchg rbx, rsi
   254                              <1> ;Now we build FCBs for the arguments!
   255 00000C84 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   256 00000C8B E8AE000000          <1>     call .skipAndCheckCR
   257 00000C90 745B                <1>     je .setupCmdVars
   258 00000C92 C605B2F3FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   259 00000C99 4889F0              <1>     mov rax, rsi
   260 00000C9C 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   261 00000C9F 8805A7F3FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   262 00000CA5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   263 00000CA9 B801290000          <1>     mov eax, 2901h
   264 00000CAE CD21                <1>     int 21h
   265 00000CB0 880597F3FFFF        <1>     mov byte [arg1FCBret], al
   266                              <1> .skipArg:
   267 00000CB6 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   268 00000CB7 3C0D                <1>     cmp al, CR
   269 00000CB9 7432                <1>     je .setupCmdVars
   270 00000CBB E88B380000          <1>     call isALdelimiter
   271 00000CC0 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   272 00000CC2 E877000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   273 00000CC7 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   274 00000CC9 C6057EF3FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   275 00000CD0 4889F0              <1>     mov rax, rsi            
   276 00000CD3 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   277 00000CD6 880573F3FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   278 00000CDC 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   279 00000CE0 B801290000          <1>     mov eax, 2901h
   280 00000CE5 CD21                <1>     int 21h
   281 00000CE7 880563F3FFFF        <1>     mov byte [arg2FCBret], al
   282                              <1> .setupCmdVars:
   283                              <1> ;Before returning, we copy the command name to cmdName 
   284 00000CED 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   285 00000CF4 E8FB380000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   286 00000CF9 E81A380000          <1>     call strlen ;Get the length of the null terminated final path componant
   287 00000CFE 807F013A            <1>     cmp byte [rdi + 1], ":"
   288 00000D02 7515                <1>     jne .noDrivePath
   289 00000D04 8A0500F3FFFF        <1>     mov al, byte [pathSep]
   290 00000D0A 384702              <1>     cmp byte [rdi + 2], al
   291 00000D0D 740A                <1>     je .noDrivePath
   292                              <1>     ;Here if the filename is an FCB name A:12345678.9AB<NUL> (15 chars)
   293 00000D0F 81F90F000000        <1>     cmp ecx, 15
   294 00000D15 7730                <1>     ja .exitBad
   295 00000D17 EB08                <1>     jmp short .proceedCp
   296                              <1> .noDrivePath:
   297                              <1> ;Normal paths come here
   298 00000D19 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   299 00000D1F 7726                <1>     ja .exitBad     ;Return error
   300                              <1> .proceedCp:
   301 00000D21 4889FE              <1>     mov rsi, rdi
   302 00000D24 488D3D(16030000)    <1>     lea rdi, cmdName
   303 00000D2B FFC9                <1>     dec ecx ;Minus the terminating null
   304 00000D2D 880F                <1>     mov byte [rdi], cl ;Store the length here
   305 00000D2F 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   306                              <1> .cpCmdName:
   307 00000D32 AC                  <1>     lodsb
   308 00000D33 E8EA370000          <1>     call ucChar ;Uppercase the char
   309 00000D38 AA                  <1>     stosb
   310 00000D39 FFC9                <1>     dec ecx
   311 00000D3B 75F5                <1>     jnz .cpCmdName
   312                              <1>     return
    13                              <2> %%_ret:
    14 00000D3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   313                              <1> .skipAndCheckCR:
   314                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   315 00000D3E E8FA370000          <1>     call skipDelimiters ;Go to the next char in the input line
   316 00000D43 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   317                              <1>     return
    13                              <2> %%_ret:
    14 00000D46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   318                              <1> .exitBad:
   319 00000D47 C605(16030000)FF    <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   320                              <1>     return
    13                              <2> %%_ret:
    14 00000D4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   321                              <1> .exitBadDrv:
   322 00000D4F C605(16030000)FE    <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   323 00000D56 E81A0D0000          <1>     call badDriveError
   324                              <1>     return
    13                              <2> %%_ret:
    14 00000D5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> doCommandLine:
   327                              <1>     ;The following check accounts for the end of a piped command
   328 00000D5C 803D(16030000)00    <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   329 00000D63 0F846F010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   330 00000D69 803D(16030000)FF    <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   331 00000D70 0F84380D0000        <1>     je badCmdError
   332 00000D76 803D(16030000)FE    <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   333                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000D7D 74(5B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00000D7F 488D35(C7020000)    <1>     lea rsi, cmdPathSpec
   335 00000D86 0FB71D(C7020000)    <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   336 00000D8D 80FF3A              <1>     cmp bh, ":"
   337 00000D90 7520                <1>     jne .noDriveSpecified
   338 00000D92 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   339 00000D94 E889370000          <1>     call ucChar     ;Uppercase al
   340 00000D99 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   341                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   342 00000D9B 803D(16030000)02    <1>     cmp byte [cmdName], 2
   343 00000DA2 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   344 00000DA4 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   345 00000DA6 E843370000          <1>     call setDrive
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000DAB 74(5B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00000DAD E9C30C0000          <1>     jmp badDriveError
   348                              <1> .noDriveSpecified:
   349                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   350 00000DB2 488D1D(45020000)    <1>     lea rbx, cmdBuffer       ;Take your buffer
   351 00000DB9 488D35(16030000)    <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   352 00000DC0 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   353 00000DC5 BAFFFF0000          <1>     mov edx, 0FFFFh
   354 00000DCA B5FF                <1>     mov ch, -1
   355 00000DCC CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   356 00000DCE B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   357 00000DD3 BAFFFF0000          <1>     mov edx, 0FFFFh
   358 00000DD8 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   359 00000DDA CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   360                              <1>             ;        al = 0  if the command should be executed as usual
   361 00000DDC 84C0                <1>     test al, al
   362 00000DDE 7444                <1>     jz .executeInternal
   363                              <1>     ;Here we execute externally and return to the prompt
   364                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   365 00000DE0 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   366 00000DE7 488D35(16030000)    <1>     lea rsi, cmdName        
   367 00000DEE B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   368 00000DF3 BAFFFF0000          <1>     mov edx, 0FFFFh
   369 00000DF8 B5FF                <1>     mov ch, -1
   370 00000DFA CD2F                <1>     int 2Fh
   371 00000DFC 803D(16030000)00    <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   372                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000E03 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000E05 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   373                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   374                              <1>     ; is an external command that is in the CD or in the PATH.
   375                              <1>     ;Should not be used for this purpose but it is here...
   376 00000E06 E8D7050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   377 00000E0B 488D35(16030000)    <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   378 00000E12 AC                  <1>     lodsb                   ;Get the name length
   379 00000E13 0FB6C8              <1>     movzx ecx, al
   380 00000E16 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   381 00000E1D F3A4                <1>     rep movsb   
   382 00000E1F 31C0                <1>     xor eax, eax
   383 00000E21 AA                  <1>     stosb   ;Store null terminator
   384 00000E22 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   385                              <1> .executeInternal:
   386 00000E24 E8B9050000          <1>     call pullCommandline    ;Now pull the tail down
   387 00000E29 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   388 00000E30 E8E3360000          <1>     call strlen ;Get the length of the input command
   389 00000E35 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   390 00000E37 380D(16030000)      <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   391 00000E3D 0F850F270000        <1>     jne launchChild     ;If not, a path was specified, exit!
   392                              <1> .executeInternal2:
   393                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   394 00000E43 488D1D08F2FFFF      <1>     lea rbx, functionTable
   395                              <1> .nextEntry:
   396 00000E4A 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   397 00000E4D 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   398 00000E50 0F84FC260000        <1>     je launchChild      ;If so, check externally now
   399 00000E56 380D(16030000)      <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   400 00000E5C 7534                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   401                              <1>     ;Here they have the same length so lets see if the name is the same
   402 00000E5E 56                  <1>     push rsi
   403                              <1>     ;ecx has the length to compare
   404 00000E5F 51                  <1>     push rcx
   405 00000E60 488D7301            <1>     lea rsi, qword [rbx + 1]
   406 00000E64 488D3D(17030000)    <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   407 00000E6B F3A6                <1>     rep cmpsb   ;Check the strings are equal
   408 00000E6D 59                  <1>     pop rcx
   409 00000E6E 5E                  <1>     pop rsi
   410 00000E6F 7521                <1>     jne .gotoNextEntry
   411                              <1>     ;Here it was found both strings are equal.
   412 00000E71 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   413 00000E76 480FB71F            <1>     movzx rbx, word [rdi]
   414 00000E7A 488D3D7FF1FFFF      <1>     lea rdi, startLbl
   415 00000E81 4801FB              <1>     add rbx, rdi
   416 00000E84 FFD3                <1>     call rbx        ;Call the internal function!
   417                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   418                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   419                              <1> ;No need for the below because the retcode is 
   420                              <1> ; zeroed when we it from DOS.
   421                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   422                              <1> ;    mov byte [returnCode], 0 
   423                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   424                              <1>     ;jmp short appRet    ;Now once we are done, goto appRet!
   425                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   426                              <1> 
   427                              <1> ;This new exit preserves the retcode, and now allows for internal
   428                              <1> ; commands to implement retcodes which we don't use for now.
   429                              <1> ;I doubt we need to reset the stackptr as to get here, the stack has to
   430                              <1> ; have been balanced which means when we pop, we go back to okRet anyway...
   431 00000E86 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
   432 00000E8D E964FCFFFF          <1>     jmp commandMain.okRet   
   433                              <1> .gotoNextEntry:
   434 00000E92 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   435 00000E99 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   436 00000E9C EBAC                <1>     jmp short .nextEntry
   437                              <1> 
   438                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   439                              <1> ;Can depend on RSP here because DOS stack bug fixed.
   440 00000E9E 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr anyway.
   441                              <1> ;Start by resetting our PSP vectors (and IVT copies) in the event 
   442                              <1> ; they got mangled.
   443 00000EA5 E8DF390000          <1>     call resetIDTentries
   444 00000EAA E8AE390000          <1>     call resetNation    ;Reset switchchar and nation if exernal cmd fired!
   445 00000EAF B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, sets to 0 for internal commands
   446 00000EB4 CD21                <1>     int 21h
   447 00000EB6 668905(00000000)    <1>     mov word [returnCode], ax
   448 00000EBD 84E4                <1>     test ah, ah     ;Regular exit
   449 00000EBF 0F8431FCFFFF        <1>     jz commandMain.okRet
   450 00000EC5 80FC03              <1>     cmp ah, 3       ;TSR exit
   451 00000EC8 0F8428FCFFFF        <1>     je commandMain.okRet
   452                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   453                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   454                              <1>     ; as we always close the COMMAND.COM instance at this point.
   455 00000ECE E83F000000          <1>     call cleanupRedirs
   456 00000ED3 E94DFBFFFF          <1>     jmp commandMain
   457                              <1> 
   458                              <1> hardSynErr:
   459                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   460 00000ED8 E8740B0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   461 00000EDD E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   462                              <1> redirFailure:
   463 00000EE2 488D15BAF8FFFF      <1>     lea rdx, redirErrMsg
   464 00000EE9 B913000000          <1>     mov ecx, redirErrMsgL
   465 00000EEE EB0C                <1>     jmp short redirPipeFailureCommon
   466                              <1> pipeFailure:
   467 00000EF0 488D1595F8FFFF      <1>     lea rdx, pipeErrMsg
   468 00000EF7 B917000000          <1>     mov ecx, pipeErrMsgL
   469                              <1> redirPipeFailureCommon:
   470                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   471                              <1> ;This routine tries to close whatever handles are not -1 and delete
   472                              <1> ; pipe files if the pipe count is not 0.
   473                              <1> ;It resets all variables and jumps to reset the stack!
   474 00000EFC B800400000          <1>     mov eax, 4000h  ;Write handle
   475 00000F01 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   476 00000F06 CD21                <1>     int 21h
   477                              <1> .noPrint:
   478 00000F08 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   479 00000F0D E913FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   480                              <1> 
   481                              <1> cleanupRedirs:
   482                              <1> ;Cleans all active redirections, returning to the saved state.
   483                              <1> ;Deletes any pipe files, leaves any redir out files.
   484                              <1> ;Resets the internal vars
   485 00000F12 0FB7052EF1FFFF      <1>     movzx eax, word [redirSTDIN]
   486 00000F19 0FB71521F1FFFF      <1>     movzx edx, word [pipeSTDIN]
   487 00000F20 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   488 00000F22 E8CC000000          <1>     call .closeAndReplace
   489 00000F27 0FB7051BF1FFFF      <1>     movzx eax, word [redirSTDOUT]
   490 00000F2E 0FB7150EF1FFFF      <1>     movzx edx, word [pipeSTDOUT]
   491 00000F35 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   492 00000F37 E8B7000000          <1>     call .closeAndReplace
   493 00000F3C 66C70500F1FFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   494 00000F45 0FB71DFBF0FFFF      <1>     movzx ebx, word [redirSTDIN]
   495 00000F4C E892000000          <1>     call .closeHandle
   496                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   497 00000F51 66C705EDF0FFFFFFFF  <1>     mov word [redirSTDIN], -1
   498 00000F5A 0FB71DE8F0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   499 00000F61 E87D000000          <1>     call .closeHandle
   500 00000F66 66C705DAF0FFFFFFFF  <1>     mov word [redirSTDOUT], -1
   501 00000F6F 0FB71DCBF0FFFF      <1>     movzx ebx, word [pipeSTDIN]
   502 00000F76 E868000000          <1>     call .closeHandle
   503 00000F7B 66C705BDF0FFFFFFFF  <1>     mov word [pipeSTDIN], -1
   504 00000F84 0FB71DB8F0FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   505 00000F8B E853000000          <1>     call .closeHandle
   506 00000F90 66C705AAF0FFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   507 00000F99 C605A0F0FFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   508 00000FA0 488D15(C2030000)    <1>     lea rdx, qword [pipe1Filespec]
   509 00000FA7 803A00              <1>     cmp byte [rdx], 0
   510 00000FAA 7407                <1>     jz .checkOld
   511 00000FAC B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   512 00000FB1 CD21                <1>     int 21h
   513                              <1> .checkOld:
   514 00000FB3 488D15(11040000)    <1>     lea rdx, qword [pipe2Filespec]
   515 00000FBA 803A00              <1>     cmp byte [rdx],0
   516 00000FBD 7407                <1>     jz .pipeNamesComplete
   517 00000FBF B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   518 00000FC4 CD21                <1>     int 21h
   519                              <1> .pipeNamesComplete:
   520 00000FC6 31C0                <1>     xor eax, eax
   521                              <1>     ;Invalidate the pointers and the paths too
   522 00000FC8 488905(60040000)    <1>     mov qword [newPipe], rax
   523 00000FCF 488905(68040000)    <1>     mov qword [oldPipe], rax
   524 00000FD6 8905(C2030000)      <1>     mov dword [pipe1Filespec], eax
   525 00000FDC 8905(11040000)      <1>     mov dword [pipe2Filespec], eax
   526                              <1>     return
    13                              <2> %%_ret:
    14 00000FE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> .closeHandle:
   529 00000FE3 81FBFFFFFFFF        <1>     cmp ebx, -1
   530                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FE9 74(E2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   531 00000FEB B8003E0000          <1>     mov eax, 3E00h
   532 00000FF0 CD21                <1>     int 21h
   533                              <1>     return
    13                              <2> %%_ret:
    14 00000FF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> .closeAndReplace:
   535                              <1> ;Input: ax = one possible handle, dx = second possible handle
   536                              <1> ;       bx = handle to close and copy ax/dx into
   537                              <1> ;Output: Handle intervened on. bx preserved
   538 00000FF3 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   539 00000FF6 09D0                <1>     or eax, edx     ;Form packed
   540 00000FF8 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   541                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000FFD 74(F2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542 00000FFF E8DFFFFFFF          <1>     call .closeHandle
   543 00001004 663DFFFF            <1>     cmp ax, -1      
   544 00001008 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   545 0000100C 53                  <1>     push rbx
   546 0000100D 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   547 00001010 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   548 00001015 CD21                <1>     int 21h
   549 00001017 5B                  <1>     pop rbx
   550                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001018 73(F2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   551                              <1>     ;Else we now try to force default device to open!
   552 0000101A E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   553 0000101F B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   554 00001024 488D15C5F7FFFF      <1>     lea rdx, devName
   555 0000102B CD21                <1>     int 21h
   556                              <1>     return
    13                              <2> %%_ret:
    14 0000102D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> cleanRedirOut:
   559                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   560                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   561                              <1> ; particular cases like launching bat files which needs special handling in 
   562                              <1> ; that all redirs need to be completely removed.
   563 0000102E 66813D12F0FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   564                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001037 74(2D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   565 00001039 0FB71D09F0FFFF      <1>     movzx ebx, word [redirSTDOUT]
   566 00001040 B901000000          <1>     mov ecx, 1      ;STDOUT
   567 00001045 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   568 0000104A CD21                <1>     int 21h
   569 0000104C 0FB71DF6EFFFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   570 00001053 B8003E0000          <1>     mov eax, 3E00h  
   571 00001058 CD21                <1>     int 21h
   572 0000105A 66C705E6EFFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   573 00001063 488D15(73030000)    <1>     lea rdx, rdrOutFilespec
   574 0000106A B800410000          <1>     mov eax, 4100h      ;Del stdout file
   575 0000106F CD21                <1>     int 21h
   576 00001071 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   577                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   578                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   579                              <1>     return
    13                              <2> %%_ret:
    14 00001074 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> advanceRedir:
   582                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   583                              <1> ;Close stdin redir then stdout redir. 
   584 00001075 F605C9EFFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   585 0000107C 0F8585000000        <1>     jnz .redirIn
   586 00001082 F605B7EFFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   587 00001089 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   588 0000108F 0FBF05ABEFFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   589 00001096 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   590 0000109B 0F84EB000000        <1>     je .pipeOut              
   591                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   592 000010A1 0FB71D99EFFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   593 000010A8 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   594 000010AA B800460000          <1>     mov eax, 4600h
   595 000010AF CD21                <1>     int 21h
   596 000010B1 0F8239FEFFFF        <1>     jc pipeFailure
   597 000010B7 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   598 000010BC CD21                <1>     int 21h
   599 000010BE 0F822CFEFFFF        <1>     jc pipeFailure
   600 000010C4 488B15(68040000)    <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   601 000010CB B800410000          <1>     mov eax, 4100h  ;Delete the file!
   602 000010D0 CD21                <1>     int 21h
   603 000010D2 0F8218FEFFFF        <1>     jc pipeFailure
   604 000010D8 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   605 000010DB 66C7055DEFFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   606                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   607                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   608                              <1>     ;Else exit!
   609 000010E4 0FBF0558EFFFFF      <1>     movsx eax, word [pipeSTDOUT]
   610 000010EB 3DFFFFFFFF          <1>     cmp eax, -1
   611 000010F0 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   612 000010F6 C60543EFFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   613 000010FD F60542EFFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   614 00001104 753D                <1>     jnz .redirOut               ;Go for it if so!
   615                              <1>     return
    13                              <2> %%_ret:
    14 00001106 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .redirIn:
   617                              <1> ;Here we clean redirIn
   618 00001107 0FB71D39EFFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   619 0000110E 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   620 00001110 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   621 00001115 CD21                <1>     int 21h
   622 00001117 0F82C5FDFFFF        <1>     jc redirFailure
   623 0000111D B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   624 00001122 CD21                <1>     int 21h
   625 00001124 0F82B8FDFFFF        <1>     jc redirFailure
   626 0000112A 66C70514EFFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   627 00001133 C6050BEFFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   628 0000113A F605FFEEFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   629 00001141 7549                <1>     jnz .pipeOut
   630                              <1> .redirOut:
   631 00001143 F605FCEEFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   632                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000114A 74(06)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   633                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   634 0000114C F605EDEEFFFFFF      <1>     test byte [pipeFlag], -1
   635 00001153 7537                <1>     jnz short .pipeOut
   636 00001155 0FB71DEDEEFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   637 0000115C B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   638 00001161 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   639 00001166 CD21                <1>     int 21h
   640 00001168 0F8274FDFFFF        <1>     jc redirFailure
   641 0000116E B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   642 00001173 CD21                <1>     int 21h
   643 00001175 0F8267FDFFFF        <1>     jc redirFailure
   644 0000117B 66C705C5EEFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   645 00001184 C605BBEEFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   646                              <1>     return
    13                              <2> %%_ret:
    14 0000118B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> .pipeOut:
   648                              <1> ;Duplicate STDIN to save across pipe
   649 0000118C 0FBF05B0EEFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   650 00001193 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   651                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001198 74(8B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   652 0000119A B800450000          <1>     mov eax, 4500h
   653 0000119F 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   654 000011A1 CD21                <1>     int 21h
   655 000011A3 0F8247FDFFFF        <1>     jc pipeFailure
   656 000011A9 66890591EEFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   657                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   658 000011B0 B800460000          <1>     mov eax, 4600h
   659 000011B5 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   660 000011B7 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   661 000011B9 CD21                <1>     int 21h
   662 000011BB 0F822FFDFFFF        <1>     jc pipeFailure
   663                              <1> ;Now return the original stdout to stdout
   664 000011C1 89D9                <1>     mov ecx, ebx
   665 000011C3 0FB71D79EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   666 000011CA B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   667 000011CF CD21                <1>     int 21h
   668 000011D1 0F8219FDFFFF        <1>     jc pipeFailure
   669                              <1> ;Now close the DUP'ed STDOUT
   670 000011D7 B8003E0000          <1>     mov eax, 3E00h
   671 000011DC CD21                <1>     int 21h
   672 000011DE 0F820CFDFFFF        <1>     jc pipeFailure
   673                              <1> ;Finally unwind STDIN to the beginning of the file
   674 000011E4 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   675 000011E9 31DB                <1>     xor ebx, ebx    ;STDIN handle
   676 000011EB 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   677 000011ED 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   678 000011EF CD21                <1>     int 21h
   679 000011F1 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   680 000011F7 488B15(60040000)    <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   681 000011FE 488915(68040000)    <1>     mov qword [oldPipe], rdx
   682 00001205 66C70535EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   683                              <1>     return
    13                              <2> %%_ret:
    14 0000120E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   684                              <1> 
   685                              <1> 
   686                              <1> peelRedir:
   687                              <1> ;Checks and sets up redir as appropriate
   688                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   689                              <1> ;       rsi points to the first char after the char in al in cLineBuffer
   690                              <1> ;Output: ZF=NZ => No redir
   691                              <1> ;        ZF=ZY => Redir
   692                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   693                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   694 0000120F 51                  <1>     push rcx
   695 00001210 57                  <1>     push rdi
   696 00001211 3C3C                <1>     cmp al, "<"
   697 00001213 740C                <1>     je .inputRedir
   698 00001215 3C3E                <1>     cmp al, ">"
   699 00001217 7427                <1>     je .outputRedir
   700 00001219 3C7C                <1>     cmp al, "|"
   701 0000121B 7441                <1>     je .pipeSetup
   702 0000121D F8                  <1>     clc
   703                              <1> .redirExit:
   704 0000121E 5F                  <1>     pop rdi
   705 0000121F 59                  <1>     pop rcx
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .inputRedir:
   708 00001221 C6051DEEFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   709 00001228 488D3D(24030000)    <1>     lea rdi, rdrInFilespec
   710                              <1> .redirCommon:
   711 0000122F E809330000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   712 00001234 E835340000          <1>     call cpDelimPathToBufz
   713 00001239 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   714 0000123C 30C0                <1>     xor al, al  ;Clear the ZF flag
   715 0000123E EBDE                <1>     jmp short .redirExit
   716                              <1> .outputRedir:
   717 00001240 C605FFEDFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   718 00001247 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   719 0000124A 7509                <1>     jne .notDouble
   720 0000124C FE05F4EDFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   721 00001252 48FFC6              <1>     inc rsi ;Go past it too
   722                              <1> .notDouble:
   723 00001255 488D3D(73030000)    <1>     lea rdi, rdrOutFilespec
   724 0000125C EBD1                <1>     jmp short .redirCommon
   725                              <1> .pipeSetup:
   726 0000125E 56                  <1>     push rsi    ;Save rsi pointing to char past |
   727 0000125F E8D9320000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   728 00001264 803E7C              <1>     cmp byte [rsi], "|" 
   729 00001267 7403                <1>     je .badFnd
   730 00001269 803E0D              <1>     cmp byte [rsi], CR
   731                              <1> .badFnd:
   732 0000126C 5E                  <1>     pop rsi
   733 0000126D F9                  <1>     stc
   734 0000126E EBAE                <1>     jmp short .redirExit
   735                              <1> 
   736                              <1> setupRedirandPipes:
   737                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   738                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   739 00001270 0F8484000000        <1>     jz .redirIn
   740 00001276 488D15(C2030000)    <1>     lea rdx, pipe1Filespec
   741 0000127D 803A00              <1>     cmp byte [rdx], 0
   742 00001280 7410                <1>     jz .pathFound
   743 00001282 488D15(11040000)    <1>     lea rdx, pipe2Filespec
   744 00001289 803A00              <1>     cmp byte [rdx], 0
   745 0000128C 0F855EFCFFFF        <1>     jnz pipeFailure
   746                              <1> .pathFound:
   747 00001292 488915(60040000)    <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   748 00001299 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   749 0000129E BB01000000          <1>     mov ebx, 1
   750 000012A3 CD21                <1>     int 21h
   751 000012A5 0F8245FCFFFF        <1>     jc pipeFailure
   752 000012AB 66890591EDFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   753 000012B2 E843320000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   754 000012B7 0441                <1>     add al, "A"
   755 000012B9 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   756 000012BE 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   757 000012C0 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   758 000012C2 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   759 000012C4 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   760 000012C9 CD21                <1>     int 21h
   761 000012CB 0F821FFCFFFF        <1>     jc pipeFailure
   762                              <1>     ;AX has the handle for this file now, this will become STDOUT
   763                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   764 000012D1 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   765 000012D4 B901000000          <1>     mov ecx, 1
   766 000012D9 B800460000          <1>     mov eax, 4600h
   767 000012DE CD21                <1>     int 21h
   768 000012E0 0F820AFCFFFF        <1>     jc pipeFailure
   769 000012E6 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   770 000012EB CD21                <1>     int 21h
   771 000012ED 0F82FDFBFFFF        <1>     jc pipeFailure
   772 000012F3 C60546EDFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   773                              <1> .redirIn:
   774                              <1> ;Now check if any other redir needs to be setup
   775                              <1> ;Checks and sets up redir as appropriate.
   776                              <1>     ;Setup the redir here for STDIN
   777 000012FA F60544EDFFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   778 00001301 7449                <1>     jz .redirOut
   779 00001303 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   780 00001305 B800450000          <1>     mov eax, 4500h
   781 0000130A CD21                <1>     int 21h
   782 0000130C 0F82D0FBFFFF        <1>     jc redirFailure
   783 00001312 6689052EEDFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   784 00001319 488D15(24030000)    <1>     lea rdx, rdrInFilespec
   785 00001320 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   786 00001325 CD21                <1>     int 21h
   787 00001327 0F82B5FBFFFF        <1>     jc redirFailure
   788 0000132D 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   789 0000132F 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   790 00001332 B800460000          <1>     mov eax, 4600h
   791 00001337 CD21                <1>     int 21h
   792 00001339 0F82A3FBFFFF        <1>     jc redirFailure
   793 0000133F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   794 00001344 CD21                <1>     int 21h
   795 00001346 0F8296FBFFFF        <1>     jc redirFailure
   796                              <1> .redirOut:
   797 0000134C F605F3ECFFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   798                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001353 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001355 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   799 00001356 803DE6ECFFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   800                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000135D 75(55)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   801                              <1>     ;Else setup the redir here for STDOUT
   802 0000135F BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   803 00001364 B800450000          <1>     mov eax, 4500h
   804 00001369 CD21                <1>     int 21h
   805 0000136B 0F8271FBFFFF        <1>     jc redirFailure
   806 00001371 668905D1ECFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   807 00001378 488D15(73030000)    <1>     lea rdx, rdrOutFilespec
   808 0000137F 803DC0ECFFFF01      <1>     cmp byte [redirOut], 1  ;If >, just create a new file!
   809 00001386 7409                <1>     je .skipOpen
   810 00001388 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   811 0000138D CD21                <1>     int 21h
   812 0000138F 730F                <1>     jnc .fileExists
   813                              <1> .skipOpen:
   814 00001391 B8003C0000          <1>     mov eax, 3C00h
   815 00001396 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   816 00001398 CD21                <1>     int 21h
   817 0000139A 0F8242FBFFFF        <1>     jc redirFailure
   818                              <1> .fileExists:
   819 000013A0 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   820 000013A5 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   821 000013A8 B800460000          <1>     mov eax, 4600h  ;DUP2
   822 000013AD CD21                <1>     int 21h
   823 000013AF 0F822DFBFFFF        <1>     jc redirFailure
   824 000013B5 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   825 000013BA CD21                <1>     int 21h
   826 000013BC 0F8220FBFFFF        <1>     jc redirFailure
   827 000013C2 803D7DECFFFF01      <1>     cmp byte [redirOut], 1
   828                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000013C9 74(55)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   829                              <1>     ;Here we move the file pointer to the end of the file
   830 000013CB 31D2                <1>     xor edx, edx    ;Low order 32 bits
   831 000013CD 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   832 000013CF BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   833 000013D4 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   834 000013D9 CD21                <1>     int 21h
   835 000013DB 0F8201FBFFFF        <1>     jc redirFailure
   836                              <1>     return
    13                              <2> %%_ret:
    14 000013E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   837                              <1> 
   838                              <1> 
   839                              <1> pullCommandline:
   840                              <1> ;This command pulls the command tail down, removing the whole launch command
   841 000013E2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   842                              <1> ;Skip leading separators
   843                              <1> .pctSkipLeading:
   844 000013E9 AC                  <1>     lodsb   ;Get first char
   845 000013EA E85C310000          <1>     call isALdelimiter
   846 000013EF 74F8                <1>     je .pctSkipLeading
   847 000013F1 48FFCE              <1>     dec rsi
   848                              <1>     ;rsi points to the start of the command
   849 000013F4 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   850 000013FB E818310000          <1>     call strlen ;Get the length of the command
   851 00001400 FFC9                <1>     dec ecx ;Minus the terminating null
   852 00001402 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   853 00001405 280D41ECFFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   854 0000140B 280D3EECFFFF        <1>     sub byte [arg2Off], cl
   855 00001411 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   856 00001413 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   857                              <1> .pctPullChars:
   858 0000141A AC                  <1>     lodsb
   859 0000141B AA                  <1>     stosb
   860 0000141C 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   861 0000141E 7404                <1>     je .pctExit
   862 00001420 FFC1                <1>     inc ecx     ;Increment count
   863 00001422 EBF6                <1>     jmp short .pctPullChars 
   864                              <1> .pctExit:
   865 00001424 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   866                              <1>     return
    13                              <2> %%_ret:
    14 0000142B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   867                              <1> 
   868                              <1> getSetMainState:
   869                              <1> ;Resets the buffers lengths, sets stringops and gets the pPSP in r8
   870 0000142C FC                  <1>     cld ;Ensure stringops are done the right way
   871 0000142D C605(41010000)80    <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   872 00001434 C605(C3010000)80    <1>     mov byte [cLineBuffer], inLen     ;Reset the buffer length
   873 0000143B C605(45020000)80    <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   874 00001442 4C8B05B7EBFFFF      <1>     mov r8, qword [pPSP]              ;Reset the pPSP
   875                              <1>     return
    13                              <2> %%_ret:
    14 00001449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   876                              <1> 
   877                              <1> 
   878                              <1> int2Eh: 
   879                              <1> ;Very sucky interface for passing command lines to be processed by the 
   880                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   881                              <1> ; more reliable with a critical section flag. Currently, if we are already
   882                              <1> ; processing an Int 2Eh request, this will not process the command.
   883                              <1> ;
   884                              <1> ;Need to add further safeguards for when pipes are also setup and
   885                              <1> ; batchmode is on!
   886                              <1> ;
   887                              <1> ;Input: rsi points to the count byte of a command line.
   888                              <1> ;       Max number of chars is 128 (127 + count byte)
   889                              <1> ;Output:
   890                              <1> ;       CF=NC: Command was processed. ax = Retcode
   891                              <1> ;       CF=CY: Command was not processed.
   892 0000144A 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   893 0000144F F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   894 00001456 0F85A4000000        <1>     jnz int2EcheckReentry 
   895                              <1> .multiJoin:
   896 0000145C 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the bits! Gets the lock!
   897 00001463 488925(0A000000)    <1>     mov qword [int2Ersp], rsp       ;Save the far stack pointer 
   898 0000146A B8002F0000          <1>     mov eax, 2F00h  ;Get the current DTA in rbx
   899 0000146F CD21                <1>     int 21h
   900 00001471 48891D(12000000)    <1>     mov qword [int2Edta], rbx       ;We set the dta in the main loop later
   901 00001478 488D25(40060000)    <1>     lea rsp, stackTop               ;Set to use the internal stack
   902 0000147F B800510000          <1>     mov eax, 5100h  ;Get Current PSP in rdx
   903 00001484 CD21                <1>     int 21h
   904 00001486 48891D(02000000)    <1>     mov qword [int2Epsp], rbx
   905 0000148D 52                  <1>     push rdx    ;Save on the stack
   906 0000148E 488B1D6BEBFFFF      <1>     mov rbx, qword [pPSP] ;Get the psp for this COMMAND.COM
   907 00001495 B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   908 0000149A CD21                <1>     int 21h
   909 0000149C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   910 0000149F 4989D9              <1>     mov r9, rbx
   911 000014A2 FC                  <1>     cld
   912 000014A3 488D3D(C4010000)    <1>     lea rdi, cLineBuffer + 1
   913 000014AA B981000000          <1>     mov ecx, cmdBufferL - 1
   914 000014AF F3A4                <1>     rep movsb   ;Zoom zoom copy command line over
   915 000014B1 E876FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   916 000014B6 E8A2330000          <1>     call resetNation        ;Now ensure internationalisation is up to date
   917 000014BB 803D(C4010000)00    <1>     cmp byte [cLineBuffer + 1], 0   ;Don't use batProceed to fail if len 0
   918 000014C2 0F85EAF5FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   919                              <1> int2ERet:
   920 000014C8 E8A2300000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   921 000014CD 488B25(0A000000)    <1>     mov rsp, qword [int2Ersp]
   922 000014D4 488B1D(02000000)    <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   923 000014DB B800500000          <1>     mov eax, 5000h  ;Set Current PSP
   924 000014E0 CD21                <1>     int 21h
   925 000014E2 488B15(12000000)    <1>     mov rdx, qword [int2Edta]
   926 000014E9 B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA back to where it was upon return
   927 000014EE CD21                <1>     int 21h
   928 000014F0 0FB705(00000000)    <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   929 000014F7 8025(1A000000)FB    <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   930 000014FE 48CF                <1>     iretq
   931                              <1> 
   932                              <1> int2EcheckReentry:
   933                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   934                              <1> ; else, return with CF=CY.
   935 00001500 B800520000          <1>     mov eax, 5200h  ;Get sysvars
   936 00001505 CD21                <1>     int 21h
   937 00001507 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   938 0000150B 7512                <1>     jnz short .multifnd
   939 0000150D B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   940 00001512 CD2F                <1>     int 2Fh
   941 00001514 84C0                <1>     test al, al ;This must still be zero, else something installed
   942 00001516 7507                <1>     jnz .multifnd
   943 00001518 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   944 0000151D 48CF                <1>     iretq   
   945                              <1> .multifnd:
   946                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   947 0000151F F390                <1>     pause
   948 00001521 F605(1A000000)04    <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   949 00001528 75F5                <1>     jnz .multifnd
   950 0000152A E92DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    20                                  %include "./src/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Start by creating the FQPath name and building a command line
     5                              <1> ; where the arguments are CR terminated.
     6                              <1> ;Then work out how much memory to allocate and allocate it.
     7                              <1> ;First First check that we are not already in a batch file!
     8                              <1> ;If we are, deallocate it's block before proceeding unless in CALL.
     9 0000152F 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
    10 00001536 4885DB              <1>     test rbx, rbx
    11 00001539 7419                <1>     jz .noBat   
    12 0000153B F605(73000000)FF    <1>     test byte [callFlg], -1 ;Skip this if in a call
    13 00001542 7510                <1>     jnz .noBat
    14 00001544 E852040000          <1>     call batFree            ;Free batch block
    15 00001549 48C705(1B000000)00- <1>     mov qword [bbPtr], 0    ;Mark as free. Can leave flags alone!
    15 00001551 000000              <1>
    16                              <1> .noBat:
    17                              <1> ;Now start by saving the command line
    18                              <1> ;Now check if we are executing AUTOEXEC.BAT. If so, 
    19                              <1> ; we suppress F3 recalling of the command
    20 00001554 488D35A1F2FFFF      <1>     lea rsi, autoSpec + 3   ;Just check the name
    21 0000155B 488D3D(E7000000)    <1>     lea rdi, cmdFcb + fcb.filename
    22 00001562 B908000000          <1>     mov ecx, 8  ;Only check filename as the extension here must be BAT
    23 00001567 F3A6                <1>     repe cmpsb
    24 00001569 7507                <1>     jne .notAutoexec
    25 0000156B C605(42010000)00    <1>     mov byte [inBuffer + 1], 0    ;Set the count byte to 0
    26                              <1> .notAutoexec:
    27 00001572 488D35(C7020000)    <1>     lea rsi, cmdPathSpec    ;Path here is null terminated.
    28 00001579 488D3D(23000000)    <1>     lea rdi, batFile
    29 00001580 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    30 00001583 80FC3A              <1>     cmp ah, ":"
    31 00001586 7479                <1>     je .bbdrvGiven
    32 00001588 3A057CEAFFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    33 0000158E 7464                <1>     je .bbCDrvAbs
    34                              <1> ;Current drive relative
    35 00001590 E8652F0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    36 00001595 0441                <1>     add al, "A"
    37 00001597 B43A                <1>     mov ah, ":"
    38 00001599 66AB                <1>     stosw   ;Store these two chars, adv rdi
    39                              <1> .bbRelPath:
    40 0000159B 8A0569EAFFFF        <1>     mov al, byte [pathSep]  
    41 000015A1 AA                  <1>     stosb   ;Store the pathsep
    42 000015A2 8A05(23000000)      <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    43 000015A8 E8752F0000          <1>     call ucChar             ;UC it
    44 000015AD 8805(23000000)      <1>     mov byte [batFile], al  ;and overwrite it :)
    45 000015B3 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    46 000015B5 88C2                <1>     mov dl, al
    47 000015B7 56                  <1>     push rsi        ;Save remaining char source
    48 000015B8 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    49 000015BB B800470000          <1>     mov eax, 4700h  ;Get Current Directory (null terminated)
    50 000015C0 CD21                <1>     int 21h
    51 000015C2 5E                  <1>     pop rsi
    52 000015C3 7316                <1>     jnc .bbRelPathOk
    53 000015C5 488D15AAEBFFFF      <1>     lea rdx, badBat
    54 000015CC E8212D0000          <1>     call printString
    55 000015D1 E885030000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    56 000015D6 E94AF4FFFF          <1>     jmp commandMain     ;And start again :)   
    57                              <1> .bbRelPathOk:
    58                              <1> ;Now move rdi to the terminating null   
    59 000015DB 31C0                <1>     xor eax, eax
    60 000015DD 31C9                <1>     xor ecx, ecx
    61 000015DF FFC9                <1>     dec ecx
    62 000015E1 F2AE                <1>     repne scasb ;Find the terminating null
    63 000015E3 48FFCF              <1>     dec rdi ;Now point to the terminating null
    64 000015E6 8A051EEAFFFF        <1>     mov al, byte [pathSep]
    65 000015EC 3847FF              <1>     cmp byte [rdi - 1], al
    66 000015EF 741E                <1>     je .bbCpName    ;Dont store a pathsep over root!
    67 000015F1 AA                  <1>     stosb   ;Store this pathsep over the original null
    68                              <1>     ;Now we are ready to copy the command line passed to us by the user
    69                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    70 000015F2 EB1B                <1>     jmp short .bbCpName
    71                              <1> .bbCDrvAbs:
    72                              <1> ;Current drive absolute. Get current drive into buffer
    73 000015F4 E8012F0000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    74 000015F9 0441                <1>     add al, "A"
    75 000015FB B43A                <1>     mov ah, ":"
    76 000015FD 66AB                <1>     stosw   ;Store these two chars
    77                              <1>     ;Now we are ready to copy the command line passed to us by the user
    78                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    79 000015FF EB0E                <1>     jmp short .bbCpName
    80                              <1> .bbdrvGiven:
    81                              <1> ;Drive given X:
    82 00001601 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
    83 00001603 AC                  <1>     lodsb
    84 00001604 48FFCE              <1>     dec rsi ;Get the char and point back to it
    85 00001607 3A05FDE9FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
    86 0000160D 758C                <1>     jne .bbRelPath
    87                              <1> .bbCpName:
    88 0000160F E8EB2E0000          <1>     call strcpy ;Copy the remaining portion
    89 00001614 488D35(23000000)    <1>     lea rsi, batFile
    90 0000161B E80E2F0000          <1>     call normalisePath  ;Normalise the path :)
    91                              <1> ;Now batFile has the FQpathname, construct the new CR delimited command line.
    92 00001620 488D35(47020000)    <1>     lea rsi, cmdBuffer + 2
    93 00001627 488D3D(46020000)    <1>     lea rdi, cmdBuffer + 1  ;Overwrite count byte as we will null terminate
    94                              <1> .copyCmdline:
    95 0000162E E80A2F0000          <1>     call skipDelimiters ;Find start of argument
    96                              <1> .cclp:
    97 00001633 AC                  <1>     lodsb
    98 00001634 E8122F0000          <1>     call isALdelimiter  ;If we hit delimiter, replace with CR, goto next arg
    99 00001639 7505                <1>     jne .ccstore
   100 0000163B B00D                <1>     mov al, CR  
   101 0000163D AA                  <1>     stosb
   102 0000163E EBEE                <1>     jmp short .copyCmdline
   103                              <1> .ccstore:
   104 00001640 AA                  <1>     stosb   
   105 00001641 3C0D                <1>     cmp al, CR  ;Did we just store a CR
   106 00001643 75EE                <1>     jne .cclp   ;Keep getting chars if so
   107 00001645 31C0                <1>     xor eax, eax    ;Else store a terminating null now
   108 00001647 AA                  <1>     stosb
   109 00001648 488D3D(46020000)    <1>     lea rdi, cmdBuffer + 1    ;Get back the ptr to the head of the new string
   110 0000164F E8C42E0000          <1>     call strlen     ;Get the new string length in ecx
   111 00001654 89CB                <1>     mov ebx, ecx    ;Save len in eax (include null)
   112 00001656 488D3D(23000000)    <1>     lea rdi, batFile
   113 0000165D E8B62E0000          <1>     call strlen     ;Get the filename len in ecx
   114 00001662 01CB                <1>     add ebx, ecx
   115 00001664 81C327000000        <1>     add ebx, batBlockHdr_size   ;Get the size to allocate for block
   116 0000166A 89D9                <1>     mov ecx, ebx    ;Save the size in bytes in ecx for the cleaning below
   117 0000166C 81C30F000000        <1>     add ebx, 0Fh    ;Round up to nearest paragraph!
   118 00001672 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   119 00001675 B800480000          <1>     mov eax, 4800h
   120 0000167A CD21                <1>     int 21h
   121 0000167C 730F                <1>     jnc .bbAlloced
   122 0000167E E8C5030000          <1>     call badNoMemError  ;Print not enough mem error
   123 00001683 E8D3020000          <1>     call batCleanup ;Clean up all redir and ret to cmdline
   124 00001688 E998F3FFFF          <1>     jmp commandMain
   125                              <1> .bbAlloced:
   126                              <1> ;Now init the batblock with all the data we need
   127 0000168D 4889C3              <1>     mov rbx, rax    ;Move ptr here
   128 00001690 488705(1B000000)    <1>     xchg qword [bbPtr], rax  ;Save the ptr here too and get prev ptr!
   129 00001697 50                  <1>     push rax    ;Save the previous pointer on the stack
   130 00001698 4889DF              <1>     mov rdi, rbx
   131 0000169B 31C0                <1>     xor eax, eax
   132 0000169D F3AA                <1>     rep stosb   ;Clean the block with nulls
   133 0000169F 800D(1A000000)08    <1>     or byte [statFlg1], inBatch ;Fire up the batch processor now!
   134                              <1> 
   135 000016A6 8F4302              <1>     pop qword [rbx + batBlockHdr.pLink]    ;Get prev ptr here (0 if not call)
   136 000016A9 4889DF              <1>     mov rdi, rbx            ;Point back to the head of the block
   137 000016AC 8A055BE9FFFF        <1>     mov al, byte [echoFlg]
   138 000016B2 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
   139 000016B5 8A05(1A000000)      <1>     mov al, byte [statFlg1]
   140 000016BB 88430A              <1>     mov byte [rbx + batBlockHdr.bStatFlg], al
   141 000016BE B8FFFFFFFF          <1>     mov eax, -1
   142 000016C3 B905000000          <1>     mov ecx, 5
   143 000016C8 488D7B13            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
   144 000016CC F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine    
   145 000016CE 488D35(23000000)    <1>     lea rsi, batFile
   146 000016D5 E8252E0000          <1>     call strcpy ;Copy the string and the terminating null
   147 000016DA 488D35(46020000)    <1>     lea rsi, cmdBuffer + 1
   148 000016E1 57                  <1>     push rdi    ;Save the ptr to where we will store the cmdline
   149 000016E2 E8182E0000          <1>     call strcpy ;Copy the command tail and the terminating null
   150 000016E7 5F                  <1>     pop rdi     ;Get the pointer to the copied cmdline in rdi
   151 000016E8 31F6                <1>     xor esi, esi    ;Use esi as argument counter
   152 000016EA 31C9                <1>     xor ecx, ecx
   153 000016EC FFC9                <1>     dec ecx ;Init ecx to large number for repne below (stupid hack will work)
   154                              <1> .bbFndLp:
   155 000016EE 803F00              <1>     cmp byte [rdi], 0   ;Is this the end of the cmdline?
   156 000016F1 741B                <1>     je .bbArgsDone      
   157                              <1> ;Else add the entry to the table! rbx -> batBlock
   158 000016F3 4889F8              <1>     mov rax, rdi
   159 000016F6 4829D8              <1>     sub rax, rbx    ;Now get distance from head of batBlock to this arg in ax
   160 000016F9 6689447313          <1>     mov word [rbx + 2*rsi + batBlockHdr.wArgs], ax    ;and store it!
   161 000016FE FFC6                <1>     inc esi
   162 00001700 81FE0A000000        <1>     cmp esi, 10         ;Did we just process %9?
   163 00001706 7406                <1>     je .bbArgsDone
   164 00001708 B00D                <1>     mov al, CR  ;Scan for the next CR and move rdi past it!
   165 0000170A F2AE                <1>     repne scasb
   166 0000170C EBE0                <1>     jmp short .bbFndLp   ;If not end of cmdline, see if next char delim
   167                              <1> .bbArgsDone:
   168                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   169                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   170                              <1> ; for SHARING trouble...
   171 0000170E E897020000          <1>     call batKillRedir      ;Fully remove all redirs and files before starting
   172 00001713 E90DF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   173                              <1> 
   174                              <1> batFinish:
   175                              <1> ;This is the procedure called after we've processed the last batch line
   176 00001718 E8532B0000          <1>     call printPrompt    ;Add this to emulate what DOS does
   177 0000171D 488B05(1B000000)    <1>     mov rax, qword [bbPtr]
   178 00001724 488B4002            <1>     mov rax, qword [rax + batBlockHdr.pLink]
   179 00001728 0FB6580A            <1>     movzx ebx, byte [rax + batBlockHdr.bStatFlg]    ;Get called state
   180 0000172C 50                  <1>     push rax    ;Save the ptr on the stack
   181 0000172D 53                  <1>     push rbx    ;Save state on stack
   182 0000172E E828020000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   183 00001733 5B                  <1>     pop rbx
   184 00001734 58                  <1>     pop rax
   185 00001735 4885C0              <1>     test rax, rax   ;If the link ptr is 0, we start again :)
   186 00001738 0F84E7F2FFFF        <1>     jz commandMain
   187                              <1>     ;Else, we go back a command block
   188 0000173E 488905(1B000000)    <1>     mov qword [bbPtr], rax  ;Place caller batch block back :)
   189 00001745 881D(1A000000)      <1>     mov byte [statFlg1], bl ;And place the original states back
   190 0000174B E9D5F2FFFF          <1>     jmp commandMain
   191                              <1>     ;And read the next command from the previous batch file!
   192                              <1> batNextLine:
   193                              <1> ;Read the next line from the file and sets if we are done with copying
   194 00001750 F605(1A000000)10    <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   195 00001757 75BF                <1>     jnz batFinish
   196 00001759 E857020000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   197 0000175E 488B35(1B000000)    <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   198 00001765 8B560B              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   199 00001768 8B4E0F              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   200 0000176B B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   201 00001770 CD21                <1>     int 21h
   202 00001772 C605(C4010000)00    <1>     mov byte [batInBuffer + 1], 0  ;Reset the buffer count
   203 00001779 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2   ;Start read pos
   204 00001780 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   205                              <1> .readlp:
   206 00001782 E866020000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   207 00001787 742F                <1>     jz .eofAddCR
   208 00001789 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   209 0000178C 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   210 0000178F 743D                <1>     je .eolCR
   211 00001791 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   212 00001794 7447                <1>     je .eolLF
   213 00001796 FE05(C4010000)      <1>     inc byte [batInBuffer + 1] ;Inc our char count
   214 0000179C 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   215 0000179F 803D(C4010000)80    <1>     cmp byte [batInBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   216 000017A6 75DA                <1>     jne .readlp             ;Get next char if not
   217 000017A8 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   218 000017AB C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   219 000017AE FE0D(C4010000)      <1>     dec byte [batInBuffer + 1] ;Reduce the valid char count by one
   220 000017B4 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   221 000017B6 EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   222                              <1> .eofAddCR:
   223 000017B8 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   224                              <1> .eof:
   225 000017BB 803D(C4010000)00    <1>     cmp byte [batInBuffer + 1], 0      ;If we read any chars, do the line!
   226 000017C2 751C                <1>     jne .eol
   227 000017C4 E81C020000          <1>     call batClose                   ;Else close the hdl!
   228 000017C9 E94AFFFFFF          <1>     jmp batFinish
   229                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   230 000017CE E81A020000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   231 000017D3 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   232 000017D5 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   233 000017D8 7503                <1>     jne .eolLF          ;Reread this char if not LF
   234 000017DA 48FFC7              <1>     inc rdi             ;Else add to the count
   235                              <1> .eolLF:
   236 000017DD C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   237                              <1> .eol:
   238                              <1> ;Close the file, update the batch block file pointer, then proceed.
   239                              <1> ;rsi -> Batch block.
   240 000017E0 E800020000          <1>     call batClose
   241                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   242 000017E5 48017E0B            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   243                              <1> ;Now we echo the prompt and command to the console unless the 
   244                              <1> ; first char is @, we hit a label or the echo flag is off.
   245 000017E9 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2
   246                              <1> ;Labels and @ chars are first non-delim char on line.
   247                              <1> ;Find the first non-delim char in the line and check it!!
   248 000017F0 4889D6              <1>     mov rsi, rdx
   249 000017F3 E8452D0000          <1>     call skipDelimiters     
   250 000017F8 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   251 000017FB 0F844FFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   252 00001801 E858000000          <1>     call batPreprocess      ;Else we preprocess now
   253                              <1> 
   254 00001806 488D15(C5010000)    <1>     lea rdx, batInBuffer + 2
   255 0000180D 803A40              <1>     cmp byte [rdx], batNoEchoChar   ;Line no echo check! (@)
   256 00001810 7429                <1>     je .noEchoPull       
   257 00001812 F605F4E7FFFFFF      <1>     test byte [echoFlg], -1         
   258 00001819 0F848AF2FFFF        <1>     jz commandMain.batProceed
   259 0000181F 52                  <1>     push rdx
   260 00001820 E84B2A0000          <1>     call printPrompt    ;Now output prompt
   261 00001825 5A                  <1>     pop rdx
   262 00001826 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
   263 0000182A BB01000000          <1>     mov ebx, 1  ;STDOUT
   264 0000182F B800400000          <1>     mov eax, 4000h  ;Write woo!
   265 00001834 CD21                <1>     int 21h
   266 00001836 E969F2FFFF          <1>     jmp commandMain.batProceedCrlf
   267                              <1> .noEchoPull:
   268 0000183B FE0D(C4010000)      <1>     dec byte [batInBuffer + 1]     ;Eliminate the @ char
   269 00001841 0F8409FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   270 00001847 4889D7              <1>     mov rdi, rdx
   271 0000184A 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   272 0000184E 0FB60D(C4010000)    <1>     movzx ecx, byte [batInBuffer + 1]  ;Get the remaining count to copy
   273 00001855 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   274 00001857 F3A4                <1>     rep movsb 
   275 00001859 E94BF2FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   276                              <1> 
   277                              <1> batPreprocess:
   278                              <1> ;Copies the line from batInBuffer to batInBuffer for regular processing,
   279                              <1> ; expanding any environment variables as the expansion takes place.
   280                              <1> ;Line is guaranteed only CR terminated.
   281 0000185E 488D2D(45020000)    <1>     lea rbp, cmdBuffer      ;Save the ptr for the expandVar function
   282 00001865 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   283 00001869 C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   284 0000186D 488D35(C5010000)    <1>     lea rsi, qword [batInBuffer + 2]
   285 00001874 E8C42C0000          <1>     call skipDelimiters ;We strip leading delimiters
   286                              <1> .lp:
   287 00001879 AC                  <1>     lodsb   ;Get char and advance source ptr
   288 0000187A 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   289 0000187C 7507                <1>     jne .rawcp
   290 0000187E E825000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   291 00001883 EB08                <1>     jmp short .check  
   292                              <1> .rawcp:
   293 00001885 AA                  <1>     stosb   ;Store the char
   294 00001886 3C0D                <1>     cmp al, CR
   295 00001888 740C                <1>     je .exit    ;Return immediately if we copied a CR. Dont add to count.
   296 0000188A FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   297                              <1> .check:
   298 0000188D 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   299 00001891 75E6                <1>     jne .lp
   300 00001893 B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   301 00001895 AA                  <1>     stosb   ;Store this char too
   302                              <1> .exit:
   303                              <1> ;Now copy the expanded command line back :)
   304 00001896 4889EE              <1>     mov rsi, rbp
   305 00001899 488D3D(C3010000)    <1>     lea rdi, batInBuffer
   306 000018A0 B982000000          <1>     mov ecx, cmdBufferL
   307 000018A5 F3A4                <1>     rep movsb
   308                              <1>     return
    13                              <2> %%_ret:
    14 000018A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> 
   311                              <1> batExpandVar:
   312                              <1> ;Expand any environment variables. 
   313                              <1> ;%% is treated as an escape char for a %.
   314                              <1> ;
   315                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   316                              <1> ;       rdi -> Position to place the substitution string.
   317                              <1> ;       rbp -> Head of destination buffer for copy.
   318                              <1> ;Output:
   319                              <1> ;   Substitution string is placed in buffer if necessary.
   320                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   321                              <1> ;       rdi -> Space for the next char to copy.
   322 000018A8 0FB606              <1>     movzx eax, byte [rsi]  ;Is this a parameter like %[0-9]?
   323 000018AB 3C30                <1>     cmp al, "0"
   324 000018AD 7204                <1>     jb .notRep  ;If definitely not a number, keep going
   325 000018AF 3C39                <1>     cmp al, "9"
   326 000018B1 7276                <1>     jb .repParm ;If a number, its a replacable parameter :)
   327                              <1> .notRep:
   328 000018B3 3C0D                <1>     cmp al, CR          
   329                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018B5 74(A7)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   330 000018B7 3C25                <1>     cmp al, "%" ;If immediately followed by %, then return it
   331 000018B9 7505                <1>     jne .notSecond
   332                              <1> ;Here we escape the second %. We cant enter here if we dont have space 
   333                              <1> ; at least 1 char, so store it immediately.
   334 000018BB AA                  <1>     stosb
   335 000018BC FE4501              <1>     inc byte [rbp + 1]
   336                              <1>     return
    13                              <2> %%_ret:
    14 000018BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> .notSecond:
   338                              <1> ;Now do the env var search. Start by scanning for the terminating
   339                              <1> ; % of the var name. If we strike a delimiter char first, 
   340                              <1> ; we stop the expansion for the envvar.
   341 000018C0 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   342 000018C3 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   343                              <1> .envVarLp:
   344 000018C6 AC                  <1>     lodsb
   345 000018C7 E87F2C0000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   346                              <1> .lpExit:
   347 000018CC 480F44F7            <1>     cmove rsi, rdi  ;If a delim found, return rsi to the char past the % sign.
   348 000018D0 480F44FB            <1>     cmove rdi, rbx  ;And return rdi to where it was beforehand :)
   349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018D4 74(BF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   350 000018D6 3C0D                <1>     cmp al, CR      ;If we are at the end of the line too, exit!
   351 000018D8 74F2                <1>     je .lpExit
   352 000018DA 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   353 000018DC 75E8                <1>     jne .envVarLp
   354                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   355 000018DE C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   356 000018E2 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   357                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   358 000018E3 E87D300000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   359 000018E8 480F42FB            <1>     cmovc rdi, rbx  ;Reset rdi here if no envvar found and exit!
   360 000018EC 7239                <1>     jc .exit
   361 000018EE 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   362 000018F1 B03D                <1>     mov al, "="
   363 000018F3 B9FFFFFFFF          <1>     mov ecx, -1
   364 000018F8 F2AE                <1>     repne scasb     ;Move rdi to the char past the equals sign
   365 000018FA 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000018FB 72(BF)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   367                              <1> 
   368 000018FD 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   369 000018FE 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   370 00001901 E8122C0000          <1>     call strlen     ;Get the string length of the envvar value in ecx
   371                              <1> .copyVar:
   372 00001906 FFC9                <1>     dec ecx         ;Drop 0 from count
   373 00001908 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   374 0000190B 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   375 0000190F 51                  <1>     push rcx
   376 00001910 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   377 00001912 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   378 00001918 59                  <1>     pop rcx
   379 00001919 7207                <1>     jb .noTrunc
   380 0000191B B97F000000          <1>     mov ecx, inLen - 1
   381 00001920 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   382                              <1> .noTrunc:
   383 00001922 004D01              <1>     add byte [rbp + 1], cl
   384 00001925 F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   385                              <1> .exit:
   386 00001927 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   387                              <1>     return
    13                              <2> %%_ret:
    14 00001928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> .repParm:
   389 00001929 2D30000000          <1>     sub eax, "0"
   390 0000192E 48FFC6              <1>     inc rsi ;Move the ptr past the replacable parameter value
   391 00001931 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   392 00001938 0FB7544313          <1>     movzx edx, word [rbx + batBlockHdr.wArgs + 2*rax]   ;Get off from cmdLine
   393 0000193D 81FAFFFF0000        <1>     cmp edx, 0FFFFh   ;If there is no var, copy nothing and exit!
   394                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001943 74(28)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   395 00001945 56                  <1>     push rsi        ;Save ptr to source of next chars 
   396 00001946 488D3413            <1>     lea rsi, qword [rbx + rdx]  ;Save ptr to head of string to copy in rsi
   397 0000194A 31C9                <1>     xor ecx, ecx
   398 0000194C FFC9                <1>     dec ecx
   399 0000194E B00D                <1>     mov al, CR      ;Now scan for the terminating CR
   400 00001950 4887F7              <1>     xchg rsi, rdi   ;Save dest ptr in rsi and point to string to cpy in rdi
   401 00001953 57                  <1>     push rdi        ;Save the head of the string for copy
   402 00001954 F2AE                <1>     repne scasb     ;Get the length of the string with terminating CR
   403 00001956 5F                  <1>     pop rdi         ;Point back to head of string
   404 00001957 F7D1                <1>     not ecx         ;Convert to one less than the length (drops the CR)
   405 00001959 EBAB                <1>     jmp short .copyVar
   406                              <1> 
   407                              <1> batCleanup:
   408                              <1> ;This function is called after the last line has been processed by the 
   409                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   410                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   411 0000195B 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
   412 00001962 4885DB              <1>     test rbx, rbx
   413 00001965 741C                <1>     jz .exit    ;Skip any references using this pointer
   414                              <1> ;Restore the state from the current block
   415 00001967 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   416 0000196A 88059DE6FFFF        <1>     mov byte [echoFlg], al
   417 00001970 8A430A              <1>     mov al, byte [rbx + batBlockHdr.bStatFlg]
   418 00001973 8805(1A000000)      <1>     mov byte [statFlg1], al
   419 00001979 E8C7260000          <1>     call forFree
   420 0000197E E818000000          <1>     call batFree
   421                              <1> .exit:
   422 00001983 E88AF5FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   423 00001988 48C705(1B000000)00- <1>     mov qword [bbPtr], 0 
   423 00001990 000000              <1>
   424 00001993 8025(1A000000)E7    <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   425                              <1>     return
    13                              <2> %%_ret:
    14 0000199A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> batFree:
   428                              <1> ;Frees the batch block in rbx
   429 0000199B 4150                <1>     push r8
   430 0000199D 4989D8              <1>     mov r8, rbx
   431 000019A0 B800490000          <1>     mov eax, 4900h
   432 000019A5 CD21                <1>     int 21h
   433 000019A7 4158                <1>     pop r8
   434                              <1>     return
    13                              <2> %%_ret:
    14 000019A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> batKillRedir:
   437                              <1> ;Used to kill redir state on entering a BAT file, FOR or CALL command
   438 000019AA E87FF6FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   439 000019AF E85EF5FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   440                              <1>     return
    13                              <2> %%_ret:
    14 000019B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> batOpen:
   443                              <1> ;Opens the batch file and returns the handle in ebx.
   444                              <1> ;Prints the "replace disk" string if file not found.
   445                              <1> ;
   446                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   447                              <1> ;Output: ebx = File handle for filespec in batFile.
   448                              <1> ;
   449                              <1> ;Funky behaviour worth noting:
   450                              <1> ; If a failure occurs in open, we keep prompting the user to 
   451                              <1> ; replace the disk. The only way out if the error is really bad is 
   452                              <1> ; via ^C which does all the cleanup we need. 
   453                              <1> ; Thus this never returns fail.
   454 000019B5 50                  <1>     push rax
   455 000019B6 52                  <1>     push rdx
   456 000019B7 488B05(1B000000)    <1>     mov rax, qword [bbPtr]
   457 000019BE 488D5027            <1>     lea rdx, qword [rax + batBlockHdr.cmdLine]
   458                              <1>     ;lea rdx, batFile
   459                              <1> .batOpen:
   460 000019C2 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   461 000019C7 CD21                <1>     int 21h
   462 000019C9 7315                <1>     jnc .batOpened
   463 000019CB 488D15BBE7FFFF      <1>     lea rdx, needBat
   464 000019D2 E81B290000          <1>     call printString
   465 000019D7 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   466 000019DC CD21                <1>     int 21h
   467 000019DE EBE2                <1>     jmp short .batOpen
   468                              <1> .batOpened:
   469 000019E0 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   470 000019E2 5A                  <1>     pop rdx
   471 000019E3 58                  <1>     pop rax
   472                              <1>     return
    13                              <2> %%_ret:
    14 000019E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> batClose:
   475                              <1> ;Close the handle in ebx.
   476 000019E5 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   477 000019EA CD21                <1>     int 21h         
   478                              <1>     return
    13                              <2> %%_ret:
    14 000019EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> 
   480                              <1> batReadChar:
   481                              <1> ;Reads a char. 
   482                              <1> ;Input: ebx = Handle to read char from.
   483                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   484                              <1> ;Output: 
   485                              <1> ;   CF=NC:
   486                              <1> ;       ZF=NZ: eax = 1. One char read.
   487                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   488                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   489                              <1> ;Clobbers: None.
   490 000019ED 51                  <1>     push rcx
   491 000019EE B901000000          <1>     mov ecx, 1
   492 000019F3 B8003F0000          <1>     mov eax, 3F00h
   493 000019F8 CD21                <1>     int 21h 
   494 000019FA 59                  <1>     pop rcx 
   495 000019FB 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   496 000019FD 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   497 000019FF 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   498 00001A01 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   499                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001A04 75(EC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   500                              <1> .eof:
   501 00001A06 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   502 00001A07 800D(1A000000)10    <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   503 00001A0E 9D                  <1>     popfq
   504                              <1>     return    
    13                              <2> %%_ret:
    14 00001A0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> .bad:
   506 00001A10 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   507 00001A12 F9                  <1>     stc             ;Never check it but ensure reset of CF.
   508 00001A13 EBF1                <1>     jmp short .eof  ;And set the status bit
    21                                  %include "./src/cmdErr.asm"
     1                              <1> ;This file contains the error printing routines
     2                              <1> ;Common Error Messages, jumped to to return from
     3                              <1> badDiskFull:
     4                              <1> ;This is a different error return, as this closes handles and prints
     5                              <1> ; disk full error and resets the command line!
     6 00001A15 488D1510E8FFFF      <1>     lea rdx, noSpace
     7 00001A1C 488D0D30EBFFFF      <1>     lea rcx, pipeErr
     8 00001A23 F60516E6FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
     9 00001A2A 747D                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    10 00001A2C 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    11 00001A30 E874000000          <1>     call badCmn     ;Print the string
    12 00001A35 E9CEF4FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    13                              <1> badForError:    
    14 00001A3A E806260000          <1>     call forFree        ;Free all FOR variables
    15 00001A3F 488D15F1EAFFFF      <1>     lea rdx, forNest
    16 00001A46 EB61                <1>     jmp short badCmn    
    17                              <1> badNoMemError:
    18 00001A48 488D15D7EBFFFF      <1>     lea rdx, noMemMsg
    19 00001A4F EB58                <1>     jmp short badCmn
    20                              <1> badSyntaxError:
    21 00001A51 488D15D0EAFFFF      <1>     lea rdx, syntaxErr
    22 00001A58 EB4F                <1>     jmp short badCmn
    23                              <1> badEnvSpaceError:
    24 00001A5A 488D15E5E7FFFF      <1>     lea rdx, noEnvSpace
    25 00001A61 EB46                <1>     jmp short badCmn
    26                              <1> badAccError:
    27 00001A63 488D156AEAFFFF      <1>     lea rdx, accDenMsg
    28 00001A6A EB3D                <1>     jmp short badCmn
    29                              <1> badParamError:
    30 00001A6C 488D15DFE8FFFF      <1>     lea rdx, badParm
    31 00001A73 EB34                <1>     jmp short badCmn
    32                              <1> badDriveError:
    33 00001A75 488D1599E8FFFF      <1>     lea rdx, badDrv
    34 00001A7C EB2B                <1>     jmp short badCmn
    35                              <1> badArgError:
    36 00001A7E 488D1567EBFFFF      <1>     lea rdx, badArgs
    37 00001A85 EB22                <1>     jmp short badCmn
    38                              <1> badFileError:
    39 00001A87 488D1542EBFFFF      <1>     lea rdx, badSpec
    40 00001A8E EB19                <1>     jmp short badCmn
    41                              <1> badDupFnf:
    42                              <1> ;Hybrid error message
    43 00001A90 488D156DE7FFFF      <1>     lea rdx, dupName
    44 00001A97 EB10                <1>     jmp short badCmn
    45                              <1> badFnf:
    46 00001A99 488D157BE7FFFF      <1>     lea rdx, fnfMsg
    47 00001AA0 EB07                <1>     jmp short badCmn
    48                              <1> badDirError:
    49 00001AA2 488D15AAE9FFFF      <1>     lea rdx, badDir
    50                              <1> badCmn:
    51 00001AA9 E944280000          <1>     jmp printString
    52                              <1> badCmdError:
    53 00001AAE 488D1534E7FFFF      <1>     lea rdx, badCmd
    54 00001AB5 EBF2                <1>     jmp short badCmn
    22                                  %include "./src/cmdFunc1.asm"
     1                              <1> ;Functions included with name and label:
     2                              <1> ;----------------------------------------------------
     3                              <1> ; LABEL     NAME
     4                              <1> ;----------------------------------------------------
     5                              <1> ; dir       DIR
     6                              <1> ; chdir     CHDIR(CD)
     7                              <1> ; mkdir     MKDIR(MD)
     8                              <1> ; rmdir     RMDIR(RD)
     9                              <1> ; copy      COPY
    10                              <1> ; erase     DEL(ERASE)
    11                              <1> ; date      DATE
    12                              <1> ; time      TIME
    13                              <1> ; ctty      CTTY
    14                              <1> ; cls       CLS
    15                              <1> ; break     BREAK
    16                              <1> ; verify    VERIFY
    17                              <1> ; rename    REN(AME)
    18                              <1> ; truename  TRUENAME
    19                              <1> ; volume    VOL
    20                              <1> ; version   VER
    21                              <1> ; memory    MEM
    22                              <1> ;----------------------------------------------------
    23                              <1> dir:
    24                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    25 00001AB7 C605(74050000)00    <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    26 00001ABE C605(75050000)00    <1>     mov byte [dirLineCtr], 0
    27 00001AC5 C705(76050000)0000- <1>     mov dword [dirFileCtr], 0
    27 00001ACD 0000                <1>
    28 00001ACF C605(7B050000)00    <1>     mov byte [dirSrchDir], 0
    29 00001AD6 66C705(70040000)00- <1>     mov word [searchSpec], 0
    29 00001ADE 00                  <1>
    30 00001ADF 488D3D(FD050000)    <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    31 00001AE6 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    32 00001AE9 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    32 00001AF2 3F                  <1>
    33 00001AF3 48894701            <1>     mov qword [rdi + fcb.filename], rax
    34 00001AF7 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    35                              <1>     ;Start by scanning for the switches
    36 00001AFE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    37 00001B05 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    38                              <1> .scanNew:
    39 00001B08 E8302A0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    40 00001B0D AC                  <1>     lodsb   ;Get this char
    41 00001B0E 3C0D                <1>     cmp al, CR
    42 00001B10 744D                <1>     je .scanDone
    43 00001B12 3A05F3E4FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    44 00001B18 7524                <1>     jne .notSwitch
    45 00001B1A AC                  <1>     lodsb   ;Get the next char
    46 00001B1B E8022A0000          <1>     call ucChar
    47 00001B20 3C57                <1>     cmp al, "W"
    48 00001B22 7509                <1>     jne .notWide
    49 00001B24 800D(74050000)01    <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    50 00001B2B EBDB                <1>     jmp short .scanNew
    51                              <1> .notWide:
    52 00001B2D 3C50                <1>     cmp al, "P"
    53 00001B2F 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    54 00001B35 800D(74050000)02    <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    55 00001B3C EBCA                <1>     jmp short .scanNew
    56                              <1> .notSwitch:
    57 00001B3E F605(74050000)04    <1>     test byte [dirFlags], dirFileType
    58 00001B45 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    59                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    60 00001B4B 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    61 00001B4E E8762B0000          <1>     call copyArgumentToSearchSpec   
    62 00001B53 48FFCE              <1>     dec rsi ;Point back to the terminator char
    63 00001B56 800D(74050000)04    <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    64 00001B5D EBA9                <1>     jmp short .scanNew
    65                              <1> .scanDone:
    66 00001B5F F605(74050000)04    <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    67 00001B66 7438                <1>     jz .currentDrv
    68                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    69 00001B68 488D35(70040000)    <1>     lea rsi, searchSpec
    70 00001B6F 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    71 00001B73 752B                <1>     jne .currentDrv
    72                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    73 00001B75 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    74 00001B7A 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    75 00001B7E B801290000          <1>     mov eax, 2901h   ;Parse filename
    76 00001B83 CD21                <1>     int 21h
    77 00001B85 3CFF                <1>     cmp al, -1
    78 00001B87 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    79                              <1>     ;Else the drive in the fcb is valid
    80 00001B8D 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
    81 00001B92 84C0                <1>     test al, al
    82 00001B94 740A                <1>     jz .currentDrv
    83 00001B96 FEC8                <1>     dec al  ;Convert to 0 based drive number
    84 00001B98 8805(7A050000)      <1>     mov byte [dirDrv], al
    85 00001B9E EB0B                <1>     jmp short .dirPrintVol
    86                              <1> .currentDrv:
    87 00001BA0 E855290000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
    88 00001BA5 8805(7A050000)      <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
    89                              <1> .dirPrintVol:
    90 00001BAB 488D35(70040000)    <1>     lea rsi, searchSpec
    91                              <1> ;Now construct the path on dirSrchDir.
    92 00001BB2 488D3D(7B050000)    <1>     lea rdi, dirSrchDir
    93 00001BB9 0FB605(7A050000)    <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
    94 00001BC0 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
    95 00001BC2 0441                <1>     add al, "A" ;Turn into a letter
    96 00001BC4 B43A                <1>     mov ah, ":"
    97 00001BC6 66AB                <1>     stosw   ;Store X: into the search path
    98 00001BC8 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
    99 00001BCD CD2F                <1>     int 2fh
   100 00001BCF 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   101 00001BD1 0F849EFEFFFF        <1>     je badDriveError
   102                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   103 00001BD7 8A052DE4FFFF        <1>     mov al, byte [pathSep]
   104 00001BDD 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   105 00001BDF 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   106 00001BE1 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   107 00001BE2 FEC2                <1>     inc dl  ;Increment by 1
   108 00001BE4 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   109 00001BE7 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   110 00001BEC CD21                <1>     int 21h
   111 00001BEE 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   112                              <1>     ;rsi points to the first char in the provided path.
   113                              <1>     ;rdi points to the first char of the cwd.
   114 00001BF1 31C0                <1>     xor eax, eax
   115                              <1> .goToEndOfCwd:
   116                              <1> ;Move to the end of the string, could use repne?
   117 00001BF3 3807                <1>     cmp byte [rdi], al
   118 00001BF5 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   119 00001BF7 48FFC7              <1>     inc rdi
   120 00001BFA EBF7                <1>     jmp short .goToEndOfCwd
   121                              <1> .prepCopy:
   122 00001BFC 8A0508E4FFFF        <1>     mov al, byte [pathSep]
   123 00001C02 3806                <1>     cmp byte [rsi], al
   124 00001C04 7412                <1>     je .copyPathLoop
   125 00001C06 B43A                <1>     mov ah, ":"
   126 00001C08 86C4                <1>     xchg al, ah
   127 00001C0A 663947FE            <1>     cmp word [rdi - 2], ax
   128 00001C0E 7408                <1>     je .copyPathLoop
   129 00001C10 88E0                <1>     mov al, ah
   130 00001C12 3847FF              <1>     cmp byte [rdi - 1], al
   131 00001C15 7401                <1>     je .copyPathLoop
   132 00001C17 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   133                              <1> .copyPathLoop:
   134 00001C18 AC                  <1>     lodsb
   135 00001C19 3A05EBE3FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   136 00001C1F 7509                <1>     jne .checkDot  ;If not, store it
   137                              <1> .lpPathseps:
   138 00001C21 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   139 00001C23 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   140 00001C25 48FFC6              <1>     inc rsi
   141 00001C28 EBF7                <1>     jmp short .lpPathseps
   142                              <1> .checkDot:
   143 00001C2A 3C2E                <1>     cmp al, "."
   144 00001C2C 7407                <1>     je .dots
   145                              <1> .store:
   146 00001C2E AA                  <1>     stosb
   147 00001C2F 84C0                <1>     test al, al ;Was the char we just copied a null?
   148 00001C31 7472                <1>     jz .exitPathCopy
   149 00001C33 EBE3                <1>     jmp short .copyPathLoop
   150                              <1> .dots:
   151                              <1>     ;Here handle dot and dot dot
   152                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   153                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   154                              <1>     ; by 1. If it is null, go to top of loop.
   155                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   156 00001C35 8A25CFE3FFFF        <1>     mov ah, byte [pathSep]
   157 00001C3B 3867FF              <1>     cmp byte [rdi - 1], ah  
   158 00001C3E 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   159 00001C40 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   160 00001C42 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   161 00001C45 7413                <1>     je .twoDot
   162                              <1>     ;This is only a "current dir" when next char is pathsep or null
   163 00001C47 3A25BDE3FFFF        <1>     cmp ah, byte [pathSep]
   164 00001C4D 7406                <1>     je .skipThisPathsep
   165 00001C4F 84E4                <1>     test ah, ah
   166 00001C51 74C5                <1>     jz .copyPathLoop
   167 00001C53 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   168                              <1> .skipThisPathsep:
   169                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   170 00001C55 48FFC6              <1>     inc rsi ;Point to the pathsep
   171 00001C58 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   172                              <1> .twoDot:
   173                              <1>     ;Woohoo, this works!
   174 00001C5A 48FFC6              <1>     inc rsi ;Move past the second dot
   175 00001C5D 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   176 00001C5F 3A25A5E3FFFF        <1>     cmp ah, byte [pathSep]
   177 00001C65 7408                <1>     je .tdOk
   178 00001C67 84E4                <1>     test ah, ah
   179 00001C69 0F85FDFDFFFF        <1>     jne badParamError
   180                              <1> .tdOk:
   181 00001C6F 8A0595E3FFFF        <1>     mov al, byte byte [pathSep]
   182 00001C75 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   183 00001C79 0F84EDFDFFFF        <1>     je badParamError
   184 00001C7F 4881EF02000000      <1>     sub rdi, 2
   185 00001C86 31C9                <1>     xor ecx, ecx
   186 00001C88 FFC9                <1>     dec ecx
   187 00001C8A FD                  <1>     std
   188 00001C8B F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   189 00001C8D FC                  <1>     cld
   190 00001C8E 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   191 00001C95 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   192 00001C97 0F847BFFFFFF        <1>     jz .copyPathLoop
   193 00001C9D 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   194 00001CA0 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   195                              <1> .exitPathCopy:
   196                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   197 00001CA5 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   198 00001CAC 8A0558E3FFFF        <1>     mov al, byte [pathSep]
   199 00001CB2 B43A                <1>     mov ah, ":"
   200 00001CB4 86C4                <1>     xchg al, ah
   201 00001CB6 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   202 00001CBA 7409                <1>     je .skipOverwrite
   203 00001CBC 88E0                <1>     mov al, ah
   204 00001CBE 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   205 00001CC0 7503                <1>     jne .skipOverwrite
   206 00001CC2 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   207                              <1> .skipOverwrite:
   208 00001CC5 488D35(7B050000)    <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   209 00001CCC 4889F7              <1>     mov rdi, rsi
   210 00001CCF B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   211 00001CD4 CD2F                <1>     int 2fh
   212 00001CD6 E8FB290000          <1>     call scanForWildcards
   213 00001CDB 742D                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   214 00001CDD 4889F2              <1>     mov rdx, rsi
   215 00001CE0 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   216 00001CE4 7424                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   217                              <1> .notNull:
   218 00001CE6 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   219 00001CEB B8004E0000          <1>     mov eax, 4E00h ;Find first
   220 00001CF0 CD21                <1>     int 21h
   221 00001CF2 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   222                              <1> ;Now we have searched for the file, is a directory?
   223 00001CF4 F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   224 00001CFB 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   225                              <1>     ;Here we are searching IN a directory. Default search pattern!
   226 00001CFD 31C0                <1>     xor eax, eax
   227 00001CFF 31C9                <1>     xor ecx, ecx
   228 00001D01 FFC9                <1>     dec ecx
   229 00001D03 F2AE                <1>     repne scasb
   230 00001D05 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   231 00001D08 EB40                <1>     jmp short .wcDefaultSearch
   232                              <1> .wcSearchPattern:
   233                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   234                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   235 00001D0A 31C0                <1>     xor eax, eax
   236 00001D0C 31C9                <1>     xor ecx, ecx
   237 00001D0E FFC9                <1>     dec ecx
   238 00001D10 F2AE                <1>     repne scasb ;Scan forwards
   239                              <1>     ;Here rdi points past the null at the end
   240 00001D12 8A05F2E2FFFF        <1>     mov al, byte [pathSep]
   241 00001D18 31C9                <1>     xor ecx, ecx
   242 00001D1A FFC9                <1>     dec ecx
   243 00001D1C FD                  <1>     std ;Search backwards
   244 00001D1D F2AE                <1>     repne scasb
   245 00001D1F FC                  <1>     cld ;Search forwards again
   246 00001D20 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   247 00001D23 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   248 00001D27 7503                <1>     jne .wcsp1
   249 00001D29 48FFC7              <1>     inc rdi ;Go one char forwards
   250                              <1> .wcsp1:
   251                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   252 00001D2C 57                  <1>     push rdi
   253 00001D2D 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   254 00001D2F 7503                <1>     jne .wcsp2
   255 00001D31 48FFC7              <1>     inc rdi
   256                              <1> .wcsp2:
   257 00001D34 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   258 00001D37 488D3D(FD050000)    <1>     lea rdi, dirSrchFCB
   259 00001D3E B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   260 00001D43 CD21                <1>     int 21h
   261 00001D45 5F                  <1>     pop rdi
   262 00001D46 31C0                <1>     xor eax, eax
   263 00001D48 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   264                              <1> .wcDefaultSearch:
   265 00001D4A 0FB605(7A050000)    <1>     movzx eax, byte [dirDrv] 
   266 00001D51 E82B150000          <1>     call volume.dirEP
   267 00001D56 488D155EE7FFFF      <1>     lea rdx, dirMain    ;Print message intro
   268 00001D5D B409                <1>     mov ah, 09h
   269 00001D5F CD21                <1>     int 21h
   270 00001D61 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   271 00001D64 488D15(7B050000)    <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   272 00001D6B B409                <1>     mov ah, 09h
   273 00001D6D CD21                <1>     int 21h
   274 00001D6F C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   275 00001D72 488D15F8E3FFFF      <1>     lea rdx, crlf2
   276 00001D79 B409                <1>     mov ah, 09h
   277 00001D7B CD21                <1>     int 21h
   278                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   279                              <1> ;rdi points to the terminating null
   280 00001D7D 8A0587E2FFFF        <1>     mov al, byte [pathSep]
   281 00001D83 3847FF              <1>     cmp byte [rdi - 1], al
   282 00001D86 7403                <1>     je .root
   283 00001D88 48FFC7              <1>     inc rdi
   284                              <1> .root:
   285 00001D8B 48FFCF              <1>     dec rdi ;Point back to the pathsep
   286 00001D8E AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   287 00001D8F 488D35(FE050000)    <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   288 00001D96 E87D280000          <1>     call FCBToAsciiz    ;Terminates for free
   289 00001D9B E801000000          <1>     call .searchForFile
   290                              <1>     return
    13                              <2> %%_ret:
    14 00001DA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> .searchForFile:
   293 00001DA1 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   294 00001DA6 488D15(7B050000)    <1>     lea rdx, dirSrchDir
   295 00001DAD B8004E0000          <1>     mov eax, 4E00h ;Find first
   296 00001DB2 CD21                <1>     int 21h
   297 00001DB4 720B                <1>     jc .dirNoMoreFiles
   298                              <1> .findNext:
   299 00001DB6 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   300 00001DBB B44F                <1>     mov ah, 4Fh
   301 00001DBD CD21                <1>     int 21h
   302 00001DBF 73F5                <1>     jnc .findNext 
   303                              <1> .dirNoMoreFiles:
   304 00001DC1 F605(74050000)01    <1>     test byte [dirFlags], dirWideType
   305 00001DC8 740B                <1>     jz .dirNoEndNewLine
   306 00001DCA 488D159DE3FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   307 00001DD1 B409                <1>     mov ah, 09h
   308 00001DD3 CD21                <1>     int 21h
   309                              <1> .dirNoEndNewLine:
   310                              <1>     ;Now we print the number of files and the number of bytes on the disk
   311 00001DD5 F705(76050000)FFFF- <1>     test dword [dirFileCtr], -1
   311 00001DDD FFFF                <1>
   312 00001DDF 750D                <1>     jnz .filesFound
   313                              <1>     ;Else print File not found and exit!
   314 00001DE1 488D1533E4FFFF      <1>     lea rdx, fnfMsg
   315 00001DE8 E805250000          <1>     call printString
   316                              <1>     return
    13                              <2> %%_ret:
    14 00001DED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> .filesFound:
   318 00001DEE 8B05(76050000)      <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   319 00001DF4 B909000000          <1>     mov ecx, 9
   320 00001DF9 E8EC280000          <1>     call printDecimalValLB
   321 00001DFE 488D15EFE4FFFF      <1>     lea rdx, dirOk
   322 00001E05 B409                <1>     mov ah, 09h
   323 00001E07 CD21                <1>     int 21h
   324 00001E09 B800360000          <1>     mov eax, 3600h ;Get disk info
   325 00001E0E 8A15(7A050000)      <1>     mov dl, byte [dirDrv]
   326 00001E14 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   327 00001E16 CD21                <1>     int 21h ;Get disk free space info
   328 00001E18 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   329 00001E1B 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   330 00001E1E 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   331 00001E20 F7E1                <1>     mul ecx ;Get bytes per cluster
   332 00001E22 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   333                              <1>     ;rax now has the number of free bytes on the disk
   334 00001E25 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   335 00001E2A E8BB280000          <1>     call printDecimalValLB
   336 00001E2F 488D15C8E4FFFF      <1>     lea rdx, bytesOk
   337 00001E36 B409                <1>     mov ah, 09h
   338 00001E38 CD21                <1>     int 21h
   339                              <1>     return
    13                              <2> %%_ret:
    14 00001E3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> 
   341                              <1> .dirPrintFileData:
   342                              <1> ;Use cmdFcb to build the file name with space
   343                              <1> ;Start by print the name (same for both cases)
   344                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   345 00001E3B F605(0B010000)46    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   346                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00001E42 75(3A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00001E44 488D35(14010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   348 00001E4B 488D3D(E6000000)    <1>     lea rdi, cmdFcb
   349 00001E52 E853270000          <1>     call asciiFilenameToFCB
   350 00001E57 488D15(E6000000)    <1>     lea rdx, cmdFcb
   351 00001E5E B908000000          <1>     mov ecx, 8  ;Print 8 chars
   352 00001E63 BB01000000          <1>     mov ebx, 1  ;STDOUT
   353 00001E68 B440                <1>     mov ah, 40h ;Write handle
   354 00001E6A CD21                <1>     int 21h
   355 00001E6C 52                  <1>     push rdx
   356 00001E6D B220                <1>     mov dl, " "
   357 00001E6F B402                <1>     mov ah, 02h ;Print char
   358 00001E71 CD21                <1>     int 21h
   359 00001E73 5A                  <1>     pop rdx
   360 00001E74 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   361 00001E7B B903000000          <1>     mov ecx, 3  ;Print three chars
   362 00001E80 BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 00001E85 B440                <1>     mov ah, 40h ;Write handle
   364 00001E87 CD21                <1>     int 21h
   365 00001E89 F605(74050000)01    <1>     test byte [dirFlags], dirWideType
   366 00001E90 757B                <1>     jnz .widePrint
   367                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   368                              <1>     ;Now check if a DIR
   369 00001E92 F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   370 00001E99 7422                <1>     jz .dirPrintNotDir
   371 00001E9B 488D156AE4FFFF      <1>     lea rdx, dirLbl
   372 00001EA2 B409                <1>     mov ah, 09h
   373 00001EA4 CD21                <1>     int 21h
   374 00001EA6 488D1512E9FFFF      <1>     lea rdx, threeSpc
   375 00001EAD B409                <1>     mov ah, 09h
   376 00001EAF CD21                <1>     int 21h
   377 00001EB1 B409                <1>     mov ah, 09h
   378 00001EB3 CD21                <1>     int 21h
   379 00001EB5 B220                <1>     mov dl, SPC
   380 00001EB7 B402                <1>     mov ah, 02h
   381 00001EB9 CD21                <1>     int 21h
   382 00001EBB EB1C                <1>     jmp short .dirPrintFileDT
   383                              <1> .dirPrintNotDir:
   384                              <1> ;Here we print the file size
   385 00001EBD B220                <1>     mov dl, " "
   386 00001EBF B402                <1>     mov ah, 02h
   387 00001EC1 CD21                <1>     int 21h
   388 00001EC3 8B05(10010000)      <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   389 00001EC9 B90D000000          <1>     mov ecx, 13
   390 00001ECE E817280000          <1>     call printDecimalValLB
   391 00001ED3 B220                <1>     mov dl, SPC
   392 00001ED5 B402                <1>     mov ah, 02h
   393 00001ED7 CD21                <1>     int 21h
   394                              <1> .dirPrintFileDT:
   395 00001ED9 0FB705(0E010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   396 00001EE0 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   397 00001EE2 E8D5210000          <1>     call printDate
   398 00001EE7 488D15D1E8FFFF      <1>     lea rdx, threeSpc
   399 00001EEE B409                <1>     mov ah, 09h
   400 00001EF0 CD21                <1>     int 21h
   401 00001EF2 0FB705(0C010000)    <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   402 00001EF9 E8E4220000          <1>     call printTime
   403 00001EFE 488D1569E2FFFF      <1>     lea rdx, crlf
   404 00001F05 B409                <1>     mov ah, 09h
   405 00001F07 CD21                <1>     int 21h
   406 00001F09 B017                <1>     mov al, 23  ;23 lines... for the next bit
   407 00001F0B EB0D                <1>     jmp short .dirPrintNameExit
   408                              <1> .widePrint:
   409                              <1> ;If /W, print name space ext space space space space
   410 00001F0D 488D15A6E8FFFF      <1>     lea rdx, fourSpc
   411 00001F14 B409                <1>     mov ah, 09h ;Print string
   412 00001F16 CD21                <1>     int 21h
   413 00001F18 B073                <1>     mov al, 5*23    ;5 entries per line...
   414                              <1> .dirPrintNameExit:
   415 00001F1A FF05(76050000)      <1>     inc dword [dirFileCtr]   ;Increment file counter
   416 00001F20 FE05(75050000)      <1>     inc byte [dirLineCtr]
   417 00001F26 3805(75050000)      <1>     cmp byte [dirLineCtr], al
   418                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F2C 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F2E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   419 00001F2F F605(74050000)02    <1>     test byte [dirFlags], dirPageType
   420 00001F36 741A                <1>     jz .dirPrnNoPag
   421 00001F38 488D15F4E3FFFF      <1>     lea rdx, pauseMes
   422 00001F3F B409                <1>     mov ah, 09h
   423 00001F41 CD21                <1>     int 21h
   424 00001F43 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   425 00001F45 CD21                <1>     int 21h
   426 00001F47 488D1520E2FFFF      <1>     lea rdx, crlf   ;Force new line
   427 00001F4E B409                <1>     mov ah, 09h
   428 00001F50 CD21                <1>     int 21h
   429                              <1> .dirPrnNoPag:
   430 00001F52 C605(75050000)00    <1>     mov byte [dirLineCtr], 0
   431                              <1>     return
    13                              <2> %%_ret:
    14 00001F59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> chdir:
   434 00001F5A F605EAE0FFFFFF      <1>     test byte [arg1Flg], -1
   435 00001F61 754D                <1>     jnz .changeDir
   436                              <1>     ;Print CWD
   437                              <1> .printCWD:
   438 00001F63 E8FF230000          <1>     call putCWDInPrompt ;Exactly the same procedure
   439 00001F68 E87E230000          <1>     call printCRLF
   440                              <1>     return
    13                              <2> %%_ret:
    14 00001F6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> .printDiskCWD:
   442                              <1> ;Print CWD for a specified drive
   443 00001F6E 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   444 00001F72 88D0                <1>     mov al, dl
   445 00001F74 0440                <1>     add al, "@" ;Get the UC letter
   446 00001F76 B43A                <1>     mov ah, ":"
   447 00001F78 488D3D(70040000)    <1>     lea rdi, searchSpec
   448 00001F7F 66AB                <1>     stosw   ;Store X:, rdi+=2
   449 00001F81 8A0583E0FFFF        <1>     mov al, byte [pathSep]
   450 00001F87 AA                  <1>     stosb   ;Store pathSep, inc rdi
   451 00001F88 B447                <1>     mov ah, 47h ;Get Current Working Directory
   452 00001F8A 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   453 00001F8D CD21                <1>     int 21h
   454 00001F8F E884250000          <1>     call strlen
   455 00001F94 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   456 00001F9A B440                <1>     mov ah, 40h ;Write to handle
   457 00001F9C BB01000000          <1>     mov ebx, 1  ;STDOUT
   458 00001FA1 488D15(70040000)    <1>     lea rdx, searchSpec
   459 00001FA8 CD21                <1>     int 21h
   460 00001FAA E83C230000          <1>     call printCRLF
   461                              <1>     return
    13                              <2> %%_ret:
    14 00001FAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> .changeDir:
   463 00001FB0 8A0597E0FFFF        <1>     mov al, byte [arg1FCBret]
   464 00001FB6 3CFF                <1>     cmp al, -1 
   465 00001FB8 0F84B7FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   466 00001FBE E8EE260000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   467 00001FC3 488D15(70040000)    <1>     lea rdx, searchSpec
   468 00001FCA B43B                <1>     mov ah, 3Bh ;CHDIR
   469 00001FCC CD21                <1>     int 21h
   470 00001FCE 0F82CEFAFFFF        <1>     jc badDirError
   471                              <1>     return
    13                              <2> %%_ret:
    14 00001FD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> mkdir:
   474 00001FD5 F6056FE0FFFFFF      <1>     test byte [arg1Flg], -1
   475 00001FDC 0F849CFAFFFF        <1>     jz badArgError
   476 00001FE2 F60565E0FFFFFF      <1>     test byte [arg2Flg], -1
   477 00001FE9 0F858FFAFFFF        <1>     jnz badArgError
   478                              <1>     ;We have exactly one argument
   479 00001FEF 8A0558E0FFFF        <1>     mov al, byte [arg1FCBret]
   480 00001FF5 3CFF                <1>     cmp al, -1 
   481 00001FF7 0F8478FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   482 00001FFD E8AF260000          <1>     call buildCommandPath
   483 00002002 488D15(70040000)    <1>     lea rdx, searchSpec
   484 00002009 B800390000          <1>     mov eax, 3900h  ;MKDIR
   485 0000200E CD21                <1>     int 21h
   486                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002010 73(D4)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487                              <1> .badMake:   ;Else, bad make
   488 00002012 488D154EE4FFFF      <1>     lea rdx, badMD
   489 00002019 E9D4220000          <1>     jmp printString
   490                              <1> 
   491                              <1> rmdir:
   492 0000201E F60526E0FFFFFF      <1>     test byte [arg1Flg], -1
   493 00002025 0F8453FAFFFF        <1>     jz badArgError
   494 0000202B F6051CE0FFFFFF      <1>     test byte [arg2Flg], -1
   495 00002032 0F8546FAFFFF        <1>     jnz badArgError
   496                              <1>     ;We have exactly one argument
   497 00002038 8A050FE0FFFF        <1>     mov al, byte [arg1FCBret]
   498 0000203E 3CFF                <1>     cmp al, -1 
   499 00002040 0F842FFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   500 00002046 E866260000          <1>     call buildCommandPath
   501 0000204B 488D15(70040000)    <1>     lea rdx, searchSpec
   502 00002052 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   503 00002057 CD21                <1>     int 21h
   504                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002059 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000205B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   505                              <1> .badRemove:   ;Else, bad make
   506 0000205C 488D1521E4FFFF      <1>     lea rdx, badRD
   507 00002063 E98A220000          <1>     jmp printString
   508                              <1> 
   509                              <1> copy:
   510 00002068 66C705(41070000)FF- <1>     mov word [sourceHdl], -1
   510 00002070 FF                  <1>
   511 00002071 66C705(43070000)FF- <1>     mov word [destHdl], -1
   511 00002079 FF                  <1>
   512 0000207A 66C705(45070000)FF- <1>     mov word [srcHdlInfo], -1
   512 00002082 FF                  <1>
   513 00002083 C605(55070000)00    <1>     mov byte [bCpFlg], 0    ;State flag!
   514 0000208A 48C705(47070000)00- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   514 00002092 000000              <1>
   515 00002095 66C705(4F070000)00- <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   515 0000209D 00                  <1>
   516 0000209E C705(51070000)0000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   516 000020A6 0000                <1>
   517 000020A8 C605(11060000)00    <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   518 000020AF C605(93060000)00    <1>     mov byte [destSpec], 0
   519 000020B6 48C705(15070000)00- <1>     mov qword [srcPtr], 0
   519 000020BE 000000              <1>
   520 000020C1 48C705(1D070000)00- <1>     mov qword [destPtr], 0
   520 000020C9 000000              <1>
   521 000020CC B800540000          <1>     mov eax, 5400h  ;Get verify flag
   522 000020D1 CD21                <1>     int 21h
   523 000020D3 8805(40070000)      <1>     mov byte [verifyFlg], al    ;Save verify flag!
   524                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   525                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   526                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   527 000020D9 B800520000          <1>     mov eax, 5200h
   528 000020DE CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   529 000020E0 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   530 000020E4 89CB                <1>     mov ebx, ecx
   531 000020E6 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   532 000020E9 B800480000          <1>     mov eax, 4800h
   533 000020EE CD21                <1>     int 21h
   534 000020F0 731E                <1>     jnc .bufOk
   535 000020F2 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   536 000020F4 750C                <1>     jnz .okSize
   537                              <1> .badAlloc:
   538                              <1> ;Not enough memory error!
   539 000020F6 488D15DAE1FFFF      <1>     lea rdx, cpNoMem
   540 000020FD E9A7F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   541                              <1> .okSize:
   542 00002102 89D9                <1>     mov ecx, ebx    
   543 00002104 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   544 00002107 B800480000          <1>     mov eax, 4800h
   545 0000210C CD21                <1>     int 21h
   546 0000210E 72E6                <1>     jc .badAlloc
   547                              <1> .bufOk:
   548 00002110 488905(47070000)    <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   549 00002117 66890D(4F070000)    <1>     mov word [wCpBufSz], cx     ;Save buffer size
   550 0000211E E8A6070000          <1>     call copyParse      ;Do Mode 3 prescan
   551 00002123 0F8228F9FFFF        <1>     jc badSyntaxError
   552 00002129 85C9                <1>     test ecx, ecx   
   553 0000212B 0F8420F9FFFF        <1>     jz badSyntaxError
   554                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   555 00002131 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   556 00002138 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   557 00002140 FFC9                <1>     dec ecx ;Turn into offset
   558 00002142 4801CE              <1>     add rsi, rcx
   559 00002145 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   560 00002147 FD                  <1>     std ;Go in reverse
   561                              <1> .sd:    ;At this point, any switch chars affect destination!
   562 00002148 E8F0230000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   563 0000214D 8A05B8DEFFFF        <1>     mov al, byte [switchChar]
   564 00002153 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   565 00002156 7509                <1>     jne .noSwitch
   566                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   567 00002158 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   568 0000215C 50                  <1>     push rax        ;Push the switchchar
   569 0000215D FFC2                <1>     inc edx         ;Inc the counter
   570 0000215F EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   571                              <1> .noSwitch:
   572                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   573 00002161 85D2                <1>     test edx, edx
   574 00002163 7412                <1>     jz .noDestSwitch
   575                              <1> .ns1:
   576 00002165 58                  <1>     pop rax ;Pop the switch char
   577 00002166 B304                <1>     mov bl, ascDes
   578 00002168 E870040000          <1>     call .doSwitchRev
   579 0000216D 0F85DB040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   580 00002173 FFCA                <1>     dec edx
   581 00002175 75EE                <1>     jnz .ns1
   582                              <1> .noDestSwitch:
   583                              <1> ;Now search for the starting delimiter or start of line
   584 00002177 48FFC6              <1>     inc rsi ;Go to the last char in the path
   585                              <1> .noSwitchLp:
   586 0000217A AC                  <1>     lodsb   ;Get char at rsi, go back a char
   587 0000217B E8CB230000          <1>     call isALdelimiter
   588 00002180 7412                <1>     je .destFnd
   589 00002182 8A0583DEFFFF        <1>     mov al, byte [switchChar]
   590 00002188 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   591 0000218B 7404                <1>     je .se  ;Jump if so!
   592 0000218D FFC9                <1>     dec ecx ;One less char left to search
   593 0000218F EBE9                <1>     jmp short .noSwitchLp
   594                              <1> .se:
   595 00002191 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   596                              <1> .destFnd:
   597 00002194 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   598 0000219B FC                  <1>     cld 
   599 0000219C 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   600 0000219F 488D3D(93060000)    <1>     lea rdi, destSpec
   601 000021A6 57                  <1>     push rdi
   602 000021A7 E8C2240000          <1>     call cpDelimPathToBufz ;Copy this over!   
   603 000021AC 5F                  <1>     pop rdi
   604 000021AD E842240000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   605 000021B2 48893D(1D070000)    <1>     mov qword [destPtr], rdi
   606 000021B9 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   607 000021BD 7517                <1>     jne .destEnd    ;Dont worry
   608 000021BF 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   609 000021C1 E85C230000          <1>     call ucChar             ;Make sure we UC the drive letter
   610 000021C6 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   611 000021C8 4881C702000000      <1>     add rdi, 2              ;Point to this null
   612 000021CF 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Store chars over the null
   613                              <1> .destEnd:
   614                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   615 000021D6 8025(55070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   616 000021DD 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   617                              <1> .srcLp: ;Jump to with rsi pointing to portion of the cmdline to scan
   618 000021E4 E854230000          <1>     call skipDelimiters 
   619 000021E9 8A051CDEFFFF        <1>     mov al, byte [switchChar]
   620 000021EF 3806                <1>     cmp byte [rsi], al
   621 000021F1 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   622                              <1>     ;rsi points to switch after switchchar
   623 000021F3 B301                <1>     mov bl, ascSrc
   624 000021F5 E8DD030000          <1>     call .doSwitch
   625 000021FA 0F854E040000        <1>     jnz .badExit
   626 00002200 4881C602000000      <1>     add rsi, 2
   627 00002207 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   628                              <1> .noSrcSw:
   629 00002209 4839F5              <1>     cmp rbp, rsi
   630 0000220C 7527                <1>     jne .noSameSrcDest
   631                              <1>     ;Here if the destination we specified earlier is the same as the source
   632                              <1>     ;This means, the actual destination is the current default drive
   633                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   634 0000220E E8E7220000          <1>     call getCurrentDrive    ;Get current drive
   635 00002213 0441                <1>     add al, "A"             ;Turn into a drive letter
   636 00002215 B43A                <1>     mov ah, ":"
   637 00002217 0FB7C0              <1>     movzx eax, ax
   638 0000221A 8905(93060000)      <1>     mov dword [destSpec], eax   ;Add a default null terminator
   639 00002220 488D3D(95060000)    <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   640 00002227 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   641 0000222E 800D(55070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   642                              <1> .noSameSrcDest:
   643 00002235 488D3D(11060000)    <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   644 0000223C 57                  <1>     push rdi
   645 0000223D E82C240000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   646 00002242 5F                  <1>     pop rdi
   647                              <1>     ;Now go forwards and pick up any more switches.
   648 00002243 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   649                              <1> .swSrcSwPost:
   650 00002246 E8F2220000          <1>     call skipDelimiters ;Skips trailing delimiters
   651 0000224B 8A05BADDFFFF        <1>     mov al, byte [switchChar]
   652 00002251 3806                <1>     cmp byte [rsi], al
   653 00002253 7516                <1>     jne .swSrcSwPostExit
   654                              <1>     ;rsi points to switch after switchchar
   655 00002255 B301                <1>     mov bl, ascSrc
   656 00002257 E87B030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   657 0000225C 0F85EC030000        <1>     jnz .badExit
   658 00002262 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   659 00002269 EBDB                <1>     jmp short .swSrcSwPost
   660                              <1> .swSrcSwPostExit:
   661 0000226B 4889FE              <1>     mov rsi, rdi
   662 0000226E E863240000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   663 00002273 7507                <1>     jnz .oneCp
   664 00002275 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   665                              <1> .oneCp:
   666 0000227C E873230000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   667 00002281 48893D(15070000)    <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   668 00002288 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   669 0000228C 7517                <1>     jne .srcEnd             ;Dont worry
   670 0000228E 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   671 00002290 E88D220000          <1>     call ucChar             ;Make sure we UC the drive letter
   672 00002295 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   673 00002297 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   674 0000229E 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   675                              <1> .srcEnd:
   676                              <1> ;Now uppercase both paths
   677 000022A5 488D35(11060000)    <1>     lea rsi, srcSpec
   678 000022AC E87D220000          <1>     call normalisePath
   679 000022B1 488D3D(93060000)    <1>     lea rdi, destSpec
   680 000022B8 E871220000          <1>     call normalisePath
   681 000022BD 57                  <1>     push rdi
   682 000022BE F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy
   683 000022C5 7412                <1>     jz .notm3
   684                              <1> ;Now we scan for a + in the src spc and if one is found, overwrite it with a <NUL>
   685 000022C7 4889F7              <1>     mov rdi, rsi    ;Get the src string in rdi
   686 000022CA E849220000          <1>     call strlen 
   687 000022CF B02B                <1>     mov al, "+"
   688 000022D1 F2AE                <1>     repne scasb 
   689 000022D3 7504                <1>     jne .notm3  ;If not equal, exit
   690 000022D5 C647FF00            <1>     mov byte [rdi - 1], 0
   691                              <1> .notm3:
   692                              <1> ;Now establish if the source is a directory or not!
   693 000022D9 5F                  <1>     pop rdi ;Get back the destspec ptr
   694 000022DA F605(55070000)08    <1>     test byte [bCpFlg], wcSrc
   695 000022E1 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   696 000022E3 488D15(11060000)    <1>     lea rdx, srcSpec
   697 000022EA 4889D6              <1>     mov rsi, rdx
   698 000022ED 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   699 000022EF 80FC3A              <1>     cmp ah, ":"
   700 000022F2 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   701 000022F4 AC                  <1>     lodsb           ;Get char past :
   702 000022F5 84C0                <1>     test al, al     ;Is byte three nul?
   703 000022F7 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   704 000022F9 3A050BDDFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   705 000022FF 7515                <1>     jne .isSrcDir
   706 00002301 AC                  <1>     lodsb           ;Get char past char past "X:\"
   707 00002302 84C0                <1>     test al, al     
   708 00002304 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   709                              <1> .srcStorWc:
   710                              <1> ;rsi points past the char to store the WC at
   711 00002306 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   712 0000230D 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   713 00002314 EB44                <1>     jmp short .checkDestDir
   714                              <1> .isSrcDir:
   715 00002316 B910000000          <1>     mov ecx, dirDirectory
   716 0000231B B8004E0000          <1>     mov eax, 4E00h
   717 00002320 CD21                <1>     int 21h
   718 00002322 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   719                              <1>     ;Was the file we found actually a directory?
   720 00002324 803D(0B010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   721 0000232B 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   722 0000232D 4889D7              <1>     mov rdi, rdx
   723 00002330 E8E3210000          <1>     call strlen
   724 00002335 FFC9                <1>     dec ecx
   725 00002337 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   726 0000233A 8A05CADCFFFF        <1>     mov al, byte [pathSep]
   727 00002340 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   728 00002343 7401                <1>     je .srctpsp
   729 00002345 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   730                              <1> .srctpsp:
   731 00002346 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   732 0000234D B82A2E2A00          <1>     mov eax, "*.*"
   733 00002352 AB                  <1>     stosd   ;Store the WC with terminating nul!
   734 00002353 800D(55070000)08    <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   735                              <1> .checkDestDir:
   736                              <1> ;Now establish if destination is a directory or not!
   737 0000235A F605(55070000)20    <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   738 00002361 0F8562010000        <1>     jnz .mod1
   739 00002367 488D35(93060000)    <1>     lea rsi, destSpec
   740 0000236E 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   741 00002370 80FC3A              <1>     cmp ah, ":"
   742 00002373 751A                <1>     jne .isDestDir
   743 00002375 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   744 00002377 84C0                <1>     test al, al ;Is byte three nul?
   745 00002379 0F844A010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   746 0000237F 84E4                <1>     test ah, ah ;Is byte four nul?
   747 00002381 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   748 00002383 3A0581DCFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   749 00002389 0F843A010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   750                              <1> .isDestDir:
   751                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   752 0000238F 488D15(93060000)    <1>     lea rdx, destSpec
   753 00002396 B910000000          <1>     mov ecx, dirDirectory
   754 0000239B B8004E0000          <1>     mov eax, 4E00h
   755 000023A0 CD21                <1>     int 21h
   756 000023A2 7237                <1>     jc .mod2
   757                              <1>     ;Was the file we found actually a directory?
   758 000023A4 803D(0B010000)10    <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   759 000023AB 752E                <1>     jne .mod2
   760                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   761                              <1>     ;If not, we need to place one there!
   762 000023AD 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   763 000023B0 E863210000          <1>     call strlen
   764 000023B5 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   765 000023B7 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   766 000023BA 0FB60549DCFFFF      <1>     movzx eax, byte [pathSep]
   767 000023C1 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   768 000023C4 0F84FF000000        <1>     je .mod1        ;If so, skip adding another one!
   769 000023CA 66AB                <1>     stosw           ;Else, store the pathsep and null!
   770 000023CC 48FFCF              <1>     dec rdi         ;Point back to null
   771 000023CF 48893D(1D070000)    <1>     mov qword [destPtr], rdi    ;Save this pointer
   772 000023D6 E9EE000000          <1>     jmp .mod1
   773                              <1> .mod2:
   774                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   775                              <1> ; to rename wildcard semantics. Always run through this as the destination
   776                              <1> ; name may have wildcards in it! But we don't add any.
   777 000023DB 800D(55070000)40    <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   778 000023E2 488D35(93060000)    <1>     lea rsi, destSpec
   779 000023E9 E8E8220000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   780 000023EE 7407                <1>     jz .m2Wc
   781 000023F0 800D(55070000)10    <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   782                              <1> .m2Wc:
   783                              <1> ;Search for the source file
   784 000023F7 488D15(11060000)    <1>     lea rdx, srcSpec
   785 000023FE 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   786 00002400 B8004E0000          <1>     mov eax, 4E00h
   787 00002405 CD21                <1>     int 21h
   788 00002407 0F8237020000        <1>     jc .badSrcFile
   789 0000240D 488B35(1D070000)    <1>     mov rsi, qword [destPtr]
   790 00002414 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   791 00002418 B801290000          <1>     mov eax, 2901h
   792 0000241D CD21                <1>     int 21h
   793                              <1> .md2Lp:
   794 0000241F 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   795 00002426 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   796 0000242A B801290000          <1>     mov eax, 2901h
   797 0000242F CD21                <1>     int 21h  
   798                              <1> ;Now depending on source and dest patterns, build a filename in renName
   799 00002431 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   800 00002435 488D3D(25070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
   801 0000243C 57                  <1>     push rdi
   802 0000243D 48A5                <1>     movsq
   803 0000243F 66A5                <1>     movsw
   804 00002441 A4                  <1>     movsb
   805 00002442 5F                  <1>     pop rdi
   806 00002443 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   807 00002447 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   808                              <1> .md2NameMake:
   809 0000244C AC                  <1>     lodsb   ;Get the char from the source string
   810 0000244D 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   811 00002450 7502                <1>     jne .noStore    ;Dont store the char there
   812 00002452 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   813                              <1> .noStore:
   814 00002454 48FFC7              <1>     inc rdi ;Goto next char position
   815 00002457 FFC9                <1>     dec ecx
   816 00002459 75F1                <1>     jnz .md2NameMake
   817 0000245B 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   818 00002462 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
   819 00002469 E891200000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   820 0000246E 488D35(25070000)    <1>     lea rsi, renName
   821 00002475 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
   822 0000247C E897210000          <1>     call FCBToAsciiz
   823 00002481 E825010000          <1>     call .prntFilespec  ;Prints the source filename
   824 00002486 E8F8010000          <1>     call copyMain       ;And copy it!
   825 0000248B 731D                <1>     jnc .md2Ok
   826                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   827                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   828 0000248D 3CFD                <1>     cmp al, -3
   829 0000248F 0F848C010000        <1>     je .badBinCdevErr
   830 00002495 3CFE                <1>     cmp al, -2
   831 00002497 0F848D010000        <1>     je .rootDirFull
   832 0000249D 3CFF                <1>     cmp al, -1      ;Source and destination same?
   833 0000249F 0F848E010000        <1>     je .badSameFile 
   834 000024A5 E9A4010000          <1>     jmp .badExit    ;Else generic error message
   835                              <1> .md2Ok:
   836 000024AA F605(55070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   837 000024B1 0F8489000000        <1>     jz .copyDone        ;Copy complete!
   838 000024B7 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   839 000024BC CD21                <1>     int 21h
   840 000024BE 0F827C000000        <1>     jc .copyDone        ;If no more files, we are done!
   841 000024C4 E956FFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   842                              <1> .mod1:
   843                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   844 000024C9 800D(55070000)20    <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   845 000024D0 488D15(11060000)    <1>     lea rdx, srcSpec
   846 000024D7 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   847 000024D9 B8004E0000          <1>     mov eax, 4E00h
   848 000024DE CD21                <1>     int 21h
   849 000024E0 0F825E010000        <1>     jc .badSrcFile  ;File not found error!!
   850                              <1> .mod1Lp:
   851 000024E6 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   852 000024ED 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
   853 000024F4 E815200000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   854 000024F9 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
   855 00002500 E809200000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   856 00002505 E8A1000000          <1>     call .prntFilespec
   857 0000250A E874010000          <1>     call copyMain   ;And copy it!
   858 0000250F 731D                <1>     jnc .mod1Ok
   859                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   860                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   861 00002511 3CFD                <1>     cmp al, -3
   862 00002513 0F8408010000        <1>     je .badBinCdevErr
   863 00002519 3CFE                <1>     cmp al, -2
   864 0000251B 0F8409010000        <1>     je .rootDirFull
   865 00002521 3CFF                <1>     cmp al, -1      ;Source and destination same?
   866 00002523 0F840A010000        <1>     je .badSameFile 
   867 00002529 E920010000          <1>     jmp .badExit    ;Else generic error message
   868                              <1> .mod1Ok:
   869 0000252E F605(55070000)08    <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   870 00002535 7409                <1>     jz .copyDone
   871 00002537 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   872 0000253C CD21                <1>     int 21h
   873 0000253E 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   874                              <1> 
   875                              <1> .copyDone:
   876 00002540 F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy ;If not mode 3, just exit!
   877 00002547 743E                <1>     jz .cdNotM3
   878                              <1> ;Else, we advance the pointers and jump again!
   879 00002549 488B35(38070000)    <1>     mov rsi, qword [pNextFspec]
   880 00002550 483B35(30070000)    <1>     cmp rsi, qword [pLastFspec] ;Did we check the last section?
   881 00002557 742E                <1>     je .cdNotM3                 ;If yes, we are done!
   882                              <1> .cdM3lp:
   883 00002559 E8B4030000          <1>     call copyParse.gotoVar      ;Else move rsi to the var
   884 0000255E 3C0D                <1>     cmp al, CR
   885 00002560 7425                <1>     je .cdNotM3
   886 00002562 3C2B                <1>     cmp al, "+"
   887 00002564 740B                <1>     je .cdPlus
   888 00002566 E8C2030000          <1>     call copyParse.skipVar  ;Go to the end of the var (guaranteed @ a +)
   889 0000256B 3C0D                <1>     cmp al, CR
   890 0000256D 7418                <1>     je .cdNotM3
   891 0000256F EBE8                <1>     jmp short .cdM3lp
   892                              <1> .cdPlus:
   893 00002571 48FFC6              <1>     inc rsi ;Go past the + sign
   894 00002574 488935(38070000)    <1>     mov qword [pNextFspec], rsi ;Store this ptr
   895 0000257B 8025(55070000)94    <1>     and byte [bCpFlg], mod3Cpy|oneDest|ascDes   ;Clear flags except 4 dest
   896 00002582 E95DFCFFFF          <1>     jmp .srcLp
   897                              <1> .cdNotM3:
   898 00002587 E8CC000000          <1>     call .copyCleanup   ;Clean up resources!
   899 0000258C 8B05(51070000)      <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   900 00002592 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   901 00002597 E84E210000          <1>     call printDecimalValLB   ;n File(s) copied
   902 0000259C 488D1522DDFFFF      <1>     lea rdx, copyOk
   903 000025A3 B800090000          <1>     mov eax, 0900h
   904 000025A8 CD21                <1>     int 21h    
   905                              <1>     return
    13                              <2> %%_ret:
    14 000025AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   906                              <1> 
   907                              <1> .prntFilespec:
   908                              <1> ;Prints the filespec to STDOUT. If the path is 
   909 000025AB F605(55070000)88    <1>     test byte [bCpFlg], wcSrc|mod3Cpy   ;If no wc or mode 3 don't print name
   910                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000025B2 74(AA)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   911 000025B4 488D15(11060000)    <1>     lea rdx, srcSpec
   912 000025BB 4889D7              <1>     mov rdi, rdx
   913 000025BE E8551F0000          <1>     call strlen
   914 000025C3 FFC9                <1>     dec ecx     ;Drop terminating null
   915 000025C5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   916 000025CA B800400000          <1>     mov eax, 4000h  ;Write
   917 000025CF CD21                <1>     int 21h
   918 000025D1 E8151D0000          <1>     call printCRLF
   919                              <1>     return
    13                              <2> %%_ret:
    14 000025D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   920                              <1> .doSwitch:
   921                              <1> ;Since switches can come before or after a name, handle them here!
   922                              <1> ;If invalid switch char, returns ZF=NZ.
   923                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   924                              <1> ;       rsi -> Switchchar
   925 000025D7 56                  <1>     push rsi
   926 000025D8 48FFC6              <1>     inc rsi ;Point to char past switchchar
   927 000025DB AC                  <1>     lodsb   ;Get this char, goto next char
   928 000025DC 5E                  <1>     pop rsi
   929                              <1> .doSwitchRev:
   930 000025DD E8401F0000          <1>     call ucChar
   931 000025E2 3C41                <1>     cmp al, "A"
   932 000025E4 7510                <1>     jne .cB
   933 000025E6 081D(55070000)      <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   934 000025EC 8025(55070000)FD    <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   935                              <1> .cExit:
   936 000025F3 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   937                              <1>     return
    13                              <2> %%_ret:
    14 000025F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   938                              <1> .cB:
   939 000025F6 3C42                <1>     cmp al, "B"
   940 000025F8 7511                <1>     jne .cV
   941 000025FA F6D3                <1>     not bl  ;Reverse bits
   942 000025FC 201D(55070000)      <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   943 00002602 800D(55070000)02    <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   944 00002609 EBE8                <1>     jmp short .cExit
   945                              <1> .cV:
   946 0000260B 3C56                <1>     cmp al, "V"
   947                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000260D 75(F5)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   948 0000260F F605(40070000)FF    <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   949 00002616 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   950                              <1>     ;Else, set it. We return it at the end!
   951 00002618 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   952 0000261D CD21                <1>     int 21h
   953 0000261F EBD2                <1>     jmp short .cExit
   954                              <1> 
   955                              <1> ;COPY Bad Exits!!
   956                              <1> .badBinCdevErr:
   957 00002621 488D1551DFFFFF      <1>     lea rdx, binDevErr
   958 00002628 EB10                <1>     jmp short .badExitCmn
   959                              <1> .rootDirFull:
   960 0000262A 488D1530DCFFFF      <1>     lea rdx, fulRootDir
   961 00002631 EB07                <1>     jmp short .badExitCmn
   962                              <1> .badSameFile:
   963 00002633 488D153DDCFFFF      <1>     lea rdx, noSelfCopy
   964                              <1> .badExitCmn:
   965 0000263A E86AF4FFFF          <1>     call badCmn     ;Print error message
   966 0000263F E9FCFEFFFF          <1>     jmp .copyDone   ;Clean resources
   967                              <1> .badSrcFile:
   968 00002644 E850F4FFFF          <1>     call badFnf  ;File not found!!
   969 00002649 E9F2FEFFFF          <1>     jmp .copyDone
   970                              <1> .badExit:
   971 0000264E E819F4FFFF          <1>     call badParamError
   972 00002653 E9E8FEFFFF          <1>     jmp .copyDone
   973                              <1> 
   974                              <1> .copyCleanup:
   975                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   976                              <1> ;Handles are never open in this process!
   977 00002658 B8002E0000          <1>     mov eax, 2E00h
   978 0000265D 8A05(40070000)      <1>     mov al, byte [verifyFlg]
   979 00002663 CD21                <1>     int 21h
   980 00002665 4150                <1>     push r8
   981 00002667 4C8B05(47070000)    <1>     mov r8, qword [cpBufPtr]
   982 0000266E 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   983 00002671 7407                <1>     jz .skipFree
   984 00002673 B800490000          <1>     mov eax, 4900h
   985 00002678 CD21                <1>     int 21h
   986                              <1> .skipFree:
   987 0000267A 4158                <1>     pop r8
   988 0000267C 0F82A5210000        <1>     jc freezePC ;If free fails, man....
   989                              <1>     return
    13                              <2> %%_ret:
    14 00002682 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   990                              <1> 
   991                              <1> copyMain:
   992                              <1> ;This is the main copying procedure! 
   993                              <1> ;Start by checking the two files are not the same. If so, complain!
   994                              <1> ;If returns CF=CY, error code in al. 
   995                              <1> ;   If al = -1, same filename error!
   996                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   997                              <1> ;   If al = -3, attempted binary read from a device
   998                              <1> ;If returns CF=NC, file copied successfully.
   999                              <1> ;Check the two files are not the same using truename in searchspec
  1000 00002683 488D35(11060000)    <1>     lea rsi, srcSpec
  1001 0000268A 488D3D(70040000)    <1>     lea rdi, searchSpec
  1002 00002691 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1003 00002696 CD21                <1>     int 21h 
  1004 00002698 57                  <1>     push rdi    ;Save this searchSpec
  1005 00002699 488D35(93060000)    <1>     lea rsi, destSpec
  1006 000026A0 488D3D(F2040000)    <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1007 000026A7 B800600000          <1>     mov eax, 6000h
  1008 000026AC CD21                <1>     int 21h
  1009 000026AE 5E                  <1>     pop rsi     ;Get this ptr back
  1010 000026AF B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1011 000026B4 CD2F                <1>     int 2Fh
  1012 000026B6 755C                <1>     jnz .notSameFile
  1013                              <1> ;Now we check if we are in a concat mode. 
  1014                              <1> ; If in Concat and we are on the first file, just move the file pointer 
  1015                              <1> ; to the end of the file and return.
  1016                              <1> ; If in Concat and we are not on the first file, print content of 
  1017                              <1> ; destination lost and return.
  1018                              <1> ; Else, exist bad.
  1019                              <1> ;Concat is defined as (mod3Cpy or wcSrc) and oneDest
  1020 000026B8 0FB605(55070000)    <1>     movzx eax, byte [bCpFlg]   ;Get the flags
  1021 000026BF 89C1                <1>     mov ecx, eax        ;Copy the flags
  1022 000026C1 81E110000000        <1>     and ecx, oneDest    ;Isolate for AND
  1023 000026C7 743C                <1>     jz .sameNameExit    ;If not set, not in Concat mode
  1024 000026C9 2588000000          <1>     and eax, mod3Cpy | wcSrc   ;Compute the OR
  1025 000026CE 89C1                <1>     mov ecx, eax
  1026 000026D0 2580000000          <1>     and eax, mod3Cpy    ;Save this bit
  1027 000026D5 81E108000000        <1>     and ecx, wcSrc      ;And this bit
  1028 000026DB 09C8                <1>     or eax, ecx         ;Construct a single vale.
  1029 000026DD 7426                <1>     jz .sameNameExit    ;If neither bit was set, we don't have condition.
  1030 000026DF 488D15(93060000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1031 000026E6 F705(51070000)FFFF- <1>     test dword [dCpCnt], -1 ;Is this the first file?
  1031 000026EE FFFF                <1>
  1032 000026F0 7506                <1>     jnz .notFirstLost   ;If not, we skip this file from copy!
  1033 000026F2 E884010000          <1>     call .openFile      ;Moving the fp suffices for the copy
  1034                              <1>     return
    13                              <2> %%_ret:
    14 000026F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1035                              <1> .notFirstLost:
  1036 000026F8 488D159CDBFFFF      <1>     lea rdx, filLostErr
  1037 000026FF E8EE1B0000          <1>     call printString    ;Print this string and skip this file
  1038                              <1>     return
    13                              <2> %%_ret:
    14 00002704 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1039                              <1> .sameNameExit:
  1040 00002705 B0FF                <1>     mov al, -1  ;Same filename error!
  1041                              <1> .badExit:
  1042 00002707 50                  <1>     push rax
  1043 00002708 E8D6000000          <1>     call .exitCleanup
  1044 0000270D 58                  <1>     pop rax
  1045 0000270E F9                  <1>     stc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 0000270F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .badExitNoSpace:
  1048 00002710 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1049 00002712 EBF3                <1>     jmp short .badExit
  1050                              <1> .notSameFile:
  1051                              <1> ;Open source with read permission
  1052                              <1> ;Open destination with write permission
  1053 00002714 488D15(11060000)    <1>     lea rdx, srcSpec
  1054 0000271B B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1055 00002720 CD21                <1>     int 21h
  1056 00002722 72E3                <1>     jc .badExit
  1057 00002724 668905(41070000)    <1>     mov word [sourceHdl], ax
  1058 0000272B 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1059                              <1> 
  1060 0000272E B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1061 00002733 CD21                <1>     int 21h
  1062 00002735 668915(45070000)    <1>     mov word [srcHdlInfo], dx   ;Store information here
  1063 0000273C F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1064 0000273F 7412                <1>     jz .prepCopy
  1065                              <1> ;Check the binary flag was not set on this source filespec
  1066 00002741 B0FD                <1>     mov al, -3  ;Prep the error code
  1067 00002743 F605(55070000)02    <1>     test byte [bCpFlg], binSrc
  1068 0000274A 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1069 0000274C 800D(55070000)01    <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1070                              <1> .prepCopy:
  1071 00002753 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1072 00002755 488B15(47070000)    <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1073                              <1> .copyLoop:
  1074                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1075                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1076                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1077                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1078 0000275C 0FB70D(4F070000)    <1>     movzx ecx, word [wCpBufSz]
  1079 00002763 0FB71D(41070000)    <1>     movzx ebx, word [sourceHdl]
  1080 0000276A B8003F0000          <1>     mov eax, 3F00h ;Read
  1081 0000276F CD21                <1>     int 21h
  1082 00002771 7294                <1>     jc .badExit
  1083 00002773 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1084 00002775 F605(55070000)80    <1>     test byte [bCpFlg], mod3Cpy
  1085 0000277C 750B                <1>     jnz .doMod3BinCheck
  1086 0000277E F605(55070000)01    <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1087 00002785 742C                <1>     jz .notAscii
  1088 00002787 EB09                <1>     jmp short .doAscii
  1089                              <1> .doMod3BinCheck:
  1090 00002789 F605(55070000)02    <1>     test byte [bCpFlg], binSrc
  1091 00002790 7521                <1>     jnz .notAscii
  1092                              <1> .doAscii:
  1093                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1094 00002792 66F705(45070000)80- <1>     test word [srcHdlInfo], 80H ;Is this a chardev?
  1094 0000279A 00                  <1>
  1095 0000279B 7503                <1>     jnz .charDev
  1096 0000279D 67E343              <1>     jecxz .exitCleanup  ;We read no bytes from disk so can't scan for an EOF!
  1097                              <1> .charDev:
  1098 000027A0 50                  <1>     push rax        ;Save the original char count
  1099 000027A1 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1100 000027A4 B01A                <1>     mov al, EOF
  1101 000027A6 F2AE                <1>     repne scasb     ;Loop thru now!
  1102 000027A8 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1103 000027AA 59                  <1>     pop rcx         ;Get the original read count into ecx
  1104 000027AB 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1105                              <1> ;Here if EOF found.
  1106 000027AD FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1107 000027AF 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1108 000027B1 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1109                              <1> .notAscii:
  1110 000027B3 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1111 000027B5 742C                <1>     jz .exitCleanup
  1112 000027B7 51                  <1>     push rcx    ;Save the number of bytes to write
  1113 000027B8 52                  <1>     push rdx    ;Save the buffer ptr
  1114 000027B9 E891000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1115 000027BE 5A                  <1>     pop rdx
  1116 000027BF 59                  <1>     pop rcx
  1117 000027C0 0F824AFFFFFF        <1>     jc .badExitNoSpace
  1118 000027C6 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1119 000027CB CD21                <1>     int 21h
  1120 000027CD 0F8234FFFFFF        <1>     jc .badExit
  1121 000027D3 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1122 000027D5 0F8535FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1123 000027DB 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1124 000027DD 0F8479FFFFFF        <1>     jz .copyLoop            ;Set possible in ASCII mode
  1125                              <1> .exitCleanup:
  1126                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1127 000027E3 F605(55070000)04    <1>     test byte [bCpFlg], ascDes
  1128 000027EA 7425                <1>     jz .ecNoEOF
  1129 000027EC 0FBF1D(43070000)    <1>     movsx ebx, word [destHdl]
  1130 000027F3 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1131 000027F9 7416                <1>     je .ecNoEOF
  1132 000027FB 488B15(47070000)    <1>     mov rdx, qword [cpBufPtr]
  1133 00002802 C6021A              <1>     mov byte [rdx], EOF
  1134 00002805 B901000000          <1>     mov ecx, 1
  1135 0000280A B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1136 0000280F CD21                <1>     int 21h
  1137                              <1> .ecNoEOF:
  1138                              <1> ;Now close copy handles!
  1139 00002811 668B1D(41070000)    <1>     mov bx, word [sourceHdl]
  1140 00002818 6681FBFFFF          <1>     cmp bx, -1
  1141 0000281D 7410                <1>     je .beSkipSource
  1142 0000281F B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1143 00002824 CD21                <1>     int 21h
  1144 00002826 66C705(41070000)FF- <1>     mov word [sourceHdl], -1    ;Reset the var
  1144 0000282E FF                  <1>
  1145                              <1> .beSkipSource:
  1146 0000282F 668B1D(43070000)    <1>     mov bx, word [destHdl]
  1147 00002836 6681FBFFFF          <1>     cmp bx, -1
  1148                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000283B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000283D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1149 0000283E B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1150 00002843 CD21                <1>     int 21h
  1151 00002845 66C705(43070000)FF- <1>     mov word [destHdl], -1  ;Reset the var
  1151 0000284D FF                  <1>
  1152                              <1>     return
    13                              <2> %%_ret:
    14 0000284E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1153                              <1> 
  1154                              <1> .getWriteHandle:
  1155                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1156                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1157                              <1> ;Input: Nothing
  1158                              <1> ;Output: CF=NC: bx = Handle to the file
  1159                              <1> ;        CF=CY: File failed to open/create. 
  1160 0000284F 0FB71D(43070000)    <1>     movzx ebx, word [destHdl]
  1161 00002856 6681FBFFFF          <1>     cmp bx, -1
  1162 0000285B 7402                <1>     je .gwHProceed
  1163 0000285D F8                  <1>     clc     ;Clear the CF
  1164                              <1>     return
    13                              <2> %%_ret:
    14 0000285E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> .gwHProceed:
  1166                              <1> ;Here if the destination has not been opened yet!
  1167 0000285F 488D15(93060000)    <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1168                              <1> ;Now we create/reopen the file here!
  1169 00002866 F605(55070000)10    <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1170 0000286D 743E                <1>     jz .createFile
  1171                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1172                              <1> ;If this is more than file 0, we open
  1173 0000286F 813D(51070000)0000- <1>     cmp dword [dCpCnt], 0
  1173 00002877 0000                <1>
  1174 00002879 7432                <1>     je .createFile
  1175                              <1> ;Now we open the file instead and append to the end
  1176                              <1> .openFile:
  1177 0000287B B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1178 00002880 CD21                <1>     int 21h
  1179                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002882 72(5E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1180 00002884 FF05(51070000)      <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1181 0000288A 668905(43070000)    <1>     mov word [destHdl], ax
  1182 00002891 0FB7D8              <1>     movzx ebx, ax
  1183 00002894 31C9                <1>     xor ecx, ecx
  1184 00002896 31D2                <1>     xor edx, edx
  1185 00002898 F605(55070000)04    <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1186 0000289F 7404                <1>     jz .gwHNoAscii
  1187 000028A1 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1188 000028A3 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1189                              <1> .gwHNoAscii:
  1190 000028A5 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1191 000028AA CD21                <1>     int 21h
  1192                              <1>     return
    13                              <2> %%_ret:
    14 000028AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1193                              <1> .createFile:
  1194 000028AD B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1195 000028B2 31C9                <1>     xor ecx, ecx    ;No file attributes
  1196 000028B4 CD21                <1>     int 21h
  1197                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000028B6 72(AC)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1198 000028B8 FF05(51070000)      <1>     inc dword [dCpCnt]  ;File created for writing!
  1199 000028BE 668905(43070000)    <1>     mov word [destHdl], ax
  1200 000028C5 0FB7D8              <1>     movzx ebx, ax
  1201                              <1>     return
    13                              <2> %%_ret:
    14 000028C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1202                              <1> 
  1203                              <1> copyParse:
  1204                              <1> ;Checks to see if we are in mode 3. If we are, sets up the 
  1205                              <1> ; mode 3 variables. Ignores switches making life so much better.
  1206 000028C9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1207 000028D0 488935(38070000)    <1>     mov qword [pNextFspec], rsi     ;Setup this var here
  1208 000028D7 31C9                <1>     xor ecx, ecx    ;Use as a filespec counter in a "+ +" region
  1209                              <1> .cp1:
  1210 000028D9 E834000000          <1>     call .gotoVar   ;Goto filespec. Move rsi->First non-terminator char or +
  1211 000028DE 3C0D                <1>     cmp al, CR
  1212 000028E0 7428                <1>     je .cpExit
  1213 000028E2 3C2B                <1>     cmp al, "+"
  1214 000028E4 740F                <1>     je .cpPlus
  1215 000028E6 FFC1                <1>     inc ecx ;Add another file to the count
  1216 000028E8 E840000000          <1>     call .skipVar   ;Goto end of var. Move rsi->First terminator char or +
  1217 000028ED 3C0D                <1>     cmp al, CR
  1218 000028EF 7419                <1>     je .cpExit
  1219 000028F1 3C2B                <1>     cmp al, "+"
  1220 000028F3 75E4                <1>     jne .cp1 
  1221                              <1> .cpPlus:
  1222                              <1> ;Here we hit a "+"
  1223 000028F5 31C9                <1>     xor ecx, ecx    ;Clean this var again
  1224 000028F7 800D(55070000)80    <1>     or byte [bCpFlg], mod3Cpy   ;We are in mode 3 if we are here
  1225 000028FE 48FFC6              <1>     inc rsi         ;Go past the + sign
  1226 00002901 488935(30070000)    <1>     mov qword [pLastFspec], rsi ;Save this var as we go
  1227 00002908 EBCF                <1>     jmp short .cp1
  1228                              <1> .cpExit:
  1229 0000290A 81F903000000        <1>     cmp ecx, 3  ;If we have more than 2 files w/o a + between them, syntax err
  1230 00002910 F5                  <1>     cmc         ;Compliment CF to make CF=CY on error!
  1231                              <1>     return
    13                              <2> %%_ret:
    14 00002911 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> .gotoVar:
  1233                              <1> ;Goes to the next variable, plus sign or CR.
  1234                              <1> ;Returns rsi -> First char of the pathspec, + or CR
  1235 00002912 AC                  <1>     lodsb
  1236 00002913 E8331C0000          <1>     call isALdelimiter  
  1237 00002918 74F8                <1>     je .gotoVar         ;Skips delimiters
  1238 0000291A 3A05EBD6FFFF        <1>     cmp al, byte [switchChar]
  1239 00002920 7507                <1>     jne .vexit
  1240 00002922 E806000000          <1>     call .skipVar   ;Now skip the string after the cmdline switch
  1241 00002927 EBE9                <1>     jmp short .gotoVar  ;And switches
  1242                              <1> .vexit:
  1243 00002929 48FFCE              <1>     dec rsi ;Return back to the break condition char
  1244                              <1>     return
    13                              <2> %%_ret:
    14 0000292C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245                              <1> .skipVar:
  1246                              <1> ;Goes to the delimiter for this string
  1247 0000292D AC                  <1>     lodsb
  1248 0000292E 3C0D                <1>     cmp al, CR
  1249 00002930 74F7                <1>     je .vexit
  1250 00002932 3C2B                <1>     cmp al, "+"
  1251 00002934 74F3                <1>     je .vexit
  1252 00002936 E8101C0000          <1>     call isALdelimiter
  1253 0000293B 74EC                <1>     je .vexit
  1254 0000293D EBEE                <1>     jmp short .skipVar
  1255                              <1> 
  1256                              <1> 
  1257                              <1> erase:
  1258 0000293F F60505D7FFFFFF      <1>     test byte [arg1Flg], -1
  1259 00002946 0F8432F1FFFF        <1>     jz badArgError
  1260 0000294C E8601D0000          <1>     call buildCommandPath   ;Get the relative path to the file
  1261                              <1> .dirLp:
  1262 00002951 488D3D(70040000)    <1>     lea rdi, searchSpec
  1263 00002958 E8971C0000          <1>     call findLastPathComponant
  1264 0000295D 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1265 00002960 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1266 00002964 B03F                <1>     mov al, "?"
  1267                              <1>     ;Store question marks in the name field
  1268 00002966 57                  <1>     push rdi
  1269 00002967 48FFC7              <1>     inc rdi ;Goto the first char
  1270 0000296A B90B000000          <1>     mov ecx, 11
  1271 0000296F F3AA                <1>     rep stosb
  1272 00002971 5F                  <1>     pop rdi
  1273 00002972 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1274 00002975 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1275 0000297A CD21                <1>     int 21h
  1276 0000297C 3C01                <1>     cmp al, 1
  1277 0000297E 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1278                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1279                              <1>     ;No dirs to handle in here
  1280 00002984 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1281 00002988 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1282 0000298B E8881C0000          <1>     call FCBToAsciiz    ;Null terminates for free
  1283                              <1>     ;Count the number of ?'s, if 11, we print the message
  1284 00002990 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1285 00002994 31C9                <1>     xor ecx, ecx
  1286                              <1> .wcScan:
  1287 00002996 AC                  <1>     lodsb
  1288 00002997 3C3F                <1>     cmp al, "?"
  1289 00002999 7534                <1>     jne .endCount
  1290 0000299B FFC1                <1>     inc ecx
  1291 0000299D 81F90B000000        <1>     cmp ecx, 11
  1292 000029A3 75F1                <1>     jne .wcScan
  1293                              <1> .ynmsg:
  1294 000029A5 488D155BDAFFFF      <1>     lea rdx, ynMes
  1295 000029AC E841190000          <1>     call printString
  1296 000029B1 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1297 000029B3 CD21                <1>     int 21h ;Get char in al
  1298 000029B5 E8681B0000          <1>     call ucChar ;Uppercase the char
  1299 000029BA 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1300 000029BC 740C                <1>     je .endCount1
  1301 000029BE 3C4E                <1>     cmp al, "N"
  1302                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000029C0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000029C2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1303 000029C3 E823190000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1304 000029C8 EBDB                <1>     jmp short .ynmsg    
  1305                              <1> .endCount1:
  1306 000029CA E81C190000          <1>     call printCRLF
  1307                              <1> .endCount:
  1308                              <1>     ;Now we copy our search template pathstring to delPath
  1309 000029CF 488D3D(11060000)    <1>     lea rdi, delPath
  1310 000029D6 488D35(70040000)    <1>     lea rsi, searchSpec ;Source the chars from here
  1311 000029DD E82C1B0000          <1>     call strcpy2         ;Copy the string over to delPath
  1312                              <1> .findFile:
  1313                              <1>     ;Now we find first/find next our way through the files
  1314 000029E2 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1315 000029E5 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1316 000029E7 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1317 000029EC CD21                <1>     int 21h
  1318 000029EE 0F82A5F0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1319                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1320 000029F4 E8FB1B0000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1321 000029F9 488D35(14010000)    <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1322                              <1> .delNextFile:
  1323                              <1> ;rsi and rdi dont move here
  1324 00002A00 E8091B0000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1325 00002A05 488D15(11060000)    <1>     lea rdx, delPath
  1326 00002A0C B800410000          <1>     mov eax, 4100h  ;Delete File 
  1327 00002A11 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1328 00002A13 488D15(70040000)    <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1329 00002A1A B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1330 00002A1F CD21                <1>     int 21h
  1331 00002A21 73DD                <1>     jnc .delNextFile    
  1332 00002A23 F8                  <1>     clc ;Clear carry to indicate success
  1333                              <1>     return
    13                              <2> %%_ret:
    14 00002A24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1334                              <1> .noWildcard:
  1335                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1336                              <1>     ; a \*.*<NUL> over the null terminator
  1337 00002A25 488D15(70040000)    <1>     lea rdx, searchSpec
  1338 00002A2C B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1339 00002A31 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1340 00002A36 CD21                <1>     int 21h
  1341 00002A38 0F825BF0FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1342 00002A3E F605(0B010000)10    <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1343 00002A45 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1344                              <1>     ;Else, we are dealing with a dir
  1345 00002A47 4889D7              <1>     mov rdi, rdx
  1346 00002A4A 31C9                <1>     xor ecx, ecx
  1347 00002A4C FFC9                <1>     dec ecx
  1348 00002A4E F2AE                <1>     repne scasb ;Go to the end of the line!
  1349 00002A50 48FFCF              <1>     dec rdi
  1350 00002A53 0FB605B0D5FFFF      <1>     movzx eax, byte [pathSep]
  1351 00002A5A AA                  <1>     stosb
  1352 00002A5B B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1353 00002A60 AB                  <1>     stosd
  1354 00002A61 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1355                              <1> .delMain:   ;Call with rdx -> buffer!
  1356 00002A66 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1357 00002A6B CD21                <1>     int 21h
  1358                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002A6D 73(24)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1359 00002A6F 3C05                <1>     cmp al, errAccDen
  1360 00002A71 0F84ECEFFFFF        <1>     je badAccError ;If the file is RO, fail!
  1361 00002A77 E90BF0FFFF          <1>     jmp badFileError
  1362                              <1>     return
    13                              <2> %%_ret:
    14 00002A7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1363                              <1> 
  1364                              <1> date:
  1365 00002A7D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1366 00002A84 E8B41A0000          <1>     call skipDelimiters
  1367 00002A89 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1368 00002A8C 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1369                              <1> .init:
  1370                              <1>     ;Else, we do interactive mode!
  1371 00002A8E 488D15F5D8FFFF      <1>     lea rdx, curDate
  1372 00002A95 B409                <1>     mov ah, 09h
  1373 00002A97 CD21                <1>     int 21h
  1374 00002A99 E895190000          <1>     call printFmtDate
  1375                              <1> .noCur:
  1376 00002A9E 488D15F6D8FFFF      <1>     lea rdx, newDate
  1377 00002AA5 B409                <1>     mov ah, 09h
  1378 00002AA7 CD21                <1>     int 21h
  1379 00002AA9 488D150AD9FFFF      <1>     lea rdx, ukDate
  1380 00002AB0 488D05F6D8FFFF      <1>     lea rax, usDate
  1381 00002AB7 488D1D09D9FFFF      <1>     lea rbx, jpDate
  1382 00002ABE 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1383 00002AC5 480F47D3            <1>     cmova rdx, rbx
  1384 00002AC9 480F42D0            <1>     cmovb rdx, rax
  1385 00002ACD B409                <1>     mov ah, 09h
  1386 00002ACF CD21                <1>     int 21h
  1387                              <1> 
  1388 00002AD1 488D15(C3010000)    <1>     lea rdx, cLineBuffer  ;Make sure to use cLineBuffer to preserve F3
  1389 00002AD8 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1390 00002ADB B40A                <1>     mov ah, 0Ah
  1391 00002ADD CD21                <1>     int 21h
  1392 00002ADF 52                  <1>     push rdx
  1393 00002AE0 E806180000          <1>     call printCRLF
  1394 00002AE5 5A                  <1>     pop rdx
  1395 00002AE6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1396                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002AEA 74(7C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1397                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1398 00002AEC 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1399                              <1> .goDate:
  1400 00002AF0 31C0                <1>     xor eax, eax    
  1401 00002AF2 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1402 00002AF9 727B                <1>     jb .us
  1403 00002AFB 0F87B7000000        <1>     ja .jpn
  1404                              <1>     ;Here for UK style dates
  1405 00002B01 E8E41C0000          <1>     call getByte
  1406 00002B06 725D                <1>     jc .badDate
  1407 00002B08 8805(0F060000)      <1>     mov byte [td3], al  ;Store the day
  1408 00002B0E E80C010000          <1>     call .validSep
  1409 00002B13 7550                <1>     jne .badDate
  1410 00002B15 E8D01C0000          <1>     call getByte
  1411 00002B1A 7249                <1>     jc .badDate
  1412 00002B1C 8805(10060000)      <1>     mov byte [td4], al  ;Store month
  1413 00002B22 E8F8000000          <1>     call .validSep
  1414 00002B27 753C                <1>     jne .badDate
  1415 00002B29 E8C81C0000          <1>     call getNum
  1416 00002B2E E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1417 00002B33 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1418 00002B38 732B                <1>     jae .badDate
  1419 00002B3A 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1420                              <1> .writeDate:
  1421 00002B41 E8F7190000          <1>     call skipDelimiters
  1422 00002B46 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1423 00002B49 751A                <1>     jne .badDate
  1424 00002B4B 0FB70D(0D060000)    <1>     movzx ecx, word [td1]   ;Get the year
  1425 00002B52 668B15(0F060000)    <1>     mov dx, word [td3]      ;Read time and date together!
  1426 00002B59 B8002B0000          <1>     mov eax, 2B00h
  1427 00002B5E CD21                <1>     int 21h
  1428 00002B60 84C0                <1>     test al, al
  1429                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B62 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B64 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1430                              <1> .badDate:
  1431 00002B65 488D150FD8FFFF      <1>     lea rdx, badDate
  1432 00002B6C E881170000          <1>     call printString
  1433 00002B71 E928FFFFFF          <1>     jmp date.noCur
  1434                              <1> .us:
  1435 00002B76 E86F1C0000          <1>     call getByte
  1436 00002B7B 72E8                <1>     jc .badDate
  1437 00002B7D 8805(10060000)      <1>     mov byte [td4], al  ;Store the month
  1438 00002B83 E897000000          <1>     call .validSep
  1439 00002B88 75DB                <1>     jne .badDate
  1440 00002B8A E85B1C0000          <1>     call getByte
  1441 00002B8F 72D4                <1>     jc .badDate
  1442 00002B91 8805(0F060000)      <1>     mov byte [td3], al  ;Store day
  1443 00002B97 E883000000          <1>     call .validSep
  1444 00002B9C 75C7                <1>     jne .badDate
  1445 00002B9E E8531C0000          <1>     call getNum
  1446 00002BA3 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1447 00002BA8 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1448 00002BAD 73B6                <1>     jae .badDate
  1449 00002BAF 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1450                              <1> .writeHop:
  1451 00002BB6 EB89                <1>     jmp short .writeDate
  1452                              <1> .jpn:
  1453 00002BB8 E8391C0000          <1>     call getNum
  1454 00002BBD E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1455 00002BC2 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1456 00002BC7 739C                <1>     jae .badDate
  1457 00002BC9 668905(0D060000)    <1>     mov word [td1], ax  ;Store the word directly
  1458 00002BD0 E84A000000          <1>     call .validSep
  1459 00002BD5 758E                <1>     jne .badDate
  1460 00002BD7 E80E1C0000          <1>     call getByte
  1461 00002BDC 7287                <1>     jc .badDate
  1462 00002BDE 8805(0F060000)      <1>     mov byte [td3], al  ;Store the day
  1463 00002BE4 E836000000          <1>     call .validSep
  1464 00002BE9 0F8576FFFFFF        <1>     jne .badDate
  1465 00002BEF E8F61B0000          <1>     call getByte
  1466 00002BF4 0F826BFFFFFF        <1>     jc .badDate
  1467 00002BFA 8805(10060000)      <1>     mov byte [td4], al  ;Store month
  1468 00002C00 EBB4                <1>     jmp short .writeHop
  1469                              <1> .doYear:
  1470 00002C02 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1471                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C07 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C09 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1472                              <1> ;If the user specifies 80-99 it means 1980-1999
  1473                              <1> ;If the user specifies 00-79 it means 2000-2079
  1474 00002C0A BBD0070000          <1>     mov ebx, 2000
  1475 00002C0F B96C070000          <1>     mov ecx, 1900
  1476 00002C14 3D50000000          <1>     cmp eax, 80     
  1477 00002C19 0F42CB              <1>     cmovb ecx, ebx
  1478 00002C1C 01C8                <1>     add eax, ecx
  1479                              <1>     return
    13                              <2> %%_ret:
    14 00002C1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1480                              <1> .validSep:
  1481 00002C1F AC                  <1>     lodsb           ;Get the char and return
  1482 00002C20 3C2E                <1>     cmp al, "."
  1483                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C22 74(1E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1484 00002C24 3C2F                <1>     cmp al, "/"
  1485                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C26 74(1E)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1486 00002C28 3C2D                <1>     cmp al, "-"
  1487                              <1>     return
    13                              <2> %%_ret:
    14 00002C2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1488                              <1> 
  1489                              <1> time:
  1490 00002C2B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1491 00002C32 E806190000          <1>     call skipDelimiters
  1492 00002C37 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1493 00002C3A 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1494                              <1> .init:
  1495 00002C3C 488D15A0D7FFFF      <1>     lea rdx, curTime
  1496 00002C43 B409                <1>     mov ah, 09h
  1497 00002C45 CD21                <1>     int 21h
  1498 00002C47 E87E170000          <1>     call printFmtTime
  1499                              <1> .noCur:
  1500 00002C4C 488D15A1D7FFFF      <1>     lea rdx, newTime
  1501 00002C53 B409                <1>     mov ah, 09h
  1502 00002C55 CD21                <1>     int 21h
  1503                              <1> 
  1504 00002C57 488D15(C3010000)    <1>     lea rdx, cLineBuffer  ;Make sure to use cLineBuffer to preserve F3
  1505 00002C5E C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1506 00002C61 B40A                <1>     mov ah, 0Ah
  1507 00002C63 CD21                <1>     int 21h
  1508 00002C65 52                  <1>     push rdx
  1509 00002C66 488D1501D5FFFF      <1>     lea rdx, crlf
  1510 00002C6D B409                <1>     mov ah, 09h
  1511 00002C6F CD21                <1>     int 21h
  1512 00002C71 5A                  <1>     pop rdx
  1513 00002C72 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1514                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002C76 74(2A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1515 00002C78 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1516                              <1> .goTime:
  1517 00002C7C C705(0D060000)0000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1517 00002C84 0000                <1>
  1518 00002C86 31C0                <1>     xor eax, eax   
  1519 00002C88 E85D1B0000          <1>     call getByte
  1520 00002C8D 0F8298000000        <1>     jc .badTime         ;Get the number in eax
  1521 00002C93 8805(0E060000)      <1>     mov byte [td2], al  ;Save hours
  1522 00002C99 E89E000000          <1>     call .validsep
  1523 00002C9E 0F8587000000        <1>     jne .badTime
  1524 00002CA4 E8411B0000          <1>     call getByte
  1525 00002CA9 0F827C000000        <1>     jc .badTime
  1526 00002CAF 8805(0D060000)      <1>     mov byte [td1], al  ;Save minutes
  1527 00002CB5 E882000000          <1>     call .validsep
  1528 00002CBA 740F                <1>     je .goSec
  1529 00002CBC 48FFCE              <1>     dec rsi ;Go back a char
  1530 00002CBF E879180000          <1>     call skipDelimiters ;Skip any delimiters
  1531 00002CC4 803E0D              <1>     cmp byte [rsi], CR
  1532 00002CC7 743E                <1>     je .setTime
  1533 00002CC9 EB60                <1>     jmp short .badTime
  1534                              <1> .goSec:
  1535 00002CCB E878000000          <1>     call .checkNum
  1536 00002CD0 7259                <1>     jc .badTime
  1537 00002CD2 E8131B0000          <1>     call getByte
  1538 00002CD7 7252                <1>     jc .badTime
  1539 00002CD9 8805(10060000)      <1>     mov byte [td4], al  ;Save seconds
  1540 00002CDF AC                  <1>     lodsb       ;Move rsi forwards
  1541 00002CE0 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1542 00002CE2 740F                <1>     je .goMsec
  1543 00002CE4 48FFCE              <1>     dec rsi ;Go back a char
  1544 00002CE7 E851180000          <1>     call skipDelimiters ;Skip any delimiters
  1545 00002CEC 803E0D              <1>     cmp byte [rsi], CR
  1546 00002CEF 7416                <1>     je .setTime
  1547 00002CF1 EB38                <1>     jmp short .badTime
  1548                              <1> .goMsec:
  1549 00002CF3 E850000000          <1>     call .checkNum
  1550 00002CF8 7231                <1>     jc .badTime
  1551 00002CFA E8EB1A0000          <1>     call getByte
  1552 00002CFF 722A                <1>     jc .badTime
  1553 00002D01 8805(0F060000)      <1>     mov byte [td3], al  ;Save miliseconds
  1554                              <1> .setTime:
  1555 00002D07 E831180000          <1>     call skipDelimiters
  1556 00002D0C 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1557 00002D0F 751A                <1>     jne .badTime
  1558 00002D11 0FB70D(0D060000)    <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1559 00002D18 0FB715(0F060000)    <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1560 00002D1F B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1561 00002D24 CD21                <1>     int 21h
  1562 00002D26 A8FF                <1>     test al, -1
  1563                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D28 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D2A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1564                              <1> .badTime:
  1565 00002D2B 488D15A2D6FFFF      <1>     lea rdx, badTime
  1566 00002D32 E8BB150000          <1>     call printString
  1567 00002D37 E910FFFFFF          <1>     jmp time.noCur
  1568                              <1> .validsep:
  1569 00002D3C AC                  <1>     lodsb
  1570 00002D3D 3A05(8A000000)      <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1571                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00002D43 74(2A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1572 00002D45 3C2E                <1>     cmp al, "."
  1573                              <1>     return
    13                              <2> %%_ret:
    14 00002D47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1574                              <1> .checkNum:
  1575 00002D48 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1576 00002D49 48FFCE              <1>     dec rsi
  1577 00002D4C 3C30                <1>     cmp al, "0"
  1578 00002D4E 7206                <1>     jb .cnbad
  1579 00002D50 3C39                <1>     cmp al, "9"
  1580 00002D52 7702                <1>     ja .cnbad
  1581 00002D54 F8                  <1>     clc
  1582                              <1>     return
    13                              <2> %%_ret:
    14 00002D55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1583                              <1> .cnbad:
  1584 00002D56 F9                  <1>     stc
  1585                              <1>     return
    13                              <2> %%_ret:
    14 00002D57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1586                              <1> ctty:
  1587 00002D58 F605ECD2FFFFFF      <1>     test byte [arg1Flg], -1
  1588 00002D5F 0F8419EDFFFF        <1>     jz badArgError
  1589 00002D65 F605E2D2FFFFFF      <1>     test byte [arg2Flg], -1
  1590 00002D6C 0F850CEDFFFF        <1>     jnz badArgError
  1591 00002D72 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1592 00002D79 0FB605CCD2FFFF      <1>     movzx eax, byte [arg1Off]
  1593 00002D80 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1594 00002D83 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1595 00002D87 750F                <1>     jne .noDrive
  1596 00002D89 0FB605BDD2FFFF      <1>     movzx eax, byte [arg1FCBret]
  1597 00002D90 3CFF                <1>     cmp al, -1
  1598 00002D92 0F84DDECFFFF        <1>     je badDriveError
  1599                              <1> .noDrive:
  1600                              <1>     ;Now we open the provided file
  1601 00002D98 E82C190000          <1>     call copyArgumentToSearchSpec
  1602 00002D9D 488D15(70040000)    <1>     lea rdx, searchSpec
  1603                              <1> .loadSwap:
  1604 00002DA4 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1605 00002DA9 CD21                <1>     int 21h
  1606 00002DAB 0F82D6ECFFFF        <1>     jc badFileError
  1607 00002DB1 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1608 00002DB4 B800440000          <1>     mov eax, 4400h  ;Get device word
  1609 00002DB9 CD21                <1>     int 21h
  1610 00002DBB F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1611 00002DBE 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1612                              <1>     ;Now we set this handle to be STDIO
  1613 00002DC0 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1614 00002DC3 30F6                <1>     xor dh, dh
  1615 00002DC5 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1616 00002DCA CD21                <1>     int 21h
  1617                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1618 00002DCC 31C9                <1>     xor ecx, ecx    ;STDIN
  1619 00002DCE B800460000          <1>     mov eax, 4600h
  1620 00002DD3 CD21                <1>     int 21h
  1621 00002DD5 FFC1                <1>     inc ecx         ;STDOUT
  1622 00002DD7 B800460000          <1>     mov eax, 4600h
  1623 00002DDC CD21                <1>     int 21h
  1624 00002DDE FFC1                <1>     inc ecx         ;STDERR
  1625 00002DE0 B800460000          <1>     mov eax, 4600h
  1626 00002DE5 CD21                <1>     int 21h
  1627 00002DE7 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1628 00002DEC CD21                <1>     int 21h
  1629                              <1>     return
    13                              <2> %%_ret:
    14 00002DEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1630                              <1> .badCharDev:
  1631 00002DEF 488D150FD7FFFF      <1>     lea rdx, badDev
  1632 00002DF6 B409                <1>     mov ah, 09h
  1633 00002DF8 CD21                <1>     int 21h
  1634 00002DFA B43E                <1>     mov ah, 3Eh ;Close opened handle
  1635 00002DFC CD21                <1>     int 21h
  1636                              <1>     return
    13                              <2> %%_ret:
    14 00002DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1637                              <1> 
  1638                              <1> cls:  
  1639 00002DFF B800440000          <1>     mov eax, 4400h  ;Get device info
  1640 00002E04 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1641 00002E09 CD21                <1>     int 21h         ;in dx
  1642 00002E0B F7C280000000        <1>     test edx, devCharDev
  1643 00002E11 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1644 00002E13 F7C210000000        <1>     test edx, charDevFastOut
  1645 00002E19 7421                <1>     jz .doAnsi
  1646                              <1>     ;Test if Int 29h uses Int 30h
  1647                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1648                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1649 00002E1B B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1650 00002E20 CD21                <1>     int 21h
  1651 00002E22 B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1652                              <1> .biosCheck:
  1653 00002E27 66813BCD30          <1>     cmp word [rbx], 30CDh
  1654 00002E2C 7426                <1>     je .biosConfirmed
  1655 00002E2E 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1656 00002E33 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1657 00002E35 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1658 00002E38 FFC9                <1>     dec ecx
  1659 00002E3A 75EB                <1>     jnz .biosCheck
  1660                              <1> .doAnsi:
  1661                              <1> ;4 chars in the ansi routine
  1662                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1663                              <1> ; understand ANSI codes
  1664 00002E3C 488D3573D9FFFF      <1>     lea rsi, ansiCls
  1665 00002E43 B904000000          <1>     mov ecx, 4
  1666 00002E48 B406                <1>     mov ah, 06h ;Raw char output
  1667                              <1> .ansiLp:
  1668 00002E4A AC                  <1>     lodsb   ;Get the char in 
  1669 00002E4B 88C2                <1>     mov dl, al
  1670 00002E4D CD21                <1>     int 21h
  1671 00002E4F FFC9                <1>     dec ecx
  1672 00002E51 75F7                <1>     jnz .ansiLp
  1673                              <1>     return
    13                              <2> %%_ret:
    14 00002E53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1674                              <1> .biosConfirmed:
  1675                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1676 00002E54 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1677 00002E56 31DB                <1>     xor ebx, ebx
  1678 00002E58 CD30                <1>     int 30h
  1679 00002E5A B40F                <1>     mov ah, 0Fh ;Get screen mode
  1680 00002E5C CD30                <1>     int 30h
  1681 00002E5E 53                  <1>     push rbx
  1682 00002E5F 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1683 00002E62 FECA                <1>     dec dl
  1684 00002E64 B619                <1>     mov dh, 25  ;Number of rows is standard
  1685 00002E66 31C0                <1>     xor eax, eax
  1686 00002E68 89C1                <1>     mov ecx, eax
  1687 00002E6A B707                <1>     mov bh, 7   ;Screen attributes
  1688 00002E6C B406                <1>     mov ah, 6   ;Scroll
  1689 00002E6E CD30                <1>     int 30h
  1690 00002E70 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1691 00002E72 5B                  <1>     pop rbx
  1692 00002E73 B402                <1>     mov ah, 2
  1693 00002E75 CD30                <1>     int 30h
  1694                              <1>     return
    13                              <2> %%_ret:
    14 00002E77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> 
  1696                              <1> break:
  1697 00002E78 F605CCD1FFFFFF      <1>     test byte [arg1Flg], -1
  1698 00002E7F 752D                <1>     jnz .argumentProvided
  1699                              <1>     ;Here we just get the status of break
  1700 00002E81 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1701 00002E86 CD21                <1>     int 21h
  1702 00002E88 88D3                <1>     mov bl, dl
  1703 00002E8A 488D1521D7FFFF      <1>     lea rdx, breakIs
  1704 00002E91 B409                <1>     mov ah, 09h
  1705 00002E93 CD21                <1>     int 21h
  1706 00002E95 488D150ED7FFFF      <1>     lea rdx, onMes
  1707 00002E9C 488D0DFDD6FFFF      <1>     lea rcx, offMes
  1708 00002EA3 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1709 00002EA5 480F44D1            <1>     cmovz rdx, rcx
  1710 00002EA9 B409                <1>     mov ah, 09h
  1711 00002EAB CD21                <1>     int 21h
  1712                              <1>     return
    13                              <2> %%_ret:
    14 00002EAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1713                              <1> .argumentProvided:
  1714 00002EAE 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1715 00002EB2 AD                  <1>     lodsd   ;Read the word
  1716 00002EB3 89C3                <1>     mov ebx, eax
  1717 00002EB5 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1718 00002EBA C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1719 00002EBD 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1720 00002EC2 7416                <1>     je .maybeOn
  1721 00002EC4 663D4F46            <1>     cmp ax, "OF"
  1722 00002EC8 7523                <1>     jne .badOnOff
  1723 00002ECA 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1724 00002ECF 6681FB4620          <1>     cmp bx, "F "
  1725 00002ED4 7517                <1>     jne .badOnOff
  1726                              <1>     ;Set off
  1727 00002ED6 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1728 00002ED8 EB0B                <1>     jmp short .setBreak
  1729                              <1> .maybeOn:
  1730 00002EDA 663D4F4E            <1>     cmp ax, "ON"
  1731 00002EDE 750D                <1>     jne .badOnOff
  1732                              <1>     ;Set on
  1733 00002EE0 BA01000000          <1>     mov edx, 1
  1734                              <1> .setBreak:
  1735 00002EE5 B801330000          <1>     mov eax, 3301h  ;Set break
  1736 00002EEA CD21                <1>     int 21h
  1737                              <1>     return
    13                              <2> %%_ret:
    14 00002EEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1738                              <1> .badOnOff:
  1739 00002EED 488D15D2D8FFFF      <1>     lea rdx, badOnOff
  1740 00002EF4 B409                <1>     mov ah, 09h
  1741 00002EF6 CD21                <1>     int 21h
  1742                              <1>     return
    13                              <2> %%_ret:
    14 00002EF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1743                              <1> 
  1744                              <1> verify:
  1745 00002EF9 F6054BD1FFFFFF      <1>     test byte [arg1Flg], -1
  1746 00002F00 752D                <1>     jnz .argumentProvided
  1747                              <1>     ;Here we just get the status of break
  1748 00002F02 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1749 00002F07 CD21                <1>     int 21h
  1750 00002F09 88C3                <1>     mov bl, al
  1751 00002F0B 488D15AAD6FFFF      <1>     lea rdx, verifyIs
  1752 00002F12 B409                <1>     mov ah, 09h
  1753 00002F14 CD21                <1>     int 21h
  1754 00002F16 488D158DD6FFFF      <1>     lea rdx, onMes
  1755 00002F1D 488D0D7CD6FFFF      <1>     lea rcx, offMes
  1756 00002F24 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1757 00002F26 480F44D1            <1>     cmovz rdx, rcx
  1758 00002F2A B409                <1>     mov ah, 09h
  1759 00002F2C CD21                <1>     int 21h
  1760                              <1>     return
    13                              <2> %%_ret:
    14 00002F2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1761                              <1> .argumentProvided:
  1762 00002F2F 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1763 00002F33 AD                  <1>     lodsd   ;Read the word
  1764 00002F34 89C3                <1>     mov ebx, eax
  1765 00002F36 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1766 00002F3B C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1767 00002F3E 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1768 00002F43 7416                <1>     je .maybeOn
  1769 00002F45 663D4F46            <1>     cmp ax, "OF"
  1770 00002F49 751F                <1>     jne .badOnOff
  1771 00002F4B 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1772 00002F50 6681FB4620          <1>     cmp bx, "F "
  1773 00002F55 7513                <1>     jne .badOnOff
  1774                              <1>     ;Set off
  1775 00002F57 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1776 00002F59 EB0A                <1>     jmp short .setVerify
  1777                              <1> .maybeOn:
  1778 00002F5B 663D4F4E            <1>     cmp ax, "ON"
  1779 00002F5F 7509                <1>     jne .badOnOff
  1780                              <1>     ;Set on
  1781 00002F61 31C0                <1>     xor eax, eax
  1782 00002F63 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1783                              <1> .setVerify:
  1784 00002F65 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1785 00002F67 CD21                <1>     int 21h
  1786                              <1>     return
    13                              <2> %%_ret:
    14 00002F69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1787                              <1> .badOnOff:
  1788 00002F6A 488D1555D8FFFF      <1>     lea rdx, badOnOff
  1789 00002F71 B409                <1>     mov ah, 09h
  1790 00002F73 CD21                <1>     int 21h
  1791                              <1>     return
    13                              <2> %%_ret:
    14 00002F75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1792                              <1> 
  1793                              <1> rename:
  1794 00002F76 F605CED0FFFFFF      <1>     test byte [arg1Flg], -1
  1795 00002F7D 0F84FBEAFFFF        <1>     jz badArgError
  1796 00002F83 F605C4D0FFFFFF      <1>     test byte [arg2Flg], -1
  1797 00002F8A 0F84EEEAFFFF        <1>     jz badArgError    
  1798                              <1>     ;Initialise the variables!
  1799 00002F90 488D35(11060000)    <1>     lea rsi, srcSpec
  1800 00002F97 488935(15070000)    <1>     mov qword [srcPtr], rsi
  1801 00002F9E 488D35(93060000)    <1>     lea rsi, destSpec
  1802 00002FA5 488935(1D070000)    <1>     mov qword [destPtr], rsi
  1803                              <1>     ;Check the second path is just a filename!
  1804 00002FAC 0FB6059CD0FFFF      <1>     movzx eax, byte [arg2Off]
  1805 00002FB3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1806 00002FBA 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1807 00002FBD 488D3D(70040000)    <1>     lea rdi, searchSpec
  1808 00002FC4 57                  <1>     push rdi
  1809 00002FC5 E8A4160000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1810 00002FCA 5F                  <1>     pop rdi
  1811 00002FCB 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1812 00002FCF 0F84A9EAFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1813                              <1> ;Check if a drive specifier has been given
  1814 00002FD5 0FB60570D0FFFF      <1>     movzx eax, byte [arg1Off]
  1815 00002FDC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1816 00002FE3 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1817 00002FE6 66AD                <1>     lodsw   ;Get the first two chars
  1818 00002FE8 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1819 00002FEB 752A                <1>     jne .curDrvSrc
  1820                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1821 00002FED 488B35(15070000)    <1>     mov rsi, qword [srcPtr]
  1822 00002FF4 668906              <1>     mov word [rsi], ax
  1823 00002FF7 488105(15070000)02- <1>     add qword [srcPtr], 2   
  1823 00002FFF 000000              <1>
  1824 00003002 488B35(1D070000)    <1>     mov rsi, qword [destPtr]
  1825 00003009 668906              <1>     mov word [rsi], ax
  1826 0000300C 488105(1D070000)02- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1826 00003014 000000              <1>
  1827                              <1> .curDrvSrc:
  1828 00003017 4889FE              <1>     mov rsi, rdi
  1829                              <1> .destScan:
  1830 0000301A AC                  <1>     lodsb   ;Get the char
  1831 0000301B 3A05E9CFFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1832 00003021 0F8457EAFFFF        <1>     je badArgError
  1833 00003027 84C0                <1>     test al, al
  1834 00003029 75EF                <1>     jnz .destScan
  1835                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1836 0000302B 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1837 0000302F 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1837 00003038 3F                  <1>
  1838 00003039 B903000000          <1>     mov ecx, 3  ;24 bytes
  1839 0000303E F348AB              <1>     rep stosq
  1840 00003041 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1841 00003042 488D35(70040000)    <1>     lea rsi, searchSpec
  1842 00003049 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1843 0000304D B80D290000          <1>     mov eax, 290Dh
  1844 00003052 CD21                <1>     int 21h     
  1845 00003054 50                  <1>     push rax    ;Save the WC signature
  1846 00003055 E857160000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1847 0000305A 488D3D(70040000)    <1>     lea rdi, searchSpec
  1848 00003061 E88E150000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1849 00003066 4889FE              <1>     mov rsi, rdi
  1850 00003069 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1851 0000306C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1852 00003070 B80D290000          <1>     mov eax, 290Dh
  1853 00003075 CD21                <1>     int 21h
  1854 00003077 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1855 00003078 88CC                <1>     mov ah, cl
  1856 0000307A 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1857 0000307D 0F84E6000000        <1>     jz .noWC
  1858 00003083 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1859 00003085 0F84F3E9FFFF        <1>     je badArgError
  1860 0000308B 488D35(70040000)    <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1861                              <1>     ;Now we check if we have a path to actually handle
  1862 00003092 4839F3              <1>     cmp rbx, rsi
  1863 00003095 7444                <1>     je .noPath
  1864 00003097 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1865 0000309B 488D35(70040000)    <1>     lea rsi, searchSpec
  1866 000030A2 488B3D(11060000)    <1>     mov rdi, qword [srcSpec]
  1867 000030A9 56                  <1>     push rsi
  1868 000030AA E850140000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1869 000030AF 5E                  <1>     pop rsi
  1870 000030B0 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1871 000030B3 8A0551CFFFFF        <1>     mov al, byte [pathSep]
  1872 000030B9 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1873 000030BA 48893D(15070000)    <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1874 000030C1 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1875 000030C8 E832140000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1876 000030CD 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1877 000030D0 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1878 000030D1 48893D(1D070000)    <1>     mov qword [destPtr], rdi
  1879 000030D8 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1880                              <1> .noPath:
  1881                              <1>     ;Now we have where to copy the files to, we can start our work!
  1882 000030DB 488D15(70040000)    <1>     lea rdx, searchSpec
  1883 000030E2 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1884 000030E4 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1885 000030E9 CD21                <1>     int 21h
  1886 000030EB 0F829FE9FFFF        <1>     jc badDupFnf    ;If no file was found!
  1887                              <1> .wcLoop:
  1888                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1889 000030F1 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1890 000030F8 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1891 000030FC B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1892 00003101 CD21                <1>     int 21h 
  1893                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1894 00003103 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1895 00003107 488D3D(25070000)    <1>     lea rdi, renName    ;Start by copying the destination pattern
  1896 0000310E 57                  <1>     push rdi
  1897 0000310F 48A5                <1>     movsq
  1898 00003111 66A5                <1>     movsw
  1899 00003113 A4                  <1>     movsb
  1900 00003114 5F                  <1>     pop rdi
  1901 00003115 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1902 00003119 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1903                              <1> .wcNameMake:
  1904 0000311E AC                  <1>     lodsb   ;Get the char from the source string
  1905 0000311F 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1906 00003122 7502                <1>     jne .noStore    ;Dont store the char there
  1907 00003124 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1908                              <1> .noStore:
  1909 00003126 48FFC7              <1>     inc rdi ;Goto next char position
  1910 00003129 FFC9                <1>     dec ecx
  1911 0000312B 75F1                <1>     jnz .wcNameMake
  1912                              <1> ;renName now has the FCB name for the file we wish to make!
  1913                              <1> ;Now make the two paths!
  1914 0000312D 488D35(14010000)    <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1915 00003134 488B3D(15070000)    <1>     mov rdi, qword [srcPtr]
  1916 0000313B E8BF130000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1917 00003140 488D35(25070000)    <1>     lea rsi, renName
  1918 00003147 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]
  1919 0000314E E8C5140000          <1>     call FCBToAsciiz
  1920 00003153 488D15(11060000)    <1>     lea rdx, srcSpec
  1921 0000315A E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1922 0000315F B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1923 00003164 CD21                <1>     int 21h
  1924 00003166 7389                <1>     jnc .wcLoop     ;And process it too!
  1925                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00003168 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1926                              <1> .noWC:
  1927 00003169 E843150000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1928 0000316E 0FB605DACEFFFF      <1>     movzx eax, byte [arg2Off]
  1929 00003175 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1930 0000317C 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1931 0000317F 488B3D(1D070000)    <1>     mov rdi, qword [destPtr]    
  1932 00003186 E8E3140000          <1>     call cpDelimPathToBufz
  1933 0000318B 488D15(70040000)    <1>     lea rdx, searchSpec
  1934 00003192 E807000000          <1>     call .ren
  1935                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003197 73(68)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1936 00003199 E9F2E8FFFF          <1>     jmp badDupFnf   ;Always just return this
  1937                              <1> .ren:
  1938 0000319E 488D3D(93060000)    <1>     lea rdi, destSpec
  1939 000031A5 B800560000          <1>     mov eax, 5600h
  1940 000031AA CD21                <1>     int 21h
  1941                              <1>     return
    13                              <2> %%_ret:
    14 000031AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1942                              <1> 
  1943                              <1> truename:
  1944 000031AD F60597CEFFFFFF      <1>     test byte [arg1Flg], -1
  1945 000031B4 0F84C4E8FFFF        <1>     jz badArgError
  1946 000031BA E8F2140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1947 000031BF 8B05(70040000)      <1>     mov eax, dword [searchSpec]
  1948 000031C5 C1E808              <1>     shr eax, 8  ;Drop the first char 
  1949 000031C8 3C3A                <1>     cmp al, ":" ;If its not a drive letter, go search
  1950 000031CA 7523                <1>     jne .goSearch
  1951 000031CC C1E808              <1>     shr eax, 8  ;Drop the colon too
  1952 000031CF 84C0                <1>     test al, al
  1953 000031D1 740D                <1>     jz .kludge
  1954 000031D3 3A0531CEFFFF        <1>     cmp al, byte [pathSep]  ;Was path at least X:\ ?
  1955 000031D9 7514                <1>     jne .goSearch
  1956 000031DB C1E808              <1>     shr eax, 8  ;Was the path exactly X:\<NUL>?
  1957 000031DE 750F                <1>     jnz .goSearch
  1958                              <1> .kludge:
  1959 000031E0 0FB60523CEFFFF      <1>     movzx eax, byte [pathSep]
  1960 000031E7 B42E                <1>     mov ah, "." ;Add the dot to the second byte
  1961 000031E9 8905(72040000)      <1>     mov dword [searchSpec + 2], eax ;Add the pathsep, CD dot and null terminator here too
  1962                              <1> .goSearch:
  1963 000031EF 488D35(70040000)    <1>     lea rsi, searchSpec     ;Store the path here
  1964 000031F6 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1965 000031F9 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1966 000031FE CD21                <1>     int 21h
  1967 00003200 730D                <1>     jnc .writePath
  1968 00003202 3C02                <1>     cmp al, errFnf
  1969 00003204 0F847DE8FFFF        <1>     je badFileError
  1970 0000320A E95DE8FFFF          <1>     jmp badParamError
  1971                              <1> .writePath:
  1972 0000320F E8D7100000          <1>     call printCRLF
  1973 00003214 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1974 00003217 B9FFFFFFFF          <1>     mov ecx, -1
  1975 0000321C 30C0                <1>     xor al, al
  1976 0000321E F2AE                <1>     repne scasb     ;Get the new len
  1977 00003220 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1978 00003222 FFC9                <1>     dec ecx
  1979 00003224 BB01000000          <1>     mov ebx, 01
  1980 00003229 B440                <1>     mov ah, 40h
  1981 0000322B CD21                <1>     int 21h
  1982 0000322D E8B9100000          <1>     call printCRLF
  1983                              <1>     return
    13                              <2> %%_ret:
    14 00003232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1984                              <1> 
  1985                              <1> volume:
  1986                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1987 00003233 F60514CEFFFFFF      <1>     test byte [arg2Flg], -1
  1988 0000323A 0F853EE8FFFF        <1>     jnz badArgError
  1989 00003240 F60504CEFFFFFF      <1>     test byte [arg1Flg], -1
  1990 00003247 7507                <1>     jnz .notCurrentDrive
  1991 00003249 E8AC120000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1992 0000324E EB31                <1>     jmp short .dirEP
  1993                              <1> .notCurrentDrive:
  1994 00003250 E85C140000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1995 00003255 488D35(70040000)    <1>     lea rsi, searchSpec
  1996 0000325C E8DC120000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1997 00003261 66AD                <1>     lodsw                   ;Get this word
  1998 00003263 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1999 00003266 0F8512E8FFFF        <1>     jne badArgError
  2000 0000326C 8A05DBCDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2001 00003272 A8FF                <1>     test al, -1
  2002 00003274 0F85FBE7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2003 0000327A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2004 0000327F FFC8                <1>     dec eax ;Convert to 0 based number
  2005                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2006 00003281 488D1588CDFFFF      <1>     lea rdx, volFcb
  2007 00003288 FFC0                <1>     inc eax ;Get 1 based drive number
  2008 0000328A 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2009 0000328C 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2010 0000328F B800110000          <1>     mov eax, 1100h ;Find first FCB
  2011 00003294 CD21                <1>     int 21h
  2012 00003296 50                  <1>     push rax
  2013                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2014 00003297 488D15D0CEFFFF      <1>     lea rdx, crlf
  2015 0000329E B409                <1>     mov ah, 09h
  2016 000032A0 CD21                <1>     int 21h
  2017 000032A2 488D1585D1FFFF      <1>     lea rdx, volMes
  2018 000032A9 B409                <1>     mov ah, 09h
  2019 000032AB CD21                <1>     int 21h
  2020 000032AD 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2021 000032AF 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2022 000032B2 B402                <1>     mov ah, 02h
  2023 000032B4 CD21                <1>     int 21h
  2024 000032B6 58                  <1>     pop rax
  2025 000032B7 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2026 000032B9 7409                <1>     jz .volIDOk
  2027 000032BB 488D1583D1FFFF      <1>     lea rdx, volNo
  2028 000032C2 EB19                <1>     jmp short .volEndPrint
  2029                              <1> .volIDOk:
  2030 000032C4 488D1575D1FFFF      <1>     lea rdx, volOk
  2031 000032CB B409                <1>     mov ah, 09h
  2032 000032CD CD21                <1>     int 21h
  2033 000032CF C605(09010000)24    <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2034 000032D6 488D15(FE000000)    <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2035                              <1> .volEndPrint:
  2036 000032DD B409                <1>     mov ah, 09h
  2037 000032DF CD21                <1>     int 21h
  2038 000032E1 488D1586CEFFFF      <1>     lea rdx, crlf
  2039 000032E8 B409                <1>     mov ah, 09h
  2040 000032EA CD21                <1>     int 21h
  2041                              <1>     return
    13                              <2> %%_ret:
    14 000032EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2042                              <1> 
  2043                              <1> version:
  2044 000032ED 488D157ACEFFFF      <1>     lea rdx, crlf
  2045 000032F4 B409                <1>     mov ah, 09h
  2046 000032F6 CD21                <1>     int 21h
  2047 000032F8 488D151DD1FFFF      <1>     lea rdx, dosVer
  2048 000032FF B409                <1>     mov ah, 09h
  2049 00003301 CD21                <1>     int 21h
  2050 00003303 E80C000000          <1>     call .printVersionNumber
  2051 00003308 488D155FCEFFFF      <1>     lea rdx, crlf
  2052 0000330F B409                <1>     mov ah, 09h
  2053 00003311 CD21                <1>     int 21h
  2054                              <1>     return
    13                              <2> %%_ret:
    14 00003313 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2055                              <1> .printVersionNumber:
  2056 00003314 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2057 00003316 CD21                <1>     int 21h
  2058 00003318 50                  <1>     push rax
  2059 00003319 0FB6C0              <1>     movzx eax, al
  2060 0000331C E869140000          <1>     call printDecimalWord
  2061 00003321 B22E                <1>     mov dl, "."
  2062 00003323 B402                <1>     mov ah, 02h
  2063 00003325 CD21                <1>     int 21h
  2064 00003327 58                  <1>     pop rax
  2065 00003328 0FB6C4              <1>     movzx eax, ah
  2066 0000332B E85A140000          <1>     call printDecimalWord
  2067                              <1>     return
    13                              <2> %%_ret:
    14 00003330 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2068                              <1> 
  2069                              <1> 
  2070                              <1> memory:
  2071 00003331 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2072 00003336 CD21                <1>     int 21h
  2073 00003338 4885DB              <1>     test rbx, rbx
  2074 0000333B 7510                <1>     jnz .sysvarsOK
  2075 0000333D 488D15E9D3FFFF      <1>     lea rdx, memBad0
  2076 00003344 B409                <1>     mov ah, 09h
  2077 00003346 CD21                <1>     int 21h
  2078 00003348 E9E5140000          <1>     jmp freezePC.altEP
  2079                              <1> .sysvarsOK:
  2080                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2081                              <1>     ; and rcx to store Application memory
  2082 0000334D 31F6                <1>     xor esi, esi
  2083 0000334F 31FF                <1>     xor edi, edi
  2084 00003351 31ED                <1>     xor ebp, ebp
  2085 00003353 31C9                <1>     xor ecx, ecx
  2086 00003355 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2087 00003359 488B1B              <1>     mov rbx, qword [rbx]
  2088                              <1> .memLp:
  2089 0000335C 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2090 0000335F 7409                <1>     je .validMCB
  2091 00003361 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2092 00003364 0F8506010000        <1>     jne .badMCBFound
  2093                              <1> .validMCB:
  2094 0000336A 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2095 0000336D 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2096 00003371 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2097 00003379 7505                <1>     jne .notDOS
  2098 0000337B 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2099 0000337E EB21                <1>     jmp short .gotoNext
  2100                              <1> .notDOS:
  2101 00003380 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2102 00003388 7505                <1>     jne .notFree
  2103 0000338A 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2104 0000338D EB12                <1>     jmp short .gotoNext
  2105                              <1> .notFree:
  2106 0000338F 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2107 00003397 7505                <1>     jne .notHole
  2108 00003399 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2109 0000339C EB03                <1>     jmp short .gotoNext
  2110                              <1> .notHole:
  2111 0000339E 4801C1              <1>     add rcx, rax    ;Add to Application count
  2112                              <1> .gotoNext:
  2113 000033A1 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2114 000033A4 7407                <1>     je .endOfWalk
  2115 000033A6 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2116 000033AB EBAF                <1>     jmp short .memLp
  2117                              <1> .endOfWalk:
  2118                              <1>     
  2119 000033AD 488D15DAD2FFFF      <1>     lea rdx, memDOS
  2120 000033B4 B409                <1>     mov ah, 09h
  2121 000033B6 CD21                <1>     int 21h
  2122 000033B8 4889F0              <1>     mov rax, rsi
  2123 000033BB E89D000000          <1>     call .mcbPrintAmount
  2124 000033C0 488D155FD3FFFF      <1>     lea rdx, memByte
  2125 000033C7 B409                <1>     mov ah, 09h
  2126 000033C9 CD21                <1>     int 21h
  2127                              <1> 
  2128 000033CB 4885ED              <1>     test rbp, rbp
  2129 000033CE 741E                <1>     jz .skipHole
  2130 000033D0 488D1503D3FFFF      <1>     lea rdx, memHole
  2131 000033D7 B409                <1>     mov ah, 09h
  2132 000033D9 CD21                <1>     int 21h
  2133 000033DB 4889E8              <1>     mov rax, rbp
  2134 000033DE E87A000000          <1>     call .mcbPrintAmount
  2135 000033E3 488D153CD3FFFF      <1>     lea rdx, memByte
  2136 000033EA B409                <1>     mov ah, 09h
  2137 000033EC CD21                <1>     int 21h
  2138                              <1> .skipHole:
  2139                              <1> 
  2140 000033EE 488D15BFD2FFFF      <1>     lea rdx, memApp
  2141 000033F5 B409                <1>     mov ah, 09h
  2142 000033F7 CD21                <1>     int 21h
  2143 000033F9 4889C8              <1>     mov rax, rcx
  2144 000033FC E85C000000          <1>     call .mcbPrintAmount
  2145 00003401 488D151ED3FFFF      <1>     lea rdx, memByte
  2146 00003408 B409                <1>     mov ah, 09h
  2147 0000340A CD21                <1>     int 21h
  2148                              <1> 
  2149 0000340C 488D15EDD2FFFF      <1>     lea rdx, memFree
  2150 00003413 B409                <1>     mov ah, 09h
  2151 00003415 CD21                <1>     int 21h
  2152 00003417 4889F8              <1>     mov rax, rdi
  2153 0000341A E83E000000          <1>     call .mcbPrintAmount
  2154 0000341F 488D1500D3FFFF      <1>     lea rdx, memByte
  2155 00003426 B409                <1>     mov ah, 09h
  2156 00003428 CD21                <1>     int 21h
  2157                              <1> 
  2158 0000342A 488D1537D2FFFF      <1>     lea rdx, memSys
  2159 00003431 B409                <1>     mov ah, 09h
  2160 00003433 CD21                <1>     int 21h
  2161 00003435 4889F0              <1>     mov rax, rsi
  2162 00003438 4801F8              <1>     add rax, rdi
  2163 0000343B 4801C8              <1>     add rax, rcx
  2164 0000343E 4801E8              <1>     add rax, rbp
  2165 00003441 E817000000          <1>     call .mcbPrintAmount
  2166 00003446 488D15D9D2FFFF      <1>     lea rdx, memByte
  2167 0000344D B409                <1>     mov ah, 09h
  2168 0000344F CD21                <1>     int 21h
  2169                              <1> 
  2170 00003451 488D1516CDFFFF      <1>     lea rdx, crlf
  2171 00003458 B409                <1>     mov ah, 09h
  2172 0000345A CD21                <1>     int 21h
  2173                              <1>     return
    13                              <2> %%_ret:
    14 0000345C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2174                              <1> 
  2175                              <1> .mcbPrintAmount:
  2176 0000345D 51                  <1>     push rcx
  2177 0000345E 56                  <1>     push rsi
  2178 0000345F 57                  <1>     push rdi
  2179 00003460 55                  <1>     push rbp
  2180 00003461 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2181 00003466 E87F120000          <1>     call printDecimalValLB
  2182 0000346B 5D                  <1>     pop rbp
  2183 0000346C 5F                  <1>     pop rdi
  2184 0000346D 5E                  <1>     pop rsi
  2185 0000346E 59                  <1>     pop rcx
  2186                              <1>     return
    13                              <2> %%_ret:
    14 0000346F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2187                              <1> .badMCBFound:
  2188 00003470 488D15F6D2FFFF      <1>     lea rdx, memBad2
  2189 00003477 B409                <1>     mov ah, 09h
  2190 00003479 CD21                <1>     int 21h
  2191 0000347B E9B2130000          <1>     jmp freezePC.altEP
  2192                              <1> 
    23                                  %include "./src/cmdFunc2.asm"
     1                              <1> ;The second file with internal functions.
     2                              <1> ;Functions included with name and label:
     3                              <1> ;----------------------------------------------------
     4                              <1> ; LABEL         NAME
     5                              <1> ;----------------------------------------------------
     6                              <1> ; type          TYPE
     7                              <1> ; exit          EXIT
     8                              <1> ; launchChild   <LAUNCH CHILD>
     9                              <1> ; set           SET
    10                              <1> ; pathEdit      PATH
    11                              <1> ; prompt        PROMPT
    12                              <1> ; echo          ECHO
    13                              <1> ; pauza         PAUSE
    14                              <1> ; remark        REM 
    15                              <1> ; shift         SHIFT
    16                              <1> ; goto          GOTO 
    17                              <1> ; ifCmd         IF  
    18                              <1> ; forCmd        FOR
    19                              <1> ; callCmd       CALL
    20                              <1> ;----------------------------------------------------
    21                              <1> 
    22                              <1> type:
    23 00003480 F605C4CBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
    24 00003487 0F84F1E5FFFF        <1>     jz badArgError
    25 0000348D F605BACBFFFFFF      <1>     test byte [arg2Flg], -1
    26 00003494 0F85E4E5FFFF        <1>     jnz badArgError         ;If this set, error
    27 0000349A 4C8B055FCBFFFF      <1>     mov r8, [pPSP]
    28 000034A1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
    29 000034A8 0FB6059DCBFFFF      <1>     movzx eax, byte [arg1Off]
    30 000034AF 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
    31 000034B2 803E0D              <1>     cmp byte [rsi], CR
    32 000034B5 0F84C3E5FFFF        <1>     je badArgError
    33 000034BB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
    34 000034BF 750F                <1>     jne .noDrive
    35 000034C1 0FB60585CBFFFF      <1>     movzx eax, byte [arg1FCBret]
    36 000034C8 3CFF                <1>     cmp al, -1
    37 000034CA 0F84A5E5FFFF        <1>     je badDriveError
    38                              <1> .noDrive:
    39                              <1>     ;Now we open the provided file
    40 000034D0 E8DC110000          <1>     call buildCommandPath
    41 000034D5 488D15(70040000)    <1>     lea rdx, searchSpec
    42 000034DC B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
    43 000034E1 CD21                <1>     int 21h
    44 000034E3 0F829EE5FFFF        <1>     jc badFileError
    45 000034E9 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
    46 000034F0 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
    47                              <1> .lp:
    48 000034F3 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
    49 000034F8 B43F                <1>     mov ah, 3Fh ;Read handle
    50 000034FA CD21                <1>     int 21h
    51 000034FC 89C1                <1>     mov ecx, eax
    52 000034FE 67E317              <1>     jecxz .exit
    53 00003501 53                  <1>     push rbx    ;Save the original in handle
    54 00003502 BB01000000          <1>     mov ebx, 1  ;STDOUT
    55 00003507 B440                <1>     mov ah, 40h
    56 00003509 CD21                <1>     int 21h
    57 0000350B 5B                  <1>     pop rbx ;Get back the original read handle
    58 0000350C 720F                <1>     jc .exitBad
    59 0000350E 39C8                <1>     cmp eax, ecx
    60 00003510 74E1                <1>     je .lp
    61 00003512 FFC9                <1>     dec ecx ;One less for a ^Z
    62 00003514 39C8                <1>     cmp eax, ecx
    63 00003516 7505                <1>     jne .exitBad
    64                              <1> .exit:
    65 00003518 B43E                <1>     mov ah, 3Eh ;Close handle
    66 0000351A CD21                <1>     int 21h
    67                              <1>     return
    13                              <2> %%_ret:
    14 0000351C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .exitBad:
    69                              <1>     ;If it is a char device, don't print an error
    70 0000351D B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
    71 00003522 BB01000000          <1>     mov ebx, 1
    72 00003527 CD21                <1>     int 21h
    73 00003529 F6C280              <1>     test dl, devCharDev
    74                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000352C 75(1C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    75 0000352E E9E2E4FFFF          <1>     jmp badDiskFull
    76                              <1> 
    77                              <1> exit:
    78 00003533 F605(1A000000)01    <1>     test byte [statFlg1], permaShell
    79 0000353A 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
    80 0000353C F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;If perma and single command
    81 00003543 0F857FDFFFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
    82                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003549 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    83                              <1> .ouch:
    84 0000354A B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
    85 0000354F CD21                <1>     int 21h
    86                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003551 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> launchChild:
    89                              <1>     ;We execute an external command here.
    90                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
    91                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
    92                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
    93                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
    94                              <1>     ;We know the drive we are on is valid so no need to double check that!      
    95                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
    96 00003552 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
    97 00003559 4889FE              <1>     mov rsi, rdi
    98 0000355C B811120000          <1>     mov eax, 1211h  ;Normalise this path first
    99 00003561 CD2F                <1>     int 2fh
   100 00003563 E88C100000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   101 00003568 4889FE              <1>     mov rsi, rdi    ;Source here
   102 0000356B 488D3D(E6000000)    <1>     lea rdi, cmdFcb
   103 00003572 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   104 00003577 CD21                <1>     int 21h
   105 00003579 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
   106 0000357B 0F852DE5FFFF        <1>     jnz badCmdError
   107 00003581 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
   108                              <1> .pathLoop:
   109 00003584 488D35(EF000000)    <1>     lea rsi, qword [cmdFcb + fcb.fileext]
   110 0000358B 488D3D55D2FFFF      <1>     lea rdi, extStr
   111 00003592 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
   112                              <1> .extLp:
   113 00003597 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
   114 00003598 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
   115 0000359D F3A6                <1>     rep cmpsb   ;Compare the two strings
   116 0000359F 5E                  <1>     pop rsi
   117 000035A0 85C9                <1>     test ecx, ecx
   118 000035A2 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
   119 000035A4 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
   120 000035A7 FFCA                <1>     dec edx         ;Else one less extension type to check
   121 000035A9 75EC                <1>     jnz .extLp
   122                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
   123                              <1>     ;If not, error.
   124 000035AB B903000000          <1>     mov ecx, 3
   125 000035B0 4889F7              <1>     mov rdi, rsi
   126 000035B3 B020                <1>     mov al, SPC
   127 000035B5 F3AE                <1>     rep scasb   
   128 000035B7 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
   129 000035B9 0F85EFE4FFFF        <1>     jnz badCmdError    ;If not, error!
   130                              <1>     ;Now we search first with COM, then EXE, then BAT. 
   131 000035BF 488D3521D2FFFF      <1>     lea rsi, extStr
   132 000035C6 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
   133                              <1> .extSrchLp:
   134 000035CB 488D3D(EF000000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   135 000035D2 B903000000          <1>     mov ecx, 3
   136 000035D7 F3A4                <1>     rep movsb   ;Copy the extension over!
   137 000035D9 E847010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
   138 000035DE 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
   139 000035E0 FFCB                <1>     dec ebx                 ;Decrement extension counter
   140 000035E2 75E7                <1>     jnz .extSrchLp
   141                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
   142                              <1> ; we start prepending path componants and trying again. To do this, we reset
   143                              <1> ; by setting the fcb extension back to all spaces.
   144 000035E4 488D3D(EF000000)    <1>     lea rdi, qword [cmdFcb + fcb.fileext]
   145 000035EB B903000000          <1>     mov ecx, 3
   146 000035F0 B020                <1>     mov al, SPC
   147 000035F2 F3AA                <1>     rep stosb   ;Store back the empty extension!
   148 000035F4 EB71                <1>     jmp short .pathHandle
   149                              <1> .extFnd:
   150                              <1> ;Here if the file had the right extension.
   151 000035F6 E82A010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
   152 000035FB 726A                <1>     jc .pathHandle
   153                              <1> .extSrchFnd:
   154                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
   155                              <1> ; a BAT. If it is, separate handling!
   156 000035FD 803D(EF000000)42    <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
   157 00003604 0F8425DFFFFF        <1>     je batLaunch
   158 0000360A 488D1D(21010000)    <1>     lea rbx, launchBlock
   159 00003611 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
   160 00003615 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
   161 00003618 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
   162 0000361F 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
   163 00003623 498D405C            <1>     lea rax, qword [r8 + fcb1]
   164 00003627 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
   165 0000362B 498D406C            <1>     lea rax, qword [r8 + fcb2]
   166 0000362F 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
   167 00003633 488D15(C7020000)    <1>     lea rdx, cmdPathSpec
   168 0000363A B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
   169 0000363F CD21                <1>     int 21h
   170                              <1> ;If the program failed to start, verify why!
   171 00003641 B800590000          <1>     mov eax, 5900h      ;Get extended error
   172 00003646 31DB                <1>     xor ebx, ebx
   173 00003648 CD21                <1>     int 21h
   174                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   175                              <1> ; The below doesnt make any sense. Retcode is
   176                              <1> ; is not the DOS error code.
   177                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   178                              <1>     ;mov word [returnCode], ax   ;Error code from EXEC
   179                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   180 0000364A 3C05                <1>     cmp al, errAccDen   ;Access denied?
   181 0000364C 0F8411E4FFFF        <1>     je badAccError
   182 00003652 3C08                <1>     cmp al, errNoMem    ;If not enough memory, print so
   183 00003654 0F84EEE3FFFF        <1>     je badNoMemError    
   184 0000365A 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
   185 0000365C 0F84C5110000        <1>     je freezePC
   186 00003662 E947E4FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
   187                              <1> .pathHandle:        
   188                              <1> ;First check if rbp is null. If it is, its a first time entry. 
   189                              <1> ;al has error code!
   190 00003667 4885ED              <1>     test rbp, rbp
   191 0000366A 0F85A3000000        <1>     jnz .pathReentry
   192                              <1> ;Now check if the command we recieved included an absolute path.
   193                              <1> ;If so, we don't do path substitution and just fail at this point
   194 00003670 488D35(C7020000)    <1>     lea rsi, cmdPathSpec
   195 00003677 66AD                <1>     lodsw   ;Get the first two chars
   196 00003679 3A058BC9FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
   197 0000367F 0F8429E4FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   198 00003685 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
   199 00003687 7412                <1>     je .pathGetEnv
   200 00003689 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
   201 0000368C 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
   202 0000368E AC                  <1>     lodsb   ;Get the third char
   203 0000368F 3A0575C9FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
   204 00003695 0F8413E4FFFF        <1>     je badCmdError  ;Therefore, exit bad!
   205                              <1> .pathGetEnv:
   206                              <1> ;Now get a pointer to the environment and search for PATH=
   207                              <1> ;We only take the final portion of the path and add it to each path componant
   208                              <1> ;This agrees with DOS 3.3
   209 0000369B E86B120000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
   210 000036A0 0F8408E4FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
   211                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
   212                              <1>     ;Now we know we dont have to keep track of chars!!
   213 000036A6 488D3D5CD1FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
   214 000036AD E8B3120000          <1>     call searchForEnvVar
   215 000036B2 0F82F6E3FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
   216 000036B8 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
   217 000036BB 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
   218                              <1> .pathRejoin:
   219 000036C2 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
   220 000036C5 0F84E3E3FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
   221 000036CB 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
   222 000036CE 488D3D(70040000)    <1>     lea rdi, searchSpec ;Build the path in searchSpec
   223                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
   224                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
   225                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
   226                              <1>     ;This is impossible to do if env edited by COMMAND.COM
   227 000036D5 E87E0F0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
   228 000036DA 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
   229 000036DD 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
   230 000036E0 48FFCF              <1>     dec rdi ;Point to the null terminator
   231 000036E3 8A0521C9FFFF        <1>     mov al, byte [pathSep]
   232 000036E9 3847FF              <1>     cmp byte [rdi - 1], al
   233 000036EC 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
   234 000036EE AA                  <1>     stosb   ;Store a pathsep onto the null terminator
   235                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
   236 000036EF 488D35(E7000000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   237 000036F6 E81D0F0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
   238 000036FB 488D35(70040000)    <1>     lea rsi, searchSpec 
   239 00003702 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec
   240 00003709 E8F10D0000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
   241 0000370E E971FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
   242                              <1> .pathReentry:
   243 00003713 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
   244 00003717 0F8491E3FFFF        <1>     je badCmdError
   245                              <1> ;Currently, because we dont swap drives, we wont print this message.
   246                              <1> ;Not really a big deal...
   247                              <1>     ;cmp al, errBadDrv
   248                              <1>     ;jne .pathDrvOk
   249                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
   250                              <1>     ;mov eax, 0900h
   251                              <1>     ;int 21h
   252                              <1> ;.pathDrvOk:
   253 0000371D 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
   254 00003720 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
   255 00003723 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
   256                              <1> 
   257                              <1> .prepAndSearch:
   258                              <1> ;Copies over the name and extension in UC to the last componant of the 
   259                              <1> ;cmdPathSpec and null terminates. 
   260                              <1> ;Input: cmdFcb name + ext setup. 
   261                              <1> ;Output: rdx -> Filled in cmdPathSpec 
   262                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
   263 00003725 51                  <1>     push rcx
   264 00003726 56                  <1>     push rsi
   265 00003727 57                  <1>     push rdi
   266 00003728 488D3D(C7020000)    <1>     lea rdi, cmdPathSpec 
   267 0000372F 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
   268 00003732 E8BD0E0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
   269 00003737 807F013A            <1>     cmp byte [rdi + 1], ":"
   270 0000373B 7507                <1>     jne .notdriveRel
   271 0000373D 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
   272                              <1> .notdriveRel:
   273 00003744 488D35(E7000000)    <1>     lea rsi, qword [cmdFcb + fcb.filename]
   274 0000374B E8C80E0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
   275 00003750 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   276 00003755 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
   277 00003757 CD21                <1>     int 21h
   278 00003759 5F                  <1>     pop rdi
   279 0000375A 5E                  <1>     pop rsi
   280 0000375B 59                  <1>     pop rcx
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000375C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> set:
   284 0000375D F605E7C8FFFFFF      <1>     test byte [arg1Flg], -1
   285 00003764 7539                <1>     jnz .editEnv
   286                              <1>     ;Here we just print the environment.
   287 00003766 E8A0110000          <1>     call checkEnvGoodAndGet 
   288 0000376B 0F84E9E2FFFF        <1>     jz badEnvSpaceError
   289                              <1>     ;We know this is a good env so keep going! env ptr in rsi
   290 00003771 4889F7              <1>     mov rdi, rsi
   291 00003774 4889F2              <1>     mov rdx, rsi
   292                              <1> .findLp:
   293 00003777 B9FFFFFFFF          <1>     mov ecx, -1
   294 0000377C 31C0                <1>     xor eax, eax
   295                              <1> .scanLp:
   296 0000377E F2AE                <1>     repne scasb
   297 00003780 75FC                <1>     jne .scanLp
   298 00003782 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
   299                              <1>     ;Else, we now print this environment variable and CRLF it
   300                              <1>     ;rdx points to the start of the string aleady
   301                              <1>     ;ecx has the bytes to print
   302 00003784 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
   303 00003789 B800400000          <1>     mov eax, 4000h  ;Print to handle
   304 0000378E CD21                <1>     int 21h
   305 00003790 E8560B0000          <1>     call printCRLF
   306 00003795 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
   307                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003798 74(5C)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   308 0000379A 4889FA              <1>     mov rdx, rdi   
   309 0000379D EBD8                <1>     jmp short .findLp
   310                              <1> .editEnv:
   311 0000379F E867110000          <1>     call checkEnvGoodAndGet
   312 000037A4 0F84B0E2FFFF        <1>     jz badEnvSpaceError
   313 000037AA 0FB6059BC8FFFF      <1>     movzx eax, byte [arg1Off]
   314 000037B1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   315 000037B8 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
   316                              <1> .altEp:
   317 000037BB 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
   318 000037BE B00D                <1>     mov al, CR              ;Search for the CR
   319 000037C0 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
   320 000037C8 89CB                <1>     mov ebx, ecx            ;Save this count 
   321 000037CA 53                  <1>     push rbx                ;Save this count on the stack too!
   322 000037CB F2AE                <1>     repne scasb             ;Now get the length of this env string
   323 000037CD 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
   324 000037CF 66891D(56070000)    <1>     mov word [envVarSz], bx ;Store the count
   325 000037D6 59                  <1>     pop rcx                 ;Get the char count back!
   326 000037D7 89CB                <1>     mov ebx, ecx            
   327 000037D9 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
   328 000037DC B03D                <1>     mov al, "="             ;Scan for an equals sign
   329 000037DE F2AE                <1>     repne scasb
   330 000037E0 0F856BE2FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
   331 000037E6 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
   332 000037E8 66891D(58070000)    <1>     mov word [envVarNamSz], bx
   333 000037EF 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
   334 000037F2 7477                <1>     je .delEnvVar           ;Free the envvar and return
   335 000037F4 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
   336 000037F5 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   337 000037F8 E868110000          <1>     call searchForEnvVar    ;Look for the environment variable
   338 000037FD 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
   339 000037FF E88F110000          <1>     call envFree            ;Free the var in rsi
   340                              <1> .editNewEnv:
   341 00003804 E8C3110000          <1>     call getFreeSpace       ;Get the free space in env in ecx
   342 00003809 E8E3110000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
   343 0000380E 5E                  <1>     pop rsi                 ;Get back the ptr to the string
   344 0000380F 31C0                <1>     xor eax, eax            ;Prepare null length!
   345 00003811 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
   346 00003817 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
   347 0000381A 720B                <1>     jb .reallocTry          ;Try to reallocate!
   348 0000381C FFC9                <1>     dec ecx                 ;Save a byte for end magic null
   349 0000381E 663B0D(56070000)    <1>     cmp cx, word [envVarSz] ;Do we have enough space?
   350 00003825 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
   351                              <1> .reallocTry:
   352                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
   353                              <1>     ; we proceed with the environment size.
   354 00003827 E8DA110000          <1>     call growEnvBlock   ;Attempt to grow the environment
   355 0000382C 7319                <1>     jnc .reallocOk
   356 0000382E 0F8426E2FFFF        <1>     jz badEnvSpaceError    ;Max environment space
   357                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
   358                              <1>     ; partially the variable into the env. If so we do that. If the name
   359                              <1>     ; cannot fit, we don't bother
   360                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
   361 00003834 663B0D(58070000)    <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
   362                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000383B 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000383D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   363 0000383E E817E2FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
   364 00003843 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
   365 00003845 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
   366                              <1> .reallocOk:
   367                              <1>     ;Here we have all the space to just copy the full path
   368 00003847 0FB70D(56070000)    <1>     movzx ecx, word [envVarSz]
   369                              <1> .nameCp:
   370                              <1> ;Now copy over the env var, ecx = #ofchars to copy
   371                              <1> ;Always enough memory for name= here
   372 0000384E AC                  <1>     lodsb
   373 0000384F E8CE0C0000          <1>     call ucChar
   374 00003854 AA                  <1>     stosb
   375 00003855 66FFC9              <1>     dec cx      ;Always decrement this count
   376 00003858 3C3D                <1>     cmp al, "="
   377 0000385A 75F2                <1>     jne .nameCp
   378                              <1> .exitNameCp:
   379 0000385C AC                  <1>     lodsb
   380 0000385D 3C0D                <1>     cmp al, CR
   381 0000385F 7405                <1>     je .exitCp
   382 00003861 AA                  <1>     stosb
   383 00003862 FFC9                <1>     dec ecx
   384 00003864 75F6                <1>     jnz .exitNameCp
   385                              <1> .exitCp:
   386 00003866 31C0                <1>     xor eax, eax
   387 00003868 66AB                <1>     stosw   ;Store the final null word
   388                              <1>     return
    13                              <2> %%_ret:
    14 0000386A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   389                              <1> .delEnvVar:
   390                              <1>     ;rsi -> Start of the envvar name in user buffer
   391 0000386B 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
   392 0000386E E8F2100000          <1>     call searchForEnvVar    ;Look for the environment variable
   393 00003873 7205                <1>     jc .delEnvVarSkip
   394 00003875 E819110000          <1>     call envFree    ;Free the env var at rsi
   395                              <1> .delEnvVarSkip:
   396 0000387A F8                  <1>     clc             ;Clear CF if the var doesnt exist
   397                              <1>     return
    13                              <2> %%_ret:
    14 0000387B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> pathEdit:
   400                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
   401                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
   402                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
   403                              <1> ; end there. Error with too many arguments error!
   404                              <1> ;If after the equals sign there is nothing, we just print the path!
   405                              <1> ;Gotta process the command line ourselves first
   406 0000387C E88A100000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   407 00003881 0F84D3E1FFFF        <1>     jz badEnvSpaceError
   408                              <1>     ;Now we know we can use r8 to get the envptr when needed
   409 00003887 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   410 0000388E E8AD000000          <1>     call .skipPathDelimiters
   411 00003893 3C0D                <1>     cmp al, CR
   412 00003895 7466                <1>     je .printPath
   413                              <1> ;Else use the set command to setup the path in the searchSpec.
   414 00003897 56                  <1>     push rsi    ;Save the first char of the command line string
   415 00003898 488D356ACFFFFF      <1>     lea rsi, pathEVar
   416 0000389F 488D3D(70040000)    <1>     lea rdi, searchSpec
   417 000038A6 E8540C0000          <1>     call strcpy
   418 000038AB 48FFCF              <1>     dec rdi     ;Point to the terminating null
   419 000038AE 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
   420 000038AF 31C9                <1>     xor ecx, ecx    ;Make a count of chars
   421                              <1> .cpLp:
   422 000038B1 AC                  <1>     lodsb
   423 000038B2 3C0D                <1>     cmp al, CR
   424 000038B4 7411                <1>     je .cpLpExit
   425 000038B6 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
   426 000038BB 740A                <1>     je .cpLpExit
   427 000038BD E8600C0000          <1>     call ucChar ;Uppercase the char
   428 000038C2 AA                  <1>     stosb       ;Store it
   429 000038C3 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
   430 000038C5 EBEA                <1>     jmp short .cpLp
   431                              <1> .cpLpExit:
   432                              <1>     ;Remove trailing semicolons
   433 000038C7 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
   434 000038CB 7507                <1>     jne .cpLpNoIntervene
   435 000038CD FFC9                <1>     dec ecx     ;Reduce the count by one
   436 000038CF 48FFCF              <1>     dec rdi     ;Go back a char
   437 000038D2 EBF3                <1>     jmp short .cpLpExit ;Keep removing
   438                              <1> .cpLpNoIntervene:
   439 000038D4 B00D                <1>     mov al, CR  ;Now we store the terminator!
   440 000038D6 AA                  <1>     stosb       ;Store it!
   441 000038D7 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
   442 000038DD 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
   443 000038E4 FFC1                <1>     inc ecx     ;Add the CR for copying over
   444 000038E6 488D35(70040000)    <1>     lea rsi, searchSpec
   445 000038ED 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   446 000038F4 57                  <1>     push rdi
   447 000038F5 F3A4                <1>     rep movsb
   448 000038F7 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
   449 000038F8 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
   450                              <1> .printPath:
   451 000038FD 488D3D05CFFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
   452 00003904 E85C100000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
   453 00003909 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
   454 0000390B 4889F7              <1>     mov rdi, rsi        
   455 0000390E E8050C0000          <1>     call strlen         ;Get the length of the path in rdi
   456 00003913 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
   457 00003919 7411                <1>     je .noPathPrnt      ;Print no path!
   458 0000391B FFC9                <1>     dec ecx             ;Drop the terminating null from the count
   459 0000391D 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
   460 00003920 BB01000000          <1>     mov ebx, 1          ;STDOUT
   461 00003925 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
   462 0000392A EB0C                <1>     jmp short .pathExit
   463                              <1> .noPathPrnt:
   464 0000392C 488D1598CBFFFF      <1>     lea rdx, noPath
   465 00003933 B800090000          <1>     mov eax, 0900h
   466                              <1> .pathExit:
   467 00003938 CD21                <1>     int 21h
   468 0000393A E8AC090000          <1>     call printCRLF      ;Print a crlf at the end
   469                              <1>     return
    13                              <2> %%_ret:
    14 0000393F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> .skipPathDelimiters:
   471                              <1> ;Input: rsi -> Start of string to parse
   472                              <1> ;Output: rsi -> First non-delimiter char of string
   473                              <1> ;        al = First non delim char
   474 00003940 AC                  <1>     lodsb
   475 00003941 E806000000          <1>     call .isALPathDelimiter
   476 00003946 74F8                <1>     je .skipPathDelimiters
   477 00003948 48FFCE              <1>     dec rsi
   478                              <1>     return
    13                              <2> %%_ret:
    14 0000394B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> .isALPathDelimiter:
   480                              <1> ;Same as before without semicolon
   481 0000394C 3C20                <1>     cmp al, SPC
   482                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000394E 74(4B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   483 00003950 3C09                <1>     cmp al, TAB
   484                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003952 74(4B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   485 00003954 3C2C                <1>     cmp al, ","
   486                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003956 74(4B)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   487 00003958 3C3D                <1>     cmp al, "="
   488                              <1>     return
    13                              <2> %%_ret:
    14 0000395A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> prompt:
   491 0000395B E8AB0F0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
   492 00003960 0F84F4E0FFFF        <1>     jz badEnvSpaceError
   493                              <1>     ;Now we know we can use r8 to get the envptr when needed
   494 00003966 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
   495 0000396D E8CB0B0000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
   496 00003972 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
   497 00003975 742C                <1>     je .reset   ;Reset if so
   498 00003977 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
   499 00003978 488D3560CEFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
   500 0000397F 488D3D(70040000)    <1>     lea rdi, searchSpec
   501 00003986 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
   502 0000398B F3A4                <1>     rep movsb
   503 0000398D 5E                  <1>     pop rsi ;Get back ptr to the user typed line
   504 0000398E 31C9                <1>     xor ecx, ecx    ;Get char count
   505                              <1> .cp:    ;Now copy the user string over
   506 00003990 AC                  <1>     lodsb
   507 00003991 AA                  <1>     stosb 
   508 00003992 3C0D                <1>     cmp al, CR
   509 00003994 7404                <1>     je .cpOk
   510 00003996 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
   511 00003998 EBF6                <1>     jmp short .cp
   512                              <1> .cpOk:
   513 0000399A 488D35(70040000)    <1>     lea rsi, searchSpec ;Source the string from here
   514 000039A1 EB09                <1>     jmp short .goSet    ;Got the CR-less count
   515                              <1> .reset:
   516                              <1> ;Delete the environment variable!
   517 000039A3 488D3535CEFFFF      <1>     lea rsi, promptEVar 
   518 000039AA 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
   519                              <1> .goSet:
   520 000039AC 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
   521 000039B2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
   522 000039B9 FFC1                <1>     inc ecx     ;Include CR in copy
   523 000039BB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   524 000039C2 57                  <1>     push rdi
   525 000039C3 F3A4                <1>     rep movsb
   526 000039C5 5E                  <1>     pop rsi
   527 000039C6 E9F0FDFFFF          <1>     jmp set.altEp
   528                              <1> 
   529                              <1> echo:
   530 000039CB F60579C6FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
   531 000039D2 752A                <1>     jnz .argGiven
   532 000039D4 488D15ECCBFFFF      <1>     lea rdx, echoIs
   533 000039DB E812090000          <1>     call printString
   534 000039E0 488D15C3CBFFFF      <1>     lea rdx, onMes
   535 000039E7 488D0DB2CBFFFF      <1>     lea rcx, offMes
   536 000039EE F60518C6FFFFFF      <1>     test byte [echoFlg], -1
   537 000039F5 480F44D1            <1>     cmovz rdx, rcx
   538 000039F9 E9F4080000          <1>     jmp printString
   539                              <1> .argGiven:
   540 000039FE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   541 00003A05 E8330B0000          <1>     call skipDelimiters
   542 00003A0A E8B20E0000          <1>     call makeArgAsciz
   543 00003A0F E8290B0000          <1>     call skipDelimiters
   544 00003A14 803E0D              <1>     cmp byte [rsi], CR
   545 00003A17 751C                <1>     jne .directEcho
   546                              <1> ;Here if one word, check if it is ON or OFF
   547 00003A19 488D358FCBFFFF      <1>     lea rsi, onStr
   548 00003A20 E8C30E0000          <1>     call strcmp
   549 00003A25 7443                <1>     je .setOn
   550 00003A27 488D3578CBFFFF      <1>     lea rsi, offStr
   551 00003A2E E8B50E0000          <1>     call strcmp
   552 00003A33 743D                <1>     je .setOff
   553                              <1> .directEcho: 
   554 00003A35 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
   555 00003A3C 4889D6              <1>     mov rsi, rdx
   556 00003A3F E8F90A0000          <1>     call skipDelimiters ;Go to the first word on cmdline
   557 00003A44 56                  <1>     push rsi            ;Save this as the start of print
   558 00003A45 4829D6              <1>     sub rsi, rdx        ;Get how many fewer chars we have to print
   559 00003A48 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get char count
   560 00003A50 29F1                <1>     sub ecx, esi
   561 00003A52 5A                  <1>     pop rdx             ;Pop the ptr into rdx
   562 00003A53 0F8289080000        <1>     jc printCRLFecho    
   563 00003A59 BB01000000          <1>     mov ebx, 1
   564 00003A5E B800400000          <1>     mov eax, 4000h
   565 00003A63 CD21                <1>     int 21h
   566 00003A65 E981080000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
   567                              <1> .setOn:
   568 00003A6A C6059CC5FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
   569                              <1>     return
    13                              <2> %%_ret:
    14 00003A71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   570                              <1> .setOff:
   571 00003A72 C60594C5FFFF00      <1>     mov byte [echoFlg], 0
   572                              <1>     return
    13                              <2> %%_ret:
    14 00003A79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> 
   575                              <1> pauza:  ;Well... pause is an instruction in english 0:)
   576                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
   577                              <1> ; with just... the actual command tail being echoed with the command -_-
   578 00003A7A F6058CC5FFFFFF      <1>     test byte [echoFlg], -1
   579 00003A81 7528                <1>     jnz .echoTail
   580                              <1> ;Since we havent echoed the command out, type the tail out manually
   581 00003A83 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
   582 00003A8A E8AE0A0000          <1>     call skipDelimiters ;Skip leading delims
   583 00003A8F 4889F2              <1>     mov rdx, rsi
   584 00003A92 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
   585 00003A9A BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
   586 00003A9F B800400000          <1>     mov eax, 4000h  ;Write
   587 00003AA4 CD21                <1>     int 21h
   588 00003AA6 E840080000          <1>     call printCRLF
   589                              <1> .echoTail:
   590 00003AAB 488D1581C8FFFF      <1>     lea rdx, pauseMes
   591 00003AB2 E83B080000          <1>     call printString
   592 00003AB7 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
   593 00003ABC CD21                <1>     int 21h
   594 00003ABE E828080000          <1>     call printCRLF
   595                              <1> remark:
   596                              <1>     return
    13                              <2> %%_ret:
    14 00003AC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
   598                              <1> ;    test byte [statFlg1], inBatch
   599                              <1> ;    retz
   600                              <1> ;.go:
   601                              <1> ;    pop rbx
   602                              <1> ;    pop rbx ;Realign the stack back :)
   603                              <1> ;    call getSetMainState
   604                              <1> ;    jmp commandMain.inputGetAgain   ;Clean any redirs and get input
   605                              <1> 
   606                              <1> shift:
   607                              <1> ;If not in batch, immediately return!
   608 00003AC4 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   609                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003ACB 74(C3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   610 00003ACD 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]  ;Get the batch block
   611 00003AD4 488D7B13            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]
   612 00003AD8 488D7702            <1>     lea rsi, qword [rdi + 2]    ;Source from one word ahead
   613 00003ADC B909000000          <1>     mov ecx, 9
   614 00003AE1 31C0                <1>     xor eax, eax
   615                              <1> .lp:
   616 00003AE3 66AD                <1>     lodsw
   617 00003AE5 66AB                <1>     stosw
   618 00003AE7 3DFFFF0000          <1>     cmp eax, 0FFFFh   ;Once we xfer a -1 word, no more args on cmd line
   619                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003AEC 74(C3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   620 00003AEE FFC9                <1>     dec ecx
   621 00003AF0 75F1                <1>     jnz .lp
   622                              <1> ;Now we gotta scan for one more cmdline argument
   623 00003AF2 66C74325FFFF        <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], -1   ;Init a -1 at the end
   624 00003AF8 B00D                <1>     mov al, CR
   625 00003AFA 31C9                <1>     xor ecx, ecx
   626 00003AFC FFC9                <1>     dec ecx ;
   627 00003AFE 488D3C03            <1>     lea rdi, qword [rbx + rax]  ;rax has the last offset
   628 00003B02 F2AE                <1>     repne scasb ;Find CR which terminated old last argument, go past it
   629 00003B04 803F00              <1>     cmp byte [rdi], 0   ;If this is the terminating null, leave as -1
   630                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B07 74(C3)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   631 00003B09 4829DF              <1>     sub rdi, rbx    ;Get the offset from batBlockHdr
   632 00003B0C 66897B25            <1>     mov word [rbx + batBlockHdr.wArgs + 2*9], di    ;Store the difference
   633                              <1>     return
    13                              <2> %%_ret:
    14 00003B10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   634                              <1>     
   635                              <1> goto:
   636                              <1> ;If not in batch, immediately return!
   637 00003B11 F605(1A000000)08    <1>     test byte [statFlg1], inBatch
   638                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B18 74(10)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   639 00003B1A 488B2D(1B000000)    <1>     mov rbp, qword [bbPtr]
   640 00003B21 4885ED              <1>     test rbp, rbp
   641                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00003B24 74(10)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   642                              <1> ;Start by copying the command line label to fcb1
   643 00003B26 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   644 00003B2D 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
   645 00003B31 E8070A0000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
   646 00003B36 B908000000          <1>     mov ecx, 8
   647 00003B3B 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
   648 00003B3E 7503                <1>     jne .startCopy
   649 00003B40 48FFC6              <1>     inc rsi
   650                              <1> .startCopy:
   651 00003B43 AC                  <1>     lodsb
   652 00003B44 3C20                <1>     cmp al, SPC         ;Skip any spaces
   653 00003B46 74FB                <1>     je .startCopy       
   654 00003B48 3C0D                <1>     cmp al, CR          ;If CR, exit copy
   655 00003B4A 740C                <1>     je .endCopy
   656 00003B4C E8FA090000          <1>     call isALdelimiter  ;If delimiter char, exit copy
   657 00003B51 7405                <1>     jz .endCopy
   658 00003B53 AA                  <1>     stosb           
   659 00003B54 FFC9                <1>     dec ecx             ;Decrement counter
   660 00003B56 75EB                <1>     jnz .startCopy
   661                              <1> .endCopy:
   662                              <1> ;Now search the batch file for the label.
   663 00003B58 F7D9                <1>     neg ecx
   664 00003B5A 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
   665 00003B60 498D505C            <1>     lea rdx, qword [r8 + fcb1]
   666 00003B64 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
   667 00003B66 E8C7000000          <1>     call .ucChars   ;Now we UC the chars in the string
   668 00003B6B 48C7450B00000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
   669 00003B73 E83DDEFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
   670                              <1> ;File opened from the start. Now start byte by byte read.
   671                              <1> .notLabelLp:
   672 00003B78 F605(1A000000)10    <1>     test byte [statFlg1], batchEOF  
   673 00003B7F 0F859B000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
   674 00003B85 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
   675                              <1> .findLbl:
   676                              <1> ;Keep searching for a label
   677 00003B89 E85FDEFFFF          <1>     call batReadChar
   678 00003B8E 0F848C000000        <1>     jz .eof
   679 00003B94 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   680 00003B98 803A3A              <1>     cmp byte [rdx], ":"
   681 00003B9B 75EC                <1>     jne .findLbl 
   682                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
   683 00003B9D 31C9                <1>     xor ecx, ecx
   684                              <1> .loadRead:
   685 00003B9F E849DEFFFF          <1>     call batReadChar
   686 00003BA4 744D                <1>     jz .lblDone
   687 00003BA6 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
   688 00003BA8 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   689 00003BAC 3C0D                <1>     cmp al, CR
   690 00003BAE 7433                <1>     je .lblDoneCR
   691 00003BB0 3C0A                <1>     cmp al, LF
   692 00003BB2 743F                <1>     je .lblDone
   693 00003BB4 3C20                <1>     cmp al, SPC
   694 00003BB6 74E7                <1>     je .loadRead
   695 00003BB8 E88E090000          <1>     call isALdelimiter
   696 00003BBD 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
   697 00003BBF 48FFC2              <1>     inc rdx ;Inc the storage pointer
   698 00003BC2 FFC1                <1>     inc ecx ;Inc the count
   699 00003BC4 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
   700 00003BCA 75D3                <1>     jne .loadRead
   701                              <1> .pullEol:
   702 00003BCC E81CDEFFFF          <1>     call batReadChar
   703 00003BD1 7420                <1>     jz .lblDone
   704 00003BD3 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
   705 00003BD7 803A0D              <1>     cmp byte [rdx], CR
   706 00003BDA 7407                <1>     je .lblDoneCR
   707 00003BDC 803A0A              <1>     cmp byte [rdx], LF
   708 00003BDF 7412                <1>     je .lblDone
   709 00003BE1 EBE9                <1>     jmp short .pullEol
   710                              <1> .lblDoneCR:
   711                              <1> ;Read a CR, check if the next char is an LF and scan past it.
   712 00003BE3 E805DEFFFF          <1>     call batReadChar
   713 00003BE8 7409                <1>     jz .lblDone
   714 00003BEA 803A0A              <1>     cmp byte [rdx], LF
   715 00003BED 7504                <1>     jne .lblDone    ;No LF
   716                              <1> ;Else include the LF in the count to go past
   717 00003BEF 48FF450B            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
   718                              <1> .lblDone:
   719                              <1> ;Check what we have to see if it is possible to form a label
   720 00003BF3 498D506C            <1>     lea rdx, qword [r8 + fcb2]
   721 00003BF7 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
   722 00003BF9 E834000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
   723                              <1> ;Now compare the strings (trailing space padding)
   724 00003BFE 488D32              <1>     lea rsi, qword [rdx]
   725 00003C01 AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
   726 00003C02 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
   727 00003C05 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
   728 00003C09 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
   729 00003C0C 0F8566FFFFFF        <1>     jne .notLabelLp
   730 00003C12 F3A6                <1>     repe cmpsb  ;Now do a string cmp
   731 00003C14 0F855EFFFFFF        <1>     jne .notLabelLp
   732                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
   733 00003C1A E8C6DDFFFF          <1>     call batClose   ;Close the handle
   734                              <1>     return
    13                              <2> %%_ret:
    14 00003C1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1>     ;jmp remark.go   ;Now behave like rem to get the next line!
   736                              <1> .eof:
   737                              <1> ;Print label not found, end batch mode and return
   738 00003C20 488D15EFC8FFFF      <1>     lea rdx, badLbl
   739 00003C27 E8C6060000          <1>     call printString
   740 00003C2C E8E7DAFFFF          <1>     call batFinish  ;Kill the batch processor
   741                              <1>     return
    13                              <2> %%_ret:
    14 00003C31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   742                              <1> 
   743                              <1> .ucChars:
   744                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
   745                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
   746 00003C32 50                  <1>     push rax
   747 00003C33 51                  <1>     push rcx
   748 00003C34 56                  <1>     push rsi
   749                              <1> 
   750 00003C35 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
   751 00003C39 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
   752                              <1> .ucclp:
   753 00003C3C AC                  <1>     lodsb   ;Get the char
   754 00003C3D E8E0080000          <1>     call ucChar
   755 00003C42 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
   756 00003C45 FFC9                <1>     dec ecx     
   757 00003C47 75F3                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
   758                              <1>     
   759 00003C49 5E                  <1>     pop rsi
   760 00003C4A 59                  <1>     pop rcx
   761 00003C4B 58                  <1>     pop rax
   762                              <1>     return
    13                              <2> %%_ret:
    14 00003C4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> 
   764                              <1> ifCmd:
   765 00003C4D C605(72000000)00    <1>     mov byte [ifFlg], ifReset ;Reset not state
   766 00003C54 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   767 00003C5B E8730C0000          <1>     call getNextArg    ;Skip leading delimiters
   768 00003C60 4889F3              <1>     mov rbx, rsi        ;Save the possible start of string ptr (if string)
   769 00003C63 E84C0C0000          <1>     call makeAsciizAdv ;Move rsi to next word, rdi -> ASCIZ string
   770 00003C68 56                  <1>     push rsi    ;Save ptr to the next word on stack
   771 00003C69 488D35D9C9FFFF      <1>     lea rsi, notString
   772 00003C70 E8730C0000          <1>     call strcmp
   773 00003C75 5E                  <1>     pop rsi
   774 00003C76 750F                <1>     jne .chkErlvl
   775 00003C78 800D(72000000)01    <1>     or byte [ifFlg], ifNot  ;Set not on
   776 00003C7F 4889F3              <1>     mov rbx, rsi    ;Save the start of string ptr (if string)
   777 00003C82 E82D0C0000          <1>     call makeAsciizAdv     ;Goto next word
   778                              <1> .chkErlvl:
   779 00003C87 56                  <1>     push rsi    ;rsi points to the argument
   780 00003C88 488D35BEC9FFFF      <1>     lea rsi, errlvlStr
   781 00003C8F E8540C0000          <1>     call strcmp
   782 00003C94 5E                  <1>     pop rsi
   783 00003C95 0F849A000000        <1>     je .errorLvl
   784 00003C9B 56                  <1>     push rsi
   785 00003C9C 488D35B5C9FFFF      <1>     lea rsi, existStr
   786 00003CA3 E8400C0000          <1>     call strcmp
   787 00003CA8 5E                  <1>     pop rsi
   788 00003CA9 7472                <1>     je .exist
   789                              <1> ;Here we check condition string1==string2
   790                              <1> ;rsi points to the start of the string to check condition of
   791 00003CAB 4889DE              <1>     mov rsi, rbx    ;Get back the start of the string
   792 00003CAE 4889F7              <1>     mov rdi, rsi    ;Move rdi to the start of the string
   793 00003CB1 31C9                <1>     xor ecx, ecx    ;String length cnt
   794                              <1> .scCheck:
   795 00003CB3 AC                  <1>     lodsb
   796 00003CB4 3C3D                <1>     cmp al, "="
   797 00003CB6 7417                <1>     je .scEqFnd
   798 00003CB8 E88E080000          <1>     call isALdelimiter
   799 00003CBD 0F848EDDFFFF        <1>     je badSyntaxError
   800 00003CC3 3C0D                <1>     cmp al, CR
   801 00003CC5 0F8486DDFFFF        <1>     je badSyntaxError
   802 00003CCB FFC1                <1>     inc ecx         ;One more char to count
   803 00003CCD EBE4                <1>     jmp short .scCheck
   804                              <1> .scEqFnd:
   805 00003CCF AC                  <1>     lodsb   ;Move rsi to the char past this equal sign
   806 00003CD0 3C3D                <1>     cmp al, "=" ;Is the second char an equal too?
   807 00003CD2 0F8579DDFFFF        <1>     jne badSyntaxError
   808 00003CD8 F3A6                <1>     repe cmpsb  ;Compare the strings, leave rsi past string 2
   809 00003CDA 7507                <1>     jnz .cndMiss
   810                              <1> .cndHit:
   811 00003CDC 800D(72000000)02    <1>     or byte [ifFlg], ifCond ;The default condition was hit
   812                              <1> .cndMiss:
   813 00003CE3 0FB605(72000000)    <1>     movzx eax, byte [ifFlg]
   814 00003CEA 89C3                <1>     mov ebx, eax
   815 00003CEC D1EB                <1>     shr ebx, 1      ;Get bit 1 to bit 0
   816 00003CEE 2501000000          <1>     and eax, 1      ;Isolate bit 0
   817 00003CF3 31D8                <1>     xor eax, ebx    ;xor the condition hit bit with not. If 1, execute!
   818                              <1>     retz            ;Else return silently!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003CF5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003CF7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   819                              <1> ;Now rsi points to delims before the command. 
   820                              <1> ; Skip the delims and copy the argument!
   821 00003CF8 E840080000          <1>     call skipDelimiters    ;Now go to the next argument (No need for CR check)
   822 00003CFD 488D3D(C5010000)    <1>     lea rdi, qword [cLineBuffer + 2]
   823 00003D04 31C9                <1>     xor ecx, ecx
   824                              <1> .cpExitLp:
   825 00003D06 AC                  <1>     lodsb
   826 00003D07 AA                  <1>     stosb
   827 00003D08 FFC1                <1>     inc ecx ;Add a new char to the count
   828 00003D0A 3C0D                <1>     cmp al, CR
   829 00003D0C 75F8                <1>     jne .cpExitLp
   830 00003D0E FFC9                <1>     dec ecx ;Drop CR from count
   831 00003D10 880D(C4010000)      <1>     mov byte [cLineBuffer + 1], cl
   832 00003D16 58                  <1>     pop rax ;Balance the stack
   833 00003D17 58                  <1>     pop rax
   834 00003D18 E98CCDFFFF          <1>     jmp commandMain.batProceed    ;And execute the command now!
   835                              <1> .exist:
   836                              <1> ;Here we do the check for file existance
   837 00003D1D E8920B0000          <1>     call makeAsciizAdv
   838 00003D22 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   839 00003D27 4889FA              <1>     mov rdx, rdi    ;Move the ptr to rdx
   840 00003D2A B8004E0000          <1>     mov eax, 4E00h  ;Find first
   841 00003D2F CD21                <1>     int 21h
   842 00003D31 73A9                <1>     jnc .cndHit
   843 00003D33 EBAE                <1>     jmp short .cndMiss
   844                              <1> .errorLvl:
   845                              <1> ;Here we do the check for error level
   846 00003D35 E87A0B0000          <1>     call makeAsciizAdv
   847 00003D3A 4887FE              <1>     xchg rdi, rsi
   848 00003D3D E8B40A0000          <1>     call getNum     ;Get value in eax
   849 00003D42 3DFF000000          <1>     cmp eax, 255    ;Value can't be bigger than 255
   850 00003D47 0F8704DDFFFF        <1>     ja badSyntaxError
   851 00003D4D 4887FE              <1>     xchg rdi, rsi
   852 00003D50 3A05(00000000)      <1>     cmp al, byte [returnCode]
   853 00003D56 7484                <1>     je .cndHit
   854 00003D58 E986FFFFFF          <1>     jmp .cndMiss
   855                              <1> 
   856                              <1> forCmd:
   857                              <1> ;FOR %<var> IN (list) DO command
   858                              <1> ;Allocate a FOR block, parse the for command line and fill in the forBlk.
   859                              <1> ; Works by writing a new version of the commandline for each element in the
   860                              <1> ; list. If %<arg> in the command, it just executes the command n times where 
   861                              <1> ; n is the number of elements in the list.
   862 00003D5D F605(74000000)FF    <1>     test byte [forFlg], -1
   863 00003D64 0F85D0DCFFFF        <1>     jnz badForError
   864 00003D6A BB19000000          <1>     mov ebx, ((forBlk_size + 0Fh) >> 4) ;Get paras to allocate
   865 00003D6F B800480000          <1>     mov eax, 4800h  ;ALLOC
   866 00003D74 CD21                <1>     int 21h
   867 00003D76 0F82CCDCFFFF        <1>     jc badNoMemError
   868 00003D7C C605(74000000)FF    <1>     mov byte [forFlg], -1   ;Set var
   869 00003D83 488905(75000000)    <1>     mov qword [pForBlk], rax    ;Save the ptr to the ForBlk
   870 00003D8A 4889C5              <1>     mov rbp, rax            ;Move forblk ptr to rbp
   871                              <1> ;Clean the memory block for use
   872 00003D8D 4889C7              <1>     mov rdi, rax
   873 00003D90 31C0                <1>     xor eax, eax
   874 00003D92 B986010000          <1>     mov ecx, forBlk_size
   875 00003D97 F3AA                <1>     rep stosb
   876                              <1> ;Clean any pre-established redirs
   877 00003D99 E80CDCFFFF          <1>     call batKillRedir   ;Preserves rbp
   878                              <1> ;Now copy the command line to the block :)
   879 00003D9E 488D35(C3010000)    <1>     lea rsi, cLineBuffer   ;Start reading what we typed in
   880 00003DA5 488DBD95000000      <1>     lea rdi, qword [rbp + forBlk.sCmdLine]
   881 00003DAC 57                  <1>     push rdi
   882 00003DAD B982000000          <1>     mov ecx, cmdBufferL
   883 00003DB2 F3A4                <1>     rep movsb   ;And copy!
   884 00003DB4 5E                  <1>     pop rsi     ;Now source the command line from our copy! :)
   885                              <1> ;Now we parse the command line.
   886 00003DB5 4881C602000000      <1>     add rsi, 2  ;Now skip the buffer length bytes
   887 00003DBC E8120B0000          <1>     call getNextArg     ;Moves rdi to the FOR. Guaranteed to be so! 
   888                              <1> .findForLp:
   889 00003DC1 E8EE0A0000          <1>     call makeAsciizAdv  ;Move rsi to the next word (%<VAR>) [LAZY!]
   890 00003DC6 56                  <1>     push rsi
   891 00003DC7 488D3581C7FFFF      <1>     lea rsi, forStr
   892 00003DCE E8150B0000          <1>     call strcmp
   893 00003DD3 5E                  <1>     pop rsi
   894 00003DD4 75EB                <1>     jne .findForLp  ;We are guaranteed to have a FOR in the command line
   895 00003DD6 E8D90A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to IN
   896 00003DDB 803F25              <1>     cmp byte [rdi], "%"
   897 00003DDE 0F85D3000000        <1>     jne .forBadSynExit
   898 00003DE4 807F0200            <1>     cmp byte [rdi + 2], 0
   899 00003DE8 0F85C9000000        <1>     jne .forBadSynExit
   900 00003DEE 0FB64701            <1>     movzx eax, byte [rdi + 1]
   901 00003DF2 888585010000        <1>     mov byte [rbp + forBlk.bLpVar], al  ;Store the loopchar
   902 00003DF8 E8B70A0000          <1>     call makeAsciizAdv  ;Moves rdi to the buffer. rsi to "("
   903 00003DFD 56                  <1>     push rsi
   904 00003DFE 488D3559C8FFFF      <1>     lea rsi, inStr
   905 00003E05 E8DE0A0000          <1>     call strcmp
   906 00003E0A 5E                  <1>     pop rsi
   907 00003E0B 0F85A6000000        <1>     jne .forBadSynExit
   908                              <1> ;Need special handling now as "(" might be appended to element
   909 00003E11 AC                  <1>     lodsb   ;Get the byte, advance rsi past it 
   910 00003E12 3A054CC8FFFF        <1>     cmp al, byte [listOpenStr]
   911 00003E18 0F8599000000        <1>     jne .forBadSynExit
   912 00003E1E E8B00A0000          <1>     call getNextArg
   913                              <1>     ;rsi points to the first list element
   914                              <1> .argCpy:
   915 00003E23 E88C0A0000          <1>     call makeAsciizAdv  ;Move rsi to the next list element
   916                              <1> ;Now we check if this is just a ")"
   917 00003E28 0FB707              <1>     movzx eax, word [rdi]   ;Get this word
   918 00003E2B 663B0534C8FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   919 00003E32 744F                <1>     je .argCpyEnd
   920                              <1> ;Here we have a list element, rsi points to next entry in list
   921 00003E34 FE4500              <1>     inc byte [rbp + forBlk.bListc]  ;We have one more argument
   922 00003E37 488B9D85000000      <1>     mov rbx, qword [rbp + forBlk.pLstCurr]  ;Get ptr to space for list element
   923 00003E3E 4885DB              <1>     test rbx, rbx
   924 00003E41 7504                <1>     jnz .inProgress
   925                              <1> ;Here we have the first list element
   926 00003E43 488D5D01            <1>     lea rbx, qword [rbp + forBlk.sListBlk]   ;Start writing here
   927                              <1> .inProgress:
   928                              <1> ;Now check if this command is terminated with a ). If it is, end of list.
   929 00003E47 57                  <1>     push rdi
   930 00003E48 E8CB060000          <1>     call strlen ;Get the string length 
   931 00003E4D 81E902000000        <1>     sub ecx, 2     ;Drop terminating null
   932 00003E53 4801CF              <1>     add rdi, rcx    ;Point to the final char
   933 00003E56 0FB707              <1>     movzx eax, word [rdi]   ;Get this char
   934 00003E59 663B0506C8FFFF      <1>     cmp ax, word [listClosStr]  ;Was this ")"<NUL> ?
   935 00003E60 7503                <1>     jne .notEnd
   936 00003E62 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null over the ")"
   937                              <1> .notEnd:
   938 00003E65 5F                  <1>     pop rdi
   939 00003E66 56                  <1>     push rsi
   940 00003E67 4889FE              <1>     mov rsi, rdi    ;Source ASCIZ from the buffer we built in
   941 00003E6A 4889DF              <1>     mov rdi, rbx    ;Write here
   942 00003E6D E88D060000          <1>     call strcpy     ;Copy and advance pointers with terminating null
   943 00003E72 4889BD85000000      <1>     mov qword [rbp + forBlk.pLstCurr], rdi  ;Store next arg here
   944 00003E79 5E                  <1>     pop rsi
   945 00003E7A 663B05E5C7FFFF      <1>     cmp ax, word [listClosStr]  ;Check again
   946 00003E81 75A0                <1>     jne .argCpy ;If not equal, we loop again
   947                              <1> .argCpyEnd:
   948                              <1> ;rsi points to DO command here. 
   949                              <1> ;Parsed all arguments, store ptr to head of asciiz list for processing
   950 00003E83 E82C0A0000          <1>     call makeAsciizAdv  ;Move rsi to the command string
   951 00003E88 56                  <1>     push rsi
   952 00003E89 488D35D1C7FFFF      <1>     lea rsi, doStr
   953 00003E90 E8530A0000          <1>     call strcmp
   954 00003E95 5E                  <1>     pop rsi
   955 00003E96 751F                <1>     jne .forBadSynExit
   956 00003E98 4889B58D000000      <1>     mov qword [rbp + forBlk.pCmd], rsi  ;Store ptr to head of cmd string :)
   957 00003E9F 48C785850000000000- <1>     mov qword [rbp + forBlk.pLstCurr], 0 ;Signal to start from first arg
   957 00003EA8 0000                <1>
   958 00003EAA 807D0000            <1>     cmp byte [rbp + forBlk.bListc], 0   ;If the count of args 0, syntax error
   959 00003EAE 7407                <1>     je .forBadSynExit
   960 00003EB0 E836040000          <1>     call printCRLF  ;Else print CRLF to indicate command accepted 
   961 00003EB5 EB0A                <1>     jmp short forProceed    ;And go!!!!
   962                              <1> .forBadSynExit:
   963 00003EB7 E889010000          <1>     call forFree
   964 00003EBC E990DBFFFF          <1>     jmp badSyntaxError
   965                              <1> 
   966                              <1> forProceed:
   967                              <1> ;Start by getting the forblk pointer and set the FFblock immediately
   968 00003EC1 488B2D(75000000)    <1>     mov rbp, qword [pForBlk]    ;Get the ptr to the for block
   969 00003EC8 488D955A010000      <1>     lea rdx, qword [rbp + forBlk.sFFBuffer]
   970 00003ECF B8001A0000          <1>     mov eax, 1A00h  ;Set the DTA to the FFblock dta
   971 00003ED4 CD21                <1>     int 21h
   972                              <1> ;Now we ascertain whether or not we need a new list entry or use existing
   973                              <1> .longString:
   974 00003ED6 F68583000000FF      <1>     test byte [rbp + forBlk.bCmdWC], -1 ;If entry has WC, keep using
   975 00003EDD 0F8598000000        <1>     jne .ctnFor
   976                              <1> ;Here we go for a new entry! Check if we are at the start of the list.
   977 00003EE3 48F78585000000FFFF- <1>     test qword [rbp + forBlk.pLstCurr], -1    ;If null, just starting
   977 00003EEC FFFF                <1>
   978 00003EEE 7506                <1>     jnz .getNextListElement
   979                              <1> ;Here if we are starting a new for command.
   980 00003EF0 488D7501            <1>     lea rsi, qword [rbp + forBlk.sListBlk]  ;First arg is here
   981 00003EF4 EB2F                <1>     jmp short .useString
   982                              <1> .getNextListElement:
   983                              <1> ;Else get the ptr and advance it!
   984 00003EF6 C6858300000000      <1>     mov byte [rbp + forBlk.bCmdWC], 0   ;Turn off wildcard if on
   985 00003EFD 488BB585000000      <1>     mov rsi, qword [rbp + forBlk.pLstCurr]  ;Get last processed arg ptr
   986 00003F04 4889F7              <1>     mov rdi, rsi    ;Need for strlen
   987 00003F07 E80C060000          <1>     call strlen
   988 00003F0C 4801CE              <1>     add rsi, rcx    ;Goto next arg!
   989 00003F0F 0FB64D00            <1>     movzx ecx, byte [rbp + forBlk.bListc]
   990 00003F13 FE8584000000        <1>     inc byte [rbp + forBlk.bArgNum] ;We've gone to the next arg
   991 00003F19 388D84000000        <1>     cmp byte [rbp + forBlk.bArgNum], cl
   992 00003F1F 0F84CD000000        <1>     je forEnd  ;Once equal, we have processed all args. Game over!
   993                              <1> .useString:
   994                              <1> ;Now update the pointer in the block!
   995 00003F25 4889B585000000      <1>     mov qword [rbp + forBlk.pLstCurr], rsi  ;Now working on this arg.
   996                              <1> ;Now scan string for wildcards
   997 00003F2C 56                  <1>     push rsi
   998                              <1> .wcCheck:
   999 00003F2D AC                  <1>     lodsb
  1000 00003F2E 84C0                <1>     test al, al 
  1001 00003F30 740F                <1>     jz .wcCheckEnd
  1002 00003F32 3C2A                <1>     cmp al, "*"
  1003 00003F34 7404                <1>     je .wcFnd
  1004 00003F36 3C3F                <1>     cmp al, "?"
  1005 00003F38 75F3                <1>     jne .wcCheck
  1006                              <1> .wcFnd:
  1007 00003F3A C68583000000FF      <1>     mov byte [rbp + forBlk.bCmdWC], -1  ;We have wildcards!
  1008                              <1> .wcCheckEnd:
  1009                              <1> ;Here we copy the argument to the buffer (for possible expansion)
  1010 00003F41 5E                  <1>     pop rsi ;Pop back the head of the string to copy over
  1011 00003F42 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1012 00003F49 E8C0050000          <1>     call strcpy2    ;Copy w/o moving the pointers
  1013                              <1> ;rsi now can be trashed!
  1014 00003F4E B910000000          <1>     mov ecx, dirDirectory
  1015 00003F53 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1016                              <1> .searchAgain:   ;Need rdi -> Path for below
  1017 00003F58 4889FA              <1>     mov rdx, rdi    ;Move the pointer to rdx for search. 
  1018 00003F5B CD21                <1>     int 21h 
  1019 00003F5D 7297                <1>     jc .getNextListElement  ;Get next list element.
  1020 00003F5F 80BD83000000FF      <1>     cmp byte [rbp + forBlk.bCmdWC], -1  ;If no WC, use sNameBuf as is!
  1021 00003F66 7521                <1>     jne .copyCommand
  1022                              <1> ;Else, we must replace the wildcards. Cannot be in path as find first
  1023                              <1> ; doesn't resolve wildcards in path componants, only filename.
  1024 00003F68 E887060000          <1>     call findLastPathComponant  ;Point rdi to the last path componant
  1025                              <1> ;We don't need rsi pointing to the string anymore.
  1026 00003F6D 488DB578010000      <1>     lea rsi, qword [rbp + forBlk.sFFBuffer + ffBlock.asciizName]
  1027 00003F74 E895050000          <1>     call strcpy2    ;Copy w/o moving pointers
  1028 00003F79 EB0E                <1>     jmp short .copyCommand
  1029                              <1> .ctnFor:
  1030                              <1> ;If we searched a filespec with a wildcard, we come here for the next
  1031                              <1> ; in the series. forBlk.sNameBuf is not corrupted while executing a command
  1032 00003F7B B8004F0000          <1>     mov eax, 4F00h  ;Find Next file for the file found in FFBuffer
  1033 00003F80 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]  ;Need for getting last pathcomp
  1034 00003F87 EBCF                <1>     jmp short .searchAgain  ;We have a WC, get next file!
  1035                              <1> .copyCommand:
  1036                              <1> ;We substitute the string in forBlk.sNameBuf into the command line when we
  1037                              <1> ; hit a matching %<var>
  1038 00003F89 488BB58D000000      <1>     mov rsi, qword [rbp + forBlk.pCmd]  ;Copy the command line
  1039 00003F90 488D3D(C5010000)    <1>     lea rdi, qword [cLineBuffer + 2]   ;We will be writing to this buffer
  1040 00003F97 31C9                <1>     xor ecx, ecx    ;Keep track of chars we copy over
  1041                              <1> .ccLp:
  1042 00003F99 AC                  <1>     lodsb
  1043 00003F9A 3C25                <1>     cmp al, "%"     
  1044 00003F9C 7411                <1>     je .ccMeta      ;Go if metachar found!
  1045                              <1> .ccLp1:
  1046 00003F9E 3C0D                <1>     cmp al, CR
  1047 00003FA0 7444                <1>     jz .ccLpEnd     ;Exit if CR terminator found!
  1048 00003FA2 81F980000000        <1>     cmp ecx, inLen  ;If we are at space for CR w/o it then string too long.
  1049 00003FA8 743C                <1>     je .ccLpEnd     ;Truncate here
  1050 00003FAA FFC1                <1>     inc ecx         ;Else, add one more char
  1051 00003FAC AA                  <1>     stosb           ;And shove it!
  1052 00003FAD EBEA                <1>     jmp short .ccLp
  1053                              <1> .ccMeta:
  1054 00003FAF AC                  <1>     lodsb           ;Get the next char
  1055 00003FB0 3A8585010000        <1>     cmp al, byte [rbp + forBlk.bLpVar]  ;Compare if this is a var
  1056 00003FB6 75E6                <1>     jne .ccLp1  ;If not a var, strip the % and store the char directly
  1057                              <1> ;Else, here we expand!
  1058 00003FB8 56                  <1>     push rsi
  1059 00003FB9 57                  <1>     push rdi
  1060 00003FBA 89CA                <1>     mov edx, ecx    ;Save current char count in edx
  1061 00003FBC 488DBD17010000      <1>     lea rdi, qword [rbp + forBlk.sNameBuf]
  1062 00003FC3 E850050000          <1>     call strlen     ;Get replacement char count to ecx
  1063 00003FC8 FFC9                <1>     dec ecx         ;Drop the terminating null from the count
  1064 00003FCA 01CA                <1>     add edx, ecx    ;Get their sum
  1065 00003FCC 81FA80000000        <1>     cmp edx, inLen  ;Position 128 is saved for CR. sum must be less
  1066 00003FD2 7207                <1>     jb .ccOk
  1067 00003FD4 5F                  <1>     pop rdi
  1068 00003FD5 5E                  <1>     pop rsi
  1069 00003FD6 E9FBFEFFFF          <1>     jmp .longString     ;Get the next argument!
  1070                              <1> .ccOk:
  1071 00003FDB 4889FE              <1>     mov rsi, rdi    ;Source from the name buffer
  1072 00003FDE 5F                  <1>     pop rdi         ;Now get the original position to write the string in
  1073 00003FDF F3A4                <1>     rep movsb       ;Copy over the string
  1074 00003FE1 5E                  <1>     pop rsi         ;And keep sourcing cha
  1075 00003FE2 89D1                <1>     mov ecx, edx    ;Get the current count of chars back into ecx
  1076 00003FE4 EBB3                <1>     jmp short .ccLp ;And get the next char
  1077                              <1> .ccLpEnd:
  1078 00003FE6 AA                  <1>     stosb       ;Store the terminating CR
  1079 00003FE7 880D(C4010000)      <1>     mov byte [cLineBuffer + 1], cl ;Store var count here
  1080 00003FED E9C0CAFFFF          <1>     jmp commandMain.goSingle    ;And do it! :)
  1081                              <1> forEnd:
  1082 00003FF2 488DB595000000      <1>     lea rsi, qword [rbp + forBlk.sCmdLine]
  1083 00003FF9 488D3D(C3010000)    <1>     lea rdi, cLineBuffer
  1084 00004000 B982000000          <1>     mov ecx, cmdBufferL
  1085 00004005 F3A4                <1>     rep movsb   ;Zoom zoom copy the cmdline back home :)
  1086 00004007 E839000000          <1>     call forFree
  1087 0000400C 488D25(40060000)    <1>     lea rsp, stackTop   ;Reset stack ptr! Unlikely needed!
  1088                              <1> ;Since we flushed buffers and reset cmdprocessor state before entering
  1089                              <1> ; we can jump directly to get input. There cannot be any redirections as
  1090                              <1> ; redirections are interpreted as part of the command that was looped on.
  1091 00004013 E93ECAFFFF          <1>     jmp commandMain.inputGetAgain
  1092                              <1> 
  1093                              <1> forPrintCmd:
  1094 00004018 9C                  <1>     pushfq
  1095 00004019 F605(74000000)FF    <1>     test byte [forFlg], -1
  1096 00004020 7421                <1>     jz .exit    ;If not in a for, return
  1097 00004022 E849020000          <1>     call printPrompt    ;Now output prompt
  1098 00004027 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]   ;Get pre-pull cmdline!
  1099 0000402E 0FB64AFF            <1>     movzx ecx, byte [rdx - 1]    ;Get the number of chars to print
  1100 00004032 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1101 00004037 B800400000          <1>     mov eax, 4000h  ;Write woo!
  1102 0000403C CD21                <1>     int 21h
  1103 0000403E E89F020000          <1>     call printCRLFecho  ;Only print if ECHO ON. Note we have accepted input!
  1104                              <1> .exit:
  1105 00004043 9D                  <1>     popfq
  1106                              <1>     return
    13                              <2> %%_ret:
    14 00004044 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1107                              <1> 
  1108                              <1> forFree:
  1109                              <1> ;Reset FOR state. Frees the for block and clears the vars.
  1110 00004045 50                  <1>     push rax
  1111 00004046 4150                <1>     push r8
  1112 00004048 4C8B05(75000000)    <1>     mov r8, qword [pForBlk]
  1113 0000404F 4D85C0              <1>     test r8, r8
  1114 00004052 7407                <1>     jz .exit
  1115 00004054 B800490000          <1>     mov eax, 4900h  ;Free block!
  1116 00004059 CD21                <1>     int 21h
  1117                              <1> .exit:
  1118 0000405B 31C0                <1>     xor eax, eax
  1119 0000405D 488905(75000000)    <1>     mov qword [pForBlk], rax
  1120 00004064 8805(74000000)      <1>     mov byte [forFlg], al
  1121 0000406A 4158                <1>     pop r8
  1122 0000406C 58                  <1>     pop rax
  1123                              <1>     return
    13                              <2> %%_ret:
    14 0000406D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> callCmd:
  1126                              <1>     ;jmp badCmdError ;Currently report bad command :)
  1127 0000406E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Copy the command tail!
  1128 00004075 488D3D(C5010000)    <1>     lea rdi, cLineBuffer + 2
  1129 0000407C 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count of chars
  1130 00004084 884FFF              <1>     mov byte [rdi - 1], cl
  1131 00004087 FFC1                <1>     inc ecx         ;Include the CR in the copy!
  1132 00004089 F3A4                <1>     rep movsb
  1133 0000408B C605(73000000)FF    <1>     mov byte [callFlg], -1  ;In a call!
  1134 00004092 E813D9FFFF          <1>     call batKillRedir       ;Liquidates all redirs and deletes presetup files
  1135 00004097 58                  <1>     pop rax                 ;Realign stack
  1136 00004098 58                  <1>     pop rax
  1137 00004099 E90BCAFFFF          <1>     jmp commandMain.batProceed
  1138                              <1> 
  1139                              <1> callClean:
  1140                              <1> ;Frees everything but the last one. 
  1141                              <1> ;There must be a pointer in bbPtr!
  1142                              <1> ;Returns with rbx -> Last pointer
  1143 0000409E 488B1D(1B000000)    <1>     mov rbx, qword [bbPtr]
  1144 000040A5 488B4302            <1>     mov rax, qword [rbx + batBlockHdr.pLink]
  1145 000040A9 4885C0              <1>     test rax, rax
  1146                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000040AC 74(6D)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1147 000040AE 50                  <1>     push rax    ;Save the prev ptr
  1148 000040AF E8E7D8FFFF          <1>     call batFree
  1149 000040B4 8F05(1B000000)      <1>     pop qword [bbPtr]   ;Pop it into var
  1150 000040BA EBE2                <1>     jmp short callClean
  1151                              <1>     
    24                                  %include "./src/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000040BC 53                  <1>     push rbx
    11 000040BD 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000040BF 803D(7D000000)01    <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 000040C6 7244                <1>     jb .usDate
    14 000040C8 0F877C000000        <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 000040CE 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 000040D3 E8B0000000          <1>     call .printFirst
    18 000040D8 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 000040DE B402                <1>     mov ah, 02h
    20 000040E0 CD21                <1>     int 21h
    21                              <1> 
    22 000040E2 89C8                <1>     mov eax, ecx
    23 000040E4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 000040E9 C1E805              <1>     shr eax, 5
    25 000040EC E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 000040F1 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 000040F7 B402                <1>     mov ah, 02h
    29 000040F9 CD21                <1>     int 21h
    30                              <1> 
    31 000040FB 89C8                <1>     mov eax, ecx
    32 000040FD 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00004102 C1E809              <1>     shr eax, 9
    34 00004105 5B                  <1>     pop rbx ;Get the year signature back
    35 00004106 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 0000410B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 0000410C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004111 C1E805              <1>     shr eax, 5
    41 00004114 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004119 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 0000411F B402                <1>     mov ah, 02h
    45 00004121 CD21                <1>     int 21h
    46                              <1> 
    47 00004123 89C8                <1>     mov eax, ecx
    48 00004125 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000412A E875000000          <1>     call .printSecond
    50                              <1> 
    51 0000412F 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00004135 B402                <1>     mov ah, 02h
    53 00004137 CD21                <1>     int 21h
    54                              <1> 
    55 00004139 89C8                <1>     mov eax, ecx
    56 0000413B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004140 C1E809              <1>     shr eax, 9
    58 00004143 5B                  <1>     pop rbx ;Get the year signature back
    59 00004144 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 0000414A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 0000414F C1E809              <1>     shr eax, 9
    65 00004152 5B                  <1>     pop rbx ;Get the year signature back
    66 00004153 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00004158 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 0000415E B402                <1>     mov ah, 02h
    70 00004160 CD21                <1>     int 21h
    71                              <1> 
    72 00004162 89C8                <1>     mov eax, ecx
    73 00004164 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00004169 C1E805              <1>     shr eax, 5
    75 0000416C E833000000          <1>     call .printSecond
    76                              <1> 
    77 00004171 8A15(88000000)      <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00004177 B402                <1>     mov ah, 02h
    79 00004179 CD21                <1>     int 21h
    80                              <1> 
    81 0000417B 89C8                <1>     mov eax, ecx
    82 0000417D 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00004182 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00004187 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00004188 51                  <1>     push rcx
    89 00004189 E835060000          <1>     call getDecimalWord
    90 0000418E 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00004190 7504                <1>     jnz .skipSpace
    92 00004192 88CD                <1>     mov ch, cl
    93 00004194 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00004196 88CA                <1>     mov dl, cl
    96 00004198 B402                <1>     mov ah, 02h
    97 0000419A CD21                <1>     int 21h
    98 0000419C 88EA                <1>     mov dl, ch
    99 0000419E B402                <1>     mov ah, 02h
   100 000041A0 CD21                <1>     int 21h
   101 000041A2 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000041A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000041A4 51                  <1>     push rcx
   105 000041A5 E819060000          <1>     call getDecimalWord
   106 000041AA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000041AC 75E8                <1>     jnz .skipSpace
   108 000041AE 88CD                <1>     mov ch, cl
   109 000041B0 B130                <1>     mov cl, "0"
   110 000041B2 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000041B4 05BC070000          <1>     add eax, 1980
   113 000041B9 51                  <1>     push rcx
   114 000041BA 53                  <1>     push rbx
   115 000041BB E803060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000041C0 5B                  <1>     pop rbx
   117 000041C1 84DB                <1>     test bl, bl
   118 000041C3 740C                <1>     jz .twoDigitYear
   119 000041C5 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000041C7 B402                <1>     mov ah, 02h
   121 000041C9 CD21                <1>     int 21h
   122 000041CB 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000041CD B402                <1>     mov ah, 02h
   124 000041CF CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000041D1 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000041D4 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000041D6 B402                <1>     mov ah, 02h
   129 000041D8 CD21                <1>     int 21h
   130 000041DA 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 000041DC B402                <1>     mov ah, 02h
   132 000041DE CD21                <1>     int 21h
   133 000041E0 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 000041E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 000041E2 89C1                <1>     mov ecx, eax
   142 000041E4 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 000041E9 C1E80B              <1>     shr eax, 11
   144 000041EC 803D(8E000000)01    <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 000041F3 750B                <1>     jne .ampm
   146 000041F5 E85A000000          <1>     call .printHours
   147 000041FA E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 000041FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004200 3D0C000000          <1>     cmp eax, 12
   151 00004205 7713                <1>     ja .pm
   152 00004207 7416                <1>     je .pm2
   153 00004209 E846000000          <1>     call .printHours
   154 0000420E E81D000000          <1>     call .printMinutes
   155 00004213 B261                <1>     mov dl, "a"
   156 00004215 B402                <1>     mov ah, 02h
   157 00004217 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004219 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000421A 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 0000421F E830000000          <1>     call .printHours
   163 00004224 E807000000          <1>     call .printMinutes
   164 00004229 B270                <1>     mov dl, "p"
   165 0000422B B402                <1>     mov ah, 02h
   166 0000422D CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 0000422F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004230 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00004236 B402                <1>     mov ah, 02h
   171 00004238 CD21                <1>     int 21h
   172                              <1> 
   173 0000423A 89C8                <1>     mov eax, ecx
   174 0000423C 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004241 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00004244 51                  <1>     push rcx
   178 00004245 E879050000          <1>     call getDecimalWord
   179 0000424A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 0000424C 7514                <1>     jnz .skipSpace
   181 0000424E 88CD                <1>     mov ch, cl
   182 00004250 B130                <1>     mov cl, "0"
   183 00004252 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00004254 51                  <1>     push rcx
   186 00004255 E869050000          <1>     call getDecimalWord
   187 0000425A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 0000425C 7504                <1>     jnz .skipSpace
   189 0000425E 88CD                <1>     mov ch, cl
   190 00004260 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00004262 88CA                <1>     mov dl, cl
   193 00004264 B402                <1>     mov ah, 02h
   194 00004266 CD21                <1>     int 21h
   195 00004268 88EA                <1>     mov dl, ch
   196 0000426A B402                <1>     mov ah, 02h
   197 0000426C CD21                <1>     int 21h
   198 0000426E 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 0000426F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004270 F60596BDFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004277 74(6F)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00004279 488D3D5FC5FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00004280 E8E0060000          <1>     call searchForEnvVar
   206 00004285 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00004287 E8DB000000          <1>     call putCWDInPrompt
   209 0000428C E8A7000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00004291 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00004292 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00004299 AC                  <1>     lodsb   ;Get the char
   216 0000429A 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000429C 74(91)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 0000429E 3C24                <1>     cmp al, "$"
   219 000042A0 7409                <1>     je .escapeChar
   220 000042A2 88C2                <1>     mov dl, al
   221 000042A4 E8B9000000          <1>     call outChar    ;Prints the char in dl
   222 000042A9 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000042AB AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000042AC E871020000          <1>     call ucChar ;Uppercase this char in al
   226 000042B1 488D1D8FBEFFFF      <1>     lea rbx, pTbl
   227 000042B8 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000042BD 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000042BF 740D                <1>     je .escapeFnd
   231 000042C1 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000042C8 FFC9                <1>     dec ecx
   233 000042CA 75F1                <1>     jnz .escapeLp
   234 000042CC EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000042CE 488D0572BEFFFF      <1>     lea rax, pTbl              ;Get the table addr
   237 000042D5 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 000042D9 4801D8              <1>     add rax, rbx                ;Add these
   239 000042DC 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 000042DD FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 000042DF 5E                  <1>     pop rsi
   242 000042E0 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> printCRLFecho:
   245 000042E2 F60524BDFFFFFF      <1>     test byte [echoFlg], -1
   246                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000042E9 74(91)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   247                              <1> printCRLF:
   248 000042EB 488D157CBEFFFF      <1>     lea rdx, crlf
   249                              <1> printString:
   250 000042F2 B800090000          <1>     mov eax, 0900h  ;Print string
   251 000042F7 CD21                <1>     int 21h
   252                              <1>     return
    13                              <2> %%_ret:
    14 000042F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> putVersionInPrompt:
   255 000042FA 488D151BC1FFFF      <1>     lea rdx, dosVer
   256 00004301 B409                <1>     mov ah, 09h ;Print String
   257 00004303 CD21                <1>     int 21h
   258 00004305 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   259 00004307 CD21                <1>     int 21h
   260 00004309 50                  <1>     push rax    ;Save minor version
   261 0000430A E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   262 0000430F E8AE010000          <1>     call printPackedBCD ;Print al
   263 00004314 B22E                <1>     mov dl, "."
   264 00004316 B402                <1>     mov ah, 02h
   265 00004318 CD21                <1>     int 21h
   266 0000431A 58                  <1>     pop rax
   267 0000431B 88E0                <1>     mov al, ah  ;Get the minor version low
   268 0000431D E883010000          <1>     call hexToBCD
   269 00004322 E89B010000          <1>     call printPackedBCD
   270                              <1>     return
    13                              <2> %%_ret:
    14 00004327 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> putEscInPrompt:
   272 00004328 B21B                <1>     mov dl, ESC
   273 0000432A EB36                <1>     jmp short outChar
   274                              <1> 
   275                              <1> putMoneyInPrompt:
   276 0000432C B224                <1>     mov dl, "$"
   277 0000432E EB32                <1>     jmp short outChar
   278                              <1> 
   279                              <1> putEquInPrompt:
   280 00004330 B23D                <1>     mov dl, "="
   281 00004332 EB2E                <1>     jmp short outChar
   282                              <1> 
   283                              <1> putPipeInPrompt:
   284 00004334 B27C                <1>     mov dl, "|"
   285 00004336 EB2A                <1>     jmp short outChar
   286                              <1> 
   287                              <1> putGTinPrompt:
   288 00004338 B23E                <1>     mov dl, ">"
   289 0000433A EB26                <1>     jmp short outChar
   290                              <1> 
   291                              <1> putLTinPrompt:
   292 0000433C B23C                <1>     mov dl, "<"
   293 0000433E EB22                <1>     jmp short outChar
   294                              <1> 
   295                              <1> putBSPinPrompt:
   296 00004340 488D15DBC2FFFF      <1>     lea rdx, backSpace
   297 00004347 B903000000          <1>     mov ecx, 3
   298 0000434C BB01000000          <1>     mov ebx, 1
   299 00004351 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   300 00004356 CD21                <1>     int 21h
   301                              <1>     return
    13                              <2> %%_ret:
    14 00004358 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> 
   303                              <1> putDriveInPrompt:
   304 00004359 E89C010000          <1>     call getCurrentDrive
   305 0000435E 0441                <1>     add al, "A" ;Convert to letter
   306 00004360 88C2                <1>     mov dl, al
   307                              <1> outChar:
   308 00004362 B402                <1>     mov ah, 02h ;Echo to STDOUT
   309 00004364 CD21                <1>     int 21h
   310                              <1>     return
    13                              <2> %%_ret:
    14 00004366 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> putCWDInPrompt:
   312 00004367 E88E010000          <1>     call getCurrentDrive
   313 0000436C 38059ABCFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   314 00004372 C60593BCFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   315 00004379 7443                <1>     je .badDrive 
   316 0000437B 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   317 0000437D FEC2                <1>     inc dl
   318 0000437F 0441                <1>     add al, "A" ;Convert to letter
   319 00004381 B43A                <1>     mov ah, ":"
   320 00004383 488D3D(A3000000)    <1>     lea rdi, currDirStr ;Update the current directory string
   321 0000438A 66AB                <1>     stosw   ;Store X:, rdi+=2
   322 0000438C 8A0578BCFFFF        <1>     mov al, byte [pathSep]
   323 00004392 AA                  <1>     stosb   ;Store pathSep, inc rdi
   324 00004393 B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   325 00004398 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   326 0000439B CD21                <1>     int 21h
   327 0000439D 721F                <1>     jc .badDrive
   328 0000439F E874010000          <1>     call strlen
   329 000043A4 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   330                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   331 000043AA B800400000          <1>     mov eax, 4000h ;Write to handle
   332 000043AF BB01000000          <1>     mov ebx, 1  ;STDOUT
   333 000043B4 488D15(A3000000)    <1>     lea rdx, currDirStr
   334 000043BB CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 000043BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> .badDrive:
   337                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   338 000043BE 488D151FC1FFFF      <1>     lea rdx, badDrvMsg
   339 000043C5 E928FFFFFF          <1>     jmp printString
   340                              <1> printFmtTime:
   341                              <1> ;Outputs the formatted time
   342 000043CA E847000000          <1>     call getTime
   343 000043CF 0FB6C5              <1>     movzx eax, ch
   344 000043D2 E87DFEFFFF          <1>     call printTime.printHours
   345 000043D7 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   346 000043DD B402                <1>     mov ah, 02h
   347 000043DF CD21                <1>     int 21h
   348 000043E1 0FB605(0D060000)    <1>     movzx eax, byte [td1]   ;Minutes
   349 000043E8 E857FEFFFF          <1>     call printTime.printMinutesAlt
   350 000043ED 8A15(8A000000)      <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   351 000043F3 B402                <1>     mov ah, 02h
   352 000043F5 CD21                <1>     int 21h
   353 000043F7 0FB605(10060000)    <1>     movzx eax, byte [td4]   ;Seconds
   354 000043FE E841FEFFFF          <1>     call printTime.printMinutesAlt
   355 00004403 B22E                <1>     mov dl, "."
   356 00004405 B402                <1>     mov ah, 02h
   357 00004407 CD21                <1>     int 21h
   358 00004409 0FB605(0F060000)    <1>     movzx eax, byte [td3]   ;Hundreths
   359 00004410 E82FFEFFFF          <1>     call printTime.printMinutesAlt
   360                              <1>     return
    13                              <2> %%_ret:
    14 00004415 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> getTime:
   362 00004416 B42C                <1>     mov ah, 2Ch ;DOS get time
   363 00004418 CD21                <1>     int 21h
   364                              <1>     ;CH = hour (0-23)
   365                              <1> 	;CL = minutes (0-59)
   366                              <1> 	;DH = seconds (0-59)
   367                              <1> 	;DL = hundredths (0-99)
   368 0000441A 880D(0D060000)      <1>     mov byte [td1], cl
   369 00004420 882D(0E060000)      <1>     mov byte [td2], ch
   370 00004426 8815(0F060000)      <1>     mov byte [td3], dl
   371 0000442C 8835(10060000)      <1>     mov byte [td4], dh
   372                              <1>     return
    13                              <2> %%_ret:
    14 00004432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> printFmtDate:
   375                              <1> ;Outputs the formatted date
   376 00004433 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   377 00004438 CD21                <1>     int 21h
   378                              <1> 	;AL = day of the week (0=Sunday)
   379                              <1> 	;CX = year (1980-2099)
   380                              <1> 	;DH = month (1-12)
   381                              <1> 	;DL = day (1-31)
   382 0000443A 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   383 0000443F 66890D(0D060000)    <1>     mov word [td1], cx
   384 00004446 8815(0F060000)      <1>     mov byte [td3], dl
   385 0000444C 8835(10060000)      <1>     mov byte [td4], dh
   386 00004452 0FB6C0              <1>     movzx eax, al
   387 00004455 89C3                <1>     mov ebx, eax
   388 00004457 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   389 00004459 01D8                <1>     add eax, ebx ;Make it 3 times 
   390 0000445B 488D1504BFFFFF      <1>     lea rdx, dayName
   391 00004462 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   392 00004466 B903000000          <1>     mov ecx, 3  ;Print three chars
   393 0000446B BB01000000          <1>     mov ebx, 1  ;STDOUT
   394 00004470 B440                <1>     mov ah, 40h ;Write to handle
   395 00004472 CD21                <1>     int 21h
   396 00004474 B220                <1>     mov dl, " "
   397 00004476 E8E7FEFFFF          <1>     call outChar
   398                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   399                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   400                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   401 0000447B 0FB705(0D060000)    <1>     movzx eax, word [td1]   ;Get this word
   402 00004482 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   403 00004485 0FB61D(10060000)    <1>     movzx ebx, byte [td4]
   404 0000448C C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   405 0000448F 09D8                <1>     or eax, ebx ;Add this date to eax
   406 00004491 0FB61D(0F060000)    <1>     movzx ebx, byte [td3]
   407 00004498 09D8                <1>     or eax, ebx
   408 0000449A BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   409 0000449F E818FCFFFF          <1>     call printDate
   410                              <1>     return
    13                              <2> %%_ret:
    14 000044A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> 
   413                              <1> hexToBCD:
   414                              <1> ;Converts a Hex byte into two BCD digits
   415                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   416 000044A5 51                  <1>     push rcx
   417 000044A6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   418 000044A9 31C9                <1>     xor ecx, ecx
   419                              <1> .htb0:
   420 000044AB 3D0A000000          <1>     cmp eax, 10
   421 000044B0 7209                <1>     jb .htb1
   422 000044B2 2D0A000000          <1>     sub eax, 10
   423 000044B7 FFC1                <1>     inc ecx
   424 000044B9 EBF0                <1>     jmp short .htb0
   425                              <1> .htb1:
   426 000044BB C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   427 000044BE 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   428 000044C0 59                  <1>     pop rcx
   429 000044C1 C3                  <1>     ret
   430                              <1> 
   431                              <1> printPackedBCD:
   432                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   433                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   434                              <1> ;Preserves all registers
   435 000044C2 50                  <1>     push rax
   436 000044C3 52                  <1>     push rdx
   437 000044C4 88C4                <1>     mov ah, al
   438 000044C6 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   439 000044C8 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   440 000044CB 7508                <1>     jnz .upperNybble
   441 000044CD B220                <1>     mov dl, " "
   442 000044CF B402                <1>     mov ah, 02h
   443 000044D1 CD21                <1>     int 21h
   444 000044D3 EB0E                <1>     jmp short .lowerNybble
   445                              <1> .upperNybble:
   446 000044D5 50                  <1>     push rax
   447 000044D6 C0EC04              <1>     shr ah, 4
   448 000044D9 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   449 000044DC 88E2                <1>     mov dl, ah
   450 000044DE B402                <1>     mov ah, 02h ;Print DL
   451 000044E0 CD21                <1>     int 21h
   452 000044E2 58                  <1>     pop rax
   453                              <1> .lowerNybble:
   454 000044E3 0430                <1>     add al, "0"
   455 000044E5 88C2                <1>     mov dl, al
   456 000044E7 B402                <1>     mov ah, 02h ;Print DL
   457 000044E9 CD21                <1>     int 21h
   458 000044EB 5A                  <1>     pop rdx
   459 000044EC 58                  <1>     pop rax
   460                              <1>     return
    13                              <2> %%_ret:
    14 000044ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> setDrive:
   463                              <1> ;Input: dl = 0 based Drive number to set to
   464                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   465                              <1> ;AX trashed.
   466 000044EE B40E                <1>     mov ah, 0Eh ;Set drive to dl
   467 000044F0 CD21                <1>     int 21h 
   468 000044F2 E803000000          <1>     call getCurrentDrive
   469 000044F7 38D0                <1>     cmp al, dl  ;Is this the same drive?
   470                              <1>     return
    13                              <2> %%_ret:
    14 000044F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   471                              <1> getCurrentDrive:
   472                              <1> ;Returns the 0 based current drive in al
   473 000044FA B419                <1>     mov ah, 19h
   474 000044FC CD21                <1>     int 21h
   475                              <1>     return
    13                              <2> %%_ret:
    14 000044FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> strcpy:
   478                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   479                              <1> ;rsi -> Source
   480                              <1> ;rdi -> Destination
   481 000044FF 51                  <1>     push rcx
   482 00004500 57                  <1>     push rdi
   483 00004501 4889F7              <1>     mov rdi, rsi
   484 00004504 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   485 00004509 5F                  <1>     pop rdi
   486 0000450A F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   487 0000450C 59                  <1>     pop rcx
   488                              <1>     return
    13                              <2> %%_ret:
    14 0000450D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> strcpy2:
   491                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   492                              <1> ;rsi -> Source
   493                              <1> ;rdi -> Destination
   494 0000450E 56                  <1>     push rsi
   495 0000450F 57                  <1>     push rdi
   496 00004510 E8EAFFFFFF          <1>     call strcpy 
   497 00004515 5F                  <1>     pop rdi
   498 00004516 5E                  <1>     pop rsi
   499                              <1>     return
    13                              <2> %%_ret:
    14 00004517 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strlen:
   502                              <1> ;Gets the length of a ASCIIZ string
   503                              <1> ;Input: rdi = Source buffer
   504                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   505 00004518 50                  <1>     push rax
   506 00004519 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   507 0000451E CD2F                <1>     int 2fh
   508 00004520 58                  <1>     pop rax
   509                              <1>     return
    13                              <2> %%_ret:
    14 00004521 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   510                              <1> 
   511                              <1> ucChar:
   512                              <1> ;Input: al = Char to uppercase
   513                              <1> ;Output: al = Adjusted char 
   514 00004522 53                  <1>     push rbx
   515 00004523 50                  <1>     push rax    ;Push the char twice on the stack
   516 00004524 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   517 00004529 CD2F                <1>     int 2fh         ;Returns the processed char in al
   518 0000452B 5B                  <1>     pop rbx         ;Pop the old word off the stack
   519 0000452C 5B                  <1>     pop rbx
   520                              <1>     return
    13                              <2> %%_ret:
    14 0000452D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> normalisePath:
   523                              <1> ;Uppercases chars and flips pathseps
   524                              <1> ;Input: rsi -> Path to normalise
   525 0000452E 50                  <1>     push rax
   526 0000452F 57                  <1>     push rdi
   527 00004530 4889F7              <1>     mov rdi, rsi
   528 00004533 B811120000          <1>     mov eax, 1211h
   529 00004538 CD2F                <1>     int 2fh
   530 0000453A 5F                  <1>     pop rdi
   531 0000453B 58                  <1>     pop rax
   532                              <1>     return
    13                              <2> %%_ret:
    14 0000453C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> skipDelimiters:
   535                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   536                              <1> ; command delimiters but a subset thereof. 
   537                              <1> ;These are the same across all codepages.
   538                              <1> ;Input: rsi must point to the start of the data string
   539                              <1> ;Output: rsi points to the first non-delimiter char
   540 0000453D 50                  <1>     push rax
   541                              <1> .l1:
   542 0000453E AC                  <1>     lodsb
   543 0000453F E807000000          <1>     call isALdelimiter
   544 00004544 74F8                <1>     jz .l1
   545                              <1> .exit:
   546 00004546 58                  <1>     pop rax
   547 00004547 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   548                              <1>     return
    13                              <2> %%_ret:
    14 0000454A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> isALdelimiter:
   551                              <1> ;Returns: ZF=NZ if al is not a command separator 
   552                              <1> ;         ZF=ZE if al is a command separator
   553 0000454B 3C20                <1>     cmp al, " "
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 0000454D 74(4A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 0000454F 3C3B                <1>     cmp al, ";"
   556                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004551 74(4A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   557 00004553 3C3D                <1>     cmp al, "="
   558                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004555 74(4A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559 00004557 3C2C                <1>     cmp al, ","
   560                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004559 74(4A)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   561 0000455B 3C09                <1>     cmp al, TAB
   562                              <1>     return
    13                              <2> %%_ret:
    14 0000455D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> clearCommandState:
   565                              <1> ;Clears the command state
   566 0000455E 488D3DE6BAFFFF      <1>     lea rdi, cmdStatePtr
   567 00004565 B907000000          <1>     mov ecx, cmdStateL
   568 0000456A 31C0                <1>     xor eax, eax
   569 0000456C F3AA                <1>     rep stosb
   570                              <1>     return
    13                              <2> %%_ret:
    14 0000456E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> clearCommandLineState:
   573                              <1> ;Clears the command line state after a 0Dh encountered
   574 0000456F 488D3DCABAFFFF      <1>     lea rdi, cmdLineStatePtr
   575 00004576 B912000000          <1>     mov ecx, cmdLineStateL
   576 0000457B 31C0                <1>     xor eax, eax
   577 0000457D F3AA                <1>     rep stosb
   578 0000457F C705B8BAFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   578 00004588 FF                  <1>
   579 00004589 C705B4BAFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   579 00004592 FF                  <1>
   580                              <1> ;Close all handles from 5->MAX
   581 00004593 0FB70D6EBAFFFF      <1>     movzx ecx, word [numHdls]
   582 0000459A BB05000000          <1>     mov ebx, 5
   583                              <1> .lp:
   584 0000459F B43E                <1>     mov ah, 3Eh ;File close
   585 000045A1 CD21                <1>     int 21h
   586 000045A3 FFC3                <1>     inc ebx ;Goto next file
   587 000045A5 39CB                <1>     cmp ebx, ecx
   588 000045A7 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   589                              <1>     return
    13                              <2> %%_ret:
    14 000045A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> asciiFilenameToFCB:
   592                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   593                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   594                              <1> ;Also doesn't check if chars are valid
   595                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   596                              <1> ;Name is space padded.
   597                              <1> ;Input: rsi = ASCII string buffer
   598                              <1> ;       rdi = FCB name buffer
   599                              <1> ;Output: al = Char that terminated the source string 
   600 000045AA 53                  <1>     push rbx    
   601 000045AB 57                  <1>     push rdi
   602 000045AC B90B000000          <1>     mov ecx, 11
   603 000045B1 B020                <1>     mov al, " "
   604 000045B3 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   605 000045B5 5F                  <1>     pop rdi
   606 000045B6 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   607                              <1>     ;Preprocess for Dir Searches
   608 000045B9 803E2E              <1>     cmp byte [rsi], "."
   609 000045BC 7509                <1>     jne .processName
   610 000045BE A4                  <1>     movsb   ;Store the first dot
   611 000045BF 803E2E              <1>     cmp byte [rsi], "."
   612 000045C2 752C                <1>     jne .exitBadChar
   613 000045C4 A4                  <1>     movsb
   614 000045C5 EB29                <1>     jmp short .exitBadChar
   615                              <1> .processName:
   616 000045C7 AC                  <1>     lodsb   ;Get the char in al
   617 000045C8 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   618 000045CA 7426                <1>     jz .exit
   619 000045CC 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   620 000045CE 7407                <1>     je .extSpace
   621 000045D0 3C2E                <1>     cmp al, "."
   622 000045D2 740C                <1>     je .ext
   623 000045D4 AA                  <1>     stosb   ;Store the char
   624 000045D5 EBF0                <1>     jmp short .processName
   625                              <1> .extSpace:
   626                              <1> ;Now we scan for a period in the name
   627 000045D7 AC                  <1>     lodsb   ;Get a char and increase rsi
   628 000045D8 84C0                <1>     test al, al
   629 000045DA 7416                <1>     jz .exit
   630 000045DC 3C2E                <1>     cmp al, "."     ;If al is not a period...
   631 000045DE 75F7                <1>     jne .extSpace   ; keep searching
   632                              <1> .ext:
   633 000045E0 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   634                              <1> .processExt:
   635 000045E4 AC                  <1>     lodsb
   636 000045E5 84C0                <1>     test al, al
   637 000045E7 7409                <1>     jz .exit
   638 000045E9 3C20                <1>     cmp al, " "
   639 000045EB 7405                <1>     je .exit
   640 000045ED AA                  <1>     stosb
   641 000045EE EBF4                <1>     jmp short .processExt
   642                              <1> .exitBadChar:
   643 000045F0 30C0                <1>     xor al, al  ;Return a null terminator
   644                              <1> .exit:
   645 000045F2 5B                  <1>     pop rbx
   646                              <1>     return
    13                              <2> %%_ret:
    14 000045F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   647                              <1> 
   648                              <1> findLastPathComponant:
   649                              <1> ;Finds the last path componant of an ASCIIZ path string
   650                              <1> ;Input: rdi -> Head of the path to find last componant on
   651                              <1> ;Output: rdi -> Start of the last componant
   652 000045F4 50                  <1>     push rax
   653 000045F5 51                  <1>     push rcx
   654 000045F6 31C9                <1>     xor ecx, ecx
   655 000045F8 FFC9                <1>     dec ecx
   656 000045FA 31C0                <1>     xor eax, eax
   657 000045FC F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   658 000045FE F7D1                <1>     not ecx     ;This gets the count of chars  
   659 00004600 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   660 00004603 8A0501BAFFFF        <1>     mov al, byte [pathSep]
   661 00004609 FD                  <1>     std
   662 0000460A F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   663 0000460C FC                  <1>     cld
   664 0000460D 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   665 0000460F 48FFC7              <1>     inc rdi     ;Point at pathsep
   666                              <1> .exit:
   667 00004612 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   668 00004615 59                  <1>     pop rcx
   669 00004616 58                  <1>     pop rax
   670                              <1>     return
    13                              <2> %%_ret:
    14 00004617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> 
   672                              <1> FCBToAsciiz:
   673                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   674                              <1> ;Name is space padded too
   675                              <1> ;Input: rsi = FCB name buffer
   676                              <1> ;       rdi = ASCIIZ string buffer
   677 00004618 B908000000          <1>     mov ecx, 8
   678 0000461D F3A4                <1>     rep movsb   ;Move the name over
   679                              <1> .scanNameSpace:
   680 0000461F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   681 00004623 750D                <1>     jne .ext
   682 00004625 48FFCF              <1>     dec rdi
   683 00004628 FFC1                <1>     inc ecx
   684 0000462A 81F908000000        <1>     cmp ecx, 8
   685 00004630 72ED                <1>     jb .scanNameSpace
   686                              <1> .ext:
   687 00004632 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   688 00004637 7506                <1>     jne .validExt
   689 00004639 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   690 0000463D 7415                <1>     je .exit
   691                              <1> .validExt:
   692 0000463F B02E                <1>     mov al, "." ;We have a valid extension, store a period
   693 00004641 AA                  <1>     stosb
   694 00004642 B903000000          <1>     mov ecx, 3
   695 00004647 F3A4                <1>     rep movsb   ;Move the three extension chars over
   696                              <1> .scanExtSpace:
   697 00004649 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   698 0000464D 7505                <1>     jne .exit
   699 0000464F 48FFCF              <1>     dec rdi
   700 00004652 EBF5                <1>     jmp short .scanExtSpace
   701                              <1> .exit:
   702 00004654 31C0                <1>     xor eax, eax
   703 00004656 AA                  <1>     stosb   ;Store a null at the end
   704                              <1>     return
    13                              <2> %%_ret:
    14 00004657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> 
   706                              <1> cpDelimOrCtrlStringToBufz:
   707                              <1> ;Copy a delimited or control char terminated string to a buffer
   708                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   709                              <1> ;       rdi -> Buffer to store null terminated string in
   710                              <1> ;Output: rsi -> First char past string end
   711                              <1> ;       rdi -> One char past null terminator on string buffer
   712 00004658 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   713                              <1> .lp:
   714 0000465B AC                  <1>     lodsb
   715 0000465C 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   716 0000465E 760A                <1>     jbe .exit
   717 00004660 E8E6FEFFFF          <1>     call isALdelimiter
   718 00004665 7403                <1>     je .exit
   719 00004667 AA                  <1>     stosb
   720 00004668 EBF1                <1>     jmp short .lp
   721                              <1> .exit:
   722 0000466A 31C0                <1>     xor eax, eax
   723 0000466C AA                  <1>     stosb   ;Store a null terminator
   724                              <1>     return
    13                              <2> %%_ret:
    14 0000466D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   725                              <1> 
   726                              <1> 
   727                              <1> cpDelimPathToBufz:
   728                              <1> ;Copy a delimited path into buffer and null terminate.
   729                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   730                              <1> ;       rdi -> Buffer to store null terminated path in
   731                              <1> ;Output: rsi -> First char past pathname delimiter
   732                              <1> ;       rdi -> One char past null terminator on pathname buffer
   733 0000466E 53                  <1>     push rbx
   734 0000466F 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   735 00004672 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   736                              <1> .lp:
   737 00004675 AC                  <1>     lodsb   ;Get the char
   738 00004676 3C0D                <1>     cmp al, CR
   739 00004678 7412                <1>     je .gotRedirPath
   740 0000467A E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   741 0000467F 740B                <1>     jz .gotRedirPath 
   742 00004681 3A0584B9FFFF        <1>     cmp al, byte [switchChar]
   743 00004687 7403                <1>     je .gotRedirPath
   744 00004689 AA                  <1>     stosb   ;Store this char and loop next char
   745 0000468A EBE9                <1>     jmp short .lp
   746                              <1> .gotRedirPath:
   747 0000468C 50                  <1>     push rax    ;Save the char on stack
   748 0000468D 30C0                <1>     xor al, al  ;Get null terminator char
   749 0000468F 4829FB              <1>     sub rbx, rdi
   750 00004692 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   751 00004699 7412                <1>     je .notColon
   752 0000469B 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   753 000046A2 7409                <1>     je .notColon
   754 000046A4 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   755 000046A8 7503                <1>     jne .notColon
   756 000046AA 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   757                              <1> .notColon:
   758 000046AD AA                  <1>     stosb   ;Store the null terminator for the redir path
   759 000046AE 58                  <1>     pop rax ;Get back the char in al
   760 000046AF 5B                  <1>     pop rbx
   761                              <1>     return
    13                              <2> %%_ret:
    14 000046B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   762                              <1> 
   763                              <1> buildCommandPath:
   764                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   765 000046B1 0FB60594B9FFFF      <1>     movzx eax, byte [arg1Off]
   766 000046B8 4C8B0541B9FFFF      <1>     mov r8, [pPSP]
   767 000046BF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   768 000046C6 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   769                              <1> copyArgumentToSearchSpec:
   770                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   771                              <1> ; and null terminates
   772 000046C9 488D3D(70040000)    <1>     lea rdi, searchSpec
   773 000046D0 E899FFFFFF          <1>     call cpDelimPathToBufz
   774                              <1>     return
    13                              <2> %%_ret:
    14 000046D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> scanForWildcards:
   777                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   778                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   779 000046D6 50                  <1>     push rax
   780 000046D7 56                  <1>     push rsi
   781                              <1> .lp:
   782 000046D8 AC                  <1>     lodsb
   783 000046D9 3C3F                <1>     cmp al, "?"
   784 000046DB 740A                <1>     je .exit
   785 000046DD 3C2A                <1>     cmp al, "*"
   786 000046DF 7406                <1>     je .exit
   787 000046E1 84C0                <1>     test al, al
   788 000046E3 75F3                <1>     jnz .lp
   789 000046E5 FEC0                <1>     inc al  ;This will clear the ZF
   790                              <1> .exit:
   791 000046E7 5E                  <1>     pop rsi
   792 000046E8 58                  <1>     pop rax
   793                              <1>     return
    13                              <2> %%_ret:
    14 000046E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> 
   795                              <1> printDecimalValLB:
   796                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   797                              <1> ; blanks and inserts commas where appropriate.
   798                              <1> ;Input: rax = Value to print
   799                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   800 000046EA 4889E5              <1>     mov rbp, rsp
   801 000046ED 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   802 000046F0 4889EF              <1>     mov rdi, rbp
   803 000046F3 4829CF              <1>     sub rdi, rcx
   804 000046F6 50                  <1>     push rax
   805 000046F7 51                  <1>     push rcx
   806 000046F8 57                  <1>     push rdi
   807 000046F9 31C0                <1>     xor eax, eax
   808 000046FB F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   809 000046FD 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   810 000046FE 59                  <1>     pop rcx
   811 000046FF 58                  <1>     pop rax
   812 00004700 51                  <1>     push rcx    ;Save this value to keep the buffer length
   813 00004701 E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   814 00004706 59                  <1>     pop rcx     ;Now print the buffer
   815 00004707 4889EF              <1>     mov rdi, rbp
   816 0000470A 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   817 0000470D 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   818                              <1> .skipLp:
   819 0000470F 8A1F                <1>     mov bl, byte [rdi]
   820 00004711 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   821 00004713 7513                <1>     jne .printLp
   822 00004715 B402                <1>     mov ah, 02h
   823 00004717 B220                <1>     mov dl, " "
   824 00004719 CD21                <1>     int 21h
   825 0000471B 48FFCF              <1>     dec rdi
   826 0000471E FFC9                <1>     dec ecx
   827 00004720 81F901000000        <1>     cmp ecx, 1
   828 00004726 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   829                              <1> .printLp:
   830 00004728 8A17                <1>     mov dl, byte [rdi]
   831 0000472A B402                <1>     mov ah, 02h
   832 0000472C CD21                <1>     int 21h
   833 0000472E 48FFCF              <1>     dec rdi
   834 00004731 FFC9                <1>     dec ecx
   835 00004733 75F3                <1>     jnz .printLp
   836                              <1> .exit:
   837 00004735 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   838                              <1>     return
    13                              <2> %%_ret:
    14 00004738 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> .errPrint:
   840                              <1> ;Print a default ? symbol if an overflow occurs.
   841 00004739 B23F                <1>     mov dl, "?"
   842 0000473B B800020000          <1>     mov eax, 0200h
   843 00004740 CD21                <1>     int 21h
   844 00004742 EBF1                <1>     jmp short .exit
   845                              <1> 
   846                              <1> decimalise:
   847                              <1> ;Input: rax = value to decimalise
   848                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   849                              <1> ;       ecx = buffer length
   850                              <1> ;Output: Buffer @ rdi filled in! 
   851                              <1> ;       ecx = Number of chars in buffer.
   852                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   853                              <1> ;   we return with CF=CY. Else, CF=NC.
   854 00004744 57                  <1>     push rdi
   855 00004745 89CE                <1>     mov esi, ecx    
   856 00004747 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   857 00004749 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   858                              <1> .lp:
   859 0000474E 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   860 00004751 7514                <1>     jne .skipSep
   861 00004753 4038CE              <1>     cmp sil, cl
   862 00004756 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   863 00004758 8A15(84000000)      <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   864 0000475E 8817                <1>     mov byte [rdi], dl
   865 00004760 48FFC7              <1>     inc rdi 
   866 00004763 FEC1                <1>     inc cl          ;Inc number of chars
   867 00004765 30ED                <1>     xor ch, ch      ;Reset comma counter
   868                              <1> .skipSep:
   869 00004767 4038CE              <1>     cmp sil, cl
   870 0000476A 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   871 0000476C 31D2                <1>     xor edx, edx
   872 0000476E 48F7F3              <1>     div rbx         ;Divide rax by 10
   873 00004771 80C230              <1>     add dl, "0"     
   874 00004774 8817                <1>     mov byte [rdi], dl
   875 00004776 48FFC7              <1>     inc rdi
   876 00004779 FEC1                <1>     inc cl          ;Inc number of chars
   877 0000477B FEC5                <1>     inc ch          ;Inc to keep track of commas
   878 0000477D 4885C0              <1>     test rax, rax
   879 00004780 75CC                <1>     jnz .lp
   880                              <1> ;The test cleared CF if we are here
   881 00004782 0FB6C9              <1>     movzx ecx, cl
   882                              <1> .exit:
   883 00004785 5F                  <1>     pop rdi
   884                              <1>     return
    13                              <2> %%_ret:
    14 00004786 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> .exitErr:
   886 00004787 F9                  <1>     stc
   887 00004788 EBFB                <1>     jmp short .exit
   888                              <1> printDecimalWord:
   889                              <1> ;Takes a word in ax and print it's decimal representation.
   890                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   891                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   892                              <1> ;Input: eax = Zero extended word to print
   893 0000478A 31C9                <1>     xor ecx, ecx
   894 0000478C 85C0                <1>     test eax, eax
   895 0000478E 750C                <1>     jnz .notZero
   896 00004790 B930000000          <1>     mov ecx, "0"
   897 00004795 BD01000000          <1>     mov ebp, 1  ;Print one digit
   898 0000479A EB19                <1>     jmp short .goPrint
   899                              <1> .notZero:
   900 0000479C 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   901 0000479E BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   902                              <1> .mainLp:
   903 000047A3 FFC5                <1>     inc ebp
   904 000047A5 C1E108              <1>     shl ecx, 8    ;Space for next nybble
   905 000047A8 31D2                <1>     xor edx, edx
   906 000047AA F7F6                <1>     div esi
   907 000047AC 80C230              <1>     add dl, '0'
   908 000047AF 88D1                <1>     mov cl, dl    ;Save remainder byte
   909 000047B1 85C0                <1>     test eax, eax   ;We zero yet?
   910 000047B3 75EE                <1>     jnz .mainLp
   911                              <1> .goPrint:
   912 000047B5 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   913 000047B7 C1E908              <1>     shr ecx, 8    ;Get next digit down
   914 000047BA B402                <1>     mov ah, 02h
   915 000047BC CD21                <1>     int 21h
   916 000047BE FFCD                <1>     dec ebp
   917 000047C0 75F3                <1>     jnz .goPrint
   918                              <1>     return
    13                              <2> %%_ret:
    14 000047C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   919                              <1> 
   920                              <1> getDecimalWord:
   921                              <1> ;Works on MAX A dword in eax
   922                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   923 000047C3 31C9                <1>     xor ecx, ecx
   924 000047C5 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   925 000047C7 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   926                              <1> .dpfb0:
   927 000047CC FFC5                <1>     inc ebp
   928 000047CE 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   929 000047D2 31D2                <1>     xor edx, edx
   930 000047D4 48F7F3              <1>     div rbx
   931 000047D7 80C230              <1>     add dl, '0'
   932 000047DA 80FA39              <1>     cmp dl, '9'
   933 000047DD 7603                <1>     jbe .dpfb1
   934 000047DF 80C207              <1>     add dl, 'A'-'0'-10
   935                              <1> .dpfb1:
   936 000047E2 88D1                <1>     mov cl, dl    ;Save remainder byte
   937 000047E4 4885C0              <1>     test rax, rax
   938 000047E7 75E3                <1>     jnz .dpfb0
   939                              <1>     return
    13                              <2> %%_ret:
    14 000047E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> getByte:
   941                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   942 000047EA E807000000          <1>     call getNum
   943 000047EF 3D00010000          <1>     cmp eax, 100h
   944 000047F4 F5                  <1>     cmc
   945                              <1>     return
    13                              <2> %%_ret:
    14 000047F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   946                              <1> getNum:
   947                              <1> ;Gets a number from a command line.
   948                              <1> ;Input: rsi -> String to get number from
   949                              <1> ;Output: rsi -> Char which terminated the accumulation
   950                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   951                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   952 000047F6 51                  <1>     push rcx
   953 000047F7 53                  <1>     push rbx
   954 000047F8 31DB                <1>     xor ebx, ebx
   955 000047FA 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   956 000047FC 31C0                <1>     xor eax, eax    
   957                              <1> .lp:
   958 000047FE AC                  <1>     lodsb
   959 000047FF 3C30                <1>     cmp al, "0"
   960 00004801 721B                <1>     jb .exit
   961 00004803 3C39                <1>     cmp al, "9"
   962 00004805 7717                <1>     ja .exit
   963 00004807 2C30                <1>     sub al, "0"                     ;Convert to binary 
   964 00004809 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   965 0000480D D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   966 0000480F 01C1                <1>     add ecx, eax
   967 00004811 FFC3                <1>     inc ebx
   968 00004813 81FB09000000        <1>     cmp ebx, 9
   969 00004819 75E3                <1>     jne short .lp   ;Get next digit
   970 0000481B F9                  <1>     stc             ;Yikesaroony
   971 0000481C EB01                <1>     jmp short .exitBad
   972                              <1> .exit:
   973 0000481E F8                  <1>     clc             ;Clear CF
   974                              <1> .exitBad:
   975 0000481F 89C8                <1>     mov eax, ecx
   976 00004821 5B                  <1>     pop rbx
   977 00004822 59                  <1>     pop rcx
   978 00004823 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   979                              <1>     return
    13                              <2> %%_ret:
    14 00004826 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> 
   982                              <1> freezePC:
   983 00004827 488D1525BFFFFF      <1>     lea rdx, memBad1
   984 0000482E B409                <1>     mov ah, 09h
   985 00004830 CD21                <1>     int 21h
   986                              <1> .altEP:
   987 00004832 488D1543BFFFFF      <1>     lea rdx, memBad3
   988 00004839 B409                <1>     mov ah, 09h
   989 0000483B CD21                <1>     int 21h
   990                              <1> .lp:
   991 0000483D F390                <1>     pause
   992 0000483F F4                  <1>     hlt
   993 00004840 EBFB                <1>     jmp short .lp
   994                              <1> 
   995                              <1> setDTA:
   996 00004842 50                  <1>     push rax
   997 00004843 52                  <1>     push rdx
   998 00004844 488D15(F6000000)    <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   999 0000484B B8001A0000          <1>     mov eax, 1A00h
  1000 00004850 CD21                <1>     int 21h
  1001 00004852 5A                  <1>     pop rdx
  1002 00004853 58                  <1>     pop rax
  1003                              <1>     return
    13                              <2> %%_ret:
    14 00004854 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1004                              <1> 
  1005                              <1> getDTA:
  1006 00004855 488D15(F6000000)    <1>     lea rdx, cmdFFBlock
  1007                              <1>     return
    13                              <2> %%_ret:
    14 0000485C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> 
  1009                              <1> resetNation:
  1010                              <1> ;(Re)sets the country and switchar data
  1011 0000485D B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
  1012 00004862 CD21                <1>     int 21h
  1013 00004864 3CFF                <1>     cmp al, -1
  1014 00004866 7412                <1>     je .skipSwitch
  1015 00004868 88159DB7FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
  1016 0000486E 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
  1017 00004871 7507                <1>     jne .skipSwitch
  1018 00004873 C60590B7FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
  1019                              <1> .skipSwitch:
  1020 0000487A B800380000          <1>     mov eax, 3800h  ;Get current country data
  1021 0000487F 488D15(7D000000)    <1>     lea rdx, ctryData
  1022 00004886 CD21                <1>     int 21h ;Write the data to the internal country table 
  1023                              <1>     return
    13                              <2> %%_ret:
    14 00004888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> 
  1025                              <1> resetIDTentries:
  1026                              <1> ;Resets the IDT entries if they were changed by dead child process
  1027 00004889 488D15B7020000      <1>     lea rdx, critErrorHandler
  1028 00004890 B824250000          <1>     mov eax, 2524h
  1029 00004895 CD21                <1>     int 21h
  1030 00004897 488D15B3010000      <1>     lea rdx, ctrlCHandler
  1031 0000489E B823250000          <1>     mov eax, 2523h
  1032 000048A3 CD21                <1>     int 21h
  1033 000048A5 488D15F2C5FFFF      <1>     lea rdx, appRet
  1034 000048AC B822250000          <1>     mov eax, 2522h
  1035 000048B1 CD21                <1>     int 21h
  1036                              <1>     return
    13                              <2> %%_ret:
    14 000048B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1037                              <1> 
  1038                              <1> ;------------------------
  1039                              <1> ;   For/If routines
  1040                              <1> ;------------------------
  1041                              <1> makeAsciizAdv:
  1042                              <1> ;Input: rsi -> Non delimiter char string
  1043                              <1> ;Output: rsi -> Next substring past delimiters
  1044                              <1> ;       rdi -> ASCIIZ version of the string we just passed
  1045 000048B4 58                  <1>     pop rax ;Align the stack so if we hit a CR its getNextArg doesnt crash
  1046 000048B5 E807000000          <1>     call makeArgAsciz      ;Get in rdi -> ASCIZ argument. rsi -> terminator
  1047 000048BA E814000000          <1>     call getNextArg        ;rsi -> Command
  1048 000048BF FFE0                <1>     jmp rax                 ;Go to this address now
  1049                              <1> 
  1050                              <1> makeArgAsciz:
  1051                              <1> ;Creates a null terminated string in the search spec.
  1052                              <1> ;Input: rsi -> String to copy with null terminator
  1053                              <1> ;Ouput: rsi -> Terminator
  1054                              <1> ;       rdi -> Search Spec with filled ASCIZ string
  1055 000048C1 50                  <1>     push rax    ;Preserve rax
  1056 000048C2 E802FEFFFF          <1>     call copyArgumentToSearchSpec
  1057 000048C7 58                  <1>     pop rax
  1058 000048C8 488D3D(70040000)    <1>     lea rdi, searchSpec
  1059 000048CF 48FFCE              <1>     dec rsi     ;Point back to the delimiter char
  1060                              <1>     return
    13                              <2> %%_ret:
    14 000048D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1061                              <1> 
  1062                              <1> getNextArg:
  1063                              <1> ;Moves rsi to the first next element. If a CR is encountered, it exits
  1064                              <1> ;Input: rsi -> String
  1065                              <1> ;Output: rsi -> First non delimiter char after initial position
  1066 000048D3 E865FCFFFF          <1>     call skipDelimiters     ;Preserves rax
  1067 000048D8 803E0D              <1>     cmp byte [rsi], CR
  1068                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 000048DB 75(D2)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1069 000048DD E863F7FFFF          <1>     call forFree    ;Harmless if used in IF. Registers preserved.
  1070 000048E2 58                  <1>     pop rax ;Pop the return address off the stack
  1071 000048E3 E969D1FFFF          <1>     jmp badSyntaxError  ;And jump error out
  1072                              <1> 
  1073                              <1> strcmp:
  1074 000048E8 B81E120000          <1>     mov eax, 121Eh
  1075 000048ED CD2F                <1>     int 2fh
  1076                              <1>     return
    13                              <2> %%_ret:
    14 000048EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> 
  1079                              <1> ;-------------------------------
  1080                              <1> ; Environment utility functions
  1081                              <1> ;-------------------------------
  1082                              <1> 
  1083                              <1> cmpEnvVar:
  1084                              <1> ;Checks that we have found the environment variable we are looking for.
  1085                              <1> ;Input: rsi -> Environment var to verify the name of
  1086                              <1> ;       rdi -> Supplied var name to compare against
  1087                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1088 000048F0 56                  <1>     push rsi
  1089 000048F1 57                  <1>     push rdi
  1090 000048F2 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1091                              <1> .lp:
  1092 000048F5 AC                  <1>     lodsb               ;Pick up from environment string
  1093 000048F6 E827FCFFFF          <1>     call ucChar         ;Upper case it!
  1094 000048FB 3807                <1>     cmp byte [rdi], al  
  1095 000048FD 7509                <1>     jne .exit
  1096 000048FF 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1097 00004901 7405                <1>     je .exit
  1098 00004903 48FFC7              <1>     inc rdi
  1099 00004906 EBED                <1>     jmp short .lp
  1100                              <1> .exit:
  1101 00004908 5F                  <1>     pop rdi
  1102 00004909 5E                  <1>     pop rsi
  1103                              <1>     return
    13                              <2> %%_ret:
    14 0000490A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1104                              <1> 
  1105                              <1> checkEnvGoodAndGet:
  1106                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1107                              <1> ;Output:
  1108                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1109                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1110                              <1> ;           rsi -> Environment pointer
  1111 0000490B 50                  <1>     push rax
  1112 0000490C 51                  <1>     push rcx
  1113 0000490D 57                  <1>     push rdi
  1114 0000490E 4150                <1>     push r8
  1115 00004910 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1116 00004914 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1117 00004917 741A                <1>     jz .badExit
  1118 00004919 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1119 0000491C C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1120                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1121 0000491F 31C0                <1>     xor eax, eax
  1122                              <1> .pathNulScan:
  1123 00004921 F2AE                <1>     repne scasb
  1124 00004923 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1125 00004925 740C                <1>     jz .badExit
  1126 00004927 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1127 00004929 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1128 0000492B 31C0                <1>     xor eax, eax
  1129 0000492D FFC0                <1>     inc eax ;Clear the ZF
  1130 0000492F 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1131                              <1> .badExit:
  1132 00004933 4158                <1>     pop r8
  1133 00004935 5F                  <1>     pop rdi
  1134 00004936 59                  <1>     pop rcx
  1135 00004937 58                  <1>     pop rax
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00004938 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> 
  1139                              <1> findEnvSpace:
  1140                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1141                              <1> ; free space in the pointer and a count of free space in the environment.
  1142                              <1> ;If count is zero, pointer is not to be used.
  1143                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1144 00004939 31C9                <1>     xor ecx, ecx
  1145 0000493B 31C0                <1>     xor eax, eax    ;Clear eax too
  1146 0000493D 51                  <1>     push rcx
  1147 0000493E E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1148 00004943 59                  <1>     pop rcx
  1149                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00004944 74(38)              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1150 00004946 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1151 0000494A FFC9                <1>     dec ecx ;Make into a large counter
  1152 0000494C 4889F7              <1>     mov rdi, rsi    
  1153                              <1> .endsearch:
  1154 0000494F F2AE                <1>     repne scasb ;Scan
  1155 00004951 803F00              <1>     cmp byte [rdi], 0
  1156 00004954 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1157                              <1>     ;Here we are at the end of the environment
  1158 00004956 F7D9                <1>     neg ecx
  1159 00004958 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1160 0000495A 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1161 0000495D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1162 00004960 29C8                <1>     sub eax, ecx
  1163 00004962 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1164                              <1>     return
    13                              <2> %%_ret:
    14 00004964 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1165                              <1> 
  1166                              <1> searchForEnvVar:
  1167                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1168                              <1> ;Input: rdi -> Var name to look for.
  1169                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1170 00004965 57                  <1>     push rdi
  1171 00004966 51                  <1>     push rcx
  1172 00004967 52                  <1>     push rdx
  1173 00004968 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1174 0000496C 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1175                              <1> .varLp:
  1176 0000496F 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1177 00004972 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1178 00004977 7416                <1>     je .varFound
  1179 00004979 31C0                <1>     xor eax, eax        ;Search for a null
  1180 0000497B 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1181 0000497E B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1182 00004983 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1183 00004985 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1184 00004987 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1185 00004989 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1186 0000498C EBE1                <1>     jmp short .varLp    ;And scan again!
  1187                              <1> .varNotFound:
  1188 0000498E F9                  <1>     stc
  1189                              <1> .varFound:
  1190 0000498F 59                  <1>     pop rcx
  1191 00004990 5A                  <1>     pop rdx
  1192 00004991 5F                  <1>     pop rdi
  1193                              <1>     return
    13                              <2> %%_ret:
    14 00004992 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> 
  1195                              <1> envFree:
  1196                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1197                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1198                              <1> ; free byte of the environment!
  1199                              <1> ;Input: rsi -> Variable to free.
  1200                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1201                              <1> ;        ecx = Number of free bytes in env
  1202 00004993 4889F7              <1>     mov rdi, rsi
  1203 00004996 31C0                <1>     xor eax, eax
  1204                              <1> .freeLp:
  1205 00004998 803F00              <1>     cmp byte [rdi], 0
  1206 0000499B 7403                <1>     je .exitLp
  1207 0000499D AA                  <1>     stosb
  1208 0000499E EBF8                <1>     jmp short .freeLp
  1209                              <1> .exitLp:
  1210                              <1> ;rdi points to the terminating null of the var we just deleted
  1211                              <1> ;rsi points to the start of the free space
  1212 000049A0 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1213 000049A3 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1214 000049A8 7504                <1>     jne .prepPullup
  1215 000049AA 31C0                <1>     xor eax, eax
  1216 000049AC EB0E                <1>     jmp short .cleanEnv
  1217                              <1> .prepPullup:
  1218 000049AE 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1219                              <1> .pullUp:
  1220 000049B1 AC                  <1>     lodsb
  1221 000049B2 AA                  <1>     stosb
  1222 000049B3 84C0                <1>     test al, al ;Did we pick up a zero
  1223 000049B5 75FA                <1>     jne .pullUp ;If not, keep copying
  1224 000049B7 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1225 000049BA 75F5                <1>     jne .pullUp
  1226                              <1> ;We are at the end of the copy!
  1227                              <1> .cleanEnv:
  1228 000049BC AA                  <1>     stosb   ;Store the famous second null
  1229 000049BD 48FFCF              <1>     dec rdi ;without incrementing it!!
  1230 000049C0 E807000000          <1>     call getFreeSpace
  1231 000049C5 31C0                <1>     xor eax, eax
  1232 000049C7 51                  <1>     push rcx
  1233 000049C8 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1234 000049CA 59                  <1>     pop rcx
  1235                              <1>     return
    13                              <2> %%_ret:
    14 000049CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1236                              <1> 
  1237                              <1> getFreeSpace:
  1238                              <1> ;Output: ecx = Number of free bytes in the environment block
  1239 000049CC 56                  <1>     push rsi
  1240 000049CD 57                  <1>     push rdi
  1241 000049CE E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1242 000049D3 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1243 000049D7 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1244 000049DA E805000000          <1>     call getEnvSize ;Get total block size
  1245 000049DF 29F9                <1>     sub ecx, edi    ;Get difference!
  1246 000049E1 5F                  <1>     pop rdi
  1247 000049E2 5E                  <1>     pop rsi
  1248                              <1>     return
    13                              <2> %%_ret:
    14 000049E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> getEnvSize:
  1251                              <1> ;Gets the number of bytes in the environment allocation
  1252                              <1> ;Output: ecx = Number of bytes in the environment!
  1253 000049E4 53                  <1>     push rbx
  1254 000049E5 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1255 000049E9 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1256 000049EC C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1257 000049EF 5B                  <1>     pop rbx
  1258                              <1>     return
    13                              <2> %%_ret:
    14 000049F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1259                              <1> 
  1260                              <1> getPtrToEndOfEnv:
  1261                              <1> ;Gets ptr to end of the environment
  1262                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1263 000049F1 50                  <1>     push rax
  1264 000049F2 51                  <1>     push rcx
  1265 000049F3 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1266 000049F7 31C0                <1>     xor eax, eax
  1267 000049F9 31C9                <1>     xor ecx, ecx
  1268 000049FB FFC9                <1>     dec ecx
  1269                              <1> .lp:
  1270 000049FD F2AE                <1>     repne scasb
  1271 000049FF 3807                <1>     cmp byte [rdi], al
  1272 00004A01 75FA                <1>     jne .lp
  1273 00004A03 59                  <1>     pop rcx
  1274 00004A04 58                  <1>     pop rax
  1275                              <1>     return
    13                              <2> %%_ret:
    14 00004A05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1276                              <1> 
  1277                              <1> growEnvBlock:
  1278                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1279                              <1> ; newly allocated 160 byte block of the environment.
  1280                              <1> ;Returns:   CF=NC - Environment grown ok!
  1281                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1282                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1283 00004A06 50                  <1>     push rax
  1284 00004A07 53                  <1>     push rbx
  1285 00004A08 51                  <1>     push rcx
  1286 00004A09 56                  <1>     push rsi
  1287 00004A0A 57                  <1>     push rdi
  1288 00004A0B E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1289 00004A10 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1290 00004A15 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1291 00004A19 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1292 00004A1C 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1293 00004A22 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1294 00004A28 7321                <1>     jae .tooLarge
  1295                              <1>     ;Here ZF must be NZ.
  1296 00004A2A 4150                <1>     push r8
  1297 00004A2C 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1298 00004A30 B8004A0000          <1>     mov eax, 4A00h
  1299 00004A35 CD21                <1>     int 21h
  1300 00004A37 4158                <1>     pop r8
  1301 00004A39 720A                <1>     jc .exit
  1302                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1303                              <1>     ; so we add 160 zeros to the count of bytes
  1304 00004A3B 81C1A0000000        <1>     add ecx, 0A0h
  1305 00004A41 31C0                <1>     xor eax, eax
  1306 00004A43 F3AA                <1>     rep stosb
  1307                              <1> .exit:
  1308 00004A45 5F                  <1>     pop rdi
  1309 00004A46 5E                  <1>     pop rsi
  1310 00004A47 59                  <1>     pop rcx
  1311 00004A48 5B                  <1>     pop rbx
  1312 00004A49 58                  <1>     pop rax
  1313                              <1>     return
    13                              <2> %%_ret:
    14 00004A4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1314                              <1> .tooLarge:
  1315 00004A4B 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1316 00004A4E F9                  <1>     stc             ;Set CF
  1317 00004A4F EBF4                <1>     jmp short .exit
    25                                  %include "./src/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004A51 F605(1A000000)80    <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004A58 7411                <1>     jz .notLoading
     4 00004A5A F605(1A000000)40    <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004A61 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004A63 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004A69 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004A6B F605(1A000000)02    <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 00004A72 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 00004A74 84E4                <1>     test ah, ah
    17 00004A76 7424                <1>     jz .inInt23 
    18 00004A78 80FC0C              <1>     cmp ah, 0Ch
    19 00004A7B 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004A7D 50                  <1>     push rax
    23 00004A7E 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004A85 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004A8A 31C0                <1>     xor eax, eax
    26 00004A8C 668CC8              <1>     mov ax, cs
    27 00004A8F 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 00004A94 58                  <1>     pop rax
    29 00004A95 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004A97 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004A9C 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004A9E 800D(1A000000)02    <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004AA5 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004AAC 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004AAE 50                  <1>     push rax
    43 00004AAF B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 00004AB4 CD21                <1>     int 21h
    45 00004AB6 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004AB7 F605(1A000000)08    <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004ABE 746C                <1>     jz .notBat
    49 00004AC0 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004AC7 7563                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004AC9 E892020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004ACE 488D15F6B6FFFF      <1>     lea rdx, batFail
    57 00004AD5 E818F8FFFF          <1>     call printString
    58 00004ADA 488D155BB5FFFF      <1>     lea rdx, batYNstr
    59 00004AE1 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004AE7 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004AEC CD21                <1>     int 21h
    62 00004AEE 7226                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004AF0 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004AF3 E82AFAFFFF          <1>     call ucChar         ;UC using DOS
    65 00004AF8 3C59                <1>     cmp al, "Y"
    66 00004AFA 740E                <1>     je .killBat
    67 00004AFC 3C4E                <1>     cmp al, "N"
    68 00004AFE 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004B00 E8E6F7FFFF          <1>     call printCRLF
    74 00004B05 E92D000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004B0A E88FF5FFFF          <1>     call callClean
    77 00004B0F E847CEFFFF          <1>     call batCleanup
    78 00004B14 EBEA                <1>     jmp short .endBat   ;Now CRLF and exit!
    79                              <1> .nestKill:
    80 00004B16 E883F5FFFF          <1>     call callClean
    81 00004B1B E83BCEFFFF          <1>     call batCleanup
    82 00004B20 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC   
    83 00004B27 E951FFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    84                              <1> .notBat:
    85 00004B2C 66813DD9B4FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    86 00004B35 7405                <1>     je .exit
    87                              <1> .exitBat:
    88 00004B37 E841020000          <1>     call errRetHdls 
    89                              <1> .exit:
    90 00004B3C 8025(1A000000)FD    <1>     and byte [statFlg1], ~inCtrlC
    91                              <1> .exitIn:
    92 00004B43 F9                  <1>     stc     ;Set CF to kill the task
    93 00004B44 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    94                              <1> ;All we need is that the stack pointer is not at the address we had it
    95                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    96                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    26                                  %include "./src/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004B47 53                  <1>     push rbx
    25 00004B48 51                  <1>     push rcx
    26 00004B49 52                  <1>     push rdx
    27 00004B4A 57                  <1>     push rdi
    28 00004B4B 56                  <1>     push rsi
    29 00004B4C E80F020000          <1>     call errSwapHdls
    30 00004B51 FC                  <1>     cld         ;Make String ops go forward
    31 00004B52 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004B55 8805B1B4FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004B5B 488D150CB6FFFF      <1>     lea rdx, crlf
    34 00004B62 E88BF7FFFF          <1>     call printString    ;Trashes ax
    35 00004B67 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004B6A 53                  <1>     push rbx        ;Save the action bitfield
    38 00004B6B 56                  <1>     push rsi        ;Save the driver pointer
    39 00004B6C B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004B71 CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004B73 488D35C5BDFFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004B7A 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004B7D 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004B7F 66A5                <1>     movsw
    51 00004B81 A4                  <1>     movsb
    52 00004B82 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004B85 5E                  <1>     pop rsi
    54 00004B86 5B                  <1>     pop rbx
    55 00004B87 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004B8D 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004B8F 81FF24000000        <1>     cmp edi, errShrFul
    60 00004B95 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004B97 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004B9C CD21                <1>     int 21h
    65 00004B9E 3CFF                <1>     cmp al, -1
    66 00004BA0 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004BA2 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004BA4 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004BA6 CD21                <1>     int 21h
    70 00004BA8 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004BAA 4889FA              <1>     mov rdx, rdi        
    76 00004BAD 50                  <1>     push rax            
    77 00004BAE 31C0                <1>     xor eax, eax
    78 00004BB0 89C1                <1>     mov ecx, eax
    79 00004BB2 FFC9                <1>     dec ecx
    80 00004BB4 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004BB6 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004BBA E833F7FFFF          <1>     call printString 
    83 00004BBF C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004BC3 58                  <1>     pop rax
    85 00004BC4 84C0                <1>     test al, al ;Is this zero?
    86 00004BC6 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004BC8 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004BCD 488D15A0BDFFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004BD4 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004BD6 BA1F000000          <1>     mov edx, errGF
    98 00004BDB 81FF24000000        <1>     cmp edi, errShrFul
    99 00004BE1 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004BE4 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004BE9 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004BEF 0F42FA              <1>     cmovb edi, edx
   104 00004BF2 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004BF8 57                  <1>     push rdi    ;Save the error code for checking
   106 00004BF9 488D1524BCFFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004C00 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004C03 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004C07 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004C0A 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004C0B E8E2F6FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004C10 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004C16 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004C18 488D1573BDFFFF      <1>     lea rdx, readMsg
   120 00004C1F 488D3D7BBDFFFF      <1>     lea rdi, writeMsg
   121 00004C26 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004C29 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004C2D E8C0F6FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004C32 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004C35 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004C3B 488D1549BDFFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004C42 E8ABF6FFFF          <1>     call printString
   130 00004C47 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004C49 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004C4C B402                <1>     mov ah, 02h ;Print char in dl
   133 00004C4E CD21                <1>     int 21h
   134                              <1>     
   135 00004C50 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004C52 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004C57 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004C5C 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004C5E B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004C60 E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004C65 E881F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004C6A 488D153FBDFFFF      <1>     lea rdx, abortMsg
   149 00004C71 E87CF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004C76 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004C79 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004C7B 488D1546BDFFFF      <1>     lea rdx, betweenMsg
   154 00004C82 E86BF6FFFF          <1>     call printString
   155 00004C87 488D152FBDFFFF      <1>     lea rdx, retryMsg
   156 00004C8E E85FF6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004C93 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004C96 7418                <1>     jz .userFail
   160 00004C98 488D1529BDFFFF      <1>     lea rdx, betweenMsg
   161 00004C9F E84EF6FFFF          <1>     call printString
   162 00004CA4 488D150BBDFFFF      <1>     lea rdx, ignoreMsg
   163 00004CAB E842F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004CB0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004CB3 7418                <1>     jz .userMsgEnd
   167 00004CB5 488D150CBDFFFF      <1>     lea rdx, betweenMsg
   168 00004CBC E831F6FFFF          <1>     call printString
   169 00004CC1 488D15FBBCFFFF      <1>     lea rdx, failMsg
   170 00004CC8 E825F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004CCD 488D15F7BCFFFF      <1>     lea rdx, endMsg
   173 00004CD4 E819F6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004CD9 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004CDB 488D3DECBCFFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004CE2 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004CE7 CD21                <1>     int 21h ;Get char in al
   179 00004CE9 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004CEB 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004CED 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004CEF AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004CF0 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004CF2 FFC1                <1>     inc ecx
   186 00004CF4 81F904000000        <1>     cmp ecx, 4
   187 00004CFA 75F3                <1>     jne .uip1
   188 00004CFC E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004D01 E8E5F5FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004D06 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004D08 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004D0A 7427                <1>     je .cehExit
   195 00004D0C 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004D0E 740F                <1>     je .viIgnore
   197 00004D10 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004D12 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004D14 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004D17 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004D1D EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004D1F F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004D22 0F843DFFFFFF        <1>     jz .userInput
   206 00004D28 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004D2A F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004D2D 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004D33 E845000000          <1>     call errRetHdls
   212 00004D38 5E                  <1>     pop rsi
   213 00004D39 5F                  <1>     pop rdi
   214 00004D3A 5A                  <1>     pop rdx
   215 00004D3B 59                  <1>     pop rcx
   216 00004D3C 5B                  <1>     pop rbx
   217 00004D3D 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004D3F C605C6B2FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004D46 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004D4B 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004D52 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004D53 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004D55 B402                <1>     mov ah, 02h
   226 00004D57 CD21                <1>     int 21h ;Print char
   227 00004D59 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004D5B E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004D60 50                  <1>     push rax
   236 00004D61 53                  <1>     push rbx
   237 00004D62 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004D67 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004D6A 6689059DB2FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004D71 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004D75 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004D77 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004D7A 5B                  <1>     pop rbx
   244 00004D7B 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004D7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004D7D 50                  <1>     push rax
   250 00004D7E 53                  <1>     push rbx
   251 00004D7F E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004D84 0FB70583B2FFFF      <1>     movzx eax, word [errHdls]
   253 00004D8B 66C7057AB2FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004D94 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004D97 5B                  <1>     pop rbx
   256 00004D98 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004D99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004D9A 50                  <1>     push rax        ;Save rax
   263 00004D9B B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004DA0 CD21                <1>     int 21h
   265 00004DA2 58                  <1>     pop rax
   266 00004DA3 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004DA9 7605                <1>     jbe .pspJftExit
   268 00004DAB 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004DAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004DB0 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004DB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    27                                  cmdLdrE:
    28                                  
    29                                  Segment bss nobits align=1 follows=cmd
    30                                  %include "./dat/cmdBss.asm"
     1                              <1> 
     2                              <1> ;Moved most strings and initialised 0 variables here to reduce disk image size
     3 00000000 ????                <1> returnCode  dw ?    ;Return Code from a child process
     4 00000002 ????????????????    <1> int2Epsp    dq ?    ;
     5 0000000A ????????????????    <1> int2Ersp    dq ?    ;Save the far Int 2E entry stack pointer!
     6 00000012 ????????????????    <1> int2Edta    dq ?    ;
     7                              <1> ;=============================================================
     8 0000001A ??                  <1> statFlg1    db ?    ;Flags 1 for the command interpreter
     9                              <1> ;=============================================================
    10                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    11                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    12                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    13                              <1> inBatch     equ 8   ;Up if processing a batch file
    14                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    15                              <1> inCritical  equ 20h ;Up if processing a command.
    16                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    17                              <1> inLdr       equ 80h ;Up if in loader
    18                              <1> ;Batch state variables.
    19 0000001B ????????????????    <1> bbPtr       dq ?                    ;Ptr to the batch block
    20 00000023 <res 4Fh>           <1> batFile     db fileSpecZL dup (?)   ;Path to bat to execute. Qual with 
    21 00000072 ??                  <1> ifFlg       db ?                    ;Flags for IF
    22                              <1> ifReset     equ 0                   ;Value to reset the flags
    23                              <1> ifNot       equ 1                   ;Set if NOT encountered
    24                              <1> ifCond      equ 2                   ;Set if condition encountered 
    25 00000073 ??                  <1> callFlg     db ?                    ;Set to -1 in a call!
    26                              <1> ;FOR state variables
    27 00000074 ??                  <1> forFlg      db ?                    ;For flag. Set if in a forloop
    28 00000075 ????????????????    <1> pForBlk     dq ?                    ;Ptr to the for block
    29                              <1> 
    30                              <1> ;Structs and strings
    31 0000007D <res 26h>           <1> ctryData    db countryStruc_size dup (?)    ;Length of the country table
    32 000000A3 <res 43h>           <1> currDirStr  db fullDirPathZL dup (?)        ;Current Directory String
    33 000000E6 <res 10h>           <1> cmdFcb      db 10h dup (?) ;Internal "fcb" for parsing the command name
    34 000000F6 <res 2Bh>           <1> cmdFFBlock  db ffBlock_size dup (?) ;Internal Find First Block to use as default DTA
    35                              <1> 
    36 00000121 <res 20h>           <1> launchBlock db execProg_size dup (?)
    37                              <1> 
    38                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    39                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    40                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    41                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    42                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    43                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    44                              <1> inLen   equ 128 
    45 00000141 <res 82h>           <1> inBuffer    db cmdBufferL dup (?)   ;Original input from user! 128 chars max!
    46                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    47 000001C3 <res 82h>           <1> cLineBuffer db cmdBufferL dup (?)   ;Copied input for processing
    48 00000245 <res 82h>           <1> cmdBuffer   db cmdBufferL dup (?)   ;Buffer with the command pipeline
    49 000002C7 <res 4Fh>           <1> cmdPathSpec db fileSpecZL dup (?)   ;Space for full path to a ext cmd
    50 00000316 <res Eh>            <1> cmdName     db cmdNameL dup (?)     ;Cmd name prefixed by length 
    51                              <1> 
    52 00000324 <res 4Fh>           <1> rdrInFilespec   db fileSpecZL dup (?)   ;Space for the redir in filespec
    53 00000373 <res 4Fh>           <1> rdrOutFilespec  db fileSpecZL dup (?)   ;Space for the redir out filespec
    54                              <1> 
    55                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    56 000003C2 <res 4Fh>           <1> pipe1Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    57 00000411 <res 4Fh>           <1> pipe2Filespec   db fileSpecZL dup (?)   ;Space for the pipe file filespec
    58                              <1> 
    59 00000460 ????????????????    <1> newPipe dq ?    ;Pointer to the new pathspec (STDOUT)
    60 00000468 ????????????????    <1> oldPipe dq ?    ;Pointer to the old pathspec (STDIN)
    61                              <1> 
    62                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    63                              <1> ; a really long invalid DOS path for PATH to work properly.
    64 00000470 <res 104h>          <1> searchSpec  db 2*cmdBufferL dup (?)   
    65                              <1> 
    66                              <1> ;Internal Function vars
    67                              <1> ;Dir Vars
    68 00000574 ??                  <1> dirFlags    db ?    ;Dir Flags.     Bit[0] set => /W or /w specified
    69                              <1> ;                                   Bit[1] set => /P or /p specified
    70                              <1> ;                                   Bit[2] set => A file/path specified
    71 00000575 ??                  <1> dirLineCtr  db ?    ;Counter to keep track of which line we printed (0-23)
    72 00000576 ????????            <1> dirFileCtr  dd ?    ;Used in /W mode, rollover after 5
    73 0000057A ??                  <1> dirDrv      db ?    ;0 based drive number to use
    74 0000057B <res 82h>           <1> dirSrchDir  db cmdBufferL dup (?)   ;Search directory 
    75 000005FD <res 10h>           <1> dirSrchFCB  db 10h dup (?)    ;We copy the search pattern here, inited in dir
    76                              <1> dirWideType equ 1
    77                              <1> dirPageType equ 2
    78                              <1> dirFileType equ 4
    79                              <1> 
    80                              <1> ;Time/Date vars
    81 0000060D ??                  <1> td1 db ?    ;Minutes/Year
    82 0000060E ??                  <1> td2 db ?    ;Hours/Zero
    83 0000060F ??                  <1> td3 db ?    ;Hundredths/Day
    84 00000610 ??                  <1> td4 db ?    ;Seconds/Month
    85                              <1> 
    86                              <1> ;Rename/Copy/Delete Buffers
    87                              <1> delPath:
    88                              <1> comspecDir:    ;Used to store the directory passed during startup
    89 00000611 <res 82h>           <1> srcSpec     db cmdBufferL dup (?)
    90 00000693 <res 82h>           <1> destSpec    db cmdBufferL dup (?)
    91 00000715 ????????????????    <1> srcPtr      dq ?    ;Where to copy pattern to in src path
    92 0000071D ????????????????    <1> destPtr     dq ?    ;Where to copy pattern to in dest path
    93 00000725 <res Bh>            <1> renName     db 11 dup (?) ;Build a name pattern here in FCB format
    94                              <1> ;Copy vars
    95 00000730 ????????????????    <1> pLastFspec  dq ?    ;Ptr to first char past last + in source of Mode 3 copy
    96 00000738 ????????????????    <1> pNextFspec  dq ?    ;Ptr to first char past next + in source of Mode 3 copy
    97 00000740 ??                  <1> verifyFlg   db ?    ;Set if verify on before copy
    98 00000741 ????                <1> sourceHdl   dw ?    ;These get set to -1 on entry to copy
    99 00000743 ????                <1> destHdl     dw ?
   100 00000745 ????                <1> srcHdlInfo  dw ?    ;Save the hdl device info (bit 7 Set -> Char dev)
   101 00000747 ????????????????    <1> cpBufPtr    dq ?    ;Ptr to the xfr arena
   102 0000074F ????                <1> wCpBufSz    dw ?    ;Copy Buffer size, max 4096 bytes
   103 00000751 ????????            <1> dCpCnt      dd ?    ;Number of files we have copied
   104 00000755 ??                  <1> bCpFlg      db ?    ;Copy state flag   
   105                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   106                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   107                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   108                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   109                              <1> oneDest     equ 10h ;Single destination, not dir 
   110                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   111                              <1> mod2Cpy     equ 40h ;Set if copying files with new names (unused)
   112                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   113                              <1> 
   114                              <1> ;Environment manipulation vars
   115 00000756 ????                <1> envVarSz        dw ?    ;Env var size
   116 00000758 ????                <1> envVarNamSz     dw ?    ;Env var "name="" length
    31                                  bssLen equ ($ - $$)
    32                                  
    33                                  Segment stack nobits align=1 follows=bss
    34                                      alignb 10h
    35 00000000 <res 640h>                  dq 200 dup (?)  ;1.6K stack, para aligned
    36                                  stackTop:   ;Top of the stack
    37 00000640 ????????????????            dq ?    ;Extra paragraph
    38 00000648 ????????????????            dq ?
    39                                  endOfAlloc: ;Symbol to free from once init is over!
    40                                  stackLen equ ($ - $$)
    41                                  
    42                                  Segment init align=1 valign=1 follows=cmd vfollows=stack
    43                                  %define currSegVBase section.init.vstart
    44                                  %include "./src/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;Start by copying the loader forwards to make space for the BSS
     3                              <1> ;This section needs to use r8 as the base pointer for the copy.
     4                              <1> ;DO NOT USE RIP RELATIVE ADDRESSING AS RIP IS ASSUMED TO BE AT
     5                              <1> ; VIRTUAL START.
     6 00000000 488D35F9FFFFFF      <1>     lea rsi, cmdLdr
     7 00000007 498DB8[00000000]    <1>     lea rdi, qword [r8 + section.init.vstart]
     8 0000000E B919050000          <1>     mov ecx, initLen
     9 00000013 F3A4                <1>     rep movsb
    10 00000015 498DB8[1E000000]    <1>     lea rdi, qword [r8 + startInit]
    11 0000001C 57                  <1>     push rdi
    12 0000001D C3                  <1>     ret ;Goto next instruction but reallocated!
    13                              <1> 
    14                              <1> startInit:
    15                              <1> ;First check if the version is ok. If not, return.
    16 0000001E B430                <1>     mov ah, 30h
    17 00000020 CD21                <1>     int 21h
    18 00000022 3C01                <1>     cmp al, 01h ;Version 1
    19 00000024 760D                <1>     jbe .okVersion
    20 00000026 488D158C040000      <1>     lea rdx, badVerStr
    21 0000002D B409                <1>     mov ah, 09h
    22 0000002F CD21                <1>     int 21h
    23                              <1> .exitBad:
    24 00000031 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    25                              <1> .okVersion:
    26                              <1> ;Now the version is ok we store self as parent in the PSP, 
    27                              <1> ; to prevent accidental closure
    28 00000033 800D(1A000000)80    <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    29 0000003A 4C8905(00000000)    <1>     mov qword [pPSP], r8        ;Store PSP ptr in internal var 
    30 00000041 488D25(40060000)    <1>     lea rsp, stackTop           ;And set the stack pointer to our stack
    31 00000048 488D3D(00000000)    <1>     lea rdi, section.bss.start
    32 0000004F B95A070000          <1>     mov ecx, bssLen
    33 00000054 31C0                <1>     xor eax, eax
    34 00000056 F3AA                <1>     rep stosb
    35                              <1> ;Now eject all the unneeded space, to make space for allocating.
    36                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    37 00000058 488D1DBA040000      <1>     lea rbx, endOfInitAlloc
    38 0000005F 4C29C3              <1>     sub rbx, r8 ;Convert to number of bytes (Could get assembler to do this)
    39 00000062 81C30F000000        <1>     add ebx, 0Fh    ;Round up paragraph
    40 00000068 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    41 0000006B B8004A0000          <1>     mov eax, 4A00h ;Realloc
    42 00000070 CD21                <1>     int 21h
    43 00000072 72BD                <1>     jc .exitBad
    44 00000074 E8(5D480000)        <1>     call resetNation
    45                              <1> ;Now space has been made, time to parse the command tail
    46 00000079 E8EC000000          <1>     call parseCmdLine   ;Now parse the command tail.
    47 0000007E E8F0020000          <1>     call doEnv          ;Now enact the command tail actions
    48 00000083 E8(89480000)        <1>     call resetIDTentries    ;Setup IDT entries now. 
    49 00000088 F605(1A000000)01    <1>     test byte [statFlg1], permaShell ;Are we perma?
    50 0000008F 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    51                              <1> ;Ok so we are master COMMAND.COM
    52                              <1> ;Now make myself my own parent task. We already are the current psp
    53 00000095 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    54                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    55 00000099 488D15(474B0000)    <1>     lea rdx, critErrorHandler
    56 000000A0 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    57 000000A4 488D15(514A0000)    <1>     lea rdx, ctrlCHandler
    58 000000AB 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    59 000000AF 488D15(9E0E0000)    <1>     lea rdx, appRet
    60 000000B6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    61 000000BA 488D15(4A140000)    <1>     lea rdx, int2Eh
    62 000000C1 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    63 000000C6 CD21                <1>     int 21h
    64                              <1> ;Always get the Autoexec from the root dir we are booting into
    65 000000C8 E8(FA440000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
    66 000000CD 0441                <1>     add al, "A"
    67 000000CF 8805(F9070000)      <1>     mov byte [autoSpec], al ;
    68                              <1> ;Now, open AUTOEXEC.BAT. 
    69 000000D5 488D15(F9070000)    <1>     lea rdx, autoSpec
    70 000000DC B8003D0000          <1>     mov eax, 3D00h  ;Open file
    71 000000E1 CD21                <1>     int 21h
    72 000000E3 7212                <1>     jc .noAutoexec
    73                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    74                              <1>     ; the normal hello there! string
    75 000000E5 89C3                <1>     mov ebx, eax
    76 000000E7 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    77 000000EC CD21                <1>     int 21h
    78                              <1> ;Now we do the same as at the end, prepping for jettisoning
    79 000000EE 31D2                <1>     xor edx, edx
    80 000000F0 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    81 000000F2 E954000000          <1>     jmp .prepStart
    82                              <1> .noAutoexec:
    83                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    84 000000F7 488D15(6E010000)    <1>     lea rdx, crlf
    85 000000FE B409                <1>     mov ah, 09h
    86 00000100 CD21                <1>     int 21h
    87 00000102 800D(1A000000)40    <1>     or byte [statFlg1], inLdrDT
    88 00000109 E8(3C2C0000)        <1>     call time.init
    89 0000010E E8(8E2A0000)        <1>     call date.init
    90 00000113 8025(1A000000)BF    <1>     and byte [statFlg1], ~inLdrDT
    91 0000011A 488D15(6E010000)    <1>     lea rdx, crlf
    92 00000121 B409                <1>     mov ah, 09h
    93 00000123 CD21                <1>     int 21h
    94                              <1>     ;Now fall thru.
    95                              <1> .notMaster:    
    96                              <1> ;Finish by printing INIT string.
    97 00000125 F605(1A000000)04    <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    98 0000012C 7529                <1>     jnz .singleCom
    99 0000012E 488D154B030000      <1>     lea rdx, initString
   100 00000135 B409                <1>     mov ah, 09h
   101 00000137 CD21                <1>     int 21h ;Print init string
   102 00000139 E8(14330000)        <1>     call version.printVersionNumber
   103 0000013E 488D154E030000      <1>     lea rdx, initString2
   104 00000145 B409                <1>     mov ah, 09h
   105 00000147 CD21                <1>     int 21h ;Print init string
   106 00000149 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   107                              <1> .prepStart:
   108 0000014B 8025(1A000000)7F    <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   109 00000152 E9(D2090000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   110                              <1> .singleCom:
   111                              <1> ;In single command mode, check the length of the input string was not 0.
   112                              <1> ; If it was, exit, else proceed
   113 00000157 803D(42010000)00    <1>     cmp byte [inBuffer + 1], 0
   114 0000015E 0F84(33350000)      <1>     je exit
   115 00000164 31D2                <1>     xor edx, edx
   116 00000166 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   117 00000168 EBE1                <1>     jmp short .prepStart
   118                              <1> 
   119                              <1> 
   120                              <1> parseCmdLine:
   121                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   122                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   123                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   124                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   125                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   126                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   127                              <1> ;           Default is CON
   128                              <1> ;[/C string] means execute the string as a command and terminate immediately
   129                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   130                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   131                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   132                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   133                              <1> ; permanent. Needs a colon after E. 
   134                              <1> ;
   135                              <1> ;Start by setting up the default comspec dir, null terminated
   136 0000016A E8(FA440000)        <1>     call getCurrentDrive    ;Get 0 based drive number in al
   137 0000016F 0441                <1>     add al, "A"
   138 00000171 B43A                <1>     mov ah, ":"
   139 00000173 488D3D(11060000)    <1>     lea rdi, comspecDir
   140 0000017A 66AB                <1>     stosw   ;Store drive specifier
   141 0000017C 0FB605(0A000000)    <1>     movzx eax, byte [pathSep]
   142 00000183 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   143                              <1> 
   144 00000185 E8(42480000)        <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   145 0000018A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   146                              <1> .parseLp:
   147 00000191 E8(3D450000)        <1>     call skipDelimiters             ;Strip delims
   148 00000196 AC                  <1>     lodsb
   149 00000197 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   150 0000019A 3C0D                <1>     cmp al, CR
   151 0000019C 0F847C010000        <1>     je .endScan
   152 000001A2 3A05(0B000000)      <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   153 000001A8 752D                <1>     jne .file
   154                              <1> .switch:
   155 000001AA 48FFC6              <1>     inc rsi ;Go past the switch char
   156 000001AD AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   157 000001AE E8(22450000)        <1>     call ucChar
   158 000001B3 3C43                <1>     cmp al, "C"
   159 000001B5 0F842F010000        <1>     je .switchStr
   160 000001BB 3C50                <1>     cmp al, "P"
   161 000001BD 0F8403010000        <1>     je .switchPerma
   162 000001C3 3C45                <1>     cmp al, "E"
   163 000001C5 0F84B0000000        <1>     je .switchEnv
   164 000001CB 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   165                              <1> .badparm:
   166 000001CE 488D15(52030000)    <1>     lea rdx, badParm
   167 000001D5 EBBA                <1>     jmp short .parseLp
   168                              <1> ;-----------------------------------------------------------------
   169                              <1> ;Search for the filespec
   170                              <1> .file:
   171 000001D7 E8(C9460000)        <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   172 000001DC 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   173 000001DF 488D15(70040000)    <1>     lea rdx, searchSpec
   174 000001E6 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   175 000001EB B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   176 000001F0 CD21                <1>     int 21h
   177 000001F2 7319                <1>     jnc .charOrDir
   178                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   179 000001F4 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   180 000001F6 30C0                <1>     xor al, al
   181 000001F8 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   182 000001FD 741C                <1>     je .dir ;If so, root dir specified, all oki!
   183                              <1> .badSpec:
   184                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   185 000001FF 488D15CB020000      <1>     lea rdx, badCmdDir
   186                              <1> .bs0:
   187 00000206 E8(F2420000)        <1>     call printString
   188                              <1> .plhop:
   189 0000020B EB84                <1>     jmp short .parseLp
   190                              <1> ;-----------------------------------------------------------------
   191                              <1> ;Check if a char or directory here
   192                              <1> .charOrDir:
   193 0000020D 8A05(0B010000)      <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   194 00000213 2450                <1>     and al, dirCharDev | dirDirectory
   195 00000215 74E8                <1>     jz .badSpec
   196 00000217 A840                <1>     test al, dirCharDev
   197 00000219 7525                <1>     jnz .charDev
   198                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   199                              <1> .dir:
   200 0000021B 56                  <1>     push rsi
   201 0000021C 488D35(70040000)    <1>     lea rsi, searchSpec 
   202 00000223 488D3D(11060000)    <1>     lea rdi, comspecDir
   203 0000022A E8(0E450000)        <1>     call strcpy2
   204 0000022F B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   205 00000234 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   206 00000236 5E                  <1>     pop rsi
   207 00000237 C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   208 0000023E EBCB                <1>     jmp short .plhop
   209                              <1> ;-----------------------------------------------------------------
   210                              <1> ;Handle char dev here
   211                              <1> .charDev:
   212                              <1> ;Check the name is max 8 chars in length
   213 00000240 488D3D(70040000)    <1>     lea rdi, searchSpec
   214 00000247 E8(18450000)        <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   215 0000024C 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   216 00000252 771E                <1>     ja .badChar
   217 00000254 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   218 00000255 488D35(70040000)    <1>     lea rsi, searchSpec
   219 0000025C 488D3D(F0070000)    <1>     lea rdi, devName
   220 00000263 E8(FF440000)        <1>     call strcpy ;Copy this string over
   221 00000268 5E                  <1>     pop rsi
   222 00000269 C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   223                              <1> .plhop1:
   224 00000270 EB99                <1>     jmp short .plhop    ;parseLp
   225                              <1> .badChar:
   226 00000272 488D15(05050000)    <1>     lea rdx, badDev
   227                              <1> .bs1:
   228 00000279 EB8B                <1>     jmp short .bs0
   229                              <1> ;-----------------------------------------------------------------
   230                              <1> .switchEnv:
   231 0000027B AC                  <1>     lodsb
   232 0000027C 48FFCE              <1>     dec rsi
   233 0000027F 3C3A                <1>     cmp al, ":"
   234 00000281 0F8547FFFFFF        <1>     jne .badparm
   235 00000287 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   236 0000028A E8(3D450000)        <1>     call skipDelimiters
   237 0000028F AC                  <1>     lodsb       ;Get the first non-delimiter
   238 00000290 48FFCE              <1>     dec rsi     ;Point back at it
   239 00000293 3C0D                <1>     cmp al, CR
   240 00000295 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   241                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   242 0000029B E8(F6470000)        <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   243 000002A0 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   244 000002A6 3D00800000          <1>     cmp eax, 8000h
   245 000002AB 7710                <1>     ja .badEnv
   246 000002AD 3DA0000000          <1>     cmp eax, 0A0h
   247 000002B2 7209                <1>     jb .badEnv
   248 000002B4 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   249                              <1> .plhop2:
   250 000002BB EBB3                <1>     jmp short .plhop1  ;parseLp
   251                              <1> .badEnv:
   252 000002BD 488D1536020000      <1>     lea rdx, badEnvSz
   253 000002C4 EBB3                <1>     jmp short .bs1
   254                              <1> ;-----------------------------------------------------------------
   255                              <1> .switchPerma:
   256 000002C6 AC                  <1>     lodsb   ;Get the second char after the P
   257 000002C7 48FFCE              <1>     dec rsi ;Point back at it
   258 000002CA 3C0D                <1>     cmp al, CR
   259 000002CC 7413                <1>     je .spEmbCr ;Allow CR after the P
   260 000002CE 3A05(0B000000)      <1>     cmp al, byte [switchChar]
   261 000002D4 740B                <1>     je .spEmbCr ;Allow switch char after P
   262 000002D6 E8(4B450000)        <1>     call isALdelimiter
   263 000002DB 0F85EDFEFFFF        <1>     jne .badparm
   264                              <1> .spEmbCr:
   265 000002E1 800D(1A000000)01    <1>     or byte [statFlg1], permaShell  ;Set the bit
   266 000002E8 EBD1                <1>     jmp short .plhop2  ;parseLp
   267                              <1> ;-----------------------------------------------------------------
   268                              <1> .switchStr:
   269 000002EA AC                  <1>     lodsb       ;Get the char after the C
   270 000002EB 48FFCE              <1>     dec rsi     ;Point back at it
   271 000002EE 3C0D                <1>     cmp al, CR
   272 000002F0 740B                <1>     je .ssembCr         ;Embedded CR ok
   273 000002F2 E8(4B450000)        <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   274 000002F7 0F85D1FEFFFF        <1>     jne .badparm
   275                              <1> .ssembCr:
   276 000002FD E8(3D450000)        <1>     call skipDelimiters     ;Move rsi past the delimiters
   277 00000302 488D3D(43010000)    <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   278                              <1> .ssLp:
   279 00000309 AC                  <1>     lodsb
   280 0000030A AA                  <1>     stosb
   281 0000030B 3C0D                <1>     cmp al, CR
   282 0000030D 7408                <1>     je .ssOk
   283 0000030F FE05(42010000)      <1>     inc byte [inBuffer + 1] ;Increment the char count
   284 00000315 EBF2                <1>     jmp short .ssLp
   285                              <1> .ssOk:
   286 00000317 800D(1A000000)04    <1>     or byte [statFlg1], inSingle    ;Set the single flag
   287                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   288                              <1> ;-----------------------------------------------------------------
   289                              <1> .endScan:
   290                              <1> ;Now copy our name to the end of the dir specified
   291 0000031E 488D3D(11060000)    <1>     lea rdi, comspecDir
   292 00000325 E8(18450000)        <1>     call strlen ;Get the length in ecx, preserve rdi
   293 0000032A FFC9                <1>     dec ecx ;Point to null terminator
   294 0000032C 8A05(0A000000)      <1>     mov al, byte [pathSep]
   295 00000332 4801CF              <1>     add rdi, rcx    ;Now point to the null
   296 00000335 3847FF              <1>     cmp byte [rdi - 1], al
   297 00000338 7401                <1>     je .esSkipPathsep
   298 0000033A AA                  <1>     stosb
   299                              <1> .esSkipPathsep:
   300 0000033B 488D35(18080000)    <1>     lea rsi, cspec
   301 00000342 E8(FF440000)        <1>     call strcpy ;Now copy over the name of our beloved shell
   302 00000347 E812000000          <1>     call .replacestdio
   303                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   304                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   305 0000034C F605(1A000000)04    <1>     test byte [statFlg1], inSingle
   306                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00000353 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00000355 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   307 00000356 8025(1A000000)FE    <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   308                              <1>     return
    13                              <2> %%_ret:
    14 0000035D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> .replacestdio:
   310 0000035E F605B1010000FF      <1>     test byte [initNewDev], -1
   311                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000365 74F6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   312 00000367 488D15(F0070000)    <1>     lea rdx, devName
   313 0000036E E9(A42D0000)        <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   314                              <1> 
   315                              <1> doEnv:
   316                              <1> ;Will do the environment adjustments as needed
   317 00000373 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   318 00000377 4885F6              <1>     test rsi, rsi
   319 0000037A 7447                <1>     jz .noInitEnv
   320 0000037C 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   321                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000385 74D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   322                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   323                              <1> ;copy the environment from the master and free the original block.
   324                              <1> ;If the block we allocate is smaller than the original block, 
   325                              <1> ; print out of env space and stop there
   326                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   327                              <1> ; comspec. 
   328 00000387 F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   329 0000038E 752E                <1>     jnz .prepNewEnv
   330                              <1>     ;Else, we create new alloc and copy master into it
   331 00000390 E867000000          <1>     call .allocEnv
   332 00000395 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   333 00000398 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   334 0000039D 57                  <1>     push rdi            ;Save the start of the environment block
   335 0000039E E893000000          <1>     call .cpEnv         ;Copy the environment
   336 000003A3 5F                  <1>     pop rdi
   337 000003A4 E805000000          <1>     call .freeCurrentEnv
   338 000003A9 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   339                              <1>     return  
    13                              <2> %%_ret:
    14 000003AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> .freeCurrentEnv:
   341 000003AE 4150                <1>     push r8
   342 000003B0 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   343 000003B4 B800490000          <1>     mov eax, 4900h
   344 000003B9 CD21                <1>     int 21h
   345 000003BB 4158                <1>     pop r8
   346                              <1>     return
    13                              <2> %%_ret:
    14 000003BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   347                              <1> .prepNewEnv:
   348 000003BE E8EBFFFFFF          <1>     call .freeCurrentEnv
   349                              <1> .noInitEnv:
   350                              <1> ;Build the initial block.
   351 000003C3 E834000000          <1>     call .allocEnv
   352 000003C8 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   353 000003CB 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   354 000003CF 57                  <1>     push rdi            ;Save the environment ptr!
   355 000003D0 488D35(09080000)    <1>     lea rsi, pathEVar
   356 000003D7 E8(FF440000)        <1>     call strcpy
   357 000003DC 488D35(0F080000)    <1>     lea rsi, comspecEVar
   358 000003E3 E8(FF440000)        <1>     call strcpy
   359 000003E8 48FFCF              <1>     dec rdi ;Write over the terminating null
   360 000003EB 488D35(11060000)    <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   361 000003F2 E8(FF440000)        <1>     call strcpy 
   362 000003F7 30C0                <1>     xor al, al
   363 000003F9 AA                  <1>     stosb   ;Store the second terminating null
   364 000003FA 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   365                              <1>     return
    13                              <2> %%_ret:
    14 000003FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> .allocEnv:
   368                              <1> ;Output: rax -> Ptr to the environment block. 
   369                              <1> ;   If anything goes wrong, error message and exit the shell!
   370 000003FC 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   371 00000403 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   372 00000405 750C                <1>     jnz .goAlloc
   373 00000407 BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   374 0000040C 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   375                              <1> .goAlloc:
   376 00000413 81C30F000000        <1>     add ebx, 0Fh
   377 00000419 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   378 0000041C B800480000          <1>     mov eax, 4800h
   379 00000421 CD21                <1>     int 21h
   380                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24 00000423 73D6                <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   381 00000425 488D15(53070000)    <1>     lea rdx, memBad1
   382 0000042C E8(F2420000)        <1>     call printString
   383 00000431 E9(4A350000)        <1>     jmp exit.ouch 
   384                              <1> 
   385                              <1> .cpEnv:
   386                              <1> ;Copies the environment
   387                              <1> ;Input: rsi -> Source to copy from
   388                              <1> ;       rdi -> Destination to copy to
   389 00000436 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   390                              <1> .lp:
   391 0000043D AC                  <1>     lodsb
   392 0000043E AA                  <1>     stosb
   393 0000043F 84C0                <1>     test al, al
   394 00000441 750A                <1>     jnz .notNul
   395 00000443 3806                <1>     cmp byte [rsi], al
   396 00000445 7506                <1>     jnz .notNul
   397                              <1>     ;Here, we have encountered our double null!
   398 00000447 FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   399 00000449 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   400 0000044B AA                  <1>     stosb
   401                              <1>     return
    13                              <2> %%_ret:
    14 0000044C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> .notNul:
   403 0000044D FFC9                <1>     dec ecx ;One less char to copy over
   404 0000044F 75EC                <1>     jnz .lp
   405                              <1> .err:
   406 00000451 4881EF02000000      <1>     sub rdi, 2
   407 00000458 488D15(46020000)    <1>     lea rdx, noEnvSpace
   408 0000045F E8(F2420000)        <1>     call printString
   409 00000464 31C0                <1>     xor eax, eax
   410 00000466 66AB                <1>     stosw   ;Store 0 word
   411                              <1>     return
    13                              <2> %%_ret:
    14 00000468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> getMasterEnv:
   414                              <1> ;Walks the psp chain to the first self parent.
   415                              <1> ;Output: rsi -> Environment of the first self-parent program
   416 00000469 4150                <1>     push r8
   417                              <1> .lp:
   418 0000046B 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   419 0000046F 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   420 00000472 7405                <1>     je .exit
   421 00000474 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   422 00000477 EBF2                <1>     jmp short .lp
   423                              <1> .exit:
   424 00000479 4158                <1>     pop r8
   425 0000047B 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000047F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> 
   429                              <1> ;Loader Data here
   430                              <1> initString: 
   431 00000480 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   431 00000489 2056657273696F6E20- <1>
   431 00000492 24                  <1>
   432                              <1> initString2:
   433 00000493 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   433 0000049C 687420323032322C20- <1>
   433 000004A5 323032342C20596C6C- <1>
   433 000004AE 2042757A6F6B752E    <1>
   434 000004B6 0D0A24              <1>     db CR,LF,"$"
   435 000004B9 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   435 000004C2 20444F532076657273- <1>
   435 000004CB 696F6E0D0A24        <1>
   436 000004D1 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   436 000004DA 20434F4D4D414E4420- <1>
   436 000004E3 736561726368206469- <1>
   436 000004EC 726563746F72792062- <1>
   436 000004F5 61640D0A24          <1>
   437 000004FA 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   437 00000503 6E7669726F6E6D656E- <1>
   437 0000050C 742053697A650D0A24  <1>
   438 00000515 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   439 00000516 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   440 00000517 0000                <1> initEnvSz   dw 0    ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    45                                  endOfInitAlloc: ;Symbol to free during init
    46                                  initLen equ ($ - $$)
    47                                  
    48                                  ;Amount of space to make for bss/stack
    49                                  initOffset  equ bssLen + stackLen  
    49          ------------------       info: assembly required 1+5+2 passes

