     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9514A0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26 00000095 FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    27 00000096 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000097 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000099 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 0000009A FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009C FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009E 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009F 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 000000A0 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A2 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A4 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A5 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A6 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A7 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A8 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A9 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000AA 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AB 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B3 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BC 000000000000000000- <1>
    57 000000C5 000000000000000000- <1>
    57 000000CE 000000000000000000- <1>
    57 000000D7 000000000000000000- <1>
    57 000000E0 000000000000000000- <1>
    57 000000E9 000000000000000000- <1>
    57 000000F2 000000000000000000- <1>
    57 000000FB 00000000000000      <1>
    58 00000102 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000106 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010F 00000000000000      <1>
    64 00000116 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 00000000000000      <1>
    65                              <1> 
    66 00000141 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 0000014A 000000000000000000- <1>
    66 00000153 000000000000000000- <1>
    66 0000015C 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inLen   equ 128 
    75 00000161 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    75 0000016A 000000000000000000- <1>
    75 00000173 000000000000000000- <1>
    75 0000017C 000000000000000000- <1>
    75 00000185 000000000000000000- <1>
    75 0000018E 000000000000000000- <1>
    75 00000197 000000000000000000- <1>
    75 000001A0 000000000000000000- <1>
    75 000001A9 000000000000000000- <1>
    75 000001B2 000000000000000000- <1>
    75 000001BB 000000000000000000- <1>
    75 000001C4 000000000000000000- <1>
    75 000001CD 000000000000000000- <1>
    75 000001D6 000000000000000000- <1>
    75 000001DF 00000000            <1>
    76 000001E3 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    76 000001EC 000000000000000000- <1>
    76 000001F5 000000000000000000- <1>
    76 000001FE 000000000000000000- <1>
    76 00000207 000000000000000000- <1>
    76 00000210 000000000000000000- <1>
    76 00000219 000000000000000000- <1>
    76 00000222 000000000000000000- <1>
    76 0000022B 000000000000000000- <1>
    76 00000234 000000000000000000- <1>
    76 0000023D 000000000000000000- <1>
    76 00000246 000000000000000000- <1>
    76 0000024F 000000000000000000- <1>
    76 00000258 000000000000000000- <1>
    76 00000261 00000000            <1>
    77 00000265 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    77 0000026E 000000000000000000- <1>
    77 00000277 000000000000000000- <1>
    77 00000280 000000000000000000- <1>
    77 00000289 000000000000000000- <1>
    77 00000292 000000000000000000- <1>
    77 0000029B 000000000000000000- <1>
    77 000002A4 000000000000000000- <1>
    77 000002AD 000000000000000000- <1>
    77 000002B6 000000000000000000- <1>
    77 000002BF 000000000000000000- <1>
    77 000002C8 000000000000000000- <1>
    77 000002D1 000000000000000000- <1>
    77 000002DA 000000000000000000- <1>
    77 000002E3 00000000            <1>
    78 000002E7 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    78 000002F0 000000000000000000- <1>
    78 000002F9 000000000000000000- <1>
    78 00000302 000000000000000000- <1>
    78 0000030B 000000000000000000- <1>
    78 00000314 000000000000000000- <1>
    78 0000031D 000000000000000000- <1>
    78 00000326 000000000000000000- <1>
    78 0000032F 00000000000000      <1>
    79 00000336 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    79 0000033F 0000000000          <1>
    80                              <1> 
    81 00000344 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    81 0000034D 000000000000000000- <1>
    81 00000356 000000000000000000- <1>
    81 0000035F 000000000000000000- <1>
    81 00000368 000000000000000000- <1>
    81 00000371 000000000000000000- <1>
    81 0000037A 000000000000000000- <1>
    81 00000383 000000000000000000- <1>
    81 0000038C 00000000000000      <1>
    82 00000393 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    82 0000039C 000000000000000000- <1>
    82 000003A5 000000000000000000- <1>
    82 000003AE 000000000000000000- <1>
    82 000003B7 000000000000000000- <1>
    82 000003C0 000000000000000000- <1>
    82 000003C9 000000000000000000- <1>
    82 000003D2 000000000000000000- <1>
    82 000003DB 00000000000000      <1>
    83                              <1> 
    84                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    85 000003E2 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    85 000003EB 000000000000000000- <1>
    85 000003F4 000000000000000000- <1>
    85 000003FD 000000000000000000- <1>
    85 00000406 000000000000000000- <1>
    85 0000040F 000000000000000000- <1>
    85 00000418 000000000000000000- <1>
    85 00000421 000000000000000000- <1>
    85 0000042A 00000000000000      <1>
    86 00000431 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    86 0000043A 000000000000000000- <1>
    86 00000443 000000000000000000- <1>
    86 0000044C 000000000000000000- <1>
    86 00000455 000000000000000000- <1>
    86 0000045E 000000000000000000- <1>
    86 00000467 000000000000000000- <1>
    86 00000470 000000000000000000- <1>
    86 00000479 00000000000000      <1>
    87                              <1> 
    88 00000480 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    89 00000488 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    90                              <1> 
    91                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    92                              <1> ; a really long invalid DOS path for PATH to work properly.
    93 00000490 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    93 00000499 000000000000000000- <1>
    93 000004A2 000000000000000000- <1>
    93 000004AB 000000000000000000- <1>
    93 000004B4 000000000000000000- <1>
    93 000004BD 000000000000000000- <1>
    93 000004C6 000000000000000000- <1>
    93 000004CF 000000000000000000- <1>
    93 000004D8 000000000000000000- <1>
    93 000004E1 000000000000000000- <1>
    93 000004EA 000000000000000000- <1>
    93 000004F3 000000000000000000- <1>
    93 000004FC 000000000000000000- <1>
    93 00000505 000000000000000000- <1>
    93 0000050E 000000000000000000- <1>
    93 00000517 000000000000000000- <1>
    93 00000520 000000000000000000- <1>
    93 00000529 000000000000000000- <1>
    93 00000532 000000000000000000- <1>
    93 0000053B 000000000000000000- <1>
    93 00000544 000000000000000000- <1>
    93 0000054D 000000000000000000- <1>
    93 00000556 000000000000000000- <1>
    93 0000055F 000000000000000000- <1>
    93 00000568 000000000000000000- <1>
    93 00000571 000000000000000000- <1>
    93 0000057A 000000000000000000- <1>
    93 00000583 000000000000000000- <1>
    93 0000058C 0000000000000000    <1>
    94                              <1> 
    95                              <1> ;Internal Function vars
    96                              <1> ;Dir Vars
    97 00000594 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    98                              <1> ;                                   Bit[1] set => /P or /p specified
    99                              <1> ;                                   Bit[2] set => A file/path specified
   100 00000595 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   101 00000596 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   102 0000059A 00                  <1> dirDrv      db 0    ;0 based drive number to use
   103 0000059B 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   103 000005A4 000000000000000000- <1>
   103 000005AD 000000000000000000- <1>
   103 000005B6 000000000000000000- <1>
   103 000005BF 000000000000000000- <1>
   103 000005C8 000000000000000000- <1>
   103 000005D1 000000000000000000- <1>
   103 000005DA 000000000000000000- <1>
   103 000005E3 000000000000000000- <1>
   103 000005EC 000000000000000000- <1>
   103 000005F5 000000000000000000- <1>
   103 000005FE 000000000000000000- <1>
   103 00000607 000000000000000000- <1>
   103 00000610 000000000000000000- <1>
   103 00000619 00000000            <1>
   104 0000061D 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   104 00000626 3F3F3F3F3F3F3F      <1>
   105                              <1> dirWideType equ 1
   106                              <1> dirPageType equ 2
   107                              <1> dirFileType equ 4
   108                              <1> ;Volume Vars
   109                              <1> volFcb:
   110                              <1>     istruc exFcb
   111 0000062D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   112 0000062E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   113 00000634 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   114 00000635 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   115 0000063D 3F3F3F              <1>     at exFcb.fileext,   db "???"
   116 00000640 00000000            <1>     at exFcb.curBlock,  dd 0
   117 00000644 00<rep 15h>         <1>     iend 
   118                              <1> 
   119                              <1> ;Time/Date vars
   120 00000659 00                  <1> td1 db 0    ;Minutes/Year
   121 0000065A 00                  <1> td2 db 0    ;Hours/Zero
   122 0000065B 00                  <1> td3 db 0    ;Hundredths/Day
   123 0000065C 00                  <1> td4 db 0    ;Seconds/Month
   124                              <1> 
   125                              <1> ;Rename/Copy/Delete Buffers
   126                              <1> delPath:
   127                              <1> comspecDir:    ;Used to store the directory passed during startup
   128 0000065D 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   128 00000666 000000000000000000- <1>
   128 0000066F 000000000000000000- <1>
   128 00000678 000000000000000000- <1>
   128 00000681 000000000000000000- <1>
   128 0000068A 000000000000000000- <1>
   128 00000693 000000000000000000- <1>
   128 0000069C 000000000000000000- <1>
   128 000006A5 000000000000000000- <1>
   128 000006AE 000000000000000000- <1>
   128 000006B7 000000000000000000- <1>
   128 000006C0 000000000000000000- <1>
   128 000006C9 000000000000000000- <1>
   128 000006D2 000000000000000000- <1>
   128 000006DB 00000000            <1>
   129 000006DF 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   129 000006E8 000000000000000000- <1>
   129 000006F1 000000000000000000- <1>
   129 000006FA 000000000000000000- <1>
   129 00000703 000000000000000000- <1>
   129 0000070C 000000000000000000- <1>
   129 00000715 000000000000000000- <1>
   129 0000071E 000000000000000000- <1>
   129 00000727 000000000000000000- <1>
   129 00000730 000000000000000000- <1>
   129 00000739 000000000000000000- <1>
   129 00000742 000000000000000000- <1>
   129 0000074B 000000000000000000- <1>
   129 00000754 000000000000000000- <1>
   129 0000075D 00000000            <1>
   130 00000761 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   131 00000769 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   132 00000771 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   132 0000077A 2020                <1>
   133                              <1> ;Copy vars
   134 0000077C 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   135 0000077D FFFF                <1> sourceHdl   dw -1
   136 0000077F FFFF                <1> destHdl     dw -1
   137 00000781 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   138 00000783 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   139 0000078B 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   140 0000078D 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   141 00000791 00                  <1> bCpFlg      db 0    ;Copy state flag
   142                              <1> 
   143                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   144                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   145                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   146                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   147                              <1> oneDest     equ 10h ;Single destination, not dir 
   148                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   149                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   150                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   151                              <1> 
   152                              <1> ;Environment manipulation vars
   153 00000792 0000                <1> envVarSz        dw 0    ;Env var size
   154 00000794 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000796 03444952            <1>     db 3, "DIR"
     8 0000079A F61E                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079C 024344              <1>     db 2, "CD"
    11 0000079F A323                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A1 054348444952        <1>     db 5, "CHDIR"
    14 000007A7 A323                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A9 024D44              <1>     db 2, "MD"
    17 000007AC 1E24                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AE 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B4 1E24                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B6 025244              <1>     db 2, "RD"
    23 000007B9 6724                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BB 05524D444952        <1>     db 5, "RMDIR"
    26 000007C1 6724                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C3 0344454C            <1>     db 3, "DEL"
    29 000007C7 262C                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C9 054552415345        <1>     db 5, "ERASE"
    32 000007CF 262C                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D1 0444415445          <1>     db 4, "DATE"
    35 000007D6 692D                <1>     dw date - startLbl
    36                              <1> 
    37 000007D8 0454494D45          <1>     db 4, "TIME"
    38 000007DD 172F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DF 04434F5059          <1>     db 4, "COPY"
    41 000007E4 B124                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E6 0443545459          <1>     db 4, "CTTY"
    44 000007EB 4030                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007ED 03434C53            <1>     db 3, "CLS"
    47 000007F1 E730                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F3 05425245414B        <1>     db 5, "BREAK"
    50 000007F9 5931                <1>     dw break - startLbl
    51                              <1> 
    52 000007FB 06564552494659      <1>     db 6, "VERIFY"
    53 00000802 DA31                <1>     dw verify - startLbl
    54                              <1> 
    55 00000804 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080B 5732                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080D 0352454E            <1>     db 3, "REN"
    59 00000811 5732                <1>     dw rename - startLbl
    60                              <1>     
    61 00000813 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081C 9334                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081E 03564552            <1>     db 3, "VER"
    65 00000822 A335                <1>     dw version - startLbl
    66                              <1> 
    67 00000824 03564F4C            <1>     db 3, "VOL"
    68 00000828 E434                <1>     dw volume - startLbl
    69                              <1> 
    70 0000082A 034D454D            <1>     db 3, "MEM"
    71 0000082E E735                <1>     dw memory - startLbl
    72                              <1> 
    73 00000830 0445584954          <1>     db 4, "EXIT"
    74 00000835 E937                <1>     dw exit - startLbl
    75                              <1> 
    76 00000837 0454595045          <1>     db 4, "TYPE"
    77 0000083C 3637                <1>     dw type - startLbl
    78                              <1> 
    79 0000083E 0450415448          <1>     db 4, "PATH"
    80 00000843 363B                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000845 03534554            <1>     db 3, "SET"
    83 00000849 173A                <1>     dw set - startLbl
    84                              <1> 
    85 0000084B 0650524F4D5054      <1>     db 6, "PROMPT"
    86 00000852 153C                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000854 044543484F          <1>     db 4, "ECHO"
    90 00000859 853C                <1>     dw echo - startLbl
    91                              <1> 
    92 0000085B 055041555345        <1>     db 5, "PAUSE"
    93 00000861 613D                <1>     dw pauza - startLbl
    94                              <1> 
    95 00000863 0352454D            <1>     db 3, "REM"
    96 00000867 AA3D                <1>     dw remark - startLbl
    97 00000869 FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000086A 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000086D 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000872 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000087B 696C65206D69737369- <1>
     4 00000884 6E670D0A24          <1>
     5 00000889 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000892 6469736B2077697468- <1>
     5 0000089B 206261746368206669- <1>
     5 000008A4 6C65                <1>
     6 000008A6 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008AF 737320616E79206B65- <1>
     6 000008B8 79207768656E207265- <1>
     6 000008C1 6164790D0A24        <1>
     7 000008C7 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000008D0 746520626174636820- <1>
     7 000008D9 6A6F622028592F4E29- <1>
     7 000008E2 3F2024              <1>
     8 000008E5 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000008EE 6E64206F722066696C- <1>
     8 000008F7 65206E616D650D0A24  <1>
     9 00000900 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000909 2066696C65206E616D- <1>
     9 00000912 65206F7220          <1>
    10 00000917 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000920 666F756E640D0A24    <1>
    11 00000928 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000931 656E74206469736B20- <1>
    11 0000093A 73706163650D0A24    <1>
    12 00000942 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 0000094B 7669726F6E6D656E74- <1>
    12 00000954 2073706163650D0A24  <1>
    13 0000095D 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 00000966 74696F6E206572726F- <1>
    13 0000096F 720D0A24            <1>
    14 00000973 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 0000097C 6F7420626520636F70- <1>
    14 00000985 696564206F6E746F20- <1>
    14 0000098E 697473656C660D0A24  <1>
    15 00000997 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009A0 662064657374696E61- <1>
    15 000009A9 74696F6E206C6F7374- <1>
    15 000009B2 206265666F72652063- <1>
    15 000009BB 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009C1 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000009CA 636F706965640D0A24  <1>
    18 000009D3 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000009DC 68206D656D6F727920- <1>
    18 000009E5 666F7220434F50590D- <1>
    18 000009EE 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000009F0 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 000009F9 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 000009FA 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A03 65650D0A24          <1>
    23 00000A08 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A11 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A1A 726976652073706563- <1>
    25 00000A23 696669636174696F6E- <1>
    25 00000A2C 0D0A24              <1>
    26 00000A2F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A38 6B6579207768656E20- <1>
    26 00000A41 7265616479202E202E- <1>
    26 00000A4A 202E2024            <1>
    27 00000A4E 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A57 6172616D657465720D- <1>
    27 00000A60 0A24                <1>
    28                              <1> 
    29 00000A62 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000A6B 576564546875467269- <1>
    29 00000A74 536174              <1>
    30 00000A77 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000A80 206461746524        <1>
    31 00000A86 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000A8F 6174652069732024    <1>
    32 00000A97 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AA0 657720646174652024  <1>
    33 00000AA9 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AB2 293A2024            <1>
    34 00000AB6 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000ABF 293A2024            <1>
    35 00000AC3 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000ACC 293A2024            <1>
    36 00000AD0 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000AD9 2074696D6524        <1>
    37 00000ADF 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000AE8 696D652069732024    <1>
    38 00000AF0 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000AF9 65772074696D653A20- <1>
    38 00000B02 24                  <1>
    39                              <1> 
    40 00000B03 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B0C 7572652028592F4E29- <1>
    40 00000B15 3F2024              <1>
    41                              <1> 
    42 00000B18 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B21 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B2A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B33 6E2064726976652024  <1>
    45 00000B3C 2069732024          <1> volOk   db " is $"
    46 00000B41 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B4A 6162656C24          <1>
    47                              <1> 
    48 00000B4F 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B58 69726563746F72790D- <1>
    48 00000B61 0A24                <1>
    49 00000B63 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000B6C 206372656174652064- <1>
    49 00000B75 69726563746F72790D- <1>
    49 00000B7E 0A24                <1>
    50 00000B80 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000B89 6174682C206E6F7420- <1>
    50 00000B92 6469726563746F7279- <1>
    50 00000B9B 2C0D0A              <1>
    51 00000B9E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BA7 6F7279206E6F742065- <1>
    51 00000BB0 6D7074790D0A24      <1>
    52 00000BB7 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BC0 79206F66202024      <1>
    53 00000BC7 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000BD0 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000BD9 6E6965640D0A24      <1>
    55 00000BE0 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000BE9 72697665206973206E- <1>
    55 00000BF2 6F206C6F6E67657220- <1>
    55 00000BFB 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C01 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C0A 65766963650D0A24    <1>
    58 00000C12 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C1B 20666F756E640D0A24  <1>
    59 00000C24 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C2D 726F720D0A24        <1>
    60 00000C33 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C3C 6F74206265206E6573- <1>
    60 00000C45 7465640D0A24        <1>
    61 00000C4B 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C54 6174652066696C6520- <1>
    61 00000C5D 6572726F7220647572- <1>
    61 00000C66 696E6720706970650D- <1>
    61 00000C6F 0A24                <1>
    62 00000C71 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000C7A 2062696E6172792072- <1>
    62 00000C83 656164732066726F6D- <1>
    62 00000C8C 206120646576696365- <1>
    62 00000C95 0D0A24              <1>
    63 00000C98 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000C9E 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CA3 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CAC 24                  <1>
    66 00000CAD 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CB6 2024                <1>
    67 00000CB8 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CC1 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000CCA 617468206F72206669- <1>
    68 00000CD3 6C65206E616D650D0A- <1>
    68 00000CDC 24                  <1>
    69 00000CDD 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000CE6 756D626572206F6620- <1>
    69 00000CEF 706172616D65746572- <1>
    69 00000CF8 730D0A24            <1>
    70 00000CFC 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D05 74696E6720746F2064- <1>
    70 00000D0E 6576696365          <1>
    71 00000D13 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D17 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D20 6F6F2062696720746F- <1>
    72 00000D29 2066697420696E206D- <1>
    72 00000D32 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D3A 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D43 20202020202020546F- <1>
    75 00000D4C 74616C207379737465- <1>
    75 00000D55 6D206D656D6F72793A- <1>
    75 00000D5E 2024                <1>
    76 00000D60 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D69 20202020202020204D- <1>
    76 00000D72 656D6F727920757365- <1>
    76 00000D7B 6420627920444F533A- <1>
    76 00000D84 2024                <1>
    77 00000D86 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000D8F 656D6F727920757365- <1>
    77 00000D98 64206279206170706C- <1>
    77 00000DA1 69636174696F6E733A- <1>
    77 00000DAA 2024                <1>
    78 00000DAC 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DB5 656D6F727920726573- <1>
    78 00000DBE 657276656420627920- <1>
    78 00000DC7 68617264776172653A- <1>
    78 00000DD0 2024                <1>
    79 00000DD2 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000DDB 202020202020202020- <1>
    79 00000DE4 2020202020204D656D- <1>
    79 00000DED 6F727920667265653A- <1>
    79 00000DF6 2024                <1>
    80 00000DF8 20627974657324      <1> memByte db " bytes$"
    81 00000DFF 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E08 6F7420417373657274- <1>
    81 00000E11 61696E20444F532045- <1>
    81 00000E1A 6E74727920506F696E- <1>
    81 00000E23 7424                <1>
    82 00000E25 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E2E 416C6C6F636174696F- <1>
    82 00000E37 6E204572726F7224    <1>
    83 00000E3F 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E48 4572726F7224        <1>
    84 00000E4E 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E57 68616C74656424      <1>
    85                              <1> 
    86 00000E5E 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E67 206372656174652070- <1>
    86 00000E70 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000E75 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000E7E 6F6E206572726F720D- <1>
    88 00000E87 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000E88 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000E8C 2020202024          <1> fourSpc  db "    $"
    93 00000E91 20202024            <1> threeSpc db "   $"
    94 00000E95 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000E98 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EA1 696679204F4E206F72- <1>
    96 00000EAA 204F46460D0A24      <1>
    97                              <1> 
    98 00000EB1 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EB9 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000EC2 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000ECB 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000ED4 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000EDB 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000EE1 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000EEA 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000EF3 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000EF6 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000EF8 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000EFA 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000EFC 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000EFE 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F00 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F02 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F04 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F06 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F08 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F0A A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F0C B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F0E BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F10 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F12 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F14 F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F16 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F18 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F1A 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F23 63746563742024      <1>
   131 00000F2A 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F33 6E69742024          <1>
   132 00000F38 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F41 2024                <1>
   133 00000F43 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F4C 6F6D6D616E642024    <1>
   134 00000F54 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F5A 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F63 73742024            <1>
   136 00000F67 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000F6D 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000F76 656469612024        <1>
   138 00000F7C 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000F85 7420466F756E642024  <1>
   139 00000F8E 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000F97 7065722024          <1>
   140 00000F9C 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FA5 6C742024            <1>
   141 00000FA9 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FB2 742024              <1>
   142 00000FB5 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FBE 61696C7572652024    <1>
   143 00000FC6 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00000FCF 696F6C6174696F6E20- <1>
   143 00000FD8 24                  <1>
   144 00000FD9 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00000FE2 6174696F6E2024      <1>
   145 00000FE9 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00000FF2 73657274206469736B- <1>
   145 00000FFB 20                  <1>
   146 00000FFC 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 00001005 2020                <1>
   147 00001007 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 0000100A 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 00001013 696C61626C652024    <1>
   150 0000101B 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 00001024 756666657220657272- <1>
   150 0000102D 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001031 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 0000103A 6574776F726B204572- <1>
   153 00001043 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 00001048 64726976652024      <1> drvMsg      db "drive $"
   157 0000104F 6572726F7220726561- <1> readMsg     db "error reading $"
   157 00001058 64696E672024        <1>
   158 0000105E 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 00001067 74696E672024        <1>
   159 0000106D 41626F727424        <1> abortMsg    db "Abort$" 
   160 00001073 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 0000107A 526574727924        <1> retryMsg    db "Retry$"
   162 00001080 4661696C24          <1> failMsg     db "Fail$"
   163 00001085 2C2024              <1> betweenMsg  db ", $"
   164 00001088 3F2024              <1> endMsg      db "? $"
   165 0000108B 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 0000108F 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 00001092 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 00001096 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 00001099 B44A                <1>     mov ah, 4Ah ;Realloc
    10 0000109B 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 0000109E CD21                <1>     int 21h
    12 000010A0 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010A2 7432                <1>     jz commandMain
    14 000010A4 E8EA090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010A9 F605E4EFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010B0 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010B6 C605A5F0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010BD 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010C4 488D3D98F0FFFF      <1>     lea rdi, inBuffer + 2
    22 000010CB E842310000          <1>     call strcpy
    23 000010D0 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 000010D4 EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 000010D6 488B2528EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 000010DD E8B1090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 000010E2 F605ABEFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 000010E9 0F85FA260000        <1>     jnz exit
    31 000010EF E80A2F0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 000010F4 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 000010F9 CD21                <1>     int 21h
    34 000010FB B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001100 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 00001105 CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 00001107 E876310000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 0000110C E84A2E0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001111 F6057CEFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 00001118 0F85D10B0000        <1>     jnz batNextLine
    43 0000111E 488D153CF0FFFF      <1>     lea rdx, inBuffer
    44 00001125 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 0000112A CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 0000112C E8C32E0000          <1>     call printCRLFecho  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001131 803D2AF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 00001138 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 0000113A 488D3520F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001141 488D3D9BF0FFFF      <1>     lea rdi, cpyBuffer
    55 00001148 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 0000114D F3A4                <1>     rep movsb
    57 0000114F E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 00001154 488D350CF1FFFF      <1>     lea rsi, cmdBuffer + 2
    60 0000115B E8F0300000          <1>     call skipDelimiters
    61 00001160 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 00001163 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 00001165 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 00001168 0F84DA030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 0000116E 4C8B059AEEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 00001175 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 0000117A E861070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 0000117F E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 00001184 E84B020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 00001189 E857050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 0000118E F60504EFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 00001195 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 0000119B E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011A0 488D3DC0F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011A7 4889F1              <1>     mov rcx, rsi
    80 000011AA 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011AD 280DB3F0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011B3 8A0DADF0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011B9 FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011BB F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011BD E8AF300000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011C2 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011C4 488D351AF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 000011CB 31C9                <1>     xor ecx, ecx
    94 000011CD 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 000011D0 AC                  <1>     lodsb
    97 000011D1 3C22                <1>     cmp al, '"'
    98 000011D3 7507                <1>     jne .notQuoteToCount
    99 000011D5 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 000011D7 E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 000011DC 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 000011DE 75F0                <1>     jne .countQuotes
   104 000011E0 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 000011E3 488D3D7DF0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 000011EA AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 000011EB 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 000011ED 750E                <1>     jne .notQuote
   110 000011EF FECD                <1>     dec ch          ;We have a quote, now decrement
   111 000011F1 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 000011F3 AA                  <1>     stosb   ;Store char and inc rdi
   115 000011F4 FEC1                <1>     inc cl
   116 000011F6 AC                  <1>     lodsb   ;Get next char
   117 000011F7 3C22                <1>     cmp al, '"'
   118 000011F9 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 000011FB FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 000011FD E87D060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00001202 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 00001204 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 00001206 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 00001208 0F843A030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 0000120E AA                  <1>     stosb       ;Store char and advance rdi
   130 0000120F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001211 7404                <1>     je .exit
   132 00001213 FEC1                <1>     inc cl      ;Increment char count
   133 00001215 EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 00001217 880D49F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 0000121D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 0000121E 488D3542F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 00001225 31C9                <1>     xor ecx, ecx
   145 00001227 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 0000122A AC                  <1>     lodsb
   148 0000122B 3C22                <1>     cmp al, '"'
   149 0000122D 7507                <1>     jne .notQuoteToCount
   150 0000122F FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001231 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 00001236 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 00001238 75F0                <1>     jne .countQuotes
   155 0000123A 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 0000123D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 00001244 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 00001245 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 00001247 750E                <1>     jne .notQuote
   161 00001249 FECD                <1>     dec ch          ;We have a quote, now decrement
   162 0000124B 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 0000124D AA                  <1>     stosb   ;Store char and inc rdi
   166 0000124E FEC1                <1>     inc cl
   167 00001250 AC                  <1>     lodsb   ;Get next char
   168 00001251 3C22                <1>     cmp al, '"'
   169 00001253 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 00001255 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 00001257 3C7C                <1>     cmp al, "|"
   173 00001259 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 0000125B B00D                <1>     mov al, CR          ;Store the pipe char
   175 0000125D 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001260 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001261 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 00001263 7404                <1>     je .exit
   180 00001265 FEC1                <1>     inc cl      ;Increment char count
   181 00001267 EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 00001269 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 0000126C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 00001273 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 00001276 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 00001277 C605B8F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 0000127E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 00001285 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 00001288 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 0000128C 8A0598EDFFFF        <1>     mov al, byte [switchChar]
   197 00001292 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 00001294 7506                <1>     jne .noSwitchFnd
   199 00001296 F6150EEEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 0000129C E8AF2F0000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012A1 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012A4 74(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012A6 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012A9 488D3D56EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012B0 B801290000          <1>     mov eax, 2901h
   208 000012B5 CD21                <1>     int 21h
   209 000012B7 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012B9 0F8408010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012BF 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012C3 7505                <1>     jne .noTrailingDots
   215 000012C5 48FFCE              <1>     dec rsi
   216 000012C8 EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 000012CA 8A0559EDFFFF        <1>     mov al, byte [pathSep]  
   219 000012D0 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 000012D2 7525                <1>     jne .notPs
   221 000012D4 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 000012D7 AC                  <1>     lodsb   ;Get this char
   223 000012D8 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 000012DB 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 000012DD 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 000012DF 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 000012E1 7413                <1>     je .delimfnd
   228 000012E3 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 000012E5 740F                <1>     je .delimfnd
   230 000012E7 3C2E                <1>     cmp al, byte "."
   231 000012E9 740B                <1>     je .delimfnd
   232 000012EB 3C22                <1>     cmp al, byte '"'
   233 000012ED 7407                <1>     je .delimfnd
   234 000012EF E86A2F0000          <1>     call isALdelimiter  ;Is this a delim char?
   235 000012F4 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 000012F6 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 000012F9 4889F1              <1>     mov rcx, rsi
   242 000012FC 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 000012FF 0F84BA000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   244 00001305 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   245 00001308 488D3DD8EFFFFF      <1>     lea rdi, cmdPathSpec
   246 0000130F F3A4                <1>     rep movsb
   247 00001311 30C0                <1>     xor al, al
   248 00001313 AA                  <1>     stosb   ;Store a terminating null
   249 00001314 4887DE              <1>     xchg rbx, rsi
   250                              <1> ;Now we build FCBs for the arguments!
   251 00001317 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   252 0000131E E893000000          <1>     call .skipAndCheckCR
   253 00001323 745B                <1>     je .setupCmdVars
   254 00001325 C60578EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   255 0000132C 4889F0              <1>     mov rax, rsi
   256 0000132F 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   257 00001332 88056DEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   258 00001338 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   259 0000133C B801290000          <1>     mov eax, 2901h
   260 00001341 CD21                <1>     int 21h
   261 00001343 88055DEDFFFF        <1>     mov byte [arg1FCBret], al
   262                              <1> .skipArg:
   263 00001349 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   264 0000134A 3C0D                <1>     cmp al, CR
   265 0000134C 7432                <1>     je .setupCmdVars
   266 0000134E E80B2F0000          <1>     call isALdelimiter
   267 00001353 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   268 00001355 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   269 0000135A 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   270 0000135C C60544EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   271 00001363 4889F0              <1>     mov rax, rsi            
   272 00001366 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   273 00001369 880539EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   274 0000136F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 00001373 B801290000          <1>     mov eax, 2901h
   276 00001378 CD21                <1>     int 21h
   277 0000137A 880529EDFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .setupCmdVars:
   279                              <1> ;Before returning, we copy the command name to cmdName 
   280 00001380 488D3D60EFFFFF      <1>     lea rdi, cmdPathSpec
   281 00001387 E87B2F0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   282 0000138C E89A2E0000          <1>     call strlen ;Get the length of the null terminated final path componant
   283 00001391 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   284 00001397 7726                <1>     ja .exitBad     ;Return error
   285 00001399 4889FE              <1>     mov rsi, rdi
   286 0000139C 488D3D93EFFFFF      <1>     lea rdi, cmdName
   287 000013A3 FFC9                <1>     dec ecx ;Minus the terminating null
   288 000013A5 880F                <1>     mov byte [rdi], cl ;Store the length here
   289 000013A7 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   290                              <1> .cpCmdName:
   291 000013AA AC                  <1>     lodsb
   292 000013AB E8852E0000          <1>     call ucChar ;Uppercase the char
   293 000013B0 AA                  <1>     stosb
   294 000013B1 FFC9                <1>     dec ecx
   295 000013B3 75F5                <1>     jnz .cpCmdName
   296                              <1>     return
    13                              <2> %%_ret:
    14 000013B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> .skipAndCheckCR:
   298                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   299 000013B6 E8952E0000          <1>     call skipDelimiters ;Go to the next char in the input line
   300 000013BB 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   301                              <1>     return
    13                              <2> %%_ret:
    14 000013BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> .exitBad:
   303 000013BF C60570EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   304                              <1>     return
    13                              <2> %%_ret:
    14 000013C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .exitBadDrv:
   306 000013C7 C60568EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   307 000013CE E8E10A0000          <1>     call badDriveError
   308                              <1>     return
    13                              <2> %%_ret:
    14 000013D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> doCommandLine:
   311                              <1>     ;The following check accounts for the end of a piped command
   312 000013D4 803D5BEFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   313 000013DB 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   314 000013E1 803D4EEFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   315 000013E8 0F84FF0A0000        <1>     je badCmdError
   316 000013EE 803D41EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   317                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013F5 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 000013F7 488D35E9EEFFFF      <1>     lea rsi, cmdPathSpec
   319 000013FE 0FB71DE2EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   320 00001405 80FF3A              <1>     cmp bh, ":"
   321 00001408 7520                <1>     jne .noDriveSpecified
   322 0000140A 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   323 0000140C E8242E0000          <1>     call ucChar     ;Uppercase al
   324 00001411 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   325                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   326 00001413 803D1CEFFFFF02      <1>     cmp byte [cmdName], 2
   327 0000141A 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   328 0000141C 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   329 0000141E E8DE2D0000          <1>     call setDrive
   330                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001423 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 00001425 E98A0A0000          <1>     jmp badDriveError
   332                              <1> .noDriveSpecified:
   333                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   334 0000142A 488D1D34EEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   335 00001431 488D35FEEEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   336 00001438 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   337 0000143D BAFFFF0000          <1>     mov edx, 0FFFFh
   338 00001442 B5FF                <1>     mov ch, -1
   339 00001444 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   340 00001446 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   341 0000144B BAFFFF0000          <1>     mov edx, 0FFFFh
   342 00001450 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   343 00001452 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   344                              <1>             ;        al = 0  if the command should be executed as usual
   345 00001454 84C0                <1>     test al, al
   346 00001456 7444                <1>     jz .executeInternal
   347                              <1>     ;Here we execute externally and return to the prompt
   348                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   349 00001458 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   350 0000145F 488D35D0EEFFFF      <1>     lea rsi, cmdName        
   351 00001466 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   352 0000146B BAFFFF0000          <1>     mov edx, 0FFFFh
   353 00001470 B5FF                <1>     mov ch, -1
   354 00001472 CD2F                <1>     int 2Fh
   355 00001474 803DBBEEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   356                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000147B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000147D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   357                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   358                              <1>     ; is an external command that is in the CD or in the PATH.
   359                              <1>     ;Should not be used for this purpose but it is here...
   360 0000147E E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   361 00001483 488D35ACEEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   362 0000148A AC                  <1>     lodsb                   ;Get the name length
   363 0000148B 0FB6C8              <1>     movzx ecx, al
   364 0000148E 488D3D52EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   365 00001495 F3A4                <1>     rep movsb   
   366 00001497 31C0                <1>     xor eax, eax
   367 00001499 AA                  <1>     stosb   ;Store null terminator
   368 0000149A EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   369                              <1> .executeInternal:
   370 0000149C E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   371 000014A1 488D3D3FEEFFFF      <1>     lea rdi, cmdPathSpec
   372 000014A8 E87E2D0000          <1>     call strlen ;Get the length of the input command
   373 000014AD FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   374 000014AF 380D81EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   375 000014B5 0F854D230000        <1>     jne launchChild     ;If not, a path was specified, exit!
   376                              <1> .executeInternal2:
   377                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   378 000014BB 488D1DD4F2FFFF      <1>     lea rbx, functionTable
   379                              <1> .nextEntry:
   380 000014C2 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   381 000014C5 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   382 000014C8 0F843A230000        <1>     je launchChild      ;If so, check externally now
   383 000014CE 380D62EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   384 000014D4 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   385                              <1>     ;Here they have the same length so lets see if the name is the same
   386 000014D6 56                  <1>     push rsi
   387                              <1>     ;ecx has the length to compare
   388 000014D7 51                  <1>     push rcx
   389 000014D8 488D7301            <1>     lea rsi, qword [rbx + 1]
   390 000014DC 488D3D54EEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   391 000014E3 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   392 000014E5 59                  <1>     pop rcx
   393 000014E6 5E                  <1>     pop rsi
   394 000014E7 751E                <1>     jne .gotoNextEntry
   395                              <1>     ;Here it was found both strings are equal
   396 000014E9 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   397 000014EE 480FB71F            <1>     movzx rbx, word [rdi]
   398 000014F2 488D3D07EBFFFF      <1>     lea rdi, startLbl
   399 000014F9 4801FB              <1>     add rbx, rdi
   400 000014FC C6050AEBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   401 00001503 FFD3                <1>     call rbx        ;Call the internal function!
   402 00001505 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   403                              <1> .gotoNextEntry:
   404 00001507 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   405 0000150E 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   406 00001511 EBAF                <1>     jmp short .nextEntry
   407                              <1> 
   408                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   409                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   410                              <1> ;Can depend on RSP here because I fixed DOS.
   411 00001513 488B25EBEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   412 0000151A E851300000          <1>     call resetIDTentries
   413 0000151F B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   414 00001524 CD21                <1>     int 21h
   415 00001526 668905E0EAFFFF      <1>     mov word [returnCode], ax
   416 0000152D 84E4                <1>     test ah, ah     ;Regular exit
   417 0000152F 0F8454FCFFFF        <1>     jz commandMain.okRet
   418 00001535 80FC03              <1>     cmp ah, 3       ;TSR exit
   419 00001538 0F844BFCFFFF        <1>     je commandMain.okRet
   420                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   421                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   422                              <1>     ; as we always close the COMMAND.COM instance at this point.
   423 0000153E E83F000000          <1>     call cleanupRedirs
   424 00001543 E98EFBFFFF          <1>     jmp commandMain
   425                              <1> 
   426                              <1> hardSynErr:
   427                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   428 00001548 E843090000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   429 0000154D E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   430                              <1> redirFailure:
   431 00001552 488D151CF9FFFF      <1>     lea rdx, redirErrMsg
   432 00001559 B913000000          <1>     mov ecx, redirErrMsgL
   433 0000155E EB0C                <1>     jmp short redirPipeFailureCommon
   434                              <1> pipeFailure:
   435 00001560 488D15F7F8FFFF      <1>     lea rdx, pipeErrMsg
   436 00001567 B917000000          <1>     mov ecx, pipeErrMsgL
   437                              <1> redirPipeFailureCommon:
   438                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   439                              <1> ;This routine tries to close whatever handles are not -1 and delete
   440                              <1> ; pipe files if the pipe count is not 0.
   441                              <1> ;It resets all variables and jumps to reset the stack!
   442 0000156C B800400000          <1>     mov eax, 4000h  ;Write handle
   443 00001571 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   444 00001576 CD21                <1>     int 21h
   445                              <1> .noPrint:
   446 00001578 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   447 0000157D E954FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   448                              <1> 
   449                              <1> cleanupRedirs:
   450                              <1> ;Cleans all active redirections, returning to the saved state.
   451                              <1> ;Deletes any pipe files, leaves any redir out files.
   452                              <1> ;Resets the internal vars
   453 00001582 0FB70517EBFFFF      <1>     movzx eax, word [redirSTDIN]
   454 00001589 0FB7150AEBFFFF      <1>     movzx edx, word [pipeSTDIN]
   455 00001590 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   456 00001592 E8CC000000          <1>     call .closeAndReplace
   457 00001597 0FB70504EBFFFF      <1>     movzx eax, word [redirSTDOUT]
   458 0000159E 0FB715F7EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   459 000015A5 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   460 000015A7 E8B7000000          <1>     call .closeAndReplace
   461 000015AC 66C705E9EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   462 000015B5 0FB71DE4EAFFFF      <1>     movzx ebx, word [redirSTDIN]
   463 000015BC E892000000          <1>     call .closeHandle
   464                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   465 000015C1 66C705D6EAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   466 000015CA 0FB71DD1EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   467 000015D1 E87D000000          <1>     call .closeHandle
   468 000015D6 66C705C3EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   469 000015DF 0FB71DB4EAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   470 000015E6 E868000000          <1>     call .closeHandle
   471 000015EB 66C705A6EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   472 000015F4 0FB71DA1EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 000015FB E853000000          <1>     call .closeHandle
   474 00001600 66C70593EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   475 00001609 C60589EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   476 00001610 488D15CBEDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   477 00001617 803A00              <1>     cmp byte [rdx], 0
   478 0000161A 7407                <1>     jz .checkOld
   479 0000161C B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   480 00001621 CD21                <1>     int 21h
   481                              <1> .checkOld:
   482 00001623 488D1507EEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   483 0000162A 803A00              <1>     cmp byte [rdx],0
   484 0000162D 7407                <1>     jz .pipeNamesComplete
   485 0000162F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   486 00001634 CD21                <1>     int 21h
   487                              <1> .pipeNamesComplete:
   488 00001636 31C0                <1>     xor eax, eax
   489                              <1>     ;Invalidate the pointers and the paths too
   490 00001638 48890541EEFFFF      <1>     mov qword [newPipe], rax
   491 0000163F 48890542EEFFFF      <1>     mov qword [oldPipe], rax
   492 00001646 890596EDFFFF        <1>     mov dword [pipe1Filespec], eax
   493 0000164C 8905DFEDFFFF        <1>     mov dword [pipe2Filespec], eax
   494                              <1>     return
    13                              <2> %%_ret:
    14 00001652 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .closeHandle:
   497 00001653 81FBFFFFFFFF        <1>     cmp ebx, -1
   498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001659 74(52)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499 0000165B B8003E0000          <1>     mov eax, 3E00h
   500 00001660 CD21                <1>     int 21h
   501                              <1>     return
    13                              <2> %%_ret:
    14 00001662 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> .closeAndReplace:
   503                              <1> ;Input: ax = one possible handle, dx = second possible handle
   504                              <1> ;       bx = handle to close and copy ax/dx into
   505                              <1> ;Output: Handle intervened on. bx preserved
   506 00001663 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   507 00001666 09D0                <1>     or eax, edx     ;Form packed
   508 00001668 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   509                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000166D 74(62)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   510 0000166F E8DFFFFFFF          <1>     call .closeHandle
   511 00001674 663DFFFF            <1>     cmp ax, -1      
   512 00001678 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   513 0000167C 53                  <1>     push rbx
   514 0000167D 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   515 00001680 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   516 00001685 CD21                <1>     int 21h
   517 00001687 5B                  <1>     pop rbx
   518                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001688 73(62)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   519                              <1>     ;Else we now try to force default device to open!
   520 0000168A E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   521 0000168F B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   522 00001694 488D1527F8FFFF      <1>     lea rdx, devName
   523 0000169B CD21                <1>     int 21h
   524                              <1>     return
    13                              <2> %%_ret:
    14 0000169D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> cleanRedirOut:
   527                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   528                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   529                              <1> ; particular cases like launching bat files which needs special handling in 
   530                              <1> ; that all redirs need to be completely removed.
   531 0000169E 66813DFBE9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   532                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016A7 74(9D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   533 000016A9 0FB71DF2E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   534 000016B0 B901000000          <1>     mov ecx, 1      ;STDOUT
   535 000016B5 B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   536 000016BA CD21                <1>     int 21h
   537 000016BC 0FB71DDFE9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   538 000016C3 B8003E0000          <1>     mov eax, 3E00h  
   539 000016C8 CD21                <1>     int 21h
   540 000016CA 66C705CFE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   541 000016D3 488D15B9ECFFFF      <1>     lea rdx, rdrOutFilespec
   542 000016DA B800410000          <1>     mov eax, 4100h      ;Del stdout file
   543 000016DF CD21                <1>     int 21h
   544 000016E1 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   545                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   546                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   547                              <1>     return
    13                              <2> %%_ret:
    14 000016E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> advanceRedir:
   550                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   551                              <1> ;Close stdin redir then stdout redir. 
   552 000016E5 F605B2E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   553 000016EC 0F8585000000        <1>     jnz .redirIn
   554 000016F2 F605A0E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   555 000016F9 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   556 000016FF 0FBF0594E9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   557 00001706 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   558 0000170B 0F84EB000000        <1>     je .pipeOut              
   559                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   560 00001711 0FB71D82E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   561 00001718 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   562 0000171A B800460000          <1>     mov eax, 4600h
   563 0000171F CD21                <1>     int 21h
   564 00001721 0F8239FEFFFF        <1>     jc pipeFailure
   565 00001727 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   566 0000172C CD21                <1>     int 21h
   567 0000172E 0F822CFEFFFF        <1>     jc pipeFailure
   568 00001734 488B154DEDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   569 0000173B B800410000          <1>     mov eax, 4100h  ;Delete the file!
   570 00001740 CD21                <1>     int 21h
   571 00001742 0F8218FEFFFF        <1>     jc pipeFailure
   572 00001748 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   573 0000174B 66C70546E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   574                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   575                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   576                              <1>     ;Else exit!
   577 00001754 0FBF0541E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   578 0000175B 3DFFFFFFFF          <1>     cmp eax, -1
   579 00001760 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   580 00001766 C6052CE9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   581 0000176D F6052BE9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   582 00001774 753D                <1>     jnz .redirOut               ;Go for it if so!
   583                              <1>     return
    13                              <2> %%_ret:
    14 00001776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .redirIn:
   585                              <1> ;Here we clean redirIn
   586 00001777 0FB71D22E9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   587 0000177E 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   588 00001780 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   589 00001785 CD21                <1>     int 21h
   590 00001787 0F82C5FDFFFF        <1>     jc redirFailure
   591 0000178D B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   592 00001792 CD21                <1>     int 21h
   593 00001794 0F82B8FDFFFF        <1>     jc redirFailure
   594 0000179A 66C705FDE8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   595 000017A3 C605F4E8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   596 000017AA F605E8E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   597 000017B1 7549                <1>     jnz .pipeOut
   598                              <1> .redirOut:
   599 000017B3 F605E5E8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   600                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017BA 74(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   601                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   602 000017BC F605D6E8FFFFFF      <1>     test byte [pipeFlag], -1
   603 000017C3 7537                <1>     jnz short .pipeOut
   604 000017C5 0FB71DD6E8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   605 000017CC B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   606 000017D1 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   607 000017D6 CD21                <1>     int 21h
   608 000017D8 0F8274FDFFFF        <1>     jc redirFailure
   609 000017DE B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   610 000017E3 CD21                <1>     int 21h
   611 000017E5 0F8267FDFFFF        <1>     jc redirFailure
   612 000017EB 66C705AEE8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   613 000017F4 C605A4E8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   614                              <1>     return
    13                              <2> %%_ret:
    14 000017FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .pipeOut:
   616                              <1> ;Duplicate STDIN to save across pipe
   617 000017FC 0FBF0599E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   618 00001803 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   619                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001808 74(FB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   620 0000180A B800450000          <1>     mov eax, 4500h
   621 0000180F 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   622 00001811 CD21                <1>     int 21h
   623 00001813 0F8247FDFFFF        <1>     jc pipeFailure
   624 00001819 6689057AE8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   625                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   626 00001820 B800460000          <1>     mov eax, 4600h
   627 00001825 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   628 00001827 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   629 00001829 CD21                <1>     int 21h
   630 0000182B 0F822FFDFFFF        <1>     jc pipeFailure
   631                              <1> ;Now return the original stdout to stdout
   632 00001831 89D9                <1>     mov ecx, ebx
   633 00001833 0FB71D62E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   634 0000183A B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   635 0000183F CD21                <1>     int 21h
   636 00001841 0F8219FDFFFF        <1>     jc pipeFailure
   637                              <1> ;Now close the DUP'ed STDOUT
   638 00001847 B8003E0000          <1>     mov eax, 3E00h
   639 0000184C CD21                <1>     int 21h
   640 0000184E 0F820CFDFFFF        <1>     jc pipeFailure
   641                              <1> ;Finally unwind STDIN to the beginning of the file
   642 00001854 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   643 00001859 31DB                <1>     xor ebx, ebx    ;STDIN handle
   644 0000185B 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   645 0000185D 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   646 0000185F CD21                <1>     int 21h
   647 00001861 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   648 00001867 488B1512ECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   649 0000186E 48891513ECFFFF      <1>     mov qword [oldPipe], rdx
   650 00001875 66C7051EE8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   651                              <1>     return
    13                              <2> %%_ret:
    14 0000187E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> 
   654                              <1> peelRedir:
   655                              <1> ;Checks and sets up redir as appropriate
   656                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   657                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   658                              <1> ;Output: ZF=NZ => No redir
   659                              <1> ;        ZF=ZY => Redir
   660                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   661                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   662 0000187F 51                  <1>     push rcx
   663 00001880 57                  <1>     push rdi
   664 00001881 3C3C                <1>     cmp al, "<"
   665 00001883 740C                <1>     je .inputRedir
   666 00001885 3C3E                <1>     cmp al, ">"
   667 00001887 7427                <1>     je .outputRedir
   668 00001889 3C7C                <1>     cmp al, "|"
   669 0000188B 7441                <1>     je .pipeSetup
   670 0000188D F8                  <1>     clc
   671                              <1> .redirExit:
   672 0000188E 5F                  <1>     pop rdi
   673 0000188F 59                  <1>     pop rcx
   674                              <1>     return
    13                              <2> %%_ret:
    14 00001890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   675                              <1> .inputRedir:
   676 00001891 C60506E8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   677 00001898 488D3DA5EAFFFF      <1>     lea rdi, rdrInFilespec
   678                              <1> .redirCommon:
   679 0000189F E8AC290000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   680 000018A4 E8D82A0000          <1>     call cpDelimPathToBufz
   681 000018A9 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   682 000018AC 30C0                <1>     xor al, al  ;Clear the ZF flag
   683 000018AE EBDE                <1>     jmp short .redirExit
   684                              <1> .outputRedir:
   685 000018B0 C605E8E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   686 000018B7 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   687 000018BA 7509                <1>     jne .notDouble
   688 000018BC FE05DDE7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   689 000018C2 48FFC6              <1>     inc rsi ;Go past it too
   690                              <1> .notDouble:
   691 000018C5 488D3DC7EAFFFF      <1>     lea rdi, rdrOutFilespec
   692 000018CC EBD1                <1>     jmp short .redirCommon
   693                              <1> .pipeSetup:
   694 000018CE 56                  <1>     push rsi    ;Save rsi pointing to char past |
   695 000018CF E87C290000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   696 000018D4 803E7C              <1>     cmp byte [rsi], "|" 
   697 000018D7 7403                <1>     je .badFnd
   698 000018D9 803E0D              <1>     cmp byte [rsi], CR
   699                              <1> .badFnd:
   700 000018DC 5E                  <1>     pop rsi
   701 000018DD F9                  <1>     stc
   702 000018DE EBAE                <1>     jmp short .redirExit
   703                              <1> 
   704                              <1> setupRedirandPipes:
   705                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   706                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   707 000018E0 0F8484000000        <1>     jz .redirIn
   708 000018E6 488D15F5EAFFFF      <1>     lea rdx, pipe1Filespec
   709 000018ED 803A00              <1>     cmp byte [rdx], 0
   710 000018F0 7410                <1>     jz .pathFound
   711 000018F2 488D1538EBFFFF      <1>     lea rdx, pipe2Filespec
   712 000018F9 803A00              <1>     cmp byte [rdx], 0
   713 000018FC 0F855EFCFFFF        <1>     jnz pipeFailure
   714                              <1> .pathFound:
   715 00001902 48891577EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   716 00001909 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   717 0000190E BB01000000          <1>     mov ebx, 1
   718 00001913 CD21                <1>     int 21h
   719 00001915 0F8245FCFFFF        <1>     jc pipeFailure
   720 0000191B 6689057AE7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   721 00001922 E8E6280000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   722 00001927 0441                <1>     add al, "A"
   723 00001929 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   724 0000192E 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   725 00001930 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   726 00001932 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   727 00001934 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   728 00001939 CD21                <1>     int 21h
   729 0000193B 0F821FFCFFFF        <1>     jc pipeFailure
   730                              <1>     ;AX has the handle for this file now, this will become STDOUT
   731                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   732 00001941 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   733 00001944 B901000000          <1>     mov ecx, 1
   734 00001949 B800460000          <1>     mov eax, 4600h
   735 0000194E CD21                <1>     int 21h
   736 00001950 0F820AFCFFFF        <1>     jc pipeFailure
   737 00001956 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   738 0000195B CD21                <1>     int 21h
   739 0000195D 0F82FDFBFFFF        <1>     jc pipeFailure
   740 00001963 C6052FE7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   741                              <1> .redirIn:
   742                              <1> ;Now check if any other redir needs to be setup
   743                              <1> ;Checks and sets up redir as appropriate.
   744                              <1>     ;Setup the redir here for STDIN
   745 0000196A F6052DE7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   746 00001971 7449                <1>     jz .redirOut
   747 00001973 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   748 00001975 B800450000          <1>     mov eax, 4500h
   749 0000197A CD21                <1>     int 21h
   750 0000197C 0F82D0FBFFFF        <1>     jc redirFailure
   751 00001982 66890517E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   752 00001989 488D15B4E9FFFF      <1>     lea rdx, rdrInFilespec
   753 00001990 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   754 00001995 CD21                <1>     int 21h
   755 00001997 0F82B5FBFFFF        <1>     jc redirFailure
   756 0000199D 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   757 0000199F 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   758 000019A2 B800460000          <1>     mov eax, 4600h
   759 000019A7 CD21                <1>     int 21h
   760 000019A9 0F82A3FBFFFF        <1>     jc redirFailure
   761 000019AF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   762 000019B4 CD21                <1>     int 21h
   763 000019B6 0F8296FBFFFF        <1>     jc redirFailure
   764                              <1> .redirOut:
   765 000019BC F605DCE6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   766                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019C3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019C5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 000019C6 803DCFE6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   768                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019CD 75(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769                              <1>     ;Else setup the redir here for STDOUT
   770 000019CF BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   771 000019D4 B800450000          <1>     mov eax, 4500h
   772 000019D9 CD21                <1>     int 21h
   773 000019DB 0F8271FBFFFF        <1>     jc redirFailure
   774 000019E1 668905BAE6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   775 000019E8 488D15A4E9FFFF      <1>     lea rdx, rdrOutFilespec
   776 000019EF B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   777 000019F4 CD21                <1>     int 21h
   778 000019F6 730F                <1>     jnc .fileExists
   779 000019F8 B8003C0000          <1>     mov eax, 3C00h
   780 000019FD 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   781 000019FF CD21                <1>     int 21h
   782 00001A01 0F824BFBFFFF        <1>     jc redirFailure
   783                              <1> .fileExists:
   784 00001A07 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   785 00001A0C 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   786 00001A0F B800460000          <1>     mov eax, 4600h  ;DUP2
   787 00001A14 CD21                <1>     int 21h
   788 00001A16 0F8236FBFFFF        <1>     jc redirFailure
   789 00001A1C B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   790 00001A21 CD21                <1>     int 21h
   791 00001A23 0F8229FBFFFF        <1>     jc redirFailure
   792 00001A29 803D6FE6FFFF01      <1>     cmp byte [redirOut], 1
   793                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A30 74(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   794                              <1>     ;Here we move the file pointer to the end of the file
   795 00001A32 31D2                <1>     xor edx, edx    ;Low order 32 bits
   796 00001A34 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   797 00001A36 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   798 00001A3B B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   799 00001A40 CD21                <1>     int 21h
   800 00001A42 0F820AFBFFFF        <1>     jc redirFailure
   801                              <1>     return
    13                              <2> %%_ret:
    14 00001A48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   802                              <1> 
   803                              <1> 
   804                              <1> pullCommandline:
   805                              <1> ;This command pulls the command tail down, removing the whole launch command
   806 00001A49 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   807                              <1> ;Skip leading separators
   808                              <1> .pctSkipLeading:
   809 00001A50 AC                  <1>     lodsb   ;Get first char
   810 00001A51 E808280000          <1>     call isALdelimiter
   811 00001A56 74F8                <1>     je .pctSkipLeading
   812 00001A58 48FFCE              <1>     dec rsi
   813                              <1>     ;rsi points to the start of the command
   814 00001A5B 488D3D85E8FFFF      <1>     lea rdi, cmdPathSpec
   815 00001A62 E8C4270000          <1>     call strlen ;Get the length of the command
   816 00001A67 FFC9                <1>     dec ecx ;Minus the terminating null
   817 00001A69 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   818 00001A6C 280D33E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   819 00001A72 280D30E6FFFF        <1>     sub byte [arg2Off], cl
   820 00001A78 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   821 00001A7A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   822                              <1> .pctPullChars:
   823 00001A81 AC                  <1>     lodsb
   824 00001A82 AA                  <1>     stosb
   825 00001A83 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   826 00001A85 7404                <1>     je .pctExit
   827 00001A87 FFC1                <1>     inc ecx     ;Increment count
   828 00001A89 EBF6                <1>     jmp short .pctPullChars 
   829                              <1> .pctExit:
   830 00001A8B 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   831                              <1>     return
    13                              <2> %%_ret:
    14 00001A92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   832                              <1> 
   833                              <1> getSetMainState:
   834                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   835 00001A93 FC                  <1>     cld ;Ensure stringops are done the right way
   836 00001A94 C605C6E6FFFF80      <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   837 00001A9B C60541E7FFFF80      <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   838 00001AA2 C605BCE7FFFF80      <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   839 00001AA9 4C8B055FE5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   840                              <1>     return
    13                              <2> %%_ret:
    14 00001AB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   841                              <1> 
   842                              <1> 
   843                              <1> int2Eh: 
   844                              <1> ;Very sucky interface for passing command lines to be processed by the 
   845                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   846                              <1> ; more reliable with a critical section flag. Currently, if we are already
   847                              <1> ; processing an Int 2Eh request, this will not process the command.
   848                              <1> ;
   849                              <1> ;Need to add further safeguards for when pipes are also setup and
   850                              <1> ; batchmode is on!
   851                              <1> ;
   852                              <1> ;Input: rsi points to the count byte of a command line.
   853                              <1> ;       Max number of chars is 128 (127 + count byte)
   854                              <1> ;Output:
   855                              <1> ;       CF=NC: Command was processed. ax = Retcode
   856                              <1> ;       CF=CY: Command was not processed.
   857 00001AB1 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   858 00001AB6 F605D7E5FFFF04      <1>     test byte [statFlg1], inSingle
   859 00001ABD 0F8584000000        <1>     jnz int2EcheckReentry 
   860                              <1> .multiJoin:
   861 00001AC3 800DCAE5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   862 00001ACA 4889254EE5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   863 00001AD1 488B252DE5FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   864 00001AD8 B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   865 00001ADD CD21                <1>     int 21h
   866 00001ADF 48891D31E5FFFF      <1>     mov qword [int2Epsp], rbx
   867 00001AE6 52                  <1>     push rdx    ;Save on the stack
   868 00001AE7 488B1D21E5FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   869 00001AEE B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   870 00001AF3 CD21                <1>     int 21h
   871 00001AF5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   872 00001AF8 4989D9              <1>     mov r9, rbx
   873 00001AFB 488D3D60E6FFFF      <1>     lea rdi, inBuffer + 1
   874 00001B02 B910000000          <1>     mov ecx, 10h    ;80h/8
   875 00001B07 FC                  <1>     cld
   876 00001B08 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   877 00001B0B E883FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   878 00001B10 803D4BE6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   879 00001B17 0F851DF6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   880                              <1> int2ERet:
   881 00001B1D E860270000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   882 00001B22 488B25F6E4FFFF      <1>     mov rsp, qword [int2Ersp]
   883 00001B29 488B1DE7E4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   884 00001B30 B800500000          <1>     mov eax, 5000h ;Set Current PSP
   885 00001B35 CD21                <1>     int 21h
   886 00001B37 0FB705CFE4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   887 00001B3E 80254FE5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   888 00001B45 48CF                <1>     iretq
   889                              <1> 
   890                              <1> int2EcheckReentry:
   891                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   892                              <1> ; else, return with CF=CY.
   893 00001B47 B800520000          <1>     mov eax, 5200h  ;Get sysvars
   894 00001B4C CD21                <1>     int 21h
   895 00001B4E F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   896 00001B52 7512                <1>     jnz short .multifnd
   897 00001B54 B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   898 00001B59 CD2F                <1>     int 2Fh
   899 00001B5B 84C0                <1>     test al, al ;This must still be zero, else something installed
   900 00001B5D 7507                <1>     jnz .multifnd
   901 00001B5F 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   902 00001B64 48CF                <1>     iretq   
   903                              <1> .multifnd:
   904                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   905 00001B66 F390                <1>     pause
   906 00001B68 F60525E5FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   907 00001B6F 75F5                <1>     jnz .multifnd
   908 00001B71 E94DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B76 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001B7B B800480000          <1>     mov eax, 4800h
     7 00001B80 CD21                <1>     int 21h
     8 00001B82 730A                <1>     jnc .bbAlloced
     9 00001B84 E8FE020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001B89 E9EAF9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001B8E 48890516E5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001B95 4889C3              <1>     mov rbx, rax
    14 00001B98 4889DF              <1>     mov rdi, rbx
    15 00001B9B 31C0                <1>     xor eax, eax
    16 00001B9D B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BA2 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BA4 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BA7 8A05E9E4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BAD 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BB0 B8FFFFFFFF          <1>     mov eax, -1
    22 00001BB5 B905000000          <1>     mov ecx, 5
    23 00001BBA 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BBE F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BC0 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BC6 488D351AE7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BCD E840260000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001BD2 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001BDA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001BE1 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001BE2 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001BE4 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001BE5 B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001BEA E861260000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001BEF E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001BF4 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001BF6 4889F0              <1>     mov rax, rsi
    43 00001BF9 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001BFD 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C00 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C05 FFC1                <1>     inc ecx
    48 00001C07 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C0D 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C0F AC                  <1>     lodsb   ;Getch
    52 00001C10 E849260000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C15 74D3                <1>     je .bbFndLp
    54 00001C17 E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C1C 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C1E 488D35C2E6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C25 488D3D87E4FFFF      <1>     lea rdi, batFile
    60 00001C2C 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C2F 80FC3A              <1>     cmp ah, ":"
    62 00001C32 746D                <1>     je .bbdrvGiven
    63 00001C34 3A05EFE3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C3A 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C3C E8CC250000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C41 0441                <1>     add al, "A"
    68 00001C43 B43A                <1>     mov ah, ":"
    69 00001C45 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C47 8A05DCE3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C4D AA                  <1>     stosb   ;Store the pathsep
    73 00001C4E 8A055FE4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C54 E8DC250000          <1>     call ucChar             ;UC it
    75 00001C59 880554E4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C5F 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C61 88C2                <1>     mov dl, al
    78 00001C63 56                  <1>     push rsi        ;Save remaining char source
    79 00001C64 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C67 B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C6C CD21                <1>     int 21h
    82 00001C6E 5E                  <1>     pop rsi
    83 00001C6F 7311                <1>     jnc .bbRelPathOk
    84 00001C71 488D15FAEBFFFF      <1>     lea rdx, badBat
    85 00001C78 E888230000          <1>     call printString
    86 00001C7D E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001C82 31C0                <1>     xor eax, eax
    90 00001C84 31C9                <1>     xor ecx, ecx
    91 00001C86 F2AE                <1>     repne scasb ;Find the terminating null
    92 00001C88 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001C8B 8A0598E3FFFF        <1>     mov al, byte [pathSep]
    94 00001C91 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001C92 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001C94 E874250000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001C99 0441                <1>     add al, "A"
   102 00001C9B B43A                <1>     mov ah, ":"
   103 00001C9D 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001C9F EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001CA1 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001CA3 AC                  <1>     lodsb
   111 00001CA4 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001CA7 3A057CE3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001CAD 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001CAF E85E250000          <1>     call strcpy ;Copy the remaining portion
   116 00001CB4 488D35F8E3FFFF      <1>     lea rsi, batFile
   117 00001CBB 4889F7              <1>     mov rdi, rsi
   118 00001CBE B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001CC3 CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001CC5 E8D4F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001CCA E8B3F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001CCF 800DBEE3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001CD6 E9FBF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001CDB 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001CDE 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001CE0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001CE1 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001CE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001CE5 E842010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001CEA E9E7F3FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001CEF F6059EE3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001CF6 75ED                <1>     jnz batFinish
   144 00001CF8 488D15B4E3FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001CFF B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001D04 CD21                <1>     int 21h
   148 00001D06 7315                <1>     jnc .batOpened
   149 00001D08 488D157AEBFFFF      <1>     lea rdx, needBat
   150 00001D0F E8F1220000          <1>     call printString
   151 00001D14 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001D19 CD21                <1>     int 21h
   153 00001D1B EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001D1D 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001D1F 488B3585E3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001D26 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001D29 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001D2C B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001D31 CD21                <1>     int 21h
   161 00001D33 C60528E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001D3A 488D1522E4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001D41 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001D43 E8CB000000          <1>     call .readChar          ;Read the char
   166 00001D48 85C0                <1>     test eax, eax
   167 00001D4A 7433                <1>     jz .endOfBatAddCr
   168 00001D4C FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001D4E 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001D51 742C                <1>     je .endOfBatAddCr
   171 00001D53 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001D56 7444                <1>     je .endOfLineCr
   173 00001D58 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001D5B 744F                <1>     je .endOfLineLf
   175 00001D5D FE05FFE3FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001D63 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001D66 803DF5E3FFFF80      <1>     cmp byte [inBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   178 00001D6D 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001D6F 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   180 00001D72 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   181 00001D75 FE0DE7E3FFFF        <1>     dec byte [inBuffer + 1] ;Reduce the valid char count by one
   182 00001D7B FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   183 00001D7D EB30                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   184                              <1> .endOfBatAddCr:
   185 00001D7F C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   186                              <1> .endOfBat:
   187 00001D82 800D0BE3FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   188 00001D89 803DD2E3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   189 00001D90 751D                <1>     jne .endOfLine
   190 00001D92 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   191 00001D97 E949FFFFFF          <1>     jmp batFinish
   192                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   193 00001D9C E872000000          <1>     call .readChar  ;Get the LF over the CR
   194 00001DA1 85C0                <1>     test eax, eax   ;Did we read nothing?
   195 00001DA3 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   196 00001DA5 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   197 00001DA8 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   198 00001DAA FFC7                <1>     inc edi             ;Else add to the count
   199                              <1> .endOfLineLf:
   200 00001DAC C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   201                              <1> .endOfLine:
   202                              <1> ;Close the file, update the batch block file pointer, then proceed.
   203                              <1> ;rsi -> Batch block.
   204 00001DAF E857000000          <1>     call .closeBat
   205                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   206 00001DB4 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   207 00001DB7 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   208                              <1> ;Now we echo the line to the console unless the first char is @ or 
   209                              <1> ; the echo flag is off
   210 00001DBE 488D159EE3FFFF      <1>     lea rdx, inBuffer + 2
   211 00001DC5 803A40              <1>     cmp byte [rdx], batNoEchoChar
   212 00001DC8 7421                <1>     je .noEchoPull       
   213 00001DCA F605C5E2FFFFFF      <1>     test byte [echoFlg], -1         
   214 00001DD1 7413                <1>     jz .noEcho
   215 00001DD3 0FB60D88E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   216 00001DDA BB01000000          <1>     mov ebx, 1  ;STDOUT
   217 00001DDF B800400000          <1>     mov eax, 4000h  ;Write woo!
   218 00001DE4 CD21                <1>     int 21h
   219                              <1> .noEcho:
   220 00001DE6 E941F3FFFF          <1>     jmp commandMain.batProceed
   221                              <1> .noEchoPull:
   222 00001DEB FE0D71E3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   223 00001DF1 0F84F8FEFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   224 00001DF7 4889D7              <1>     mov rdi, rdx
   225 00001DFA 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   226 00001DFE 0FB60D5DE3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   227 00001E05 FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   228 00001E07 F3A4                <1>     rep movsb 
   229 00001E09 EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   230                              <1>     
   231                              <1> .closeBat:
   232                              <1> ;Close the handle in rbx
   233 00001E0B B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   234 00001E10 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   235                              <1>     return
    13                              <2> %%_ret:
    14 00001E12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> .readChar:
   237                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   238 00001E13 B901000000          <1>     mov ecx, 1
   239 00001E18 B8003F0000          <1>     mov eax, 3F00h
   240 00001E1D CD21                <1>     int 21h  
   241 00001E1F 85C0                <1>     test eax, eax
   242                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E21 75(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   243 00001E23 800D6AE2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   244                              <1>     return
    13                              <2> %%_ret:
    14 00001E2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> 
   247                              <1> batExpandVar:
   248                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   249                              <1> ;       rdi -> Position to place the substitution string
   250                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   251                              <1> ;        CF=CY: No substitution string found
   252                              <1>     return
    13                              <2> %%_ret:
    14 00001E2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1>     ;cmp byte [rsi], "%"
   254                              <1> 
   255                              <1> batCleanup:
   256                              <1> ;This function is called after the last line has been processed by the 
   257                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   258                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   259 00001E2C 488B1D78E2FFFF      <1>     mov rbx, qword [bbPtr]
   260 00001E33 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   261 00001E36 88055AE2FFFF        <1>     mov byte [echoFlg], al
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   264                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   265                              <1> ; But since this is the routine called by the error handler too, it 
   266                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   267                              <1> ; just have a null pointer.
   268                              <1> ;-----------------------------------------------------------------------
   269                              <1> ;Finally free this batch header
   270 00001E3C 4150                <1>     push r8
   271 00001E3E 4989D8              <1>     mov r8, rbx
   272 00001E41 B800490000          <1>     mov eax, 4900h
   273 00001E46 CD21                <1>     int 21h
   274 00001E48 4158                <1>     pop r8
   275 00001E4A E833F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   276 00001E4F 48C70551E2FFFF0000- <1>     mov qword [bbPtr], 0    
   276 00001E58 0000                <1>
   277 00001E5A 802533E2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   278                              <1>     return
    13                              <2> %%_ret:
    14 00001E61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001E62 488D15BFEAFFFF      <1>     lea rdx, noSpace
    10 00001E69 488D0DDBEDFFFF      <1>     lea rcx, pipeErr
    11 00001E70 F60522E2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001E77 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001E79 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001E7D E866000000          <1>     call badCmn     ;Print the string
    15 00001E82 E9F1F6FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001E87 488D1589EEFFFF      <1>     lea rdx, noMemMsg
    18 00001E8E EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001E90 488D158DEDFFFF      <1>     lea rdx, syntaxErr
    21 00001E97 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001E99 488D15A2EAFFFF      <1>     lea rdx, noEnvSpace
    24 00001EA0 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001EA2 488D1527EDFFFF      <1>     lea rdx, accDenMsg
    27 00001EA9 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001EAB 488D159CEBFFFF      <1>     lea rdx, badParm
    30 00001EB2 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001EB4 488D1556EBFFFF      <1>     lea rdx, badDrv
    33 00001EBB EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001EBD 488D1519EEFFFF      <1>     lea rdx, badArgs
    36 00001EC4 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001EC6 488D15F4EDFFFF      <1>     lea rdx, badSpec
    39 00001ECD EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001ECF 488D152AEAFFFF      <1>     lea rdx, dupName
    43 00001ED6 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001ED8 488D1538EAFFFF      <1>     lea rdx, fnfMsg
    46 00001EDF EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001EE1 488D1567ECFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001EE8 E918210000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001EED 488D15F1E9FFFF      <1>     lea rdx, badCmd
    53 00001EF4 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001EF6 C60597E6FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001EFD C60591E6FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001F04 C70588E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001F0D 00                  <1>
    59 00001F0E C60586E6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001F15 66C70572E5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001F1E 488D3DF8E6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001F25 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001F28 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001F31 3F                  <1>
    64 00001F32 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001F36 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001F3D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001F44 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001F47 E804230000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001F4C AC                  <1>     lodsb   ;Get this char
    72 00001F4D 3C0D                <1>     cmp al, CR
    73 00001F4F 744D                <1>     je .scanDone
    74 00001F51 3A05D3E0FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001F57 7524                <1>     jne .notSwitch
    76 00001F59 AC                  <1>     lodsb   ;Get the next char
    77 00001F5A E8D6220000          <1>     call ucChar
    78 00001F5F 3C57                <1>     cmp al, "W"
    79 00001F61 7509                <1>     jne .notWide
    80 00001F63 800D2AE6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001F6A EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001F6C 3C50                <1>     cmp al, "P"
    84 00001F6E 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001F74 800D19E6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001F7B EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001F7D F60510E6FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001F84 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001F8A 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001F8D E84A240000          <1>     call copyArgumentToSearchSpec   
    93 00001F92 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001F95 800DF8E5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001F9C EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001F9E F605EFE5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001FA5 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001FA7 488D35E2E4FFFF      <1>     lea rsi, searchSpec
   101 00001FAE 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001FB2 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001FB4 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001FB9 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001FBD B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001FC2 CD21                <1>     int 21h
   108 00001FC4 3CFF                <1>     cmp al, -1
   109 00001FC6 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001FCC 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001FD1 84C0                <1>     test al, al
   113 00001FD3 740A                <1>     jz .currentDrv
   114 00001FD5 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001FD7 8805BDE5FFFF        <1>     mov byte [dirDrv], al
   116 00001FDD EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001FDF E829220000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001FE4 8805B0E5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001FEA 488D359FE4FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001FF1 488D3DA3E5FFFF      <1>     lea rdi, dirSrchDir
   124 00001FF8 0FB6059BE5FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001FFF 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00002001 0441                <1>     add al, "A" ;Turn into a letter
   127 00002003 B43A                <1>     mov ah, ":"
   128 00002005 66AB                <1>     stosw   ;Store X: into the search path
   129 00002007 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 0000200C CD2F                <1>     int 2fh
   131 0000200E 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00002010 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00002016 8A050DE0FFFF        <1>     mov al, byte [pathSep]
   135 0000201C 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 0000201E 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00002020 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00002021 FEC2                <1>     inc dl  ;Increment by 1
   139 00002023 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00002026 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 0000202B CD21                <1>     int 21h
   142 0000202D 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00002030 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00002032 3807                <1>     cmp byte [rdi], al
   149 00002034 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00002036 48FFC7              <1>     inc rdi
   151 00002039 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 0000203B 8A05E8DFFFFF        <1>     mov al, byte [pathSep]
   154 00002041 3806                <1>     cmp byte [rsi], al
   155 00002043 7412                <1>     je .copyPathLoop
   156 00002045 B43A                <1>     mov ah, ":"
   157 00002047 86C4                <1>     xchg al, ah
   158 00002049 663947FE            <1>     cmp word [rdi - 2], ax
   159 0000204D 7408                <1>     je .copyPathLoop
   160 0000204F 88E0                <1>     mov al, ah
   161 00002051 3847FF              <1>     cmp byte [rdi - 1], al
   162 00002054 7401                <1>     je .copyPathLoop
   163 00002056 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00002057 AC                  <1>     lodsb
   166 00002058 3A05CBDFFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 0000205E 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002060 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00002062 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00002064 48FFC6              <1>     inc rsi
   172 00002067 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00002069 3C2E                <1>     cmp al, "."
   175 0000206B 7407                <1>     je .dots
   176                              <1> .store:
   177 0000206D AA                  <1>     stosb
   178 0000206E 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002070 7472                <1>     jz .exitPathCopy
   180 00002072 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00002074 8A25AFDFFFFF        <1>     mov ah, byte [pathSep]
   188 0000207A 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 0000207D 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 0000207F 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00002081 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00002084 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00002086 3A259DDFFFFF        <1>     cmp ah, byte [pathSep]
   195 0000208C 7406                <1>     je .skipThisPathsep
   196 0000208E 84E4                <1>     test ah, ah
   197 00002090 74C5                <1>     jz .copyPathLoop
   198 00002092 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00002094 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00002097 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00002099 48FFC6              <1>     inc rsi ;Move past the second dot
   206 0000209C 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 0000209E 3A2585DFFFFF        <1>     cmp ah, byte [pathSep]
   208 000020A4 7408                <1>     je .tdOk
   209 000020A6 84E4                <1>     test ah, ah
   210 000020A8 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 000020AE 8A0575DFFFFF        <1>     mov al, byte byte [pathSep]
   213 000020B4 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 000020B8 0F84EDFDFFFF        <1>     je badParamError
   215 000020BE 4881EF02000000      <1>     sub rdi, 2
   216 000020C5 31C9                <1>     xor ecx, ecx
   217 000020C7 FFC9                <1>     dec ecx
   218 000020C9 FD                  <1>     std
   219 000020CA F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000020CC FC                  <1>     cld
   221 000020CD 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000020D4 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000020D6 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000020DC 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000020DF E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000020E4 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 000020EB 8A0538DFFFFF        <1>     mov al, byte [pathSep]
   230 000020F1 B43A                <1>     mov ah, ":"
   231 000020F3 86C4                <1>     xchg al, ah
   232 000020F5 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 000020F9 7409                <1>     je .skipOverwrite
   234 000020FB 88E0                <1>     mov al, ah
   235 000020FD 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 000020FF 7503                <1>     jne .skipOverwrite
   237 00002101 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00002104 488D3590E4FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 0000210B 4889F7              <1>     mov rdi, rsi
   241 0000210E B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00002113 CD2F                <1>     int 2fh
   243 00002115 E8CF220000          <1>     call scanForWildcards
   244 0000211A 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 0000211C 4889F2              <1>     mov rdx, rsi
   246 0000211F 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00002123 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00002125 E82B240000          <1>     call setDTA ;Set the DTA
   250 0000212A B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 0000212F B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00002134 CD21                <1>     int 21h
   253 00002136 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00002138 F605ECDFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 0000213F 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002141 31C0                <1>     xor eax, eax
   259 00002143 31C9                <1>     xor ecx, ecx
   260 00002145 FFC9                <1>     dec ecx
   261 00002147 F2AE                <1>     repne scasb
   262 00002149 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 0000214C EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 0000214E 31C0                <1>     xor eax, eax
   268 00002150 31C9                <1>     xor ecx, ecx
   269 00002152 FFC9                <1>     dec ecx
   270 00002154 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00002156 8A05CDDEFFFF        <1>     mov al, byte [pathSep]
   273 0000215C 31C9                <1>     xor ecx, ecx
   274 0000215E FFC9                <1>     dec ecx
   275 00002160 FD                  <1>     std ;Search backwards
   276 00002161 F2AE                <1>     repne scasb
   277 00002163 FC                  <1>     cld ;Search forwards again
   278 00002164 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00002167 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 0000216B 7503                <1>     jne .wcsp1
   281 0000216D 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00002170 57                  <1>     push rdi
   285 00002171 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00002173 7503                <1>     jne .wcsp2
   287 00002175 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00002178 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 0000217B 488D3D9BE4FFFF      <1>     lea rdi, dirSrchFCB
   291 00002182 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00002187 CD21                <1>     int 21h
   293 00002189 5F                  <1>     pop rdi
   294 0000218A 31C0                <1>     xor eax, eax
   295 0000218C 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 0000218E 0FB60505E4FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00002195 E898130000          <1>     call volume.dirEP
   299 0000219A 488D1516EAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000021A1 B409                <1>     mov ah, 09h
   301 000021A3 CD21                <1>     int 21h
   302 000021A5 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000021A8 488D15ECE3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 000021AF B409                <1>     mov ah, 09h
   305 000021B1 CD21                <1>     int 21h
   306 000021B3 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 000021B6 488D15B0E6FFFF      <1>     lea rdx, crlf2
   308 000021BD B409                <1>     mov ah, 09h
   309 000021BF CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 000021C1 8A0562DEFFFF        <1>     mov al, byte [pathSep]
   313 000021C7 3847FF              <1>     cmp byte [rdi - 1], al
   314 000021CA 7403                <1>     je .root
   315 000021CC 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000021CF 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000021D2 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000021D3 488D3544E4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000021DA E84C210000          <1>     call FCBToAsciiz    ;Terminates for free
   321 000021DF E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 000021E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 000021E5 E86B230000          <1>     call setDTA
   326 000021EA B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 000021EF 488D15A5E3FFFF      <1>     lea rdx, dirSrchDir
   328 000021F6 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 000021FB CD21                <1>     int 21h
   330 000021FD 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 000021FF E880000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00002204 B44F                <1>     mov ah, 4Fh
   334 00002206 CD21                <1>     int 21h
   335 00002208 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 0000220A F60583E3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002211 740B                <1>     jz .dirNoEndNewLine
   339 00002213 488D1550E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 0000221A B409                <1>     mov ah, 09h
   341 0000221C CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 0000221E F7056EE3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00002227 FF                  <1>
   345 00002228 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 0000222A 488D15E6E6FFFF      <1>     lea rdx, fnfMsg
   348 00002231 E8CF1D0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00002236 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00002237 8B0559E3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   352 0000223D B909000000          <1>     mov ecx, 9
   353 00002242 E8B6210000          <1>     call printDecimalValLB
   354 00002247 488D15A2E7FFFF      <1>     lea rdx, dirOk
   355 0000224E B409                <1>     mov ah, 09h
   356 00002250 CD21                <1>     int 21h
   357 00002252 B800360000          <1>     mov eax, 3600h ;Get disk info
   358 00002257 8A153DE3FFFF        <1>     mov dl, byte [dirDrv]
   359 0000225D FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   360 0000225F CD21                <1>     int 21h ;Get disk free space info
   361 00002261 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   362 00002264 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   363 00002267 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   364 00002269 F7E1                <1>     mul ecx ;Get bytes per cluster
   365 0000226B 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   366                              <1>     ;rax now has the number of free bytes on the disk
   367 0000226E B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   368 00002273 E885210000          <1>     call printDecimalValLB
   369 00002278 488D157BE7FFFF      <1>     lea rdx, bytesOk
   370 0000227F B409                <1>     mov ah, 09h
   371 00002281 CD21                <1>     int 21h
   372                              <1>     return
    13                              <2> %%_ret:
    14 00002283 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .dirPrintFileData:
   375                              <1> ;Use cmdFcb to build the file name with space
   376                              <1> ;Start by print the name (same for both cases)
   377                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   378 00002284 F605A0DEFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   379                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000228B 75(83)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   380 0000228D 488D35A0DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   381 00002294 488D3D6BDEFFFF      <1>     lea rdi, cmdFcb
   382 0000229B E81D200000          <1>     call asciiFilenameToFCB
   383 000022A0 488D155FDEFFFF      <1>     lea rdx, cmdFcb
   384 000022A7 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   385 000022AC BB01000000          <1>     mov ebx, 1  ;STDOUT
   386 000022B1 B440                <1>     mov ah, 40h ;Write handle
   387 000022B3 CD21                <1>     int 21h
   388 000022B5 52                  <1>     push rdx
   389 000022B6 B220                <1>     mov dl, " "
   390 000022B8 B402                <1>     mov ah, 02h ;Print char
   391 000022BA CD21                <1>     int 21h
   392 000022BC 5A                  <1>     pop rdx
   393 000022BD 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   394 000022C4 B903000000          <1>     mov ecx, 3  ;Print three chars
   395 000022C9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   396 000022CE B440                <1>     mov ah, 40h ;Write handle
   397 000022D0 CD21                <1>     int 21h
   398 000022D2 F605BBE2FFFF01      <1>     test byte [dirFlags], dirWideType
   399 000022D9 757B                <1>     jnz .widePrint
   400                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   401                              <1>     ;Now check if a DIR
   402 000022DB F60549DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   403 000022E2 7422                <1>     jz .dirPrintNotDir
   404 000022E4 488D151DE7FFFF      <1>     lea rdx, dirLbl
   405 000022EB B409                <1>     mov ah, 09h
   406 000022ED CD21                <1>     int 21h
   407 000022EF 488D159BEBFFFF      <1>     lea rdx, threeSpc
   408 000022F6 B409                <1>     mov ah, 09h
   409 000022F8 CD21                <1>     int 21h
   410 000022FA B409                <1>     mov ah, 09h
   411 000022FC CD21                <1>     int 21h
   412 000022FE B220                <1>     mov dl, SPC
   413 00002300 B402                <1>     mov ah, 02h
   414 00002302 CD21                <1>     int 21h
   415 00002304 EB1C                <1>     jmp short .dirPrintFileDT
   416                              <1> .dirPrintNotDir:
   417                              <1> ;Here we print the file size
   418 00002306 B220                <1>     mov dl, " "
   419 00002308 B402                <1>     mov ah, 02h
   420 0000230A CD21                <1>     int 21h
   421 0000230C 8B051EDEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   422 00002312 B90D000000          <1>     mov ecx, 13
   423 00002317 E8E1200000          <1>     call printDecimalValLB
   424 0000231C B220                <1>     mov dl, SPC
   425 0000231E B402                <1>     mov ah, 02h
   426 00002320 CD21                <1>     int 21h
   427                              <1> .dirPrintFileDT:
   428 00002322 0FB70505DEFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   429 00002329 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   430 0000232B E87B1A0000          <1>     call printDate
   431 00002330 488D155AEBFFFF      <1>     lea rdx, threeSpc
   432 00002337 B409                <1>     mov ah, 09h
   433 00002339 CD21                <1>     int 21h
   434 0000233B 0FB705EADDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   435 00002342 E8861B0000          <1>     call printTime
   436 00002347 488D151CE5FFFF      <1>     lea rdx, crlf
   437 0000234E B409                <1>     mov ah, 09h
   438 00002350 CD21                <1>     int 21h
   439 00002352 B017                <1>     mov al, 23  ;23 lines... for the next bit
   440 00002354 EB0D                <1>     jmp short .dirPrintNameExit
   441                              <1> .widePrint:
   442                              <1> ;If /W, print name space ext space space space space
   443 00002356 488D152FEBFFFF      <1>     lea rdx, fourSpc
   444 0000235D B409                <1>     mov ah, 09h ;Print string
   445 0000235F CD21                <1>     int 21h
   446 00002361 B073                <1>     mov al, 5*23    ;5 entries per line...
   447                              <1> .dirPrintNameExit:
   448 00002363 FF052DE2FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   449 00002369 FE0526E2FFFF        <1>     inc byte [dirLineCtr]
   450 0000236F 380520E2FFFF        <1>     cmp byte [dirLineCtr], al
   451                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002375 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002377 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   452 00002378 F60515E2FFFF02      <1>     test byte [dirFlags], dirPageType
   453 0000237F 741A                <1>     jz .dirPrnNoPag
   454 00002381 488D15A7E6FFFF      <1>     lea rdx, pauseMes
   455 00002388 B409                <1>     mov ah, 09h
   456 0000238A CD21                <1>     int 21h
   457 0000238C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   458 0000238E CD21                <1>     int 21h
   459 00002390 488D15D3E4FFFF      <1>     lea rdx, crlf   ;Force new line
   460 00002397 B409                <1>     mov ah, 09h
   461 00002399 CD21                <1>     int 21h
   462                              <1> .dirPrnNoPag:
   463 0000239B C605F3E1FFFF00      <1>     mov byte [dirLineCtr], 0
   464                              <1>     return
    13                              <2> %%_ret:
    14 000023A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> chdir:
   467 000023A3 F605FADCFFFFFF      <1>     test byte [arg1Flg], -1
   468 000023AA 754D                <1>     jnz .changeDir
   469                              <1>     ;Print CWD
   470                              <1> .printCWD:
   471 000023AC E8C91C0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   472 000023B1 E8481C0000          <1>     call printCRLF
   473                              <1>     return
    13                              <2> %%_ret:
    14 000023B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .printDiskCWD:
   475                              <1> ;Print CWD for a specified drive
   476 000023B7 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   477 000023BB 88D0                <1>     mov al, dl
   478 000023BD 0440                <1>     add al, "@" ;Get the UC letter
   479 000023BF B43A                <1>     mov ah, ":"
   480 000023C1 488D3DC8E0FFFF      <1>     lea rdi, searchSpec
   481 000023C8 66AB                <1>     stosw   ;Store X:, rdi+=2
   482 000023CA 8A0559DCFFFF        <1>     mov al, byte [pathSep]
   483 000023D0 AA                  <1>     stosb   ;Store pathSep, inc rdi
   484 000023D1 B447                <1>     mov ah, 47h ;Get Current Working Directory
   485 000023D3 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   486 000023D6 CD21                <1>     int 21h
   487 000023D8 E84E1E0000          <1>     call strlen
   488 000023DD 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   489 000023E3 B440                <1>     mov ah, 40h ;Write to handle
   490 000023E5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   491 000023EA 488D159FE0FFFF      <1>     lea rdx, searchSpec
   492 000023F1 CD21                <1>     int 21h
   493 000023F3 E8061C0000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 000023F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .changeDir:
   496 000023F9 8A05A7DCFFFF        <1>     mov al, byte [arg1FCBret]
   497 000023FF 3CFF                <1>     cmp al, -1 
   498 00002401 0F84ADFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   499 00002407 E8B81F0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   500 0000240C 488D157DE0FFFF      <1>     lea rdx, searchSpec
   501 00002413 B43B                <1>     mov ah, 3Bh ;CHDIR
   502 00002415 CD21                <1>     int 21h
   503 00002417 0F82C4FAFFFF        <1>     jc badDirError
   504                              <1>     return
    13                              <2> %%_ret:
    14 0000241D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> mkdir:
   507 0000241E F6057FDCFFFFFF      <1>     test byte [arg1Flg], -1
   508 00002425 0F8492FAFFFF        <1>     jz badArgError
   509 0000242B F60575DCFFFFFF      <1>     test byte [arg2Flg], -1
   510 00002432 0F8585FAFFFF        <1>     jnz badArgError
   511                              <1>     ;We have exactly one argument
   512 00002438 8A0568DCFFFF        <1>     mov al, byte [arg1FCBret]
   513 0000243E 3CFF                <1>     cmp al, -1 
   514 00002440 0F846EFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   515 00002446 E8791F0000          <1>     call buildCommandPath
   516 0000244B 488D153EE0FFFF      <1>     lea rdx, searchSpec
   517 00002452 B800390000          <1>     mov eax, 3900h  ;MKDIR
   518 00002457 CD21                <1>     int 21h
   519                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002459 73(1D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520                              <1> .badMake:   ;Else, bad make
   521 0000245B 488D1501E7FFFF      <1>     lea rdx, badMD
   522 00002462 E99E1B0000          <1>     jmp printString
   523                              <1> 
   524                              <1> rmdir:
   525 00002467 F60536DCFFFFFF      <1>     test byte [arg1Flg], -1
   526 0000246E 0F8449FAFFFF        <1>     jz badArgError
   527 00002474 F6052CDCFFFFFF      <1>     test byte [arg2Flg], -1
   528 0000247B 0F853CFAFFFF        <1>     jnz badArgError
   529                              <1>     ;We have exactly one argument
   530 00002481 8A051FDCFFFF        <1>     mov al, byte [arg1FCBret]
   531 00002487 3CFF                <1>     cmp al, -1 
   532 00002489 0F8425FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   533 0000248F E8301F0000          <1>     call buildCommandPath
   534 00002494 488D15F5DFFFFF      <1>     lea rdx, searchSpec
   535 0000249B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   536 000024A0 CD21                <1>     int 21h
   537                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000024A2 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000024A4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   538                              <1> .badRemove:   ;Else, bad make
   539 000024A5 488D15D4E6FFFF      <1>     lea rdx, badRD
   540 000024AC E9541B0000          <1>     jmp printString
   541                              <1> 
   542                              <1> copy:
   543 000024B1 66C705C3E2FFFFFFFF  <1>     mov word [sourceHdl], -1
   544 000024BA 66C705BCE2FFFFFFFF  <1>     mov word [destHdl], -1
   545 000024C3 66C705B5E2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   546 000024CC C605BEE2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   547 000024D3 48C705A5E2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   547 000024DC 0000                <1>
   548 000024DE 66C705A4E2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   549 000024E7 C7059CE2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   549 000024F0 00                  <1>
   550 000024F1 C60565E1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   551 000024F8 C605E0E1FFFF00      <1>     mov byte [destSpec], 0
   552 000024FF 48C70557E2FFFF0000- <1>     mov qword [srcPtr], 0
   552 00002508 0000                <1>
   553 0000250A 48C70554E2FFFF0000- <1>     mov qword [destPtr], 0
   553 00002513 0000                <1>
   554 00002515 E83B200000          <1>     call setDTA
   555 0000251A B800540000          <1>     mov eax, 5400h  ;Get verify flag
   556 0000251F CD21                <1>     int 21h
   557 00002521 880555E2FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   558                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   559                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   560                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   561 00002527 B800520000          <1>     mov eax, 5200h
   562 0000252C CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   563 0000252E 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   564 00002532 89CB                <1>     mov ebx, ecx
   565 00002534 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   566 00002537 B800480000          <1>     mov eax, 4800h
   567 0000253C CD21                <1>     int 21h
   568 0000253E 731E                <1>     jnc .bufOk
   569 00002540 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   570 00002542 750C                <1>     jnz .okSize
   571                              <1> .badAlloc:
   572                              <1> ;Not enough memory error!
   573 00002544 488D1588E4FFFF      <1>     lea rdx, cpNoMem
   574 0000254B E998F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   575                              <1> .okSize:
   576 00002550 89D9                <1>     mov ecx, ebx    
   577 00002552 C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   578 00002555 B800480000          <1>     mov eax, 4800h
   579 0000255A CD21                <1>     int 21h
   580 0000255C 72E6                <1>     jc .badAlloc
   581                              <1> .bufOk:
   582 0000255E 4889051EE2FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   583 00002565 66890D1FE2FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   584                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   585 0000256C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   586 00002573 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   587 0000257B FFC9                <1>     dec ecx ;Turn into offset
   588 0000257D 4801CE              <1>     add rsi, rcx
   589 00002580 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   590 00002582 FD                  <1>     std ;Go in reverse
   591                              <1> .sd:    ;At this point, any switch chars affect destination!
   592 00002583 E8C81C0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   593 00002588 8A059CDAFFFF        <1>     mov al, byte [switchChar]
   594 0000258E 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   595 00002591 7509                <1>     jne .noSwitch
   596                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   597 00002593 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   598 00002597 50                  <1>     push rax        ;Push the switchchar
   599 00002598 FFC2                <1>     inc edx         ;Inc the counter
   600 0000259A EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   601                              <1> .noSwitch:
   602                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   603 0000259C 85D2                <1>     test edx, edx
   604 0000259E 7412                <1>     jz .noDestSwitch
   605                              <1> .ns1:
   606 000025A0 58                  <1>     pop rax ;Pop the switch char
   607 000025A1 B304                <1>     mov bl, ascDes
   608 000025A3 E805040000          <1>     call .doSwitchRev
   609 000025A8 0F8570040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   610 000025AE FFCA                <1>     dec edx
   611 000025B0 75EE                <1>     jnz .ns1
   612                              <1> .noDestSwitch:
   613                              <1> ;Now search for the starting delimiter or start of line
   614 000025B2 48FFC6              <1>     inc rsi ;Go to the last char in the path
   615                              <1> .noSwitchLp:
   616 000025B5 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   617 000025B6 E8A31C0000          <1>     call isALdelimiter
   618 000025BB 7412                <1>     je .destFnd
   619 000025BD 8A0567DAFFFF        <1>     mov al, byte [switchChar]
   620 000025C3 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   621 000025C6 7404                <1>     je .se  ;Jump if so!
   622 000025C8 FFC9                <1>     dec ecx ;One less char left to search
   623 000025CA EBE9                <1>     jmp short .noSwitchLp
   624                              <1> .se:
   625 000025CC 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   626                              <1> .destFnd:
   627 000025CF 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   628 000025D6 FC                  <1>     cld 
   629 000025D7 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   630 000025DA 488D3DFEE0FFFF      <1>     lea rdi, destSpec
   631 000025E1 57                  <1>     push rdi
   632 000025E2 E89A1D0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   633 000025E7 5F                  <1>     pop rdi
   634 000025E8 E81A1D0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   635 000025ED 48893D75E1FFFF      <1>     mov qword [destPtr], rdi
   636 000025F4 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   637 000025F8 7517                <1>     jne .destEnd    ;Dont worry
   638 000025FA 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   639 000025FC E8341C0000          <1>     call ucChar             ;Make sure we UC the drive letter
   640 00002601 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   641 00002603 4881C702000000      <1>     add rdi, 2              ;Point to this null
   642 0000260A 48893D58E1FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   643                              <1> .destEnd:
   644                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   645 00002611 802579E1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   646 00002618 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   647                              <1> .srcLp:
   648 0000261F E82C1C0000          <1>     call skipDelimiters 
   649 00002624 8A0500DAFFFF        <1>     mov al, byte [switchChar]
   650 0000262A 3806                <1>     cmp byte [rsi], al
   651 0000262C 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   652                              <1>     ;rsi points to switch after switchchar
   653 0000262E B301                <1>     mov bl, ascSrc
   654 00002630 E872030000          <1>     call .doSwitch
   655 00002635 0F85E3030000        <1>     jnz .badExit
   656 0000263B 4881C602000000      <1>     add rsi, 2
   657 00002642 EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   658                              <1> .noSrcSw:
   659 00002644 4839F5              <1>     cmp rbp, rsi
   660 00002647 7527                <1>     jne .noSameSrcDest
   661                              <1>     ;Here if the destination we specified earlier is the same as the source
   662                              <1>     ;This means, the actual destination is the current default drive
   663                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   664 00002649 E8BF1B0000          <1>     call getCurrentDrive    ;Get current drive
   665 0000264E 0441                <1>     add al, "A"             ;Turn into a drive letter
   666 00002650 B43A                <1>     mov ah, ":"
   667 00002652 0FB7C0              <1>     movzx eax, ax
   668 00002655 890584E0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   669 0000265B 488D3D7FE0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   670 00002662 48893D00E1FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   671 00002669 800D21E1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   672                              <1> .noSameSrcDest:
   673 00002670 488D3DE6DFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   674 00002677 57                  <1>     push rdi
   675 00002678 E8041D0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   676 0000267D 5F                  <1>     pop rdi
   677                              <1>     ;Now go forwards and pick up any more switches.
   678                              <1>     ;Also any "+" signs here!!
   679 0000267E 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   680                              <1> .swSrcSwPost:
   681 00002681 E8CA1B0000          <1>     call skipDelimiters ;Skips trailing delimiters
   682 00002686 8A059ED9FFFF        <1>     mov al, byte [switchChar]
   683 0000268C 3806                <1>     cmp byte [rsi], al
   684 0000268E 7516                <1>     jne .swSrcSwPostExit
   685                              <1>     ;rsi points to switch after switchchar
   686 00002690 B301                <1>     mov bl, ascSrc
   687 00002692 E810030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   688 00002697 0F8581030000        <1>     jnz .badExit
   689 0000269D 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   690 000026A4 EBDB                <1>     jmp short .swSrcSwPost
   691                              <1> .swSrcSwPostExit:
   692 000026A6 4889FE              <1>     mov rsi, rdi
   693 000026A9 E83B1D0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   694 000026AE 7507                <1>     jnz .oneCp
   695 000026B0 800DDAE0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   696                              <1> .oneCp:
   697 000026B7 E84B1C0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   698 000026BC 48893D9EE0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   699 000026C3 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   700 000026C7 7517                <1>     jne .srcEnd             ;Dont worry
   701 000026C9 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   702 000026CB E8651B0000          <1>     call ucChar             ;Make sure we UC the drive letter
   703 000026D0 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   704 000026D2 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   705 000026D9 48893D81E0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   706                              <1> .srcEnd:
   707                              <1> ;Now uppercase both paths
   708 000026E0 488D3576DFFFFF      <1>     lea rsi, srcSpec
   709 000026E7 E8551B0000          <1>     call normalisePath
   710 000026EC 488D3DECDFFFFF      <1>     lea rdi, destSpec
   711 000026F3 E8491B0000          <1>     call normalisePath
   712                              <1> ;Now establish if the source is a directory or not!
   713 000026F8 F60592E0FFFF08      <1>     test byte [bCpFlg], wcSrc
   714 000026FF 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   715 00002701 488D1555DFFFFF      <1>     lea rdx, srcSpec
   716 00002708 4889D6              <1>     mov rsi, rdx
   717 0000270B 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   718 0000270D 80FC3A              <1>     cmp ah, ":"
   719 00002710 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   720 00002712 AC                  <1>     lodsb           ;Get char past :
   721 00002713 84C0                <1>     test al, al     ;Is byte three nul?
   722 00002715 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   723 00002717 3A050CD9FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   724 0000271D 7515                <1>     jne .isSrcDir
   725 0000271F AC                  <1>     lodsb           ;Get char past char past "X:\"
   726 00002720 84C0                <1>     test al, al     
   727 00002722 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   728                              <1> .srcStorWc:
   729                              <1> ;rsi points past the char to store the WC at
   730 00002724 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   731 0000272B 800D5FE0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   732 00002732 EB44                <1>     jmp short .checkDestDir
   733                              <1> .isSrcDir:
   734 00002734 B910000000          <1>     mov ecx, dirDirectory
   735 00002739 B8004E0000          <1>     mov eax, 4E00h
   736 0000273E CD21                <1>     int 21h
   737 00002740 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   738                              <1>     ;Was the file we found actually a directory?
   739 00002742 803DE2D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   740 00002749 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   741 0000274B 4889D7              <1>     mov rdi, rdx
   742 0000274E E8D81A0000          <1>     call strlen
   743 00002753 FFC9                <1>     dec ecx
   744 00002755 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   745 00002758 8A05CBD8FFFF        <1>     mov al, byte [pathSep]
   746 0000275E 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   747 00002761 7401                <1>     je .srctpsp
   748 00002763 AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   749                              <1> .srctpsp:
   750 00002764 48893DF6DFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   751 0000276B B82A2E2A00          <1>     mov eax, "*.*"
   752 00002770 AB                  <1>     stosd   ;Store the WC with terminating nul!
   753 00002771 800D19E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   754                              <1> .checkDestDir:
   755                              <1> ;Now establish if destination is a directory or not!
   756 00002778 F60512E0FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   757 0000277F 0F855E010000        <1>     jnz .mod1
   758 00002785 488D3553DFFFFF      <1>     lea rsi, destSpec
   759 0000278C 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   760 0000278E 80FC3A              <1>     cmp ah, ":"
   761 00002791 751A                <1>     jne .isDestDir
   762 00002793 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   763 00002795 84C0                <1>     test al, al ;Is byte three nul?
   764 00002797 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   765 0000279D 84E4                <1>     test ah, ah ;Is byte four nul?
   766 0000279F 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   767 000027A1 3A0582D8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   768 000027A7 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   769                              <1> .isDestDir:
   770                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   771 000027AD 488D152BDFFFFF      <1>     lea rdx, destSpec
   772 000027B4 B910000000          <1>     mov ecx, dirDirectory
   773 000027B9 B8004E0000          <1>     mov eax, 4E00h
   774 000027BE CD21                <1>     int 21h
   775 000027C0 7237                <1>     jc .mod2
   776                              <1>     ;Was the file we found actually a directory?
   777 000027C2 803D62D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   778 000027C9 752E                <1>     jne .mod2
   779                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   780                              <1>     ;If not, we need to place one there!
   781 000027CB 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   782 000027CE E8581A0000          <1>     call strlen
   783 000027D3 FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   784 000027D5 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   785 000027D8 0FB6054AD8FFFF      <1>     movzx eax, byte [pathSep]
   786 000027DF 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   787 000027E2 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   788 000027E8 66AB                <1>     stosw           ;Else, store the pathsep and null!
   789 000027EA 48FFCF              <1>     dec rdi         ;Point back to null
   790 000027ED 48893D75DFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   791 000027F4 E9EA000000          <1>     jmp .mod1
   792                              <1> .mod2:
   793                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   794                              <1> ; to rename wildcard semantics. Always run through this as the destination
   795                              <1> ; name may have wildcards in it! But we don't add any.
   796 000027F9 800D91DFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   797 00002800 488D35D8DEFFFF      <1>     lea rsi, destSpec
   798 00002807 E8DD1B0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   799 0000280C 7407                <1>     jz .m2Wc
   800 0000280E 800D7CDFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   801                              <1> .m2Wc:
   802                              <1> ;Search for the source file
   803 00002815 488D1541DEFFFF      <1>     lea rdx, srcSpec
   804 0000281C 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   805 0000281E B8004E0000          <1>     mov eax, 4E00h
   806 00002823 CD21                <1>     int 21h
   807 00002825 0F82E9010000        <1>     jc .badSrcFile
   808 0000282B 488B3537DFFFFF      <1>     mov rsi, qword [destPtr]
   809 00002832 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   810 00002836 B801290000          <1>     mov eax, 2901h
   811 0000283B CD21                <1>     int 21h
   812                              <1> .md2Lp:
   813 0000283D 488D35F0D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   814 00002844 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   815 00002848 B801290000          <1>     mov eax, 2901h
   816 0000284D CD21                <1>     int 21h  
   817                              <1> ;Now depending on source and dest patterns, build a filename in renName
   818 0000284F 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   819 00002853 488D3D17DFFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   820 0000285A 57                  <1>     push rdi
   821 0000285B 48A5                <1>     movsq
   822 0000285D 66A5                <1>     movsw
   823 0000285F A4                  <1>     movsb
   824 00002860 5F                  <1>     pop rdi
   825 00002861 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   826 00002865 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   827                              <1> .md2NameMake:
   828 0000286A AC                  <1>     lodsb   ;Get the char from the source string
   829 0000286B 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   830 0000286E 7502                <1>     jne .noStore    ;Dont store the char there
   831 00002870 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   832                              <1> .noStore:
   833 00002872 48FFC7              <1>     inc rdi ;Goto next char position
   834 00002875 FFC9                <1>     dec ecx
   835 00002877 75F1                <1>     jnz .md2NameMake
   836 00002879 488D35B4D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   837 00002880 488B3DDADEFFFF      <1>     mov rdi, qword [srcPtr]
   838 00002887 E886190000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   839 0000288C 488D35DEDEFFFF      <1>     lea rsi, renName
   840 00002893 488B3DCFDEFFFF      <1>     mov rdi, qword [destPtr]
   841 0000289A E88C1A0000          <1>     call FCBToAsciiz
   842 0000289F E8D7000000          <1>     call .prntFilespec  ;Prints the source filename
   843 000028A4 E8AA010000          <1>     call copyMain       ;And copy it!
   844 000028A9 731D                <1>     jnc .md2Ok
   845                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   846                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   847 000028AB 3CFD                <1>     cmp al, -3
   848 000028AD 0F843E010000        <1>     je .badBinCdevErr
   849 000028B3 3CFE                <1>     cmp al, -2
   850 000028B5 0F843F010000        <1>     je .rootDirFull
   851 000028BB 3CFF                <1>     cmp al, -1      ;Source and destination same?
   852 000028BD 0F8440010000        <1>     je .badSameFile 
   853 000028C3 E956010000          <1>     jmp .badExit    ;Else generic error message
   854                              <1> .md2Ok:
   855 000028C8 F605C2DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   856 000028CF 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   857 000028D5 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   858 000028DA CD21                <1>     int 21h
   859 000028DC 727C                <1>     jc .copyDone        ;If no more files, we are done!
   860 000028DE E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   861                              <1> .mod1:
   862                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   863 000028E3 800DA7DEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   864 000028EA 488D156CDDFFFF      <1>     lea rdx, srcSpec
   865 000028F1 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   866 000028F3 B8004E0000          <1>     mov eax, 4E00h
   867 000028F8 CD21                <1>     int 21h
   868 000028FA 0F8214010000        <1>     jc .badSrcFile  ;File not found error!!
   869                              <1> .mod1Lp:
   870 00002900 488D352DD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   871 00002907 488B3D53DEFFFF      <1>     mov rdi, qword [srcPtr]
   872 0000290E E80E190000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   873 00002913 488B3D4FDEFFFF      <1>     mov rdi, qword [destPtr]
   874 0000291A E802190000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   875 0000291F E857000000          <1>     call .prntFilespec
   876 00002924 E82A010000          <1>     call copyMain   ;And copy it!
   877 00002929 731D                <1>     jnc .mod1Ok
   878                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   879                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   880 0000292B 3CFD                <1>     cmp al, -3
   881 0000292D 0F84BE000000        <1>     je .badBinCdevErr
   882 00002933 3CFE                <1>     cmp al, -2
   883 00002935 0F84BF000000        <1>     je .rootDirFull
   884 0000293B 3CFF                <1>     cmp al, -1      ;Source and destination same?
   885 0000293D 0F84C0000000        <1>     je .badSameFile 
   886 00002943 E9D6000000          <1>     jmp .badExit    ;Else generic error message
   887                              <1> .mod1Ok:
   888 00002948 F60542DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   889 0000294F 7409                <1>     jz .copyDone
   890 00002951 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   891 00002956 CD21                <1>     int 21h
   892 00002958 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   893                              <1> 
   894                              <1> .copyDone:
   895 0000295A E8C9000000          <1>     call .copyCleanup   ;Clean up resources!
   896 0000295F 8B0528DEFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   897 00002965 B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   898 0000296A E88E1A0000          <1>     call printDecimalValLB   ;n File(s) copied
   899 0000296F 488D154BE0FFFF      <1>     lea rdx, copyOk
   900 00002976 B409                <1>     mov ah, 09h
   901 00002978 CD21                <1>     int 21h    
   902                              <1>     return
    13                              <2> %%_ret:
    14 0000297A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   903                              <1> 
   904                              <1> .prntFilespec:
   905                              <1> ;Prints the filespec to STDOUT. If the path is 
   906 0000297B F6050FDEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   907                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002982 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   908 00002984 488D15D2DCFFFF      <1>     lea rdx, srcSpec
   909 0000298B 4889D7              <1>     mov rdi, rdx
   910 0000298E E898180000          <1>     call strlen
   911 00002993 FFC9                <1>     dec ecx     ;Drop terminating null
   912 00002995 BB01000000          <1>     mov ebx, 1  ;STDOUT
   913 0000299A B800400000          <1>     mov eax, 4000h  ;Write
   914 0000299F CD21                <1>     int 21h
   915 000029A1 E858160000          <1>     call printCRLF
   916                              <1>     return
    13                              <2> %%_ret:
    14 000029A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   917                              <1> .doSwitch:
   918                              <1> ;Since switches can come before or after a name, handle them here!
   919                              <1> ;If invalid switch char, returns ZF=NZ.
   920                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   921                              <1> ;       rsi -> Switchchar
   922 000029A7 56                  <1>     push rsi
   923 000029A8 48FFC6              <1>     inc rsi ;Point to char past switchchar
   924 000029AB AC                  <1>     lodsb   ;Get this char, goto next char
   925 000029AC 5E                  <1>     pop rsi
   926                              <1> .doSwitchRev:
   927 000029AD E883180000          <1>     call ucChar
   928 000029B2 3C41                <1>     cmp al, "A"
   929 000029B4 7510                <1>     jne .cB
   930 000029B6 081DD5DDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   931 000029BC 8025CEDDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   932                              <1> .cExit:
   933 000029C3 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   934                              <1>     return
    13                              <2> %%_ret:
    14 000029C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> .cB:
   936 000029C6 3C42                <1>     cmp al, "B"
   937 000029C8 7511                <1>     jne .cV
   938 000029CA F6D3                <1>     not bl  ;Reverse bits
   939 000029CC 201DBFDDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   940 000029D2 800DB8DDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   941 000029D9 EBE8                <1>     jmp short .cExit
   942                              <1> .cV:
   943 000029DB 3C56                <1>     cmp al, "V"
   944                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029DD 75(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   945 000029DF F60596DDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   946 000029E6 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   947                              <1>     ;Else, set it. We return it at the end!
   948 000029E8 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   949 000029ED CD21                <1>     int 21h
   950 000029EF EBD2                <1>     jmp short .cExit
   951                              <1> 
   952                              <1> ;COPY Bad Exits!!
   953                              <1> .badBinCdevErr:
   954 000029F1 488D1579E2FFFF      <1>     lea rdx, binDevErr
   955 000029F8 EB10                <1>     jmp short .badExitCmn
   956                              <1> .rootDirFull:
   957 000029FA 488D155CDFFFFF      <1>     lea rdx, fulRootDir
   958 00002A01 EB07                <1>     jmp short .badExitCmn
   959                              <1> .badSameFile:
   960 00002A03 488D1569DFFFFF      <1>     lea rdx, noSelfCopy
   961                              <1> .badExitCmn:
   962 00002A0A E8D9F4FFFF          <1>     call badCmn     ;Print error message
   963 00002A0F E946FFFFFF          <1>     jmp .copyDone   ;Clean resources
   964                              <1> .badSrcFile:
   965 00002A14 E8BFF4FFFF          <1>     call badFnf  ;File not found!!
   966 00002A19 E93CFFFFFF          <1>     jmp .copyDone
   967                              <1> .badExit:
   968 00002A1E E888F4FFFF          <1>     call badParamError
   969 00002A23 E932FFFFFF          <1>     jmp .copyDone
   970                              <1> 
   971                              <1> .copyCleanup:
   972                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   973                              <1> ;Handles are never open in this process!
   974 00002A28 B8002E0000          <1>     mov eax, 2E00h
   975 00002A2D 8A0549DDFFFF        <1>     mov al, byte [verifyFlg]
   976 00002A33 CD21                <1>     int 21h
   977 00002A35 4150                <1>     push r8
   978 00002A37 4C8B0545DDFFFF      <1>     mov r8, qword [cpBufPtr]
   979 00002A3E 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   980 00002A41 7407                <1>     jz .skipFree
   981 00002A43 B800490000          <1>     mov eax, 4900h
   982 00002A48 CD21                <1>     int 21h
   983                              <1> .skipFree:
   984 00002A4A 4158                <1>     pop r8
   985 00002A4C 0F82E81A0000        <1>     jc freezePC ;If free fails, man....
   986                              <1>     return
    13                              <2> %%_ret:
    14 00002A52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   987                              <1> 
   988                              <1> copyMain:
   989                              <1> ;This is the main copying procedure! 
   990                              <1> ;Start by checking the two files are not the same. If so, complain!
   991                              <1> ;If returns CF=CY, error code in al. 
   992                              <1> ;   If al = -1, same filename error!
   993                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   994                              <1> ;   If al = -3, attempted binary read from a device
   995                              <1> ;If returns CF=NC, file copied successfully.
   996                              <1> ;Check the two files are not the same using truename in searchspec
   997 00002A53 488D3503DCFFFF      <1>     lea rsi, srcSpec
   998 00002A5A 488D3D2FDAFFFF      <1>     lea rdi, searchSpec
   999 00002A61 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1000 00002A66 CD21                <1>     int 21h 
  1001 00002A68 57                  <1>     push rdi    ;Save this searchSpec
  1002 00002A69 488D356FDCFFFF      <1>     lea rsi, destSpec
  1003 00002A70 488D3D9BDAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1004 00002A77 B800600000          <1>     mov eax, 6000h
  1005 00002A7C CD21                <1>     int 21h
  1006 00002A7E 5E                  <1>     pop rsi     ;Get this ptr back
  1007 00002A7F B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1008 00002A84 CD2F                <1>     int 2Fh
  1009 00002A86 750F                <1>     jnz .notSameFile
  1010 00002A88 B0FF                <1>     mov al, -1  ;Same filename error!
  1011                              <1> .badExit:
  1012 00002A8A 50                  <1>     push rax
  1013 00002A8B E8B0000000          <1>     call .exitCleanup
  1014 00002A90 58                  <1>     pop rax
  1015 00002A91 F9                  <1>     stc
  1016                              <1>     return
    13                              <2> %%_ret:
    14 00002A92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1017                              <1> .badExitNoSpace:
  1018 00002A93 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1019 00002A95 EBF3                <1>     jmp short .badExit
  1020                              <1> .notSameFile:
  1021                              <1> ;Open source with read permission
  1022                              <1> ;Open destination with write permission
  1023 00002A97 488D15BFDBFFFF      <1>     lea rdx, srcSpec
  1024 00002A9E B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1025 00002AA3 CD21                <1>     int 21h
  1026 00002AA5 72E3                <1>     jc .badExit
  1027 00002AA7 668905CFDCFFFF      <1>     mov word [sourceHdl], ax
  1028 00002AAE 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1029                              <1> 
  1030 00002AB1 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1031 00002AB6 CD21                <1>     int 21h
  1032 00002AB8 668915C2DCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1033 00002ABF F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1034 00002AC2 7412                <1>     jz .prepCopy
  1035                              <1> ;Check the binary flag was not set on this source filespec
  1036 00002AC4 B0FD                <1>     mov al, -3  ;Prep the error code
  1037 00002AC6 F605C4DCFFFF02      <1>     test byte [bCpFlg], binSrc
  1038 00002ACD 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1039 00002ACF 800DBBDCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1040                              <1> .prepCopy:
  1041 00002AD6 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1042 00002AD8 488B15A4DCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1043                              <1> .copyLoop:
  1044                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1045                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1046                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1047                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1048 00002ADF 0FB70DA5DCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1049 00002AE6 0FB71D90DCFFFF      <1>     movzx ebx, word [sourceHdl]
  1050 00002AED B8003F0000          <1>     mov eax, 3F00h ;Read
  1051 00002AF2 CD21                <1>     int 21h
  1052 00002AF4 7294                <1>     jc .badExit
  1053 00002AF6 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1054 00002AF8 F60592DCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1055 00002AFF 7413                <1>     jz .notAscii
  1056                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1057 00002B01 50                  <1>     push rax        ;Save the original char count
  1058 00002B02 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1059 00002B05 B01A                <1>     mov al, EOF
  1060 00002B07 F2AE                <1>     repne scasb     ;Loop thru now!
  1061 00002B09 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1062 00002B0B 59                  <1>     pop rcx         ;Get the original read count into ecx
  1063 00002B0C 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1064                              <1> ;Here if EOF found.
  1065 00002B0E FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1066 00002B10 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1067 00002B12 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1068                              <1> .notAscii:
  1069 00002B14 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1070 00002B16 7428                <1>     jz .exitCleanup
  1071 00002B18 51                  <1>     push rcx    ;Save the number of bytes to write
  1072 00002B19 52                  <1>     push rdx    ;Save the buffer ptr
  1073 00002B1A E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1074 00002B1F 5A                  <1>     pop rdx
  1075 00002B20 59                  <1>     pop rcx
  1076 00002B21 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1077 00002B27 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1078 00002B2C CD21                <1>     int 21h
  1079 00002B2E 0F8256FFFFFF        <1>     jc .badExit
  1080 00002B34 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1081 00002B36 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1082 00002B3C 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1083 00002B3E 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1084                              <1> .exitCleanup:
  1085                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1086 00002B40 F6054ADCFFFF04      <1>     test byte [bCpFlg], ascDes
  1087 00002B47 7425                <1>     jz .ecNoEOF
  1088 00002B49 0FBF1D2FDCFFFF      <1>     movsx ebx, word [destHdl]
  1089 00002B50 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1090 00002B56 7416                <1>     je .ecNoEOF
  1091 00002B58 488B1524DCFFFF      <1>     mov rdx, qword [cpBufPtr]
  1092 00002B5F C6021A              <1>     mov byte [rdx], EOF
  1093 00002B62 B901000000          <1>     mov ecx, 1
  1094 00002B67 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1095 00002B6C CD21                <1>     int 21h
  1096                              <1> .ecNoEOF:
  1097                              <1> ;Now close copy handles!
  1098 00002B6E 668B1D08DCFFFF      <1>     mov bx, word [sourceHdl]
  1099 00002B75 6681FBFFFF          <1>     cmp bx, -1
  1100 00002B7A 7410                <1>     je .beSkipSource
  1101 00002B7C B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1102 00002B81 CD21                <1>     int 21h
  1103 00002B83 66C705F1DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1104                              <1> .beSkipSource:
  1105 00002B8C 668B1DECDBFFFF      <1>     mov bx, word [destHdl]
  1106 00002B93 6681FBFFFF          <1>     cmp bx, -1
  1107                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002B98 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002B9A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108 00002B9B B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1109 00002BA0 CD21                <1>     int 21h
  1110 00002BA2 66C705D4DBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1111                              <1>     return
    13                              <2> %%_ret:
    14 00002BAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> .getWriteHandle:
  1114                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1115                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1116                              <1> ;Input: Nothing
  1117                              <1> ;Output: CF=NC: bx = Handle to the file
  1118                              <1> ;        CF=CY: File failed to open/create. 
  1119 00002BAC 0FB71DCCDBFFFF      <1>     movzx ebx, word [destHdl]
  1120 00002BB3 6681FBFFFF          <1>     cmp bx, -1
  1121 00002BB8 7402                <1>     je .gwHProceed
  1122 00002BBA F8                  <1>     clc     ;Clear the CF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00002BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> .gwHProceed:
  1125                              <1> ;Here if the destination has not been opened yet!
  1126 00002BBC 488D151CDBFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1127                              <1> ;Now we create/reopen the file here!
  1128 00002BC3 F605C7DBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1129 00002BCA 743E                <1>     jz .createFile
  1130                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1131                              <1> ;If this is more than file 0, we open
  1132 00002BCC 813DB7DBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1132 00002BD5 00                  <1>
  1133 00002BD6 7432                <1>     je .createFile
  1134                              <1>     ;Now we open the file instead and append to the end
  1135 00002BD8 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1136 00002BDD CD21                <1>     int 21h
  1137                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BDF 72(BB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1138 00002BE1 FF05A6DBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1139 00002BE7 66890591DBFFFF      <1>     mov word [destHdl], ax
  1140 00002BEE 0FB7D8              <1>     movzx ebx, ax
  1141 00002BF1 31C9                <1>     xor ecx, ecx
  1142 00002BF3 31D2                <1>     xor edx, edx
  1143 00002BF5 F60595DBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1144 00002BFC 7404                <1>     jz .gwHNoAscii
  1145 00002BFE FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1146 00002C00 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1147                              <1> .gwHNoAscii:
  1148 00002C02 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1149 00002C07 CD21                <1>     int 21h
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00002C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .createFile:
  1152 00002C0A B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1153 00002C0F 31C9                <1>     xor ecx, ecx    ;No file attributes
  1154 00002C11 CD21                <1>     int 21h
  1155                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C13 72(09)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1156 00002C15 FF0572DBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1157 00002C1B 6689055DDBFFFF      <1>     mov word [destHdl], ax
  1158 00002C22 0FB7D8              <1>     movzx ebx, ax
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00002C25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> 
  1161                              <1> erase:
  1162 00002C26 F60577D4FFFFFF      <1>     test byte [arg1Flg], -1
  1163 00002C2D 0F848AF2FFFF        <1>     jz badArgError
  1164 00002C33 E81D190000          <1>     call setDTA     ;Start by resetting the DTA
  1165 00002C38 E887170000          <1>     call buildCommandPath   ;Get the relative path to the file
  1166                              <1> .dirLp:
  1167 00002C3D 488D3D4CD8FFFF      <1>     lea rdi, searchSpec
  1168 00002C44 E8BE160000          <1>     call findLastPathComponant
  1169 00002C49 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1170 00002C4C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1171 00002C50 B03F                <1>     mov al, "?"
  1172                              <1>     ;Store question marks in the name field
  1173 00002C52 57                  <1>     push rdi
  1174 00002C53 48FFC7              <1>     inc rdi ;Goto the first char
  1175 00002C56 B90B000000          <1>     mov ecx, 11
  1176 00002C5B F3AA                <1>     rep stosb
  1177 00002C5D 5F                  <1>     pop rdi
  1178 00002C5E 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1179 00002C61 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1180 00002C66 CD21                <1>     int 21h
  1181 00002C68 3C01                <1>     cmp al, 1
  1182 00002C6A 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1183                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1184                              <1>     ;No dirs to handle in here
  1185 00002C70 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1186 00002C74 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1187 00002C77 E8AF160000          <1>     call FCBToAsciiz    ;Null terminates for free
  1188                              <1>     ;Count the number of ?'s, if 11, we print the message
  1189 00002C7C 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1190 00002C80 31C9                <1>     xor ecx, ecx
  1191                              <1> .wcScan:
  1192 00002C82 AC                  <1>     lodsb
  1193 00002C83 3C3F                <1>     cmp al, "?"
  1194 00002C85 7534                <1>     jne .endCount
  1195 00002C87 FFC1                <1>     inc ecx
  1196 00002C89 81F90B000000        <1>     cmp ecx, 11
  1197 00002C8F 75F1                <1>     jne .wcScan
  1198                              <1> .ynmsg:
  1199 00002C91 488D156BDEFFFF      <1>     lea rdx, ynMes
  1200 00002C98 E868130000          <1>     call printString
  1201 00002C9D B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1202 00002C9F CD21                <1>     int 21h ;Get char in al
  1203 00002CA1 E88F150000          <1>     call ucChar ;Uppercase the char
  1204 00002CA6 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1205 00002CA8 740C                <1>     je .endCount1
  1206 00002CAA 3C4E                <1>     cmp al, "N"
  1207                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002CAC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002CAE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1208 00002CAF E84A130000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1209 00002CB4 EBDB                <1>     jmp short .ynmsg    
  1210                              <1> .endCount1:
  1211 00002CB6 E843130000          <1>     call printCRLF
  1212                              <1> .endCount:
  1213                              <1>     ;Now we copy our search template pathstring to delPath
  1214 00002CBB 488D3D9BD9FFFF      <1>     lea rdi, delPath
  1215 00002CC2 488D35C7D7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1216 00002CC9 E853150000          <1>     call strcpy2         ;Copy the string over to delPath
  1217                              <1> .findFile:
  1218                              <1>     ;Now we find first/find next our way through the files
  1219 00002CCE 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1220 00002CD1 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1221 00002CD3 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1222 00002CD8 CD21                <1>     int 21h
  1223 00002CDA 0F82F8F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1224                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1225 00002CE0 E822160000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1226 00002CE5 488D3548D4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1227                              <1> .delNextFile:
  1228                              <1> ;rsi and rdi dont move here
  1229 00002CEC E830150000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1230 00002CF1 488D1565D9FFFF      <1>     lea rdx, delPath
  1231 00002CF8 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1232 00002CFD CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1233 00002CFF 488D158AD7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1234 00002D06 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1235 00002D0B CD21                <1>     int 21h
  1236 00002D0D 73DD                <1>     jnc .delNextFile    
  1237 00002D0F F8                  <1>     clc ;Clear carry to indicate success
  1238                              <1>     return
    13                              <2> %%_ret:
    14 00002D10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1239                              <1> .noWildcard:
  1240                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1241                              <1>     ; a \*.*<NUL> over the null terminator
  1242 00002D11 488D1578D7FFFF      <1>     lea rdx, searchSpec
  1243 00002D18 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1244 00002D1D B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1245 00002D22 CD21                <1>     int 21h
  1246 00002D24 0F82AEF1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1247 00002D2A F605FAD3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1248 00002D31 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1249                              <1>     ;Else, we are dealing with a dir
  1250 00002D33 4889D7              <1>     mov rdi, rdx
  1251 00002D36 31C9                <1>     xor ecx, ecx
  1252 00002D38 FFC9                <1>     dec ecx
  1253 00002D3A F2AE                <1>     repne scasb ;Go to the end of the line!
  1254 00002D3C 48FFCF              <1>     dec rdi
  1255 00002D3F 0FB605E3D2FFFF      <1>     movzx eax, byte [pathSep]
  1256 00002D46 AA                  <1>     stosb
  1257 00002D47 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1258 00002D4C AB                  <1>     stosd
  1259 00002D4D E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1260                              <1> .delMain:   ;Call with rdx -> buffer!
  1261 00002D52 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1262 00002D57 CD21                <1>     int 21h
  1263                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D59 73(10)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1264 00002D5B 3C05                <1>     cmp al, errAccDen
  1265 00002D5D 0F843FF1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1266 00002D63 E95EF1FFFF          <1>     jmp badFileError
  1267                              <1>     return
    13                              <2> %%_ret:
    14 00002D68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1268                              <1> 
  1269                              <1> date:
  1270 00002D69 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1271 00002D70 E8DB140000          <1>     call skipDelimiters
  1272 00002D75 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1273 00002D78 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1274                              <1> .init:
  1275                              <1>     ;Else, we do interactive mode!
  1276 00002D7A 488D1505DDFFFF      <1>     lea rdx, curDate
  1277 00002D81 B409                <1>     mov ah, 09h
  1278 00002D83 CD21                <1>     int 21h
  1279 00002D85 E8BC130000          <1>     call printFmtDate
  1280                              <1> .noCur:
  1281 00002D8A 488D1506DDFFFF      <1>     lea rdx, newDate
  1282 00002D91 B409                <1>     mov ah, 09h
  1283 00002D93 CD21                <1>     int 21h
  1284 00002D95 488D151ADDFFFF      <1>     lea rdx, ukDate
  1285 00002D9C 488D0506DDFFFF      <1>     lea rax, usDate
  1286 00002DA3 488D1D19DDFFFF      <1>     lea rbx, jpDate
  1287 00002DAA 803D7AD2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1288 00002DB1 480F47D3            <1>     cmova rdx, rbx
  1289 00002DB5 480F42D0            <1>     cmovb rdx, rax
  1290 00002DB9 B409                <1>     mov ah, 09h
  1291 00002DBB CD21                <1>     int 21h
  1292                              <1> 
  1293 00002DBD 488D151FD4FFFF      <1>     lea rdx, cpyBuffer
  1294 00002DC4 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1295 00002DC7 B40A                <1>     mov ah, 0Ah
  1296 00002DC9 CD21                <1>     int 21h
  1297 00002DCB 52                  <1>     push rdx
  1298 00002DCC E82D120000          <1>     call printCRLF
  1299 00002DD1 5A                  <1>     pop rdx
  1300 00002DD2 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1301                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DD6 74(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1302                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1303 00002DD8 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1304                              <1> .goDate:
  1305 00002DDC 31C0                <1>     xor eax, eax    
  1306 00002DDE 803D46D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1307 00002DE5 727B                <1>     jb .us
  1308 00002DE7 0F87B7000000        <1>     ja .jpn
  1309                              <1>     ;Here for UK style dates
  1310 00002DED E80B170000          <1>     call getByte
  1311 00002DF2 725D                <1>     jc .badDate
  1312 00002DF4 880561D8FFFF        <1>     mov byte [td3], al  ;Store the day
  1313 00002DFA E80C010000          <1>     call .validSep
  1314 00002DFF 7550                <1>     jne .badDate
  1315 00002E01 E8F7160000          <1>     call getByte
  1316 00002E06 7249                <1>     jc .badDate
  1317 00002E08 88054ED8FFFF        <1>     mov byte [td4], al  ;Store month
  1318 00002E0E E8F8000000          <1>     call .validSep
  1319 00002E13 753C                <1>     jne .badDate
  1320 00002E15 E8EF160000          <1>     call getNum
  1321 00002E1A E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1322 00002E1F 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1323 00002E24 732B                <1>     jae .badDate
  1324 00002E26 6689052CD8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1325                              <1> .writeDate:
  1326 00002E2D E81E140000          <1>     call skipDelimiters
  1327 00002E32 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1328 00002E35 751A                <1>     jne .badDate
  1329 00002E37 0FB70D1BD8FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1330 00002E3E 668B1516D8FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1331 00002E45 B8002B0000          <1>     mov eax, 2B00h
  1332 00002E4A CD21                <1>     int 21h
  1333 00002E4C 84C0                <1>     test al, al
  1334                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E4E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E50 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1335                              <1> .badDate:
  1336 00002E51 488D151FDCFFFF      <1>     lea rdx, badDate
  1337 00002E58 E8A8110000          <1>     call printString
  1338 00002E5D E928FFFFFF          <1>     jmp date.noCur
  1339                              <1> .us:
  1340 00002E62 E896160000          <1>     call getByte
  1341 00002E67 72E8                <1>     jc .badDate
  1342 00002E69 8805EDD7FFFF        <1>     mov byte [td4], al  ;Store the month
  1343 00002E6F E897000000          <1>     call .validSep
  1344 00002E74 75DB                <1>     jne .badDate
  1345 00002E76 E882160000          <1>     call getByte
  1346 00002E7B 72D4                <1>     jc .badDate
  1347 00002E7D 8805D8D7FFFF        <1>     mov byte [td3], al  ;Store day
  1348 00002E83 E883000000          <1>     call .validSep
  1349 00002E88 75C7                <1>     jne .badDate
  1350 00002E8A E87A160000          <1>     call getNum
  1351 00002E8F E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1352 00002E94 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1353 00002E99 73B6                <1>     jae .badDate
  1354 00002E9B 668905B7D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1355                              <1> .writeHop:
  1356 00002EA2 EB89                <1>     jmp short .writeDate
  1357                              <1> .jpn:
  1358 00002EA4 E860160000          <1>     call getNum
  1359 00002EA9 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1360 00002EAE 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1361 00002EB3 739C                <1>     jae .badDate
  1362 00002EB5 6689059DD7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1363 00002EBC E84A000000          <1>     call .validSep
  1364 00002EC1 758E                <1>     jne .badDate
  1365 00002EC3 E835160000          <1>     call getByte
  1366 00002EC8 7287                <1>     jc .badDate
  1367 00002ECA 88058BD7FFFF        <1>     mov byte [td3], al  ;Store the day
  1368 00002ED0 E836000000          <1>     call .validSep
  1369 00002ED5 0F8576FFFFFF        <1>     jne .badDate
  1370 00002EDB E81D160000          <1>     call getByte
  1371 00002EE0 0F826BFFFFFF        <1>     jc .badDate
  1372 00002EE6 880570D7FFFF        <1>     mov byte [td4], al  ;Store month
  1373 00002EEC EBB4                <1>     jmp short .writeHop
  1374                              <1> .doYear:
  1375 00002EEE 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1376                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EF3 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EF5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1377                              <1> ;If the user specifies 80-99 it means 1980-1999
  1378                              <1> ;If the user specifies 00-79 it means 2000-2079
  1379 00002EF6 BBD0070000          <1>     mov ebx, 2000
  1380 00002EFB B96C070000          <1>     mov ecx, 1900
  1381 00002F00 3D50000000          <1>     cmp eax, 80     
  1382 00002F05 0F42CB              <1>     cmovb ecx, ebx
  1383 00002F08 01C8                <1>     add eax, ecx
  1384                              <1>     return
    13                              <2> %%_ret:
    14 00002F0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> .validSep:
  1386 00002F0B AC                  <1>     lodsb           ;Get the char and return
  1387 00002F0C 3C2E                <1>     cmp al, "."
  1388                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F0E 74(0A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1389 00002F10 3C2F                <1>     cmp al, "/"
  1390                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F12 74(0A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1391 00002F14 3C2D                <1>     cmp al, "-"
  1392                              <1>     return
    13                              <2> %%_ret:
    14 00002F16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> 
  1394                              <1> time:
  1395 00002F17 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1396 00002F1E E82D130000          <1>     call skipDelimiters
  1397 00002F23 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1398 00002F26 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1399                              <1> .init:
  1400 00002F28 488D15B0DBFFFF      <1>     lea rdx, curTime
  1401 00002F2F B409                <1>     mov ah, 09h
  1402 00002F31 CD21                <1>     int 21h
  1403 00002F33 E8A5110000          <1>     call printFmtTime
  1404                              <1> .noCur:
  1405 00002F38 488D15B1DBFFFF      <1>     lea rdx, newTime
  1406 00002F3F B409                <1>     mov ah, 09h
  1407 00002F41 CD21                <1>     int 21h
  1408                              <1> 
  1409 00002F43 488D1517D2FFFF      <1>     lea rdx, inBuffer
  1410 00002F4A C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1411 00002F4D B40A                <1>     mov ah, 0Ah
  1412 00002F4F CD21                <1>     int 21h
  1413 00002F51 52                  <1>     push rdx
  1414 00002F52 488D1511D9FFFF      <1>     lea rdx, crlf
  1415 00002F59 B409                <1>     mov ah, 09h
  1416 00002F5B CD21                <1>     int 21h
  1417 00002F5D 5A                  <1>     pop rdx
  1418 00002F5E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1419                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F62 74(16)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1420 00002F64 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1421                              <1> .goTime:
  1422 00002F68 C705E7D6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1422 00002F71 00                  <1>
  1423 00002F72 31C0                <1>     xor eax, eax   
  1424 00002F74 E884150000          <1>     call getByte
  1425 00002F79 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1426 00002F7F 8805D5D6FFFF        <1>     mov byte [td2], al  ;Save hours
  1427 00002F85 E89A000000          <1>     call .validsep
  1428 00002F8A 0F8583000000        <1>     jne .badTime
  1429 00002F90 E868150000          <1>     call getByte
  1430 00002F95 727C                <1>     jc .badTime
  1431 00002F97 8805BCD6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1432 00002F9D E882000000          <1>     call .validsep
  1433 00002FA2 740F                <1>     je .goSec
  1434 00002FA4 48FFCE              <1>     dec rsi ;Go back a char
  1435 00002FA7 E8A4120000          <1>     call skipDelimiters ;Skip any delimiters
  1436 00002FAC 803E0D              <1>     cmp byte [rsi], CR
  1437 00002FAF 743E                <1>     je .setTime
  1438 00002FB1 EB60                <1>     jmp short .badTime
  1439                              <1> .goSec:
  1440 00002FB3 E878000000          <1>     call .checkNum
  1441 00002FB8 7259                <1>     jc .badTime
  1442 00002FBA E83E150000          <1>     call getByte
  1443 00002FBF 7252                <1>     jc .badTime
  1444 00002FC1 880595D6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1445 00002FC7 AC                  <1>     lodsb       ;Move rsi forwards
  1446 00002FC8 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1447 00002FCA 740F                <1>     je .goMsec
  1448 00002FCC 48FFCE              <1>     dec rsi ;Go back a char
  1449 00002FCF E87C120000          <1>     call skipDelimiters ;Skip any delimiters
  1450 00002FD4 803E0D              <1>     cmp byte [rsi], CR
  1451 00002FD7 7416                <1>     je .setTime
  1452 00002FD9 EB38                <1>     jmp short .badTime
  1453                              <1> .goMsec:
  1454 00002FDB E850000000          <1>     call .checkNum
  1455 00002FE0 7231                <1>     jc .badTime
  1456 00002FE2 E816150000          <1>     call getByte
  1457 00002FE7 722A                <1>     jc .badTime
  1458 00002FE9 88056CD6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1459                              <1> .setTime:
  1460 00002FEF E85C120000          <1>     call skipDelimiters
  1461 00002FF4 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1462 00002FF7 751A                <1>     jne .badTime
  1463 00002FF9 0FB70D59D6FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1464 00003000 0FB71554D6FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1465 00003007 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1466 0000300C CD21                <1>     int 21h
  1467 0000300E A8FF                <1>     test al, -1
  1468                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003010 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003012 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1469                              <1> .badTime:
  1470 00003013 488D15B6DAFFFF      <1>     lea rdx, badTime
  1471 0000301A E8E60F0000          <1>     call printString
  1472 0000301F E914FFFFFF          <1>     jmp time.noCur
  1473                              <1> .validsep:
  1474 00003024 AC                  <1>     lodsb
  1475 00003025 3A050DD0FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1476                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000302B 74(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1477 0000302D 3C2E                <1>     cmp al, "."
  1478                              <1>     return
    13                              <2> %%_ret:
    14 0000302F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> .checkNum:
  1480 00003030 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1481 00003031 48FFCE              <1>     dec rsi
  1482 00003034 3C30                <1>     cmp al, "0"
  1483 00003036 7206                <1>     jb .cnbad
  1484 00003038 3C39                <1>     cmp al, "9"
  1485 0000303A 7702                <1>     ja .cnbad
  1486 0000303C F8                  <1>     clc
  1487                              <1>     return
    13                              <2> %%_ret:
    14 0000303D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1488                              <1> .cnbad:
  1489 0000303E F9                  <1>     stc
  1490                              <1>     return
    13                              <2> %%_ret:
    14 0000303F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1491                              <1> ctty:
  1492 00003040 F6055DD0FFFFFF      <1>     test byte [arg1Flg], -1
  1493 00003047 0F8470EEFFFF        <1>     jz badArgError
  1494 0000304D F60553D0FFFFFF      <1>     test byte [arg2Flg], -1
  1495 00003054 0F8563EEFFFF        <1>     jnz badArgError
  1496 0000305A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1497 00003061 0FB6053DD0FFFF      <1>     movzx eax, byte [arg1Off]
  1498 00003068 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1499 0000306B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1500 0000306F 750F                <1>     jne .noDrive
  1501 00003071 0FB6052ED0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1502 00003078 3CFF                <1>     cmp al, -1
  1503 0000307A 0F8434EEFFFF        <1>     je badDriveError
  1504                              <1> .noDrive:
  1505                              <1>     ;Now we open the provided file
  1506 00003080 E857130000          <1>     call copyArgumentToSearchSpec
  1507 00003085 488D1504D4FFFF      <1>     lea rdx, searchSpec
  1508                              <1> .loadSwap:
  1509 0000308C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1510 00003091 CD21                <1>     int 21h
  1511 00003093 0F822DEEFFFF        <1>     jc badFileError
  1512 00003099 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1513 0000309C B800440000          <1>     mov eax, 4400h  ;Get device word
  1514 000030A1 CD21                <1>     int 21h
  1515 000030A3 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1516 000030A6 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1517                              <1>     ;Now we set this handle to be STDIO
  1518 000030A8 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1519 000030AB 30F6                <1>     xor dh, dh
  1520 000030AD B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1521 000030B2 CD21                <1>     int 21h
  1522                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1523 000030B4 31C9                <1>     xor ecx, ecx    ;STDIN
  1524 000030B6 B800460000          <1>     mov eax, 4600h
  1525 000030BB CD21                <1>     int 21h
  1526 000030BD FFC1                <1>     inc ecx         ;STDOUT
  1527 000030BF B800460000          <1>     mov eax, 4600h
  1528 000030C4 CD21                <1>     int 21h
  1529 000030C6 FFC1                <1>     inc ecx         ;STDERR
  1530 000030C8 B800460000          <1>     mov eax, 4600h
  1531 000030CD CD21                <1>     int 21h
  1532 000030CF B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1533 000030D4 CD21                <1>     int 21h
  1534                              <1>     return
    13                              <2> %%_ret:
    14 000030D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1535                              <1> .badCharDev:
  1536 000030D7 488D1523DBFFFF      <1>     lea rdx, badDev
  1537 000030DE B409                <1>     mov ah, 09h
  1538 000030E0 CD21                <1>     int 21h
  1539 000030E2 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1540 000030E4 CD21                <1>     int 21h
  1541                              <1>     return
    13                              <2> %%_ret:
    14 000030E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1542                              <1> 
  1543                              <1> cls:  
  1544 000030E7 B800440000          <1>     mov eax, 4400h  ;Get device info
  1545 000030EC BB01000000          <1>     mov ebx, 1      ;for handle 1
  1546 000030F1 CD21                <1>     int 21h         ;in dx
  1547 000030F3 F7C280000000        <1>     test edx, devCharDev
  1548 000030F9 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1549 000030FB F7C210000000        <1>     test edx, charDevFastOut
  1550 00003101 743E                <1>     jz .doAnsi
  1551                              <1>     ;Test if Int 29h uses Int 30h
  1552                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1553                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1554 00003103 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1555 00003108 CD21                <1>     int 21h
  1556                              <1> .biosCheck:
  1557 0000310A 66813BCD30          <1>     cmp word [rbx], 30CDh
  1558 0000310F 740C                <1>     je .biosConfirmed
  1559 00003111 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1560 00003116 7429                <1>     je .doAnsi
  1561 00003118 48FFC3              <1>     inc rbx
  1562 0000311B EBED                <1>     jmp short .biosCheck
  1563                              <1> .biosConfirmed:
  1564                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1565 0000311D B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1566 0000311F 31DB                <1>     xor ebx, ebx
  1567 00003121 CD30                <1>     int 30h
  1568 00003123 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1569 00003125 CD30                <1>     int 30h
  1570 00003127 53                  <1>     push rbx
  1571 00003128 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1572 0000312B FECA                <1>     dec dl
  1573 0000312D B619                <1>     mov dh, 25  ;Number of rows is standard
  1574 0000312F 31C0                <1>     xor eax, eax
  1575 00003131 89C1                <1>     mov ecx, eax
  1576 00003133 B707                <1>     mov bh, 7   ;Screen attributes
  1577 00003135 B406                <1>     mov ah, 6   ;Scroll
  1578 00003137 CD30                <1>     int 30h
  1579 00003139 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1580 0000313B 5B                  <1>     pop rbx
  1581 0000313C B402                <1>     mov ah, 2
  1582 0000313E CD30                <1>     int 30h
  1583                              <1>     return
    13                              <2> %%_ret:
    14 00003140 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1584                              <1> .doAnsi:
  1585                              <1> ;4 chars in the ansi routine
  1586                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1587                              <1> ; understand ANSI codes
  1588 00003141 488D3540DDFFFF      <1>     lea rsi, ansiCls
  1589 00003148 B904000000          <1>     mov ecx, 4
  1590 0000314D B406                <1>     mov ah, 06h ;Raw char output
  1591                              <1> .ansiLp:
  1592 0000314F AC                  <1>     lodsb   ;Get the char in 
  1593 00003150 88C2                <1>     mov dl, al
  1594 00003152 CD21                <1>     int 21h
  1595 00003154 FFC9                <1>     dec ecx
  1596 00003156 75F7                <1>     jnz .ansiLp
  1597                              <1>     return
    13                              <2> %%_ret:
    14 00003158 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1598                              <1> 
  1599                              <1> break:
  1600 00003159 F60544CFFFFFFF      <1>     test byte [arg1Flg], -1
  1601 00003160 752D                <1>     jnz .argumentProvided
  1602                              <1>     ;Here we just get the status of break
  1603 00003162 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1604 00003167 CD21                <1>     int 21h
  1605 00003169 88D3                <1>     mov bl, dl
  1606 0000316B 488D1531DBFFFF      <1>     lea rdx, breakIs
  1607 00003172 B409                <1>     mov ah, 09h
  1608 00003174 CD21                <1>     int 21h
  1609 00003176 488D1521DBFFFF      <1>     lea rdx, onMes
  1610 0000317D 488D0D14DBFFFF      <1>     lea rcx, offMes
  1611 00003184 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1612 00003186 480F44D1            <1>     cmovz rdx, rcx
  1613 0000318A B409                <1>     mov ah, 09h
  1614 0000318C CD21                <1>     int 21h
  1615                              <1>     return
    13                              <2> %%_ret:
    14 0000318E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1616                              <1> .argumentProvided:
  1617 0000318F 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1618 00003193 AD                  <1>     lodsd   ;Read the word
  1619 00003194 89C3                <1>     mov ebx, eax
  1620 00003196 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1621 0000319B C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1622 0000319E 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1623 000031A3 7416                <1>     je .maybeOn
  1624 000031A5 663D4F46            <1>     cmp ax, "OF"
  1625 000031A9 7523                <1>     jne .badOnOff
  1626 000031AB 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1627 000031B0 6681FB4620          <1>     cmp bx, "F "
  1628 000031B5 7517                <1>     jne .badOnOff
  1629                              <1>     ;Set off
  1630 000031B7 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1631 000031B9 EB0B                <1>     jmp short .setBreak
  1632                              <1> .maybeOn:
  1633 000031BB 663D4F4E            <1>     cmp ax, "ON"
  1634 000031BF 750D                <1>     jne .badOnOff
  1635                              <1>     ;Set on
  1636 000031C1 BA01000000          <1>     mov edx, 1
  1637                              <1> .setBreak:
  1638 000031C6 B801330000          <1>     mov eax, 3301h  ;Set break
  1639 000031CB CD21                <1>     int 21h
  1640                              <1>     return
    13                              <2> %%_ret:
    14 000031CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1641                              <1> .badOnOff:
  1642 000031CE 488D15C3DCFFFF      <1>     lea rdx, badOnOff
  1643 000031D5 B409                <1>     mov ah, 09h
  1644 000031D7 CD21                <1>     int 21h
  1645                              <1>     return
    13                              <2> %%_ret:
    14 000031D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1646                              <1> 
  1647                              <1> verify:
  1648 000031DA F605C3CEFFFFFF      <1>     test byte [arg1Flg], -1
  1649 000031E1 752D                <1>     jnz .argumentProvided
  1650                              <1>     ;Here we just get the status of break
  1651 000031E3 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1652 000031E8 CD21                <1>     int 21h
  1653 000031EA 88C3                <1>     mov bl, al
  1654 000031EC 488D15BADAFFFF      <1>     lea rdx, verifyIs
  1655 000031F3 B409                <1>     mov ah, 09h
  1656 000031F5 CD21                <1>     int 21h
  1657 000031F7 488D15A0DAFFFF      <1>     lea rdx, onMes
  1658 000031FE 488D0D93DAFFFF      <1>     lea rcx, offMes
  1659 00003205 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1660 00003207 480F44D1            <1>     cmovz rdx, rcx
  1661 0000320B B409                <1>     mov ah, 09h
  1662 0000320D CD21                <1>     int 21h
  1663                              <1>     return
    13                              <2> %%_ret:
    14 0000320F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1664                              <1> .argumentProvided:
  1665 00003210 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1666 00003214 AD                  <1>     lodsd   ;Read the word
  1667 00003215 89C3                <1>     mov ebx, eax
  1668 00003217 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1669 0000321C C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1670 0000321F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1671 00003224 7416                <1>     je .maybeOn
  1672 00003226 663D4F46            <1>     cmp ax, "OF"
  1673 0000322A 751F                <1>     jne .badOnOff
  1674 0000322C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1675 00003231 6681FB4620          <1>     cmp bx, "F "
  1676 00003236 7513                <1>     jne .badOnOff
  1677                              <1>     ;Set off
  1678 00003238 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1679 0000323A EB0A                <1>     jmp short .setVerify
  1680                              <1> .maybeOn:
  1681 0000323C 663D4F4E            <1>     cmp ax, "ON"
  1682 00003240 7509                <1>     jne .badOnOff
  1683                              <1>     ;Set on
  1684 00003242 31C0                <1>     xor eax, eax
  1685 00003244 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1686                              <1> .setVerify:
  1687 00003246 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1688 00003248 CD21                <1>     int 21h
  1689                              <1>     return
    13                              <2> %%_ret:
    14 0000324A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1690                              <1> .badOnOff:
  1691 0000324B 488D1546DCFFFF      <1>     lea rdx, badOnOff
  1692 00003252 B409                <1>     mov ah, 09h
  1693 00003254 CD21                <1>     int 21h
  1694                              <1>     return
    13                              <2> %%_ret:
    14 00003256 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> 
  1696                              <1> rename:
  1697 00003257 F60546CEFFFFFF      <1>     test byte [arg1Flg], -1
  1698 0000325E 0F8459ECFFFF        <1>     jz badArgError
  1699 00003264 F6053CCEFFFFFF      <1>     test byte [arg2Flg], -1
  1700 0000326B 0F844CECFFFF        <1>     jz badArgError    
  1701                              <1>     ;Initialise the variables!
  1702 00003271 488D35E5D3FFFF      <1>     lea rsi, srcSpec
  1703 00003278 488935E2D4FFFF      <1>     mov qword [srcPtr], rsi
  1704 0000327F 488D3559D4FFFF      <1>     lea rsi, destSpec
  1705 00003286 488935DCD4FFFF      <1>     mov qword [destPtr], rsi
  1706                              <1>     ;Check the second path is just a filename!
  1707 0000328D 0FB60514CEFFFF      <1>     movzx eax, byte [arg2Off]
  1708 00003294 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1709 0000329B 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1710 0000329E 488D3DEBD1FFFF      <1>     lea rdi, searchSpec
  1711 000032A5 57                  <1>     push rdi
  1712 000032A6 E8D6100000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1713 000032AB 5F                  <1>     pop rdi
  1714 000032AC 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1715 000032B0 0F8407ECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1716                              <1> ;Check if a drive specifier has been given
  1717 000032B6 0FB605E8CDFFFF      <1>     movzx eax, byte [arg1Off]
  1718 000032BD 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1719 000032C4 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1720 000032C7 66AD                <1>     lodsw   ;Get the first two chars
  1721 000032C9 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1722 000032CC 752A                <1>     jne .curDrvSrc
  1723                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1724 000032CE 488B358CD4FFFF      <1>     mov rsi, qword [srcPtr]
  1725 000032D5 668906              <1>     mov word [rsi], ax
  1726 000032D8 4881057ED4FFFF0200- <1>     add qword [srcPtr], 2   
  1726 000032E1 0000                <1>
  1727 000032E3 488B357FD4FFFF      <1>     mov rsi, qword [destPtr]
  1728 000032EA 668906              <1>     mov word [rsi], ax
  1729 000032ED 48810571D4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1729 000032F6 0000                <1>
  1730                              <1> .curDrvSrc:
  1731 000032F8 4889FE              <1>     mov rsi, rdi
  1732                              <1> .destScan:
  1733 000032FB AC                  <1>     lodsb   ;Get the char
  1734 000032FC 3A0527CDFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1735 00003302 0F84B5EBFFFF        <1>     je badArgError
  1736 00003308 84C0                <1>     test al, al
  1737 0000330A 75EF                <1>     jnz .destScan
  1738                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1739 0000330C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1740 00003310 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1740 00003319 3F                  <1>
  1741 0000331A B903000000          <1>     mov ecx, 3  ;24 bytes
  1742 0000331F F348AB              <1>     rep stosq
  1743 00003322 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1744 00003323 488D3566D1FFFF      <1>     lea rsi, searchSpec
  1745 0000332A 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1746 0000332E B80D290000          <1>     mov eax, 290Dh
  1747 00003333 CD21                <1>     int 21h     
  1748 00003335 50                  <1>     push rax    ;Save the WC signature
  1749 00003336 E889100000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1750 0000333B 488D3D4ED1FFFF      <1>     lea rdi, searchSpec
  1751 00003342 E8C00F0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1752 00003347 4889FE              <1>     mov rsi, rdi
  1753 0000334A 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1754 0000334D 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1755 00003351 B80D290000          <1>     mov eax, 290Dh
  1756 00003356 CD21                <1>     int 21h
  1757 00003358 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1758 00003359 88CC                <1>     mov ah, cl
  1759 0000335B 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1760 0000335E 0F84EB000000        <1>     jz .noWC
  1761 00003364 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1762 00003366 0F8451EBFFFF        <1>     je badArgError
  1763 0000336C 488D351DD1FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1764                              <1>     ;Now we check if we have a path to actually handle
  1765 00003373 4839F3              <1>     cmp rbx, rsi
  1766 00003376 7444                <1>     je .noPath
  1767 00003378 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1768 0000337C 488D350DD1FFFF      <1>     lea rsi, searchSpec
  1769 00003383 488B3DD3D2FFFF      <1>     mov rdi, qword [srcSpec]
  1770 0000338A 56                  <1>     push rsi
  1771 0000338B E8820E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1772 00003390 5E                  <1>     pop rsi
  1773 00003391 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1774 00003394 8A058FCCFFFF        <1>     mov al, byte [pathSep]
  1775 0000339A AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1776 0000339B 48893DBFD3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1777 000033A2 488B3DC0D3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1778 000033A9 E8640E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1779 000033AE 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1780 000033B1 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1781 000033B2 48893DB0D3FFFF      <1>     mov qword [destPtr], rdi
  1782 000033B9 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1783                              <1> .noPath:
  1784                              <1>     ;Now we have where to copy the files to, we can start our work!
  1785 000033BC E894110000          <1>     call setDTA
  1786 000033C1 488D15C8D0FFFF      <1>     lea rdx, searchSpec
  1787 000033C8 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1788 000033CA B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1789 000033CF CD21                <1>     int 21h
  1790 000033D1 0F82F8EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1791                              <1> .wcLoop:
  1792                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1793 000033D7 488D3556CDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1794 000033DE 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1795 000033E2 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1796 000033E7 CD21                <1>     int 21h 
  1797                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1798 000033E9 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1799 000033ED 488D3D7DD3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1800 000033F4 57                  <1>     push rdi
  1801 000033F5 48A5                <1>     movsq
  1802 000033F7 66A5                <1>     movsw
  1803 000033F9 A4                  <1>     movsb
  1804 000033FA 5F                  <1>     pop rdi
  1805 000033FB 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1806 000033FF B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1807                              <1> .wcNameMake:
  1808 00003404 AC                  <1>     lodsb   ;Get the char from the source string
  1809 00003405 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1810 00003408 7502                <1>     jne .noStore    ;Dont store the char there
  1811 0000340A 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1812                              <1> .noStore:
  1813 0000340C 48FFC7              <1>     inc rdi ;Goto next char position
  1814 0000340F FFC9                <1>     dec ecx
  1815 00003411 75F1                <1>     jnz .wcNameMake
  1816                              <1> ;renName now has the FCB name for the file we wish to make!
  1817                              <1> ;Now make the two paths!
  1818 00003413 488D351ACDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1819 0000341A 488B3D40D3FFFF      <1>     mov rdi, qword [srcPtr]
  1820 00003421 E8EC0D0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1821 00003426 488D3544D3FFFF      <1>     lea rsi, renName
  1822 0000342D 488B3D35D3FFFF      <1>     mov rdi, qword [destPtr]
  1823 00003434 E8F20E0000          <1>     call FCBToAsciiz
  1824 00003439 488D151DD2FFFF      <1>     lea rdx, srcSpec
  1825 00003440 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1826 00003445 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1827 0000344A CD21                <1>     int 21h
  1828 0000344C 7389                <1>     jnc .wcLoop     ;And process it too!
  1829                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000344E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1830                              <1> .noWC:
  1831 0000344F E8700F0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1832 00003454 0FB6054DCCFFFF      <1>     movzx eax, byte [arg2Off]
  1833 0000345B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1834 00003462 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1835 00003465 488B3DFDD2FFFF      <1>     mov rdi, qword [destPtr]    
  1836 0000346C E8100F0000          <1>     call cpDelimPathToBufz
  1837 00003471 488D1518D0FFFF      <1>     lea rdx, searchSpec
  1838 00003478 E807000000          <1>     call .ren
  1839                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000347D 73(4E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1840 0000347F E94BEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1841                              <1> .ren:
  1842 00003484 488D3D54D2FFFF      <1>     lea rdi, destSpec
  1843 0000348B B800560000          <1>     mov eax, 5600h
  1844 00003490 CD21                <1>     int 21h
  1845                              <1>     return
    13                              <2> %%_ret:
    14 00003492 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1846                              <1> 
  1847                              <1> truename:
  1848 00003493 F6050ACCFFFFFF      <1>     test byte [arg1Flg], -1
  1849 0000349A 0F841DEAFFFF        <1>     jz badArgError
  1850 000034A0 E81F0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1851 000034A5 488D35E4CFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1852 000034AC 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1853 000034AF B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1854 000034B4 CD21                <1>     int 21h
  1855 000034B6 730D                <1>     jnc .writePath
  1856 000034B8 3C02                <1>     cmp al, errFnf
  1857 000034BA 0F8406EAFFFF        <1>     je badFileError
  1858 000034C0 E9E6E9FFFF          <1>     jmp badParamError
  1859                              <1> .writePath:
  1860 000034C5 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1861 000034C8 B9FFFFFFFF          <1>     mov ecx, -1
  1862 000034CD 30C0                <1>     xor al, al
  1863 000034CF F2AE                <1>     repne scasb     ;Get the new len
  1864 000034D1 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1865 000034D3 FFC9                <1>     dec ecx
  1866 000034D5 BB01000000          <1>     mov ebx, 01
  1867 000034DA B440                <1>     mov ah, 40h
  1868 000034DC CD21                <1>     int 21h
  1869 000034DE E81B0B0000          <1>     call printCRLF
  1870                              <1>     return
    13                              <2> %%_ret:
    14 000034E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1871                              <1> 
  1872                              <1> volume:
  1873                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1874 000034E4 F605BCCBFFFFFF      <1>     test byte [arg2Flg], -1
  1875 000034EB 0F85CCE9FFFF        <1>     jnz badArgError
  1876 000034F1 F605ACCBFFFFFF      <1>     test byte [arg1Flg], -1
  1877 000034F8 7507                <1>     jnz .notCurrentDrive
  1878 000034FA E80E0D0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1879 000034FF EB31                <1>     jmp short .dirEP
  1880                              <1> .notCurrentDrive:
  1881 00003501 E8BE0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1882 00003506 488D3583CFFFFF      <1>     lea rsi, searchSpec
  1883 0000350D E83E0D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1884 00003512 66AD                <1>     lodsw                   ;Get this word
  1885 00003514 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1886 00003517 0F85A0E9FFFF        <1>     jne badArgError
  1887 0000351D 8A0583CBFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1888 00003523 A8FF                <1>     test al, -1
  1889 00003525 0F8589E9FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1890 0000352B 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1891 00003530 FFC8                <1>     dec eax ;Convert to 0 based number
  1892                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1893 00003532 E81E100000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1894 00003537 488D15EFD0FFFF      <1>     lea rdx, volFcb
  1895 0000353E FFC0                <1>     inc eax ;Get 1 based drive number
  1896 00003540 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1897 00003542 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1898 00003545 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1899 0000354A CD21                <1>     int 21h
  1900 0000354C 50                  <1>     push rax
  1901                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1902 0000354D 488D1516D3FFFF      <1>     lea rdx, crlf
  1903 00003554 B409                <1>     mov ah, 09h
  1904 00003556 CD21                <1>     int 21h
  1905 00003558 488D15CBD5FFFF      <1>     lea rdx, volMes
  1906 0000355F B409                <1>     mov ah, 09h
  1907 00003561 CD21                <1>     int 21h
  1908 00003563 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1909 00003565 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1910 00003568 B402                <1>     mov ah, 02h
  1911 0000356A CD21                <1>     int 21h
  1912 0000356C 58                  <1>     pop rax
  1913 0000356D 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1914 0000356F 7409                <1>     jz .volIDOk
  1915 00003571 488D15C9D5FFFF      <1>     lea rdx, volNo
  1916 00003578 EB19                <1>     jmp short .volEndPrint
  1917                              <1> .volIDOk:
  1918 0000357A 488D15BBD5FFFF      <1>     lea rdx, volOk
  1919 00003581 B409                <1>     mov ah, 09h
  1920 00003583 CD21                <1>     int 21h
  1921 00003585 C6059DCBFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1922 0000358C 488D158BCBFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1923                              <1> .volEndPrint:
  1924 00003593 B409                <1>     mov ah, 09h
  1925 00003595 CD21                <1>     int 21h
  1926 00003597 488D15CCD2FFFF      <1>     lea rdx, crlf
  1927 0000359E B409                <1>     mov ah, 09h
  1928 000035A0 CD21                <1>     int 21h
  1929                              <1>     return
    13                              <2> %%_ret:
    14 000035A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1930                              <1> 
  1931                              <1> version:
  1932 000035A3 488D15C0D2FFFF      <1>     lea rdx, crlf
  1933 000035AA B409                <1>     mov ah, 09h
  1934 000035AC CD21                <1>     int 21h
  1935 000035AE 488D1563D5FFFF      <1>     lea rdx, dosVer
  1936 000035B5 B409                <1>     mov ah, 09h
  1937 000035B7 CD21                <1>     int 21h
  1938 000035B9 E80C000000          <1>     call .printVersionNumber
  1939 000035BE 488D15A5D2FFFF      <1>     lea rdx, crlf
  1940 000035C5 B409                <1>     mov ah, 09h
  1941 000035C7 CD21                <1>     int 21h
  1942                              <1>     return
    13                              <2> %%_ret:
    14 000035C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1943                              <1> .printVersionNumber:
  1944 000035CA B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1945 000035CC CD21                <1>     int 21h
  1946 000035CE 50                  <1>     push rax
  1947 000035CF 0FB6C0              <1>     movzx eax, al
  1948 000035D2 E8C60E0000          <1>     call printDecimalWord
  1949 000035D7 B22E                <1>     mov dl, "."
  1950 000035D9 B402                <1>     mov ah, 02h
  1951 000035DB CD21                <1>     int 21h
  1952 000035DD 58                  <1>     pop rax
  1953 000035DE 0FB6C4              <1>     movzx eax, ah
  1954 000035E1 E8B70E0000          <1>     call printDecimalWord
  1955                              <1>     return
    13                              <2> %%_ret:
    14 000035E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1956                              <1> 
  1957                              <1> 
  1958                              <1> memory:
  1959 000035E7 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  1960 000035EC CD21                <1>     int 21h
  1961 000035EE 4885DB              <1>     test rbx, rbx
  1962 000035F1 7510                <1>     jnz .sysvarsOK
  1963 000035F3 488D1505D8FFFF      <1>     lea rdx, memBad0
  1964 000035FA B409                <1>     mov ah, 09h
  1965 000035FC CD21                <1>     int 21h
  1966 000035FE E9420F0000          <1>     jmp freezePC.altEP
  1967                              <1> .sysvarsOK:
  1968                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1969                              <1>     ; and rcx to store Application memory
  1970 00003603 31F6                <1>     xor esi, esi
  1971 00003605 31FF                <1>     xor edi, edi
  1972 00003607 31ED                <1>     xor ebp, ebp
  1973 00003609 31C9                <1>     xor ecx, ecx
  1974 0000360B 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1975 0000360F 488B1B              <1>     mov rbx, qword [rbx]
  1976                              <1> .memLp:
  1977 00003612 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1978 00003615 7409                <1>     je .validMCB
  1979 00003617 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1980 0000361A 0F8506010000        <1>     jne .badMCBFound
  1981                              <1> .validMCB:
  1982 00003620 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1983 00003623 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1984 00003627 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1985 0000362F 7505                <1>     jne .notDOS
  1986 00003631 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1987 00003634 EB21                <1>     jmp short .gotoNext
  1988                              <1> .notDOS:
  1989 00003636 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1990 0000363E 7505                <1>     jne .notFree
  1991 00003640 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1992 00003643 EB12                <1>     jmp short .gotoNext
  1993                              <1> .notFree:
  1994 00003645 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1995 0000364D 7505                <1>     jne .notHole
  1996 0000364F 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1997 00003652 EB03                <1>     jmp short .gotoNext
  1998                              <1> .notHole:
  1999 00003654 4801C1              <1>     add rcx, rax    ;Add to Application count
  2000                              <1> .gotoNext:
  2001 00003657 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2002 0000365A 7407                <1>     je .endOfWalk
  2003 0000365C 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2004 00003661 EBAF                <1>     jmp short .memLp
  2005                              <1> .endOfWalk:
  2006                              <1>     
  2007 00003663 488D15F6D6FFFF      <1>     lea rdx, memDOS
  2008 0000366A B409                <1>     mov ah, 09h
  2009 0000366C CD21                <1>     int 21h
  2010 0000366E 4889F0              <1>     mov rax, rsi
  2011 00003671 E89D000000          <1>     call .mcbPrintAmount
  2012 00003676 488D157BD7FFFF      <1>     lea rdx, memByte
  2013 0000367D B409                <1>     mov ah, 09h
  2014 0000367F CD21                <1>     int 21h
  2015                              <1> 
  2016 00003681 4885ED              <1>     test rbp, rbp
  2017 00003684 741E                <1>     jz .skipHole
  2018 00003686 488D151FD7FFFF      <1>     lea rdx, memHole
  2019 0000368D B409                <1>     mov ah, 09h
  2020 0000368F CD21                <1>     int 21h
  2021 00003691 4889E8              <1>     mov rax, rbp
  2022 00003694 E87A000000          <1>     call .mcbPrintAmount
  2023 00003699 488D1558D7FFFF      <1>     lea rdx, memByte
  2024 000036A0 B409                <1>     mov ah, 09h
  2025 000036A2 CD21                <1>     int 21h
  2026                              <1> .skipHole:
  2027                              <1> 
  2028 000036A4 488D15DBD6FFFF      <1>     lea rdx, memApp
  2029 000036AB B409                <1>     mov ah, 09h
  2030 000036AD CD21                <1>     int 21h
  2031 000036AF 4889C8              <1>     mov rax, rcx
  2032 000036B2 E85C000000          <1>     call .mcbPrintAmount
  2033 000036B7 488D153AD7FFFF      <1>     lea rdx, memByte
  2034 000036BE B409                <1>     mov ah, 09h
  2035 000036C0 CD21                <1>     int 21h
  2036                              <1> 
  2037 000036C2 488D1509D7FFFF      <1>     lea rdx, memFree
  2038 000036C9 B409                <1>     mov ah, 09h
  2039 000036CB CD21                <1>     int 21h
  2040 000036CD 4889F8              <1>     mov rax, rdi
  2041 000036D0 E83E000000          <1>     call .mcbPrintAmount
  2042 000036D5 488D151CD7FFFF      <1>     lea rdx, memByte
  2043 000036DC B409                <1>     mov ah, 09h
  2044 000036DE CD21                <1>     int 21h
  2045                              <1> 
  2046 000036E0 488D1553D6FFFF      <1>     lea rdx, memSys
  2047 000036E7 B409                <1>     mov ah, 09h
  2048 000036E9 CD21                <1>     int 21h
  2049 000036EB 4889F0              <1>     mov rax, rsi
  2050 000036EE 4801F8              <1>     add rax, rdi
  2051 000036F1 4801C8              <1>     add rax, rcx
  2052 000036F4 4801E8              <1>     add rax, rbp
  2053 000036F7 E817000000          <1>     call .mcbPrintAmount
  2054 000036FC 488D15F5D6FFFF      <1>     lea rdx, memByte
  2055 00003703 B409                <1>     mov ah, 09h
  2056 00003705 CD21                <1>     int 21h
  2057                              <1> 
  2058 00003707 488D155CD1FFFF      <1>     lea rdx, crlf
  2059 0000370E B409                <1>     mov ah, 09h
  2060 00003710 CD21                <1>     int 21h
  2061                              <1>     return
    13                              <2> %%_ret:
    14 00003712 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2062                              <1> 
  2063                              <1> .mcbPrintAmount:
  2064 00003713 51                  <1>     push rcx
  2065 00003714 56                  <1>     push rsi
  2066 00003715 57                  <1>     push rdi
  2067 00003716 55                  <1>     push rbp
  2068 00003717 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2069 0000371C E8DC0C0000          <1>     call printDecimalValLB
  2070 00003721 5D                  <1>     pop rbp
  2071 00003722 5F                  <1>     pop rdi
  2072 00003723 5E                  <1>     pop rsi
  2073 00003724 59                  <1>     pop rcx
  2074                              <1>     return
    13                              <2> %%_ret:
    14 00003725 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2075                              <1> .badMCBFound:
  2076 00003726 488D1512D7FFFF      <1>     lea rdx, memBad2
  2077 0000372D B409                <1>     mov ah, 09h
  2078 0000372F CD21                <1>     int 21h
  2079 00003731 E90F0E0000          <1>     jmp freezePC.altEP
  2080                              <1> 
  2081                              <1> type:
  2082 00003736 F60567C9FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2083 0000373D 0F847AE7FFFF        <1>     jz badArgError
  2084 00003743 F6055DC9FFFFFF      <1>     test byte [arg2Flg], -1
  2085 0000374A 0F856DE7FFFF        <1>     jnz badArgError         ;If this set, error
  2086 00003750 4C8B05B8C8FFFF      <1>     mov r8, [pspPtr]
  2087 00003757 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2088 0000375E 0FB60540C9FFFF      <1>     movzx eax, byte [arg1Off]
  2089 00003765 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2090 00003768 803E0D              <1>     cmp byte [rsi], CR
  2091 0000376B 0F844CE7FFFF        <1>     je badArgError
  2092 00003771 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2093 00003775 750F                <1>     jne .noDrive
  2094 00003777 0FB60528C9FFFF      <1>     movzx eax, byte [arg1FCBret]
  2095 0000377E 3CFF                <1>     cmp al, -1
  2096 00003780 0F842EE7FFFF        <1>     je badDriveError
  2097                              <1> .noDrive:
  2098                              <1>     ;Now we open the provided file
  2099 00003786 E8390C0000          <1>     call buildCommandPath
  2100 0000378B 488D15FECCFFFF      <1>     lea rdx, searchSpec
  2101 00003792 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2102 00003797 CD21                <1>     int 21h
  2103 00003799 0F8227E7FFFF        <1>     jc badFileError
  2104 0000379F 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2105 000037A6 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2106                              <1> .lp:
  2107 000037A9 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2108 000037AE B43F                <1>     mov ah, 3Fh ;Read handle
  2109 000037B0 CD21                <1>     int 21h
  2110 000037B2 89C1                <1>     mov ecx, eax
  2111 000037B4 67E317              <1>     jecxz .exit
  2112 000037B7 53                  <1>     push rbx    ;Save the original in handle
  2113 000037B8 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2114 000037BD B440                <1>     mov ah, 40h
  2115 000037BF CD21                <1>     int 21h
  2116 000037C1 5B                  <1>     pop rbx ;Get back the original read handle
  2117 000037C2 720F                <1>     jc .exitBad
  2118 000037C4 39C8                <1>     cmp eax, ecx
  2119 000037C6 74E1                <1>     je .lp
  2120 000037C8 FFC9                <1>     dec ecx ;One less for a ^Z
  2121 000037CA 39C8                <1>     cmp eax, ecx
  2122 000037CC 7505                <1>     jne .exitBad
  2123                              <1> .exit:
  2124 000037CE B43E                <1>     mov ah, 3Eh ;Close handle
  2125 000037D0 CD21                <1>     int 21h
  2126                              <1>     return
    13                              <2> %%_ret:
    14 000037D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2127                              <1> .exitBad:
  2128                              <1>     ;If it is a char device, don't print an error
  2129 000037D3 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2130 000037D8 BB01000000          <1>     mov ebx, 1
  2131 000037DD CD21                <1>     int 21h
  2132 000037DF F6C280              <1>     test dl, devCharDev
  2133                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037E2 75(D2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2134 000037E4 E979E6FFFF          <1>     jmp badDiskFull
  2135                              <1> 
  2136                              <1> exit:
  2137 000037E9 F605A4C8FFFF01      <1>     test byte [statFlg1], permaShell
  2138 000037F0 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2139 000037F2 F6059BC8FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2140 000037F9 0F851EE3FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2141                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 000037FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2142                              <1> .ouch:
  2143 00003800 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2144 00003805 CD21                <1>     int 21h
  2145                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003807 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2146                              <1> 
  2147                              <1> launchChild:
  2148                              <1>     ;We execute an external command here.
  2149                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2150                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2151                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2152                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2153                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2154 00003808 E8480D0000          <1>     call setDTA         
  2155                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2156 0000380D 488D3DD3CAFFFF      <1>     lea rdi, cmdPathSpec
  2157 00003814 4889FE              <1>     mov rsi, rdi
  2158 00003817 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2159 0000381C CD2F                <1>     int 2fh
  2160 0000381E E8E40A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2161 00003823 4889FE              <1>     mov rsi, rdi    ;Source here
  2162 00003826 488D3DD9C8FFFF      <1>     lea rdi, cmdFcb
  2163 0000382D B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2164 00003832 CD21                <1>     int 21h
  2165 00003834 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2166 00003836 0F85B1E6FFFF        <1>     jnz badCmdError
  2167 0000383C 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2168                              <1> .pathLoop:
  2169 0000383F 488D35C9C8FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2170 00003846 488D3D6CD6FFFF      <1>     lea rdi, extStr
  2171 0000384D BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2172                              <1> .extLp:
  2173 00003852 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2174 00003853 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2175 00003858 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2176 0000385A 5E                  <1>     pop rsi
  2177 0000385B 85C9                <1>     test ecx, ecx
  2178 0000385D 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2179 0000385F 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2180 00003862 FFCA                <1>     dec edx         ;Else one less extension type to check
  2181 00003864 75EC                <1>     jnz .extLp
  2182                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2183                              <1>     ;If not, error.
  2184 00003866 B903000000          <1>     mov ecx, 3
  2185 0000386B 4889F7              <1>     mov rdi, rsi
  2186 0000386E B020                <1>     mov al, SPC
  2187 00003870 F3AE                <1>     rep scasb   
  2188 00003872 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2189 00003874 0F8573E6FFFF        <1>     jnz badCmdError    ;If not, error!
  2190                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2191 0000387A 488D3538D6FFFF      <1>     lea rsi, extStr
  2192 00003881 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2193                              <1> .extSrchLp:
  2194 00003886 488D3D82C8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2195 0000388D B903000000          <1>     mov ecx, 3
  2196 00003892 F3A4                <1>     rep movsb   ;Copy the extension over!
  2197 00003894 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2198 00003899 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2199 0000389B FFCB                <1>     dec ebx                 ;Decrement extension counter
  2200 0000389D 75E7                <1>     jnz .extSrchLp
  2201                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2202                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2203                              <1> ; by setting the fcb extension back to all spaces.
  2204 0000389F 488D3D69C8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2205 000038A6 B903000000          <1>     mov ecx, 3
  2206 000038AB B020                <1>     mov al, SPC
  2207 000038AD F3AA                <1>     rep stosb   ;Store back the empty extension!
  2208 000038AF EB70                <1>     jmp short .pathHandle
  2209                              <1> .extFnd:
  2210                              <1> ;Here if the file had the right extension.
  2211 000038B1 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2212 000038B6 7269                <1>     jc .pathHandle
  2213                              <1> .extSrchFnd:
  2214                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2215                              <1> ; a BAT. If it is, separate handling!
  2216 000038B8 803D50C8FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2217 000038BF 0F84B1E2FFFF        <1>     je batLaunch
  2218 000038C5 488D1D75C8FFFF      <1>     lea rbx, launchBlock
  2219 000038CC 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2220 000038D0 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2221 000038D3 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2222 000038DA 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2223 000038DE 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2224 000038E2 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2225 000038E6 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2226 000038EA 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2227 000038EE 488D15F2C9FFFF      <1>     lea rdx, cmdPathSpec
  2228 000038F5 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2229 000038FA CD21                <1>     int 21h
  2230                              <1> ;If the program failed to start, verify why!
  2231 000038FC B800590000          <1>     mov eax, 5900h      ;Get extended error
  2232 00003901 31DB                <1>     xor ebx, ebx
  2233 00003903 CD21                <1>     int 21h
  2234 00003905 66890501C7FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2235 0000390C 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2236 0000390E 0F848EE5FFFF        <1>     je badAccError
  2237 00003914 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2238 00003916 0F841E0C0000        <1>     je freezePC
  2239 0000391C E9CCE5FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2240                              <1> .pathHandle:        
  2241                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2242                              <1> ;al has error code!
  2243 00003921 4885ED              <1>     test rbp, rbp
  2244 00003924 0F85A3000000        <1>     jnz .pathReentry
  2245                              <1> ;Now check if the command we recieved included an absolute path.
  2246                              <1> ;If so, we don't do path substitution and just fail at this point
  2247 0000392A 488D35B6C9FFFF      <1>     lea rsi, cmdPathSpec
  2248 00003931 66AD                <1>     lodsw   ;Get the first two chars
  2249 00003933 3A05F0C6FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2250 00003939 0F84AEE5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2251 0000393F 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2252 00003941 7412                <1>     je .pathGetEnv
  2253 00003943 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2254 00003946 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2255 00003948 AC                  <1>     lodsb   ;Get the third char
  2256 00003949 3A05DAC6FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2257 0000394F 0F8498E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2258                              <1> .pathGetEnv:
  2259                              <1> ;Now get a pointer to the environment and search for PATH=
  2260                              <1> ;We only take the final portion of the path and add it to each path componant
  2261                              <1> ;This agrees with DOS 3.3
  2262 00003955 E85C0C0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2263 0000395A 0F848DE5FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2264                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2265                              <1>     ;Now we know we dont have to keep track of chars!!
  2266 00003960 488D3D74D5FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2267 00003967 E8A40C0000          <1>     call searchForEnvVar
  2268 0000396C 0F827BE5FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2269 00003972 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2270 00003975 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2271                              <1> .pathRejoin:
  2272 0000397C 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2273 0000397F 0F8468E5FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2274 00003985 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2275 00003988 488D3D01CBFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2276                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2277                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2278                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2279                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2280 0000398F E8D7090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2281 00003994 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2282 00003997 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2283 0000399A 48FFCF              <1>     dec rdi ;Point to the null terminator
  2284 0000399D 8A0586C6FFFF        <1>     mov al, byte [pathSep]
  2285 000039A3 3847FF              <1>     cmp byte [rdi - 1], al
  2286 000039A6 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2287 000039A8 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2288                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2289 000039A9 488D3557C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2290 000039B0 E876090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2291 000039B5 488D35D4CAFFFF      <1>     lea rsi, searchSpec 
  2292 000039BC 488D3D24C9FFFF      <1>     lea rdi, cmdPathSpec
  2293 000039C3 E84A080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2294 000039C8 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2295                              <1> .pathReentry:
  2296 000039CD 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2297 000039D1 0F8416E5FFFF        <1>     je badCmdError
  2298                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2299                              <1> ;Not really a big deal...
  2300                              <1>     ;cmp al, errBadDrv
  2301                              <1>     ;jne .pathDrvOk
  2302                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2303                              <1>     ;mov eax, 0900h
  2304                              <1>     ;int 21h
  2305                              <1> ;.pathDrvOk:
  2306 000039D7 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2307 000039DA 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2308 000039DD EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2309                              <1> 
  2310                              <1> .prepAndSearch:
  2311                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2312                              <1> ;cmdPathSpec and null terminates. 
  2313                              <1> ;Input: cmdFcb name + ext setup. 
  2314                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2315                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2316 000039DF 51                  <1>     push rcx
  2317 000039E0 56                  <1>     push rsi
  2318 000039E1 57                  <1>     push rdi
  2319 000039E2 488D3DFEC8FFFF      <1>     lea rdi, cmdPathSpec 
  2320 000039E9 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2321 000039EC E816090000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2322 000039F1 807F013A            <1>     cmp byte [rdi + 1], ":"
  2323 000039F5 7507                <1>     jne .notdriveRel
  2324 000039F7 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2325                              <1> .notdriveRel:
  2326 000039FE 488D3502C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2327 00003A05 E821090000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2328 00003A0A B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2329 00003A0F 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2330 00003A11 CD21                <1>     int 21h
  2331 00003A13 5F                  <1>     pop rdi
  2332 00003A14 5E                  <1>     pop rsi
  2333 00003A15 59                  <1>     pop rcx
  2334                              <1>     return
    13                              <2> %%_ret:
    14 00003A16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2335                              <1> 
  2336                              <1> set:
  2337 00003A17 F60586C6FFFFFF      <1>     test byte [arg1Flg], -1
  2338 00003A1E 7539                <1>     jnz .editEnv
  2339                              <1>     ;Here we just print the environment.
  2340 00003A20 E8910B0000          <1>     call checkEnvGoodAndGet 
  2341 00003A25 0F846EE4FFFF        <1>     jz badEnvSpaceError
  2342                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2343 00003A2B 4889F7              <1>     mov rdi, rsi
  2344 00003A2E 4889F2              <1>     mov rdx, rsi
  2345                              <1> .findLp:
  2346 00003A31 B9FFFFFFFF          <1>     mov ecx, -1
  2347 00003A36 31C0                <1>     xor eax, eax
  2348                              <1> .scanLp:
  2349 00003A38 F2AE                <1>     repne scasb
  2350 00003A3A 75FC                <1>     jne .scanLp
  2351 00003A3C F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2352                              <1>     ;Else, we now print this environment variable and CRLF it
  2353                              <1>     ;rdx points to the start of the string aleady
  2354                              <1>     ;ecx has the bytes to print
  2355 00003A3E BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2356 00003A43 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2357 00003A48 CD21                <1>     int 21h
  2358 00003A4A E8AF050000          <1>     call printCRLF
  2359 00003A4F 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2360                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A52 74(16)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2361 00003A54 4889FA              <1>     mov rdx, rdi   
  2362 00003A57 EBD8                <1>     jmp short .findLp
  2363                              <1> .editEnv:
  2364 00003A59 E8580B0000          <1>     call checkEnvGoodAndGet
  2365 00003A5E 0F8435E4FFFF        <1>     jz badEnvSpaceError
  2366 00003A64 0FB6053AC6FFFF      <1>     movzx eax, byte [arg1Off]
  2367 00003A6B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2368 00003A72 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2369                              <1> .altEp:
  2370 00003A75 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2371 00003A78 B00D                <1>     mov al, CR              ;Search for the CR
  2372 00003A7A 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2373 00003A82 89CB                <1>     mov ebx, ecx            ;Save this count 
  2374 00003A84 53                  <1>     push rbx                ;Save this count on the stack too!
  2375 00003A85 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2376 00003A87 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2377 00003A89 66891D02CDFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2378 00003A90 59                  <1>     pop rcx                 ;Get the char count back!
  2379 00003A91 89CB                <1>     mov ebx, ecx            
  2380 00003A93 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2381 00003A96 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2382 00003A98 F2AE                <1>     repne scasb
  2383 00003A9A 0F85F0E3FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2384 00003AA0 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2385 00003AA2 66891DEBCCFFFF      <1>     mov word [envVarNamSz], bx
  2386 00003AA9 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2387 00003AAC 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2388 00003AAE 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2389 00003AAF 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2390 00003AB2 E8590B0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2391 00003AB7 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2392 00003AB9 E8800B0000          <1>     call envFree            ;Free the var in rsi
  2393                              <1> .editNewEnv:
  2394 00003ABE E8B40B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2395 00003AC3 E8D40B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2396 00003AC8 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2397 00003AC9 31C0                <1>     xor eax, eax            ;Prepare null length!
  2398 00003ACB 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2399 00003AD1 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2400 00003AD4 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2401 00003AD6 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2402 00003AD8 663B0DB3CCFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2403 00003ADF 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2404                              <1> .reallocTry:
  2405                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2406                              <1>     ; we proceed with the environment size.
  2407 00003AE1 E8CB0B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2408 00003AE6 7319                <1>     jnc .reallocOk
  2409 00003AE8 0F84ABE3FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2410                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2411                              <1>     ; partially the variable into the env. If so we do that. If the name
  2412                              <1>     ; cannot fit, we don't bother
  2413                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2414 00003AEE 663B0D9FCCFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2415                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003AF5 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003AF7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2416 00003AF8 E89CE3FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2417 00003AFD FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2418 00003AFF EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2419                              <1> .reallocOk:
  2420                              <1>     ;Here we have all the space to just copy the full path
  2421 00003B01 0FB70D8ACCFFFF      <1>     movzx ecx, word [envVarSz]
  2422                              <1> .nameCp:
  2423                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2424                              <1> ;Always enough memory for name= here
  2425 00003B08 AC                  <1>     lodsb
  2426 00003B09 E827070000          <1>     call ucChar
  2427 00003B0E AA                  <1>     stosb
  2428 00003B0F 66FFC9              <1>     dec cx      ;Always decrement this count
  2429 00003B12 3C3D                <1>     cmp al, "="
  2430 00003B14 75F2                <1>     jne .nameCp
  2431                              <1> .exitNameCp:
  2432 00003B16 AC                  <1>     lodsb
  2433 00003B17 3C0D                <1>     cmp al, CR
  2434 00003B19 7405                <1>     je .exitCp
  2435 00003B1B AA                  <1>     stosb
  2436 00003B1C FFC9                <1>     dec ecx
  2437 00003B1E 75F6                <1>     jnz .exitNameCp
  2438                              <1> .exitCp:
  2439 00003B20 31C0                <1>     xor eax, eax
  2440 00003B22 66AB                <1>     stosw   ;Store the final null word
  2441                              <1>     return
    13                              <2> %%_ret:
    14 00003B24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2442                              <1> .delEnvVar:
  2443                              <1>     ;rsi -> Start of the envvar name in user buffer
  2444 00003B25 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2445 00003B28 E8E30A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2446 00003B2D 7205                <1>     jc .delEnvVarSkip
  2447 00003B2F E80A0B0000          <1>     call envFree    ;Free the env var at rsi
  2448                              <1> .delEnvVarSkip:
  2449 00003B34 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2450                              <1>     return
    13                              <2> %%_ret:
    14 00003B35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2451                              <1> 
  2452                              <1> pathEdit:
  2453                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2454                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2455                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2456                              <1> ; end there. Error with too many arguments error!
  2457                              <1> ;If after the equals sign there is nothing, we just print the path!
  2458                              <1> ;Gotta process the command line ourselves first
  2459 00003B36 E87B0A0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2460 00003B3B 0F8458E3FFFF        <1>     jz badEnvSpaceError
  2461                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2462 00003B41 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2463 00003B48 E8AD000000          <1>     call .skipPathDelimiters
  2464 00003B4D 3C0D                <1>     cmp al, CR
  2465 00003B4F 7466                <1>     je .printPath
  2466                              <1> ;Else use the set command to setup the path in the searchSpec.
  2467 00003B51 56                  <1>     push rsi    ;Save the first char of the command line string
  2468 00003B52 488D3582D3FFFF      <1>     lea rsi, pathEVar
  2469 00003B59 488D3D30C9FFFF      <1>     lea rdi, searchSpec
  2470 00003B60 E8AD060000          <1>     call strcpy
  2471 00003B65 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2472 00003B68 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2473 00003B69 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2474                              <1> .cpLp:
  2475 00003B6B AC                  <1>     lodsb
  2476 00003B6C 3C0D                <1>     cmp al, CR
  2477 00003B6E 7411                <1>     je .cpLpExit
  2478 00003B70 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2479 00003B75 740A                <1>     je .cpLpExit
  2480 00003B77 E8B9060000          <1>     call ucChar ;Uppercase the char
  2481 00003B7C AA                  <1>     stosb       ;Store it
  2482 00003B7D FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2483 00003B7F EBEA                <1>     jmp short .cpLp
  2484                              <1> .cpLpExit:
  2485                              <1>     ;Remove trailing semicolons
  2486 00003B81 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2487 00003B85 7507                <1>     jne .cpLpNoIntervene
  2488 00003B87 FFC9                <1>     dec ecx     ;Reduce the count by one
  2489 00003B89 48FFCF              <1>     dec rdi     ;Go back a char
  2490 00003B8C EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2491                              <1> .cpLpNoIntervene:
  2492 00003B8E B00D                <1>     mov al, CR  ;Now we store the terminator!
  2493 00003B90 AA                  <1>     stosb       ;Store it!
  2494 00003B91 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2495 00003B97 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2496 00003B9E FFC1                <1>     inc ecx     ;Add the CR for copying over
  2497 00003BA0 488D35E9C8FFFF      <1>     lea rsi, searchSpec
  2498 00003BA7 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2499 00003BAE 57                  <1>     push rdi
  2500 00003BAF F3A4                <1>     rep movsb
  2501 00003BB1 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2502 00003BB2 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2503                              <1> .printPath:
  2504 00003BB7 488D3D1DD3FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2505 00003BBE E84D0A0000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2506 00003BC3 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2507 00003BC5 4889F7              <1>     mov rdi, rsi        
  2508 00003BC8 E85E060000          <1>     call strlen         ;Get the length of the path in rdi
  2509 00003BCD 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2510 00003BD3 7411                <1>     je .noPathPrnt      ;Print no path!
  2511 00003BD5 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2512 00003BD7 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2513 00003BDA BB01000000          <1>     mov ebx, 1          ;STDOUT
  2514 00003BDF B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2515 00003BE4 EB0C                <1>     jmp short .pathExit
  2516                              <1> .noPathPrnt:
  2517 00003BE6 488D15DACFFFFF      <1>     lea rdx, noPath
  2518 00003BED B800090000          <1>     mov eax, 0900h
  2519                              <1> .pathExit:
  2520 00003BF2 CD21                <1>     int 21h
  2521 00003BF4 E805040000          <1>     call printCRLF      ;Print a crlf at the end
  2522                              <1>     return
    13                              <2> %%_ret:
    14 00003BF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2523                              <1> .skipPathDelimiters:
  2524                              <1> ;Input: rsi -> Start of string to parse
  2525                              <1> ;Output: rsi -> First non-delimiter char of string
  2526                              <1> ;        al = First non delim char
  2527 00003BFA AC                  <1>     lodsb
  2528 00003BFB E806000000          <1>     call .isALPathDelimiter
  2529 00003C00 74F8                <1>     je .skipPathDelimiters
  2530 00003C02 48FFCE              <1>     dec rsi
  2531                              <1>     return
    13                              <2> %%_ret:
    14 00003C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2532                              <1> .isALPathDelimiter:
  2533                              <1> ;Same as before without semicolon
  2534 00003C06 3C20                <1>     cmp al, SPC
  2535                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C08 74(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2536 00003C0A 3C09                <1>     cmp al, TAB
  2537                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C0C 74(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2538 00003C0E 3C2C                <1>     cmp al, ","
  2539                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C10 74(05)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2540 00003C12 3C3D                <1>     cmp al, "="
  2541                              <1>     return
    13                              <2> %%_ret:
    14 00003C14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2542                              <1> 
  2543                              <1> prompt:
  2544 00003C15 E89C090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2545 00003C1A 0F8479E2FFFF        <1>     jz badEnvSpaceError
  2546                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2547 00003C20 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2548 00003C27 E824060000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2549 00003C2C 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2550 00003C2F 742C                <1>     je .reset   ;Reset if so
  2551 00003C31 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2552 00003C32 488D3578D2FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2553 00003C39 488D3D50C8FFFF      <1>     lea rdi, searchSpec
  2554 00003C40 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2555 00003C45 F3A4                <1>     rep movsb
  2556 00003C47 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2557 00003C48 31C9                <1>     xor ecx, ecx    ;Get char count
  2558                              <1> .cp:    ;Now copy the user string over
  2559 00003C4A AC                  <1>     lodsb
  2560 00003C4B AA                  <1>     stosb 
  2561 00003C4C 3C0D                <1>     cmp al, CR
  2562 00003C4E 7404                <1>     je .cpOk
  2563 00003C50 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2564 00003C52 EBF6                <1>     jmp short .cp
  2565                              <1> .cpOk:
  2566 00003C54 488D3535C8FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2567 00003C5B EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2568                              <1> .reset:
  2569                              <1> ;Delete the environment variable!
  2570 00003C5D 488D354DD2FFFF      <1>     lea rsi, promptEVar 
  2571 00003C64 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2572                              <1> .goSet:
  2573 00003C66 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2574 00003C6C 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2575 00003C73 FFC1                <1>     inc ecx     ;Include CR in copy
  2576 00003C75 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2577 00003C7C 57                  <1>     push rdi
  2578 00003C7D F3A4                <1>     rep movsb
  2579 00003C7F 5E                  <1>     pop rsi
  2580 00003C80 E9F0FDFFFF          <1>     jmp set.altEp
  2581                              <1> 
  2582                              <1> echo:
  2583 00003C85 F60518C4FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2584 00003C8C 752A                <1>     jnz .argGiven
  2585 00003C8E 488D1523D0FFFF      <1>     lea rdx, echoIs
  2586 00003C95 E86B030000          <1>     call printString
  2587 00003C9A 488D15FDCFFFFF      <1>     lea rdx, onMes
  2588 00003CA1 488D0DF0CFFFFF      <1>     lea rcx, offMes
  2589 00003CA8 F605E7C3FFFFFF      <1>     test byte [echoFlg], -1
  2590 00003CAF 480F44D1            <1>     cmovz rdx, rcx
  2591 00003CB3 E94D030000          <1>     jmp printString
  2592                              <1> .argGiven:
  2593 00003CB8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2594 00003CBF 0FB605DFC3FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2595 00003CC6 4801C6              <1>     add rsi, rax
  2596 00003CC9 AC                  <1>     lodsb   ;Get this char
  2597 00003CCA 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2598 00003CCD E863050000          <1>     call ucChar
  2599 00003CD2 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2600 00003CD4 755A                <1>     jne .directEcho
  2601 00003CD6 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2602 00003CD9 E857050000          <1>     call ucChar
  2603 00003CDE 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2604 00003CE0 751B                <1>     jne .checkOff
  2605 00003CE2 56                  <1>     push rsi
  2606 00003CE3 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2607 00003CEA E861050000          <1>     call skipDelimiters
  2608 00003CEF 803E0D              <1>     cmp byte [rsi], CR
  2609 00003CF2 5E                  <1>     pop rsi
  2610 00003CF3 753B                <1>     jne .directEcho ;If its not, just echo the string
  2611 00003CF5 C6059AC3FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2612                              <1>     return
    13                              <2> %%_ret:
    14 00003CFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2613                              <1> .checkOff:
  2614 00003CFD 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2615 00003D00 E830050000          <1>     call ucChar
  2616 00003D05 3C46                <1>     cmp al, "F" ;Is it an F?
  2617 00003D07 7527                <1>     jne .directEcho ;No, just direct echo
  2618 00003D09 8A4602              <1>     mov al, byte [rsi + 2]
  2619 00003D0C E824050000          <1>     call ucChar
  2620 00003D11 3C46                <1>     cmp al, "F"
  2621 00003D13 751B                <1>     jne .directEcho
  2622 00003D15 56                  <1>     push rsi
  2623 00003D16 4881C603000000      <1>     add rsi, 3
  2624 00003D1D E82E050000          <1>     call skipDelimiters
  2625 00003D22 803E0D              <1>     cmp byte [rsi], CR
  2626 00003D25 5E                  <1>     pop rsi
  2627 00003D26 7508                <1>     jne .directEcho
  2628 00003D28 C60567C3FFFF00      <1>     mov byte [echoFlg], 0
  2629                              <1>     return
    13                              <2> %%_ret:
    14 00003D2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2630                              <1> .directEcho: 
  2631 00003D30 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2632 00003D37 4889F3              <1>     mov rbx, rsi    
  2633 00003D3A 4829D3              <1>     sub rbx, rdx
  2634 00003D3D 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2635 00003D45 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2636 00003D47 0F82A7020000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2637 00003D4D 4889F2              <1>     mov rdx, rsi
  2638 00003D50 BB01000000          <1>     mov ebx, 1
  2639 00003D55 B800400000          <1>     mov eax, 4000h
  2640 00003D5A CD21                <1>     int 21h
  2641 00003D5C E99D020000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2642                              <1> 
  2643                              <1> 
  2644                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2645                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2646                              <1> ; with just... the actual command tail being echoed with the command -_-
  2647 00003D61 F6052EC3FFFFFF      <1>     test byte [echoFlg], -1
  2648 00003D68 7528                <1>     jnz .echoTail
  2649                              <1> ;Since we havent echoed the command out, type the tail out manually
  2650 00003D6A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2651 00003D71 E8DA040000          <1>     call skipDelimiters ;Skip leading delims
  2652 00003D76 4889F2              <1>     mov rdx, rsi
  2653 00003D79 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2654 00003D81 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2655 00003D86 B800400000          <1>     mov eax, 4000h  ;Write
  2656 00003D8B CD21                <1>     int 21h
  2657 00003D8D E86C020000          <1>     call printCRLF
  2658                              <1> .echoTail:
  2659 00003D92 488D1596CCFFFF      <1>     lea rdx, pauseMes
  2660 00003D99 E867020000          <1>     call printString
  2661 00003D9E B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2662 00003DA3 CD21                <1>     int 21h
  2663 00003DA5 E854020000          <1>     call printCRLF
  2664                              <1> remark:
  2665                              <1>     return
    13                              <2> %%_ret:
    14 00003DAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003DAB 53                  <1>     push rbx
    11 00003DAC 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003DAE 803D76C2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003DB5 7240                <1>     jb .usDate
    14 00003DB7 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003DB9 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003DBE E8B0000000          <1>     call .printFirst
    18 00003DC3 8A156DC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003DC9 B402                <1>     mov ah, 02h
    20 00003DCB CD21                <1>     int 21h
    21                              <1> 
    22 00003DCD 89C8                <1>     mov eax, ecx
    23 00003DCF 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003DD4 C1E805              <1>     shr eax, 5
    25 00003DD7 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003DDC 8A1554C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003DE2 B402                <1>     mov ah, 02h
    29 00003DE4 CD21                <1>     int 21h
    30                              <1> 
    31 00003DE6 89C8                <1>     mov eax, ecx
    32 00003DE8 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003DED C1E809              <1>     shr eax, 9
    34 00003DF0 5B                  <1>     pop rbx ;Get the year signature back
    35 00003DF1 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003DF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003DF7 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003DFC C1E805              <1>     shr eax, 5
    41 00003DFF E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003E04 8A152CC2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003E0A B402                <1>     mov ah, 02h
    45 00003E0C CD21                <1>     int 21h
    46                              <1> 
    47 00003E0E 89C8                <1>     mov eax, ecx
    48 00003E10 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003E15 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003E1A 8A1516C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003E20 B402                <1>     mov ah, 02h
    53 00003E22 CD21                <1>     int 21h
    54                              <1> 
    55 00003E24 89C8                <1>     mov eax, ecx
    56 00003E26 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003E2B C1E809              <1>     shr eax, 9
    58 00003E2E 5B                  <1>     pop rbx ;Get the year signature back
    59 00003E2F E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003E34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003E35 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003E3A C1E809              <1>     shr eax, 9
    65 00003E3D 5B                  <1>     pop rbx ;Get the year signature back
    66 00003E3E E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003E43 8A15EDC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003E49 B402                <1>     mov ah, 02h
    70 00003E4B CD21                <1>     int 21h
    71                              <1> 
    72 00003E4D 89C8                <1>     mov eax, ecx
    73 00003E4F 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003E54 C1E805              <1>     shr eax, 5
    75 00003E57 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003E5C 8A15D4C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003E62 B402                <1>     mov ah, 02h
    79 00003E64 CD21                <1>     int 21h
    80                              <1> 
    81 00003E66 89C8                <1>     mov eax, ecx
    82 00003E68 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003E6D E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003E72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003E73 51                  <1>     push rcx
    89 00003E74 E85D060000          <1>     call getDecimalWord
    90 00003E79 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003E7B 7504                <1>     jnz .skipSpace
    92 00003E7D 88CD                <1>     mov ch, cl
    93 00003E7F B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003E81 88CA                <1>     mov dl, cl
    96 00003E83 B402                <1>     mov ah, 02h
    97 00003E85 CD21                <1>     int 21h
    98 00003E87 88EA                <1>     mov dl, ch
    99 00003E89 B402                <1>     mov ah, 02h
   100 00003E8B CD21                <1>     int 21h
   101 00003E8D 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003E8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003E8F 51                  <1>     push rcx
   105 00003E90 E841060000          <1>     call getDecimalWord
   106 00003E95 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003E97 75E8                <1>     jnz .skipSpace
   108 00003E99 88CD                <1>     mov ch, cl
   109 00003E9B B130                <1>     mov cl, "0"
   110 00003E9D EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003E9F 05BC070000          <1>     add eax, 1980
   113 00003EA4 51                  <1>     push rcx
   114 00003EA5 53                  <1>     push rbx
   115 00003EA6 E82B060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003EAB 5B                  <1>     pop rbx
   117 00003EAC 84DB                <1>     test bl, bl
   118 00003EAE 740C                <1>     jz .twoDigitYear
   119 00003EB0 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003EB2 B402                <1>     mov ah, 02h
   121 00003EB4 CD21                <1>     int 21h
   122 00003EB6 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003EB8 B402                <1>     mov ah, 02h
   124 00003EBA CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003EBC C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003EBF 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003EC1 B402                <1>     mov ah, 02h
   129 00003EC3 CD21                <1>     int 21h
   130 00003EC5 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003EC7 B402                <1>     mov ah, 02h
   132 00003EC9 CD21                <1>     int 21h
   133 00003ECB 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003ECC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003ECD 89C1                <1>     mov ecx, eax
   142 00003ECF 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003ED4 C1E80B              <1>     shr eax, 11
   144 00003ED7 803D5EC1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003EDE 750B                <1>     jne .ampm
   146 00003EE0 E85A000000          <1>     call .printHours
   147 00003EE5 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003EEB 3D0C000000          <1>     cmp eax, 12
   151 00003EF0 7713                <1>     ja .pm
   152 00003EF2 7416                <1>     je .pm2
   153 00003EF4 E846000000          <1>     call .printHours
   154 00003EF9 E81D000000          <1>     call .printMinutes
   155 00003EFE B261                <1>     mov dl, "a"
   156 00003F00 B402                <1>     mov ah, 02h
   157 00003F02 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003F04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003F05 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003F0A E830000000          <1>     call .printHours
   163 00003F0F E807000000          <1>     call .printMinutes
   164 00003F14 B270                <1>     mov dl, "p"
   165 00003F16 B402                <1>     mov ah, 02h
   166 00003F18 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003F1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003F1B 8A1517C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003F21 B402                <1>     mov ah, 02h
   171 00003F23 CD21                <1>     int 21h
   172                              <1> 
   173 00003F25 89C8                <1>     mov eax, ecx
   174 00003F27 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003F2C C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003F2F 51                  <1>     push rcx
   178 00003F30 E8A1050000          <1>     call getDecimalWord
   179 00003F35 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003F37 7514                <1>     jnz .skipSpace
   181 00003F39 88CD                <1>     mov ch, cl
   182 00003F3B B130                <1>     mov cl, "0"
   183 00003F3D EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003F3F 51                  <1>     push rcx
   186 00003F40 E891050000          <1>     call getDecimalWord
   187 00003F45 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003F47 7504                <1>     jnz .skipSpace
   189 00003F49 88CD                <1>     mov ch, cl
   190 00003F4B B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003F4D 88CA                <1>     mov dl, cl
   193 00003F4F B402                <1>     mov ah, 02h
   194 00003F51 CD21                <1>     int 21h
   195 00003F53 88EA                <1>     mov dl, ch
   196 00003F55 B402                <1>     mov ah, 02h
   197 00003F57 CD21                <1>     int 21h
   198 00003F59 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003F5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003F5B F60534C1FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F62 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003F64 488D3D46CFFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003F6B E8A0060000          <1>     call searchForEnvVar
   206 00003F70 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003F72 E803010000          <1>     call putCWDInPrompt
   209 00003F77 E8CF000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003F7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003F7D 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003F84 AC                  <1>     lodsb   ;Get the char
   216 00003F85 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003F87 74(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003F89 3C24                <1>     cmp al, "$"
   219 00003F8B 7409                <1>     je .escapeChar
   220 00003F8D 88C2                <1>     mov dl, al
   221 00003F8F E8E1000000          <1>     call outChar    ;Prints the char in dl
   222 00003F94 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003F96 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003F97 E899020000          <1>     call ucChar ;Uppercase this char in al
   226 00003F9C 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003FA3 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003FA8 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003FAA 740D                <1>     je .escapeFnd
   231 00003FAC 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003FB3 FFC9                <1>     dec ecx
   233 00003FB5 75F1                <1>     jnz .escapeLp
   234 00003FB7 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003FB9 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00003FC0 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003FC4 4801D8              <1>     add rax, rbx                ;Add these
   239 00003FC7 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003FC8 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003FCA 5E                  <1>     pop rsi
   242 00003FCB EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00003FCD 42                  <1>     db "B", 
   247 00003FCE 7A00                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00003FD0 44                  <1>     db "D", 
   249 00003FD1 7901                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003FD3 45                  <1>     db "E", 
   251 00003FD4 6E00                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003FD6 47                  <1>     db "G", 
   253 00003FD7 7E00                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003FD9 48                  <1>     db "H", 
   255 00003FDA 8600                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003FDC 4C                  <1>     db "L", 
   257 00003FDD 8200                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00003FDF 4E                  <1>     db "N", 
   259 00003FE0 9F00                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003FE2 50                  <1>     db "P", 
   261 00003FE3 AD00                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003FE5 51                  <1>     db "Q", 
   263 00003FE6 7600                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003FE8 54                  <1>     db "T", 
   265 00003FE9 1001                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00003FEB 56                  <1>     db "V", 
   267 00003FEC 4000                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00003FEE 5F                  <1>     db "_", 
   269 00003FEF 3100                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003FF1 24                  <1>     db "$", 
   271 00003FF2 7200                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLFecho:
   275 00003FF4 F6059BC0FFFFFF      <1>     test byte [echoFlg], -1
   276                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003FFB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003FFD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> printCRLF:
   278 00003FFE 488D1565C8FFFF      <1>     lea rdx, crlf
   279                              <1> printString:
   280 00004005 B800090000          <1>     mov eax, 0900h  ;Print string
   281 0000400A CD21                <1>     int 21h
   282                              <1>     return
    13                              <2> %%_ret:
    14 0000400C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> putVersionInPrompt:
   285 0000400D 488D1504CBFFFF      <1>     lea rdx, dosVer
   286 00004014 B409                <1>     mov ah, 09h ;Print String
   287 00004016 CD21                <1>     int 21h
   288 00004018 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   289 0000401A CD21                <1>     int 21h
   290 0000401C 50                  <1>     push rax    ;Save minor version
   291 0000401D E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   292 00004022 E8AE010000          <1>     call printPackedBCD ;Print al
   293 00004027 B22E                <1>     mov dl, "."
   294 00004029 B402                <1>     mov ah, 02h
   295 0000402B CD21                <1>     int 21h
   296 0000402D 58                  <1>     pop rax
   297 0000402E 88E0                <1>     mov al, ah  ;Get the minor version low
   298 00004030 E883010000          <1>     call hexToBCD
   299 00004035 E89B010000          <1>     call printPackedBCD
   300                              <1>     return
    13                              <2> %%_ret:
    14 0000403A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> putEscInPrompt:
   302 0000403B B21B                <1>     mov dl, ESC
   303 0000403D EB36                <1>     jmp short outChar
   304                              <1> 
   305                              <1> putMoneyInPrompt:
   306 0000403F B224                <1>     mov dl, "$"
   307 00004041 EB32                <1>     jmp short outChar
   308                              <1> 
   309                              <1> putEquInPrompt:
   310 00004043 B23D                <1>     mov dl, "="
   311 00004045 EB2E                <1>     jmp short outChar
   312                              <1> 
   313                              <1> putPipeInPrompt:
   314 00004047 B27C                <1>     mov dl, "|"
   315 00004049 EB2A                <1>     jmp short outChar
   316                              <1> 
   317                              <1> putGTinPrompt:
   318 0000404B B23E                <1>     mov dl, ">"
   319 0000404D EB26                <1>     jmp short outChar
   320                              <1> 
   321                              <1> putLTinPrompt:
   322 0000404F B23C                <1>     mov dl, "<"
   323 00004051 EB22                <1>     jmp short outChar
   324                              <1> 
   325                              <1> putBSPinPrompt:
   326 00004053 488D15B9CCFFFF      <1>     lea rdx, backSpace
   327 0000405A B903000000          <1>     mov ecx, 3
   328 0000405F BB01000000          <1>     mov ebx, 1
   329 00004064 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   330 00004069 CD21                <1>     int 21h
   331                              <1>     return
    13                              <2> %%_ret:
    14 0000406B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> putDriveInPrompt:
   334 0000406C E89C010000          <1>     call getCurrentDrive
   335 00004071 0441                <1>     add al, "A" ;Convert to letter
   336 00004073 88C2                <1>     mov dl, al
   337                              <1> outChar:
   338 00004075 B402                <1>     mov ah, 02h ;Echo to STDOUT
   339 00004077 CD21                <1>     int 21h
   340                              <1>     return
    13                              <2> %%_ret:
    14 00004079 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> putCWDInPrompt:
   342 0000407A E88E010000          <1>     call getCurrentDrive
   343 0000407F 380510C0FFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   344 00004085 C60509C0FFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   345 0000408C 7443                <1>     je .badDrive 
   346 0000408E 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   347 00004090 FEC2                <1>     inc dl
   348 00004092 0441                <1>     add al, "A" ;Convert to letter
   349 00004094 B43A                <1>     mov ah, ":"
   350 00004096 488D3DB4BFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   351 0000409D 66AB                <1>     stosw   ;Store X:, rdi+=2
   352 0000409F 8A0584BFFFFF        <1>     mov al, byte [pathSep]
   353 000040A5 AA                  <1>     stosb   ;Store pathSep, inc rdi
   354 000040A6 B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   355 000040AB 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   356 000040AE CD21                <1>     int 21h
   357 000040B0 721F                <1>     jc .badDrive
   358 000040B2 E874010000          <1>     call strlen
   359 000040B7 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   360                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   361 000040BD B800400000          <1>     mov eax, 4000h ;Write to handle
   362 000040C2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 000040C7 488D1583BFFFFF      <1>     lea rdx, currDirStr
   364 000040CE CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 000040D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .badDrive:
   367                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   368 000040D1 488D1508CBFFFF      <1>     lea rdx, badDrvMsg
   369 000040D8 E928FFFFFF          <1>     jmp printString
   370                              <1> printFmtTime:
   371                              <1> ;Outputs the formatted time
   372 000040DD E847000000          <1>     call getTime
   373 000040E2 0FB6C5              <1>     movzx eax, ch
   374 000040E5 E855FEFFFF          <1>     call printTime.printHours
   375 000040EA 8A1548BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   376 000040F0 B402                <1>     mov ah, 02h
   377 000040F2 CD21                <1>     int 21h
   378 000040F4 0FB6055EC5FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   379 000040FB E82FFEFFFF          <1>     call printTime.printMinutesAlt
   380 00004100 8A1532BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   381 00004106 B402                <1>     mov ah, 02h
   382 00004108 CD21                <1>     int 21h
   383 0000410A 0FB6054BC5FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   384 00004111 E819FEFFFF          <1>     call printTime.printMinutesAlt
   385 00004116 B22E                <1>     mov dl, "."
   386 00004118 B402                <1>     mov ah, 02h
   387 0000411A CD21                <1>     int 21h
   388 0000411C 0FB60538C5FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   389 00004123 E807FEFFFF          <1>     call printTime.printMinutesAlt
   390                              <1>     return
    13                              <2> %%_ret:
    14 00004128 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> getTime:
   392 00004129 B42C                <1>     mov ah, 2Ch ;DOS get time
   393 0000412B CD21                <1>     int 21h
   394                              <1>     ;CH = hour (0-23)
   395                              <1> 	;CL = minutes (0-59)
   396                              <1> 	;DH = seconds (0-59)
   397                              <1> 	;DL = hundredths (0-99)
   398 0000412D 880D26C5FFFF        <1>     mov byte [td1], cl
   399 00004133 882D21C5FFFF        <1>     mov byte [td2], ch
   400 00004139 88151CC5FFFF        <1>     mov byte [td3], dl
   401 0000413F 883517C5FFFF        <1>     mov byte [td4], dh
   402                              <1>     return
    13                              <2> %%_ret:
    14 00004145 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> printFmtDate:
   405                              <1> ;Outputs the formatted date
   406 00004146 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   407 0000414B CD21                <1>     int 21h
   408                              <1> 	;AL = day of the week (0=Sunday)
   409                              <1> 	;CX = year (1980-2099)
   410                              <1> 	;DH = month (1-12)
   411                              <1> 	;DL = day (1-31)
   412 0000414D 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   413 00004152 66890D00C5FFFF      <1>     mov word [td1], cx
   414 00004159 8815FCC4FFFF        <1>     mov byte [td3], dl
   415 0000415F 8835F7C4FFFF        <1>     mov byte [td4], dh
   416 00004165 0FB6C0              <1>     movzx eax, al
   417 00004168 89C3                <1>     mov ebx, eax
   418 0000416A D1E3                <1>     shl ebx, 1   ;Multiply by 2
   419 0000416C 01D8                <1>     add eax, ebx ;Make it 3 times 
   420 0000416E 488D15EDC8FFFF      <1>     lea rdx, dayName
   421 00004175 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   422 00004179 B903000000          <1>     mov ecx, 3  ;Print three chars
   423 0000417E BB01000000          <1>     mov ebx, 1  ;STDOUT
   424 00004183 B440                <1>     mov ah, 40h ;Write to handle
   425 00004185 CD21                <1>     int 21h
   426 00004187 B220                <1>     mov dl, " "
   427 00004189 E8E7FEFFFF          <1>     call outChar
   428                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   429                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   430                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   431 0000418E 0FB705C4C4FFFF      <1>     movzx eax, word [td1]   ;Get this word
   432 00004195 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   433 00004198 0FB61DBDC4FFFF      <1>     movzx ebx, byte [td4]
   434 0000419F C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   435 000041A2 09D8                <1>     or eax, ebx ;Add this date to eax
   436 000041A4 0FB61DB0C4FFFF      <1>     movzx ebx, byte [td3]
   437 000041AB 09D8                <1>     or eax, ebx
   438 000041AD BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   439 000041B2 E8F4FBFFFF          <1>     call printDate
   440                              <1>     return
    13                              <2> %%_ret:
    14 000041B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> 
   443                              <1> hexToBCD:
   444                              <1> ;Converts a Hex byte into two BCD digits
   445                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   446 000041B8 51                  <1>     push rcx
   447 000041B9 0FB6C0              <1>     movzx eax, al   ;Zero extend
   448 000041BC 31C9                <1>     xor ecx, ecx
   449                              <1> .htb0:
   450 000041BE 3D0A000000          <1>     cmp eax, 10
   451 000041C3 7209                <1>     jb .htb1
   452 000041C5 2D0A000000          <1>     sub eax, 10
   453 000041CA FFC1                <1>     inc ecx
   454 000041CC EBF0                <1>     jmp short .htb0
   455                              <1> .htb1:
   456 000041CE C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   457 000041D1 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   458 000041D3 59                  <1>     pop rcx
   459 000041D4 C3                  <1>     ret
   460                              <1> 
   461                              <1> printPackedBCD:
   462                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   463                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   464                              <1> ;Preserves all registers
   465 000041D5 50                  <1>     push rax
   466 000041D6 52                  <1>     push rdx
   467 000041D7 88C4                <1>     mov ah, al
   468 000041D9 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   469 000041DB 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   470 000041DE 7508                <1>     jnz .upperNybble
   471 000041E0 B220                <1>     mov dl, " "
   472 000041E2 B402                <1>     mov ah, 02h
   473 000041E4 CD21                <1>     int 21h
   474 000041E6 EB0E                <1>     jmp short .lowerNybble
   475                              <1> .upperNybble:
   476 000041E8 50                  <1>     push rax
   477 000041E9 C0EC04              <1>     shr ah, 4
   478 000041EC 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   479 000041EF 88E2                <1>     mov dl, ah
   480 000041F1 B402                <1>     mov ah, 02h ;Print DL
   481 000041F3 CD21                <1>     int 21h
   482 000041F5 58                  <1>     pop rax
   483                              <1> .lowerNybble:
   484 000041F6 0430                <1>     add al, "0"
   485 000041F8 88C2                <1>     mov dl, al
   486 000041FA B402                <1>     mov ah, 02h ;Print DL
   487 000041FC CD21                <1>     int 21h
   488 000041FE 5A                  <1>     pop rdx
   489 000041FF 58                  <1>     pop rax
   490                              <1>     return
    13                              <2> %%_ret:
    14 00004200 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> setDrive:
   493                              <1> ;Input: dl = 0 based Drive number to set to
   494                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   495                              <1> ;AX trashed.
   496 00004201 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   497 00004203 CD21                <1>     int 21h 
   498 00004205 E803000000          <1>     call getCurrentDrive
   499 0000420A 38D0                <1>     cmp al, dl  ;Is this the same drive?
   500                              <1>     return
    13                              <2> %%_ret:
    14 0000420C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> getCurrentDrive:
   502                              <1> ;Returns the 0 based current drive in al
   503 0000420D B419                <1>     mov ah, 19h
   504 0000420F CD21                <1>     int 21h
   505                              <1>     return
    13                              <2> %%_ret:
    14 00004211 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> strcpy:
   508                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   509                              <1> ;rsi -> Source
   510                              <1> ;rdi -> Destination
   511 00004212 51                  <1>     push rcx
   512 00004213 57                  <1>     push rdi
   513 00004214 4889F7              <1>     mov rdi, rsi
   514 00004217 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   515 0000421C 5F                  <1>     pop rdi
   516 0000421D F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   517 0000421F 59                  <1>     pop rcx
   518                              <1>     return
    13                              <2> %%_ret:
    14 00004220 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> strcpy2:
   521                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   522                              <1> ;rsi -> Source
   523                              <1> ;rdi -> Destination
   524 00004221 56                  <1>     push rsi
   525 00004222 57                  <1>     push rdi
   526 00004223 E8EAFFFFFF          <1>     call strcpy 
   527 00004228 5F                  <1>     pop rdi
   528 00004229 5E                  <1>     pop rsi
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000422A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> strlen:
   532                              <1> ;Gets the length of a ASCIIZ string
   533                              <1> ;Input: rdi = Source buffer
   534                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   535 0000422B 50                  <1>     push rax
   536 0000422C B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   537 00004231 CD2F                <1>     int 2fh
   538 00004233 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 00004234 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> ucChar:
   542                              <1> ;Input: al = Char to uppercase
   543                              <1> ;Output: al = Adjusted char 
   544 00004235 53                  <1>     push rbx
   545 00004236 50                  <1>     push rax    ;Push the char twice on the stack
   546 00004237 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   547 0000423C CD2F                <1>     int 2fh         ;Returns the processed char in al
   548 0000423E 5B                  <1>     pop rbx         ;Pop the old word off the stack
   549 0000423F 5B                  <1>     pop rbx
   550                              <1>     return
    13                              <2> %%_ret:
    14 00004240 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> normalisePath:
   553                              <1> ;Uppercases chars and flips pathseps
   554                              <1> ;Input: rsi -> Path to normalise
   555 00004241 50                  <1>     push rax
   556 00004242 57                  <1>     push rdi
   557 00004243 4889F7              <1>     mov rdi, rsi
   558 00004246 B811120000          <1>     mov eax, 1211h
   559 0000424B CD2F                <1>     int 2fh
   560 0000424D 5F                  <1>     pop rdi
   561 0000424E 58                  <1>     pop rax
   562                              <1>     return
    13                              <2> %%_ret:
    14 0000424F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> skipDelimiters:
   565                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   566                              <1> ; command delimiters but a subset thereof. 
   567                              <1> ;These are the same across all codepages.
   568                              <1> ;Input: rsi must point to the start of the data string
   569                              <1> ;Output: rsi points to the first non-delimiter char
   570 00004250 50                  <1>     push rax
   571                              <1> .l1:
   572 00004251 AC                  <1>     lodsb
   573 00004252 E807000000          <1>     call isALdelimiter
   574 00004257 74F8                <1>     jz .l1
   575                              <1> .exit:
   576 00004259 58                  <1>     pop rax
   577 0000425A 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   578                              <1>     return
    13                              <2> %%_ret:
    14 0000425D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> isALdelimiter:
   581                              <1> ;Returns: ZF=NZ if al is not a command separator 
   582                              <1> ;         ZF=ZE if al is a command separator
   583 0000425E 3C20                <1>     cmp al, " "
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004260 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 00004262 3C3B                <1>     cmp al, ";"
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004264 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 00004266 3C3D                <1>     cmp al, "="
   588                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004268 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   589 0000426A 3C2C                <1>     cmp al, ","
   590                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000426C 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   591 0000426E 3C09                <1>     cmp al, TAB
   592                              <1>     return
    13                              <2> %%_ret:
    14 00004270 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> clearCommandState:
   595                              <1> ;Clears the command state
   596 00004271 488D3D2CBEFFFF      <1>     lea rdi, cmdStatePtr
   597 00004278 B907000000          <1>     mov ecx, cmdStateL
   598 0000427D 31C0                <1>     xor eax, eax
   599 0000427F F3AA                <1>     rep stosb
   600                              <1>     return
    13                              <2> %%_ret:
    14 00004281 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> clearCommandLineState:
   603                              <1> ;Clears the command line state after a 0Dh encountered
   604 00004282 488D3D10BEFFFF      <1>     lea rdi, cmdLineStatePtr
   605 00004289 B912000000          <1>     mov ecx, cmdLineStateL
   606 0000428E 31C0                <1>     xor eax, eax
   607 00004290 F3AA                <1>     rep stosb
   608 00004292 C705FEBDFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   608 0000429B FF                  <1>
   609 0000429C C705FABDFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   609 000042A5 FF                  <1>
   610                              <1> ;Close all handles from 5->MAX
   611 000042A6 0FB70D7ABDFFFF      <1>     movzx ecx, word [numHdls]
   612 000042AD BB05000000          <1>     mov ebx, 5
   613                              <1> .lp:
   614 000042B2 B43E                <1>     mov ah, 3Eh ;File close
   615 000042B4 CD21                <1>     int 21h
   616 000042B6 FFC3                <1>     inc ebx ;Goto next file
   617 000042B8 39CB                <1>     cmp ebx, ecx
   618 000042BA 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   619                              <1>     return
    13                              <2> %%_ret:
    14 000042BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> asciiFilenameToFCB:
   622                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   623                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   624                              <1> ;Also doesn't check if chars are valid
   625                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   626                              <1> ;Name is space padded.
   627                              <1> ;Input: rsi = ASCII string buffer
   628                              <1> ;       rdi = FCB name buffer
   629                              <1> ;Output: al = Char that terminated the source string 
   630 000042BD 53                  <1>     push rbx    
   631 000042BE 57                  <1>     push rdi
   632 000042BF B90B000000          <1>     mov ecx, 11
   633 000042C4 B020                <1>     mov al, " "
   634 000042C6 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   635 000042C8 5F                  <1>     pop rdi
   636 000042C9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   637                              <1>     ;Preprocess for Dir Searches
   638 000042CC 803E2E              <1>     cmp byte [rsi], "."
   639 000042CF 7509                <1>     jne .processName
   640 000042D1 A4                  <1>     movsb   ;Store the first dot
   641 000042D2 803E2E              <1>     cmp byte [rsi], "."
   642 000042D5 752C                <1>     jne .exitBadChar
   643 000042D7 A4                  <1>     movsb
   644 000042D8 EB29                <1>     jmp short .exitBadChar
   645                              <1> .processName:
   646 000042DA AC                  <1>     lodsb   ;Get the char in al
   647 000042DB 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   648 000042DD 7426                <1>     jz .exit
   649 000042DF 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   650 000042E1 7407                <1>     je .extSpace
   651 000042E3 3C2E                <1>     cmp al, "."
   652 000042E5 740C                <1>     je .ext
   653 000042E7 AA                  <1>     stosb   ;Store the char
   654 000042E8 EBF0                <1>     jmp short .processName
   655                              <1> .extSpace:
   656                              <1> ;Now we scan for a period in the name
   657 000042EA AC                  <1>     lodsb   ;Get a char and increase rsi
   658 000042EB 84C0                <1>     test al, al
   659 000042ED 7416                <1>     jz .exit
   660 000042EF 3C2E                <1>     cmp al, "."     ;If al is not a period...
   661 000042F1 75F7                <1>     jne .extSpace   ; keep searching
   662                              <1> .ext:
   663 000042F3 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   664                              <1> .processExt:
   665 000042F7 AC                  <1>     lodsb
   666 000042F8 84C0                <1>     test al, al
   667 000042FA 7409                <1>     jz .exit
   668 000042FC 3C20                <1>     cmp al, " "
   669 000042FE 7405                <1>     je .exit
   670 00004300 AA                  <1>     stosb
   671 00004301 EBF4                <1>     jmp short .processExt
   672                              <1> .exitBadChar:
   673 00004303 30C0                <1>     xor al, al  ;Return a null terminator
   674                              <1> .exit:
   675 00004305 5B                  <1>     pop rbx
   676                              <1>     return
    13                              <2> %%_ret:
    14 00004306 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> 
   678                              <1> findLastPathComponant:
   679                              <1> ;Finds the last path componant of an ASCIIZ path string
   680                              <1> ;Input: rdi -> Head of the path to find last componant on
   681                              <1> ;Output: rdi -> Start of the last componant
   682 00004307 50                  <1>     push rax
   683 00004308 51                  <1>     push rcx
   684 00004309 31C9                <1>     xor ecx, ecx
   685 0000430B FFC9                <1>     dec ecx
   686 0000430D 31C0                <1>     xor eax, eax
   687 0000430F F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   688 00004311 F7D1                <1>     not ecx     ;This gets the count of chars  
   689 00004313 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   690 00004316 8A050DBDFFFF        <1>     mov al, byte [pathSep]
   691 0000431C FD                  <1>     std
   692 0000431D F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   693 0000431F FC                  <1>     cld
   694 00004320 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   695 00004322 48FFC7              <1>     inc rdi     ;Point at pathsep
   696                              <1> .exit:
   697 00004325 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   698 00004328 59                  <1>     pop rcx
   699 00004329 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 0000432A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> FCBToAsciiz:
   703                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   704                              <1> ;Name is space padded too
   705                              <1> ;Input: rsi = FCB name buffer
   706                              <1> ;       rdi = ASCIIZ string buffer
   707 0000432B B908000000          <1>     mov ecx, 8
   708 00004330 F3A4                <1>     rep movsb   ;Move the name over
   709                              <1> .scanNameSpace:
   710 00004332 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   711 00004336 750D                <1>     jne .ext
   712 00004338 48FFCF              <1>     dec rdi
   713 0000433B FFC1                <1>     inc ecx
   714 0000433D 81F908000000        <1>     cmp ecx, 8
   715 00004343 72ED                <1>     jb .scanNameSpace
   716                              <1> .ext:
   717 00004345 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   718 0000434A 7506                <1>     jne .validExt
   719 0000434C 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   720 00004350 7415                <1>     je .exit
   721                              <1> .validExt:
   722 00004352 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   723 00004354 AA                  <1>     stosb
   724 00004355 B903000000          <1>     mov ecx, 3
   725 0000435A F3A4                <1>     rep movsb   ;Move the three extension chars over
   726                              <1> .scanExtSpace:
   727 0000435C 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   728 00004360 7505                <1>     jne .exit
   729 00004362 48FFCF              <1>     dec rdi
   730 00004365 EBF5                <1>     jmp short .scanExtSpace
   731                              <1> .exit:
   732 00004367 31C0                <1>     xor eax, eax
   733 00004369 AA                  <1>     stosb   ;Store a null at the end
   734                              <1>     return
    13                              <2> %%_ret:
    14 0000436A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> cpDelimOrCtrlStringToBufz:
   737                              <1> ;Copy a delimited or control char terminated string to a buffer
   738                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   739                              <1> ;       rdi -> Buffer to store null terminated string in
   740                              <1> ;Output: rsi -> First char past string end
   741                              <1> ;       rdi -> One char past null terminator on string buffer
   742 0000436B C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   743                              <1> .lp:
   744 0000436E AC                  <1>     lodsb
   745 0000436F 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   746 00004371 760A                <1>     jbe .exit
   747 00004373 E8E6FEFFFF          <1>     call isALdelimiter
   748 00004378 7403                <1>     je .exit
   749 0000437A AA                  <1>     stosb
   750 0000437B EBF1                <1>     jmp short .lp
   751                              <1> .exit:
   752 0000437D 31C0                <1>     xor eax, eax
   753 0000437F AA                  <1>     stosb   ;Store a null terminator
   754                              <1>     return
    13                              <2> %%_ret:
    14 00004380 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> 
   757                              <1> cpDelimPathToBufz:
   758                              <1> ;Copy a delimited path into buffer and null terminate.
   759                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   760                              <1> ;       rdi -> Buffer to store null terminated path in
   761                              <1> ;Output: rsi -> First char past pathname delimiter
   762                              <1> ;       rdi -> One char past null terminator on pathname buffer
   763 00004381 53                  <1>     push rbx
   764 00004382 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   765 00004385 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   766                              <1> .lp:
   767 00004388 AC                  <1>     lodsb   ;Get the char
   768 00004389 3C0D                <1>     cmp al, CR
   769 0000438B 7412                <1>     je .gotRedirPath
   770 0000438D E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   771 00004392 740B                <1>     jz .gotRedirPath 
   772 00004394 3A0590BCFFFF        <1>     cmp al, byte [switchChar]
   773 0000439A 7403                <1>     je .gotRedirPath
   774 0000439C AA                  <1>     stosb   ;Store this char and loop next char
   775 0000439D EBE9                <1>     jmp short .lp
   776                              <1> .gotRedirPath:
   777 0000439F 50                  <1>     push rax    ;Save the char on stack
   778 000043A0 30C0                <1>     xor al, al  ;Get null terminator char
   779 000043A2 4829FB              <1>     sub rbx, rdi
   780 000043A5 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   781 000043AC 7412                <1>     je .notColon
   782 000043AE 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   783 000043B5 7409                <1>     je .notColon
   784 000043B7 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   785 000043BB 7503                <1>     jne .notColon
   786 000043BD 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   787                              <1> .notColon:
   788 000043C0 AA                  <1>     stosb   ;Store the null terminator for the redir path
   789 000043C1 58                  <1>     pop rax ;Get back the char in al
   790 000043C2 5B                  <1>     pop rbx
   791                              <1>     return
    13                              <2> %%_ret:
    14 000043C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> buildCommandPath:
   794                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   795 000043C4 0FB605DABCFFFF      <1>     movzx eax, byte [arg1Off]
   796 000043CB 4C8B053DBCFFFF      <1>     mov r8, [pspPtr]
   797 000043D2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   798 000043D9 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   799                              <1> copyArgumentToSearchSpec:
   800                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   801                              <1> ; and null terminates
   802 000043DC 488D3DADC0FFFF      <1>     lea rdi, searchSpec
   803 000043E3 E899FFFFFF          <1>     call cpDelimPathToBufz
   804                              <1>     return
    13                              <2> %%_ret:
    14 000043E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> 
   806                              <1> scanForWildcards:
   807                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   808                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   809 000043E9 50                  <1>     push rax
   810 000043EA 56                  <1>     push rsi
   811                              <1> .lp:
   812 000043EB AC                  <1>     lodsb
   813 000043EC 3C3F                <1>     cmp al, "?"
   814 000043EE 740A                <1>     je .exit
   815 000043F0 3C2A                <1>     cmp al, "*"
   816 000043F2 7406                <1>     je .exit
   817 000043F4 84C0                <1>     test al, al
   818 000043F6 75F3                <1>     jnz .lp
   819 000043F8 FEC0                <1>     inc al  ;This will clear the ZF
   820                              <1> .exit:
   821 000043FA 5E                  <1>     pop rsi
   822 000043FB 58                  <1>     pop rax
   823                              <1>     return
    13                              <2> %%_ret:
    14 000043FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> printDecimalValLB:
   826                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   827                              <1> ; blanks and inserts commas where appropriate.
   828                              <1> ;Input: rax = Value to print
   829                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   830 000043FD 4889E5              <1>     mov rbp, rsp
   831 00004400 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   832 00004403 4889EF              <1>     mov rdi, rbp
   833 00004406 4829CF              <1>     sub rdi, rcx
   834 00004409 50                  <1>     push rax
   835 0000440A 51                  <1>     push rcx
   836 0000440B 57                  <1>     push rdi
   837 0000440C 31C0                <1>     xor eax, eax
   838 0000440E F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   839 00004410 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   840 00004411 59                  <1>     pop rcx
   841 00004412 58                  <1>     pop rax
   842 00004413 51                  <1>     push rcx    ;Save this value to keep the buffer length
   843 00004414 E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   844 00004419 59                  <1>     pop rcx     ;Now print the buffer
   845 0000441A 4889EF              <1>     mov rdi, rbp
   846 0000441D 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   847 00004420 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   848                              <1> .skipLp:
   849 00004422 8A1F                <1>     mov bl, byte [rdi]
   850 00004424 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   851 00004426 7513                <1>     jne .printLp
   852 00004428 B402                <1>     mov ah, 02h
   853 0000442A B220                <1>     mov dl, " "
   854 0000442C CD21                <1>     int 21h
   855 0000442E 48FFCF              <1>     dec rdi
   856 00004431 FFC9                <1>     dec ecx
   857 00004433 81F901000000        <1>     cmp ecx, 1
   858 00004439 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   859                              <1> .printLp:
   860 0000443B 8A17                <1>     mov dl, byte [rdi]
   861 0000443D B402                <1>     mov ah, 02h
   862 0000443F CD21                <1>     int 21h
   863 00004441 48FFCF              <1>     dec rdi
   864 00004444 FFC9                <1>     dec ecx
   865 00004446 75F3                <1>     jnz .printLp
   866                              <1> .exit:
   867 00004448 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   868                              <1>     return
    13                              <2> %%_ret:
    14 0000444B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   869                              <1> .errPrint:
   870                              <1> ;Print a default ? symbol if an overflow occurs.
   871 0000444C B23F                <1>     mov dl, "?"
   872 0000444E B800020000          <1>     mov eax, 0200h
   873 00004453 CD21                <1>     int 21h
   874 00004455 EBF1                <1>     jmp short .exit
   875                              <1> 
   876                              <1> decimalise:
   877                              <1> ;Input: rax = value to decimalise
   878                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   879                              <1> ;       ecx = buffer length
   880                              <1> ;Output: Buffer @ rdi filled in! 
   881                              <1> ;       ecx = Number of chars in buffer.
   882                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   883                              <1> ;   we return with CF=CY. Else, CF=NC.
   884 00004457 57                  <1>     push rdi
   885 00004458 89CE                <1>     mov esi, ecx    
   886 0000445A 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   887 0000445C BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   888                              <1> .lp:
   889 00004461 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   890 00004464 7514                <1>     jne .skipSep
   891 00004466 4038CE              <1>     cmp sil, cl
   892 00004469 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   893 0000446B 8A15C1BBFFFF        <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   894 00004471 8817                <1>     mov byte [rdi], dl
   895 00004473 48FFC7              <1>     inc rdi 
   896 00004476 FEC1                <1>     inc cl          ;Inc number of chars
   897 00004478 30ED                <1>     xor ch, ch      ;Reset comma counter
   898                              <1> .skipSep:
   899 0000447A 4038CE              <1>     cmp sil, cl
   900 0000447D 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   901 0000447F 31D2                <1>     xor edx, edx
   902 00004481 48F7F3              <1>     div rbx         ;Divide rax by 10
   903 00004484 80C230              <1>     add dl, "0"     
   904 00004487 8817                <1>     mov byte [rdi], dl
   905 00004489 48FFC7              <1>     inc rdi
   906 0000448C FEC1                <1>     inc cl          ;Inc number of chars
   907 0000448E FEC5                <1>     inc ch          ;Inc to keep track of commas
   908 00004490 4885C0              <1>     test rax, rax
   909 00004493 75CC                <1>     jnz .lp
   910                              <1> ;The test cleared CF if we are here
   911 00004495 0FB6C9              <1>     movzx ecx, cl
   912                              <1> .exit:
   913 00004498 5F                  <1>     pop rdi
   914                              <1>     return
    13                              <2> %%_ret:
    14 00004499 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   915                              <1> .exitErr:
   916 0000449A F9                  <1>     stc
   917 0000449B EBFB                <1>     jmp short .exit
   918                              <1> printDecimalWord:
   919                              <1> ;Takes a word in ax and print it's decimal representation.
   920                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   921                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   922                              <1> ;Input: eax = Zero extended word to print
   923 0000449D 31C9                <1>     xor ecx, ecx
   924 0000449F 85C0                <1>     test eax, eax
   925 000044A1 750C                <1>     jnz .notZero
   926 000044A3 B930000000          <1>     mov ecx, "0"
   927 000044A8 BD01000000          <1>     mov ebp, 1  ;Print one digit
   928 000044AD EB19                <1>     jmp short .goPrint
   929                              <1> .notZero:
   930 000044AF 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   931 000044B1 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   932                              <1> .mainLp:
   933 000044B6 FFC5                <1>     inc ebp
   934 000044B8 C1E108              <1>     shl ecx, 8    ;Space for next nybble
   935 000044BB 31D2                <1>     xor edx, edx
   936 000044BD F7F6                <1>     div esi
   937 000044BF 80C230              <1>     add dl, '0'
   938 000044C2 88D1                <1>     mov cl, dl    ;Save remainder byte
   939 000044C4 85C0                <1>     test eax, eax   ;We zero yet?
   940 000044C6 75EE                <1>     jnz .mainLp
   941                              <1> .goPrint:
   942 000044C8 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   943 000044CA C1E908              <1>     shr ecx, 8    ;Get next digit down
   944 000044CD B402                <1>     mov ah, 02h
   945 000044CF CD21                <1>     int 21h
   946 000044D1 FFCD                <1>     dec ebp
   947 000044D3 75F3                <1>     jnz .goPrint
   948                              <1>     return
    13                              <2> %%_ret:
    14 000044D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   949                              <1> 
   950                              <1> getDecimalWord:
   951                              <1> ;Works on MAX A dword in eax
   952                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   953 000044D6 31C9                <1>     xor ecx, ecx
   954 000044D8 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   955 000044DA BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   956                              <1> .dpfb0:
   957 000044DF FFC5                <1>     inc ebp
   958 000044E1 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   959 000044E5 31D2                <1>     xor edx, edx
   960 000044E7 48F7F3              <1>     div rbx
   961 000044EA 80C230              <1>     add dl, '0'
   962 000044ED 80FA39              <1>     cmp dl, '9'
   963 000044F0 7603                <1>     jbe .dpfb1
   964 000044F2 80C207              <1>     add dl, 'A'-'0'-10
   965                              <1> .dpfb1:
   966 000044F5 88D1                <1>     mov cl, dl    ;Save remainder byte
   967 000044F7 4885C0              <1>     test rax, rax
   968 000044FA 75E3                <1>     jnz .dpfb0
   969                              <1>     return
    13                              <2> %%_ret:
    14 000044FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   970                              <1> getByte:
   971                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   972 000044FD E807000000          <1>     call getNum
   973 00004502 3D00010000          <1>     cmp eax, 100h
   974 00004507 F5                  <1>     cmc
   975                              <1>     return
    13                              <2> %%_ret:
    14 00004508 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   976                              <1> getNum:
   977                              <1> ;Gets a number from a command line.
   978                              <1> ;Input: rsi -> String to get number from
   979                              <1> ;Output: rsi -> Char which terminated the accumulation
   980                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   981                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   982 00004509 51                  <1>     push rcx
   983 0000450A 53                  <1>     push rbx
   984 0000450B 31DB                <1>     xor ebx, ebx
   985 0000450D 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   986 0000450F 31C0                <1>     xor eax, eax    
   987                              <1> .lp:
   988 00004511 AC                  <1>     lodsb
   989 00004512 3C30                <1>     cmp al, "0"
   990 00004514 721B                <1>     jb .exit
   991 00004516 3C39                <1>     cmp al, "9"
   992 00004518 7717                <1>     ja .exit
   993 0000451A 2C30                <1>     sub al, "0"                     ;Convert to binary 
   994 0000451C 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   995 00004520 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   996 00004522 01C1                <1>     add ecx, eax
   997 00004524 FFC3                <1>     inc ebx
   998 00004526 81FB09000000        <1>     cmp ebx, 9
   999 0000452C 75E3                <1>     jne short .lp   ;Get next digit
  1000 0000452E F9                  <1>     stc             ;Yikesaroony
  1001 0000452F EB01                <1>     jmp short .exitBad
  1002                              <1> .exit:
  1003 00004531 F8                  <1>     clc             ;Clear CF
  1004                              <1> .exitBad:
  1005 00004532 89C8                <1>     mov eax, ecx
  1006 00004534 5B                  <1>     pop rbx
  1007 00004535 59                  <1>     pop rcx
  1008 00004536 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
  1009                              <1>     return
    13                              <2> %%_ret:
    14 00004539 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> 
  1011                              <1> 
  1012                              <1> freezePC:
  1013 0000453A 488D15E4C8FFFF      <1>     lea rdx, memBad1
  1014 00004541 B409                <1>     mov ah, 09h
  1015 00004543 CD21                <1>     int 21h
  1016                              <1> .altEP:
  1017 00004545 488D1502C9FFFF      <1>     lea rdx, memBad3
  1018 0000454C B409                <1>     mov ah, 09h
  1019 0000454E CD21                <1>     int 21h
  1020                              <1> .lp:
  1021 00004550 F390                <1>     pause
  1022 00004552 F4                  <1>     hlt
  1023 00004553 EBFB                <1>     jmp short .lp
  1024                              <1> 
  1025                              <1> setDTA:
  1026 00004555 50                  <1>     push rax
  1027 00004556 52                  <1>     push rdx
  1028 00004557 488D15B8BBFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1029 0000455E B8001A0000          <1>     mov eax, 1A00h
  1030 00004563 CD21                <1>     int 21h
  1031 00004565 5A                  <1>     pop rdx
  1032 00004566 58                  <1>     pop rax
  1033                              <1>     return
    13                              <2> %%_ret:
    14 00004567 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> 
  1035                              <1> getDTA:
  1036 00004568 488D15A7BBFFFF      <1>     lea rdx, cmdFFBlock
  1037                              <1>     return
    13                              <2> %%_ret:
    14 0000456F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> resetIDTentries:
  1040                              <1> ;Resets the IDT entries if they were changed by dead child process
  1041 00004570 488D1571020000      <1>     lea rdx, critErrorHandler
  1042 00004577 B824250000          <1>     mov eax, 2524h
  1043 0000457C CD21                <1>     int 21h
  1044 0000457E 488D1577010000      <1>     lea rdx, ctrlCHandler
  1045 00004585 B823250000          <1>     mov eax, 2523h
  1046 0000458A CD21                <1>     int 21h
  1047 0000458C 488D1580CFFFFF      <1>     lea rdx, appRet
  1048 00004593 B822250000          <1>     mov eax, 2522h
  1049 00004598 CD21                <1>     int 21h
  1050                              <1>     return
    13                              <2> %%_ret:
    14 0000459A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> 
  1052                              <1> ;-------------------------------
  1053                              <1> ; Environment utility functions
  1054                              <1> ;-------------------------------
  1055                              <1> 
  1056                              <1> cmpEnvVar:
  1057                              <1> ;Checks that we have found the environment variable we are looking for.
  1058                              <1> ;Input: rsi -> Environment var to verify the name of
  1059                              <1> ;       rdi -> Environment var name to compare against
  1060                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1061 0000459B 56                  <1>     push rsi
  1062 0000459C 57                  <1>     push rdi
  1063 0000459D 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
  1064                              <1> .lp:
  1065 000045A0 AC                  <1>     lodsb               ;Pick up from user string
  1066 000045A1 E88FFCFFFF          <1>     call ucChar         ;Upper case it!
  1067 000045A6 3807                <1>     cmp byte [rdi], al  
  1068 000045A8 7509                <1>     jne .exit
  1069 000045AA 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1070 000045AC 7405                <1>     je .exit
  1071 000045AE 48FFC7              <1>     inc rdi
  1072 000045B1 EBED                <1>     jmp short .lp
  1073                              <1> .exit:
  1074 000045B3 5F                  <1>     pop rdi
  1075 000045B4 5E                  <1>     pop rsi
  1076                              <1>     return
    13                              <2> %%_ret:
    14 000045B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> checkEnvGoodAndGet:
  1079                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1080                              <1> ;Output:
  1081                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1082                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1083                              <1> ;           rsi -> Environment pointer
  1084 000045B6 50                  <1>     push rax
  1085 000045B7 51                  <1>     push rcx
  1086 000045B8 57                  <1>     push rdi
  1087 000045B9 4150                <1>     push r8
  1088 000045BB 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1089 000045BF 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1090 000045C2 741A                <1>     jz .badExit
  1091 000045C4 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1092 000045C7 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1093                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1094 000045CA 31C0                <1>     xor eax, eax
  1095                              <1> .pathNulScan:
  1096 000045CC F2AE                <1>     repne scasb
  1097 000045CE 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1098 000045D0 740C                <1>     jz .badExit
  1099 000045D2 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1100 000045D4 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1101 000045D6 31C0                <1>     xor eax, eax
  1102 000045D8 FFC0                <1>     inc eax ;Clear the ZF
  1103 000045DA 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1104                              <1> .badExit:
  1105 000045DE 4158                <1>     pop r8
  1106 000045E0 5F                  <1>     pop rdi
  1107 000045E1 59                  <1>     pop rcx
  1108 000045E2 58                  <1>     pop rax
  1109                              <1>     return
    13                              <2> %%_ret:
    14 000045E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> 
  1111                              <1> 
  1112                              <1> findEnvSpace:
  1113                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1114                              <1> ; free space in the pointer and a count of free space in the environment.
  1115                              <1> ;If count is zero, pointer is not to be used.
  1116                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1117 000045E4 31C9                <1>     xor ecx, ecx
  1118 000045E6 31C0                <1>     xor eax, eax    ;Clear eax too
  1119 000045E8 51                  <1>     push rcx
  1120 000045E9 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1121 000045EE 59                  <1>     pop rcx
  1122                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000045EF 74(E3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1123 000045F1 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1124 000045F5 FFC9                <1>     dec ecx ;Make into a large counter
  1125 000045F7 4889F7              <1>     mov rdi, rsi    
  1126                              <1> .endsearch:
  1127 000045FA F2AE                <1>     repne scasb ;Scan
  1128 000045FC 803F00              <1>     cmp byte [rdi], 0
  1129 000045FF 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1130                              <1>     ;Here we are at the end of the environment
  1131 00004601 F7D9                <1>     neg ecx
  1132 00004603 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1133 00004605 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1134 00004608 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1135 0000460B 29C8                <1>     sub eax, ecx
  1136 0000460D 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1137                              <1>     return
    13                              <2> %%_ret:
    14 0000460F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1138                              <1> 
  1139                              <1> searchForEnvVar:
  1140                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1141                              <1> ;Input: rdi -> Var name to look for.
  1142                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1143 00004610 57                  <1>     push rdi
  1144 00004611 51                  <1>     push rcx
  1145 00004612 52                  <1>     push rdx
  1146 00004613 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1147 00004617 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1148                              <1> .varLp:
  1149 0000461A 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1150 0000461D E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1151 00004622 7416                <1>     je .varFound
  1152 00004624 31C0                <1>     xor eax, eax        ;Search for a null
  1153 00004626 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1154 00004629 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1155 0000462E F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1156 00004630 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1157 00004632 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1158 00004634 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1159 00004637 EBE1                <1>     jmp short .varLp    ;And scan again!
  1160                              <1> .varNotFound:
  1161 00004639 F9                  <1>     stc
  1162                              <1> .varFound:
  1163 0000463A 59                  <1>     pop rcx
  1164 0000463B 5A                  <1>     pop rdx
  1165 0000463C 5F                  <1>     pop rdi
  1166                              <1>     return
    13                              <2> %%_ret:
    14 0000463D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> envFree:
  1169                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1170                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1171                              <1> ; free byte of the environment!
  1172                              <1> ;Input: rsi -> Variable to free.
  1173                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1174                              <1> ;        ecx = Number of free bytes in env
  1175 0000463E 4889F7              <1>     mov rdi, rsi
  1176 00004641 31C0                <1>     xor eax, eax
  1177                              <1> .freeLp:
  1178 00004643 803F00              <1>     cmp byte [rdi], 0
  1179 00004646 7403                <1>     je .exitLp
  1180 00004648 AA                  <1>     stosb
  1181 00004649 EBF8                <1>     jmp short .freeLp
  1182                              <1> .exitLp:
  1183                              <1> ;rdi points to the terminating null of the var we just deleted
  1184                              <1> ;rsi points to the start of the free space
  1185 0000464B 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1186 0000464E 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1187 00004653 7504                <1>     jne .prepPullup
  1188 00004655 31C0                <1>     xor eax, eax
  1189 00004657 EB0E                <1>     jmp short .cleanEnv
  1190                              <1> .prepPullup:
  1191 00004659 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1192                              <1> .pullUp:
  1193 0000465C AC                  <1>     lodsb
  1194 0000465D AA                  <1>     stosb
  1195 0000465E 84C0                <1>     test al, al ;Did we pick up a zero
  1196 00004660 75FA                <1>     jne .pullUp ;If not, keep copying
  1197 00004662 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1198 00004665 75F5                <1>     jne .pullUp
  1199                              <1> ;We are at the end of the copy!
  1200                              <1> .cleanEnv:
  1201 00004667 AA                  <1>     stosb   ;Store the famous second null
  1202 00004668 48FFCF              <1>     dec rdi ;without incrementing it!!
  1203 0000466B E807000000          <1>     call getFreeSpace
  1204 00004670 31C0                <1>     xor eax, eax
  1205 00004672 51                  <1>     push rcx
  1206 00004673 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1207 00004675 59                  <1>     pop rcx
  1208                              <1>     return
    13                              <2> %%_ret:
    14 00004676 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1209                              <1> 
  1210                              <1> getFreeSpace:
  1211                              <1> ;Output: ecx = Number of free bytes in the environment block
  1212 00004677 56                  <1>     push rsi
  1213 00004678 57                  <1>     push rdi
  1214 00004679 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1215 0000467E 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1216 00004682 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1217 00004685 E805000000          <1>     call getEnvSize ;Get total block size
  1218 0000468A 29F9                <1>     sub ecx, edi    ;Get difference!
  1219 0000468C 5F                  <1>     pop rdi
  1220 0000468D 5E                  <1>     pop rsi
  1221                              <1>     return
    13                              <2> %%_ret:
    14 0000468E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1222                              <1> 
  1223                              <1> getEnvSize:
  1224                              <1> ;Gets the number of bytes in the environment allocation
  1225                              <1> ;Output: ecx = Number of bytes in the environment!
  1226 0000468F 53                  <1>     push rbx
  1227 00004690 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1228 00004694 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1229 00004697 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1230 0000469A 5B                  <1>     pop rbx
  1231                              <1>     return
    13                              <2> %%_ret:
    14 0000469B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> 
  1233                              <1> getPtrToEndOfEnv:
  1234                              <1> ;Gets ptr to end of the environment
  1235                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1236 0000469C 50                  <1>     push rax
  1237 0000469D 51                  <1>     push rcx
  1238 0000469E 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1239 000046A2 31C0                <1>     xor eax, eax
  1240 000046A4 31C9                <1>     xor ecx, ecx
  1241 000046A6 FFC9                <1>     dec ecx
  1242                              <1> .lp:
  1243 000046A8 F2AE                <1>     repne scasb
  1244 000046AA 3807                <1>     cmp byte [rdi], al
  1245 000046AC 75FA                <1>     jne .lp
  1246 000046AE 59                  <1>     pop rcx
  1247 000046AF 58                  <1>     pop rax
  1248                              <1>     return
    13                              <2> %%_ret:
    14 000046B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> growEnvBlock:
  1251                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1252                              <1> ; newly allocated 160 byte block of the environment.
  1253                              <1> ;Returns:   CF=NC - Environment grown ok!
  1254                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1255                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1256 000046B1 50                  <1>     push rax
  1257 000046B2 53                  <1>     push rbx
  1258 000046B3 51                  <1>     push rcx
  1259 000046B4 56                  <1>     push rsi
  1260 000046B5 57                  <1>     push rdi
  1261 000046B6 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1262 000046BB E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1263 000046C0 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1264 000046C4 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1265 000046C7 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1266 000046CD 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1267 000046D3 7321                <1>     jae .tooLarge
  1268                              <1>     ;Here ZF must be NZ.
  1269 000046D5 4150                <1>     push r8
  1270 000046D7 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1271 000046DB B8004A0000          <1>     mov eax, 4A00h
  1272 000046E0 CD21                <1>     int 21h
  1273 000046E2 4158                <1>     pop r8
  1274 000046E4 720A                <1>     jc .exit
  1275                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1276                              <1>     ; so we add 160 zeros to the count of bytes
  1277 000046E6 81C1A0000000        <1>     add ecx, 0A0h
  1278 000046EC 31C0                <1>     xor eax, eax
  1279 000046EE F3AA                <1>     rep stosb
  1280                              <1> .exit:
  1281 000046F0 5F                  <1>     pop rdi
  1282 000046F1 5E                  <1>     pop rsi
  1283 000046F2 59                  <1>     pop rcx
  1284 000046F3 5B                  <1>     pop rbx
  1285 000046F4 58                  <1>     pop rax
  1286                              <1>     return
    13                              <2> %%_ret:
    14 000046F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1287                              <1> .tooLarge:
  1288 000046F6 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1289 000046F9 F9                  <1>     stc             ;Set CF
  1290 000046FA EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 000046FC F60591B9FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004703 7411                <1>     jz .notLoading
     4 00004705 F60588B9FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 0000470C 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000470E 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004714 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004716 F60577B9FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000471D 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000471F 84E4                <1>     test ah, ah
    17 00004721 7424                <1>     jz .inInt23 
    18 00004723 80FC0C              <1>     cmp ah, 0Ch
    19 00004726 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004728 50                  <1>     push rax
    23 00004729 488D0512000000      <1>     lea rax, .i23Bounce
    24 00004730 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004735 31C0                <1>     xor eax, eax
    26 00004737 668CC8              <1>     mov ax, cs
    27 0000473A 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 0000473F 58                  <1>     pop rax
    29 00004740 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004742 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004747 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004749 800D44B9FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 00004750 F6053DB9FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004757 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004759 50                  <1>     push rax
    43 0000475A B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 0000475F CD21                <1>     int 21h
    45 00004761 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004762 F6052BB9FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004769 7462                <1>     jz .notBat
    49 0000476B F60522B9FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004772 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004774 E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004779 488D1547C1FFFF      <1>     lea rdx, batFail
    57 00004780 E880F8FFFF          <1>     call printString
    58 00004785 488D1576B9FFFF      <1>     lea rdx, batYNstr
    59 0000478C 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004792 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004797 CD21                <1>     int 21h
    62 00004799 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 0000479B 8A4202              <1>     mov al, byte [rdx + 2]
    64 0000479E E892FAFFFF          <1>     call ucChar         ;UC using DOS
    65 000047A3 3C59                <1>     cmp al, "Y"
    66 000047A5 740E                <1>     je .killBat
    67 000047A7 3C4E                <1>     cmp al, "N"
    68 000047A9 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 000047AB E84EF8FFFF          <1>     call printCRLF
    74 000047B0 E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 000047B5 E872D6FFFF          <1>     call batCleanup
    77 000047BA EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 000047BC E86BD6FFFF          <1>     call batCleanup
    80 000047C1 8025CCB8FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 000047C8 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 000047CD 66813DC1B8FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 000047D6 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 000047D8 E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 000047DD 8025B0B8FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 000047E4 F9                  <1>     stc     ;Set CF to kill the task
    91 000047E5 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000047E8 53                  <1>     push rbx
    25 000047E9 51                  <1>     push rcx
    26 000047EA 52                  <1>     push rdx
    27 000047EB 57                  <1>     push rdi
    28 000047EC 56                  <1>     push rsi
    29 000047ED E80F020000          <1>     call errSwapHdls
    30 000047F2 FC                  <1>     cld         ;Make String ops go forward
    31 000047F3 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000047F6 880599B8FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 000047FC 488D1567C0FFFF      <1>     lea rdx, crlf
    34 00004803 E8FDF7FFFF          <1>     call printString    ;Trashes ax
    35 00004808 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 0000480B 53                  <1>     push rbx        ;Save the action bitfield
    38 0000480C 56                  <1>     push rsi        ;Save the driver pointer
    39 0000480D B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004812 CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004814 488D35E1C7FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 0000481B 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 0000481E 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004820 66A5                <1>     movsw
    51 00004822 A4                  <1>     movsb
    52 00004823 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004826 5E                  <1>     pop rsi
    54 00004827 5B                  <1>     pop rbx
    55 00004828 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 0000482E 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004830 81FF24000000        <1>     cmp edi, errShrFul
    60 00004836 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004838 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 0000483D CD21                <1>     int 21h
    65 0000483F 3CFF                <1>     cmp al, -1
    66 00004841 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004843 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004845 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004847 CD21                <1>     int 21h
    70 00004849 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 0000484B 4889FA              <1>     mov rdx, rdi        
    76 0000484E 50                  <1>     push rax            
    77 0000484F 31C0                <1>     xor eax, eax
    78 00004851 89C1                <1>     mov ecx, eax
    79 00004853 FFC9                <1>     dec ecx
    80 00004855 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004857 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 0000485B E8A5F7FFFF          <1>     call printString 
    83 00004860 C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004864 58                  <1>     pop rax
    85 00004865 84C0                <1>     test al, al ;Is this zero?
    86 00004867 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004869 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 0000486E 488D15BCC7FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004875 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004877 BA1F000000          <1>     mov edx, errGF
    98 0000487C 81FF24000000        <1>     cmp edi, errShrFul
    99 00004882 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004885 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 0000488A 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004890 0F42FA              <1>     cmovb edi, edx
   104 00004893 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004899 57                  <1>     push rdi    ;Save the error code for checking
   106 0000489A 488D1555C6FFFF      <1>     lea rdx, errMsgPtrTbl
   107 000048A1 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 000048A4 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 000048A8 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 000048AB 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 000048AC E854F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 000048B1 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 000048B7 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 000048B9 488D158FC7FFFF      <1>     lea rdx, readMsg
   120 000048C0 488D3D97C7FFFF      <1>     lea rdi, writeMsg
   121 000048C7 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 000048CA 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 000048CE E832F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 000048D3 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 000048D6 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 000048DC 488D1565C7FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 000048E3 E81DF7FFFF          <1>     call printString
   130 000048E8 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 000048EA 80C241              <1>     add dl, "A" ;Add ASCII code
   132 000048ED B402                <1>     mov ah, 02h ;Print char in dl
   133 000048EF CD21                <1>     int 21h
   134                              <1>     
   135 000048F1 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 000048F3 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 000048F8 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 000048FD 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 000048FF B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004901 E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004906 E8F3F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 0000490B 488D155BC7FFFF      <1>     lea rdx, abortMsg
   149 00004912 E8EEF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004917 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 0000491A 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 0000491C 488D1562C7FFFF      <1>     lea rdx, betweenMsg
   154 00004923 E8DDF6FFFF          <1>     call printString
   155 00004928 488D154BC7FFFF      <1>     lea rdx, retryMsg
   156 0000492F E8D1F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004934 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004937 7418                <1>     jz .userFail
   160 00004939 488D1545C7FFFF      <1>     lea rdx, betweenMsg
   161 00004940 E8C0F6FFFF          <1>     call printString
   162 00004945 488D1527C7FFFF      <1>     lea rdx, ignoreMsg
   163 0000494C E8B4F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004951 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004954 7418                <1>     jz .userMsgEnd
   167 00004956 488D1528C7FFFF      <1>     lea rdx, betweenMsg
   168 0000495D E8A3F6FFFF          <1>     call printString
   169 00004962 488D1517C7FFFF      <1>     lea rdx, failMsg
   170 00004969 E897F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 0000496E 488D1513C7FFFF      <1>     lea rdx, endMsg
   173 00004975 E88BF6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 0000497A 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 0000497C 488D3D08C7FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004983 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004988 CD21                <1>     int 21h ;Get char in al
   179 0000498A 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 0000498C 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 0000498E 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004990 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004991 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004993 FFC1                <1>     inc ecx
   186 00004995 81F904000000        <1>     cmp ecx, 4
   187 0000499B 75F3                <1>     jne .uip1
   188 0000499D E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 000049A2 E857F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 000049A7 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 000049A9 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 000049AB 7427                <1>     je .cehExit
   195 000049AD 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 000049AF 740F                <1>     je .viIgnore
   197 000049B1 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 000049B3 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 000049B5 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 000049B8 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 000049BE EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 000049C0 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 000049C3 0F843DFFFFFF        <1>     jz .userInput
   206 000049C9 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 000049CB F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 000049CE 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 000049D4 E845000000          <1>     call errRetHdls
   212 000049D9 5E                  <1>     pop rsi
   213 000049DA 5F                  <1>     pop rdi
   214 000049DB 5A                  <1>     pop rdx
   215 000049DC 59                  <1>     pop rcx
   216 000049DD 5B                  <1>     pop rbx
   217 000049DE 48CF                <1>     iretq
   218                              <1> .charError:
   219 000049E0 C605AEB6FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 000049E7 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 000049EC 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 000049F3 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 000049F4 88C2                <1>     mov dl, al  ;Move char into dl
   225 000049F6 B402                <1>     mov ah, 02h
   226 000049F8 CD21                <1>     int 21h ;Print char
   227 000049FA E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 000049FC E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004A01 50                  <1>     push rax
   236 00004A02 53                  <1>     push rbx
   237 00004A03 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004A08 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004A0B 66890585B6FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004A12 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004A16 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004A18 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004A1B 5B                  <1>     pop rbx
   244 00004A1C 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004A1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004A1E 50                  <1>     push rax
   250 00004A1F 53                  <1>     push rbx
   251 00004A20 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004A25 0FB7056BB6FFFF      <1>     movzx eax, word [errHdls]
   253 00004A2C 66C70562B6FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004A35 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004A38 5B                  <1>     pop rbx
   256 00004A39 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004A3A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004A3B 50                  <1>     push rax        ;Save rax
   263 00004A3C B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004A41 CD21                <1>     int 21h
   265 00004A43 58                  <1>     pop rax
   266 00004A44 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004A4A 7605                <1>     jbe .pspJftExit
   268 00004A4C 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004A50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004A51 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004A55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004A56 B430                <1>     mov ah, 30h
     4 00004A58 CD21                <1>     int 21h
     5 00004A5A 3C01                <1>     cmp al, 01h ;Version 1
     6 00004A5C 760D                <1>     jbe .okVersion
     7 00004A5E 488D15CC040000      <1>     lea rdx, badVerStr
     8 00004A65 B409                <1>     mov ah, 09h
     9 00004A67 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004A69 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004A6B 800D22B6FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004A72 4C890596B5FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004A79 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004A7E CD21                <1>     int 21h
    19 00004A80 3CFF                <1>     cmp al, -1
    20 00004A82 7412                <1>     je .skipSwitch
    21 00004A84 8815A0B5FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004A8A 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004A8D 7507                <1>     jne .skipSwitch
    24 00004A8F C60593B5FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004A96 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004A9B 488D1589B5FFFF      <1>     lea rdx, ctryData
    28 00004AA2 CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004AA4 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004AAB 4889E3              <1>     mov rbx, rsp
    33 00004AAE 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004AB1 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004AB5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004AB8 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004ABD 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004AC0 CD21                <1>     int 21h
    39 00004AC2 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004AC4 E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004AC9 E81D030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004ACE E89DFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004AD3 F605BAB5FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004ADA 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004AE0 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004AE4 488D15FDFCFFFF      <1>     lea rdx, critErrorHandler
    51 00004AEB 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004AEF 488D1506FCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004AF6 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004AFA 488D1512CAFFFF      <1>     lea rdx, appRet
    55 00004B01 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004B05 488D15A5CFFFFF      <1>     lea rdx, int2Eh
    57 00004B0C B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004B11 CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004B13 E8F5F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004B18 0441                <1>     add al, "A"
    62 00004B1A 8805ABC3FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004B20 488D15A4C3FFFF      <1>     lea rdx, autoSpec
    65 00004B27 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004B2C CD21                <1>     int 21h
    67 00004B2E 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004B30 89C3                <1>     mov ebx, eax
    71 00004B32 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004B37 CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004B39 31D2                <1>     xor edx, edx
    75 00004B3B FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004B3D E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004B42 488D1521BDFFFF      <1>     lea rdx, crlf
    80 00004B49 B409                <1>     mov ah, 09h
    81 00004B4B CD21                <1>     int 21h
    82 00004B4D 800D40B5FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004B54 E8CFE3FFFF          <1>     call time.init
    84 00004B59 E81CE2FFFF          <1>     call date.init
    85 00004B5E 80252FB5FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004B65 488D15FEBCFFFF      <1>     lea rdx, crlf
    87 00004B6C B409                <1>     mov ah, 09h
    88 00004B6E CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004B70 F6051DB5FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004B77 7531                <1>     jnz .singleCom
    94 00004B79 488D1578030000      <1>     lea rdx, initString
    95 00004B80 B409                <1>     mov ah, 09h
    96 00004B82 CD21                <1>     int 21h ;Print init string
    97 00004B84 E841EAFFFF          <1>     call version.printVersionNumber
    98 00004B89 488D157B030000      <1>     lea rdx, initString2
    99 00004B90 B409                <1>     mov ah, 09h
   100 00004B92 CD21                <1>     int 21h ;Print init string
   101 00004B94 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004B96 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004B9B 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004B9E 8025EFB4FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004BA5 E9E5C4FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004BAA 803DB1B5FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004BB1 0F8432ECFFFF        <1>     je exit
   112 00004BB7 31D2                <1>     xor edx, edx
   113 00004BB9 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004BBB EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004BBD 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004BC4 4881C340060000      <1>     add rbx, stackSize
   120 00004BCB 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004BD2 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004BD6 48C1E304            <1>     shl rbx, 4
   123 00004BDA 48891D24B4FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004BE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004BE2 E826F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004BE7 0441                <1>     add al, "A"
   144 00004BE9 B43A                <1>     mov ah, ":"
   145 00004BEB 488D3D6BBAFFFF      <1>     lea rdi, comspecDir
   146 00004BF2 66AB                <1>     stosw   ;Store drive specifier
   147 00004BF4 0FB6052EB4FFFF      <1>     movzx eax, byte [pathSep]
   148 00004BFB 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004BFD E853F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004C02 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004C09 E842F6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004C0E AC                  <1>     lodsb
   155 00004C0F 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004C12 3C0D                <1>     cmp al, CR
   157 00004C14 0F847C010000        <1>     je .endScan
   158 00004C1A 3A050AB4FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004C20 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004C22 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004C25 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004C26 E80AF6FFFF          <1>     call ucChar
   164 00004C2B 3C43                <1>     cmp al, "C"
   165 00004C2D 0F842F010000        <1>     je .switchStr
   166 00004C33 3C50                <1>     cmp al, "P"
   167 00004C35 0F8403010000        <1>     je .switchPerma
   168 00004C3B 3C45                <1>     cmp al, "E"
   169 00004C3D 0F84B0000000        <1>     je .switchEnv
   170 00004C43 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004C46 488D1501BEFFFF      <1>     lea rdx, badParm
   173 00004C4D EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004C4F E888F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004C54 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004C57 488D1532B8FFFF      <1>     lea rdx, searchSpec
   180 00004C5E B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004C63 B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004C68 CD21                <1>     int 21h
   183 00004C6A 7319                <1>     jnc .charOrDir
   184                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   185 00004C6C 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   186 00004C6E 30C0                <1>     xor al, al
   187 00004C70 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   188 00004C75 741C                <1>     je .dir ;If so, root dir specified, all oki!
   189                              <1> .badSpec:
   190                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   191 00004C77 488D15CB020000      <1>     lea rdx, badCmdDir
   192                              <1> .bs0:
   193 00004C7E E882F3FFFF          <1>     call printString
   194                              <1> .plhop:
   195 00004C83 EB84                <1>     jmp short .parseLp
   196                              <1> ;-----------------------------------------------------------------
   197                              <1> ;Check if a char or directory here
   198                              <1> .charOrDir:
   199 00004C85 8A05A0B4FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   200 00004C8B 2450                <1>     and al, dirCharDev | dirDirectory
   201 00004C8D 74E8                <1>     jz .badSpec
   202 00004C8F A840                <1>     test al, dirCharDev
   203 00004C91 7525                <1>     jnz .charDev
   204                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   205                              <1> .dir:
   206 00004C93 56                  <1>     push rsi
   207 00004C94 488D35F5B7FFFF      <1>     lea rsi, searchSpec 
   208 00004C9B 488D3DBBB9FFFF      <1>     lea rdi, comspecDir
   209 00004CA2 E87AF5FFFF          <1>     call strcpy2
   210 00004CA7 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   211 00004CAC CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   212 00004CAE 5E                  <1>     pop rsi
   213 00004CAF C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   214 00004CB6 EBCB                <1>     jmp short .plhop
   215                              <1> ;-----------------------------------------------------------------
   216                              <1> ;Handle char dev here
   217                              <1> .charDev:
   218                              <1> ;Check the name is max 8 chars in length
   219 00004CB8 488D3DD1B7FFFF      <1>     lea rdi, searchSpec
   220 00004CBF E867F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   221 00004CC4 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   222 00004CCA 771E                <1>     ja .badChar
   223 00004CCC 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   224 00004CCD 488D35BCB7FFFF      <1>     lea rsi, searchSpec
   225 00004CD4 488D3DE7C1FFFF      <1>     lea rdi, devName
   226 00004CDB E832F5FFFF          <1>     call strcpy ;Copy this string over
   227 00004CE0 5E                  <1>     pop rsi
   228 00004CE1 C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   229                              <1> .plhop1:
   230 00004CE8 EB99                <1>     jmp short .plhop    ;parseLp
   231                              <1> .badChar:
   232 00004CEA 488D1510BFFFFF      <1>     lea rdx, badDev
   233                              <1> .bs1:
   234 00004CF1 EB8B                <1>     jmp short .bs0
   235                              <1> ;-----------------------------------------------------------------
   236                              <1> .switchEnv:
   237 00004CF3 AC                  <1>     lodsb
   238 00004CF4 48FFCE              <1>     dec rsi
   239 00004CF7 3C3A                <1>     cmp al, ":"
   240 00004CF9 0F8547FFFFFF        <1>     jne .badparm
   241 00004CFF 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   242 00004D02 E849F5FFFF          <1>     call skipDelimiters
   243 00004D07 AC                  <1>     lodsb       ;Get the first non-delimiter
   244 00004D08 48FFCE              <1>     dec rsi     ;Point back at it
   245 00004D0B 3C0D                <1>     cmp al, CR
   246 00004D0D 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   247                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   248 00004D13 E8F1F7FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   249 00004D18 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   250 00004D1E 3D00800000          <1>     cmp eax, 8000h
   251 00004D23 7710                <1>     ja .badEnv
   252 00004D25 3DA0000000          <1>     cmp eax, 0A0h
   253 00004D2A 7209                <1>     jb .badEnv
   254 00004D2C 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   255                              <1> .plhop2:
   256 00004D33 EBB3                <1>     jmp short .plhop1  ;parseLp
   257                              <1> .badEnv:
   258 00004D35 488D1536020000      <1>     lea rdx, badEnvSz
   259 00004D3C EBB3                <1>     jmp short .bs1
   260                              <1> ;-----------------------------------------------------------------
   261                              <1> .switchPerma:
   262 00004D3E AC                  <1>     lodsb   ;Get the second char after the P
   263 00004D3F 48FFCE              <1>     dec rsi ;Point back at it
   264 00004D42 3C0D                <1>     cmp al, CR
   265 00004D44 7413                <1>     je .spEmbCr ;Allow CR after the P
   266 00004D46 3A05DEB2FFFF        <1>     cmp al, byte [switchChar]
   267 00004D4C 740B                <1>     je .spEmbCr ;Allow switch char after P
   268 00004D4E E80BF5FFFF          <1>     call isALdelimiter
   269 00004D53 0F85EDFEFFFF        <1>     jne .badparm
   270                              <1> .spEmbCr:
   271 00004D59 800D34B3FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   272 00004D60 EBD1                <1>     jmp short .plhop2  ;parseLp
   273                              <1> ;-----------------------------------------------------------------
   274                              <1> .switchStr:
   275 00004D62 AC                  <1>     lodsb       ;Get the char after the C
   276 00004D63 48FFCE              <1>     dec rsi     ;Point back at it
   277 00004D66 3C0D                <1>     cmp al, CR
   278 00004D68 740B                <1>     je .ssembCr         ;Embedded CR ok
   279 00004D6A E8EFF4FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   280 00004D6F 0F85D1FEFFFF        <1>     jne .badparm
   281                              <1> .ssembCr:
   282 00004D75 E8D6F4FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   283 00004D7A 488D3DE2B3FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   284                              <1> .ssLp:
   285 00004D81 AC                  <1>     lodsb
   286 00004D82 AA                  <1>     stosb
   287 00004D83 3C0D                <1>     cmp al, CR
   288 00004D85 7408                <1>     je .ssOk
   289 00004D87 FE05D5B3FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   290 00004D8D EBF2                <1>     jmp short .ssLp
   291                              <1> .ssOk:
   292 00004D8F 800DFEB2FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   293                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   294                              <1> ;-----------------------------------------------------------------
   295                              <1> .endScan:
   296                              <1> ;Now copy our name to the end of the dir specified
   297 00004D96 488D3DC0B8FFFF      <1>     lea rdi, comspecDir
   298 00004D9D E889F4FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   299 00004DA2 FFC9                <1>     dec ecx ;Point to null terminator
   300 00004DA4 8A057FB2FFFF        <1>     mov al, byte [pathSep]
   301 00004DAA 4801CF              <1>     add rdi, rcx    ;Now point to the null
   302 00004DAD 3847FF              <1>     cmp byte [rdi - 1], al
   303 00004DB0 7401                <1>     je .esSkipPathsep
   304 00004DB2 AA                  <1>     stosb
   305                              <1> .esSkipPathsep:
   306 00004DB3 488D3530C1FFFF      <1>     lea rsi, cspec
   307 00004DBA E853F4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   308 00004DBF E812000000          <1>     call .replacestdio
   309                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   310                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   311 00004DC4 F605C9B2FFFF04      <1>     test byte [statFlg1], inSingle
   312                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004DCB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004DCD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   313 00004DCE 8025BFB2FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004DD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .replacestdio:
   316 00004DD6 F605B1010000FF      <1>     test byte [initNewDev], -1
   317                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004DDD 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 00004DDF 488D15DCC0FFFF      <1>     lea rdx, devName
   319 00004DE6 E9A1E2FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   320                              <1> 
   321                              <1> doEnv:
   322                              <1> ;Will do the environment adjustments as needed
   323 00004DEB 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   324 00004DEF 4885F6              <1>     test rsi, rsi
   325 00004DF2 7447                <1>     jz .noInitEnv
   326 00004DF4 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   327                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004DFD 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   328                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   329                              <1> ;copy the environment from the master and free the original block.
   330                              <1> ;If the block we allocate is smaller than the original block, 
   331                              <1> ; print out of env space and stop there
   332                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   333                              <1> ; comspec. 
   334 00004DFF F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   335 00004E06 752E                <1>     jnz .prepNewEnv
   336                              <1>     ;Else, we create new alloc and copy master into it
   337 00004E08 E867000000          <1>     call .allocEnv
   338 00004E0D 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   339 00004E10 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   340 00004E15 57                  <1>     push rdi            ;Save the start of the environment block
   341 00004E16 E893000000          <1>     call .cpEnv         ;Copy the environment
   342 00004E1B 5F                  <1>     pop rdi
   343 00004E1C E805000000          <1>     call .freeCurrentEnv
   344 00004E21 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   345                              <1>     return  
    13                              <2> %%_ret:
    14 00004E25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> .freeCurrentEnv:
   347 00004E26 4150                <1>     push r8
   348 00004E28 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   349 00004E2C B800490000          <1>     mov eax, 4900h
   350 00004E31 CD21                <1>     int 21h
   351 00004E33 4158                <1>     pop r8
   352                              <1>     return
    13                              <2> %%_ret:
    14 00004E35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .prepNewEnv:
   354 00004E36 E8EBFFFFFF          <1>     call .freeCurrentEnv
   355                              <1> .noInitEnv:
   356                              <1> ;Build the initial block.
   357 00004E3B E834000000          <1>     call .allocEnv
   358 00004E40 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   359 00004E43 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   360 00004E47 57                  <1>     push rdi            ;Save the environment ptr!
   361 00004E48 488D358CC0FFFF      <1>     lea rsi, pathEVar
   362 00004E4F E8BEF3FFFF          <1>     call strcpy
   363 00004E54 488D3586C0FFFF      <1>     lea rsi, comspecEVar
   364 00004E5B E8B2F3FFFF          <1>     call strcpy
   365 00004E60 48FFCF              <1>     dec rdi ;Write over the terminating null
   366 00004E63 488D35F3B7FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   367 00004E6A E8A3F3FFFF          <1>     call strcpy 
   368 00004E6F 30C0                <1>     xor al, al
   369 00004E71 AA                  <1>     stosb   ;Store the second terminating null
   370 00004E72 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   371                              <1>     return
    13                              <2> %%_ret:
    14 00004E73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> .allocEnv:
   374                              <1> ;Output: rax -> Ptr to the environment block. 
   375                              <1> ;   If anything goes wrong, error message and exit the shell!
   376 00004E74 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   377 00004E7B 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   378 00004E7D 750C                <1>     jnz .goAlloc
   379 00004E7F BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   380 00004E84 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   381                              <1> .goAlloc:
   382 00004E8B 81C30F000000        <1>     add ebx, 0Fh
   383 00004E91 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   384 00004E94 B800480000          <1>     mov eax, 4800h
   385 00004E99 CD21                <1>     int 21h
   386                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004E9B 73(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   387 00004E9D 488D1581BFFFFF      <1>     lea rdx, memBad1
   388 00004EA4 E85CF1FFFF          <1>     call printString
   389 00004EA9 E952E9FFFF          <1>     jmp exit.ouch 
   390                              <1> 
   391                              <1> .cpEnv:
   392                              <1> ;Copies the environment
   393                              <1> ;Input: rsi -> Source to copy from
   394                              <1> ;       rdi -> Destination to copy to
   395 00004EAE 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   396                              <1> .lp:
   397 00004EB5 AC                  <1>     lodsb
   398 00004EB6 AA                  <1>     stosb
   399 00004EB7 84C0                <1>     test al, al
   400 00004EB9 750A                <1>     jnz .notNul
   401 00004EBB 3806                <1>     cmp byte [rsi], al
   402 00004EBD 7506                <1>     jnz .notNul
   403                              <1>     ;Here, we have encountered our double null!
   404 00004EBF FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   405 00004EC1 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   406 00004EC3 AA                  <1>     stosb
   407                              <1>     return
    13                              <2> %%_ret:
    14 00004EC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> .notNul:
   409 00004EC5 FFC9                <1>     dec ecx ;One less char to copy over
   410 00004EC7 75EC                <1>     jnz .lp
   411                              <1> .err:
   412 00004EC9 4881EF02000000      <1>     sub rdi, 2
   413 00004ED0 488D156BBAFFFF      <1>     lea rdx, noEnvSpace
   414 00004ED7 E829F1FFFF          <1>     call printString
   415 00004EDC 31C0                <1>     xor eax, eax
   416 00004EDE 66AB                <1>     stosw   ;Store 0 word
   417                              <1>     return
    13                              <2> %%_ret:
    14 00004EE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> getMasterEnv:
   420                              <1> ;Walks the psp chain to the first self parent.
   421                              <1> ;Output: rsi -> Environment of the first self-parent program
   422 00004EE1 4150                <1>     push r8
   423                              <1> .lp:
   424 00004EE3 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   425 00004EE7 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   426 00004EEA 7405                <1>     je .exit
   427 00004EEC 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   428 00004EEF EBF2                <1>     jmp short .lp
   429                              <1> .exit:
   430 00004EF1 4158                <1>     pop r8
   431 00004EF3 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004EF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> 
   435                              <1> ;Loader Data here
   436                              <1> initString: 
   437 00004EF8 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   437 00004F01 2056657273696F6E20- <1>
   437 00004F0A 24                  <1>
   438                              <1> initString2:
   439 00004F0B 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   439 00004F14 687420323032322C20- <1>
   439 00004F1D 323032342C20596C6C- <1>
   439 00004F26 2042757A6F6B752E    <1>
   440 00004F2E 0D0A24              <1>     db CR,LF,"$"
   441 00004F31 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   441 00004F3A 20444F532076657273- <1>
   441 00004F43 696F6E0D0A24        <1>
   442 00004F49 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   442 00004F52 20434F4D4D414E4420- <1>
   442 00004F5B 736561726368206469- <1>
   442 00004F64 726563746F72792062- <1>
   442 00004F6D 61640D0A24          <1>
   443 00004F72 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   443 00004F7B 6E7669726F6E6D656E- <1>
   443 00004F84 742053697A650D0A24  <1>
   444 00004F8D 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   445 00004F8E 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   446 00004F8F 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

