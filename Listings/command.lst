     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53 0000011D 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000126 000000000000000000- <1>
    53 0000012F 000000000000000000- <1>
    53 00000138 000000000000000000- <1>
    53 00000141 000000000000000000- <1>
    53 0000014A 000000000000000000- <1>
    53 00000153 000000000000000000- <1>
    53 0000015C 000000000000000000- <1>
    53 00000165 000000000000000000- <1>
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 000000000000000000- <1>
    53 00000192 000000000000000000- <1>
    53 0000019B 0000                <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 000000000000000000- <1>
    56 0000026E 000000000000000000- <1>
    56 00000277 000000000000000000- <1>
    56 00000280 000000000000000000- <1>
    56 00000289 000000000000000000- <1>
    56 00000292 000000000000000000- <1>
    56 0000029B 0000                <1>
    57 0000029D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002A6 000000000000000000- <1>
    57 000002AF 000000000000000000- <1>
    57 000002B8 000000000000000000- <1>
    57 000002C1 000000000000000000- <1>
    57 000002CA 000000000000000000- <1>
    57 000002D3 000000000000000000- <1>
    57 000002DC 000000000000000000- <1>
    57 000002E5 00000000000000      <1>
    58                              <1> 
    59 000002EC 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F5 0000                <1>
    60 000002F7 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000300 00000000            <1>
    61 00000304 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 0000030D 0000000000          <1>
    62                              <1> 
    63 00000312 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031B 000000000000000000- <1>
    63 00000324 000000000000000000- <1>
    63 0000032D 000000000000000000- <1>
    63 00000336 000000000000000000- <1>
    63 0000033F 000000000000000000- <1>
    63 00000348 000000000000000000- <1>
    63 00000351 000000000000000000- <1>
    63 0000035A 00000000000000      <1>
    64 00000361 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036A 000000000000000000- <1>
    64 00000373 000000000000000000- <1>
    64 0000037C 000000000000000000- <1>
    64 00000385 000000000000000000- <1>
    64 0000038E 000000000000000000- <1>
    64 00000397 000000000000000000- <1>
    64 000003A0 000000000000000000- <1>
    64 000003A9 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B0 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003B9 000000000000000000- <1>
    67 000003C2 000000000000000000- <1>
    67 000003CB 000000000000000000- <1>
    67 000003D4 000000000000000000- <1>
    67 000003DD 000000000000000000- <1>
    67 000003E6 000000000000000000- <1>
    67 000003EF 000000000000000000- <1>
    67 000003F8 00000000000000      <1>
    68 000003FF 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 00000408 000000000000000000- <1>
    68 00000411 000000000000000000- <1>
    68 0000041A 000000000000000000- <1>
    68 00000423 000000000000000000- <1>
    68 0000042C 000000000000000000- <1>
    68 00000435 000000000000000000- <1>
    68 0000043E 000000000000000000- <1>
    68 00000447 00000000000000      <1>
    69                              <1> 
    70 0000044E 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 00000456 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 0000045E 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000467 000000000000000000- <1>
    73 00000470 000000000000000000- <1>
    73 00000479 000000000000000000- <1>
    73 00000482 000000000000000000- <1>
    73 0000048B 000000000000000000- <1>
    73 00000494 000000000000000000- <1>
    73 0000049D 000000000000000000- <1>
    73 000004A6 000000000000000000- <1>
    73 000004AF 000000000000000000- <1>
    73 000004B8 000000000000000000- <1>
    73 000004C1 000000000000000000- <1>
    73 000004CA 000000000000000000- <1>
    73 000004D3 000000000000000000- <1>
    73 000004DC 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004DE 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000004DF 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000004E0 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000004E1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000004E2 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000056B 000000000000000000- <1>
    85 00000574 000000000000000000- <1>
    85 0000057D 000000000000000000- <1>
    85 00000586 000000000000000000- <1>
    85 0000058F 000000000000000000- <1>
    85 00000598 000000000000000000- <1>
    85 000005A1 000000000000000000- <1>
    85 000005AA 000000000000000000- <1>
    85 000005B3 000000000000000000- <1>
    85 000005BC 000000000000000000- <1>
    85 000005C5 000000000000000000- <1>
    85 000005CE 000000000000000000- <1>
    85 000005D7 000000000000000000- <1>
    85 000005E0 0000                <1>
    86 000005E2 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000005EA 2E                  <1> dirSPExt    db "."
    88 000005EB 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 000005EE FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 000005EF 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 000005F5 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 000005F6 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 000005FE 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 00000601 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000605 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 0000061A 00                  <1> td1 db 0    ;Minutes/Year
   103 0000061B 00                  <1> td2 db 0    ;Hours/Zero
   104 0000061C 00                  <1> td3 db 0    ;Hundredths/Day
   105 0000061D 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy Buffers
   108 0000061E 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   108 00000627 000000000000000000- <1>
   108 00000630 000000000000000000- <1>
   108 00000639 000000000000000000- <1>
   108 00000642 000000000000000000- <1>
   108 0000064B 000000000000000000- <1>
   108 00000654 000000000000000000- <1>
   108 0000065D 000000000000000000- <1>
   108 00000666 000000000000000000- <1>
   108 0000066F 000000000000000000- <1>
   108 00000678 000000000000000000- <1>
   108 00000681 000000000000000000- <1>
   108 0000068A 000000000000000000- <1>
   108 00000693 000000000000000000- <1>
   108 0000069C 0000                <1>
   109 0000069E 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   109 000006A7 000000000000000000- <1>
   109 000006B0 000000000000000000- <1>
   109 000006B9 000000000000000000- <1>
   109 000006C2 000000000000000000- <1>
   109 000006CB 000000000000000000- <1>
   109 000006D4 000000000000000000- <1>
   109 000006DD 000000000000000000- <1>
   109 000006E6 000000000000000000- <1>
   109 000006EF 000000000000000000- <1>
   109 000006F8 000000000000000000- <1>
   109 00000701 000000000000000000- <1>
   109 0000070A 000000000000000000- <1>
   109 00000713 000000000000000000- <1>
   109 0000071C 0000                <1>
   110                              <1> ;Copy Handles
   111 0000071E FFFF                <1> sourceHdl   dw -1
   112 00000720 FFFF                <1> destHdl     dw -1
   113 00000722 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 00000724 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 0000072D 000000000000000000- <1>
   115 00000736 000000000000000000- <1>
   115 0000073F 000000000000000000- <1>
   115 00000748 000000000000000000- <1>
   115 00000751 000000000000000000- <1>
   115 0000075A 000000000000000000- <1>
   115 00000763 000000000000000000- <1>
   115 0000076C 000000000000000000- <1>
   115 00000775 000000000000000000- <1>
   115 0000077E 000000000000000000- <1>
   115 00000787 000000000000000000- <1>
   115 00000790 000000000000000000- <1>
   115 00000799 000000000000000000- <1>
   115 000007A2 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007A4 03444952            <1>     db 3, "DIR"
     8 000007A8 B117                <1>     dw dir - startLbl
     9                              <1> 
    10 000007AA 024344              <1>     db 2, "CD"
    11 000007AD 5B1B                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007AF 054348444952        <1>     db 5, "CHDIR"
    14 000007B5 5B1B                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007B7 024D44              <1>     db 2, "MD"
    17 000007BA FD1B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007BC 054D4B444952        <1>     db 5, "MKDIR"
    20 000007C2 FD1B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007C4 025244              <1>     db 2, "RD"
    23 000007C7 491C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007C9 05524D444952        <1>     db 5, "RMDIR"
    26 000007CF 491C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007D1 0344454C            <1>     db 3, "DEL"
    29 000007D5 731E                <1>     dw erase - startLbl
    30                              <1> 
    31 000007D7 054552415345        <1>     db 5, "ERASE"
    32 000007DD 731E                <1>     dw erase - startLbl
    33                              <1> 
    34 000007DF 0444415445          <1>     db 4, "DATE"
    35 000007E4 9C1E                <1>     dw date - startLbl
    36                              <1> 
    37 000007E6 0454494D45          <1>     db 4, "TIME"
    38 000007EB 651F                <1>     dw time - startLbl
    39                              <1> 
    40 000007ED 04434F5059          <1>     db 4, "COPY"
    41 000007F2 951C                <1>     dw copy - startLbl
    42                              <1> 
    43 000007F4 0443545459          <1>     db 4, "CTTY"
    44 000007F9 0020                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007FB 03434C53            <1>     db 3, "CLS"
    47 000007FF 9B20                <1>     dw cls - startLbl
    48                              <1> 
    49 00000801 05425245414B        <1>     db 5, "BREAK"
    50 00000807 0D21                <1>     dw break - startLbl
    51                              <1> 
    52 00000809 06564552494659      <1>     db 6, "VERIFY"
    53 00000810 8E21                <1>     dw verify - startLbl
    54                              <1> 
    55 00000812 0652454E414D45      <1>     db 6, "RENAME"
    56 00000819 0B22                <1>     dw rename - startLbl
    57                              <1> 
    58 0000081B 044D4F5645          <1>     db 4, "MOVE"
    59 00000820 0B22                <1>     dw rename - startLbl
    60                              <1>     
    61 00000822 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000082B BD24                <1>     dw truename - startLbl
    63                              <1> 
    64 0000082D 03564552            <1>     db 3, "VER"
    65 00000831 D226                <1>     dw version - startLbl
    66                              <1> 
    67 00000833 03564F4C            <1>     db 3, "VOL"
    68 00000837 0526                <1>     dw volume - startLbl
    69                              <1> 
    70 00000839 034D454D            <1>     db 3, "MEM"
    71 0000083D 1627                <1>     dw memory - startLbl
    72                              <1> 
    73 0000083F 0445584954          <1>     db 4, "EXIT"
    74 00000844 F828                <1>     dw exit - startLbl
    75                              <1> 
    76 00000846 0454595045          <1>     db 4, "TYPE"
    77 0000084B 6028                <1>     dw type - startLbl
    78                              <1> 
    79 0000084D 054C4142454C        <1>     db 5, "LABEL"
    80 00000853 2F25                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 00000855 054D4B4C424C        <1>     db 5, "MKLBL"
    84 0000085B 5925                <1>     dw mklbl - startLbl
    85                              <1> 
    86 0000085D 05524D4C424C        <1>     db 5, "RMLBL"
    87 00000863 9425                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 00000865 05524E4C424C        <1>     db 5, "RNLBL"
    90 0000086B CF25                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 0000086D 05544F554348        <1>     db 5, "TOUCH"
    93 00000873 D822                <1>     dw touch - startLbl
    94                              <1> 
    95 00000875 044A4F494E          <1>     db 4, "JOIN"
    96 0000087A 1323                <1>     dw join - startLbl
    97                              <1> 
    98 0000087C 055355425354        <1>     db 5, "SUBST"
    99 00000882 D623                <1>     dw subst - startLbl
   100                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   101 00000884 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000885 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000888 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000088D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000896 696C65206D69737369- <1>
     4 0000089F 6E670D0A24          <1>
     5 000008A4 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008AD 6469736B2077697468- <1>
     5 000008B6 206261746368206669- <1>
     5 000008BF 6C65                <1>
     6 000008C1 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008CA 737320616E79206B65- <1>
     6 000008D3 79207768656E207265- <1>
     6 000008DC 6164790D0A24        <1>
     7 000008E2 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000008EB 6E64206F722066696C- <1>
     7 000008F4 65206E616D650D0A24  <1>
     8 000008FD 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000906 2066696C65206E616D- <1>
     8 0000090F 65206F7220          <1>
     9 00000914 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 0000091D 666F756E640D0A24    <1>
    10 00000925 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 0000092E 656E74206469736B20- <1>
    10 00000937 73706163650D0A24    <1>
    11 0000093F 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000948 7669726F6E6D656E74- <1>
    11 00000951 2073706163650D0A24  <1>
    12 0000095A 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000963 74696F6E206572726F- <1>
    12 0000096C 720D0A24            <1>
    13 00000970 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000979 6F7420626520636F70- <1>
    13 00000982 696564206F6E746F20- <1>
    13 0000098B 697473656C660D0A24  <1>
    14 00000994 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000099D 662064657374696E61- <1>
    14 000009A6 74696F6E206C6F7374- <1>
    14 000009AF 206265666F72652063- <1>
    14 000009B8 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000009BE 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000009C7 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 000009D0 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 000009D9 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 000009DA 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 000009E3 65650D0A24          <1>
    21 000009E8 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 000009F1 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009FA 726976652073706563- <1>
    23 00000A03 696669636174696F6E- <1>
    23 00000A0C 0D0A24              <1>
    24 00000A0F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000A18 6B6579207768656E20- <1>
    24 00000A21 7265616479202E202E- <1>
    24 00000A2A 202E2024            <1>
    25 00000A2E 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000A37 6172616D657465720D- <1>
    25 00000A40 0A24                <1>
    26                              <1> 
    27 00000A42 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A4B 576564546875467269- <1>
    27 00000A54 536174              <1>
    28 00000A57 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A60 206461746524        <1>
    29 00000A66 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A6F 6174652069732024    <1>
    30 00000A77 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A80 657720646174652024  <1>
    31 00000A89 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A92 293A2024            <1>
    32 00000A96 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A9F 293A2024            <1>
    33 00000AA3 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000AAC 293A2024            <1>
    34 00000AB0 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000AB9 2074696D6524        <1>
    35 00000ABF 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000AC8 696D652069732024    <1>
    36 00000AD0 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000AD9 65772074696D653A20- <1>
    36 00000AE2 24                  <1>
    37                              <1> 
    38 00000AE3 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000AEC 7572652028592F4E29- <1>
    38 00000AF5 3F2024              <1>
    39                              <1> 
    40 00000AF8 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000B01 56657273696F6E2024  <1>
    41                              <1> 
    42 00000B0A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000B13 6E2064726976652024  <1>
    43 00000B1C 2069732024          <1> volOk   db " is $"
    44 00000B21 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000B2A 6162656C24          <1>
    45                              <1> 
    46 00000B2F 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B38 69726563746F72790D- <1>
    46 00000B41 0A24                <1>
    47 00000B43 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B4C 206372656174652064- <1>
    47 00000B55 69726563746F72790D- <1>
    47 00000B5E 0A24                <1>
    48 00000B60 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B69 6174682C206E6F7420- <1>
    48 00000B72 6469726563746F7279- <1>
    48 00000B7B 2C0D0A              <1>
    49 00000B7E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B87 6F7279206E6F742065- <1>
    49 00000B90 6D7074790D0A24      <1>
    50 00000B97 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000BA0 79206F66202024      <1>
    51 00000BA7 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000BB0 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000BB9 7269766520696E2073- <1>
    52 00000BC2 656172636820706174- <1>
    52 00000BCB 680D0A24            <1>
    53 00000BCF 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000BD8 65766963650D0A24    <1>
    54 00000BE0 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000BE9 20666F756E640D0A24  <1>
    55 00000BF2 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000BFB 726F720D0A24        <1>
    56 00000C01 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000C0A 6F74206265206E6573- <1>
    56 00000C13 7465640D0A24        <1>
    57 00000C19 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000C22 6174652066696C6520- <1>
    57 00000C2B 6572726F7220647572- <1>
    57 00000C34 696E6720706970650D- <1>
    57 00000C3D 0A24                <1>
    58 00000C3F 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000C48 2062696E6172792072- <1>
    58 00000C51 656164732066726F6D- <1>
    58 00000C5A 206120646576696365- <1>
    58 00000C63 0D0A24              <1>
    59 00000C66 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C6C 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C71 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C7A 24                  <1>
    62 00000C7B 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C84 2024                <1>
    63 00000C86 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C8F 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C98 617468206F72206669- <1>
    64 00000CA1 6C65206E616D650D0A- <1>
    64 00000CAA 24                  <1>
    65 00000CAB 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000CB4 756D626572206F6620- <1>
    65 00000CBD 706172616D65746572- <1>
    65 00000CC6 730D0A24            <1>
    66 00000CCA 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000CD3 74696E6720746F2064- <1>
    66 00000CDC 6576696365          <1>
    67 00000CE1 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000CE5 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000CEE 20202020202020546F- <1>
    69 00000CF7 74616C207379737465- <1>
    69 00000D00 6D206D656D6F72793A- <1>
    69 00000D09 2024                <1>
    70 00000D0B 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000D14 20202020202020204D- <1>
    70 00000D1D 656D6F727920757365- <1>
    70 00000D26 6420627920444F533A- <1>
    70 00000D2F 2024                <1>
    71 00000D31 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000D3A 656D6F727920757365- <1>
    71 00000D43 64206279206170706C- <1>
    71 00000D4C 69636174696F6E733A- <1>
    71 00000D55 2024                <1>
    72 00000D57 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000D60 656D6F727920726573- <1>
    72 00000D69 657276656420627920- <1>
    72 00000D72 68617264776172653A- <1>
    72 00000D7B 2024                <1>
    73 00000D7D 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D86 202020202020202020- <1>
    73 00000D8F 2020202020204D656D- <1>
    73 00000D98 6F727920667265653A- <1>
    73 00000DA1 2024                <1>
    74 00000DA3 20627974657324      <1> memByte db " bytes$"
    75 00000DAA 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000DB3 6F7420417373657274- <1>
    75 00000DBC 61696E20444F532045- <1>
    75 00000DC5 6E74727920506F696E- <1>
    75 00000DCE 7424                <1>
    76 00000DD0 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000DD9 416C6C6F636174696F- <1>
    76 00000DE2 6E204572726F7224    <1>
    77 00000DEA 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000DF3 4572726F7224        <1>
    78 00000DF9 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000E02 68616C74656424      <1>
    79                              <1> 
    80 00000E09 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000E12 206372656174652066- <1>
    80 00000E1B 696C650D0A24        <1>
    81 00000E21 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000E2A 206372656174652070- <1>
    81 00000E33 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000E38 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000E41 6F6E206572726F720D- <1>
    83 00000E4A 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000E4B 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000E4F 2020202024          <1> fourSpc  db "    $"
    88 00000E54 20202024            <1> threeSpc db "   $"
    89 00000E58 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000E5B 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000E64 696679204F4E206F72- <1>
    91 00000E6D 204F46460D0A24      <1>
    92 00000E74 504154483D          <1> pathEVar db "PATH="
    93 00000E79 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E80 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E84 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E87 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E8B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E8E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E90 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E93 CD21                <1>     int 21h
    11 00000E95 EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E97 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E9C CD21                <1>     int 21h
    15 00000E9E 66890568F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000EA5 488D157D210000      <1>     lea rdx, critErrorHandler
    18 00000EAC 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000EB0 B824250000          <1>     mov eax, 2524h
    20 00000EB5 CD21                <1>     int 21h
    21 00000EB7 488D15FB230000      <1>     lea rdx, int23h
    22 00000EBE 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000EC2 B823250000          <1>     mov eax, 2523h
    24 00000EC7 CD21                <1>     int 21h
    25 00000EC9 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000ED0 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000ED4 B822250000          <1>     mov eax, 2522h
    28 00000ED9 CD21                <1>     int 21h
    29 00000EDB F605CDF1FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EE2 7574                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EE4 E8BD040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EE9 0FB70D37F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EF0 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EF5 B43E                <1>     mov ah, 3Eh ;File close
    37 00000EF7 CD21                <1>     int 21h
    38 00000EF9 FFC3                <1>     inc ebx ;Goto next file
    39 00000EFB 39CB                <1>     cmp ebx, ecx
    40 00000EFD 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000EFF 488B25FFF0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000F06 FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000F07 C6058FF2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000F0E E8A91B0000          <1>     call printCRLF
    48                              <1> .inputMain2:
    49 00000F13 E81D1F0000          <1>     call clearCommandLineState
    50 00000F18 E8E61E0000          <1>     call printPrompt
    51                              <1> 
    52 00000F1D 488D1579F2FFFF      <1>     lea rdx, inBuffer
    53 00000F24 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    54 00000F29 CD21                <1>     int 21h
    55 00000F2B E88C1B0000          <1>     call printCRLF  ;Note we have accepted input
    56                              <1> ;First check we had something typed in of length greater than 0
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000F30 803D67F2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    59 00000F37 74DA                <1>     je .inputMain2
    60                              <1>     ;Copy over the input text
    61 00000F39 488D355DF2FFFF      <1>     lea rsi, inBuffer
    62 00000F40 488D3DD6F2FFFF      <1>     lea rdi, cmdBuffer
    63 00000F47 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    64 00000F4C F3A4                <1>     rep movsb
    65                              <1> .pipeLoop:
    66 00000F4E E838000000          <1>     call parseInput
    67 00000F53 E8CE010000          <1>     call doCommandLine
    68                              <1> .pipeProceed:
    69 00000F58 E849040000          <1>     call cleanUpRedir
    70 00000F5D 488B0543F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    71 00000F64 48890534F1FFFF      <1>     mov qword [cmdStartPtr], rax
    72 00000F6B F6053DF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    73 00000F72 749A                <1>     jz .inputMain
    74 00000F74 E8A11E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    75 00000F79 EBD3                <1>     jmp short .pipeLoop
    76                              <1> .dfltErrExit:
    77 00000F7B 488D1560F9FFFF      <1>     lea rdx, badCmd
    78 00000F82 B409                <1>     mov ah, 09h
    79 00000F84 CD21                <1>     int 21h
    80 00000F86 E983FFFFFF          <1>     jmp .inputMain
    81                              <1> 
    82                              <1> parseInput:
    83                              <1> ;EndOff is set up before entering this part
    84                              <1> ;Copies a nicely formatted version of the input command line
    85                              <1> ; without any redirections to psp.dta
    86                              <1>     breakpoint
    81 00000F8B 6687DB              <2> xchg bx, bx
    87 00000F8E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    88 00000F95 488B3503F1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    89 00000F9C 4885F6              <1>     test rsi, rsi
    90 00000F9F 7507                <1>     jnz .notNewCmd
    91 00000FA1 488D3576F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    92                              <1> .notNewCmd:
    93 00000FA8 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    94 00000FAB E8321E0000          <1>     call skipSeparators ;Skip any preceeding spaces
    95 00000FB0 66AD                <1>     lodsw   ;Get the first two chars into ax
    96 00000FB2 668905FBF0FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    97 00000FB9 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    98 00000FC0 56                  <1>     push rsi
    99 00000FC1 57                  <1>     push rdi
   100 00000FC2 488D3DD4F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   101 00000FC9 57                  <1>     push rdi
   102 00000FCA E804070000          <1>     call copyCommandTailItemProgram
   103 00000FCF 5F                  <1>     pop rdi
   104 00000FD0 9C                  <1>     pushfq  ;Save the CF state
   105 00000FD1 E8AB1D0000          <1>     call strlen
   106 00000FD6 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   107 00000FD8 58                  <1>     pop rax ;Get the CF state in al
   108 00000FD9 5F                  <1>     pop rdi
   109 00000FDA 5E                  <1>     pop rsi
   110 00000FDB F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   111 00000FDD A801                <1>     test al, 1  ;Was CF set?
   112 00000FDF 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   113                              <1> .cmdLineProcess:
   114 00000FE5 E8F81D0000          <1>     call skipSeparators ;Go to the next char in the input line
   115                              <1> .redirFound:
   116 00000FEA AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   117 00000FEB 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   118 00000FED 747C                <1>     je .exit
   119 00000FEF E822050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   120 00000FF4 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   121 00000FF6 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   122 00000FF8 B020                <1>     mov al, " "
   123 00000FFA AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   124 00000FFB 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   125 00000FFE F605B7F0FFFFFF      <1>     test byte [arg1Flg], -1
   126 00001005 7521                <1>     jnz .arg2
   127                              <1> .arg1:
   128 00001007 C605AEF0FFFFFF      <1>     mov byte [arg1Flg], -1
   129 0000100E E8CF1D0000          <1>     call skipSeparators
   130 00001013 4889F0              <1>     mov rax, rsi
   131 00001016 488D1D00F2FFFF      <1>     lea rbx, cmdBuffer
   132 0000101D 4829D8              <1>     sub rax, rbx
   133 00001020 880597F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   134 00001026 EB2A                <1>     jmp short .argCommon
   135                              <1> .arg2:
   136 00001028 F60590F0FFFFFF      <1>     test byte [arg2Flg], -1
   137 0000102F 7521                <1>     jnz .argCommon
   138 00001031 C60587F0FFFFFF      <1>     mov byte [arg2Flg], -1
   139 00001038 E8A51D0000          <1>     call skipSeparators
   140 0000103D 4889F0              <1>     mov rax, rsi
   141 00001040 488D1DD6F1FFFF      <1>     lea rbx, cmdBuffer
   142 00001047 4829D8              <1>     sub rax, rbx
   143 0000104A 880570F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   144 00001050 EB00                <1>     jmp short .argCommon
   145                              <1> .argCommon:
   146                              <1>     ;More than two arguments? Do nothing more than just copy it
   147                              <1>     ; over. If we encounter an embedded CR, exit there too
   148 00001052 E88B1D0000          <1>     call skipSeparators
   149 00001057 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   150 0000105A 740F                <1>     je .exit
   151                              <1>     ;If not, we copy it over
   152 0000105C E890060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   153 00001061 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   154 00001065 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   155                              <1> .exit:
   156 0000106B 48FFCE              <1>     dec rsi
   157 0000106E 48893532F0FFFF      <1>     mov qword [cmdEndPtr], rsi
   158 00001075 B00D                <1>     mov al, CR
   159 00001077 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   160                              <1>     ;Now compute the command line length 
   161 00001078 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   162 0000107F B00D                <1>     mov al, CR
   163 00001081 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   164 00001083 FFC9                <1>     dec ecx ;rcx = -1
   165 00001085 F2AE                <1>     repne scasb
   166 00001087 F7D1                <1>     not ecx
   167 00001089 FEC9                <1>     dec cl  ;Dont include terminating CR
   168 0000108B 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   169 00001092 880F                <1>     mov byte [rdi], cl
   170                              <1>     ;Before returning, we copy the command name to cmdName
   171 00001094 488D3D02F2FFFF      <1>     lea rdi, cmdPathSpec
   172 0000109B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   173 0000109E 30C0                <1>     xor al, al  ;Search for the terminating null
   174 000010A0 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   175 000010A5 F2AE                <1>     repne scasb
   176 000010A7 48FFCF              <1>     dec rdi ;Go to the last char in the command
   177 000010AA 4889FE              <1>     mov rsi, rdi
   178 000010AD FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   179                              <1> .keepSearching:
   180 000010AE AC                  <1>     lodsb
   181 000010AF 3A0576EFFFFF        <1>     cmp al, byte [pathSep]
   182 000010B5 740B                <1>     je .cmdStartFnd
   183 000010B7 4839DE              <1>     cmp rsi, rbx
   184 000010BA 75F2                <1>     jne .keepSearching
   185 000010BC 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   186 000010BF 48FFCE              <1>     dec rsi
   187                              <1> .cmdStartFnd:
   188 000010C2 48FFC6              <1>     inc rsi
   189 000010C5 48FFC6              <1>     inc rsi ;Go past the pathsep
   190 000010C8 FC                  <1>     cld ;Go the sane way again
   191 000010C9 488D3D35F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   192 000010D0 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   193 000010D1 B90E000000          <1>     mov ecx, cmdNameL
   194 000010D6 30C0                <1>     xor al, al
   195 000010D8 F3AA                <1>     rep stosb
   196 000010DA 5F                  <1>     pop rdi
   197 000010DB 31C9                <1>     xor ecx, ecx
   198 000010DD 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   199                              <1> .cmdGetChar:
   200 000010DE AC                  <1>     lodsb
   201 000010DF 84C0                <1>     test al, al ;Did we find the terminating null?
   202 000010E1 7411                <1>     jz .nameLenFnd
   203 000010E3 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   204 000010E5 740D                <1>     je .nameLenFnd
   205 000010E7 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   206 000010E9 AA                  <1>     stosb   ;and store it
   207 000010EA FFC1                <1>     inc ecx
   208 000010EC 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   209 000010F2 72EA                <1>     jb .cmdGetChar
   210                              <1> .nameLenFnd:
   211 000010F4 880D0AF2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   212                              <1>     ;Now finally, create a FCB filespec
   213 000010FA 488D3DEBF1FFFF      <1>     lea rdi, fcbCmdSpec
   214 00001101 57                  <1>     push rdi
   215 00001102 B90B000000          <1>     mov ecx, fcbNameL
   216 00001107 B020                <1>     mov al, " " ;Fill with spaces
   217 00001109 F3AA                <1>     rep stosb
   218 0000110B 5F                  <1>     pop rdi
   219 0000110C 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   220 0000110D E8481D0000          <1>     call asciiToFCB
   221 00001112 488D35D3F1FFFF      <1>     lea rsi, fcbCmdSpec
   222 00001119 488D3DD7F1FFFF      <1>     lea rdi, cmdSpec
   223 00001120 E8901D0000          <1>     call FCBToAsciiz
   224                              <1>     return
    13                              <2> %%_ret:
    14 00001125 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> 
   226                              <1> doCommandLine:
   227 00001126 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   228                              <1>     ;The following check accounts for the end of a piped command
   229 0000112D 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   230                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001130 74(25)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   231 00001132 488D3D89EFFFFF      <1>     lea rdi, cmdFcb
   232 00001139 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   233 0000113E CD21                <1>     int 21h
   234 00001140 0FB71D6DEFFFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   235 00001147 80FF3A              <1>     cmp bh, ":"
   236 0000114A 752E                <1>     jne .noDriveSpecified
   237 0000114C 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   238 0000114E 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   239 00001151 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   240 00001154 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   241 00001156 7415                <1>     je .badDrive
   242                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   243 00001158 803DA5F1FFFF02      <1>     cmp byte [cmdName], 2
   244 0000115F 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   245 00001161 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   246 00001163 CD21                <1>     int 21h 
   247 00001165 B419                <1>     mov ah, 19h
   248 00001167 CD21                <1>     int 21h     ;Get current drive
   249 00001169 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   250                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000116B 74(25)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   251                              <1> .badDrive:
   252 0000116D 488D157DF8FFFF      <1>     lea rdx, badDrv
   253 00001174 B409                <1>     mov ah, 09h
   254 00001176 CD21                <1>     int 21h
   255 00001178 F9                  <1>     stc
   256                              <1>     return
    13                              <2> %%_ret:
    14 00001179 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> .noDriveSpecified:
   258                              <1> ;Now we set the two FCB's in the command line
   259 0000117A F6053BEFFFFFFF      <1>     test byte [arg1Flg], -1
   260 00001181 744D                <1>     jz .fcbArgsDone
   261 00001183 0FB60533EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   262 0000118A 488D358CF0FFFF      <1>     lea rsi, cmdBuffer
   263 00001191 4801C6              <1>     add rsi, rax    ;Point to first argument
   264 00001194 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   265 00001198 B801290000          <1>     mov eax, 2901h
   266 0000119D CD21                <1>     int 21h
   267 0000119F 880519EFFFFF        <1>     mov byte [arg1FCBret], al
   268 000011A5 F60513EFFFFFFF      <1>     test byte [arg2Flg], -1
   269 000011AC 7422                <1>     jz .fcbArgsDone
   270 000011AE 0FB6050BEFFFFF      <1>     movzx eax, byte [arg2Off]
   271 000011B5 488D3561F0FFFF      <1>     lea rsi, cmdBuffer
   272 000011BC 4801C6              <1>     add rsi, rax    ;Point to first argument
   273 000011BF 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   274 000011C3 B801290000          <1>     mov eax, 2901h
   275 000011C8 CD21                <1>     int 21h
   276 000011CA 8805F1EEFFFF        <1>     mov byte [arg2FCBret], al
   277                              <1> .fcbArgsDone:
   278 000011D0 488D1D46F0FFFF      <1>     lea rbx, cmdBuffer
   279 000011D7 488D3526F1FFFF      <1>     lea rsi, cmdName
   280 000011DE B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   281 000011E3 BAFFFF0000          <1>     mov edx, 0FFFFh
   282 000011E8 B5FF                <1>     mov ch, -1
   283 000011EA CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   284 000011EC B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   285 000011F1 BAFFFF0000          <1>     mov edx, 0FFFFh
   286 000011F6 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   287 000011F8 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   288                              <1>             ;        al = 0  if the command should be executed as usual
   289 000011FA 84C0                <1>     test al, al
   290 000011FC 741D                <1>     jz .executeInternal
   291                              <1>     ;Here we execute externally and return to the prompt
   292                              <1>     ; as if it was an internal execution
   293 000011FE 488D3598EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   294 00001205 488D1DB6EEFFFF      <1>     lea rbx, cmdFcb
   295 0000120C B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   296 00001211 BAFFFF0000          <1>     mov edx, 0FFFFh
   297 00001216 B5FF                <1>     mov ch, -1
   298 00001218 CD2F                <1>     int 2Fh 
   299                              <1>     return
    13                              <2> %%_ret:
    14 0000121A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   300                              <1> .executeInternal:
   301                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   302                              <1> ;rsi points after the command terminator in the command tail
   303 0000121B 488D1D82F5FFFF      <1>     lea rbx, functionTable
   304                              <1> .nextEntry:
   305 00001222 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   306 00001225 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   307 00001228 0F8400170000        <1>     je launchChild      ;If so, check externally now
   308 0000122E 380DD0F0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   309 00001234 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   310                              <1>     ;Here they have the same length so lets see if the name is the same
   311 00001236 56                  <1>     push rsi
   312                              <1>     ;ecx has the length to compare
   313 00001237 51                  <1>     push rcx
   314 00001238 488D7301            <1>     lea rsi, qword [rbx + 1]
   315 0000123C 488D3DC2F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   316 00001243 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   317 00001245 59                  <1>     pop rcx
   318 00001246 5E                  <1>     pop rsi
   319 00001247 7516                <1>     jne .gotoNextEntry
   320                              <1>     ;Here it was found both strings are equal
   321 00001249 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   322 0000124E 480FB71F            <1>     movzx rbx, word [rdi]
   323 00001252 488D3DA7EDFFFF      <1>     lea rdi, startLbl
   324 00001259 4801FB              <1>     add rbx, rdi
   325 0000125C FFD3                <1>     call rbx    ;Call this function...
   326                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000125E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   327                              <1> .gotoNextEntry:
   328 0000125F 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   329 00001266 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   330 00001269 EBB7                <1>     jmp short .nextEntry
   331                              <1> .dfltErrExit:
   332 0000126B 488D1570F6FFFF      <1>     lea rdx, badCmd
   333 00001272 B409                <1>     mov ah, 09h
   334 00001274 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 00001276 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> 
   338                              <1> checkExtensionExec:
   339                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   340                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   341                              <1> ;         If ZF=ZE and CF=CY => Batch file
   342 00001277 8B054EEEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   343 0000127D 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   344 00001282 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   345 00001287 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   346 0000128C 3D434F4D20          <1>     cmp eax, "COM "
   347                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001291 74(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   348 00001293 3D45584520          <1>     cmp eax, "EXE "
   349                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001298 74(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   350 0000129A 3D42415420          <1>     cmp eax, "BAT "
   351                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000129F 75(76)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   352 000012A1 F9                  <1>     stc
   353                              <1>     return
    13                              <2> %%_ret:
    14 000012A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> 
   355                              <1> redirFailure:
   356 000012A3 488D158EFBFFFF      <1>     lea rdx, redirErrMsg
   357 000012AA B913000000          <1>     mov ecx, redirErrMsgL
   358 000012AF EB0C                <1>     jmp short redirPipeFailureCommon
   359                              <1> pipeFailure:
   360 000012B1 488D1569FBFFFF      <1>     lea rdx, pipeErrMsg
   361 000012B8 B917000000          <1>     mov ecx, pipeErrMsgL
   362                              <1> redirPipeFailureCommon:
   363                              <1> ;This routine is called if any problems happen during 
   364                              <1> ;This routine tries to close whatever handles are not -1 and delete
   365                              <1> ; pipe files if the pipe count is not 0
   366                              <1> ;It resets all variables and proceeds.
   367 000012BD B800400000          <1>     mov eax, 4000h  ;Write handle
   368 000012C2 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   369 000012C7 CD21                <1>     int 21h
   370 000012C9 31DB                <1>     xor ebx, ebx    ;Select STDIN
   371 000012CB E8C6000000          <1>     call .closeHandle
   372 000012D0 FFC3                <1>     inc ebx         ;Select STDOUT
   373 000012D2 E8BF000000          <1>     call .closeHandle
   374 000012D7 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   375 000012DC 488D159DFBFFFF      <1>     lea rdx, conName
   376 000012E3 CD21                <1>     int 21h
   377 000012E5 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   378 000012E7 B800450000          <1>     mov eax, 4500h  ;DUP
   379 000012EC CD21                <1>     int 21h
   380 000012EE 66C705BFEDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   381 000012F7 0FB71DBAEDFFFF      <1>     movzx ebx, word [redirSTDIN]
   382 000012FE E893000000          <1>     call .closeHandle
   383                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   384 00001303 66C705ACEDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   385 0000130C 0FB71DA7EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   386 00001313 E87E000000          <1>     call .closeHandle
   387 00001318 66C70599EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   388 00001321 0FB71D88EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   389 00001328 E869000000          <1>     call .closeHandle
   390 0000132D 66C7057AEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   391 00001336 0FB71D75EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   392 0000133D E854000000          <1>     call .closeHandle
   393 00001342 66C70567EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   394 0000134B C6055DEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   395 00001352 488D1557F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   396 00001359 803A00              <1>     cmp byte [rdx], 0
   397 0000135C 7407                <1>     jz .checkOld
   398 0000135E B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   399 00001363 CD21                <1>     int 21h
   400                              <1> .checkOld:
   401 00001365 488D1593F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   402 0000136C 803A00              <1>     cmp byte [rdx],0
   403 0000136F 7407                <1>     jz .pipeNamesComplete
   404 00001371 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   405 00001376 CD21                <1>     int 21h
   406                              <1> .pipeNamesComplete:
   407 00001378 31C0                <1>     xor eax, eax
   408                              <1>     ;Invalidate the pointers and the paths too
   409 0000137A 488905CDF0FFFF      <1>     mov qword [newPipe], rax
   410 00001381 488905CEF0FFFF      <1>     mov qword [oldPipe], rax
   411 00001388 890522F0FFFF        <1>     mov dword [pipe1Filespec], eax
   412 0000138E 89056BF0FFFF        <1>     mov dword [pipe2Filespec], eax
   413 00001394 F9                  <1>     stc
   414                              <1>     return
    13                              <2> %%_ret:
    14 00001395 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   415                              <1> .closeHandle:
   416 00001396 81FBFFFFFFFF        <1>     cmp ebx, -1
   417                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000139C 74(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   418 0000139E B8003E0000          <1>     mov eax, 3E00h
   419 000013A3 CD21                <1>     int 21h
   420                              <1>     return
    13                              <2> %%_ret:
    14 000013A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> cleanUpRedir:
   423                              <1> ;Cleans up the redir stuff after we are done.
   424 000013A6 0FB70503EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   425 000013AD 0FB71DFEECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   426 000013B4 C1E310              <1>     shl ebx, 10h
   427 000013B7 09D8                <1>     or eax, ebx
   428 000013B9 3DFFFFFFFF          <1>     cmp eax, -1
   429 000013BE 750C                <1>     jne .pipe
   430 000013C0 C605E8ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   431 000013C7 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   432                              <1> .pipe:
   433                              <1> ;Pipe processing here
   434                              <1> ;We handle stdin, closing the redir if it is and deleting
   435                              <1> ; the redir file.
   436                              <1> ;Then we handle stdout, moving the redir to stdin.
   437 000013CC 66813DDBECFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   438 000013D5 7443                <1>     je .pipeNostdin
   439                              <1>     ;We close the handle first and delete the file.
   440 000013D7 0FB71DD2ECFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   441 000013DE 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   442 000013E0 B800460000          <1>     mov eax, 4600h
   443 000013E5 CD21                <1>     int 21h
   444 000013E7 0F82C4FEFFFF        <1>     jc pipeFailure
   445 000013ED B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   446 000013F2 CD21                <1>     int 21h
   447 000013F4 0F82B7FEFFFF        <1>     jc pipeFailure
   448 000013FA 488B1555F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   449 00001401 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   450 00001406 CD21                <1>     int 21h
   451 00001408 0F82A3FEFFFF        <1>     jc pipeFailure
   452 0000140E C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   453 00001411 66C70596ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   454                              <1> .pipeNostdin:
   455 0000141A 66813D8FECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   456 00001423 7474                <1>     je .redirInClear
   457                              <1> ;Duplicate STDIN to save across pipe
   458 00001425 B800450000          <1>     mov eax, 4500h
   459 0000142A 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   460 0000142C CD21                <1>     int 21h
   461 0000142E 0F827DFEFFFF        <1>     jc pipeFailure
   462 00001434 66890575ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   463                              <1> 
   464                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   465 0000143B B800460000          <1>     mov eax, 4600h
   466 00001440 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   467 00001442 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   468 00001444 CD21                <1>     int 21h
   469 00001446 0F8265FEFFFF        <1>     jc pipeFailure
   470                              <1> 
   471                              <1> ;Now return the original stdout to stdout
   472 0000144C 89D9                <1>     mov ecx, ebx
   473 0000144E 0FB71D5DECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   474 00001455 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   475 0000145A CD21                <1>     int 21h
   476 0000145C 0F824FFEFFFF        <1>     jc pipeFailure
   477                              <1> 
   478                              <1> ;Now close the DUP'ed STDOUT
   479 00001462 B8003E0000          <1>     mov eax, 3E00h
   480 00001467 CD21                <1>     int 21h
   481 00001469 0F8242FEFFFF        <1>     jc pipeFailure
   482                              <1> 
   483                              <1> ;Finally unwind STDIN to the beginning of the file
   484 0000146F B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   485 00001474 31DB                <1>     xor ebx, ebx    ;STDIN handle
   486 00001476 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   487 00001478 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   488 0000147A CD21                <1>     int 21h
   489 0000147C 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   490                              <1> 
   491 00001482 488B15C5EFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   492 00001489 488915C6EFFFFF      <1>     mov qword [oldPipe], rdx
   493 00001490 66C70519ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   494                              <1> 
   495                              <1> .redirInClear:
   496                              <1> ;Check redir in
   497 00001499 F60516ECFFFFFF      <1>     test byte [redirIn], -1
   498 000014A0 7433                <1>     jz .redirOutClear
   499                              <1> 
   500 000014A2 0FB71D0FECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   501 000014A9 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   502 000014AB B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   503 000014B0 CD21                <1>     int 21h
   504 000014B2 0F82EBFDFFFF        <1>     jc redirFailure
   505 000014B8 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   506 000014BD CD21                <1>     int 21h
   507 000014BF 0F82DEFDFFFF        <1>     jc redirFailure
   508 000014C5 66C705EAEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   509 000014CE C605E1EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   510                              <1> .redirOutClear:
   511                              <1> ;Now check Redir Out
   512 000014D5 F605DBEBFFFFFF      <1>     test byte [redirOut], -1
   513                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014DC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014DE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   514                              <1> 
   515 000014DF 0FB71DD4EBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   516 000014E6 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   517 000014EB B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   518 000014F0 CD21                <1>     int 21h
   519 000014F2 0F82ABFDFFFF        <1>     jc redirFailure
   520 000014F8 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   521 000014FD CD21                <1>     int 21h
   522 000014FF 0F829EFDFFFF        <1>     jc redirFailure
   523 00001505 66C705ACEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   524 0000150E C605A2EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   525                              <1>     return
    13                              <2> %%_ret:
    14 00001515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> checkAndSetupRedir:
   528                              <1> ;Checks and sets up redir as appropriate
   529                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   530                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   531                              <1> ;Output: ZF=NZ => No redir
   532                              <1> ;        ZF=ZY => Redir
   533                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   534                              <1> ;CF=CY if pipe set or an embedded CR found
   535 00001516 57                  <1>     push rdi
   536 00001517 3C3C                <1>     cmp al, "<"
   537 00001519 740F                <1>     je .inputRedir
   538 0000151B 3C3E                <1>     cmp al, ">"
   539 0000151D 7478                <1>     je .outputRedir
   540 0000151F 3C7C                <1>     cmp al, "|"
   541 00001521 0F8428010000        <1>     je .pipeSetup
   542 00001527 F8                  <1>     clc
   543                              <1> .redirExit:
   544 00001528 5F                  <1>     pop rdi
   545                              <1>     return
    13                              <2> %%_ret:
    14 00001529 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> .inputRedir:
   547 0000152A C60585EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   548 00001531 488D3DDAEDFFFF      <1>     lea rdi, rdrInFilespec
   549 00001538 E8A5180000          <1>     call skipSeparators ;Skip spaces between < and the filespec
   550 0000153D E8AF010000          <1>     call copyCommandTailItem
   551                              <1>     ;jc .redirExit
   552 00001542 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   553 00001545 E898180000          <1>     call skipSeparators
   554                              <1>     ;Setup the redir here for STDIN
   555 0000154A 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   556 0000154C B800450000          <1>     mov eax, 4500h
   557 00001551 CD21                <1>     int 21h
   558 00001553 0F8274010000        <1>     jc .redirError
   559 00001559 66890558EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   560 00001560 488D15ABEDFFFF      <1>     lea rdx, rdrInFilespec
   561 00001567 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   562 0000156C CD21                <1>     int 21h
   563 0000156E 0F8259010000        <1>     jc .redirError
   564 00001574 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   565 00001576 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   566 00001579 B800460000          <1>     mov eax, 4600h
   567 0000157E CD21                <1>     int 21h
   568 00001580 0F8247010000        <1>     jc .redirError
   569 00001586 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   570 0000158B CD21                <1>     int 21h
   571 0000158D 0F823A010000        <1>     jc .redirError
   572 00001593 30C0                <1>     xor al, al
   573 00001595 EB91                <1>     jmp short .redirExit
   574                              <1> .outputRedir:
   575 00001597 C60519EBFFFF01      <1>     mov byte [redirOut], 1
   576 0000159E 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   577 000015A1 7509                <1>     jne .notDouble
   578 000015A3 FE050EEBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   579 000015A9 48FFC6              <1>     inc rsi ;Go past it too
   580                              <1> .notDouble:
   581 000015AC 488D3DAEEDFFFF      <1>     lea rdi, rdrOutFilespec
   582 000015B3 E82A180000          <1>     call skipSeparators
   583 000015B8 E834010000          <1>     call copyCommandTailItem
   584                              <1>     ;jc .redirExit
   585 000015BD 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   586 000015C0 E81D180000          <1>     call skipSeparators
   587                              <1>     ;Setup the redir here for STDOUT
   588 000015C5 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   589 000015CA B800450000          <1>     mov eax, 4500h
   590 000015CF CD21                <1>     int 21h
   591 000015D1 0F82F6000000        <1>     jc .redirError
   592 000015D7 668905DCEAFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   593 000015DE 488D157CEDFFFF      <1>     lea rdx, rdrOutFilespec
   594 000015E5 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   595 000015EA CD21                <1>     int 21h
   596 000015EC 7312                <1>     jnc .fileExists
   597 000015EE B8003C0000          <1>     mov eax, 3C00h
   598 000015F3 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   599 000015F8 CD21                <1>     int 21h
   600 000015FA 0F82CD000000        <1>     jc .redirError
   601                              <1> .fileExists:
   602 00001600 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   603 00001605 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   604 00001608 B800460000          <1>     mov eax, 4600h  ;DUP2
   605 0000160D CD21                <1>     int 21h
   606 0000160F 0F82B8000000        <1>     jc .redirError
   607 00001615 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   608 0000161A CD21                <1>     int 21h
   609 0000161C 0F82AB000000        <1>     jc .redirError
   610 00001622 803D8EEAFFFF01      <1>     cmp byte [redirOut], 1
   611 00001629 7416                <1>     je .dontAppend
   612                              <1>     ;Here we move the file pointer to the end of the file
   613 0000162B 31D2                <1>     xor edx, edx    ;Low order 32 bits
   614 0000162D 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   615 0000162F BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   616 00001634 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   617 00001639 CD21                <1>     int 21h
   618 0000163B 0F828C000000        <1>     jc .redirError
   619                              <1> .dontAppend:
   620 00001641 C6056FEAFFFFFF      <1>     mov byte [redirOut], -1
   621 00001648 30C0                <1>     xor al, al
   622 0000164A E9D9FEFFFF          <1>     jmp .redirExit
   623                              <1> .pipeSetup:
   624                              <1> ;We only need to setup STDOUT redirection to the pipe file
   625 0000164F 488D155AEDFFFF      <1>     lea rdx, pipe1Filespec
   626 00001656 803A00              <1>     cmp byte [rdx], 0
   627 00001659 740C                <1>     jz .pathFound
   628 0000165B 488D159DEDFFFF      <1>     lea rdx, pipe2Filespec
   629 00001662 803A00              <1>     cmp byte [rdx], 0
   630 00001665 7560                <1>     jnz .pipeError
   631                              <1> .pathFound:
   632 00001667 488915E0EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   633 0000166E B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   634 00001673 BB01000000          <1>     mov ebx, 1
   635 00001678 CD21                <1>     int 21h
   636 0000167A 724B                <1>     jc .pipeError
   637 0000167C 6689052FEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   638 00001683 E8F4160000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   639 00001688 0441                <1>     add al, "A"
   640 0000168A BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   641 0000168F 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   642 00001691 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   643 00001693 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   644 00001698 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   645 0000169D CD21                <1>     int 21h
   646 0000169F 7226                <1>     jc .pipeError
   647                              <1>     ;AX has the handle for this file now, this will become STDOUT
   648                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   649 000016A1 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   650 000016A4 B901000000          <1>     mov ecx, 1
   651 000016A9 B800460000          <1>     mov eax, 4600h
   652 000016AE CD21                <1>     int 21h
   653 000016B0 7215                <1>     jc .pipeError
   654 000016B2 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   655 000016B7 CD21                <1>     int 21h
   656 000016B9 720C                <1>     jc .pipeError
   657 000016BB C605EDE9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   658 000016C2 30C0                <1>     xor al, al
   659 000016C4 F9                  <1>     stc
   660 000016C5 5F                  <1>     pop rdi
   661                              <1>     return
    13                              <2> %%_ret:
    14 000016C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> .pipeError:
   663 000016C7 5F                  <1>     pop rdi 
   664 000016C8 E9E4FBFFFF          <1>     jmp pipeFailure
   665                              <1> .redirError:
   666 000016CD 5F                  <1>     pop rdi 
   667 000016CE E9D0FBFFFF          <1>     jmp redirFailure
   668                              <1> 
   669                              <1> copyCommandTailItemProgram:
   670                              <1> ;Copies a program name from the command tail until a terminator is found.
   671                              <1> ;Stores a terminating null in the destination
   672                              <1> ;Input: rsi = Start of the item to copy
   673                              <1> ;       rdi = Location for copy
   674                              <1> ;Output: Sentence copied with a null terminator inserted.
   675                              <1> ; If CF=CY, embedded CR encountered
   676 000016D3 AC                  <1>     lodsb
   677 000016D4 3C0D                <1>     cmp al, CR
   678 000016D6 740E                <1>     je .endOfInput
   679 000016D8 3C7C                <1>     cmp al, "|"
   680 000016DA 740A                <1>     je .endOfInput
   681 000016DC E8E4160000          <1>     call isALterminator
   682 000016E1 740A                <1>     jz .exit
   683 000016E3 AA                  <1>     stosb
   684 000016E4 EBED                <1>     jmp short copyCommandTailItemProgram
   685                              <1> .endOfInput:
   686 000016E6 E802000000          <1>     call .exit
   687 000016EB F9                  <1>     stc 
   688                              <1>     return
    13                              <2> %%_ret:
    14 000016EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .exit:
   690 000016ED 30C0                <1>     xor al, al
   691 000016EF AA                  <1>     stosb
   692                              <1>     return
    13                              <2> %%_ret:
    14 000016F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   693                              <1> 
   694                              <1> copyCommandTailItem:
   695                              <1> ;Copies a sentence from the command tail until a terminator is found.
   696                              <1> ;Stores a terminating null in the destination
   697                              <1> ;Input: rsi = Start of the item to copy
   698                              <1> ;       rdi = Location for copy
   699                              <1> ;Output: Sentence copied with a null terminator inserted.
   700                              <1> ; If CF=CY, embedded CR or Pipe encountered
   701 000016F1 AC                  <1>     lodsb
   702 000016F2 3C0D                <1>     cmp al, CR
   703 000016F4 7436                <1>     je .endOfInput
   704 000016F6 3C7C                <1>     cmp al, "|"
   705 000016F8 7432                <1>     je .endOfInput
   706 000016FA E8C6160000          <1>     call isALterminator
   707 000016FF 7432                <1>     jz .exit
   708 00001701 3C3C                <1>     cmp al, "<"
   709 00001703 742E                <1>     jz .exit
   710 00001705 3C3E                <1>     cmp al, ">"
   711 00001707 742A                <1>     jz .exit
   712 00001709 3A051CE9FFFF        <1>     cmp al, byte [pathSep]
   713 0000170F 7403                <1>     je .pathSep
   714 00001711 AA                  <1>     stosb
   715 00001712 EBDD                <1>     jmp short copyCommandTailItem
   716                              <1> .pathSep:
   717                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   718 00001714 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   719 00001715 E8AB160000          <1>     call isALterminator
   720 0000171A 7417                <1>     jz .exit
   721 0000171C 3C0D                <1>     cmp al, CR
   722 0000171E 740C                <1>     je .endOfInput
   723 00001720 8A0505E9FFFF        <1>     mov al, byte [pathSep]
   724 00001726 AA                  <1>     stosb   ;Else store the pathsep
   725 00001727 48FFCE              <1>     dec rsi ;Move rsi back a piece
   726 0000172A EBC5                <1>     jmp short copyCommandTailItem
   727                              <1> .endOfInput:
   728 0000172C E802000000          <1>     call .exit
   729 00001731 F9                  <1>     stc 
   730                              <1>     return
    13                              <2> %%_ret:
    14 00001732 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> .exit:
   732 00001733 30C0                <1>     xor al, al
   733 00001735 AA                  <1>     stosb
   734                              <1>     return
    13                              <2> %%_ret:
    14 00001736 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> 
   737                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   738                              <1> ;Input: rsi points to the count byte of a command line
   739 00001737 4150                <1>     push r8
   740 00001739 4151                <1>     push r9
   741 0000173B B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   742 0000173D CD21                <1>     int 21h
   743 0000173F 52                  <1>     push rdx    ;Save on the stack
   744 00001740 488D1DB9E7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   745 00001747 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   746 00001749 CD21                <1>     int 21h
   747 0000174B 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   748 0000174E 4989D9              <1>     mov r9, rbx
   749 00001751 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   750 00001758 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   751 0000175D F348A5              <1>     rep movsq   ;Copy command line over
   752                              <1>     ;call doCommandLine
   753 00001760 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   754 00001761 B450                <1>     mov ah, 50h ;Set Current PSP
   755 00001763 CD21                <1>     int 21h
   756 00001765 4159                <1>     pop r9
   757 00001767 4158                <1>     pop r8
   758 00001769 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 0000176B 488D15FEF1FFFF      <1>     lea rdx, noSelfCopy
     8 00001772 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001774 488D15B3F2FFFF      <1>     lea rdx, badParm
    11 0000177B EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 0000177D 488D156DF2FFFF      <1>     lea rdx, badDrv
    14 00001784 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 00001786 488D151EF5FFFF      <1>     lea rdx, badArgs
    17 0000178D EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 0000178F 488D15F9F4FFFF      <1>     lea rdx, badSpec
    20 00001796 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 00001798 488D155EF1FFFF      <1>     lea rdx, dupName
    24 0000179F EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000017A1 488D1587F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000017A8 B800090000          <1>     mov eax, 0900h
    29 000017AD CD21                <1>     int 21h
    30 000017AF F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000017B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 000017B1 C60526EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 000017B8 C60520EDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 000017BF C6051AEDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 000017C6 C60595EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 000017CD 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 000017D6 3F                  <1>
    40 000017D7 488D3D04EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000017DE 48AB                <1>     stosq
    42 000017E0 48FFC7              <1>     inc rdi ;Go past dot
    43 000017E3 668907              <1>     mov word [rdi], ax
    44 000017E6 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 000017E9 488D3D2EEAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 000017F0 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 000017F3 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 000017F6 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 000017F9 8A052DE8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 000017FF F2AE                <1>     repne scasb ;Scan for a switchchar
    53 00001801 67E320              <1>     jecxz .switchScanDone
    54 00001804 24DF                <1>     and al, 0DFh    ;UC it
    55 00001806 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 00001808 7509                <1>     jne .notWideSw
    57 0000180A 800DCDECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 00001811 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 00001813 3C50                <1>     cmp al, "P" ;Pause mode?
    61 00001815 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 0000181B 800DBCECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 00001822 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 00001824 488D35F4E9FFFF      <1>     lea rsi, cmdBuffer + 2
    69 0000182B E8B2150000          <1>     call skipSeparators ;Skip leading spaces
    70 00001830 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 00001837 E8A6150000          <1>     call skipSeparators ;Skip spaces after
    73 0000183C AC                  <1>     lodsb   ;Get first non space char
    74 0000183D E899150000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001842 744A                <1>     jz .eocNoNull
    76 00001844 3C3E                <1>     cmp al, ">"
    77 00001846 7446                <1>     je .eocNoNull
    78 00001848 3C3C                <1>     cmp al, "<"
    79 0000184A 7442                <1>     je .eocNoNull
    80 0000184C 3A05DAE7FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001852 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001854 E837150000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 00001859 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 0000185B EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 0000185D 803DFEECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001864 0F851CFFFFFF        <1>     jne badArgError
    90 0000186A 488D3DF1ECFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 00001871 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 00001874 AC                  <1>     lodsb
    94 00001875 E861150000          <1>     call isALEndOfCommand
    95 0000187A 740F                <1>     jz .eocReached
    96 0000187C E844150000          <1>     call isALterminator
    97 00001881 7403                <1>     jz .terminateCopy
    98 00001883 AA                  <1>     stosb
    99 00001884 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 00001886 31C0                <1>     xor eax, eax
   102 00001888 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 00001889 EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 0000188B 31C0                <1>     xor eax, eax
   106 0000188D AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 0000188E 803DCDECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 00001895 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 00001897 488D35C4ECFFFF      <1>     lea rsi, dirPathArg
   112 0000189E 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 000018A2 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 000018A4 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 000018A9 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 000018AD B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 000018B2 CD21                <1>     int 21h
   119 000018B4 3CFF                <1>     cmp al, -1
   120 000018B6 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 000018BC 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 000018C1 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 000018C3 880518ECFFFF        <1>     mov byte [dirDrv], al
   125 000018C9 EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 000018CB E8AC140000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 000018D0 88050BECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 000018D6 0FB60504ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000018DD E87F0D0000          <1>     call volume.dirEP
   132 000018E2 803D79ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 000018E9 7409                <1>     je .printCWD
   134 000018EB 803D73ECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 000018F2 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 000018F4 8A15E7EBFFFF        <1>     mov dl, byte [dirDrv]
   140 000018FA 88D0                <1>     mov al, dl
   141 000018FC 0441                <1>     add al, "A"
   142 000018FE B43A                <1>     mov ah, ":"
   143 00001900 66890557EBFFFF      <1>     mov word [searchSpec], ax
   144 00001907 8A051EE7FFFF        <1>     mov al, byte [pathSep]
   145 0000190D 88054DEBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001913 488D3547EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 0000191A B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 0000191C FEC2                <1>     inc dl  ;Convert to 1 based number
   149 0000191E CD21                <1>     int 21h
   150 00001920 488D3D37EBFFFF      <1>     lea rdi, searchSpec
   151 00001927 E855140000          <1>     call strlen
   152 0000192C FFC9                <1>     dec ecx
   153 0000192E C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001932 488D155EF2FFFF      <1>     lea rdx, dirMain
   155 00001939 B409                <1>     mov ah, 09h
   156 0000193B CD21                <1>     int 21h
   157 0000193D 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001940 B409                <1>     mov ah, 09h
   159 00001942 CD21                <1>     int 21h
   160 00001944 488D153DEFFFFF      <1>     lea rdx, crlf2
   161 0000194B B409                <1>     mov ah, 09h
   162 0000194D CD21                <1>     int 21h
   163 0000194F E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001954 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 00001955 488D3D02EBFFFF      <1>     lea rdi, searchSpec
   179 0000195C 8A05C9E6FFFF        <1>     mov al, byte [pathSep]
   180 00001962 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 00001966 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 00001968 88040F              <1>     mov byte [rdi + rcx], al
   183 0000196B FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 0000196D 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 00001971 488D356AECFFFF      <1>     lea rsi, dirSrchPat
   187 00001978 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 0000197B 48A5                <1>     movsq
   189 0000197D A5                  <1>     movsd
   190 0000197E 30C0                <1>     xor al, al
   191 00001980 AA                  <1>     stosb   ;Store the terminating null
   192 00001981 E890160000          <1>     call setDTA
   193 00001986 4C8D1545E7FFFF      <1>     lea r10, cmdFFBlock
   194 0000198D B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   195 00001992 B44E                <1>     mov ah, 4Eh ;Find first
   196 00001994 CD21                <1>     int 21h
   197 00001996 720B                <1>     jc .dirNoMoreFiles
   198                              <1> .findNext:
   199 00001998 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   200 0000199D B44F                <1>     mov ah, 4Fh
   201 0000199F CD21                <1>     int 21h
   202 000019A1 73F5                <1>     jnc .findNext 
   203                              <1> .dirNoMoreFiles:
   204 000019A3 F60534EBFFFF01      <1>     test byte [dirPrnType], 1
   205 000019AA 740B                <1>     jz .dirNoEndNewLine
   206 000019AC 488D15D2EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   207 000019B3 B409                <1>     mov ah, 09h
   208 000019B5 CD21                <1>     int 21h
   209                              <1> .dirNoEndNewLine:
   210                              <1>     ;Now we print the number of files and the number of bytes on the disk
   211 000019B7 488D1591F4FFFF      <1>     lea rdx, fourSpc
   212 000019BE B409                <1>     mov ah, 09h
   213 000019C0 CD21                <1>     int 21h
   214 000019C2 B409                <1>     mov ah, 09h ;Print four Spaces twice
   215 000019C4 CD21                <1>     int 21h
   216 000019C6 0FB60513EBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   217 000019CD E842150000          <1>     call printDecimalWord
   218 000019D2 488D15F7EFFFFF      <1>     lea rdx, dirOk
   219 000019D9 B409                <1>     mov ah, 09h
   220 000019DB CD21                <1>     int 21h
   221 000019DD 488D1570F4FFFF      <1>     lea rdx, threeSpc
   222 000019E4 B409                <1>     mov ah, 09h
   223 000019E6 CD21                <1>     int 21h
   224 000019E8 B800360000          <1>     mov eax, 3600h ;Get disk info
   225 000019ED 8A15EEEAFFFF        <1>     mov dl, byte [dirDrv]
   226 000019F3 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   227 000019F5 CD21                <1>     int 21h ;Get disk free space info
   228 000019F7 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   229 000019FA 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   230 000019FD 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   231 000019FF F7E1                <1>     mul ecx ;Get bytes per cluster
   232 00001A01 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   233                              <1>     ;rax now has the number of free bytes on the disk
   234 00001A04 E80B150000          <1>     call printDecimalWord
   235 00001A09 488D15CAEFFFFF      <1>     lea rdx, bytesOk
   236 00001A10 B409                <1>     mov ah, 09h
   237 00001A12 CD21                <1>     int 21h
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001A14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> .dirPrintFileData:
   241                              <1> ;Use fcbCmdSpec to build the file name with space
   242                              <1> ;Start by print the name (same for both cases)
   243                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   244 00001A15 F605CBE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   245                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A1C 75(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   246 00001A1E 488D35CBE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   247 00001A25 488D3DC0E8FFFF      <1>     lea rdi, fcbCmdSpec
   248 00001A2C E83A140000          <1>     call asciiFilenameToFCB
   249 00001A31 488D15B4E8FFFF      <1>     lea rdx, fcbCmdSpec
   250 00001A38 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   251 00001A3D BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 00001A42 B440                <1>     mov ah, 40h ;Write handle
   253 00001A44 CD21                <1>     int 21h
   254 00001A46 52                  <1>     push rdx
   255 00001A47 B220                <1>     mov dl, " "
   256 00001A49 B402                <1>     mov ah, 02h ;Print char
   257 00001A4B CD21                <1>     int 21h
   258 00001A4D 5A                  <1>     pop rdx
   259 00001A4E 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   260 00001A55 B903000000          <1>     mov ecx, 3  ;Print three chars
   261 00001A5A BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 00001A5F B440                <1>     mov ah, 40h ;Write handle
   263 00001A61 CD21                <1>     int 21h
   264 00001A63 F60574EAFFFF01      <1>     test byte [dirPrnType], 1
   265 00001A6A 0F85A8000000        <1>     jnz .widePrint
   266                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   267                              <1>     ;Now check if a DIR
   268 00001A70 F60570E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   269 00001A77 7418                <1>     jz .dirPrintNotDir
   270 00001A79 488D1568EFFFFF      <1>     lea rdx, dirLbl
   271 00001A80 B409                <1>     mov ah, 09h
   272 00001A82 CD21                <1>     int 21h
   273 00001A84 488D15C9F3FFFF      <1>     lea rdx, threeSpc
   274 00001A8B B409                <1>     mov ah, 09h
   275 00001A8D CD21                <1>     int 21h
   276 00001A8F EB4F                <1>     jmp short .dirPrintFileDT
   277                              <1> .dirPrintNotDir:
   278                              <1> ;Here we print the file size
   279 00001A91 B220                <1>     mov dl, " "
   280 00001A93 B402                <1>     mov ah, 02h
   281 00001A95 CD21                <1>     int 21h
   282 00001A97 8B054FE6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   283 00001A9D E8E3140000          <1>     call getDecimalWord
   284 00001AA2 4889CB              <1>     mov rbx, rcx
   285 00001AA5 51                  <1>     push rcx
   286 00001AA6 480FCB              <1>     bswap rbx
   287 00001AA9 B908000000          <1>     mov ecx, 8
   288                              <1> .dirPrintFileSizePrep:
   289 00001AAE 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   290 00001AB0 7514                <1>     jne .dirPrintFileSize
   291 00001AB2 B402                <1>     mov ah, 02h
   292 00001AB4 B220                <1>     mov dl, " "
   293 00001AB6 CD21                <1>     int 21h
   294 00001AB8 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   295 00001ABC FFC9                <1>     dec ecx
   296 00001ABE 81F901000000        <1>     cmp ecx, 1
   297 00001AC4 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   298                              <1> .dirPrintFileSize:
   299 00001AC6 5B                  <1>     pop rbx
   300                              <1> .dirPrintFileSizeLoop:
   301 00001AC7 88DA                <1>     mov dl, bl
   302 00001AC9 B402                <1>     mov ah, 02h
   303 00001ACB CD21                <1>     int 21h
   304 00001ACD 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001AD1 FFC9                <1>     dec ecx
   306 00001AD3 75F2                <1>     jnz .dirPrintFileSizeLoop
   307 00001AD5 488D157CF3FFFF      <1>     lea rdx, twoSpc
   308 00001ADC B409                <1>     mov ah, 09h
   309 00001ADE CD21                <1>     int 21h
   310                              <1> .dirPrintFileDT:
   311 00001AE0 B220                <1>     mov dl, " "
   312 00001AE2 B402                <1>     mov ah, 02h
   313 00001AE4 CD21                <1>     int 21h
   314 00001AE6 0FB705FDE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   315 00001AED 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   316 00001AEF E8DE0F0000          <1>     call printDate
   317 00001AF4 488D155DF3FFFF      <1>     lea rdx, twoSpc
   318 00001AFB B409                <1>     mov ah, 09h
   319 00001AFD CD21                <1>     int 21h
   320 00001AFF 0FB705E2E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   321 00001B06 E8E9100000          <1>     call printTime
   322 00001B0B 488D1573EDFFFF      <1>     lea rdx, crlf
   323 00001B12 B409                <1>     mov ah, 09h
   324 00001B14 CD21                <1>     int 21h
   325 00001B16 EB0B                <1>     jmp short .dirPrintNameExit
   326                              <1> .widePrint:
   327                              <1> ;If /W, print name space ext space space space space
   328 00001B18 488D1530F3FFFF      <1>     lea rdx, fourSpc
   329 00001B1F B409                <1>     mov ah, 09h ;Print string
   330 00001B21 CD21                <1>     int 21h
   331                              <1> .dirPrintNameExit:
   332 00001B23 FE05B7E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   333 00001B29 FE05B0E9FFFF        <1>     inc byte [dirLineCtr]
   334 00001B2F 803DA9E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   335                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B36 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B38 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 00001B39 488D15CFEEFFFF      <1>     lea rdx, pauseMes
   337 00001B40 B409                <1>     mov ah, 09h
   338 00001B42 CD21                <1>     int 21h
   339 00001B44 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   340 00001B46 CD21                <1>     int 21h
   341 00001B48 C60590E9FFFF00      <1>     mov byte [dirLineCtr], 0
   342 00001B4F 488D152FEDFFFF      <1>     lea rdx, crlf   ;Force new line
   343 00001B56 B409                <1>     mov ah, 09h
   344 00001B58 CD21                <1>     int 21h
   345                              <1>     return
    13                              <2> %%_ret:
    14 00001B5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> chdir:
   348 00001B5B F6055AE5FFFFFF      <1>     test byte [arg1Flg], -1
   349 00001B62 754D                <1>     jnz .changeDir
   350                              <1>     ;Print CWD
   351                              <1> .printCWD:
   352 00001B64 E86C110000          <1>     call putCWDInPrompt ;Exactly the same procedure
   353 00001B69 E84E0F0000          <1>     call printCRLF
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001B6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> .printDiskCWD:
   356                              <1> ;Print CWD for a specified drive
   357 00001B6F 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   358 00001B73 88D0                <1>     mov al, dl
   359 00001B75 0440                <1>     add al, "@" ;Get the UC letter
   360 00001B77 B43A                <1>     mov ah, ":"
   361 00001B79 488D3DDEE8FFFF      <1>     lea rdi, searchSpec
   362 00001B80 66AB                <1>     stosw   ;Store X:, rdi+=2
   363 00001B82 8A05A3E4FFFF        <1>     mov al, byte [pathSep]
   364 00001B88 AA                  <1>     stosb   ;Store pathSep, inc rdi
   365 00001B89 B447                <1>     mov ah, 47h ;Get Current Working Directory
   366 00001B8B 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   367 00001B8E CD21                <1>     int 21h
   368 00001B90 E8EC110000          <1>     call strlen
   369 00001B95 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   370 00001B9B B440                <1>     mov ah, 40h ;Write to handle
   371 00001B9D BB01000000          <1>     mov ebx, 1  ;STDOUT
   372 00001BA2 488D15B5E8FFFF      <1>     lea rdx, searchSpec
   373 00001BA9 CD21                <1>     int 21h
   374 00001BAB E80C0F0000          <1>     call printCRLF
   375                              <1>     return
    13                              <2> %%_ret:
    14 00001BB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> .changeDir:
   377 00001BB1 8A0507E5FFFF        <1>     mov al, byte [arg1FCBret]
   378 00001BB7 3CFF                <1>     cmp al, -1 
   379 00001BB9 0F84BEFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   380 00001BBF 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   381 00001BC4 7520                <1>     jne .setPath
   382                              <1>     ;If we searched for a . or .., the fcb will be blank. Make sure we didn't search that
   383 00001BC6 0FB605F0E4FFFF      <1>     movzx eax, byte [arg1Off]
   384 00001BCD 488D3549E6FFFF      <1>     lea rsi, cmdBuffer
   385 00001BD4 4801C6              <1>     add rsi, rax
   386 00001BD7 8A054EE4FFFF        <1>     mov al, byte [pathSep]
   387 00001BDD 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   388 00001BDF 7405                <1>     je .setPath
   389 00001BE1 803E2E              <1>     cmp byte [rsi], "."
   390 00001BE4 7589                <1>     jne .printDiskCWD
   391                              <1> .setPath:
   392 00001BE6 E80A130000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   393 00001BEB 488D156CE8FFFF      <1>     lea rdx, searchSpec
   394 00001BF2 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001BF4 CD21                <1>     int 21h
   396 00001BF6 0F82A5FBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001BFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001BFD F605B8E4FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001C04 0F847CFBFFFF        <1>     jz badArgError
   402 00001C0A F605AEE4FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001C11 0F856FFBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001C17 8A05A1E4FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001C1D 3CFF                <1>     cmp al, -1 
   407 00001C1F 0F8458FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001C25 E8CB120000          <1>     call buildCommandPath
   409 00001C2A 488D152DE8FFFF      <1>     lea rdx, searchSpec
   410 00001C31 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001C36 CD21                <1>     int 21h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C38 73(FC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001C3A 488D1502EFFFFF      <1>     lea rdx, badMD
   415 00001C41 B800090000          <1>     mov eax, 0900h
   416 00001C46 CD21                <1>     int 21h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001C49 F6056CE4FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001C50 0F8430FBFFFF        <1>     jz badArgError
   422 00001C56 F60562E4FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001C5D 0F8523FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001C63 8A0555E4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001C69 3CFF                <1>     cmp al, -1 
   427 00001C6B 0F840CFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001C71 E87F120000          <1>     call buildCommandPath
   429 00001C76 488D15E1E7FFFF      <1>     lea rdx, searchSpec
   430 00001C7D B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001C82 CD21                <1>     int 21h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C84 73(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001C86 488D15D3EEFFFF      <1>     lea rdx, badRD
   435 00001C8D B800090000          <1>     mov eax, 0900h
   436 00001C92 CD21                <1>     int 21h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001C94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001C95 F60520E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001C9C 0F84E4FAFFFF        <1>     jz badArgError
   442 00001CA2 F60516E4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001CA9 0F84D7FAFFFF        <1>     jz badArgError
   444 00001CAF 488D3567E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001CB6 0FB60500E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001CBD 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001CC0 AC                  <1>     lodsb   ;Get first char in AL
   449 00001CC1 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001CC4 E812110000          <1>     call isALEndOfCommand
   451 00001CC9 0F82A5FAFFFF        <1>     jc badParamError
   452 00001CCF 488D3D48E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001CD6 AC                  <1>     lodsb
   455 00001CD7 E8FF100000          <1>     call isALEndOfCommand
   456 00001CDC 0F8492FAFFFF        <1>     je badParamError
   457 00001CE2 E8DE100000          <1>     call isALterminator
   458 00001CE7 7403                <1>     jz .endOfName1
   459 00001CE9 AA                  <1>     stosb
   460 00001CEA EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001CEC 31C0                <1>     xor eax, eax
   463 00001CEE AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001CEF 488D3527E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001CF6 0FB605C3E3FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001CFD 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001D00 AC                  <1>     lodsb   ;Get first char in AL
   468 00001D01 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001D04 E8D2100000          <1>     call isALEndOfCommand
   470 00001D09 0F8265FAFFFF        <1>     jc badParamError
   471 00001D0F 488D3D88E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001D16 AC                  <1>     lodsb
   474 00001D17 E8BF100000          <1>     call isALEndOfCommand
   475 00001D1C 740A                <1>     je .endOfName2
   476 00001D1E E8A2100000          <1>     call isALterminator
   477 00001D23 7403                <1>     jz .endOfName2
   478 00001D25 AA                  <1>     stosb
   479 00001D26 EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001D28 31C0                <1>     xor eax, eax
   482 00001D2A AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001D2B 488D35ECE8FFFF      <1>     lea rsi, sourcePath
   486 00001D32 488D3D65E9FFFF      <1>     lea rdi, destPath
   487 00001D39 B81E120000          <1>     mov eax, 121Eh
   488 00001D3E CD2F                <1>     int 2Fh
   489 00001D40 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001D46 488D15D1E8FFFF      <1>     lea rdx, sourcePath
   493 00001D4D B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001D52 CD21                <1>     int 21h
   495 00001D54 0F821AFAFFFF        <1>     jc badParamError
   496 00001D5A 668905BDE9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001D61 0FB7D8              <1>     movzx ebx, ax   ;For bx
   499 00001D64 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   500 00001D69 CD21                <1>     int 21h
   501 00001D6B 668915B0E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001D72 488D1525E9FFFF      <1>     lea rdx, destPath
   504 00001D79 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001D7E 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001D80 CD21                <1>     int 21h
   507 00001D82 0F82B8000000        <1>     jc .badExit
   508 00001D88 66890591E9FFFF      <1>     mov word [destHdl], ax
   509 00001D8F 31F6                <1>     xor esi, esi
   510 00001D91 488D158CE9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001D98 B980000000          <1>     mov ecx, 128
   513 00001D9D 0FB71D7AE9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001DA4 B43F                <1>     mov ah, 3Fh ;Read
   515 00001DA6 CD21                <1>     int 21h
   516 00001DA8 0F8292000000        <1>     jc .badExit
   517 00001DAE 85C0                <1>     test eax, eax
   518 00001DB0 743A                <1>     jz .okExit
   519 00001DB2 01C6                <1>     add esi, eax
   520 00001DB4 89C1                <1>     mov ecx, eax
   521 00001DB6 0FB71D63E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001DBD B440                <1>     mov ah, 40h ;Write
   523 00001DBF CD21                <1>     int 21h
   524 00001DC1 727D                <1>     jc .badExit
   525 00001DC3 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001DC8 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001DCA 66F7054FE9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001DD3 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001DD5 66F70544E9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001DDE 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001DE0 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001DE2 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001DE7 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001DEA 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001DEC E832000000          <1>     call .leaveCopyClose
   540 00001DF1 488D158DEAFFFF      <1>     lea rdx, crlf
   541 00001DF8 B409                <1>     mov ah, 09h
   542 00001DFA CD21                <1>     int 21h
   543 00001DFC 488D154CF0FFFF      <1>     lea rdx, fourSpc
   544 00001E03 B409                <1>     mov ah, 09h
   545 00001E05 CD21                <1>     int 21h
   546 00001E07 B402                <1>     mov ah, 02h
   547 00001E09 B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001E0B CD21                <1>     int 21h
   549 00001E0D 488D15AAEBFFFF      <1>     lea rdx, copyOk
   550 00001E14 B409                <1>     mov ah, 09h
   551 00001E16 CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001E18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001E19 E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001E1E E948F9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001E23 668B1DF4E8FFFF      <1>     mov bx, word [sourceHdl]
   558 00001E2A B8003E0000          <1>     mov eax, 3E00h
   559 00001E2F CD21                <1>     int 21h
   560 00001E31 668B1DE8E8FFFF      <1>     mov bx, word [destHdl]
   561 00001E38 B8003E0000          <1>     mov eax, 3E00h
   562 00001E3D CD21                <1>     int 21h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001E3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001E40 668B1DD7E8FFFF      <1>     mov bx, word [sourceHdl]
   567 00001E47 6681FBFFFF          <1>     cmp bx, -1
   568 00001E4C 7407                <1>     je .skipSource
   569 00001E4E B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001E53 CD21                <1>     int 21h
   571                              <1> .skipSource:
   572 00001E55 668B1DC4E8FFFF      <1>     mov bx, word [destHdl]
   573 00001E5C 6681FBFFFF          <1>     cmp bx, -1
   574 00001E61 0F840DF9FFFF        <1>     je badParamError
   575 00001E67 B8003E0000          <1>     mov eax, 3E00h
   576 00001E6C CD21                <1>     int 21h
   577 00001E6E E901F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
   580 00001E73 F60542E2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001E7A 0F8406F9FFFF        <1>     jz badArgError
   582 00001E80 E870100000          <1>     call buildCommandPath
   583 00001E85 488D15D2E5FFFF      <1>     lea rdx, searchSpec
   584 00001E8C B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001E91 31C9                <1>     xor ecx, ecx
   586 00001E93 CD21                <1>     int 21h
   587 00001E95 0F82EBF8FFFF        <1>     jc badArgError
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001E9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001E9C 488D15C3EBFFFF      <1>     lea rdx, curDate
   591 00001EA3 B409                <1>     mov ah, 09h
   592 00001EA5 CD21                <1>     int 21h
   593 00001EA7 B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001EA9 CD21                <1>     int 21h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001EAB 66890D68E7FFFF      <1>     mov word [td1], cx
   600 00001EB2 881564E7FFFF        <1>     mov byte [td3], dl
   601 00001EB8 88355FE7FFFF        <1>     mov byte [td4], dh
   602 00001EBE 0FB6C0              <1>     movzx eax, al
   603 00001EC1 89C3                <1>     mov ebx, eax
   604 00001EC3 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001EC5 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001EC7 488D1574EBFFFF      <1>     lea rdx, dayName
   607 00001ECE 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001ED2 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001ED7 BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001EDC B440                <1>     mov ah, 40h ;Write to handle
   611 00001EDE CD21                <1>     int 21h
   612 00001EE0 B220                <1>     mov dl, " "
   613 00001EE2 B402                <1>     mov ah, 02h
   614 00001EE4 CD21                <1>     int 21h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   618 00001EE6 0FB7052DE7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001EED C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001EF0 0FB61D26E7FFFF      <1>     movzx ebx, byte [td4]
   621 00001EF7 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001EFA 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001EFC 0FB61D19E7FFFF      <1>     movzx ebx, byte [td3]
   624 00001F03 09D8                <1>     or eax, ebx
   625 00001F05 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001F0A E8C30B0000          <1>     call printDate
   627                              <1> 
   628 00001F0F 488D1561EBFFFF      <1>     lea rdx, newDate
   629 00001F16 B409                <1>     mov ah, 09h
   630 00001F18 CD21                <1>     int 21h
   631 00001F1A 488D1575EBFFFF      <1>     lea rdx, ukDate
   632 00001F21 488D0561EBFFFF      <1>     lea rax, usDate
   633 00001F28 488D1D74EBFFFF      <1>     lea rbx, jpDate
   634 00001F2F 803D00E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001F36 480F47D3            <1>     cmova rdx, rbx
   636 00001F3A 480F42D0            <1>     cmovb rdx, rax
   637 00001F3E B409                <1>     mov ah, 09h
   638 00001F40 CD21                <1>     int 21h
   639                              <1> 
   640 00001F42 488D1554E2FFFF      <1>     lea rdx, inBuffer
   641 00001F49 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   642 00001F4C B40A                <1>     mov ah, 0Ah
   643 00001F4E CD21                <1>     int 21h
   644 00001F50 52                  <1>     push rdx
   645 00001F51 488D152DE9FFFF      <1>     lea rdx, crlf
   646 00001F58 B409                <1>     mov ah, 09h
   647 00001F5A CD21                <1>     int 21h
   648 00001F5C 5A                  <1>     pop rdx
   649 00001F5D 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F61 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F63 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001F64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001F65 488D1553EBFFFF      <1>     lea rdx, curTime
   655 00001F6C B409                <1>     mov ah, 09h
   656 00001F6E CD21                <1>     int 21h
   657 00001F70 B42C                <1>     mov ah, 2Ch ;DOS get time
   658 00001F72 CD21                <1>     int 21h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 00001F74 880DA0E6FFFF        <1>     mov byte [td1], cl
   664 00001F7A 882D9BE6FFFF        <1>     mov byte [td2], ch
   665 00001F80 881596E6FFFF        <1>     mov byte [td3], dl
   666 00001F86 883591E6FFFF        <1>     mov byte [td4], dh
   667 00001F8C 0FB6C5              <1>     movzx eax, ch
   668 00001F8F E8D20C0000          <1>     call printTime.printHours
   669                              <1> 
   670 00001F94 8A15A9E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 00001F9A B402                <1>     mov ah, 02h
   672 00001F9C CD21                <1>     int 21h
   673                              <1> 
   674 00001F9E 0FB60575E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 00001FA5 E8AC0C0000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 00001FAA 8A1593E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 00001FB0 B402                <1>     mov ah, 02h
   679 00001FB2 CD21                <1>     int 21h
   680                              <1> 
   681 00001FB4 0FB60562E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 00001FBB E8960C0000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 00001FC0 B22E                <1>     mov dl, "."
   685 00001FC2 B402                <1>     mov ah, 02h
   686 00001FC4 CD21                <1>     int 21h
   687                              <1> 
   688 00001FC6 0FB6054FE6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001FCD E8840C0000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001FD2 488D15F7EAFFFF      <1>     lea rdx, newTime
   692 00001FD9 B409                <1>     mov ah, 09h
   693 00001FDB CD21                <1>     int 21h
   694                              <1> 
   695 00001FDD 488D15B9E1FFFF      <1>     lea rdx, inBuffer
   696 00001FE4 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   697 00001FE7 B40A                <1>     mov ah, 0Ah
   698 00001FE9 CD21                <1>     int 21h
   699 00001FEB 52                  <1>     push rdx
   700 00001FEC 488D1592E8FFFF      <1>     lea rdx, crlf
   701 00001FF3 B409                <1>     mov ah, 09h
   702 00001FF5 CD21                <1>     int 21h
   703 00001FF7 5A                  <1>     pop rdx
   704 00001FF8 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   705                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FFC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FFE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001FFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> ctty:
   708 00002000 F605B5E0FFFFFF      <1>     test byte [arg1Flg], -1
   709 00002007 0F8479F7FFFF        <1>     jz badArgError
   710 0000200D F605ABE0FFFFFF      <1>     test byte [arg2Flg], -1
   711 00002014 0F856CF7FFFF        <1>     jnz badArgError
   712 0000201A 488D35FCE1FFFF      <1>     lea rsi, cmdBuffer
   713 00002021 0FB60595E0FFFF      <1>     movzx eax, byte [arg1Off]
   714 00002028 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   715 0000202B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   716 0000202F 750F                <1>     jne .noDrive
   717 00002031 0FB60586E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   718 00002038 3CFF                <1>     cmp al, -1
   719 0000203A 0F843DF7FFFF        <1>     je badDriveError
   720                              <1> .noDrive:
   721                              <1>     ;Now we open the provided file
   722 00002040 E8B40F0000          <1>     call copyArgumentToSearchSpec
   723 00002045 488D1512E4FFFF      <1>     lea rdx, searchSpec
   724 0000204C B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   725 00002051 CD21                <1>     int 21h
   726 00002053 0F8236F7FFFF        <1>     jc badFileError
   727 00002059 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   728 0000205C B800440000          <1>     mov eax, 4400h  ;Get device word
   729 00002061 CD21                <1>     int 21h
   730 00002063 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   731 00002066 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   732                              <1>     ;Now we set this handle to be STDIO
   733 00002068 80CA03              <1>     or dl, 3    ;Set STDIO bits
   734 0000206B 30F6                <1>     xor dh, dh
   735 0000206D B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   736 00002072 CD21                <1>     int 21h
   737                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   738 00002074 31C9                <1>     xor ecx, ecx    ;STDIN
   739 00002076 B446                <1>     mov ah, 46h
   740 00002078 CD21                <1>     int 21h
   741 0000207A FFC1                <1>     inc ecx         ;STDOUT
   742 0000207C B446                <1>     mov ah, 46h
   743 0000207E CD21                <1>     int 21h
   744 00002080 FFC1                <1>     inc ecx         ;STDERR
   745 00002082 B446                <1>     mov ah, 46h
   746 00002084 CD21                <1>     int 21h
   747 00002086 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   748 00002088 CD21                <1>     int 21h
   749                              <1>     return
    13                              <2> %%_ret:
    14 0000208A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> .badCharDev:
   751 0000208B 488D153DEBFFFF      <1>     lea rdx, badDev
   752 00002092 B409                <1>     mov ah, 09h
   753 00002094 CD21                <1>     int 21h
   754 00002096 B43E                <1>     mov ah, 3Eh ;Close opened handle
   755 00002098 CD21                <1>     int 21h
   756                              <1>     return
    13                              <2> %%_ret:
    14 0000209A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> cls:  
   759 0000209B B800440000          <1>     mov eax, 4400h  ;Get device info
   760 000020A0 BB01000000          <1>     mov ebx, 1      ;for handle 1
   761 000020A5 CD21                <1>     int 21h         ;in dx
   762 000020A7 F7C280000000        <1>     test edx, devCharDev
   763 000020AD 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   764 000020AF F7C210000000        <1>     test edx, charDevFastOut
   765 000020B5 743E                <1>     jz .doAnsi
   766                              <1>     ;Test if Int 29h uses Int 30h
   767                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   768                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   769 000020B7 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   770 000020BC CD21                <1>     int 21h
   771                              <1> .biosCheck:
   772 000020BE 66813BCD30          <1>     cmp word [rbx], 30CDh
   773 000020C3 740C                <1>     je .biosConfirmed
   774 000020C5 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   775 000020CA 7429                <1>     je .doAnsi
   776 000020CC 48FFC3              <1>     inc rbx
   777 000020CF EBED                <1>     jmp short .biosCheck
   778                              <1> .biosConfirmed:
   779                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   780 000020D1 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   781 000020D3 31DB                <1>     xor ebx, ebx
   782 000020D5 CD30                <1>     int 30h
   783 000020D7 B40F                <1>     mov ah, 0Fh ;Get screen mode
   784 000020D9 CD30                <1>     int 30h
   785 000020DB 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   786 000020DE FECA                <1>     dec dl
   787 000020E0 B619                <1>     mov dh, 25  ;Number of rows is standard
   788 000020E2 31C0                <1>     xor eax, eax
   789 000020E4 89C1                <1>     mov ecx, eax
   790 000020E6 B707                <1>     mov bh, 7   ;Screen attributes
   791 000020E8 B406                <1>     mov ah, 6   ;Scroll
   792 000020EA CD30                <1>     int 30h
   793 000020EC 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   794 000020EE B700                <1>     mov bh, 0   ;Page 0
   795 000020F0 B402                <1>     mov ah, 2
   796 000020F2 CD30                <1>     int 30h
   797                              <1>     return
    13                              <2> %%_ret:
    14 000020F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .doAnsi:
   799                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   800                              <1> ;4 chars in the ansi routine
   801                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   802                              <1> ; understand ANSI codes
   803 000020F5 488D354FEDFFFF      <1>     lea rsi, ansiCls
   804 000020FC B904000000          <1>     mov ecx, 4
   805 00002101 B406                <1>     mov ah, 06h ;Raw char output
   806                              <1> .ansiLp:
   807 00002103 AC                  <1>     lodsb   ;Get the char in 
   808 00002104 88C2                <1>     mov dl, al
   809 00002106 CD21                <1>     int 21h
   810 00002108 FFC9                <1>     dec ecx
   811 0000210A 75F7                <1>     jnz .ansiLp
   812                              <1>     return
    13                              <2> %%_ret:
    14 0000210C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> break:
   815 0000210D F605A8DFFFFFFF      <1>     test byte [arg1Flg], -1
   816 00002114 752D                <1>     jnz .argumentProvided
   817                              <1>     ;Here we just get the status of break
   818 00002116 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   819 0000211B CD21                <1>     int 21h
   820 0000211D 88D3                <1>     mov bl, dl
   821 0000211F 488D154BEBFFFF      <1>     lea rdx, breakIs
   822 00002126 B409                <1>     mov ah, 09h
   823 00002128 CD21                <1>     int 21h
   824 0000212A 488D153BEBFFFF      <1>     lea rdx, onMes
   825 00002131 488D0D2EEBFFFF      <1>     lea rcx, offMes
   826 00002138 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   827 0000213A 480F44D1            <1>     cmovz rdx, rcx
   828 0000213E B409                <1>     mov ah, 09h
   829 00002140 CD21                <1>     int 21h
   830                              <1>     return
    13                              <2> %%_ret:
    14 00002142 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .argumentProvided:
   832 00002143 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   833 00002147 AD                  <1>     lodsd   ;Read the word
   834 00002148 89C3                <1>     mov ebx, eax
   835 0000214A 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   836 0000214F C1EB10              <1>     shr ebx, 10h     ;Get high word low
   837 00002152 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   838 00002157 7416                <1>     je .maybeOn
   839 00002159 663D4F46            <1>     cmp ax, "OF"
   840 0000215D 7523                <1>     jne .badOnOff
   841 0000215F 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   842 00002164 6681FB4620          <1>     cmp bx, "F "
   843 00002169 7517                <1>     jne .badOnOff
   844                              <1>     ;Set off
   845 0000216B 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   846 0000216D EB0B                <1>     jmp short .setBreak
   847                              <1> .maybeOn:
   848 0000216F 663D4F4E            <1>     cmp ax, "ON"
   849 00002173 750D                <1>     jne .badOnOff
   850                              <1>     ;Set on
   851 00002175 BA01000000          <1>     mov edx, 1
   852                              <1> .setBreak:
   853 0000217A B801330000          <1>     mov eax, 3301h  ;Set break
   854 0000217F CD21                <1>     int 21h
   855                              <1>     return
    13                              <2> %%_ret:
    14 00002181 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .badOnOff:
   857 00002182 488D15D2ECFFFF      <1>     lea rdx, badOnOff
   858 00002189 B409                <1>     mov ah, 09h
   859 0000218B CD21                <1>     int 21h
   860                              <1>     return
    13                              <2> %%_ret:
    14 0000218D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   861                              <1> 
   862                              <1> verify:
   863 0000218E F60527DFFFFFFF      <1>     test byte [arg1Flg], -1
   864 00002195 752D                <1>     jnz .argumentProvided
   865                              <1>     ;Here we just get the status of break
   866 00002197 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   867 0000219C CD21                <1>     int 21h
   868 0000219E 88C3                <1>     mov bl, al
   869 000021A0 488D15D4EAFFFF      <1>     lea rdx, verifyIs
   870 000021A7 B409                <1>     mov ah, 09h
   871 000021A9 CD21                <1>     int 21h
   872 000021AB 488D15BAEAFFFF      <1>     lea rdx, onMes
   873 000021B2 488D0DADEAFFFF      <1>     lea rcx, offMes
   874 000021B9 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   875 000021BB 480F44D1            <1>     cmovz rdx, rcx
   876 000021BF B409                <1>     mov ah, 09h
   877 000021C1 CD21                <1>     int 21h
   878                              <1>     return
    13                              <2> %%_ret:
    14 000021C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .argumentProvided:
   880 000021C4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   881 000021C8 AD                  <1>     lodsd   ;Read the word
   882 000021C9 89C3                <1>     mov ebx, eax
   883 000021CB 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   884 000021D0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   885 000021D3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   886 000021D8 7416                <1>     je .maybeOn
   887 000021DA 663D4F46            <1>     cmp ax, "OF"
   888 000021DE 751F                <1>     jne .badOnOff
   889 000021E0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   890 000021E5 6681FB4620          <1>     cmp bx, "F "
   891 000021EA 7513                <1>     jne .badOnOff
   892                              <1>     ;Set off
   893 000021EC 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   894 000021EE EB0A                <1>     jmp short .setVerify
   895                              <1> .maybeOn:
   896 000021F0 663D4F4E            <1>     cmp ax, "ON"
   897 000021F4 7509                <1>     jne .badOnOff
   898                              <1>     ;Set on
   899 000021F6 31C0                <1>     xor eax, eax
   900 000021F8 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   901                              <1> .setVerify:
   902 000021FA B42E                <1>     mov ah, 2Eh  ;Set Verify
   903 000021FC CD21                <1>     int 21h
   904                              <1>     return
    13                              <2> %%_ret:
    14 000021FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> .badOnOff:
   906 000021FF 488D1555ECFFFF      <1>     lea rdx, badOnOff
   907 00002206 B409                <1>     mov ah, 09h
   908 00002208 CD21                <1>     int 21h
   909                              <1>     return
    13                              <2> %%_ret:
    14 0000220A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> 
   911                              <1> rename:
   912 0000220B F605AADEFFFFFF      <1>     test byte [arg1Flg], -1
   913 00002212 0F846EF5FFFF        <1>     jz badArgError
   914 00002218 F605A0DEFFFFFF      <1>     test byte [arg2Flg], -1
   915 0000221F 0F8461F5FFFF        <1>     jz badArgError
   916 00002225 488D35F1DFFFFF      <1>     lea rsi, cmdBuffer
   917 0000222C 0FB6058ADEFFFF      <1>     movzx eax, byte [arg1Off]
   918 00002233 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   919                              <1>     ;rsi points to terminating char
   920 00002236 AC                  <1>     lodsb   ;Get first char in AL
   921 00002237 48FFCE              <1>     dec rsi ;Go back to this char
   922 0000223A E89C0B0000          <1>     call isALEndOfCommand
   923 0000223F 0F822FF5FFFF        <1>     jc badParamError
   924 00002245 488D3DD2E3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   925                              <1> .copyName1:
   926 0000224C AC                  <1>     lodsb
   927 0000224D E8890B0000          <1>     call isALEndOfCommand
   928 00002252 0F841CF5FFFF        <1>     je badParamError
   929 00002258 E8680B0000          <1>     call isALterminator
   930 0000225D 7403                <1>     jz .endOfName1
   931 0000225F AA                  <1>     stosb
   932 00002260 EBEA                <1>     jmp short .copyName1
   933                              <1> .endOfName1:
   934 00002262 31C0                <1>     xor eax, eax
   935 00002264 AA                  <1>     stosb   ;Store this 0 at rdi
   936 00002265 488D35B1DFFFFF      <1>     lea rsi, cmdBuffer
   937 0000226C 0FB6054DDEFFFF      <1>     movzx eax, byte [arg2Off]
   938 00002273 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   939 00002276 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   940 0000227A 0F84F4F4FFFF        <1>     je badParamError
   941 00002280 AC                  <1>     lodsb   ;Get first char in AL
   942 00002281 48FFCE              <1>     dec rsi ;Go back to this char
   943 00002284 E8520B0000          <1>     call isALEndOfCommand
   944 00002289 0F82E5F4FFFF        <1>     jc badParamError
   945 0000228F 488D3D08E4FFFF      <1>     lea rdi, destPath
   946                              <1> .copyName2:
   947 00002296 AC                  <1>     lodsb
   948 00002297 E83F0B0000          <1>     call isALEndOfCommand
   949 0000229C 740A                <1>     je .endOfName2
   950 0000229E E8220B0000          <1>     call isALterminator
   951 000022A3 7403                <1>     jz .endOfName2
   952 000022A5 AA                  <1>     stosb
   953 000022A6 EBEE                <1>     jmp short .copyName2
   954                              <1> .endOfName2:
   955 000022A8 31C0                <1>     xor eax, eax
   956 000022AA AA                  <1>     stosb   ;Store this 0 at rdi
   957 000022AB 488D156CE3FFFF      <1>     lea rdx, sourcePath
   958 000022B2 488D3DE5E3FFFF      <1>     lea rdi, destPath
   959 000022B9 B800560000          <1>     mov eax, 5600h
   960 000022BE CD21                <1>     int 21h
   961                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022C0 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022C2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   962 000022C3 3C0F                <1>     cmp al, errBadDrv
   963 000022C5 0F84B2F4FFFF        <1>     je badDriveError
   964 000022CB 3C0B                <1>     cmp al, errBadFmt
   965 000022CD 0F84CEF4FFFF        <1>     je badDirError
   966 000022D3 E9C0F4FFFF          <1>     jmp badDupFnf
   967                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   968                              <1> touch:
   969                              <1> ;Temporarily used to create files
   970 000022D8 F605DDDDFFFFFF      <1>     test byte [arg1Flg], -1
   971 000022DF 0F84A1F4FFFF        <1>     jz badArgError
   972 000022E5 E80B0C0000          <1>     call buildCommandPath
   973 000022EA 488D156DE1FFFF      <1>     lea rdx, searchSpec
   974 000022F1 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   975 000022F6 31C9                <1>     xor ecx, ecx
   976 000022F8 CD21                <1>     int 21h
   977 000022FA 720B                <1>     jc .touchError
   978 000022FC 0FB7D8              <1>     movzx ebx, ax
   979 000022FF B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   980 00002304 CD21                <1>     int 21h
   981                              <1>     return
    13                              <2> %%_ret:
    14 00002306 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .touchError:
   983 00002307 488D15FBEAFFFF      <1>     lea rdx, touchErr
   984 0000230E E995F4FFFF          <1>     jmp badCmn
   985                              <1> 
   986                              <1> join:
   987                              <1> ;Mock join command, to test join. Make an external command.
   988                              <1> ;Mounts the A drive on C:\JOINTEST,0
   989 00002313 F605AF000000FF      <1>     test byte [.joinOn], -1
   990 0000231A 743D                <1>     jz .okJoin
   991                              <1> .joindisable:
   992 0000231C B800520000          <1>     mov eax, 5200h  
   993 00002321 CD21                <1>     int 21h
   994                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
   995 00002323 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
   996 00002328 CD2A                <1>     int 2Ah
   997 0000232A 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
   998 0000232E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
   999 00002332 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1000 00002338 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1001 0000233B C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1002 0000233F FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1003 00002342 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1004 00002347 CD2A                <1>     int 2Ah
  1005 00002349 C6057900000000      <1>     mov byte [.joinOn], 0
  1006 00002350 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1007 00002357 EB45                <1>     jmp short .joinExit
  1008                              <1> .okJoin:
  1009 00002359 C60569000000FF      <1>     mov byte [.joinOn], -1
  1010 00002360 B800520000          <1>     mov eax, 5200h  
  1011 00002365 CD21                <1>     int 21h
  1012 00002367 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1013 0000236B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1014                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1015 0000236F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1016 00002374 CD2A                <1>     int 2Ah
  1017 00002376 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1018 0000237C 4889DF              <1>     mov rdi, rbx
  1019 0000237F 488D3544000000      <1>     lea rsi, .joinPath
  1020 00002386 B90C000000          <1>     mov ecx, .joinPathL
  1021 0000238B F3A4                <1>     rep movsb   ;Copy chars over
  1022 0000238D FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1023 00002390 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1024 00002395 CD2A                <1>     int 2Ah
  1025 00002397 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1026                              <1> .joinExit:
  1027 0000239E B800090000          <1>     mov eax, 0900h
  1028 000023A3 CD21                <1>     int 21h
  1029                              <1>     return
    13                              <2> %%_ret:
    14 000023A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1030 000023A6 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1030 000023AF 61626C65640D0A24    <1>
  1031 000023B7 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1031 000023C0 7361626C65640D0A24  <1>
  1032 000023C9 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1033 000023CA 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1033 000023D3 535400              <1>
  1034                              <1> .joinPathL  equ $ - .joinPath 
  1035                              <1> 
  1036                              <1> subst:
  1037                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1038                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1039 000023D6 F605D3000000FF      <1>     test byte [.substOn], -1
  1040 000023DD 7443                <1>     jz .okSubst
  1041                              <1> .substdisable:
  1042 000023DF B800520000          <1>     mov eax, 5200h  
  1043 000023E4 CD21                <1>     int 21h
  1044                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1045 000023E6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1046 000023EB CD2A                <1>     int 2Ah
  1047 000023ED 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1048 000023F1 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1049 000023F8 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1050 000023FE C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1051 00002401 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1052 00002405 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1053 0000240B B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1054 00002410 CD2A                <1>     int 2Ah
  1055 00002412 C6059700000000      <1>     mov byte [.substOn], 0
  1056 00002419 488D157D000000      <1>     lea rdx, .substDisableMsg
  1057 00002420 EB61                <1>     jmp short .substExit
  1058                              <1> .okSubst:
  1059 00002422 C60587000000FF      <1>     mov byte [.substOn], -1
  1060 00002429 B800520000          <1>     mov eax, 5200h  
  1061 0000242E CD21                <1>     int 21h
  1062 00002430 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1063 00002435 CD2A                <1>     int 2Ah
  1064 00002437 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1065 0000243B 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1066 00002442 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1067 00002446 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1068 0000244D 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1069 00002451 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1070                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1071 00002458 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1072 0000245E 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1073 00002464 4889DF              <1>     mov rdi, rbx
  1074 00002467 488D3543000000      <1>     lea rsi, .substPath
  1075 0000246E B90C000000          <1>     mov ecx, .substPathL
  1076 00002473 F3A4                <1>     rep movsb   ;Copy chars over
  1077 00002475 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1078 0000247A CD2A                <1>     int 2Ah
  1079 0000247C 488D1508000000      <1>     lea rdx, .substEnableMsg
  1080                              <1> .substExit:
  1081 00002483 B800090000          <1>     mov eax, 0900h
  1082 00002488 CD21                <1>     int 21h
  1083                              <1>     return
    13                              <2> %%_ret:
    14 0000248A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084 0000248B 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1084 00002494 6E61626C65640D0A24  <1>
  1085 0000249D 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1085 000024A6 697361626C65640D0A- <1>
  1085 000024AF 24                  <1>
  1086 000024B0 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1087 000024B1 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1087 000024BA 535400              <1>
  1088                              <1> .substPathL  equ $ - .substPath 
  1089                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1090                              <1> truename:
  1091 000024BD F605F8DBFFFFFF      <1>     test byte [arg1Flg], -1
  1092 000024C4 0F84BCF2FFFF        <1>     jz badArgError
  1093                              <1>     ;Explicitly call Truename if we remove truename from this function
  1094 000024CA 0FB605ECDBFFFF      <1>     movzx eax, byte [arg1Off]
  1095 000024D1 488D1545DDFFFF      <1>     lea rdx, cmdBuffer
  1096 000024D8 4801C2              <1>     add rdx, rax    ;Go to the start of the pathname
  1097 000024DB B978000000          <1>     mov ecx, 120    ;Only search within 128 chars
  1098 000024E0 B00D                <1>     mov al, CR     ;Search for the first space char after the argument
  1099 000024E2 4889D7              <1>     mov rdi, rdx
  1100 000024E5 F2AE                <1>     repne scasb
  1101 000024E7 48FFCF              <1>     dec rdi ;Go back a char
  1102 000024EA C60700              <1>     mov byte [rdi], 0   ;Make ASCIIZ
  1103 000024ED 4889FD              <1>     mov rbp, rdi    ;Have rbp point to the end of the string
  1104 000024F0 4889D6              <1>     mov rsi, rdx    ;Point rsi to start of path
  1105 000024F3 488D3D64DFFFFF      <1>     lea rdi, searchSpec ;Store the path here
  1106 000024FA B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1107 000024FF CD21                <1>     int 21h
  1108 00002501 730D                <1>     jnc .writePath
  1109 00002503 3C02                <1>     cmp al, 2
  1110 00002505 0F8484F2FFFF        <1>     je badFileError
  1111 0000250B E964F2FFFF          <1>     jmp badParamError
  1112                              <1> .writePath:
  1113 00002510 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1114 00002513 B9FFFFFFFF          <1>     mov ecx, -1
  1115 00002518 30C0                <1>     xor al, al
  1116 0000251A F2AE                <1>     repne scasb     ;Get the new len
  1117 0000251C F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1118 0000251E FFC9                <1>     dec ecx
  1119 00002520 BB01000000          <1>     mov ebx, 01
  1120 00002525 B440                <1>     mov ah, 40h
  1121 00002527 CD21                <1>     int 21h
  1122 00002529 E88E050000          <1>     call printCRLF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 0000252E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> label:
  1126                              <1> ;Displays/Changes/Deletes the file label
  1127 0000252F 488D1508000000      <1>     lea rdx, .l1
  1128 00002536 B800090000          <1>     mov eax, 0900h
  1129 0000253B CD21                <1>     int 21h
  1130                              <1>     return
    13                              <2> %%_ret:
    14 0000253D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131 0000253E 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1131 00002547 6E20756E696D706C65- <1>
  1131 00002550 6D656E7465640D0A24  <1>
  1132                              <1> 
  1133                              <1> mklbl:
  1134                              <1>     ;lea rdx, .l1
  1135                              <1>     ;mov cx, 08h ;Make a label
  1136                              <1>     ;mov eax, 3C00h
  1137                              <1>     ;int 21h
  1138                              <1> 
  1139                              <1>     ;mov ebx, eax
  1140                              <1>     ;mov eax, 3E00h  ;Close the handle
  1141                              <1>     ;int 21h
  1142                              <1>     ;return
  1143                              <1> 
  1144                              <1> ;.l1: db "TESTLABEL",0
  1145 00002559 488D1508000000      <1>     lea rdx, .l1
  1146 00002560 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1147 00002565 CD21                <1>     int 21h
  1148                              <1>     return
    13                              <2> %%_ret:
    14 00002567 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> .l1:
  1150                              <1>     istruc exFcb
  1151 00002568 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1152 00002569 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1153 0000256F 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1154 00002570 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1155 00002578 4C2020              <1>     at exFcb.fileext,   db "L  "
  1156 0000257B 00000000            <1>     at exFcb.curBlock,  dd 0
  1157 0000257F 00<rep 15h>         <1>     iend 
  1158                              <1> rmlbl:
  1159 00002594 488D1508000000      <1>     lea rdx, .l1
  1160 0000259B B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1161 000025A0 CD21                <1>     int 21h
  1162                              <1>     return
    13                              <2> %%_ret:
    14 000025A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1163                              <1> .l1:    ;FCB to volume label
  1164                              <1>     istruc exFcb
  1165 000025A3 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1166 000025A4 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1167 000025AA 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1168 000025AB 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1169 000025B3 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1170 000025B6 00000000            <1>     at exFcb.curBlock,  dd 0
  1171 000025BA 00<rep 15h>         <1>     iend 
  1172                              <1> 
  1173                              <1> rnlbl:
  1174 000025CF 488D1508000000      <1>     lea rdx, .l1
  1175 000025D6 B800170000          <1>     mov eax, 1700h
  1176 000025DB CD21                <1>     int 21h
  1177                              <1>     return
    13                              <2> %%_ret:
    14 000025DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1178                              <1> .l1:
  1179                              <1>     istruc exRenFcb
  1180 000025DE FF                  <1>     at exRenFcb.extSig,     db -1
  1181 000025DF 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1182 000025E5 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1183 000025E6 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1184 000025EE 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1185 000025F1 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1185 000025FA 4C414245            <1>
  1186 000025FE 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1187 00002601 00<rep 4h>          <1>     iend
  1188                              <1> volume:
  1189 00002605 488D3513DCFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1190 0000260C E8D1070000          <1>     call skipSeparators
  1191 00002611 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1192 00002618 E8C5070000          <1>     call skipSeparators
  1193 0000261D AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1194 0000261E E8B8070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1195 00002623 7507                <1>     jnz .checkDriveLetter
  1196 00002625 E852070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1197 0000262A EB35                <1>     jmp short .dirEP
  1198                              <1> .checkDriveLetter:
  1199 0000262C 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1200 0000262F 0F8548F1FFFF        <1>     jne badDriveError
  1201 00002635 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1202 00002638 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1203 0000263B E8A2070000          <1>     call skipSeparators
  1204 00002640 AC                  <1>     lodsb   ;Get the non-space char in al
  1205 00002641 E895070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1206 00002646 0F8531F1FFFF        <1>     jne badDriveError
  1207                              <1> ;This argument should've been parsed into FCB1 so use that result
  1208 0000264C 8A056CDAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1209 00002652 A8FF                <1>     test al, -1
  1210 00002654 0F8523F1FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1211 0000265A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1212 0000265F FFC8                <1>     dec eax ;Convert to 0 based number
  1213                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1214 00002661 E8B0090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1215 00002666 488D1581DFFFFF      <1>     lea rdx, volFcb
  1216 0000266D FFC0                <1>     inc eax ;Get 1 based drive number
  1217 0000266F 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1218 00002671 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1219 00002674 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1220 00002679 CD21                <1>     int 21h
  1221 0000267B 50                  <1>     push rax
  1222                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1223 0000267C 488D1502E2FFFF      <1>     lea rdx, crlf
  1224 00002683 B409                <1>     mov ah, 09h
  1225 00002685 CD21                <1>     int 21h
  1226 00002687 488D157CE4FFFF      <1>     lea rdx, volMes
  1227 0000268E B409                <1>     mov ah, 09h
  1228 00002690 CD21                <1>     int 21h
  1229 00002692 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1230 00002694 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1231 00002697 B402                <1>     mov ah, 02h
  1232 00002699 CD21                <1>     int 21h
  1233 0000269B 58                  <1>     pop rax
  1234 0000269C 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1235 0000269E 7409                <1>     jz .volIDOk
  1236 000026A0 488D157AE4FFFF      <1>     lea rdx, volNo
  1237 000026A7 EB19                <1>     jmp short .volEndPrint
  1238                              <1> .volIDOk:
  1239 000026A9 488D156CE4FFFF      <1>     lea rdx, volOk
  1240 000026B0 B409                <1>     mov ah, 09h
  1241 000026B2 CD21                <1>     int 21h
  1242 000026B4 C6052ADAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1243 000026BB 488D1518DAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1244                              <1> .volEndPrint:
  1245 000026C2 B409                <1>     mov ah, 09h
  1246 000026C4 CD21                <1>     int 21h
  1247 000026C6 488D15B8E1FFFF      <1>     lea rdx, crlf
  1248 000026CD B409                <1>     mov ah, 09h
  1249 000026CF CD21                <1>     int 21h
  1250                              <1>     return
    13                              <2> %%_ret:
    14 000026D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1251                              <1> 
  1252                              <1> version:
  1253 000026D2 488D15ACE1FFFF      <1>     lea rdx, crlf
  1254 000026D9 B409                <1>     mov ah, 09h
  1255 000026DB CD21                <1>     int 21h
  1256 000026DD 488D1514E4FFFF      <1>     lea rdx, dosVer
  1257 000026E4 B409                <1>     mov ah, 09h
  1258 000026E6 CD21                <1>     int 21h
  1259 000026E8 E80C000000          <1>     call .printVersionNumber
  1260 000026ED 488D1591E1FFFF      <1>     lea rdx, crlf
  1261 000026F4 B409                <1>     mov ah, 09h
  1262 000026F6 CD21                <1>     int 21h
  1263                              <1>     return
    13                              <2> %%_ret:
    14 000026F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1264                              <1> .printVersionNumber:
  1265 000026F9 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1266 000026FB CD21                <1>     int 21h
  1267 000026FD 50                  <1>     push rax
  1268 000026FE 0FB6C0              <1>     movzx eax, al
  1269 00002701 E80E080000          <1>     call printDecimalWord
  1270 00002706 B22E                <1>     mov dl, "."
  1271 00002708 B402                <1>     mov ah, 02h
  1272 0000270A CD21                <1>     int 21h
  1273 0000270C 58                  <1>     pop rax
  1274 0000270D 0FB6C4              <1>     movzx eax, ah
  1275 00002710 E8FF070000          <1>     call printDecimalWord
  1276                              <1>     return
    13                              <2> %%_ret:
    14 00002715 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1277                              <1> 
  1278                              <1> 
  1279                              <1> memory:
  1280 00002716 488B1D02D9FFFF      <1>     mov rbx, qword [sysVars]
  1281 0000271D 4885DB              <1>     test rbx, rbx
  1282 00002720 7510                <1>     jnz .sysvarsOK
  1283 00002722 488D1581E6FFFF      <1>     lea rdx, memBad0
  1284 00002729 B409                <1>     mov ah, 09h
  1285 0000272B CD21                <1>     int 21h
  1286 0000272D E985080000          <1>     jmp freezePC.altEP
  1287                              <1> .sysvarsOK:
  1288                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1289                              <1>     ; and rcx to store Application memory
  1290 00002732 31F6                <1>     xor esi, esi
  1291 00002734 31FF                <1>     xor edi, edi
  1292 00002736 31ED                <1>     xor ebp, ebp
  1293 00002738 31C9                <1>     xor ecx, ecx
  1294 0000273A 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1295 0000273E 488B1B              <1>     mov rbx, qword [rbx]
  1296                              <1> .memLp:
  1297 00002741 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1298 00002744 7409                <1>     je .validMCB
  1299 00002746 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1300 00002749 0F8501010000        <1>     jne .badMCBFound
  1301                              <1> .validMCB:
  1302 0000274F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1303 00002752 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1304 00002756 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1305 0000275E 7505                <1>     jne .notDOS
  1306 00002760 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1307 00002763 EB21                <1>     jmp short .gotoNext
  1308                              <1> .notDOS:
  1309 00002765 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1310 0000276D 7505                <1>     jne .notFree
  1311 0000276F 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1312 00002772 EB12                <1>     jmp short .gotoNext
  1313                              <1> .notFree:
  1314 00002774 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1315 0000277C 7505                <1>     jne .notHole
  1316 0000277E 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1317 00002781 EB03                <1>     jmp short .gotoNext
  1318                              <1> .notHole:
  1319 00002783 4801C1              <1>     add rcx, rax    ;Add to Application count
  1320                              <1> .gotoNext:
  1321 00002786 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1322 00002789 7407                <1>     je .endOfWalk
  1323 0000278B 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1324 00002790 EBAF                <1>     jmp short .memLp
  1325                              <1> .endOfWalk:
  1326                              <1>     
  1327 00002792 488D1572E5FFFF      <1>     lea rdx, memDOS
  1328 00002799 B409                <1>     mov ah, 09h
  1329 0000279B CD21                <1>     int 21h
  1330 0000279D 4889F0              <1>     mov rax, rsi
  1331 000027A0 E89D000000          <1>     call .mcbPrintAmount
  1332 000027A5 488D15F7E5FFFF      <1>     lea rdx, memByte
  1333 000027AC B409                <1>     mov ah, 09h
  1334 000027AE CD21                <1>     int 21h
  1335                              <1> 
  1336 000027B0 4885ED              <1>     test rbp, rbp
  1337 000027B3 741E                <1>     jz .skipHole
  1338 000027B5 488D159BE5FFFF      <1>     lea rdx, memHole
  1339 000027BC B409                <1>     mov ah, 09h
  1340 000027BE CD21                <1>     int 21h
  1341 000027C0 4889E8              <1>     mov rax, rbp
  1342 000027C3 E87A000000          <1>     call .mcbPrintAmount
  1343 000027C8 488D15D4E5FFFF      <1>     lea rdx, memByte
  1344 000027CF B409                <1>     mov ah, 09h
  1345 000027D1 CD21                <1>     int 21h
  1346                              <1> .skipHole:
  1347                              <1> 
  1348 000027D3 488D1557E5FFFF      <1>     lea rdx, memApp
  1349 000027DA B409                <1>     mov ah, 09h
  1350 000027DC CD21                <1>     int 21h
  1351 000027DE 4889C8              <1>     mov rax, rcx
  1352 000027E1 E85C000000          <1>     call .mcbPrintAmount
  1353 000027E6 488D15B6E5FFFF      <1>     lea rdx, memByte
  1354 000027ED B409                <1>     mov ah, 09h
  1355 000027EF CD21                <1>     int 21h
  1356                              <1> 
  1357 000027F1 488D1585E5FFFF      <1>     lea rdx, memFree
  1358 000027F8 B409                <1>     mov ah, 09h
  1359 000027FA CD21                <1>     int 21h
  1360 000027FC 4889F8              <1>     mov rax, rdi
  1361 000027FF E83E000000          <1>     call .mcbPrintAmount
  1362 00002804 488D1598E5FFFF      <1>     lea rdx, memByte
  1363 0000280B B409                <1>     mov ah, 09h
  1364 0000280D CD21                <1>     int 21h
  1365                              <1> 
  1366 0000280F 488D15CFE4FFFF      <1>     lea rdx, memSys
  1367 00002816 B409                <1>     mov ah, 09h
  1368 00002818 CD21                <1>     int 21h
  1369 0000281A 4889F0              <1>     mov rax, rsi
  1370 0000281D 4801F8              <1>     add rax, rdi
  1371 00002820 4801C8              <1>     add rax, rcx
  1372 00002823 4801E8              <1>     add rax, rbp
  1373 00002826 E817000000          <1>     call .mcbPrintAmount
  1374 0000282B 488D1571E5FFFF      <1>     lea rdx, memByte
  1375 00002832 B409                <1>     mov ah, 09h
  1376 00002834 CD21                <1>     int 21h
  1377                              <1> 
  1378 00002836 488D1548E0FFFF      <1>     lea rdx, crlf
  1379 0000283D B409                <1>     mov ah, 09h
  1380 0000283F CD21                <1>     int 21h
  1381                              <1>     return
    13                              <2> %%_ret:
    14 00002841 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1382                              <1> 
  1383                              <1> .mcbPrintAmount:
  1384 00002842 51                  <1>     push rcx
  1385 00002843 56                  <1>     push rsi
  1386 00002844 57                  <1>     push rdi
  1387 00002845 55                  <1>     push rbp
  1388 00002846 E8C9060000          <1>     call printDecimalWord
  1389 0000284B 5D                  <1>     pop rbp
  1390 0000284C 5F                  <1>     pop rdi
  1391 0000284D 5E                  <1>     pop rsi
  1392 0000284E 59                  <1>     pop rcx
  1393                              <1>     return
    13                              <2> %%_ret:
    14 0000284F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394                              <1> .badMCBFound:
  1395 00002850 488D1593E5FFFF      <1>     lea rdx, memBad2
  1396 00002857 B409                <1>     mov ah, 09h
  1397 00002859 CD21                <1>     int 21h
  1398 0000285B E957070000          <1>     jmp freezePC.altEP
  1399                              <1> 
  1400                              <1> type:
  1401 00002860 F60555D8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1402 00002867 0F8419EFFFFF        <1>     jz badArgError
  1403 0000286D F6054BD8FFFFFF      <1>     test byte [arg2Flg], -1
  1404 00002874 0F850CEFFFFF        <1>     jnz badArgError         ;If this set, error
  1405 0000287A 488D359CD9FFFF      <1>     lea rsi, cmdBuffer
  1406 00002881 0FB60535D8FFFF      <1>     movzx eax, byte [arg1Off]
  1407 00002888 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1408 0000288B 803E0D              <1>     cmp byte [rsi], CR
  1409 0000288E 0F84F2EEFFFF        <1>     je badArgError
  1410 00002894 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1411 00002898 750F                <1>     jne .noDrive
  1412 0000289A 0FB6051DD8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1413 000028A1 3CFF                <1>     cmp al, -1
  1414 000028A3 0F84D4EEFFFF        <1>     je badDriveError
  1415                              <1> .noDrive:
  1416                              <1>     ;Now we open the provided file
  1417 000028A9 E84B070000          <1>     call copyArgumentToSearchSpec
  1418 000028AE 488D15A9DBFFFF      <1>     lea rdx, searchSpec
  1419 000028B5 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1420 000028BA CD21                <1>     int 21h
  1421 000028BC 0F82CDEEFFFF        <1>     jc badFileError
  1422 000028C2 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1423 000028C9 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1424                              <1> .lp:
  1425 000028CC B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1426 000028D1 B43F                <1>     mov ah, 3Fh ;Read handle
  1427 000028D3 CD21                <1>     int 21h
  1428 000028D5 89C1                <1>     mov ecx, eax
  1429 000028D7 67E317              <1>     jecxz .exit
  1430 000028DA 53                  <1>     push rbx    ;Save the original in handle
  1431 000028DB BB01000000          <1>     mov ebx, 1  ;STDOUT
  1432 000028E0 B440                <1>     mov ah, 40h
  1433 000028E2 CD21                <1>     int 21h
  1434 000028E4 5B                  <1>     pop rbx ;Get back the original read handle
  1435 000028E5 720F                <1>     jc .exitBad
  1436 000028E7 39C8                <1>     cmp eax, ecx
  1437 000028E9 74E1                <1>     je .lp
  1438 000028EB FFC9                <1>     dec ecx ;One less for a ^Z
  1439 000028ED 39C8                <1>     cmp eax, ecx
  1440 000028EF 7505                <1>     jne .exitBad
  1441                              <1> .exit:
  1442 000028F1 B43E                <1>     mov ah, 3Eh ;Close handle
  1443 000028F3 CD21                <1>     int 21h
  1444                              <1>     return
    13                              <2> %%_ret:
    14 000028F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> .exitBad:
  1446                              <1>     ;Print a disk error message... use a table to build the message but for
  1447                              <1>     ; now, just exit
  1448                              <1>     ;If it is a char device, don't print a error
  1449 000028F6 EBF9                <1>     jmp short .exit
  1450                              <1> 
  1451                              <1> exit:
  1452 000028F8 F6052ED7FFFFFF      <1>     test byte [permaSwitch], -1
  1453                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028FF 75(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1454 00002901 488B050FD7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1455 00002908 483DFFFFFFFF        <1>     cmp rax, -1
  1456                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000290E 74(F5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1457 00002910 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1458                              <1> 
  1459 00002914 488B1513D7FFFF      <1>     mov rdx, qword [parentInt22]
  1460 0000291B 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1461 0000291F B822250000          <1>     mov eax, 2522h
  1462 00002924 CD21                <1>     int 21h
  1463                              <1> 
  1464 00002926 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1465 0000292B CD21                <1>     int 21h
  1466                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000292D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1467                              <1> 
  1468                              <1> launchChild:
  1469                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1470                              <1> ;Here we must search the CWD or all path componants before failing
  1471                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1472 0000292E E8E3060000          <1>     call setDTA
  1473                              <1> 
  1474 00002933 8B0592D7FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1475 00002939 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1476 0000293E 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1477 00002943 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1478 00002948 741D                <1>     je .noExt
  1479 0000294A E828E9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1480 0000294F 0F855B010000        <1>     jnz .dfltErrExit
  1481                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1482 00002955 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1483                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1484                              <1>     ;So it is a com or exe that we are searching for for now
  1485 0000295B 488D3D3BD9FFFF      <1>     lea rdi, cmdPathSpec
  1486 00002962 4889FA              <1>     mov rdx, rdi
  1487 00002965 EB24                <1>     jmp short .search
  1488                              <1> .noExt:
  1489                              <1>     ;If the filename has no extension, append a .*
  1490                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1491 00002967 31DB                <1>     xor ebx, ebx
  1492 00002969 488D3D2DD9FFFF      <1>     lea rdi, cmdPathSpec
  1493 00002970 4889FA              <1>     mov rdx, rdi
  1494 00002973 31C0                <1>     xor eax, eax
  1495 00002975 B9FFFFFFFF          <1>     mov ecx, -1
  1496 0000297A F2AE                <1>     repne scasb
  1497 0000297C 48FFCF              <1>     dec rdi ;Point to the terminating null
  1498 0000297F 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1499 00002982 66B82E2A            <1>     mov ax, ".*"
  1500 00002986 66AB                <1>     stosw
  1501 00002988 30C0                <1>     xor al, al  ;Store terminating null
  1502 0000298A AA                  <1>     stosb
  1503                              <1> .search:
  1504 0000298B B906000000          <1>     mov ecx, dirIncFiles
  1505 00002990 B44E                <1>     mov ah, 4Eh ;Find First File
  1506 00002992 CD21                <1>     int 21h
  1507 00002994 0F8216010000        <1>     jc .dfltErrExit
  1508 0000299A E8C4000000          <1>     call .noExtCheckExt
  1509                              <1> .moreSearch:
  1510 0000299F B44F                <1>     mov ah, 4Fh
  1511 000029A1 CD21                <1>     int 21h
  1512 000029A3 7207                <1>     jc .noMoreFiles
  1513 000029A5 E8B9000000          <1>     call .noExtCheckExt
  1514 000029AA EBF3                <1>     jmp short .moreSearch
  1515                              <1> .noMoreFiles:
  1516 000029AC 85DB                <1>     test ebx, ebx
  1517 000029AE 0F84FC000000        <1>     jz .dfltErrExit
  1518                              <1> ;So we have a valid executable
  1519 000029B4 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1520 000029B7 F7C301000000        <1>     test ebx, 1
  1521 000029BD 7407                <1>     jz .launchexebat
  1522 000029BF B82E434F4D          <1>     mov eax, ".COM"
  1523 000029C4 EB14                <1>     jmp short .buildTail
  1524                              <1> .launchexebat:
  1525 000029C6 F7C302000000        <1>     test ebx, 2
  1526 000029CC 7407                <1>     jz .launchbat
  1527 000029CE B82E455845          <1>     mov eax, ".EXE"
  1528 000029D3 EB05                <1>     jmp short .buildTail
  1529                              <1> .launchbat:
  1530                              <1> ;Temporary For BAT
  1531 000029D5 E9D6000000          <1>     jmp .dfltErrExit
  1532                              <1> .buildTail:
  1533 000029DA AB                  <1>     stosd
  1534 000029DB 31C0                <1>     xor eax, eax
  1535 000029DD AA                  <1>     stosb   ;Store the terminating null
  1536                              <1> ;Now we build the cmdtail properly
  1537 000029DE 488D3D38D7FFFF      <1>     lea rdi, cmdTail
  1538 000029E5 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1539 000029E8 B910000000          <1>     mov ecx, 128/8
  1540 000029ED F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1541 000029F0 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1542 000029F4 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1543 000029FB AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1544 000029FC 88C4                <1>     mov ah, al  ;Move the number into ah
  1545 000029FE 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1546                              <1>     ;Skip the parsed command name
  1547                              <1> .passName:
  1548 00002A00 AC                  <1>     lodsb   ;Get the char in al
  1549 00002A01 FEC5                <1>     inc ch
  1550 00002A03 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1551 00002A06 741D                <1>     je short .finishBuildingTailNoCR
  1552 00002A08 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1553 00002A0A 7418                <1>     je short .finishBuildingTail
  1554 00002A0C 3C20                <1>     cmp al, SPC
  1555 00002A0E 75F0                <1>     jne short .passName
  1556                              <1>     ;Now we copy the name 
  1557 00002A10 E8CD030000          <1>     call skipSeparators ;Start by skipping spaces (there are no embedded tabs)
  1558                              <1>     ;rsi points to the first non-space char
  1559                              <1> .copyTail:
  1560 00002A15 AC                  <1>     lodsb
  1561 00002A16 3C0D                <1>     cmp al, CR
  1562 00002A18 740A                <1>     je short .finishBuildingTail
  1563 00002A1A AA                  <1>     stosb
  1564 00002A1B FEC1                <1>     inc cl
  1565 00002A1D 80F97F              <1>     cmp cl, 127 ;Exit condition
  1566 00002A20 75F3                <1>     jne .copyTail
  1567 00002A22 EB01                <1>     jmp short .finishBuildingTailNoCR
  1568                              <1> .finishBuildingTail:
  1569 00002A24 AA                  <1>     stosb   ;Store the CR
  1570                              <1> .finishBuildingTailNoCR:
  1571 00002A25 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1572                              <1> .launch:
  1573 00002A27 488D1DCFD6FFFF      <1>     lea rbx, launchBlock
  1574 00002A2E 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1575 00002A32 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1576 00002A35 488D05E1D6FFFF      <1>     lea rax, cmdTail
  1577 00002A3C 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1578 00002A40 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1579 00002A44 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1580 00002A48 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1581 00002A4C 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1582 00002A50 488D1546D8FFFF      <1>     lea rdx, cmdPathSpec
  1583 00002A57 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1584 00002A5C CD21                <1>     int 21h
  1585 00002A5E E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1586                              <1> .noExtCheckExt:
  1587                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1588 00002A63 488D3586D6FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1589 00002A6A 488D3D7BD8FFFF      <1>     lea rdi, fcbCmdSpec
  1590 00002A71 E8F5030000          <1>     call asciiFilenameToFCB
  1591 00002A76 8B0578D8FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1592 00002A7C 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1593 00002A81 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1594 00002A86 3D434F4D20          <1>     cmp eax, "COM "
  1595 00002A8B 7507                <1>     jne .neceexe
  1596 00002A8D 81CB01000000        <1>     or ebx, 1
  1597                              <1>     return
    13                              <2> %%_ret:
    14 00002A93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1598                              <1> .neceexe:
  1599 00002A94 3D45584520          <1>     cmp eax, "EXE "
  1600 00002A99 7507                <1>     jne .necebat
  1601 00002A9B 81CB02000000        <1>     or ebx, 2
  1602                              <1>     return
    13                              <2> %%_ret:
    14 00002AA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1603                              <1> .necebat:
  1604 00002AA2 3D42415420          <1>     cmp eax, "BAT "
  1605                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AA7 75(A1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1606 00002AA9 81CB04000000        <1>     or ebx, 4
  1607                              <1>     return
    13                              <2> %%_ret:
    14 00002AAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1608                              <1> 
  1609                              <1> .dfltErrExit:
  1610 00002AB0 488D152BDEFFFF      <1>     lea rdx, badCmd
  1611 00002AB7 B409                <1>     mov ah, 09h
  1612 00002AB9 CD21                <1>     int 21h
  1613                              <1>     return
    13                              <2> %%_ret:
    14 00002ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002ABC 488D15C2DDFFFF      <1>     lea rdx, crlf
     5 00002AC3 BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002AC8 B440                <1>     mov ah, 40h ;Print a new line
     7 00002ACA B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002ACF CD21                <1>     int 21h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002AD1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002AD2 53                  <1>     push rbx
    18 00002AD3 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002AD5 803D5AD5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002ADC 7240                <1>     jb .usDate
    21 00002ADE 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002AE0 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002AE5 E8B0000000          <1>     call .printFirst
    25 00002AEA 8A1551D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002AF0 B402                <1>     mov ah, 02h
    27 00002AF2 CD21                <1>     int 21h
    28                              <1> 
    29 00002AF4 89C8                <1>     mov eax, ecx
    30 00002AF6 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002AFB C1E805              <1>     shr eax, 5
    32 00002AFE E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002B03 8A1538D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002B09 B402                <1>     mov ah, 02h
    36 00002B0B CD21                <1>     int 21h
    37                              <1> 
    38 00002B0D 89C8                <1>     mov eax, ecx
    39 00002B0F 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002B14 C1E809              <1>     shr eax, 9
    41 00002B17 5B                  <1>     pop rbx ;Get the year signature back
    42 00002B18 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002B1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002B1E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002B23 C1E805              <1>     shr eax, 5
    48 00002B26 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002B2B 8A1510D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002B31 B402                <1>     mov ah, 02h
    52 00002B33 CD21                <1>     int 21h
    53                              <1> 
    54 00002B35 89C8                <1>     mov eax, ecx
    55 00002B37 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002B3C E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002B41 8A15FAD4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 00002B47 B402                <1>     mov ah, 02h
    60 00002B49 CD21                <1>     int 21h
    61                              <1> 
    62 00002B4B 89C8                <1>     mov eax, ecx
    63 00002B4D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002B52 C1E809              <1>     shr eax, 9
    65 00002B55 5B                  <1>     pop rbx ;Get the year signature back
    66 00002B56 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 00002B5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 00002B5C 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002B61 C1E809              <1>     shr eax, 9
    72 00002B64 5B                  <1>     pop rbx ;Get the year signature back
    73 00002B65 E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002B6A 8A15D1D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002B70 B402                <1>     mov ah, 02h
    77 00002B72 CD21                <1>     int 21h
    78                              <1> 
    79 00002B74 89C8                <1>     mov eax, ecx
    80 00002B76 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002B7B C1E805              <1>     shr eax, 5
    82 00002B7E E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002B83 8A15B8D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 00002B89 B402                <1>     mov ah, 02h
    86 00002B8B CD21                <1>     int 21h
    87                              <1> 
    88 00002B8D 89C8                <1>     mov eax, ecx
    89 00002B8F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002B94 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 00002B99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002B9A 51                  <1>     push rcx
    96 00002B9B E8E5030000          <1>     call getDecimalWord
    97 00002BA0 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002BA2 7504                <1>     jnz .skipSpace
    99 00002BA4 88CD                <1>     mov ch, cl
   100 00002BA6 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002BA8 88CA                <1>     mov dl, cl
   103 00002BAA B402                <1>     mov ah, 02h
   104 00002BAC CD21                <1>     int 21h
   105 00002BAE 88EA                <1>     mov dl, ch
   106 00002BB0 B402                <1>     mov ah, 02h
   107 00002BB2 CD21                <1>     int 21h
   108 00002BB4 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002BB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002BB6 51                  <1>     push rcx
   112 00002BB7 E8C9030000          <1>     call getDecimalWord
   113 00002BBC 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002BBE 75E8                <1>     jnz .skipSpace
   115 00002BC0 88CD                <1>     mov ch, cl
   116 00002BC2 B130                <1>     mov cl, "0"
   117 00002BC4 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002BC6 05BC070000          <1>     add eax, 1980
   120 00002BCB 51                  <1>     push rcx
   121 00002BCC 53                  <1>     push rbx
   122 00002BCD E8B3030000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002BD2 5B                  <1>     pop rbx
   124 00002BD3 84DB                <1>     test bl, bl
   125 00002BD5 740C                <1>     jz .twoDigitYear
   126 00002BD7 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002BD9 B402                <1>     mov ah, 02h
   128 00002BDB CD21                <1>     int 21h
   129 00002BDD 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002BDF B402                <1>     mov ah, 02h
   131 00002BE1 CD21                <1>     int 21h
   132                              <1> .twoDigitYear:
   133 00002BE3 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002BE6 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002BE8 B402                <1>     mov ah, 02h
   136 00002BEA CD21                <1>     int 21h
   137 00002BEC 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002BEE B402                <1>     mov ah, 02h
   139 00002BF0 CD21                <1>     int 21h
   140 00002BF2 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002BF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002BF4 89C1                <1>     mov ecx, eax
   149 00002BF6 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002BFB C1E80B              <1>     shr eax, 11
   151 00002BFE 803D42D4FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002C05 750B                <1>     jne .ampm
   153 00002C07 E85A000000          <1>     call .printHours
   154 00002C0C E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002C11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002C12 3D0C000000          <1>     cmp eax, 12
   158 00002C17 7713                <1>     ja .pm
   159 00002C19 7416                <1>     je .pm2
   160 00002C1B E846000000          <1>     call .printHours
   161 00002C20 E81D000000          <1>     call .printMinutes
   162 00002C25 B261                <1>     mov dl, "a"
   163 00002C27 B402                <1>     mov ah, 02h
   164 00002C29 CD21                <1>     int 21h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002C2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002C2C 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002C31 E830000000          <1>     call .printHours
   170 00002C36 E807000000          <1>     call .printMinutes
   171 00002C3B B270                <1>     mov dl, "p"
   172 00002C3D B402                <1>     mov ah, 02h
   173 00002C3F CD21                <1>     int 21h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002C41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002C42 8A15FBD3FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002C48 B402                <1>     mov ah, 02h
   178 00002C4A CD21                <1>     int 21h
   179                              <1> 
   180 00002C4C 89C8                <1>     mov eax, ecx
   181 00002C4E 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002C53 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002C56 51                  <1>     push rcx
   185 00002C57 E829030000          <1>     call getDecimalWord
   186 00002C5C 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002C5E 7514                <1>     jnz .skipSpace
   188 00002C60 88CD                <1>     mov ch, cl
   189 00002C62 B130                <1>     mov cl, "0"
   190 00002C64 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002C66 51                  <1>     push rcx
   193 00002C67 E819030000          <1>     call getDecimalWord
   194 00002C6C 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002C6E 7504                <1>     jnz .skipSpace
   196 00002C70 88CD                <1>     mov ch, cl
   197 00002C72 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002C74 88CA                <1>     mov dl, cl
   200 00002C76 B402                <1>     mov ah, 02h
   201 00002C78 CD21                <1>     int 21h
   202 00002C7A 88EA                <1>     mov dl, ch
   203 00002C7C B402                <1>     mov ah, 02h
   204 00002C7E CD21                <1>     int 21h
   205 00002C80 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002C81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002C82 488D156FDEFFFF      <1>     lea rdx, dosVer
   211 00002C89 B409                <1>     mov ah, 09h ;Print String
   212 00002C8B CD21                <1>     int 21h
   213 00002C8D B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002C8F CD21                <1>     int 21h
   215 00002C91 50                  <1>     push rax    ;Save minor version
   216 00002C92 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002C97 E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002C9C B22E                <1>     mov dl, "."
   219 00002C9E B402                <1>     mov ah, 02h
   220 00002CA0 CD21                <1>     int 21h
   221 00002CA2 58                  <1>     pop rax
   222 00002CA3 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002CA5 E889000000          <1>     call hexToBCD
   224 00002CAA E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002CAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002CB0 B21B                <1>     mov dl, ESC
   228 00002CB2 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002CB4 B224                <1>     mov dl, "$"
   232 00002CB6 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002CB8 B23D                <1>     mov dl, "="
   236 00002CBA EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002CBC B27C                <1>     mov dl, "|"
   240 00002CBE EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002CC0 B23E                <1>     mov dl, ">"
   244 00002CC2 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002CC4 B23C                <1>     mov dl, "<"
   248 00002CC6 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002CC8 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002CCA CD21                <1>     int 21h
   253 00002CCC 0441                <1>     add al, "A" ;Convert to letter
   254 00002CCE 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002CD0 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002CD2 CD21                <1>     int 21h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002CD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002CD5 488D3D80D3FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002CDC B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002CDE CD21                <1>     int 21h
   263 00002CE0 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002CE2 FEC2                <1>     inc dl
   265 00002CE4 0441                <1>     add al, "A" ;Convert to letter
   266 00002CE6 B43A                <1>     mov ah, ":"
   267 00002CE8 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002CEA 8A053BD3FFFF        <1>     mov al, byte [pathSep]
   269 00002CF0 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002CF1 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002CF3 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002CF6 CD21                <1>     int 21h
   273 00002CF8 E884000000          <1>     call strlen
   274 00002CFD 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002D03 B440                <1>     mov ah, 40h ;Write to handle
   277 00002D05 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002D0A 488D154BD3FFFF      <1>     lea rdx, currDirStr
   279 00002D11 CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002D13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002D14 51                  <1>     push rcx
   286 00002D15 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002D18 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002D1A 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002D1F 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002D25 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002D28 050A000000          <1>     add eax, 10
   293 00002D2D FFC9                <1>     dec ecx
   294 00002D2F 75F7                <1>     jnz .bth
   295 00002D31 59                  <1>     pop rcx
   296 00002D32 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002D33 51                  <1>     push rcx
   302 00002D34 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002D37 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002D39 3D0A000000          <1>     cmp eax, 10
   306 00002D3E 7209                <1>     jb .htb1
   307 00002D40 2D0A000000          <1>     sub eax, 10
   308 00002D45 FFC1                <1>     inc ecx
   309 00002D47 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002D49 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002D4C 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002D4E 59                  <1>     pop rcx
   314 00002D4F C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002D50 50                  <1>     push rax
   321 00002D51 52                  <1>     push rdx
   322 00002D52 88C4                <1>     mov ah, al
   323 00002D54 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002D56 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002D59 7508                <1>     jnz .upperNybble
   326 00002D5B B220                <1>     mov dl, " "
   327 00002D5D B402                <1>     mov ah, 02h
   328 00002D5F CD21                <1>     int 21h
   329 00002D61 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002D63 50                  <1>     push rax
   332 00002D64 C0EC04              <1>     shr ah, 4
   333 00002D67 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002D6A 88E2                <1>     mov dl, ah
   335 00002D6C B402                <1>     mov ah, 02h ;Print DL
   336 00002D6E CD21                <1>     int 21h
   337 00002D70 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002D71 0430                <1>     add al, "0"
   340 00002D73 88C2                <1>     mov dl, al
   341 00002D75 B402                <1>     mov ah, 02h ;Print DL
   342 00002D77 CD21                <1>     int 21h
   343 00002D79 5A                  <1>     pop rdx
   344 00002D7A 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002D7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002D7C B419                <1>     mov ah, 19h
   350 00002D7E CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002D80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002D81 50                  <1>     push rax
   358 00002D82 57                  <1>     push rdi
   359 00002D83 30C0                <1>     xor al, al
   360 00002D85 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002D87 FFC9                <1>     dec ecx ;rcx = -1
   362 00002D89 F2AE                <1>     repne scasb
   363 00002D8B F7D1                <1>     not ecx
   364 00002D8D 5F                  <1>     pop rdi
   365 00002D8E 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002D8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 00002D90 AC                  <1>     lodsb
   374 00002D91 3C0D                <1>     cmp al, CR
   375 00002D93 7419                <1>     je .endOfInput
   376 00002D95 E82B000000          <1>     call isALterminator
   377 00002D9A 7419                <1>     jz .exit
   378 00002D9C 3A0589D2FFFF        <1>     cmp al, byte [pathSep]
   379 00002DA2 7411                <1>     je .exit
   380 00002DA4 3A0582D2FFFF        <1>     cmp al, byte [switchChar]
   381 00002DAA 7409                <1>     je .exit
   382 00002DAC EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002DAE E802000000          <1>     call .exit
   385 00002DB3 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002DB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002DB5 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002DB9 AC                  <1>     lodsb
   395 00002DBA E806000000          <1>     call isALterminator
   396 00002DBF 75F8                <1>     jnz findTerminator
   397 00002DC1 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002DC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002DC5 E826000000          <1>     call isALseparator
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DCA 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002DCC 3C0A                <1>     cmp al, LF
   405                              <1>     return
    13                              <2> %%_ret:
    14 00002DCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findEndOfCommand:
   408                              <1> ;Moves rsi to the | or CR that terminates this command
   409 00002DCF AC                  <1>     lodsb
   410 00002DD0 E806000000          <1>     call isALEndOfCommand
   411 00002DD5 75F8                <1>     jnz findEndOfCommand
   412 00002DD7 48FFCE              <1>     dec rsi
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002DDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> isALEndOfCommand:
   415 00002DDB 3C7C                <1>     cmp al, "|"
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DDD 74(DA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 00002DDF 3C0D                <1>     cmp al, CR
   418                              <1>     return
    13                              <2> %%_ret:
    14 00002DE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> skipSeparators:
   421                              <1> ;Skips all "standard" command separators. This is not the same as FCB 
   422                              <1> ; command separators but a subset thereof. 
   423                              <1> ;These are the same across all codepages.
   424                              <1> ;Input: rsi must point to the start of the data string
   425                              <1> ;Output: rsi points to the first non-separator char
   426 00002DE2 50                  <1>     push rax
   427                              <1> .l1:
   428 00002DE3 AC                  <1>     lodsb
   429 00002DE4 E807000000          <1>     call isALseparator
   430 00002DE9 74F8                <1>     jz .l1
   431                              <1> .exit:
   432 00002DEB 58                  <1>     pop rax
   433 00002DEC 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command separator
   434                              <1>     return
    13                              <2> %%_ret:
    14 00002DEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> isALseparator:
   437                              <1> ;Returns: ZF=NZ if al is not a command separator 
   438                              <1> ;         ZF=ZE if al is a command separator
   439 00002DF0 3C20                <1>     cmp al, " "
   440                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DF2 74(EF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   441 00002DF4 3C3B                <1>     cmp al, ";"
   442                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DF6 74(EF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   443 00002DF8 3C3D                <1>     cmp al, "="
   444                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DFA 74(EF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   445 00002DFC 3C2C                <1>     cmp al, ","
   446                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DFE 74(EF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   447 00002E00 3C09                <1>     cmp al, TAB
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002E02 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> printPrompt:
   451 00002E03 66813D1DD2FFFFFFFF  <1>     cmp word [promptPtr], -1
   452 00002E0C 750B                <1>     jne .validPrompt
   453                              <1>     ;Here we print the default prompt
   454 00002E0E E8C2FEFFFF          <1>     call putCWDInPrompt
   455 00002E13 E8A8FEFFFF          <1>     call putGTinPrompt
   456                              <1>     return
    13                              <2> %%_ret:
    14 00002E18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   457                              <1> .validPrompt:
   458                              <1>     return
    13                              <2> %%_ret:
    14 00002E19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> clearCommandState:
   461                              <1> ;Clears the command state
   462 00002E1A 488D3D93D2FFFF      <1>     lea rdi, cmdStatePtr
   463 00002E21 B90E000000          <1>     mov ecx, cmdStateL
   464 00002E26 31C0                <1>     xor eax, eax
   465 00002E28 F3AA                <1>     rep stosb
   466 00002E2A C70584D2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002E33 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002E34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> clearCommandLineState:
   470                              <1> ;Clears the command line state after a 0Dh encountered
   471 00002E35 488D3D63D2FFFF      <1>     lea rdi, cmdLineStatePtr
   472 00002E3C B923000000          <1>     mov ecx, cmdLineStateL
   473 00002E41 31C0                <1>     xor eax, eax
   474 00002E43 F3AA                <1>     rep stosb
   475 00002E45 C70561D2FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   475 00002E4E FF                  <1>
   476 00002E4F C7055FD2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   476 00002E58 FF                  <1>
   477                              <1>     return
    13                              <2> %%_ret:
    14 00002E59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> asciiToFCB:
   480                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   481                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   482                              <1> ;Also doesn't check if chars are valid
   483                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   484                              <1> ;Name is space padded.
   485                              <1> ;Input: rsi = ASCII string buffer
   486                              <1> ;       rdi = FCB name buffer
   487                              <1> ;Output: al = Char that terminated the source string 
   488 00002E5A 53                  <1>     push rbx    
   489 00002E5B 57                  <1>     push rdi
   490 00002E5C B90B000000          <1>     mov ecx, 11
   491 00002E61 B020                <1>     mov al, " "
   492 00002E63 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   493 00002E65 5F                  <1>     pop rdi
   494 00002E66 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   495 00002E69 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   496                              <1> asciiFilenameToFCB:
   497                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   498                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   499                              <1> ;Also doesn't check if chars are valid
   500                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   501                              <1> ;Name is space padded.
   502                              <1> ;Input: rsi = ASCII string buffer
   503                              <1> ;       rdi = FCB name buffer
   504                              <1> ;Output: al = Char that terminated the source string 
   505 00002E6B 53                  <1>     push rbx    
   506 00002E6C 57                  <1>     push rdi
   507 00002E6D B90B000000          <1>     mov ecx, 11
   508 00002E72 B020                <1>     mov al, " "
   509 00002E74 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   510 00002E76 5F                  <1>     pop rdi
   511 00002E77 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   512                              <1>     ;Preprocess for Dir Searches
   513 00002E7A 803E2E              <1>     cmp byte [rsi], "."
   514 00002E7D 7509                <1>     jne .processName
   515 00002E7F A4                  <1>     movsb   ;Store the first dot
   516 00002E80 803E2E              <1>     cmp byte [rsi], "."
   517 00002E83 752C                <1>     jne .exitBadChar
   518 00002E85 A4                  <1>     movsb
   519 00002E86 EB29                <1>     jmp short .exitBadChar
   520                              <1> .processName:
   521 00002E88 AC                  <1>     lodsb   ;Get the char in al
   522 00002E89 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   523 00002E8B 7426                <1>     jz .exit
   524 00002E8D 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   525 00002E8F 7407                <1>     je .extSpace
   526 00002E91 3C2E                <1>     cmp al, "."
   527 00002E93 740C                <1>     je .ext
   528 00002E95 AA                  <1>     stosb   ;Store the char
   529 00002E96 EBF0                <1>     jmp short .processName
   530                              <1> .extSpace:
   531                              <1> ;Now we scan for a period in the name
   532 00002E98 AC                  <1>     lodsb   ;Get a char and increase rsi
   533 00002E99 84C0                <1>     test al, al
   534 00002E9B 7416                <1>     jz .exit
   535 00002E9D 3C2E                <1>     cmp al, "."     ;If al is not a period...
   536 00002E9F 75F7                <1>     jne .extSpace   ; keep searching
   537                              <1> .ext:
   538 00002EA1 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   539                              <1> .processExt:
   540 00002EA5 AC                  <1>     lodsb
   541 00002EA6 84C0                <1>     test al, al
   542 00002EA8 7409                <1>     jz .exit
   543 00002EAA 3C20                <1>     cmp al, " "
   544 00002EAC 7405                <1>     je .exit
   545 00002EAE AA                  <1>     stosb
   546 00002EAF EBF4                <1>     jmp short .processExt
   547                              <1> .exitBadChar:
   548 00002EB1 30C0                <1>     xor al, al  ;Return a null terminator
   549                              <1> .exit:
   550 00002EB3 5B                  <1>     pop rbx
   551                              <1>     return
    13                              <2> %%_ret:
    14 00002EB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> FCBToAsciiz:
   554                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   555                              <1> ;Name is space padded too
   556                              <1> ;Input: rsi = FCB name buffer
   557                              <1> ;       rdi = ASCIIZ string buffer
   558 00002EB5 B908000000          <1>     mov ecx, 8
   559 00002EBA F3A4                <1>     rep movsb   ;Move the name over
   560                              <1> .scanNameSpace:
   561 00002EBC 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   562 00002EC0 750D                <1>     jne .ext
   563 00002EC2 48FFCF              <1>     dec rdi
   564 00002EC5 FFC1                <1>     inc ecx
   565 00002EC7 81F908000000        <1>     cmp ecx, 8
   566 00002ECD 72ED                <1>     jb .scanNameSpace
   567                              <1> .ext:
   568 00002ECF 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   569 00002ED4 7506                <1>     jne .validExt
   570 00002ED6 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   571 00002EDA 7415                <1>     je .exit
   572                              <1> .validExt:
   573 00002EDC B02E                <1>     mov al, "." ;We have a valid extension, store a period
   574 00002EDE AA                  <1>     stosb
   575 00002EDF B903000000          <1>     mov ecx, 3
   576 00002EE4 F3A4                <1>     rep movsb   ;Move the three extension chars over
   577                              <1> .scanExtSpace:
   578 00002EE6 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   579 00002EEA 7505                <1>     jne .exit
   580 00002EEC 48FFCF              <1>     dec rdi
   581 00002EEF EBF5                <1>     jmp short .scanExtSpace
   582                              <1> .exit:
   583 00002EF1 31C0                <1>     xor eax, eax
   584 00002EF3 AA                  <1>     stosb   ;Store a null at the end
   585                              <1>     return
    13                              <2> %%_ret:
    14 00002EF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> buildCommandPath:
   588                              <1> ;Based on the first argument on the command line
   589                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   590                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   591 00002EF5 0FB605C1D1FFFF      <1>     movzx eax, byte [arg1Off]
   592 00002EFC 488D351AD3FFFF      <1>     lea rsi, cmdBuffer
   593 00002F03 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   594 00002F06 488D3D51D5FFFF      <1>     lea rdi, searchSpec
   595                              <1> .buildPath:
   596 00002F0D E8DFE7FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   597 00002F12 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   598                              <1>     return
    13                              <2> %%_ret:
    14 00002F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1>     
   600                              <1> printDecimalWord:
   601                              <1> ;Takes qword in rax and print it's decimal representation
   602                              <1> ;Takes the qword in eax and prints its decimal representation
   603 00002F14 31C9                <1>     xor ecx, ecx
   604 00002F16 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   605 00002F18 85C0                <1>     test eax, eax
   606 00002F1A 750C                <1>     jnz .notZero
   607 00002F1C B930000000          <1>     mov ecx, "0"
   608 00002F21 BD01000000          <1>     mov ebp, 1  ;Print one digit
   609 00002F26 EB3E                <1>     jmp short .dpfb2
   610                              <1> .notZero:
   611 00002F28 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   612 00002F2A BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   613                              <1> .dpfb0:
   614 00002F2F FFC5                <1>     inc ebp
   615 00002F31 81FD08000000        <1>     cmp ebp, 8
   616 00002F37 7206                <1>     jb .dpfb00
   617 00002F39 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   618 00002F3D EB04                <1>     jmp short .dpfb01
   619                              <1> .dpfb00:
   620 00002F3F 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   621                              <1> .dpfb01:
   622 00002F43 31D2                <1>     xor edx, edx
   623 00002F45 48F7F6              <1>     div rsi
   624 00002F48 80C230              <1>     add dl, '0'
   625 00002F4B 80FA39              <1>     cmp dl, '9'
   626 00002F4E 7603                <1>     jbe .dpfb1
   627 00002F50 80C207              <1>     add dl, 'A'-'0'-10
   628                              <1> .dpfb1:
   629 00002F53 81FD08000000        <1>     cmp ebp, 8
   630 00002F59 7204                <1>     jb .dpfb10
   631 00002F5B 88D3                <1>     mov bl, dl ;Add the bottom bits
   632 00002F5D EB02                <1>     jmp short .dpfb11
   633                              <1> .dpfb10:
   634 00002F5F 88D1                <1>     mov cl, dl    ;Save remainder byte
   635                              <1> .dpfb11:
   636 00002F61 4885C0              <1>     test rax, rax
   637 00002F64 75C9                <1>     jnz .dpfb0
   638                              <1> .dpfb2:
   639 00002F66 81FD08000000        <1>     cmp ebp, 8
   640 00002F6C 7208                <1>     jb .dpfb20
   641 00002F6E 88DA                <1>     mov dl, bl
   642 00002F70 48C1EB08            <1>     shr rbx, 8
   643 00002F74 EB06                <1>     jmp short .dpfb21
   644                              <1> .dpfb20:
   645 00002F76 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   646 00002F78 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   647                              <1> .dpfb21:
   648 00002F7C B402                <1>     mov ah, 02h
   649 00002F7E CD21                <1>     int 21h
   650 00002F80 FFCD                <1>     dec ebp
   651 00002F82 75E2                <1>     jnz .dpfb2
   652                              <1>     return
    13                              <2> %%_ret:
    14 00002F84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> getDecimalWord:
   655                              <1> ;Works on MAX A dword in eax
   656                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   657 00002F85 31C9                <1>     xor ecx, ecx
   658 00002F87 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   659 00002F89 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   660                              <1> .dpfb0:
   661 00002F8E FFC5                <1>     inc ebp
   662 00002F90 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663 00002F94 31D2                <1>     xor edx, edx
   664 00002F96 48F7F3              <1>     div rbx
   665 00002F99 80C230              <1>     add dl, '0'
   666 00002F9C 80FA39              <1>     cmp dl, '9'
   667 00002F9F 7603                <1>     jbe .dpfb1
   668 00002FA1 80C207              <1>     add dl, 'A'-'0'-10
   669                              <1> .dpfb1:
   670 00002FA4 88D1                <1>     mov cl, dl    ;Save remainder byte
   671 00002FA6 4885C0              <1>     test rax, rax
   672 00002FA9 75E3                <1>     jnz .dpfb0
   673                              <1>     return
    13                              <2> %%_ret:
    14 00002FAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> freezePC:
   676 00002FAC 488D151DDEFFFF      <1>     lea rdx, memBad1
   677 00002FB3 B409                <1>     mov ah, 09h
   678 00002FB5 CD21                <1>     int 21h
   679                              <1> .altEP:
   680 00002FB7 488D153BDEFFFF      <1>     lea rdx, memBad3
   681 00002FBE B409                <1>     mov ah, 09h
   682 00002FC0 CD21                <1>     int 21h
   683                              <1> .lp:
   684 00002FC2 F390                <1>     pause
   685 00002FC4 F4                  <1>     hlt
   686 00002FC5 EBFB                <1>     jmp short .lp
   687                              <1> 
   688                              <1> getFilenamePtrFromFilespec:
   689                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   690                              <1> ;Input: rsi = Pathspec to search
   691                              <1> ;Output: rsi = Points to the first char of the filename
   692 00002FC7 4889F3              <1>     mov rbx, rsi
   693 00002FCA 31C0                <1>     xor eax, eax
   694 00002FCC 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   695 00002FCF E8ADFDFFFF          <1>     call strlen     ;Get it's length
   696 00002FD4 FFC9                <1>     dec ecx ;Dont include terminating null
   697 00002FD6 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   698 00002FD8 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   699                              <1> .lp:
   700 00002FDB 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   701                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FDE 74(AB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   702 00002FE0 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   703 00002FE2 3C3A                <1>     cmp al, ":" ;X: ?
   704 00002FE4 740D                <1>     je .pointFilename
   705 00002FE6 3A053FD0FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   706 00002FEC 7405                <1>     je .pointFilename
   707 00002FEE 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   708 00002FF1 EBE8                <1>     jmp short .lp
   709                              <1> .pointFilename:
   710 00002FF3 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   711                              <1>     return
    13                              <2> %%_ret:
    14 00002FF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   712                              <1> .exitBad:
   713 00002FF7 F9                  <1>     stc
   714                              <1> .exit:
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002FF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> 
   718                              <1> copyArgumentToSearchSpec:
   719                              <1> ;Works similarly to the build searchpath but is simpler
   720                              <1> ;Null terminates
   721 00002FF9 488D3D5ED4FFFF      <1>     lea rdi, searchSpec
   722                              <1> .copyPath:
   723 00003000 AC                  <1>     lodsb
   724 00003001 E8D5FDFFFF          <1>     call isALEndOfCommand
   725 00003006 740A                <1>     jz .finishCopy
   726 00003008 E8B8FDFFFF          <1>     call isALterminator
   727 0000300D 7403                <1>     jz .finishCopy
   728 0000300F AA                  <1>     stosb
   729 00003010 EBEE                <1>     jmp short .copyPath
   730                              <1> .finishCopy:
   731 00003012 31C0                <1>     xor eax, eax
   732 00003014 AA                  <1>     stosb
   733                              <1>     return
    13                              <2> %%_ret:
    14 00003015 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   734                              <1> 
   735                              <1> setDTA:
   736 00003016 50                  <1>     push rax
   737 00003017 52                  <1>     push rdx
   738 00003018 488D15B3D0FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   739 0000301F B8001A0000          <1>     mov eax, 1A00h
   740 00003024 CD21                <1>     int 21h
   741 00003026 5A                  <1>     pop rdx
   742 00003027 58                  <1>     pop rax
   743                              <1>     return
    13                              <2> %%_ret:
    14 00003028 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003029 53                  <1>     push rbx
    25 0000302A 51                  <1>     push rcx
    26 0000302B 52                  <1>     push rdx
    27 0000302C 57                  <1>     push rdi
    28 0000302D 56                  <1>     push rsi
    29 0000302E FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 0000302F 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003032 488D154CD8FFFF      <1>     lea rdx, crlf
    33 00003039 B409                <1>     mov ah, 09h ;Print String
    34 0000303B CD21                <1>     int 21h
    35                              <1> 
    36 0000303D 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00003043 B90C000000          <1>     mov ecx, 0Ch
    38 00003048 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 0000304A 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 0000304D 480FB7FF            <1>     movzx rdi, di
    41 00003051 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00003054 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00003058 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 0000305B 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 0000305E 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00003065 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00003069 B409                <1>     mov ah, 09h ;Print String
    48 0000306B CD21                <1>     int 21h     ;Call DOS to print first part of message
    49                              <1> 
    50 0000306D 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00003074 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 0000307B F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 0000307E 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00003082 B409                <1>     mov ah, 09h ;Print String
    55 00003084 CD21                <1>     int 21h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00003086 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00003089 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 0000308F 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00003096 B409                <1>     mov ah, 09h
    62 00003098 CD21                <1>     int 21h
    63 0000309A 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 0000309C 80C241              <1>     add dl, "A" ;Add ASCII code
    65 0000309F B402                <1>     mov ah, 02h ;Print char in dl
    66 000030A1 CD21                <1>     int 21h
    67                              <1> .userInput:
    68 000030A3 488D15DBD7FFFF      <1>     lea rdx, crlf  ;Print new line
    69 000030AA B409                <1>     mov ah, 09h
    70 000030AC CD21                <1>     int 21h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 000030AE 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 000030B5 B409                <1>     mov ah, 09h
    77 000030B7 CD21                <1>     int 21h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 000030B9 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 000030BC 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 000030BE 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 000030C5 B409                <1>     mov ah, 09h
    83 000030C7 CD21                <1>     int 21h
    84 000030C9 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 000030D0 B409                <1>     mov ah, 09h
    86 000030D2 CD21                <1>     int 21h
    87                              <1> .userIgnore:
    88 000030D4 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 000030D7 7416                <1>     jz .userFail
    90 000030D9 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 000030E0 B409                <1>     mov ah, 09h
    92 000030E2 CD21                <1>     int 21h
    93 000030E4 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 000030EB B409                <1>     mov ah, 09h
    95 000030ED CD21                <1>     int 21h
    96                              <1> .userFail:
    97 000030EF F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 000030F2 7416                <1>     jz .userMsgEnd
    99 000030F4 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 000030FB B409                <1>     mov ah, 09h
   101 000030FD CD21                <1>     int 21h
   102 000030FF 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00003106 B409                <1>     mov ah, 09h
   104 00003108 CD21                <1>     int 21h
   105                              <1> .userMsgEnd:
   106 0000310A 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00003111 B409                <1>     mov ah, 09h
   108 00003113 CD21                <1>     int 21h
   109                              <1> ;Get user input now 
   110 00003115 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00003117 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 0000311E B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00003120 CD21                <1>     int 21h ;Get char in al
   114 00003122 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00003124 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00003126 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00003128 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00003129 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 0000312B FFC1                <1>     inc ecx
   121 0000312D 81F904000000        <1>     cmp ecx, 4
   122 00003133 75F3                <1>     jne .uip1
   123 00003135 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 0000313A 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 0000313C 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 0000313E 7427                <1>     je .cehExit
   129 00003140 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00003142 740F                <1>     je .viIgnore
   131 00003144 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00003146 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00003148 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 0000314B 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00003151 EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00003153 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00003156 0F8447FFFFFF        <1>     jz .userInput
   140 0000315C EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 0000315E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00003161 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00003167 5E                  <1>     pop rsi
   146 00003168 5F                  <1>     pop rdi
   147 00003169 5A                  <1>     pop rdx
   148 0000316A 59                  <1>     pop rcx
   149 0000316B 5B                  <1>     pop rbx
   150 0000316C 48CF                <1>     iretq
   151                              <1> .charError:
   152 0000316E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00003173 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 0000317A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 0000317B 88C2                <1>     mov dl, al  ;Move char into dl
   157 0000317D B402                <1>     mov ah, 02h
   158 0000317F CD21                <1>     int 21h ;Print char
   159 00003181 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00003183 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00003188 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00003191 746563742024202020  <1>
   164 0000319A 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 000031A3 6E6974202420202020  <1>
   165 000031AC 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 000031B5 202420202020202020  <1>
   166 000031BE 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 000031C7 6F6D6D616E64202420  <1>
   167 000031D0 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 000031D9 202020202020202020  <1>
   168 000031E2 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 000031EB 737420242020202020  <1>
   169 000031F4 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 000031FD 202020202020202020  <1>
   170 00003206 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 0000320F 656469612024202020  <1>
   171 00003218 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00003221 7420466F756E642024  <1>
   172 0000322A 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00003233 706572202420202020  <1>
   173 0000323C 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00003245 6C7420242020202020  <1>
   174 0000324E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00003257 742024202020202020  <1>
   175 00003260 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00003269 61696C757265202420  <1>
   176                              <1> 
   177 00003272 64726976652024      <1> .drive      db "drive $"
   178 00003279 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00003282 64696E672024        <1>
   179 00003288 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00003291 74696E672024        <1>
   180 00003297 41626F727424        <1> .abortmsg   db "Abort$" 
   181 0000329D 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 000032A4 526574727924        <1> .retrymsg   db "Retry$"
   183 000032AA 4661696C24          <1> .failmsg    db "Fail$"
   184 000032AF 2C2024              <1> .betweenMsg db ", $"
   185 000032B2 3F2024              <1> .endMsg     db "? $"
   186 000032B5 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int23h:
   189 000032B9 F6056DCDFFFFFF      <1>     test byte [permaSwitch], -1
   190 000032C0 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 000032C2 50                  <1>     push rax
   193 000032C3 53                  <1>     push rbx
   194 000032C4 488B054CCDFFFF      <1>     mov rax, qword [realParent]
   195 000032CB 488B1D3DCDFFFF      <1>     mov rbx, qword [pspPtr]
   196 000032D2 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 000032D6 5B                  <1>     pop rbx
   198 000032D7 58                  <1>     pop rax
   199                              <1> .exit:
   200 000032D8 F9                  <1>     stc     ;Set CF to kill the task
   201 000032D9 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 000032DC 504154483D00        <1>     db "PATH=",0
     5 000032E2 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000032EA 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 000032F3 442E434F4D00        <1>
     8 000032F9 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 00003302 202020202020202020- <1>
     8 0000330B 202020202020202020- <1>
     8 00003314 202020202020202020- <1>
     8 0000331D 202020202020202020- <1>
     8 00003326 202020202020202020- <1>
     8 0000332F 202020202020202020- <1>
     8 00003338 202020202020202020- <1>
     8 00003341 202020202020202020- <1>
     8 0000334A 202020202020202020- <1>
     8 00003353 202020202020202020- <1>
     8 0000335C 202020202020202020- <1>
     8 00003365 202020202020202020- <1>
     8 0000336E 202020202020202020- <1>
     8 00003377 202020202020202020- <1>
     8 00003380 20                  <1>
     9 00003381 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(29300000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(B9320000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(970E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(DC320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(EA320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(37170000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(85080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(651F0000)        <1>     call time
    81 000000FB E8(9C1E0000)        <1>     call date
    82 00000100 488D15(85080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(83330000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(DC320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(F9260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(840E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

