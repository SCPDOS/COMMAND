     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32                              <1> .qBatOff:
    33 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    34 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    35 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    36                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    37                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    38                              <1> endstruc
    39                              <1> bbNoParam   equ -1
    40                              <1> bbNull      equ 0
    41                              <1> bbEchoOn    equ 1
    42                              <1> bbEchoOff   equ 0
    43                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    44                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    45                              <1> 
    46                              <1> 
    47                              <1> 
    48                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    49 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    50 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    51 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    52 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    53 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc execProg  ;For use with EXEC-ing a child task
    57 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    58 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    59 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    60 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    61                              <1> endstruc
    62                              <1> 
    63                              <1> ;Directory attribute equates
    64                              <1>     dirReadOnly     equ 01h
    65                              <1>     dirHidden       equ 02h
    66                              <1>     dirSystem       equ 04h
    67                              <1>     dirVolumeID     equ 08h
    68                              <1>     dirDirectory    equ 10h
    69                              <1>     dirArchive      equ 20h
    70                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    71                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    72                              <1>     ;If any of the three bits are set, then ALL three bits are set
    73                              <1>     ; in addition to whatever the user passed to search for.
    74                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    75                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E98E4C0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26 00000095 FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    27 00000096 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000097 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000099 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 0000009A FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009C FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009E 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009F 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 000000A0 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A2 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A4 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A5 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A6 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A7 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A8 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A9 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000AA 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AB 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B3 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BC 000000000000000000- <1>
    57 000000C5 000000000000000000- <1>
    57 000000CE 000000000000000000- <1>
    57 000000D7 000000000000000000- <1>
    57 000000E0 000000000000000000- <1>
    57 000000E9 000000000000000000- <1>
    57 000000F2 000000000000000000- <1>
    57 000000FB 00000000000000      <1>
    58 00000102 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000106 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010F 00000000000000      <1>
    64 00000116 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 00000000000000      <1>
    65                              <1> 
    66 00000141 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 0000014A 000000000000000000- <1>
    66 00000153 000000000000000000- <1>
    66 0000015C 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inLen   equ 128 
    75                              <1> batCpyBuffer:   ;Ptr to the buffer to drop the processed line into
    76 00000161 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)   ;Original input from user! 128 chars max!
    76 0000016A 000000000000000000- <1>
    76 00000173 000000000000000000- <1>
    76 0000017C 000000000000000000- <1>
    76 00000185 000000000000000000- <1>
    76 0000018E 000000000000000000- <1>
    76 00000197 000000000000000000- <1>
    76 000001A0 000000000000000000- <1>
    76 000001A9 000000000000000000- <1>
    76 000001B2 000000000000000000- <1>
    76 000001BB 000000000000000000- <1>
    76 000001C4 000000000000000000- <1>
    76 000001CD 000000000000000000- <1>
    76 000001D6 000000000000000000- <1>
    76 000001DF 00000000            <1>
    77                              <1> batInBuffer:    ;Ptr to the buffer for batch input
    78 000001E3 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    78 000001EC 000000000000000000- <1>
    78 000001F5 000000000000000000- <1>
    78 000001FE 000000000000000000- <1>
    78 00000207 000000000000000000- <1>
    78 00000210 000000000000000000- <1>
    78 00000219 000000000000000000- <1>
    78 00000222 000000000000000000- <1>
    78 0000022B 000000000000000000- <1>
    78 00000234 000000000000000000- <1>
    78 0000023D 000000000000000000- <1>
    78 00000246 000000000000000000- <1>
    78 0000024F 000000000000000000- <1>
    78 00000258 000000000000000000- <1>
    78 00000261 00000000            <1>
    79 00000265 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    79 0000026E 000000000000000000- <1>
    79 00000277 000000000000000000- <1>
    79 00000280 000000000000000000- <1>
    79 00000289 000000000000000000- <1>
    79 00000292 000000000000000000- <1>
    79 0000029B 000000000000000000- <1>
    79 000002A4 000000000000000000- <1>
    79 000002AD 000000000000000000- <1>
    79 000002B6 000000000000000000- <1>
    79 000002BF 000000000000000000- <1>
    79 000002C8 000000000000000000- <1>
    79 000002D1 000000000000000000- <1>
    79 000002DA 000000000000000000- <1>
    79 000002E3 00000000            <1>
    80 000002E7 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    80 000002F0 000000000000000000- <1>
    80 000002F9 000000000000000000- <1>
    80 00000302 000000000000000000- <1>
    80 0000030B 000000000000000000- <1>
    80 00000314 000000000000000000- <1>
    80 0000031D 000000000000000000- <1>
    80 00000326 000000000000000000- <1>
    80 0000032F 00000000000000      <1>
    81 00000336 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    81 0000033F 0000000000          <1>
    82                              <1> 
    83 00000344 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    83 0000034D 000000000000000000- <1>
    83 00000356 000000000000000000- <1>
    83 0000035F 000000000000000000- <1>
    83 00000368 000000000000000000- <1>
    83 00000371 000000000000000000- <1>
    83 0000037A 000000000000000000- <1>
    83 00000383 000000000000000000- <1>
    83 0000038C 00000000000000      <1>
    84 00000393 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    84 0000039C 000000000000000000- <1>
    84 000003A5 000000000000000000- <1>
    84 000003AE 000000000000000000- <1>
    84 000003B7 000000000000000000- <1>
    84 000003C0 000000000000000000- <1>
    84 000003C9 000000000000000000- <1>
    84 000003D2 000000000000000000- <1>
    84 000003DB 00000000000000      <1>
    85                              <1> 
    86                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    87 000003E2 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    87 000003EB 000000000000000000- <1>
    87 000003F4 000000000000000000- <1>
    87 000003FD 000000000000000000- <1>
    87 00000406 000000000000000000- <1>
    87 0000040F 000000000000000000- <1>
    87 00000418 000000000000000000- <1>
    87 00000421 000000000000000000- <1>
    87 0000042A 00000000000000      <1>
    88 00000431 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    88 0000043A 000000000000000000- <1>
    88 00000443 000000000000000000- <1>
    88 0000044C 000000000000000000- <1>
    88 00000455 000000000000000000- <1>
    88 0000045E 000000000000000000- <1>
    88 00000467 000000000000000000- <1>
    88 00000470 000000000000000000- <1>
    88 00000479 00000000000000      <1>
    89                              <1> 
    90 00000480 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    91 00000488 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    92                              <1> 
    93                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    94                              <1> ; a really long invalid DOS path for PATH to work properly.
    95 00000490 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    95 00000499 000000000000000000- <1>
    95 000004A2 000000000000000000- <1>
    95 000004AB 000000000000000000- <1>
    95 000004B4 000000000000000000- <1>
    95 000004BD 000000000000000000- <1>
    95 000004C6 000000000000000000- <1>
    95 000004CF 000000000000000000- <1>
    95 000004D8 000000000000000000- <1>
    95 000004E1 000000000000000000- <1>
    95 000004EA 000000000000000000- <1>
    95 000004F3 000000000000000000- <1>
    95 000004FC 000000000000000000- <1>
    95 00000505 000000000000000000- <1>
    95 0000050E 000000000000000000- <1>
    95 00000517 000000000000000000- <1>
    95 00000520 000000000000000000- <1>
    95 00000529 000000000000000000- <1>
    95 00000532 000000000000000000- <1>
    95 0000053B 000000000000000000- <1>
    95 00000544 000000000000000000- <1>
    95 0000054D 000000000000000000- <1>
    95 00000556 000000000000000000- <1>
    95 0000055F 000000000000000000- <1>
    95 00000568 000000000000000000- <1>
    95 00000571 000000000000000000- <1>
    95 0000057A 000000000000000000- <1>
    95 00000583 000000000000000000- <1>
    95 0000058C 0000000000000000    <1>
    96                              <1> 
    97                              <1> ;Internal Function vars
    98                              <1> ;Dir Vars
    99 00000594 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
   100                              <1> ;                                   Bit[1] set => /P or /p specified
   101                              <1> ;                                   Bit[2] set => A file/path specified
   102 00000595 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   103 00000596 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   104 0000059A 00                  <1> dirDrv      db 0    ;0 based drive number to use
   105 0000059B 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   105 000005A4 000000000000000000- <1>
   105 000005AD 000000000000000000- <1>
   105 000005B6 000000000000000000- <1>
   105 000005BF 000000000000000000- <1>
   105 000005C8 000000000000000000- <1>
   105 000005D1 000000000000000000- <1>
   105 000005DA 000000000000000000- <1>
   105 000005E3 000000000000000000- <1>
   105 000005EC 000000000000000000- <1>
   105 000005F5 000000000000000000- <1>
   105 000005FE 000000000000000000- <1>
   105 00000607 000000000000000000- <1>
   105 00000610 000000000000000000- <1>
   105 00000619 00000000            <1>
   106 0000061D 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   106 00000626 3F3F3F3F3F3F3F      <1>
   107                              <1> dirWideType equ 1
   108                              <1> dirPageType equ 2
   109                              <1> dirFileType equ 4
   110                              <1> ;Volume Vars
   111                              <1> volFcb:
   112                              <1>     istruc exFcb
   113 0000062D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   114 0000062E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   115 00000634 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   116 00000635 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   117 0000063D 3F3F3F              <1>     at exFcb.fileext,   db "???"
   118 00000640 00000000            <1>     at exFcb.curBlock,  dd 0
   119 00000644 00<rep 15h>         <1>     iend 
   120                              <1> 
   121                              <1> ;Time/Date vars
   122 00000659 00                  <1> td1 db 0    ;Minutes/Year
   123 0000065A 00                  <1> td2 db 0    ;Hours/Zero
   124 0000065B 00                  <1> td3 db 0    ;Hundredths/Day
   125 0000065C 00                  <1> td4 db 0    ;Seconds/Month
   126                              <1> 
   127                              <1> ;Rename/Copy/Delete Buffers
   128                              <1> delPath:
   129                              <1> comspecDir:    ;Used to store the directory passed during startup
   130 0000065D 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   130 00000666 000000000000000000- <1>
   130 0000066F 000000000000000000- <1>
   130 00000678 000000000000000000- <1>
   130 00000681 000000000000000000- <1>
   130 0000068A 000000000000000000- <1>
   130 00000693 000000000000000000- <1>
   130 0000069C 000000000000000000- <1>
   130 000006A5 000000000000000000- <1>
   130 000006AE 000000000000000000- <1>
   130 000006B7 000000000000000000- <1>
   130 000006C0 000000000000000000- <1>
   130 000006C9 000000000000000000- <1>
   130 000006D2 000000000000000000- <1>
   130 000006DB 00000000            <1>
   131 000006DF 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   131 000006E8 000000000000000000- <1>
   131 000006F1 000000000000000000- <1>
   131 000006FA 000000000000000000- <1>
   131 00000703 000000000000000000- <1>
   131 0000070C 000000000000000000- <1>
   131 00000715 000000000000000000- <1>
   131 0000071E 000000000000000000- <1>
   131 00000727 000000000000000000- <1>
   131 00000730 000000000000000000- <1>
   131 00000739 000000000000000000- <1>
   131 00000742 000000000000000000- <1>
   131 0000074B 000000000000000000- <1>
   131 00000754 000000000000000000- <1>
   131 0000075D 00000000            <1>
   132 00000761 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   133 00000769 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   134 00000771 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   134 0000077A 2020                <1>
   135                              <1> ;Copy vars
   136 0000077C 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   137 0000077D FFFF                <1> sourceHdl   dw -1
   138 0000077F FFFF                <1> destHdl     dw -1
   139 00000781 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   140 00000783 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   141 0000078B 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   142 0000078D 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   143 00000791 00                  <1> bCpFlg      db 0    ;Copy state flag
   144                              <1> 
   145                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   146                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   147                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   148                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   149                              <1> oneDest     equ 10h ;Single destination, not dir 
   150                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   151                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   152                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   153                              <1> 
   154                              <1> ;Environment manipulation vars
   155 00000792 0000                <1> envVarSz        dw 0    ;Env var size
   156 00000794 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000796 03444952            <1>     db 3, "DIR"
     8 0000079A D01F                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079C 024344              <1>     db 2, "CD"
    11 0000079F 7D24                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A1 054348444952        <1>     db 5, "CHDIR"
    14 000007A7 7D24                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A9 024D44              <1>     db 2, "MD"
    17 000007AC F824                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AE 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B4 F824                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B6 025244              <1>     db 2, "RD"
    23 000007B9 4125                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BB 05524D444952        <1>     db 5, "RMDIR"
    26 000007C1 4125                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C3 0344454C            <1>     db 3, "DEL"
    29 000007C7 002D                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C9 054552415345        <1>     db 5, "ERASE"
    32 000007CF 002D                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D1 0444415445          <1>     db 4, "DATE"
    35 000007D6 432E                <1>     dw date - startLbl
    36                              <1> 
    37 000007D8 0454494D45          <1>     db 4, "TIME"
    38 000007DD F12F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DF 04434F5059          <1>     db 4, "COPY"
    41 000007E4 8B25                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E6 0443545459          <1>     db 4, "CTTY"
    44 000007EB 1A31                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007ED 03434C53            <1>     db 3, "CLS"
    47 000007F1 C131                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F3 05425245414B        <1>     db 5, "BREAK"
    50 000007F9 3A32                <1>     dw break - startLbl
    51                              <1> 
    52 000007FB 06564552494659      <1>     db 6, "VERIFY"
    53 00000802 BB32                <1>     dw verify - startLbl
    54                              <1> 
    55 00000804 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080B 3833                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080D 0352454E            <1>     db 3, "REN"
    59 00000811 3833                <1>     dw rename - startLbl
    60                              <1>     
    61 00000813 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081C 7435                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081E 03564552            <1>     db 3, "VER"
    65 00000822 8436                <1>     dw version - startLbl
    66                              <1> 
    67 00000824 03564F4C            <1>     db 3, "VOL"
    68 00000828 C535                <1>     dw volume - startLbl
    69                              <1> 
    70 0000082A 034D454D            <1>     db 3, "MEM"
    71 0000082E C836                <1>     dw memory - startLbl
    72                              <1> 
    73 00000830 0445584954          <1>     db 4, "EXIT"
    74 00000835 CA38                <1>     dw exit - startLbl
    75                              <1> 
    76 00000837 0454595045          <1>     db 4, "TYPE"
    77 0000083C 1738                <1>     dw type - startLbl
    78                              <1> 
    79 0000083E 0450415448          <1>     db 4, "PATH"
    80 00000843 173C                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000845 03534554            <1>     db 3, "SET"
    83 00000849 F83A                <1>     dw set - startLbl
    84                              <1> 
    85 0000084B 0650524F4D5054      <1>     db 6, "PROMPT"
    86 00000852 F63C                <1>     dw prompt - startLbl
    87                              <1> 
    88                              <1> ;BATCH ORIENTED COMMANDS HERE
    89 00000854 044543484F          <1>     db 4, "ECHO"
    90 00000859 663D                <1>     dw echo - startLbl
    91                              <1> 
    92 0000085B 055041555345        <1>     db 5, "PAUSE"
    93 00000861 423E                <1>     dw pauza - startLbl
    94                              <1> 
    95 00000863 0352454D            <1>     db 3, "REM"
    96 00000867 8C3E                <1>     dw remark - startLbl
    97                              <1> 
    98 00000869 04474F544F          <1>     db 4, "GOTO"
    99 0000086E A43E                <1>     dw goto - startLbl
   100                              <1> ;-----------------------------
   101                              <1> ; Commands left to implement 
   102                              <1> ;-----------------------------
   103 00000870 055348494654        <1>     db 5, "SHIFT"
   104 00000876 A13E                <1>     dw shift - startLbl
   105                              <1> 
   106 00000878 03464F52            <1>     db 3, "FOR"
   107 0000087C A23E                <1>     dw forCmd - startLbl
   108                              <1> 
   109 0000087E 024946              <1>     db 2, "IF"
   110 00000881 A33E                <1>     dw ifCmd - startLbl
   111                              <1> ;-----------------------------
   112 00000883 FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000884 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000887 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000088C 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000895 696C65206D69737369- <1>
     4 0000089E 6E670D0A24          <1>
     5 000008A3 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008AC 6469736B2077697468- <1>
     5 000008B5 206261746368206669- <1>
     5 000008BE 6C65                <1>
     6 000008C0 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008C9 737320616E79206B65- <1>
     6 000008D2 79207768656E207265- <1>
     6 000008DB 6164790D0A24        <1>
     7 000008E1 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000008EA 746520626174636820- <1>
     7 000008F3 6A6F622028592F4E29- <1>
     7 000008FC 3F2024              <1>
     8 000008FF 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000908 6E64206F722066696C- <1>
     8 00000911 65206E616D650D0A24  <1>
     9 0000091A 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000923 2066696C65206E616D- <1>
     9 0000092C 65206F7220          <1>
    10 00000931 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 0000093A 666F756E640D0A24    <1>
    11 00000942 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 0000094B 656E74206469736B20- <1>
    11 00000954 73706163650D0A24    <1>
    12 0000095C 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000965 7669726F6E6D656E74- <1>
    12 0000096E 2073706163650D0A24  <1>
    13 00000977 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 00000980 74696F6E206572726F- <1>
    13 00000989 720D0A24            <1>
    14 0000098D 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000996 6F7420626520636F70- <1>
    14 0000099F 696564206F6E746F20- <1>
    14 000009A8 697473656C660D0A24  <1>
    15 000009B1 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009BA 662064657374696E61- <1>
    15 000009C3 74696F6E206C6F7374- <1>
    15 000009CC 206265666F72652063- <1>
    15 000009D5 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009DB 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000009E4 636F706965640D0A24  <1>
    18 000009ED 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000009F6 68206D656D6F727920- <1>
    18 000009FF 666F7220434F50590D- <1>
    18 00000A08 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A0A 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A13 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A14 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A1D 65650D0A24          <1>
    23 00000A22 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A2B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A34 726976652073706563- <1>
    25 00000A3D 696669636174696F6E- <1>
    25 00000A46 0D0A24              <1>
    26 00000A49 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A52 6B6579207768656E20- <1>
    26 00000A5B 7265616479202E202E- <1>
    26 00000A64 202E2024            <1>
    27 00000A68 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A71 6172616D657465720D- <1>
    27 00000A7A 0A24                <1>
    28                              <1> 
    29 00000A7C 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000A85 576564546875467269- <1>
    29 00000A8E 536174              <1>
    30 00000A91 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000A9A 206461746524        <1>
    31 00000AA0 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AA9 6174652069732024    <1>
    32 00000AB1 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000ABA 657720646174652024  <1>
    33 00000AC3 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000ACC 293A2024            <1>
    34 00000AD0 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AD9 293A2024            <1>
    35 00000ADD 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000AE6 293A2024            <1>
    36 00000AEA 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000AF3 2074696D6524        <1>
    37 00000AF9 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000B02 696D652069732024    <1>
    38 00000B0A 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B13 65772074696D653A20- <1>
    38 00000B1C 24                  <1>
    39                              <1> 
    40 00000B1D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B26 7572652028592F4E29- <1>
    40 00000B2F 3F2024              <1>
    41                              <1> 
    42 00000B32 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B3B 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B44 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B4D 6E2064726976652024  <1>
    45 00000B56 2069732024          <1> volOk   db " is $"
    46 00000B5B 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B64 6162656C24          <1>
    47                              <1> 
    48 00000B69 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B72 69726563746F72790D- <1>
    48 00000B7B 0A24                <1>
    49 00000B7D 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000B86 206372656174652064- <1>
    49 00000B8F 69726563746F72790D- <1>
    49 00000B98 0A24                <1>
    50 00000B9A 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BA3 6174682C206E6F7420- <1>
    50 00000BAC 6469726563746F7279- <1>
    50 00000BB5 2C0D0A              <1>
    51 00000BB8 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BC1 6F7279206E6F742065- <1>
    51 00000BCA 6D7074790D0A24      <1>
    52 00000BD1 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BDA 79206F66202024      <1>
    53 00000BE1 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000BEA 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000BF3 6E6965640D0A24      <1>
    55 00000BFA 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C03 72697665206973206E- <1>
    55 00000C0C 6F206C6F6E67657220- <1>
    55 00000C15 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C1B 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C24 65766963650D0A24    <1>
    58 00000C2C 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C35 20666F756E640D0A24  <1>
    59 00000C3E 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C47 726F720D0A24        <1>
    60 00000C4D 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C56 6F74206265206E6573- <1>
    60 00000C5F 7465640D0A24        <1>
    61 00000C65 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C6E 6174652066696C6520- <1>
    61 00000C77 6572726F7220647572- <1>
    61 00000C80 696E6720706970650D- <1>
    61 00000C89 0A24                <1>
    62 00000C8B 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000C94 2062696E6172792072- <1>
    62 00000C9D 656164732066726F6D- <1>
    62 00000CA6 206120646576696365- <1>
    62 00000CAF 0D0A24              <1>
    63 00000CB2 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CB8 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CBD 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CC6 24                  <1>
    66 00000CC7 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CD0 2024                <1>
    67 00000CD2 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CDB 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000CE4 617468206F72206669- <1>
    68 00000CED 6C65206E616D650D0A- <1>
    68 00000CF6 24                  <1>
    69 00000CF7 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000D00 756D626572206F6620- <1>
    69 00000D09 706172616D65746572- <1>
    69 00000D12 730D0A24            <1>
    70 00000D16 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D1F 74696E6720746F2064- <1>
    70 00000D28 6576696365          <1>
    71 00000D2D 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D31 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D3A 6F6F2062696720746F- <1>
    72 00000D43 2066697420696E206D- <1>
    72 00000D4C 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D54 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D5D 20202020202020546F- <1>
    75 00000D66 74616C207379737465- <1>
    75 00000D6F 6D206D656D6F72793A- <1>
    75 00000D78 2024                <1>
    76 00000D7A 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D83 20202020202020204D- <1>
    76 00000D8C 656D6F727920757365- <1>
    76 00000D95 6420627920444F533A- <1>
    76 00000D9E 2024                <1>
    77 00000DA0 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DA9 656D6F727920757365- <1>
    77 00000DB2 64206279206170706C- <1>
    77 00000DBB 69636174696F6E733A- <1>
    77 00000DC4 2024                <1>
    78 00000DC6 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DCF 656D6F727920726573- <1>
    78 00000DD8 657276656420627920- <1>
    78 00000DE1 68617264776172653A- <1>
    78 00000DEA 2024                <1>
    79 00000DEC 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000DF5 202020202020202020- <1>
    79 00000DFE 2020202020204D656D- <1>
    79 00000E07 6F727920667265653A- <1>
    79 00000E10 2024                <1>
    80 00000E12 20627974657324      <1> memByte db " bytes$"
    81 00000E19 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E22 6F7420417373657274- <1>
    81 00000E2B 61696E20444F532045- <1>
    81 00000E34 6E74727920506F696E- <1>
    81 00000E3D 7424                <1>
    82 00000E3F 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E48 416C6C6F636174696F- <1>
    82 00000E51 6E204572726F7224    <1>
    83 00000E59 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E62 4572726F7224        <1>
    84 00000E68 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E71 68616C74656424      <1>
    85                              <1> 
    86 00000E78 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E81 206372656174652070- <1>
    86 00000E8A 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000E8F 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000E98 6F6E206572726F720D- <1>
    88 00000EA1 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000EA2 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000EA6 2020202024          <1> fourSpc  db "    $"
    93 00000EAB 20202024            <1> threeSpc db "   $"
    94 00000EAF 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000EB2 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EBB 696679204F4E206F72- <1>
    96 00000EC4 204F46460D0A24      <1>
    97                              <1> 
    98 00000ECB 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000ED3 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000EDC 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000EE5 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000EEE 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000EF5 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000EFB 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000F04 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000F0D 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000F10 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F12 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F14 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F16 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F18 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F1A 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F1C 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F1E 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F20 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F22 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F24 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F26 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F28 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F2A D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F2C E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F2E F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F30 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F32 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F34 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F3D 63746563742024      <1>
   131 00000F44 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F4D 6E69742024          <1>
   132 00000F52 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F5B 2024                <1>
   133 00000F5D 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F66 6F6D6D616E642024    <1>
   134 00000F6E 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F74 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F7D 73742024            <1>
   136 00000F81 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000F87 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000F90 656469612024        <1>
   138 00000F96 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000F9F 7420466F756E642024  <1>
   139 00000FA8 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000FB1 7065722024          <1>
   140 00000FB6 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FBF 6C742024            <1>
   141 00000FC3 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FCC 742024              <1>
   142 00000FCF 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FD8 61696C7572652024    <1>
   143 00000FE0 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00000FE9 696F6C6174696F6E20- <1>
   143 00000FF2 24                  <1>
   144 00000FF3 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00000FFC 6174696F6E2024      <1>
   145 00001003 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 0000100C 73657274206469736B- <1>
   145 00001015 20                  <1>
   146 00001016 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000101F 2020                <1>
   147 00001021 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001024 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 0000102D 696C61626C652024    <1>
   150 00001035 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000103E 756666657220657272- <1>
   150 00001047 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 0000104B 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001054 6574776F726B204572- <1>
   153 0000105D 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 00001062 64726976652024      <1> drvMsg      db "drive $"
   157 00001069 6572726F7220726561- <1> readMsg     db "error reading $"
   157 00001072 64696E672024        <1>
   158 00001078 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 00001081 74696E672024        <1>
   159 00001087 41626F727424        <1> abortMsg    db "Abort$" 
   160 0000108D 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 00001094 526574727924        <1> retryMsg    db "Retry$"
   162 0000109A 4661696C24          <1> failMsg     db "Fail$"
   163 0000109F 2C2024              <1> betweenMsg  db ", $"
   164 000010A2 3F2024              <1> endMsg      db "? $"
   165 000010A5 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010A9 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010AC 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010B0 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010B3 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010B5 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010B8 CD21                <1>     int 21h
    12 000010BA 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010BC 7432                <1>     jz commandMain
    14 000010BE E8EA090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010C3 F605CAEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010CA 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010D0 C6058BF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010D7 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010DE 488D3D7EF0FFFF      <1>     lea rdi, inBuffer + 2
    22 000010E5 E865330000          <1>     call strcpy
    23 000010EA C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 000010EE EB5B                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 000010F0 488B250EEFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 000010F7 E8B1090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 000010FC F60591EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 00001103 0F85C1270000        <1>     jnz exit
    31 00001109 E823310000          <1>     call printCRLFecho  ;Command complete, indicate with new line!
    32 0000110E B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 00001113 CD21                <1>     int 21h
    34 00001115 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 0000111A BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000111F CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 00001121 E899330000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001126 F60567EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    41 0000112D 0F85E00B0000        <1>     jnz batNextLine
    42 00001133 E860300000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    43 00001138 488D1522F0FFFF      <1>     lea rdx, inBuffer
    44 0000113F B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001144 CD21                <1>     int 21h
    46                              <1> .batProceedCrlf:
    47 00001146 E8F0300000          <1>     call printCRLF      ;Note we have accepted input
    48                              <1> .batProceed:            ;Jump here to copy the batch input line 
    49                              <1> ;First check we had something typed in of length greater than 0
    50 0000114B 803D10F0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    51 00001152 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    52                              <1>     ;Copy over the input text
    53                              <1> .goSingle:
    54 00001154 488D3506F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    55 0000115B 488D3D81F0FFFF      <1>     lea rdi, cpyBuffer
    56 00001162 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    57 00001167 F3A4                <1>     rep movsb
    58 00001169 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    59                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    60 0000116E 488D35F2F0FFFF      <1>     lea rsi, cmdBuffer + 2
    61 00001175 E813330000          <1>     call skipDelimiters
    62 0000117A 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    63 0000117D 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    64 0000117F 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    65 00001182 0F84DA030000        <1>     je hardSynErr
    66                              <1> .pipeLoop:
    67 00001188 4C8B0580EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    68 0000118F E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    69                              <1>     ;ZF here indicates if we are at the end of the command or nots
    70 00001194 E861070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    71 00001199 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    72 0000119E E84B020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    73                              <1> .okRet:                     ;Normal return point for processing
    74 000011A3 E857050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    75 000011A8 F605EAEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    76 000011AF 0F8447FFFFFF        <1>     jz .inputMain
    77                              <1>     ;Now we pull the commandline forwards. 
    78 000011B5 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    79 000011BA 488D3DA6F0FFFF      <1>     lea rdi, cmdBuffer + 2
    80 000011C1 4889F1              <1>     mov rcx, rsi
    81 000011C4 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    82 000011C7 280D99F0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    83 000011CD 8A0D93F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    84 000011D3 FFC1                <1>     inc ecx     ;One more for the terminating char
    85 000011D5 F3A4                <1>     rep movsb   ;Move the chars over    
    86 000011D7 E8D2320000          <1>     call clearCommandState  ;Else, clear the command state and start again
    87 000011DC EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    88                              <1> 
    89                              <1> makeCmdBuffer:
    90                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    91                              <1> ; copy buffer. Called only once in a cycle.
    92                              <1> ;Throughout: CL has char count, CH has quote count
    93 000011DE 488D3500F0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    94 000011E5 31C9                <1>     xor ecx, ecx
    95 000011E7 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    96                              <1> .countQuotes:
    97 000011EA AC                  <1>     lodsb
    98 000011EB 3C22                <1>     cmp al, '"'
    99 000011ED 7507                <1>     jne .notQuoteToCount
   100 000011EF FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   101 000011F1 E9F4FFFFFF          <1>     jmp .countQuotes
   102                              <1> .notQuoteToCount:
   103 000011F6 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   104 000011F8 75F0                <1>     jne .countQuotes
   105 000011FA 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   106 000011FD 488D3D63F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   107                              <1> .getChar:
   108 00001204 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   109 00001205 3C22                <1>     cmp al, '"'     ;Is char a quote?
   110 00001207 750E                <1>     jne .notQuote
   111 00001209 FECD                <1>     dec ch          ;We have a quote, now decrement
   112 0000120B 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   113                              <1> .searchForClosingQuote:
   114                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   115 0000120D AA                  <1>     stosb   ;Store char and inc rdi
   116 0000120E FEC1                <1>     inc cl
   117 00001210 AC                  <1>     lodsb   ;Get next char
   118 00001211 3C22                <1>     cmp al, '"'
   119 00001213 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   120 00001215 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   121                              <1> .notQuote:
   122 00001217 E87D060000          <1>     call peelRedir      ;Intervene redir if needed
   123 0000121C 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   124 0000121E 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   125 00001220 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   126                              <1> .pipeHandle:
   127                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   128 00001222 0F843A030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   129                              <1> .notRedir:
   130 00001228 AA                  <1>     stosb       ;Store char and advance rdi
   131 00001229 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   132 0000122B 7404                <1>     je .exit
   133 0000122D FEC1                <1>     inc cl      ;Increment char count
   134 0000122F EBD3                <1>     jmp short .getChar    ;If not, get next char
   135                              <1> .exit:
   136 00001231 880D2FF0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   137                              <1>     return
    13                              <2> %%_ret:
    14 00001237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> 
   139                              <1> makeCmdString:
   140                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   141                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   142                              <1> ; Copies into the psp.
   143                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   144 00001238 488D3528F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   145 0000123F 31C9                <1>     xor ecx, ecx
   146 00001241 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   147                              <1> .countQuotes:
   148 00001244 AC                  <1>     lodsb
   149 00001245 3C22                <1>     cmp al, '"'
   150 00001247 7507                <1>     jne .notQuoteToCount
   151 00001249 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   152 0000124B E9F4FFFFFF          <1>     jmp .countQuotes
   153                              <1> .notQuoteToCount:
   154 00001250 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   155 00001252 75F0                <1>     jne .countQuotes
   156 00001254 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   157 00001257 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   158                              <1> .getChar:
   159 0000125E AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   160 0000125F 3C22                <1>     cmp al, '"'     ;Is char a quote?
   161 00001261 750E                <1>     jne .notQuote
   162 00001263 FECD                <1>     dec ch          ;We have a quote, now decrement
   163 00001265 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   164                              <1> .searchForClosingQuote:
   165                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   166 00001267 AA                  <1>     stosb   ;Store char and inc rdi
   167 00001268 FEC1                <1>     inc cl
   168 0000126A AC                  <1>     lodsb   ;Get next char
   169 0000126B 3C22                <1>     cmp al, '"'
   170 0000126D 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   171 0000126F FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   172                              <1> .notQuote:
   173 00001271 3C7C                <1>     cmp al, "|"
   174 00001273 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   175 00001275 B00D                <1>     mov al, CR          ;Store the pipe char
   176 00001277 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   177                              <1> .notPipe:
   178 0000127A AA                  <1>     stosb       ;Store char and advance rdi
   179 0000127B 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   180 0000127D 7404                <1>     je .exit
   181 0000127F FEC1                <1>     inc cl      ;Increment char count
   182 00001281 EBDB                <1>     jmp short .getChar    ;If not, get next char
   183                              <1> .exit:
   184 00001283 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   185 00001286 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   186 0000128D 803E0D              <1>     cmp byte [rsi], CR  
   187                              <1>     return
    13                              <2> %%_ret:
    14 00001290 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> 
   189                              <1> analyseCmdline:
   190                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   191                              <1> ; processes the command name into the FCB.  
   192 00001291 C6059EF0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   193                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   194 00001298 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   195 0000129F 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   196 000012A2 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   197 000012A6 8A057EEDFFFF        <1>     mov al, byte [switchChar]
   198 000012AC F2AE                <1>     repne scasb                     ;Scan for the switch char
   199 000012AE 7506                <1>     jne .noSwitchFnd
   200 000012B0 F615F4EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   201                              <1> .noSwitchFnd:
   202 000012B6 E8D2310000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   203 000012BB 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   204                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012BE 74(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   205 000012C0 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   206                              <1> .plp:
   207 000012C3 488D3D3CEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   208 000012CA B801290000          <1>     mov eax, 2901h
   209 000012CF CD21                <1>     int 21h
   210 000012D1 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   211 000012D3 0F8408010000        <1>     je .exitBadDrv
   212                              <1> .trailingDotLp:
   213                              <1> ;Reverse along trailing dots!
   214 000012D9 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   215 000012DD 7505                <1>     jne .noTrailingDots
   216 000012DF 48FFCE              <1>     dec rsi
   217 000012E2 EBF5                <1>     jmp short .trailingDotLp
   218                              <1> .noTrailingDots:
   219 000012E4 8A053FEDFFFF        <1>     mov al, byte [pathSep]  
   220 000012EA 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   221 000012EC 7525                <1>     jne .notPs
   222 000012EE 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   223 000012F1 AC                  <1>     lodsb   ;Get this char
   224 000012F2 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   225 000012F5 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   226 000012F7 7217                <1>     jb .delimfnd    ;Also a delimiter
   227 000012F9 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   228 000012FB 7413                <1>     je .delimfnd
   229 000012FD 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   230 000012FF 740F                <1>     je .delimfnd
   231 00001301 3C2E                <1>     cmp al, byte "."
   232 00001303 740B                <1>     je .delimfnd
   233 00001305 3C22                <1>     cmp al, byte '"'
   234 00001307 7407                <1>     je .delimfnd
   235 00001309 E88D310000          <1>     call isALdelimiter  ;Is this a delim char?
   236 0000130E 75B3                <1>     jne .plp            ;If not, we loop again
   237                              <1> .delimfnd:
   238 00001310 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   239                              <1> .notPs:
   240                              <1> ;Now we have reached the end of the command, rsi points to the first char
   241                              <1> ; after the command, whether a delimiter or not.
   242 00001313 4889F1              <1>     mov rcx, rsi
   243 00001316 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   244 00001319 0F84BA000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   245 0000131F 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   246 00001322 488D3DBEEFFFFF      <1>     lea rdi, cmdPathSpec
   247 00001329 F3A4                <1>     rep movsb
   248 0000132B 30C0                <1>     xor al, al
   249 0000132D AA                  <1>     stosb   ;Store a terminating null
   250 0000132E 4887DE              <1>     xchg rbx, rsi
   251                              <1> ;Now we build FCBs for the arguments!
   252 00001331 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   253 00001338 E893000000          <1>     call .skipAndCheckCR
   254 0000133D 745B                <1>     je .setupCmdVars
   255 0000133F C6055EEDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   256 00001346 4889F0              <1>     mov rax, rsi
   257 00001349 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 0000134C 880553EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   259 00001352 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   260 00001356 B801290000          <1>     mov eax, 2901h
   261 0000135B CD21                <1>     int 21h
   262 0000135D 880543EDFFFF        <1>     mov byte [arg1FCBret], al
   263                              <1> .skipArg:
   264 00001363 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   265 00001364 3C0D                <1>     cmp al, CR
   266 00001366 7432                <1>     je .setupCmdVars
   267 00001368 E82E310000          <1>     call isALdelimiter
   268 0000136D 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   269 0000136F E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   270 00001374 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   271 00001376 C6052AEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   272 0000137D 4889F0              <1>     mov rax, rsi            
   273 00001380 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   274 00001383 88051FEDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   275 00001389 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   276 0000138D B801290000          <1>     mov eax, 2901h
   277 00001392 CD21                <1>     int 21h
   278 00001394 88050FEDFFFF        <1>     mov byte [arg2FCBret], al
   279                              <1> .setupCmdVars:
   280                              <1> ;Before returning, we copy the command name to cmdName 
   281 0000139A 488D3D46EFFFFF      <1>     lea rdi, cmdPathSpec
   282 000013A1 E89E310000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   283 000013A6 E8BD300000          <1>     call strlen ;Get the length of the null terminated final path componant
   284 000013AB 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   285 000013B1 7726                <1>     ja .exitBad     ;Return error
   286 000013B3 4889FE              <1>     mov rsi, rdi
   287 000013B6 488D3D79EFFFFF      <1>     lea rdi, cmdName
   288 000013BD FFC9                <1>     dec ecx ;Minus the terminating null
   289 000013BF 880F                <1>     mov byte [rdi], cl ;Store the length here
   290 000013C1 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   291                              <1> .cpCmdName:
   292 000013C4 AC                  <1>     lodsb
   293 000013C5 E8A8300000          <1>     call ucChar ;Uppercase the char
   294 000013CA AA                  <1>     stosb
   295 000013CB FFC9                <1>     dec ecx
   296 000013CD 75F5                <1>     jnz .cpCmdName
   297                              <1>     return
    13                              <2> %%_ret:
    14 000013CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> .skipAndCheckCR:
   299                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   300 000013D0 E8B8300000          <1>     call skipDelimiters ;Go to the next char in the input line
   301 000013D5 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   302                              <1>     return
    13                              <2> %%_ret:
    14 000013D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   303                              <1> .exitBad:
   304 000013D9 C60556EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   305                              <1>     return
    13                              <2> %%_ret:
    14 000013E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   306                              <1> .exitBadDrv:
   307 000013E1 C6054EEFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   308 000013E8 E8A10B0000          <1>     call badDriveError
   309                              <1>     return
    13                              <2> %%_ret:
    14 000013ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   310                              <1> 
   311                              <1> doCommandLine:
   312                              <1>     ;The following check accounts for the end of a piped command
   313 000013EE 803D41EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   314 000013F5 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   315 000013FB 803D34EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   316 00001402 0F84BF0B0000        <1>     je badCmdError
   317 00001408 803D27EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   318                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000140F 74(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319 00001411 488D35CFEEFFFF      <1>     lea rsi, cmdPathSpec
   320 00001418 0FB71DC8EEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   321 0000141F 80FF3A              <1>     cmp bh, ":"
   322 00001422 7520                <1>     jne .noDriveSpecified
   323 00001424 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   324 00001426 E847300000          <1>     call ucChar     ;Uppercase al
   325 0000142B 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   326                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   327 0000142D 803D02EFFFFF02      <1>     cmp byte [cmdName], 2
   328 00001434 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   329 00001436 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   330 00001438 E801300000          <1>     call setDrive
   331                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000143D 74(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   332 0000143F E94A0B0000          <1>     jmp badDriveError
   333                              <1> .noDriveSpecified:
   334                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   335 00001444 488D1D1AEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   336 0000144B 488D35E4EEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   337 00001452 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   338 00001457 BAFFFF0000          <1>     mov edx, 0FFFFh
   339 0000145C B5FF                <1>     mov ch, -1
   340 0000145E CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   341 00001460 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   342 00001465 BAFFFF0000          <1>     mov edx, 0FFFFh
   343 0000146A 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   344 0000146C CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   345                              <1>             ;        al = 0  if the command should be executed as usual
   346 0000146E 84C0                <1>     test al, al
   347 00001470 7444                <1>     jz .executeInternal
   348                              <1>     ;Here we execute externally and return to the prompt
   349                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   350 00001472 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   351 00001479 488D35B6EEFFFF      <1>     lea rsi, cmdName        
   352 00001480 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   353 00001485 BAFFFF0000          <1>     mov edx, 0FFFFh
   354 0000148A B5FF                <1>     mov ch, -1
   355 0000148C CD2F                <1>     int 2Fh
   356 0000148E 803DA1EEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   357                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001495 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001497 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   358                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   359                              <1>     ; is an external command that is in the CD or in the PATH.
   360                              <1>     ;Should not be used for this purpose but it is here...
   361 00001498 E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   362 0000149D 488D3592EEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   363 000014A4 AC                  <1>     lodsb                   ;Get the name length
   364 000014A5 0FB6C8              <1>     movzx ecx, al
   365 000014A8 488D3D38EEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   366 000014AF F3A4                <1>     rep movsb   
   367 000014B1 31C0                <1>     xor eax, eax
   368 000014B3 AA                  <1>     stosb   ;Store null terminator
   369 000014B4 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   370                              <1> .executeInternal:
   371 000014B6 E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   372 000014BB 488D3D25EEFFFF      <1>     lea rdi, cmdPathSpec
   373 000014C2 E8A12F0000          <1>     call strlen ;Get the length of the input command
   374 000014C7 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   375 000014C9 380D67EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   376 000014CF 0F8514240000        <1>     jne launchChild     ;If not, a path was specified, exit!
   377                              <1> .executeInternal2:
   378                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   379 000014D5 488D1DBAF2FFFF      <1>     lea rbx, functionTable
   380                              <1> .nextEntry:
   381 000014DC 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   382 000014DF 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   383 000014E2 0F8401240000        <1>     je launchChild      ;If so, check externally now
   384 000014E8 380D48EEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   385 000014EE 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   386                              <1>     ;Here they have the same length so lets see if the name is the same
   387 000014F0 56                  <1>     push rsi
   388                              <1>     ;ecx has the length to compare
   389 000014F1 51                  <1>     push rcx
   390 000014F2 488D7301            <1>     lea rsi, qword [rbx + 1]
   391 000014F6 488D3D3AEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   392 000014FD F3A6                <1>     rep cmpsb   ;Check the strings are equal
   393 000014FF 59                  <1>     pop rcx
   394 00001500 5E                  <1>     pop rsi
   395 00001501 751E                <1>     jne .gotoNextEntry
   396                              <1>     ;Here it was found both strings are equal
   397 00001503 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   398 00001508 480FB71F            <1>     movzx rbx, word [rdi]
   399 0000150C 488D3DEDEAFFFF      <1>     lea rdi, startLbl
   400 00001513 4801FB              <1>     add rbx, rdi
   401 00001516 C605F0EAFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   402 0000151D FFD3                <1>     call rbx        ;Call the internal function!
   403 0000151F EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   404                              <1> .gotoNextEntry:
   405 00001521 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   406 00001528 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   407 0000152B EBAF                <1>     jmp short .nextEntry
   408                              <1> 
   409                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   410                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   411                              <1> ;Can depend on RSP here because I fixed DOS.
   412 0000152D 488B25D1EAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   413 00001534 E874320000          <1>     call resetIDTentries
   414 00001539 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   415 0000153E CD21                <1>     int 21h
   416 00001540 668905C6EAFFFF      <1>     mov word [returnCode], ax
   417 00001547 84E4                <1>     test ah, ah     ;Regular exit
   418 00001549 0F8454FCFFFF        <1>     jz commandMain.okRet
   419 0000154F 80FC03              <1>     cmp ah, 3       ;TSR exit
   420 00001552 0F844BFCFFFF        <1>     je commandMain.okRet
   421                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   422                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   423                              <1>     ; as we always close the COMMAND.COM instance at this point.
   424 00001558 E83F000000          <1>     call cleanupRedirs
   425 0000155D E98EFBFFFF          <1>     jmp commandMain
   426                              <1> 
   427                              <1> hardSynErr:
   428                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   429 00001562 E8030A0000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   430 00001567 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   431                              <1> redirFailure:
   432 0000156C 488D151CF9FFFF      <1>     lea rdx, redirErrMsg
   433 00001573 B913000000          <1>     mov ecx, redirErrMsgL
   434 00001578 EB0C                <1>     jmp short redirPipeFailureCommon
   435                              <1> pipeFailure:
   436 0000157A 488D15F7F8FFFF      <1>     lea rdx, pipeErrMsg
   437 00001581 B917000000          <1>     mov ecx, pipeErrMsgL
   438                              <1> redirPipeFailureCommon:
   439                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   440                              <1> ;This routine tries to close whatever handles are not -1 and delete
   441                              <1> ; pipe files if the pipe count is not 0.
   442                              <1> ;It resets all variables and jumps to reset the stack!
   443 00001586 B800400000          <1>     mov eax, 4000h  ;Write handle
   444 0000158B BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   445 00001590 CD21                <1>     int 21h
   446                              <1> .noPrint:
   447 00001592 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   448 00001597 E954FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   449                              <1> 
   450                              <1> cleanupRedirs:
   451                              <1> ;Cleans all active redirections, returning to the saved state.
   452                              <1> ;Deletes any pipe files, leaves any redir out files.
   453                              <1> ;Resets the internal vars
   454 0000159C 0FB705FDEAFFFF      <1>     movzx eax, word [redirSTDIN]
   455 000015A3 0FB715F0EAFFFF      <1>     movzx edx, word [pipeSTDIN]
   456 000015AA 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   457 000015AC E8CC000000          <1>     call .closeAndReplace
   458 000015B1 0FB705EAEAFFFF      <1>     movzx eax, word [redirSTDOUT]
   459 000015B8 0FB715DDEAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   460 000015BF FFC3                <1>     inc ebx         ;Select STDOUT for closing
   461 000015C1 E8B7000000          <1>     call .closeAndReplace
   462 000015C6 66C705CFEAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   463 000015CF 0FB71DCAEAFFFF      <1>     movzx ebx, word [redirSTDIN]
   464 000015D6 E892000000          <1>     call .closeHandle
   465                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   466 000015DB 66C705BCEAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   467 000015E4 0FB71DB7EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   468 000015EB E87D000000          <1>     call .closeHandle
   469 000015F0 66C705A9EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   470 000015F9 0FB71D9AEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   471 00001600 E868000000          <1>     call .closeHandle
   472 00001605 66C7058CEAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   473 0000160E 0FB71D87EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   474 00001615 E853000000          <1>     call .closeHandle
   475 0000161A 66C70579EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   476 00001623 C6056FEAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   477 0000162A 488D15B1EDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   478 00001631 803A00              <1>     cmp byte [rdx], 0
   479 00001634 7407                <1>     jz .checkOld
   480 00001636 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   481 0000163B CD21                <1>     int 21h
   482                              <1> .checkOld:
   483 0000163D 488D15EDEDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   484 00001644 803A00              <1>     cmp byte [rdx],0
   485 00001647 7407                <1>     jz .pipeNamesComplete
   486 00001649 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   487 0000164E CD21                <1>     int 21h
   488                              <1> .pipeNamesComplete:
   489 00001650 31C0                <1>     xor eax, eax
   490                              <1>     ;Invalidate the pointers and the paths too
   491 00001652 48890527EEFFFF      <1>     mov qword [newPipe], rax
   492 00001659 48890528EEFFFF      <1>     mov qword [oldPipe], rax
   493 00001660 89057CEDFFFF        <1>     mov dword [pipe1Filespec], eax
   494 00001666 8905C5EDFFFF        <1>     mov dword [pipe2Filespec], eax
   495                              <1>     return
    13                              <2> %%_ret:
    14 0000166C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> .closeHandle:
   498 0000166D 81FBFFFFFFFF        <1>     cmp ebx, -1
   499                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001673 74(6C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   500 00001675 B8003E0000          <1>     mov eax, 3E00h
   501 0000167A CD21                <1>     int 21h
   502                              <1>     return
    13                              <2> %%_ret:
    14 0000167C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .closeAndReplace:
   504                              <1> ;Input: ax = one possible handle, dx = second possible handle
   505                              <1> ;       bx = handle to close and copy ax/dx into
   506                              <1> ;Output: Handle intervened on. bx preserved
   507 0000167D C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   508 00001680 09D0                <1>     or eax, edx     ;Form packed
   509 00001682 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   510                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001687 74(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   511 00001689 E8DFFFFFFF          <1>     call .closeHandle
   512 0000168E 663DFFFF            <1>     cmp ax, -1      
   513 00001692 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   514 00001696 53                  <1>     push rbx
   515 00001697 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   516 0000169A B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   517 0000169F CD21                <1>     int 21h
   518 000016A1 5B                  <1>     pop rbx
   519                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016A2 73(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520                              <1>     ;Else we now try to force default device to open!
   521 000016A4 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   522 000016A9 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   523 000016AE 488D1527F8FFFF      <1>     lea rdx, devName
   524 000016B5 CD21                <1>     int 21h
   525                              <1>     return
    13                              <2> %%_ret:
    14 000016B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> cleanRedirOut:
   528                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   529                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   530                              <1> ; particular cases like launching bat files which needs special handling in 
   531                              <1> ; that all redirs need to be completely removed.
   532 000016B8 66813DE1E9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   533                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016C1 74(B7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   534 000016C3 0FB71DD8E9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   535 000016CA B901000000          <1>     mov ecx, 1      ;STDOUT
   536 000016CF B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   537 000016D4 CD21                <1>     int 21h
   538 000016D6 0FB71DC5E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   539 000016DD B8003E0000          <1>     mov eax, 3E00h  
   540 000016E2 CD21                <1>     int 21h
   541 000016E4 66C705B5E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   542 000016ED 488D159FECFFFF      <1>     lea rdx, rdrOutFilespec
   543 000016F4 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   544 000016F9 CD21                <1>     int 21h
   545 000016FB C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   546                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   547                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   548                              <1>     return
    13                              <2> %%_ret:
    14 000016FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> advanceRedir:
   551                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   552                              <1> ;Close stdin redir then stdout redir. 
   553 000016FF F60598E9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   554 00001706 0F8585000000        <1>     jnz .redirIn
   555 0000170C F60586E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   556 00001713 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   557 00001719 0FBF057AE9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   558 00001720 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   559 00001725 0F84EB000000        <1>     je .pipeOut              
   560                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   561 0000172B 0FB71D68E9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   562 00001732 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   563 00001734 B800460000          <1>     mov eax, 4600h
   564 00001739 CD21                <1>     int 21h
   565 0000173B 0F8239FEFFFF        <1>     jc pipeFailure
   566 00001741 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   567 00001746 CD21                <1>     int 21h
   568 00001748 0F822CFEFFFF        <1>     jc pipeFailure
   569 0000174E 488B1533EDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   570 00001755 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   571 0000175A CD21                <1>     int 21h
   572 0000175C 0F8218FEFFFF        <1>     jc pipeFailure
   573 00001762 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   574 00001765 66C7052CE9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   575                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   576                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   577                              <1>     ;Else exit!
   578 0000176E 0FBF0527E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   579 00001775 3DFFFFFFFF          <1>     cmp eax, -1
   580 0000177A 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   581 00001780 C60512E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   582 00001787 F60511E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   583 0000178E 753D                <1>     jnz .redirOut               ;Go for it if so!
   584                              <1>     return
    13                              <2> %%_ret:
    14 00001790 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> .redirIn:
   586                              <1> ;Here we clean redirIn
   587 00001791 0FB71D08E9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   588 00001798 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   589 0000179A B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   590 0000179F CD21                <1>     int 21h
   591 000017A1 0F82C5FDFFFF        <1>     jc redirFailure
   592 000017A7 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   593 000017AC CD21                <1>     int 21h
   594 000017AE 0F82B8FDFFFF        <1>     jc redirFailure
   595 000017B4 66C705E3E8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   596 000017BD C605DAE8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   597 000017C4 F605CEE8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   598 000017CB 7549                <1>     jnz .pipeOut
   599                              <1> .redirOut:
   600 000017CD F605CBE8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   601                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017D4 74(90)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   602                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   603 000017D6 F605BCE8FFFFFF      <1>     test byte [pipeFlag], -1
   604 000017DD 7537                <1>     jnz short .pipeOut
   605 000017DF 0FB71DBCE8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   606 000017E6 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   607 000017EB B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   608 000017F0 CD21                <1>     int 21h
   609 000017F2 0F8274FDFFFF        <1>     jc redirFailure
   610 000017F8 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   611 000017FD CD21                <1>     int 21h
   612 000017FF 0F8267FDFFFF        <1>     jc redirFailure
   613 00001805 66C70594E8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   614 0000180E C6058AE8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   615                              <1>     return
    13                              <2> %%_ret:
    14 00001815 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> .pipeOut:
   617                              <1> ;Duplicate STDIN to save across pipe
   618 00001816 0FBF057FE8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   619 0000181D 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   620                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001822 74(15)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   621 00001824 B800450000          <1>     mov eax, 4500h
   622 00001829 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   623 0000182B CD21                <1>     int 21h
   624 0000182D 0F8247FDFFFF        <1>     jc pipeFailure
   625 00001833 66890560E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   626                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   627 0000183A B800460000          <1>     mov eax, 4600h
   628 0000183F 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   629 00001841 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   630 00001843 CD21                <1>     int 21h
   631 00001845 0F822FFDFFFF        <1>     jc pipeFailure
   632                              <1> ;Now return the original stdout to stdout
   633 0000184B 89D9                <1>     mov ecx, ebx
   634 0000184D 0FB71D48E8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   635 00001854 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   636 00001859 CD21                <1>     int 21h
   637 0000185B 0F8219FDFFFF        <1>     jc pipeFailure
   638                              <1> ;Now close the DUP'ed STDOUT
   639 00001861 B8003E0000          <1>     mov eax, 3E00h
   640 00001866 CD21                <1>     int 21h
   641 00001868 0F820CFDFFFF        <1>     jc pipeFailure
   642                              <1> ;Finally unwind STDIN to the beginning of the file
   643 0000186E B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   644 00001873 31DB                <1>     xor ebx, ebx    ;STDIN handle
   645 00001875 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   646 00001877 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   647 00001879 CD21                <1>     int 21h
   648 0000187B 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   649 00001881 488B15F8EBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   650 00001888 488915F9EBFFFF      <1>     mov qword [oldPipe], rdx
   651 0000188F 66C70504E8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   652                              <1>     return
    13                              <2> %%_ret:
    14 00001898 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> 
   655                              <1> peelRedir:
   656                              <1> ;Checks and sets up redir as appropriate
   657                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   658                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   659                              <1> ;Output: ZF=NZ => No redir
   660                              <1> ;        ZF=ZY => Redir
   661                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   662                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   663 00001899 51                  <1>     push rcx
   664 0000189A 57                  <1>     push rdi
   665 0000189B 3C3C                <1>     cmp al, "<"
   666 0000189D 740C                <1>     je .inputRedir
   667 0000189F 3C3E                <1>     cmp al, ">"
   668 000018A1 7427                <1>     je .outputRedir
   669 000018A3 3C7C                <1>     cmp al, "|"
   670 000018A5 7441                <1>     je .pipeSetup
   671 000018A7 F8                  <1>     clc
   672                              <1> .redirExit:
   673 000018A8 5F                  <1>     pop rdi
   674 000018A9 59                  <1>     pop rcx
   675                              <1>     return
    13                              <2> %%_ret:
    14 000018AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   676                              <1> .inputRedir:
   677 000018AB C605ECE7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   678 000018B2 488D3D8BEAFFFF      <1>     lea rdi, rdrInFilespec
   679                              <1> .redirCommon:
   680 000018B9 E8CF2B0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   681 000018BE E8FB2C0000          <1>     call cpDelimPathToBufz
   682 000018C3 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   683 000018C6 30C0                <1>     xor al, al  ;Clear the ZF flag
   684 000018C8 EBDE                <1>     jmp short .redirExit
   685                              <1> .outputRedir:
   686 000018CA C605CEE7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   687 000018D1 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   688 000018D4 7509                <1>     jne .notDouble
   689 000018D6 FE05C3E7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   690 000018DC 48FFC6              <1>     inc rsi ;Go past it too
   691                              <1> .notDouble:
   692 000018DF 488D3DADEAFFFF      <1>     lea rdi, rdrOutFilespec
   693 000018E6 EBD1                <1>     jmp short .redirCommon
   694                              <1> .pipeSetup:
   695 000018E8 56                  <1>     push rsi    ;Save rsi pointing to char past |
   696 000018E9 E89F2B0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   697 000018EE 803E7C              <1>     cmp byte [rsi], "|" 
   698 000018F1 7403                <1>     je .badFnd
   699 000018F3 803E0D              <1>     cmp byte [rsi], CR
   700                              <1> .badFnd:
   701 000018F6 5E                  <1>     pop rsi
   702 000018F7 F9                  <1>     stc
   703 000018F8 EBAE                <1>     jmp short .redirExit
   704                              <1> 
   705                              <1> setupRedirandPipes:
   706                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   707                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   708 000018FA 0F8484000000        <1>     jz .redirIn
   709 00001900 488D15DBEAFFFF      <1>     lea rdx, pipe1Filespec
   710 00001907 803A00              <1>     cmp byte [rdx], 0
   711 0000190A 7410                <1>     jz .pathFound
   712 0000190C 488D151EEBFFFF      <1>     lea rdx, pipe2Filespec
   713 00001913 803A00              <1>     cmp byte [rdx], 0
   714 00001916 0F855EFCFFFF        <1>     jnz pipeFailure
   715                              <1> .pathFound:
   716 0000191C 4889155DEBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   717 00001923 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   718 00001928 BB01000000          <1>     mov ebx, 1
   719 0000192D CD21                <1>     int 21h
   720 0000192F 0F8245FCFFFF        <1>     jc pipeFailure
   721 00001935 66890560E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   722 0000193C E8092B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   723 00001941 0441                <1>     add al, "A"
   724 00001943 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   725 00001948 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   726 0000194A 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   727 0000194C 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   728 0000194E B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   729 00001953 CD21                <1>     int 21h
   730 00001955 0F821FFCFFFF        <1>     jc pipeFailure
   731                              <1>     ;AX has the handle for this file now, this will become STDOUT
   732                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   733 0000195B 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   734 0000195E B901000000          <1>     mov ecx, 1
   735 00001963 B800460000          <1>     mov eax, 4600h
   736 00001968 CD21                <1>     int 21h
   737 0000196A 0F820AFCFFFF        <1>     jc pipeFailure
   738 00001970 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   739 00001975 CD21                <1>     int 21h
   740 00001977 0F82FDFBFFFF        <1>     jc pipeFailure
   741 0000197D C60515E7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   742                              <1> .redirIn:
   743                              <1> ;Now check if any other redir needs to be setup
   744                              <1> ;Checks and sets up redir as appropriate.
   745                              <1>     ;Setup the redir here for STDIN
   746 00001984 F60513E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   747 0000198B 7449                <1>     jz .redirOut
   748 0000198D 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   749 0000198F B800450000          <1>     mov eax, 4500h
   750 00001994 CD21                <1>     int 21h
   751 00001996 0F82D0FBFFFF        <1>     jc redirFailure
   752 0000199C 668905FDE6FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   753 000019A3 488D159AE9FFFF      <1>     lea rdx, rdrInFilespec
   754 000019AA B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   755 000019AF CD21                <1>     int 21h
   756 000019B1 0F82B5FBFFFF        <1>     jc redirFailure
   757 000019B7 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   758 000019B9 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   759 000019BC B800460000          <1>     mov eax, 4600h
   760 000019C1 CD21                <1>     int 21h
   761 000019C3 0F82A3FBFFFF        <1>     jc redirFailure
   762 000019C9 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   763 000019CE CD21                <1>     int 21h
   764 000019D0 0F8296FBFFFF        <1>     jc redirFailure
   765                              <1> .redirOut:
   766 000019D6 F605C2E6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   767                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019DD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   768 000019E0 803DB5E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   769                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019E7 75(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   770                              <1>     ;Else setup the redir here for STDOUT
   771 000019E9 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   772 000019EE B800450000          <1>     mov eax, 4500h
   773 000019F3 CD21                <1>     int 21h
   774 000019F5 0F8271FBFFFF        <1>     jc redirFailure
   775 000019FB 668905A0E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   776 00001A02 488D158AE9FFFF      <1>     lea rdx, rdrOutFilespec
   777 00001A09 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   778 00001A0E CD21                <1>     int 21h
   779 00001A10 730F                <1>     jnc .fileExists
   780 00001A12 B8003C0000          <1>     mov eax, 3C00h
   781 00001A17 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   782 00001A19 CD21                <1>     int 21h
   783 00001A1B 0F824BFBFFFF        <1>     jc redirFailure
   784                              <1> .fileExists:
   785 00001A21 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   786 00001A26 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   787 00001A29 B800460000          <1>     mov eax, 4600h  ;DUP2
   788 00001A2E CD21                <1>     int 21h
   789 00001A30 0F8236FBFFFF        <1>     jc redirFailure
   790 00001A36 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   791 00001A3B CD21                <1>     int 21h
   792 00001A3D 0F8229FBFFFF        <1>     jc redirFailure
   793 00001A43 803D55E6FFFF01      <1>     cmp byte [redirOut], 1
   794                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A4A 74(DF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   795                              <1>     ;Here we move the file pointer to the end of the file
   796 00001A4C 31D2                <1>     xor edx, edx    ;Low order 32 bits
   797 00001A4E 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   798 00001A50 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   799 00001A55 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   800 00001A5A CD21                <1>     int 21h
   801 00001A5C 0F820AFBFFFF        <1>     jc redirFailure
   802                              <1>     return
    13                              <2> %%_ret:
    14 00001A62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> 
   804                              <1> 
   805                              <1> pullCommandline:
   806                              <1> ;This command pulls the command tail down, removing the whole launch command
   807 00001A63 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   808                              <1> ;Skip leading separators
   809                              <1> .pctSkipLeading:
   810 00001A6A AC                  <1>     lodsb   ;Get first char
   811 00001A6B E82B2A0000          <1>     call isALdelimiter
   812 00001A70 74F8                <1>     je .pctSkipLeading
   813 00001A72 48FFCE              <1>     dec rsi
   814                              <1>     ;rsi points to the start of the command
   815 00001A75 488D3D6BE8FFFF      <1>     lea rdi, cmdPathSpec
   816 00001A7C E8E7290000          <1>     call strlen ;Get the length of the command
   817 00001A81 FFC9                <1>     dec ecx ;Minus the terminating null
   818 00001A83 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   819 00001A86 280D19E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   820 00001A8C 280D16E6FFFF        <1>     sub byte [arg2Off], cl
   821 00001A92 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   822 00001A94 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   823                              <1> .pctPullChars:
   824 00001A9B AC                  <1>     lodsb
   825 00001A9C AA                  <1>     stosb
   826 00001A9D 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   827 00001A9F 7404                <1>     je .pctExit
   828 00001AA1 FFC1                <1>     inc ecx     ;Increment count
   829 00001AA3 EBF6                <1>     jmp short .pctPullChars 
   830                              <1> .pctExit:
   831 00001AA5 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   832                              <1>     return
    13                              <2> %%_ret:
    14 00001AAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> getSetMainState:
   835                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   836 00001AAD FC                  <1>     cld ;Ensure stringops are done the right way
   837 00001AAE C605ACE6FFFF80      <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   838 00001AB5 C60527E7FFFF80      <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   839 00001ABC C605A2E7FFFF80      <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   840 00001AC3 4C8B0545E5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   841                              <1>     return
    13                              <2> %%_ret:
    14 00001ACA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   842                              <1> 
   843                              <1> 
   844                              <1> int2Eh: 
   845                              <1> ;Very sucky interface for passing command lines to be processed by the 
   846                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   847                              <1> ; more reliable with a critical section flag. Currently, if we are already
   848                              <1> ; processing an Int 2Eh request, this will not process the command.
   849                              <1> ;
   850                              <1> ;Need to add further safeguards for when pipes are also setup and
   851                              <1> ; batchmode is on!
   852                              <1> ;
   853                              <1> ;Input: rsi points to the count byte of a command line.
   854                              <1> ;       Max number of chars is 128 (127 + count byte)
   855                              <1> ;Output:
   856                              <1> ;       CF=NC: Command was processed. ax = Retcode
   857                              <1> ;       CF=CY: Command was not processed.
   858 00001ACB 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   859 00001AD0 F605BDE5FFFF04      <1>     test byte [statFlg1], inSingle
   860 00001AD7 0F8584000000        <1>     jnz int2EcheckReentry 
   861                              <1> .multiJoin:
   862 00001ADD 800DB0E5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   863 00001AE4 48892534E5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   864 00001AEB 488B2513E5FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   865 00001AF2 B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   866 00001AF7 CD21                <1>     int 21h
   867 00001AF9 48891D17E5FFFF      <1>     mov qword [int2Epsp], rbx
   868 00001B00 52                  <1>     push rdx    ;Save on the stack
   869 00001B01 488B1D07E5FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   870 00001B08 B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   871 00001B0D CD21                <1>     int 21h
   872 00001B0F 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   873 00001B12 4989D9              <1>     mov r9, rbx
   874 00001B15 488D3D46E6FFFF      <1>     lea rdi, inBuffer + 1
   875 00001B1C B910000000          <1>     mov ecx, 10h    ;80h/8
   876 00001B21 FC                  <1>     cld
   877 00001B22 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   878 00001B25 E883FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   879 00001B2A 803D31E6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   880 00001B31 0F851DF6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   881                              <1> int2ERet:
   882 00001B37 E883290000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   883 00001B3C 488B25DCE4FFFF      <1>     mov rsp, qword [int2Ersp]
   884 00001B43 488B1DCDE4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   885 00001B4A B800500000          <1>     mov eax, 5000h ;Set Current PSP
   886 00001B4F CD21                <1>     int 21h
   887 00001B51 0FB705B5E4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   888 00001B58 802535E5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   889 00001B5F 48CF                <1>     iretq
   890                              <1> 
   891                              <1> int2EcheckReentry:
   892                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   893                              <1> ; else, return with CF=CY.
   894 00001B61 B800520000          <1>     mov eax, 5200h  ;Get sysvars
   895 00001B66 CD21                <1>     int 21h
   896 00001B68 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   897 00001B6C 7512                <1>     jnz short .multifnd
   898 00001B6E B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   899 00001B73 CD2F                <1>     int 2Fh
   900 00001B75 84C0                <1>     test al, al ;This must still be zero, else something installed
   901 00001B77 7507                <1>     jnz .multifnd
   902 00001B79 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   903 00001B7E 48CF                <1>     iretq   
   904                              <1> .multifnd:
   905                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   906 00001B80 F390                <1>     pause
   907 00001B82 F6050BE5FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   908 00001B89 75F5                <1>     jnz .multifnd
   909 00001B8B E94DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B90 BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001B95 B800480000          <1>     mov eax, 4800h
     7 00001B9A CD21                <1>     int 21h
     8 00001B9C 730A                <1>     jnc .bbAlloced
     9 00001B9E E8BE030000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001BA3 E9EAF9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001BA8 488905FCE4FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001BAF 4889C3              <1>     mov rbx, rax
    14 00001BB2 4889DF              <1>     mov rdi, rbx
    15 00001BB5 31C0                <1>     xor eax, eax
    16 00001BB7 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BBC F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BBE 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BC1 8A05CFE4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BC7 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BCA B8FFFFFFFF          <1>     mov eax, -1
    22 00001BCF B905000000          <1>     mov ecx, 5
    23 00001BD4 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BD8 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BDA 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BE0 488D3500E7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BE7 E863280000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001BEC 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001BF4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001BFB 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001BFC F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001BFE 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001BFF B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001C04 E884280000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001C09 E8EC000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001C0E 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001C10 4889F0              <1>     mov rax, rsi
    43 00001C13 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001C17 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C1A 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C1F FFC1                <1>     inc ecx
    48 00001C21 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C27 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C29 AC                  <1>     lodsb   ;Getch
    52 00001C2A E86C280000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C2F 74D3                <1>     je .bbFndLp
    54 00001C31 E8C4000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C36 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C38 488D35A8E6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C3F 488D3D6DE4FFFF      <1>     lea rdi, batFile
    60 00001C46 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C49 80FC3A              <1>     cmp ah, ":"
    62 00001C4C 7472                <1>     je .bbdrvGiven
    63 00001C4E 3A05D5E3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C54 745D                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C56 E8EF270000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C5B 0441                <1>     add al, "A"
    68 00001C5D B43A                <1>     mov ah, ":"
    69 00001C5F 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C61 8A05C2E3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C67 AA                  <1>     stosb   ;Store the pathsep
    73 00001C68 8A0545E4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C6E E8FF270000          <1>     call ucChar             ;UC it
    75 00001C73 88053AE4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C79 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C7B 88C2                <1>     mov dl, al
    78 00001C7D 56                  <1>     push rsi        ;Save remaining char source
    79 00001C7E 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C81 B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C86 CD21                <1>     int 21h
    82 00001C88 5E                  <1>     pop rsi
    83 00001C89 7316                <1>     jnc .bbRelPathOk
    84 00001C8B 488D15FAEBFFFF      <1>     lea rdx, badBat
    85 00001C92 E8AB250000          <1>     call printString
    86 00001C97 E80E020000          <1>     call batCleanup     ;Now clean up the batch stuff we've setup
    87 00001C9C E94FF4FFFF          <1>     jmp commandMain     ;And start again :)   
    88                              <1> .bbRelPathOk:
    89                              <1> ;Now move rdi to the terminating null   
    90 00001CA1 31C0                <1>     xor eax, eax
    91 00001CA3 31C9                <1>     xor ecx, ecx
    92 00001CA5 F2AE                <1>     repne scasb ;Find the terminating null
    93 00001CA7 48FFCF              <1>     dec rdi ;Now point to the terminating null
    94 00001CAA 8A0579E3FFFF        <1>     mov al, byte [pathSep]
    95 00001CB0 AA                  <1>     stosb   ;Store this pathsep over the original null
    96                              <1>     ;Now we are ready to copy the command line passed to us by the user
    97                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    98 00001CB1 EB1B                <1>     jmp short .bbCpName
    99                              <1> .bbCDrvAbs:
   100                              <1> ;Current drive absolute. Get current drive into buffer
   101 00001CB3 E892270000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   102 00001CB8 0441                <1>     add al, "A"
   103 00001CBA B43A                <1>     mov ah, ":"
   104 00001CBC 66AB                <1>     stosw   ;Store these two chars
   105                              <1>     ;Now we are ready to copy the command line passed to us by the user
   106                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   107 00001CBE EB0E                <1>     jmp short .bbCpName
   108                              <1> .bbdrvGiven:
   109                              <1> ;Drive given X:
   110 00001CC0 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   111 00001CC2 AC                  <1>     lodsb
   112 00001CC3 48FFCE              <1>     dec rsi ;Get the char and point back to it
   113 00001CC6 3A055DE3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   114 00001CCC 7593                <1>     jne .bbRelPath
   115                              <1> .bbCpName:
   116 00001CCE E87C270000          <1>     call strcpy ;Copy the remaining portion
   117 00001CD3 488D35D9E3FFFF      <1>     lea rsi, batFile
   118 00001CDA 4889F7              <1>     mov rdi, rsi
   119 00001CDD B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   120 00001CE2 CD2F                <1>     int 2fh
   121                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   122                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   123                              <1> ; for SHARING trouble...
   124 00001CE4 E8CFF9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   125 00001CE9 E8AEF8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   126 00001CEE 800D9FE3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   127 00001CF5 E9F6F3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   128                              <1> 
   129                              <1> .bbCheckEndOfCmdLine:
   130                              <1> ;Input: rsi -> Char to check 
   131                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   132 00001CFA 803E00              <1>     cmp byte [rsi], 0
   133                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001CFD 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001CFF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   134 00001D00 803E0D              <1>     cmp byte [rsi], CR
   135                              <1>     return
    13                              <2> %%_ret:
    14 00001D03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> 
   137                              <1> batFinish:
   138                              <1> ;This is the procedure called after we've processed the last batch line
   139 00001D04 E88F240000          <1>     call printPrompt    ;Add this to emulate what DOS does
   140 00001D09 E89C010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   141 00001D0E E9DDF3FFFF          <1>     jmp commandMain     ;And start again :)
   142                              <1> batNextLine:
   143                              <1> ;Read the next line from the file and sets if we are done with copying
   144 00001D13 F6057AE3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   145 00001D1A 75E8                <1>     jnz batFinish
   146 00001D1C E8BF010000          <1>     call batOpen    ;Open the batch file. Always succeeds. Hdl in ebx.
   147 00001D21 488B3583E3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   148 00001D28 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   149 00001D2B 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   150 00001D2E B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   151 00001D33 CD21                <1>     int 21h
   152 00001D35 C60526E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   153 00001D3C 488D1520E4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   154 00001D43 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   155                              <1> .readlp:
   156 00001D45 E8CA010000          <1>     call batReadChar        ;Read the char. Set ZF and flag if no bytes read.
   157 00001D4A 742F                <1>     jz .eofAddCR
   158 00001D4C 48FFC7              <1>     inc rdi                 ;We read a char, woohoo!
   159 00001D4F 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   160 00001D52 743D                <1>     je .eolCR
   161 00001D54 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   162 00001D57 7447                <1>     je .eolLF
   163 00001D59 FE0503E4FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   164 00001D5F 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   165 00001D62 803DF9E3FFFF80      <1>     cmp byte [inBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   166 00001D69 75DA                <1>     jne .readlp             ;Get next char if not
   167 00001D6B 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   168 00001D6E C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   169 00001D71 FE0DEBE3FFFF        <1>     dec byte [inBuffer + 1] ;Reduce the valid char count by one
   170 00001D77 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   171 00001D79 EB28                <1>     jmp short .eol          ;The user typed too many chars on a line, EOL
   172                              <1> .eofAddCR:
   173 00001D7B C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   174                              <1> .eof:
   175 00001D7E 803DDDE3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we read any chars, do the line!
   176 00001D85 751C                <1>     jne .eol
   177 00001D87 E880010000          <1>     call batClose                   ;Else close the hdl!
   178 00001D8C E973FFFFFF          <1>     jmp batFinish
   179                              <1> .eolCR:   ;Now get the next char, to possibly eliminate a trailing LF
   180 00001D91 E87E010000          <1>     call batReadChar  ;Get the LF over CR. Set ZF and flag if no bytes read.
   181 00001D96 74E6                <1>     jz .eof     ;That CR was last char, check if we have something to do
   182 00001D98 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   183 00001D9B 7503                <1>     jne .eolLF          ;Reread this char if not LF
   184 00001D9D 48FFC7              <1>     inc rdi             ;Else add to the count
   185                              <1> .eolLF:
   186 00001DA0 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   187                              <1> .eol:
   188                              <1> ;Close the file, update the batch block file pointer, then proceed.
   189                              <1> ;rsi -> Batch block.
   190 00001DA3 E864010000          <1>     call batClose
   191                              <1> ;Imagine someone gives us a 2+Gb Batch file...
   192 00001DA8 48017E13            <1>     add qword [rsi + batBlockHdr.qBatOff], rdi    ;Add to count
   193                              <1> ;Now we echo the prompt and command to the console unless the 
   194                              <1> ; first char is @, we hit a label or the echo flag is off.
   195 00001DAC 488D15B0E3FFFF      <1>     lea rdx, inBuffer + 2
   196                              <1> ;Labels and @ chars are first non-delim char on line.
   197                              <1> ;Find the first non-delim char in the line and check it!!
   198 00001DB3 4889D6              <1>     mov rsi, rdx
   199 00001DB6 E8D2260000          <1>     call skipDelimiters 
   200 00001DBB 803E40              <1>     cmp byte [rsi], batNoEchoChar   ;Line no echo check! (@)
   201 00001DBE 7435                <1>     je .noEchoPull       
   202 00001DC0 803E3A              <1>     cmp byte [rsi], ":"     ;Label check! (:)
   203 00001DC3 0F844AFFFFFF        <1>     je batNextLine          ;Just get the next line immediately
   204 00001DC9 F605C6E2FFFFFF      <1>     test byte [echoFlg], -1         
   205 00001DD0 0F8475F3FFFF        <1>     jz commandMain.batProceed
   206 00001DD6 52                  <1>     push rdx
   207 00001DD7 E8BC230000          <1>     call printPrompt    ;Now output prompt
   208 00001DDC 5A                  <1>     pop rdx
   209 00001DDD 0FB60D7EE3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   210 00001DE4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   211 00001DE9 B800400000          <1>     mov eax, 4000h  ;Write woo!
   212 00001DEE CD21                <1>     int 21h
   213 00001DF0 E951F3FFFF          <1>     jmp commandMain.batProceedCrlf
   214                              <1> .noEchoPull:
   215 00001DF5 FE0D67E3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   216 00001DFB 0F8412FFFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   217 00001E01 4889D7              <1>     mov rdi, rdx
   218 00001E04 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   219 00001E08 0FB60D53E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   220 00001E0F FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   221 00001E11 F3A4                <1>     rep movsb 
   222 00001E13 E933F3FFFF          <1>     jmp commandMain.batProceed   ;Now proceed normally w/o crlf
   223                              <1> 
   224                              <1> batPreprocess:
   225                              <1> ;Copies the line from batCpyBuffer to batInBuffer for regular processing,
   226                              <1> ; expanding any environment variables as the expansion takes place.
   227                              <1> ;Line is guaranteed only CR terminated.
   228 00001E18 488D2D42E3FFFF      <1>     lea rbp, batCpyBuffer   ;Save the ptr for the expandVar function
   229 00001E1F 488D7D02            <1>     lea rdi, qword [rbp + 2]    ;Point to the string destination
   230 00001E23 C6450100            <1>     mov byte [rbp + 1], 0       ;Reset the buffer count
   231 00001E27 488D35B7E3FFFF      <1>     lea rsi, qword [batInBuffer + 2]
   232                              <1> .lp:
   233 00001E2E AC                  <1>     lodsb   ;Get char and advance source ptr
   234 00001E2F 3C25                <1>     cmp al, "%" ;Did we get a envvar symbol?
   235 00001E31 7507                <1>     jne .rawcp
   236 00001E33 E815000000          <1>     call batExpandVar   ;Advances rsi to next char and rdi past envvar
   237 00001E38 EB09                <1>     jmp short .check  
   238                              <1> .rawcp:
   239 00001E3A AA                  <1>     stosb   ;Store the char
   240 00001E3B 3C0D                <1>     cmp al, CR
   241                              <1>     rete    ;Return immediately if we copied a CR. Dont add to count.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E3D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E3F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   242 00001E40 FE4501              <1>     inc byte [rbp + 1] ;Else inc the buffer count
   243                              <1> .check:
   244 00001E43 807D017F            <1>     cmp byte [rbp + 1], inLen - 1   ;Max chars yet?
   245 00001E47 75E5                <1>     jne .lp
   246 00001E49 B00D                <1>     mov al, CR  ;Here if so, terminate the line nicely :)
   247 00001E4B AA                  <1>     stosb   ;Store this char too
   248                              <1>     return
    13                              <2> %%_ret:
    14 00001E4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> 
   250                              <1> 
   251                              <1> batExpandVar:
   252                              <1> ;Expand any environment variables. 
   253                              <1> ;%% is treated as an escape char for a %.
   254                              <1> ;
   255                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   256                              <1> ;       rdi -> Position to place the substitution string.
   257                              <1> ;       rbp -> Head of destination buffer for copy.
   258                              <1> ;Output:
   259                              <1> ;   Substitution string is placed in buffer if necessary.
   260                              <1> ;       rsi -> Char after the terminal % of the source envvar name.
   261                              <1> ;       rdi -> Space for the next char to copy.
   262 00001E4D 8A4601              <1>     mov al, byte [rsi + 1]  ;Is this a parameter like %x ?
   263 00001E50 E846260000          <1>     call isALdelimiter
   264                              <1>     rete    ;Do nothing, keep copying
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E55 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265 00001E57 803E25              <1>     cmp byte [rsi], "%" ;If immediately followed by %, then return it
   266                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E5A 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   267                              <1> ;Now do the env var search. Start by scanning for the terminating
   268                              <1> ; % of the var name. If we strike a delimiter char first, 
   269                              <1> ; we stop the expansion for the envvar.
   270 00001E5C 4889FB              <1>     mov rbx, rdi    ;Save where to write the envvar if one is found
   271 00001E5F 4889F7              <1>     mov rdi, rsi    ;Maintain pointer to the head of the envvar string
   272                              <1> .envVarLp:
   273 00001E62 AC                  <1>     lodsb
   274 00001E63 E833260000          <1>     call isALdelimiter  ;Exit if a delimiter is hit first.
   275                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E68 74(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   276 00001E6A 3C25                <1>     cmp al, "%"         ;Did we find a terminating % found.
   277 00001E6C 75F4                <1>     jne .envVarLp
   278                              <1> ;Fall here if we find the terminating % of the var name. rsi -> past %
   279 00001E6E C646FF3D            <1>     mov byte [rsi - 1], "=" ;Replace % with an equals sign for var search.
   280 00001E72 56                  <1>     push rsi    ;Save ptr to the first char past the envvar
   281                              <1>     ;Take input rdi -> Varname to look for. Already in rdi.
   282 00001E73 E8D5290000          <1>     call searchForEnvVar    ;Returns rsi -> Envvar for copy in place
   283 00001E78 4889F7              <1>     mov rdi, rsi    ;Point rdi to the ASCIIZ envvar value itself
   284 00001E7B 5E                  <1>     pop rsi         ;Get back the ptr to the first char past the envvar
   285                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E7C 72(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   286                              <1> 
   287 00001E7E 56                  <1>     push rsi        ;Save the ptr to the first char past the envvar
   288 00001E7F 4889DE              <1>     mov rsi, rbx    ;Point rsi to where to copy the envvar
   289 00001E82 4887FE              <1>     xchg rdi, rsi   ;Swap pointers for the copy
   290                              <1> 
   291 00001E85 E8DE250000          <1>     call strlen ;Get the string length of the envvar value in ecx
   292 00001E8A FFC9                <1>     dec ecx     ;Drop 0 from count
   293 00001E8C 0FB65D01            <1>     movzx ebx, byte [rbp + 1] ;Get the count of chars already in the string
   294 00001E90 51                  <1>     push rcx
   295 00001E91 01D9                <1>     add ecx, ebx    ;Get # of chars we will have.
   296 00001E93 81F980000000        <1>     cmp ecx, inLen  ;If we end up with more than 127 chars, truncate
   297 00001E99 59                  <1>     pop rcx
   298 00001E9A 7207                <1>     jb .noTrunc
   299 00001E9C B97F000000          <1>     mov ecx, inLen - 1
   300 00001EA1 29D9                <1>     sub ecx, ebx    ;Turn into # of chars to copy, make space for CR
   301                              <1> .noTrunc:
   302 00001EA3 004D01              <1>     add byte [rbp + 1], cl
   303 00001EA6 F3A4                <1>     rep movsb   ;Moves rdi to the space for the next char
   304 00001EA8 5E                  <1>     pop rsi     ;Get back the ptr to the first char past the envvar name
   305                              <1>     return
    13                              <2> %%_ret:
    14 00001EA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   306                              <1> 
   307                              <1> batCleanup:
   308                              <1> ;This function is called after the last line has been processed by the 
   309                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   310                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   311 00001EAA 488B1DFAE1FFFF      <1>     mov rbx, qword [bbPtr]
   312 00001EB1 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   313 00001EB4 8805DCE1FFFF        <1>     mov byte [echoFlg], al
   314                              <1> ;-----------------------------------------------------------------------
   315                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   316                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   317                              <1> ; But since this is the routine called by the error handler too, it 
   318                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   319                              <1> ; just have a null pointer.
   320                              <1> ;-----------------------------------------------------------------------
   321                              <1> ;Finally free this batch header
   322 00001EBA 4150                <1>     push r8
   323 00001EBC 4989D8              <1>     mov r8, rbx
   324 00001EBF B800490000          <1>     mov eax, 4900h
   325 00001EC4 CD21                <1>     int 21h
   326 00001EC6 4158                <1>     pop r8
   327 00001EC8 E8CFF6FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   328 00001ECD 48C705D3E1FFFF0000- <1>     mov qword [bbPtr], 0    
   328 00001ED6 0000                <1>
   329 00001ED8 8025B5E1FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   330                              <1>     return
    13                              <2> %%_ret:
    14 00001EDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> batOpen:
   333                              <1> ;Opens the batch file and returns the handle in ebx.
   334                              <1> ;Prints the "replace disk" string if file not found.
   335                              <1> ;
   336                              <1> ;Input: Nothing. Opens the filespec in the batFile.
   337                              <1> ;Output: ebx = File handle for filespec in batFile.
   338                              <1> ;
   339                              <1> ;Funky behaviour worth noting:
   340                              <1> ; If a failure occurs in open, we keep prompting the user to 
   341                              <1> ; replace the disk. The only way out if the error is really bad is 
   342                              <1> ; via ^C which does all the cleanup we need. 
   343                              <1> ; Thus this never returns fail.
   344 00001EE0 50                  <1>     push rax
   345 00001EE1 52                  <1>     push rdx
   346 00001EE2 488D15CAE1FFFF      <1>     lea rdx, batFile
   347                              <1> .batOpen:
   348 00001EE9 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   349 00001EEE CD21                <1>     int 21h
   350 00001EF0 7315                <1>     jnc .batOpened
   351 00001EF2 488D15AAE9FFFF      <1>     lea rdx, needBat
   352 00001EF9 E844230000          <1>     call printString
   353 00001EFE B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   354 00001F03 CD21                <1>     int 21h
   355 00001F05 EBE2                <1>     jmp short .batOpen
   356                              <1> .batOpened:
   357 00001F07 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   358 00001F09 5A                  <1>     pop rdx
   359 00001F0A 58                  <1>     pop rax
   360                              <1>     return
    13                              <2> %%_ret:
    14 00001F0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> batClose:
   363                              <1> ;Close the handle in ebx.
   364 00001F0C B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   365 00001F11 CD21                <1>     int 21h         
   366                              <1>     return
    13                              <2> %%_ret:
    14 00001F13 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> batReadChar:
   369                              <1> ;Reads a char. 
   370                              <1> ;Input: ebx = Handle to read char from.
   371                              <1> ;       rdx -> Pointer to byte buffer to store byte.
   372                              <1> ;Output: 
   373                              <1> ;   CF=NC:
   374                              <1> ;       ZF=NZ: eax = 1. One char read.
   375                              <1> ;       ZF=ZE: eax = 0. EOF flag set in status byte. Zero or EOF char read.
   376                              <1> ;   CF=CY: Error in read. We act as if EOF reached. (Never checked.)
   377                              <1> ;Clobbers: None.
   378 00001F14 51                  <1>     push rcx
   379 00001F15 B901000000          <1>     mov ecx, 1
   380 00001F1A B8003F0000          <1>     mov eax, 3F00h
   381 00001F1F CD21                <1>     int 21h 
   382 00001F21 59                  <1>     pop rcx 
   383 00001F22 7213                <1>     jc .bad     ;If CF, always act as if EOF. An error occured.
   384 00001F24 85C0                <1>     test eax, eax   ;Here we check if we read 1 byte. (Clears CF)
   385 00001F26 7405                <1>     jz .eof         ;Jump to eofexit if we didn't read any bytes
   386 00001F28 803A1A              <1>     cmp byte [rdx], EOF ;Did we read ^Z char?
   387                              <1>     retne           ;Return if the char we read was not an EOF char
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F2B 75(13)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   388                              <1> .eof:
   389 00001F2D 9C                  <1>     pushfq      ;Preserve the flags for the bit toggle
   390 00001F2E 800D5FE1FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we are done reading the file!
   391 00001F35 9D                  <1>     popfq
   392                              <1>     return    
    13                              <2> %%_ret:
    14 00001F36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> .bad:
   394 00001F37 31C0                <1>     xor eax, eax    ;Signal we hit an EOF (Set ZF)
   395 00001F39 F9                  <1>     stc             ;Never check it but ensure reset of CF.
   396 00001F3A EBF1                <1>     jmp short .eof  ;And set the status bit
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001F3C 488D15FFE9FFFF      <1>     lea rdx, noSpace
    10 00001F43 488D0D1BEDFFFF      <1>     lea rcx, pipeErr
    11 00001F4A F60548E1FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001F51 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001F53 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001F57 E866000000          <1>     call badCmn     ;Print the string
    15 00001F5C E931F6FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001F61 488D15C9EDFFFF      <1>     lea rdx, noMemMsg
    18 00001F68 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001F6A 488D15CDECFFFF      <1>     lea rdx, syntaxErr
    21 00001F71 EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001F73 488D15E2E9FFFF      <1>     lea rdx, noEnvSpace
    24 00001F7A EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001F7C 488D1567ECFFFF      <1>     lea rdx, accDenMsg
    27 00001F83 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001F85 488D15DCEAFFFF      <1>     lea rdx, badParm
    30 00001F8C EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001F8E 488D1596EAFFFF      <1>     lea rdx, badDrv
    33 00001F95 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001F97 488D1559EDFFFF      <1>     lea rdx, badArgs
    36 00001F9E EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001FA0 488D1534EDFFFF      <1>     lea rdx, badSpec
    39 00001FA7 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001FA9 488D156AE9FFFF      <1>     lea rdx, dupName
    43 00001FB0 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001FB2 488D1578E9FFFF      <1>     lea rdx, fnfMsg
    46 00001FB9 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001FBB 488D15A7EBFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001FC2 E97B220000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001FC7 488D1531E9FFFF      <1>     lea rdx, badCmd
    53 00001FCE EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001FD0 C605BDE5FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001FD7 C605B7E5FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001FDE C705AEE5FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001FE7 00                  <1>
    59 00001FE8 C605ACE5FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001FEF 66C70598E4FFFF0000  <1>     mov word [searchSpec], 0
    61 00001FF8 488D3D1EE6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001FFF C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00002002 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 0000200B 3F                  <1>
    64 0000200C 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00002010 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00002017 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 0000201E 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00002021 E867240000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00002026 AC                  <1>     lodsb   ;Get this char
    72 00002027 3C0D                <1>     cmp al, CR
    73 00002029 744D                <1>     je .scanDone
    74 0000202B 3A05F9DFFFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00002031 7524                <1>     jne .notSwitch
    76 00002033 AC                  <1>     lodsb   ;Get the next char
    77 00002034 E839240000          <1>     call ucChar
    78 00002039 3C57                <1>     cmp al, "W"
    79 0000203B 7509                <1>     jne .notWide
    80 0000203D 800D50E5FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00002044 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00002046 3C50                <1>     cmp al, "P"
    84 00002048 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 0000204E 800D3FE5FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00002055 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00002057 F60536E5FFFF04      <1>     test byte [dirFlags], dirFileType
    89 0000205E 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00002064 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00002067 E8AD250000          <1>     call copyArgumentToSearchSpec   
    93 0000206C 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 0000206F 800D1EE5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00002076 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00002078 F60515E5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 0000207F 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00002081 488D3508E4FFFF      <1>     lea rsi, searchSpec
   101 00002088 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 0000208C 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 0000208E 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00002093 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00002097 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 0000209C CD21                <1>     int 21h
   108 0000209E 3CFF                <1>     cmp al, -1
   109 000020A0 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 000020A6 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 000020AB 84C0                <1>     test al, al
   113 000020AD 740A                <1>     jz .currentDrv
   114 000020AF FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 000020B1 8805E3E4FFFF        <1>     mov byte [dirDrv], al
   116 000020B7 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 000020B9 E88C230000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 000020BE 8805D6E4FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 000020C4 488D35C5E3FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 000020CB 488D3DC9E4FFFF      <1>     lea rdi, dirSrchDir
   124 000020D2 0FB605C1E4FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 000020D9 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 000020DB 0441                <1>     add al, "A" ;Turn into a letter
   127 000020DD B43A                <1>     mov ah, ":"
   128 000020DF 66AB                <1>     stosw   ;Store X: into the search path
   129 000020E1 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 000020E6 CD2F                <1>     int 2fh
   131 000020E8 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 000020EA 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 000020F0 8A0533DFFFFF        <1>     mov al, byte [pathSep]
   135 000020F6 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 000020F8 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 000020FA AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 000020FB FEC2                <1>     inc dl  ;Increment by 1
   139 000020FD 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00002100 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00002105 CD21                <1>     int 21h
   142 00002107 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 0000210A 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 0000210C 3807                <1>     cmp byte [rdi], al
   149 0000210E 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00002110 48FFC7              <1>     inc rdi
   151 00002113 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00002115 8A050EDFFFFF        <1>     mov al, byte [pathSep]
   154 0000211B 3806                <1>     cmp byte [rsi], al
   155 0000211D 7412                <1>     je .copyPathLoop
   156 0000211F B43A                <1>     mov ah, ":"
   157 00002121 86C4                <1>     xchg al, ah
   158 00002123 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002127 7408                <1>     je .copyPathLoop
   160 00002129 88E0                <1>     mov al, ah
   161 0000212B 3847FF              <1>     cmp byte [rdi - 1], al
   162 0000212E 7401                <1>     je .copyPathLoop
   163 00002130 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00002131 AC                  <1>     lodsb
   166 00002132 3A05F1DEFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002138 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 0000213A 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 0000213C 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 0000213E 48FFC6              <1>     inc rsi
   172 00002141 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00002143 3C2E                <1>     cmp al, "."
   175 00002145 7407                <1>     je .dots
   176                              <1> .store:
   177 00002147 AA                  <1>     stosb
   178 00002148 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 0000214A 7472                <1>     jz .exitPathCopy
   180 0000214C EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 0000214E 8A25D5DEFFFF        <1>     mov ah, byte [pathSep]
   188 00002154 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00002157 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00002159 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 0000215B 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 0000215E 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00002160 3A25C3DEFFFF        <1>     cmp ah, byte [pathSep]
   195 00002166 7406                <1>     je .skipThisPathsep
   196 00002168 84E4                <1>     test ah, ah
   197 0000216A 74C5                <1>     jz .copyPathLoop
   198 0000216C EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 0000216E 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00002171 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00002173 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00002176 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00002178 3A25ABDEFFFF        <1>     cmp ah, byte [pathSep]
   208 0000217E 7408                <1>     je .tdOk
   209 00002180 84E4                <1>     test ah, ah
   210 00002182 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00002188 8A059BDEFFFF        <1>     mov al, byte byte [pathSep]
   213 0000218E 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00002192 0F84EDFDFFFF        <1>     je badParamError
   215 00002198 4881EF02000000      <1>     sub rdi, 2
   216 0000219F 31C9                <1>     xor ecx, ecx
   217 000021A1 FFC9                <1>     dec ecx
   218 000021A3 FD                  <1>     std
   219 000021A4 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000021A6 FC                  <1>     cld
   221 000021A7 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000021AE 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000021B0 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000021B6 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000021B9 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000021BE 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 000021C5 8A055EDEFFFF        <1>     mov al, byte [pathSep]
   230 000021CB B43A                <1>     mov ah, ":"
   231 000021CD 86C4                <1>     xchg al, ah
   232 000021CF 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 000021D3 7409                <1>     je .skipOverwrite
   234 000021D5 88E0                <1>     mov al, ah
   235 000021D7 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 000021D9 7503                <1>     jne .skipOverwrite
   237 000021DB C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 000021DE 488D35B6E3FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 000021E5 4889F7              <1>     mov rdi, rsi
   241 000021E8 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 000021ED CD2F                <1>     int 2fh
   243 000021EF E832240000          <1>     call scanForWildcards
   244 000021F4 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 000021F6 4889F2              <1>     mov rdx, rsi
   246 000021F9 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 000021FD 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 000021FF E88E250000          <1>     call setDTA ;Set the DTA
   250 00002204 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002209 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 0000220E CD21                <1>     int 21h
   253 00002210 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00002212 F60512DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002219 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 0000221B 31C0                <1>     xor eax, eax
   259 0000221D 31C9                <1>     xor ecx, ecx
   260 0000221F FFC9                <1>     dec ecx
   261 00002221 F2AE                <1>     repne scasb
   262 00002223 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00002226 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00002228 31C0                <1>     xor eax, eax
   268 0000222A 31C9                <1>     xor ecx, ecx
   269 0000222C FFC9                <1>     dec ecx
   270 0000222E F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00002230 8A05F3DDFFFF        <1>     mov al, byte [pathSep]
   273 00002236 31C9                <1>     xor ecx, ecx
   274 00002238 FFC9                <1>     dec ecx
   275 0000223A FD                  <1>     std ;Search backwards
   276 0000223B F2AE                <1>     repne scasb
   277 0000223D FC                  <1>     cld ;Search forwards again
   278 0000223E 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00002241 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00002245 7503                <1>     jne .wcsp1
   281 00002247 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 0000224A 57                  <1>     push rdi
   285 0000224B 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 0000224D 7503                <1>     jne .wcsp2
   287 0000224F 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00002252 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00002255 488D3DC1E3FFFF      <1>     lea rdi, dirSrchFCB
   291 0000225C B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00002261 CD21                <1>     int 21h
   293 00002263 5F                  <1>     pop rdi
   294 00002264 31C0                <1>     xor eax, eax
   295 00002266 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00002268 0FB6052BE3FFFF      <1>     movzx eax, byte [dirDrv] 
   298 0000226F E89F130000          <1>     call volume.dirEP
   299 00002274 488D1556E9FFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 0000227B B409                <1>     mov ah, 09h
   301 0000227D CD21                <1>     int 21h
   302 0000227F C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00002282 488D1512E3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00002289 B409                <1>     mov ah, 09h
   305 0000228B CD21                <1>     int 21h
   306 0000228D C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00002290 488D15F0E5FFFF      <1>     lea rdx, crlf2
   308 00002297 B409                <1>     mov ah, 09h
   309 00002299 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 0000229B 8A0588DDFFFF        <1>     mov al, byte [pathSep]
   313 000022A1 3847FF              <1>     cmp byte [rdi - 1], al
   314 000022A4 7403                <1>     je .root
   315 000022A6 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000022A9 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000022AC AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000022AD 488D356AE3FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000022B4 E8AF220000          <1>     call FCBToAsciiz    ;Terminates for free
   321 000022B9 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 000022BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 000022BF E8CE240000          <1>     call setDTA
   326 000022C4 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 000022C9 488D15CBE2FFFF      <1>     lea rdx, dirSrchDir
   328 000022D0 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 000022D5 CD21                <1>     int 21h
   330 000022D7 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 000022D9 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   333 000022DE B44F                <1>     mov ah, 4Fh
   334 000022E0 CD21                <1>     int 21h
   335 000022E2 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 000022E4 F605A9E2FFFF01      <1>     test byte [dirFlags], dirWideType
   338 000022EB 740B                <1>     jz .dirNoEndNewLine
   339 000022ED 488D1590E5FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 000022F4 B409                <1>     mov ah, 09h
   341 000022F6 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 000022F8 F70594E2FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00002301 FF                  <1>
   345 00002302 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002304 488D1526E6FFFF      <1>     lea rdx, fnfMsg
   348 0000230B E8321F0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00002310 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00002311 8B057FE2FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   352 00002317 B909000000          <1>     mov ecx, 9
   353 0000231C E819230000          <1>     call printDecimalValLB
   354 00002321 488D15E2E6FFFF      <1>     lea rdx, dirOk
   355 00002328 B409                <1>     mov ah, 09h
   356 0000232A CD21                <1>     int 21h
   357 0000232C B800360000          <1>     mov eax, 3600h ;Get disk info
   358 00002331 8A1563E2FFFF        <1>     mov dl, byte [dirDrv]
   359 00002337 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   360 00002339 CD21                <1>     int 21h ;Get disk free space info
   361 0000233B 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   362 0000233E 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   363 00002341 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   364 00002343 F7E1                <1>     mul ecx ;Get bytes per cluster
   365 00002345 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   366                              <1>     ;rax now has the number of free bytes on the disk
   367 00002348 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   368 0000234D E8E8220000          <1>     call printDecimalValLB
   369 00002352 488D15BBE6FFFF      <1>     lea rdx, bytesOk
   370 00002359 B409                <1>     mov ah, 09h
   371 0000235B CD21                <1>     int 21h
   372                              <1>     return
    13                              <2> %%_ret:
    14 0000235D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .dirPrintFileData:
   375                              <1> ;Use cmdFcb to build the file name with space
   376                              <1> ;Start by print the name (same for both cases)
   377                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   378 0000235E F605C6DDFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   379                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002365 75(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   380 00002367 488D35C6DDFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   381 0000236E 488D3D91DDFFFF      <1>     lea rdi, cmdFcb
   382 00002375 E880210000          <1>     call asciiFilenameToFCB
   383 0000237A 488D1585DDFFFF      <1>     lea rdx, cmdFcb
   384 00002381 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   385 00002386 BB01000000          <1>     mov ebx, 1  ;STDOUT
   386 0000238B B440                <1>     mov ah, 40h ;Write handle
   387 0000238D CD21                <1>     int 21h
   388 0000238F 52                  <1>     push rdx
   389 00002390 B220                <1>     mov dl, " "
   390 00002392 B402                <1>     mov ah, 02h ;Print char
   391 00002394 CD21                <1>     int 21h
   392 00002396 5A                  <1>     pop rdx
   393 00002397 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   394 0000239E B903000000          <1>     mov ecx, 3  ;Print three chars
   395 000023A3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   396 000023A8 B440                <1>     mov ah, 40h ;Write handle
   397 000023AA CD21                <1>     int 21h
   398 000023AC F605E1E1FFFF01      <1>     test byte [dirFlags], dirWideType
   399 000023B3 757B                <1>     jnz .widePrint
   400                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   401                              <1>     ;Now check if a DIR
   402 000023B5 F6056FDDFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   403 000023BC 7422                <1>     jz .dirPrintNotDir
   404 000023BE 488D155DE6FFFF      <1>     lea rdx, dirLbl
   405 000023C5 B409                <1>     mov ah, 09h
   406 000023C7 CD21                <1>     int 21h
   407 000023C9 488D15DBEAFFFF      <1>     lea rdx, threeSpc
   408 000023D0 B409                <1>     mov ah, 09h
   409 000023D2 CD21                <1>     int 21h
   410 000023D4 B409                <1>     mov ah, 09h
   411 000023D6 CD21                <1>     int 21h
   412 000023D8 B220                <1>     mov dl, SPC
   413 000023DA B402                <1>     mov ah, 02h
   414 000023DC CD21                <1>     int 21h
   415 000023DE EB1C                <1>     jmp short .dirPrintFileDT
   416                              <1> .dirPrintNotDir:
   417                              <1> ;Here we print the file size
   418 000023E0 B220                <1>     mov dl, " "
   419 000023E2 B402                <1>     mov ah, 02h
   420 000023E4 CD21                <1>     int 21h
   421 000023E6 8B0544DDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   422 000023EC B90D000000          <1>     mov ecx, 13
   423 000023F1 E844220000          <1>     call printDecimalValLB
   424 000023F6 B220                <1>     mov dl, SPC
   425 000023F8 B402                <1>     mov ah, 02h
   426 000023FA CD21                <1>     int 21h
   427                              <1> .dirPrintFileDT:
   428 000023FC 0FB7052BDDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   429 00002403 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   430 00002405 E8DE1B0000          <1>     call printDate
   431 0000240A 488D159AEAFFFF      <1>     lea rdx, threeSpc
   432 00002411 B409                <1>     mov ah, 09h
   433 00002413 CD21                <1>     int 21h
   434 00002415 0FB70510DDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   435 0000241C E8E91C0000          <1>     call printTime
   436 00002421 488D155CE4FFFF      <1>     lea rdx, crlf
   437 00002428 B409                <1>     mov ah, 09h
   438 0000242A CD21                <1>     int 21h
   439 0000242C B017                <1>     mov al, 23  ;23 lines... for the next bit
   440 0000242E EB0D                <1>     jmp short .dirPrintNameExit
   441                              <1> .widePrint:
   442                              <1> ;If /W, print name space ext space space space space
   443 00002430 488D156FEAFFFF      <1>     lea rdx, fourSpc
   444 00002437 B409                <1>     mov ah, 09h ;Print string
   445 00002439 CD21                <1>     int 21h
   446 0000243B B073                <1>     mov al, 5*23    ;5 entries per line...
   447                              <1> .dirPrintNameExit:
   448 0000243D FF0553E1FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   449 00002443 FE054CE1FFFF        <1>     inc byte [dirLineCtr]
   450 00002449 380546E1FFFF        <1>     cmp byte [dirLineCtr], al
   451                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000244F 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002451 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   452 00002452 F6053BE1FFFF02      <1>     test byte [dirFlags], dirPageType
   453 00002459 741A                <1>     jz .dirPrnNoPag
   454 0000245B 488D15E7E5FFFF      <1>     lea rdx, pauseMes
   455 00002462 B409                <1>     mov ah, 09h
   456 00002464 CD21                <1>     int 21h
   457 00002466 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   458 00002468 CD21                <1>     int 21h
   459 0000246A 488D1513E4FFFF      <1>     lea rdx, crlf   ;Force new line
   460 00002471 B409                <1>     mov ah, 09h
   461 00002473 CD21                <1>     int 21h
   462                              <1> .dirPrnNoPag:
   463 00002475 C60519E1FFFF00      <1>     mov byte [dirLineCtr], 0
   464                              <1>     return
    13                              <2> %%_ret:
    14 0000247C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> chdir:
   467 0000247D F60520DCFFFFFF      <1>     test byte [arg1Flg], -1
   468 00002484 754D                <1>     jnz .changeDir
   469                              <1>     ;Print CWD
   470                              <1> .printCWD:
   471 00002486 E82C1E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   472 0000248B E8AB1D0000          <1>     call printCRLF
   473                              <1>     return
    13                              <2> %%_ret:
    14 00002490 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .printDiskCWD:
   475                              <1> ;Print CWD for a specified drive
   476 00002491 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   477 00002495 88D0                <1>     mov al, dl
   478 00002497 0440                <1>     add al, "@" ;Get the UC letter
   479 00002499 B43A                <1>     mov ah, ":"
   480 0000249B 488D3DEEDFFFFF      <1>     lea rdi, searchSpec
   481 000024A2 66AB                <1>     stosw   ;Store X:, rdi+=2
   482 000024A4 8A057FDBFFFF        <1>     mov al, byte [pathSep]
   483 000024AA AA                  <1>     stosb   ;Store pathSep, inc rdi
   484 000024AB B447                <1>     mov ah, 47h ;Get Current Working Directory
   485 000024AD 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   486 000024B0 CD21                <1>     int 21h
   487 000024B2 E8B11F0000          <1>     call strlen
   488 000024B7 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   489 000024BD B440                <1>     mov ah, 40h ;Write to handle
   490 000024BF BB01000000          <1>     mov ebx, 1  ;STDOUT
   491 000024C4 488D15C5DFFFFF      <1>     lea rdx, searchSpec
   492 000024CB CD21                <1>     int 21h
   493 000024CD E8691D0000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 000024D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .changeDir:
   496 000024D3 8A05CDDBFFFF        <1>     mov al, byte [arg1FCBret]
   497 000024D9 3CFF                <1>     cmp al, -1 
   498 000024DB 0F84ADFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   499 000024E1 E81B210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   500 000024E6 488D15A3DFFFFF      <1>     lea rdx, searchSpec
   501 000024ED B43B                <1>     mov ah, 3Bh ;CHDIR
   502 000024EF CD21                <1>     int 21h
   503 000024F1 0F82C4FAFFFF        <1>     jc badDirError
   504                              <1>     return
    13                              <2> %%_ret:
    14 000024F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> mkdir:
   507 000024F8 F605A5DBFFFFFF      <1>     test byte [arg1Flg], -1
   508 000024FF 0F8492FAFFFF        <1>     jz badArgError
   509 00002505 F6059BDBFFFFFF      <1>     test byte [arg2Flg], -1
   510 0000250C 0F8585FAFFFF        <1>     jnz badArgError
   511                              <1>     ;We have exactly one argument
   512 00002512 8A058EDBFFFF        <1>     mov al, byte [arg1FCBret]
   513 00002518 3CFF                <1>     cmp al, -1 
   514 0000251A 0F846EFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   515 00002520 E8DC200000          <1>     call buildCommandPath
   516 00002525 488D1564DFFFFF      <1>     lea rdx, searchSpec
   517 0000252C B800390000          <1>     mov eax, 3900h  ;MKDIR
   518 00002531 CD21                <1>     int 21h
   519                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002533 73(F7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520                              <1> .badMake:   ;Else, bad make
   521 00002535 488D1541E6FFFF      <1>     lea rdx, badMD
   522 0000253C E9011D0000          <1>     jmp printString
   523                              <1> 
   524                              <1> rmdir:
   525 00002541 F6055CDBFFFFFF      <1>     test byte [arg1Flg], -1
   526 00002548 0F8449FAFFFF        <1>     jz badArgError
   527 0000254E F60552DBFFFFFF      <1>     test byte [arg2Flg], -1
   528 00002555 0F853CFAFFFF        <1>     jnz badArgError
   529                              <1>     ;We have exactly one argument
   530 0000255B 8A0545DBFFFF        <1>     mov al, byte [arg1FCBret]
   531 00002561 3CFF                <1>     cmp al, -1 
   532 00002563 0F8425FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   533 00002569 E893200000          <1>     call buildCommandPath
   534 0000256E 488D151BDFFFFF      <1>     lea rdx, searchSpec
   535 00002575 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   536 0000257A CD21                <1>     int 21h
   537                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000257C 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000257E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   538                              <1> .badRemove:   ;Else, bad make
   539 0000257F 488D1514E6FFFF      <1>     lea rdx, badRD
   540 00002586 E9B71C0000          <1>     jmp printString
   541                              <1> 
   542                              <1> copy:
   543 0000258B 66C705E9E1FFFFFFFF  <1>     mov word [sourceHdl], -1
   544 00002594 66C705E2E1FFFFFFFF  <1>     mov word [destHdl], -1
   545 0000259D 66C705DBE1FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   546 000025A6 C605E4E1FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   547 000025AD 48C705CBE1FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   547 000025B6 0000                <1>
   548 000025B8 66C705CAE1FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   549 000025C1 C705C2E1FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   549 000025CA 00                  <1>
   550 000025CB C6058BE0FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   551 000025D2 C60506E1FFFF00      <1>     mov byte [destSpec], 0
   552 000025D9 48C7057DE1FFFF0000- <1>     mov qword [srcPtr], 0
   552 000025E2 0000                <1>
   553 000025E4 48C7057AE1FFFF0000- <1>     mov qword [destPtr], 0
   553 000025ED 0000                <1>
   554 000025EF E89E210000          <1>     call setDTA
   555 000025F4 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   556 000025F9 CD21                <1>     int 21h
   557 000025FB 88057BE1FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   558                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   559                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   560                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   561 00002601 B800520000          <1>     mov eax, 5200h
   562 00002606 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   563 00002608 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   564 0000260C 89CB                <1>     mov ebx, ecx
   565 0000260E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   566 00002611 B800480000          <1>     mov eax, 4800h
   567 00002616 CD21                <1>     int 21h
   568 00002618 731E                <1>     jnc .bufOk
   569 0000261A 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   570 0000261C 750C                <1>     jnz .okSize
   571                              <1> .badAlloc:
   572                              <1> ;Not enough memory error!
   573 0000261E 488D15C8E3FFFF      <1>     lea rdx, cpNoMem
   574 00002625 E998F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   575                              <1> .okSize:
   576 0000262A 89D9                <1>     mov ecx, ebx    
   577 0000262C C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   578 0000262F B800480000          <1>     mov eax, 4800h
   579 00002634 CD21                <1>     int 21h
   580 00002636 72E6                <1>     jc .badAlloc
   581                              <1> .bufOk:
   582 00002638 48890544E1FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   583 0000263F 66890D45E1FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   584                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   585 00002646 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   586 0000264D 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   587 00002655 FFC9                <1>     dec ecx ;Turn into offset
   588 00002657 4801CE              <1>     add rsi, rcx
   589 0000265A 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   590 0000265C FD                  <1>     std ;Go in reverse
   591                              <1> .sd:    ;At this point, any switch chars affect destination!
   592 0000265D E82B1E0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   593 00002662 8A05C2D9FFFF        <1>     mov al, byte [switchChar]
   594 00002668 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   595 0000266B 7509                <1>     jne .noSwitch
   596                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   597 0000266D 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   598 00002671 50                  <1>     push rax        ;Push the switchchar
   599 00002672 FFC2                <1>     inc edx         ;Inc the counter
   600 00002674 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   601                              <1> .noSwitch:
   602                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   603 00002676 85D2                <1>     test edx, edx
   604 00002678 7412                <1>     jz .noDestSwitch
   605                              <1> .ns1:
   606 0000267A 58                  <1>     pop rax ;Pop the switch char
   607 0000267B B304                <1>     mov bl, ascDes
   608 0000267D E805040000          <1>     call .doSwitchRev
   609 00002682 0F8570040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   610 00002688 FFCA                <1>     dec edx
   611 0000268A 75EE                <1>     jnz .ns1
   612                              <1> .noDestSwitch:
   613                              <1> ;Now search for the starting delimiter or start of line
   614 0000268C 48FFC6              <1>     inc rsi ;Go to the last char in the path
   615                              <1> .noSwitchLp:
   616 0000268F AC                  <1>     lodsb   ;Get char at rsi, go back a char
   617 00002690 E8061E0000          <1>     call isALdelimiter
   618 00002695 7412                <1>     je .destFnd
   619 00002697 8A058DD9FFFF        <1>     mov al, byte [switchChar]
   620 0000269D 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   621 000026A0 7404                <1>     je .se  ;Jump if so!
   622 000026A2 FFC9                <1>     dec ecx ;One less char left to search
   623 000026A4 EBE9                <1>     jmp short .noSwitchLp
   624                              <1> .se:
   625 000026A6 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   626                              <1> .destFnd:
   627 000026A9 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   628 000026B0 FC                  <1>     cld 
   629 000026B1 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   630 000026B4 488D3D24E0FFFF      <1>     lea rdi, destSpec
   631 000026BB 57                  <1>     push rdi
   632 000026BC E8FD1E0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   633 000026C1 5F                  <1>     pop rdi
   634 000026C2 E87D1E0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   635 000026C7 48893D9BE0FFFF      <1>     mov qword [destPtr], rdi
   636 000026CE 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   637 000026D2 7517                <1>     jne .destEnd    ;Dont worry
   638 000026D4 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   639 000026D6 E8971D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   640 000026DB 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   641 000026DD 4881C702000000      <1>     add rdi, 2              ;Point to this null
   642 000026E4 48893D7EE0FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   643                              <1> .destEnd:
   644                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   645 000026EB 80259FE0FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   646 000026F2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   647                              <1> .srcLp:
   648 000026F9 E88F1D0000          <1>     call skipDelimiters 
   649 000026FE 8A0526D9FFFF        <1>     mov al, byte [switchChar]
   650 00002704 3806                <1>     cmp byte [rsi], al
   651 00002706 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   652                              <1>     ;rsi points to switch after switchchar
   653 00002708 B301                <1>     mov bl, ascSrc
   654 0000270A E872030000          <1>     call .doSwitch
   655 0000270F 0F85E3030000        <1>     jnz .badExit
   656 00002715 4881C602000000      <1>     add rsi, 2
   657 0000271C EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   658                              <1> .noSrcSw:
   659 0000271E 4839F5              <1>     cmp rbp, rsi
   660 00002721 7527                <1>     jne .noSameSrcDest
   661                              <1>     ;Here if the destination we specified earlier is the same as the source
   662                              <1>     ;This means, the actual destination is the current default drive
   663                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   664 00002723 E8221D0000          <1>     call getCurrentDrive    ;Get current drive
   665 00002728 0441                <1>     add al, "A"             ;Turn into a drive letter
   666 0000272A B43A                <1>     mov ah, ":"
   667 0000272C 0FB7C0              <1>     movzx eax, ax
   668 0000272F 8905AADFFFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   669 00002735 488D3DA5DFFFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   670 0000273C 48893D26E0FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   671 00002743 800D47E0FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   672                              <1> .noSameSrcDest:
   673 0000274A 488D3D0CDFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   674 00002751 57                  <1>     push rdi
   675 00002752 E8671E0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   676 00002757 5F                  <1>     pop rdi
   677                              <1>     ;Now go forwards and pick up any more switches.
   678                              <1>     ;Also any "+" signs here!!
   679 00002758 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   680                              <1> .swSrcSwPost:
   681 0000275B E82D1D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   682 00002760 8A05C4D8FFFF        <1>     mov al, byte [switchChar]
   683 00002766 3806                <1>     cmp byte [rsi], al
   684 00002768 7516                <1>     jne .swSrcSwPostExit
   685                              <1>     ;rsi points to switch after switchchar
   686 0000276A B301                <1>     mov bl, ascSrc
   687 0000276C E810030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   688 00002771 0F8581030000        <1>     jnz .badExit
   689 00002777 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   690 0000277E EBDB                <1>     jmp short .swSrcSwPost
   691                              <1> .swSrcSwPostExit:
   692 00002780 4889FE              <1>     mov rsi, rdi
   693 00002783 E89E1E0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   694 00002788 7507                <1>     jnz .oneCp
   695 0000278A 800D00E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   696                              <1> .oneCp:
   697 00002791 E8AE1D0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   698 00002796 48893DC4DFFFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   699 0000279D 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   700 000027A1 7517                <1>     jne .srcEnd             ;Dont worry
   701 000027A3 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   702 000027A5 E8C81C0000          <1>     call ucChar             ;Make sure we UC the drive letter
   703 000027AA 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   704 000027AC 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   705 000027B3 48893DA7DFFFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   706                              <1> .srcEnd:
   707                              <1> ;Now uppercase both paths
   708 000027BA 488D359CDEFFFF      <1>     lea rsi, srcSpec
   709 000027C1 E8B81C0000          <1>     call normalisePath
   710 000027C6 488D3D12DFFFFF      <1>     lea rdi, destSpec
   711 000027CD E8AC1C0000          <1>     call normalisePath
   712                              <1> ;Now establish if the source is a directory or not!
   713 000027D2 F605B8DFFFFF08      <1>     test byte [bCpFlg], wcSrc
   714 000027D9 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   715 000027DB 488D157BDEFFFF      <1>     lea rdx, srcSpec
   716 000027E2 4889D6              <1>     mov rsi, rdx
   717 000027E5 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   718 000027E7 80FC3A              <1>     cmp ah, ":"
   719 000027EA 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   720 000027EC AC                  <1>     lodsb           ;Get char past :
   721 000027ED 84C0                <1>     test al, al     ;Is byte three nul?
   722 000027EF 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   723 000027F1 3A0532D8FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   724 000027F7 7515                <1>     jne .isSrcDir
   725 000027F9 AC                  <1>     lodsb           ;Get char past char past "X:\"
   726 000027FA 84C0                <1>     test al, al     
   727 000027FC 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   728                              <1> .srcStorWc:
   729                              <1> ;rsi points past the char to store the WC at
   730 000027FE C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   731 00002805 800D85DFFFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   732 0000280C EB44                <1>     jmp short .checkDestDir
   733                              <1> .isSrcDir:
   734 0000280E B910000000          <1>     mov ecx, dirDirectory
   735 00002813 B8004E0000          <1>     mov eax, 4E00h
   736 00002818 CD21                <1>     int 21h
   737 0000281A 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   738                              <1>     ;Was the file we found actually a directory?
   739 0000281C 803D08D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   740 00002823 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   741 00002825 4889D7              <1>     mov rdi, rdx
   742 00002828 E83B1C0000          <1>     call strlen
   743 0000282D FFC9                <1>     dec ecx
   744 0000282F 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   745 00002832 8A05F1D7FFFF        <1>     mov al, byte [pathSep]
   746 00002838 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   747 0000283B 7401                <1>     je .srctpsp
   748 0000283D AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   749                              <1> .srctpsp:
   750 0000283E 48893D1CDFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   751 00002845 B82A2E2A00          <1>     mov eax, "*.*"
   752 0000284A AB                  <1>     stosd   ;Store the WC with terminating nul!
   753 0000284B 800D3FDFFFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   754                              <1> .checkDestDir:
   755                              <1> ;Now establish if destination is a directory or not!
   756 00002852 F60538DFFFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   757 00002859 0F855E010000        <1>     jnz .mod1
   758 0000285F 488D3579DEFFFF      <1>     lea rsi, destSpec
   759 00002866 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   760 00002868 80FC3A              <1>     cmp ah, ":"
   761 0000286B 751A                <1>     jne .isDestDir
   762 0000286D 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   763 0000286F 84C0                <1>     test al, al ;Is byte three nul?
   764 00002871 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   765 00002877 84E4                <1>     test ah, ah ;Is byte four nul?
   766 00002879 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   767 0000287B 3A05A8D7FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   768 00002881 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   769                              <1> .isDestDir:
   770                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   771 00002887 488D1551DEFFFF      <1>     lea rdx, destSpec
   772 0000288E B910000000          <1>     mov ecx, dirDirectory
   773 00002893 B8004E0000          <1>     mov eax, 4E00h
   774 00002898 CD21                <1>     int 21h
   775 0000289A 7237                <1>     jc .mod2
   776                              <1>     ;Was the file we found actually a directory?
   777 0000289C 803D88D8FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   778 000028A3 752E                <1>     jne .mod2
   779                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   780                              <1>     ;If not, we need to place one there!
   781 000028A5 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   782 000028A8 E8BB1B0000          <1>     call strlen
   783 000028AD FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   784 000028AF 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   785 000028B2 0FB60570D7FFFF      <1>     movzx eax, byte [pathSep]
   786 000028B9 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   787 000028BC 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   788 000028C2 66AB                <1>     stosw           ;Else, store the pathsep and null!
   789 000028C4 48FFCF              <1>     dec rdi         ;Point back to null
   790 000028C7 48893D9BDEFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   791 000028CE E9EA000000          <1>     jmp .mod1
   792                              <1> .mod2:
   793                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   794                              <1> ; to rename wildcard semantics. Always run through this as the destination
   795                              <1> ; name may have wildcards in it! But we don't add any.
   796 000028D3 800DB7DEFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   797 000028DA 488D35FEDDFFFF      <1>     lea rsi, destSpec
   798 000028E1 E8401D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   799 000028E6 7407                <1>     jz .m2Wc
   800 000028E8 800DA2DEFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   801                              <1> .m2Wc:
   802                              <1> ;Search for the source file
   803 000028EF 488D1567DDFFFF      <1>     lea rdx, srcSpec
   804 000028F6 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   805 000028F8 B8004E0000          <1>     mov eax, 4E00h
   806 000028FD CD21                <1>     int 21h
   807 000028FF 0F82E9010000        <1>     jc .badSrcFile
   808 00002905 488B355DDEFFFF      <1>     mov rsi, qword [destPtr]
   809 0000290C 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   810 00002910 B801290000          <1>     mov eax, 2901h
   811 00002915 CD21                <1>     int 21h
   812                              <1> .md2Lp:
   813 00002917 488D3516D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   814 0000291E 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   815 00002922 B801290000          <1>     mov eax, 2901h
   816 00002927 CD21                <1>     int 21h  
   817                              <1> ;Now depending on source and dest patterns, build a filename in renName
   818 00002929 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   819 0000292D 488D3D3DDEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   820 00002934 57                  <1>     push rdi
   821 00002935 48A5                <1>     movsq
   822 00002937 66A5                <1>     movsw
   823 00002939 A4                  <1>     movsb
   824 0000293A 5F                  <1>     pop rdi
   825 0000293B 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   826 0000293F B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   827                              <1> .md2NameMake:
   828 00002944 AC                  <1>     lodsb   ;Get the char from the source string
   829 00002945 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   830 00002948 7502                <1>     jne .noStore    ;Dont store the char there
   831 0000294A 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   832                              <1> .noStore:
   833 0000294C 48FFC7              <1>     inc rdi ;Goto next char position
   834 0000294F FFC9                <1>     dec ecx
   835 00002951 75F1                <1>     jnz .md2NameMake
   836 00002953 488D35DAD7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   837 0000295A 488B3D00DEFFFF      <1>     mov rdi, qword [srcPtr]
   838 00002961 E8E91A0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   839 00002966 488D3504DEFFFF      <1>     lea rsi, renName
   840 0000296D 488B3DF5DDFFFF      <1>     mov rdi, qword [destPtr]
   841 00002974 E8EF1B0000          <1>     call FCBToAsciiz
   842 00002979 E8D7000000          <1>     call .prntFilespec  ;Prints the source filename
   843 0000297E E8AA010000          <1>     call copyMain       ;And copy it!
   844 00002983 731D                <1>     jnc .md2Ok
   845                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   846                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   847 00002985 3CFD                <1>     cmp al, -3
   848 00002987 0F843E010000        <1>     je .badBinCdevErr
   849 0000298D 3CFE                <1>     cmp al, -2
   850 0000298F 0F843F010000        <1>     je .rootDirFull
   851 00002995 3CFF                <1>     cmp al, -1      ;Source and destination same?
   852 00002997 0F8440010000        <1>     je .badSameFile 
   853 0000299D E956010000          <1>     jmp .badExit    ;Else generic error message
   854                              <1> .md2Ok:
   855 000029A2 F605E8DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   856 000029A9 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   857 000029AF B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   858 000029B4 CD21                <1>     int 21h
   859 000029B6 727C                <1>     jc .copyDone        ;If no more files, we are done!
   860 000029B8 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   861                              <1> .mod1:
   862                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   863 000029BD 800DCDDDFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   864 000029C4 488D1592DCFFFF      <1>     lea rdx, srcSpec
   865 000029CB 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   866 000029CD B8004E0000          <1>     mov eax, 4E00h
   867 000029D2 CD21                <1>     int 21h
   868 000029D4 0F8214010000        <1>     jc .badSrcFile  ;File not found error!!
   869                              <1> .mod1Lp:
   870 000029DA 488D3553D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   871 000029E1 488B3D79DDFFFF      <1>     mov rdi, qword [srcPtr]
   872 000029E8 E8711A0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   873 000029ED 488B3D75DDFFFF      <1>     mov rdi, qword [destPtr]
   874 000029F4 E8651A0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   875 000029F9 E857000000          <1>     call .prntFilespec
   876 000029FE E82A010000          <1>     call copyMain   ;And copy it!
   877 00002A03 731D                <1>     jnc .mod1Ok
   878                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   879                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   880 00002A05 3CFD                <1>     cmp al, -3
   881 00002A07 0F84BE000000        <1>     je .badBinCdevErr
   882 00002A0D 3CFE                <1>     cmp al, -2
   883 00002A0F 0F84BF000000        <1>     je .rootDirFull
   884 00002A15 3CFF                <1>     cmp al, -1      ;Source and destination same?
   885 00002A17 0F84C0000000        <1>     je .badSameFile 
   886 00002A1D E9D6000000          <1>     jmp .badExit    ;Else generic error message
   887                              <1> .mod1Ok:
   888 00002A22 F60568DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   889 00002A29 7409                <1>     jz .copyDone
   890 00002A2B B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   891 00002A30 CD21                <1>     int 21h
   892 00002A32 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   893                              <1> 
   894                              <1> .copyDone:
   895 00002A34 E8C9000000          <1>     call .copyCleanup   ;Clean up resources!
   896 00002A39 8B054EDDFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   897 00002A3F B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   898 00002A44 E8F11B0000          <1>     call printDecimalValLB   ;n File(s) copied
   899 00002A49 488D158BDFFFFF      <1>     lea rdx, copyOk
   900 00002A50 B409                <1>     mov ah, 09h
   901 00002A52 CD21                <1>     int 21h    
   902                              <1>     return
    13                              <2> %%_ret:
    14 00002A54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   903                              <1> 
   904                              <1> .prntFilespec:
   905                              <1> ;Prints the filespec to STDOUT. If the path is 
   906 00002A55 F60535DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   907                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A5C 74(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   908 00002A5E 488D15F8DBFFFF      <1>     lea rdx, srcSpec
   909 00002A65 4889D7              <1>     mov rdi, rdx
   910 00002A68 E8FB190000          <1>     call strlen
   911 00002A6D FFC9                <1>     dec ecx     ;Drop terminating null
   912 00002A6F BB01000000          <1>     mov ebx, 1  ;STDOUT
   913 00002A74 B800400000          <1>     mov eax, 4000h  ;Write
   914 00002A79 CD21                <1>     int 21h
   915 00002A7B E8BB170000          <1>     call printCRLF
   916                              <1>     return
    13                              <2> %%_ret:
    14 00002A80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   917                              <1> .doSwitch:
   918                              <1> ;Since switches can come before or after a name, handle them here!
   919                              <1> ;If invalid switch char, returns ZF=NZ.
   920                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   921                              <1> ;       rsi -> Switchchar
   922 00002A81 56                  <1>     push rsi
   923 00002A82 48FFC6              <1>     inc rsi ;Point to char past switchchar
   924 00002A85 AC                  <1>     lodsb   ;Get this char, goto next char
   925 00002A86 5E                  <1>     pop rsi
   926                              <1> .doSwitchRev:
   927 00002A87 E8E6190000          <1>     call ucChar
   928 00002A8C 3C41                <1>     cmp al, "A"
   929 00002A8E 7510                <1>     jne .cB
   930 00002A90 081DFBDCFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   931 00002A96 8025F4DCFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   932                              <1> .cExit:
   933 00002A9D 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   934                              <1>     return
    13                              <2> %%_ret:
    14 00002A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> .cB:
   936 00002AA0 3C42                <1>     cmp al, "B"
   937 00002AA2 7511                <1>     jne .cV
   938 00002AA4 F6D3                <1>     not bl  ;Reverse bits
   939 00002AA6 201DE5DCFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   940 00002AAC 800DDEDCFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   941 00002AB3 EBE8                <1>     jmp short .cExit
   942                              <1> .cV:
   943 00002AB5 3C56                <1>     cmp al, "V"
   944                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AB7 75(9F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   945 00002AB9 F605BCDCFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   946 00002AC0 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   947                              <1>     ;Else, set it. We return it at the end!
   948 00002AC2 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   949 00002AC7 CD21                <1>     int 21h
   950 00002AC9 EBD2                <1>     jmp short .cExit
   951                              <1> 
   952                              <1> ;COPY Bad Exits!!
   953                              <1> .badBinCdevErr:
   954 00002ACB 488D15B9E1FFFF      <1>     lea rdx, binDevErr
   955 00002AD2 EB10                <1>     jmp short .badExitCmn
   956                              <1> .rootDirFull:
   957 00002AD4 488D159CDEFFFF      <1>     lea rdx, fulRootDir
   958 00002ADB EB07                <1>     jmp short .badExitCmn
   959                              <1> .badSameFile:
   960 00002ADD 488D15A9DEFFFF      <1>     lea rdx, noSelfCopy
   961                              <1> .badExitCmn:
   962 00002AE4 E8D9F4FFFF          <1>     call badCmn     ;Print error message
   963 00002AE9 E946FFFFFF          <1>     jmp .copyDone   ;Clean resources
   964                              <1> .badSrcFile:
   965 00002AEE E8BFF4FFFF          <1>     call badFnf  ;File not found!!
   966 00002AF3 E93CFFFFFF          <1>     jmp .copyDone
   967                              <1> .badExit:
   968 00002AF8 E888F4FFFF          <1>     call badParamError
   969 00002AFD E932FFFFFF          <1>     jmp .copyDone
   970                              <1> 
   971                              <1> .copyCleanup:
   972                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   973                              <1> ;Handles are never open in this process!
   974 00002B02 B8002E0000          <1>     mov eax, 2E00h
   975 00002B07 8A056FDCFFFF        <1>     mov al, byte [verifyFlg]
   976 00002B0D CD21                <1>     int 21h
   977 00002B0F 4150                <1>     push r8
   978 00002B11 4C8B056BDCFFFF      <1>     mov r8, qword [cpBufPtr]
   979 00002B18 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   980 00002B1B 7407                <1>     jz .skipFree
   981 00002B1D B800490000          <1>     mov eax, 4900h
   982 00002B22 CD21                <1>     int 21h
   983                              <1> .skipFree:
   984 00002B24 4158                <1>     pop r8
   985 00002B26 0F824B1C0000        <1>     jc freezePC ;If free fails, man....
   986                              <1>     return
    13                              <2> %%_ret:
    14 00002B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   987                              <1> 
   988                              <1> copyMain:
   989                              <1> ;This is the main copying procedure! 
   990                              <1> ;Start by checking the two files are not the same. If so, complain!
   991                              <1> ;If returns CF=CY, error code in al. 
   992                              <1> ;   If al = -1, same filename error!
   993                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   994                              <1> ;   If al = -3, attempted binary read from a device
   995                              <1> ;If returns CF=NC, file copied successfully.
   996                              <1> ;Check the two files are not the same using truename in searchspec
   997 00002B2D 488D3529DBFFFF      <1>     lea rsi, srcSpec
   998 00002B34 488D3D55D9FFFF      <1>     lea rdi, searchSpec
   999 00002B3B B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1000 00002B40 CD21                <1>     int 21h 
  1001 00002B42 57                  <1>     push rdi    ;Save this searchSpec
  1002 00002B43 488D3595DBFFFF      <1>     lea rsi, destSpec
  1003 00002B4A 488D3DC1D9FFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1004 00002B51 B800600000          <1>     mov eax, 6000h
  1005 00002B56 CD21                <1>     int 21h
  1006 00002B58 5E                  <1>     pop rsi     ;Get this ptr back
  1007 00002B59 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1008 00002B5E CD2F                <1>     int 2Fh
  1009 00002B60 750F                <1>     jnz .notSameFile
  1010 00002B62 B0FF                <1>     mov al, -1  ;Same filename error!
  1011                              <1> .badExit:
  1012 00002B64 50                  <1>     push rax
  1013 00002B65 E8B0000000          <1>     call .exitCleanup
  1014 00002B6A 58                  <1>     pop rax
  1015 00002B6B F9                  <1>     stc
  1016                              <1>     return
    13                              <2> %%_ret:
    14 00002B6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1017                              <1> .badExitNoSpace:
  1018 00002B6D B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1019 00002B6F EBF3                <1>     jmp short .badExit
  1020                              <1> .notSameFile:
  1021                              <1> ;Open source with read permission
  1022                              <1> ;Open destination with write permission
  1023 00002B71 488D15E5DAFFFF      <1>     lea rdx, srcSpec
  1024 00002B78 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1025 00002B7D CD21                <1>     int 21h
  1026 00002B7F 72E3                <1>     jc .badExit
  1027 00002B81 668905F5DBFFFF      <1>     mov word [sourceHdl], ax
  1028 00002B88 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1029                              <1> 
  1030 00002B8B B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1031 00002B90 CD21                <1>     int 21h
  1032 00002B92 668915E8DBFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1033 00002B99 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1034 00002B9C 7412                <1>     jz .prepCopy
  1035                              <1> ;Check the binary flag was not set on this source filespec
  1036 00002B9E B0FD                <1>     mov al, -3  ;Prep the error code
  1037 00002BA0 F605EADBFFFF02      <1>     test byte [bCpFlg], binSrc
  1038 00002BA7 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1039 00002BA9 800DE1DBFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1040                              <1> .prepCopy:
  1041 00002BB0 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1042 00002BB2 488B15CADBFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1043                              <1> .copyLoop:
  1044                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1045                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1046                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1047                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1048 00002BB9 0FB70DCBDBFFFF      <1>     movzx ecx, word [wCpBufSz]
  1049 00002BC0 0FB71DB6DBFFFF      <1>     movzx ebx, word [sourceHdl]
  1050 00002BC7 B8003F0000          <1>     mov eax, 3F00h ;Read
  1051 00002BCC CD21                <1>     int 21h
  1052 00002BCE 7294                <1>     jc .badExit
  1053 00002BD0 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1054 00002BD2 F605B8DBFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1055 00002BD9 7413                <1>     jz .notAscii
  1056                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1057 00002BDB 50                  <1>     push rax        ;Save the original char count
  1058 00002BDC 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1059 00002BDF B01A                <1>     mov al, EOF
  1060 00002BE1 F2AE                <1>     repne scasb     ;Loop thru now!
  1061 00002BE3 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1062 00002BE5 59                  <1>     pop rcx         ;Get the original read count into ecx
  1063 00002BE6 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1064                              <1> ;Here if EOF found.
  1065 00002BE8 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1066 00002BEA 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1067 00002BEC FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1068                              <1> .notAscii:
  1069 00002BEE 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1070 00002BF0 7428                <1>     jz .exitCleanup
  1071 00002BF2 51                  <1>     push rcx    ;Save the number of bytes to write
  1072 00002BF3 52                  <1>     push rdx    ;Save the buffer ptr
  1073 00002BF4 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1074 00002BF9 5A                  <1>     pop rdx
  1075 00002BFA 59                  <1>     pop rcx
  1076 00002BFB 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1077 00002C01 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1078 00002C06 CD21                <1>     int 21h
  1079 00002C08 0F8256FFFFFF        <1>     jc .badExit
  1080 00002C0E 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1081 00002C10 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1082 00002C16 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1083 00002C18 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1084                              <1> .exitCleanup:
  1085                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1086 00002C1A F60570DBFFFF04      <1>     test byte [bCpFlg], ascDes
  1087 00002C21 7425                <1>     jz .ecNoEOF
  1088 00002C23 0FBF1D55DBFFFF      <1>     movsx ebx, word [destHdl]
  1089 00002C2A 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1090 00002C30 7416                <1>     je .ecNoEOF
  1091 00002C32 488B154ADBFFFF      <1>     mov rdx, qword [cpBufPtr]
  1092 00002C39 C6021A              <1>     mov byte [rdx], EOF
  1093 00002C3C B901000000          <1>     mov ecx, 1
  1094 00002C41 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1095 00002C46 CD21                <1>     int 21h
  1096                              <1> .ecNoEOF:
  1097                              <1> ;Now close copy handles!
  1098 00002C48 668B1D2EDBFFFF      <1>     mov bx, word [sourceHdl]
  1099 00002C4F 6681FBFFFF          <1>     cmp bx, -1
  1100 00002C54 7410                <1>     je .beSkipSource
  1101 00002C56 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1102 00002C5B CD21                <1>     int 21h
  1103 00002C5D 66C70517DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1104                              <1> .beSkipSource:
  1105 00002C66 668B1D12DBFFFF      <1>     mov bx, word [destHdl]
  1106 00002C6D 6681FBFFFF          <1>     cmp bx, -1
  1107                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002C72 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002C74 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108 00002C75 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1109 00002C7A CD21                <1>     int 21h
  1110 00002C7C 66C705FADAFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1111                              <1>     return
    13                              <2> %%_ret:
    14 00002C85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> .getWriteHandle:
  1114                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1115                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1116                              <1> ;Input: Nothing
  1117                              <1> ;Output: CF=NC: bx = Handle to the file
  1118                              <1> ;        CF=CY: File failed to open/create. 
  1119 00002C86 0FB71DF2DAFFFF      <1>     movzx ebx, word [destHdl]
  1120 00002C8D 6681FBFFFF          <1>     cmp bx, -1
  1121 00002C92 7402                <1>     je .gwHProceed
  1122 00002C94 F8                  <1>     clc     ;Clear the CF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00002C95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> .gwHProceed:
  1125                              <1> ;Here if the destination has not been opened yet!
  1126 00002C96 488D1542DAFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1127                              <1> ;Now we create/reopen the file here!
  1128 00002C9D F605EDDAFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1129 00002CA4 743E                <1>     jz .createFile
  1130                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1131                              <1> ;If this is more than file 0, we open
  1132 00002CA6 813DDDDAFFFF000000- <1>     cmp dword [dCpCnt], 0
  1132 00002CAF 00                  <1>
  1133 00002CB0 7432                <1>     je .createFile
  1134                              <1>     ;Now we open the file instead and append to the end
  1135 00002CB2 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1136 00002CB7 CD21                <1>     int 21h
  1137                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CB9 72(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1138 00002CBB FF05CCDAFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1139 00002CC1 668905B7DAFFFF      <1>     mov word [destHdl], ax
  1140 00002CC8 0FB7D8              <1>     movzx ebx, ax
  1141 00002CCB 31C9                <1>     xor ecx, ecx
  1142 00002CCD 31D2                <1>     xor edx, edx
  1143 00002CCF F605BBDAFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1144 00002CD6 7404                <1>     jz .gwHNoAscii
  1145 00002CD8 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1146 00002CDA FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1147                              <1> .gwHNoAscii:
  1148 00002CDC B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1149 00002CE1 CD21                <1>     int 21h
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00002CE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .createFile:
  1152 00002CE4 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1153 00002CE9 31C9                <1>     xor ecx, ecx    ;No file attributes
  1154 00002CEB CD21                <1>     int 21h
  1155                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002CED 72(E3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1156 00002CEF FF0598DAFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1157 00002CF5 66890583DAFFFF      <1>     mov word [destHdl], ax
  1158 00002CFC 0FB7D8              <1>     movzx ebx, ax
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00002CFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> 
  1161                              <1> erase:
  1162 00002D00 F6059DD3FFFFFF      <1>     test byte [arg1Flg], -1
  1163 00002D07 0F848AF2FFFF        <1>     jz badArgError
  1164 00002D0D E8801A0000          <1>     call setDTA     ;Start by resetting the DTA
  1165 00002D12 E8EA180000          <1>     call buildCommandPath   ;Get the relative path to the file
  1166                              <1> .dirLp:
  1167 00002D17 488D3D72D7FFFF      <1>     lea rdi, searchSpec
  1168 00002D1E E821180000          <1>     call findLastPathComponant
  1169 00002D23 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1170 00002D26 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1171 00002D2A B03F                <1>     mov al, "?"
  1172                              <1>     ;Store question marks in the name field
  1173 00002D2C 57                  <1>     push rdi
  1174 00002D2D 48FFC7              <1>     inc rdi ;Goto the first char
  1175 00002D30 B90B000000          <1>     mov ecx, 11
  1176 00002D35 F3AA                <1>     rep stosb
  1177 00002D37 5F                  <1>     pop rdi
  1178 00002D38 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1179 00002D3B B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1180 00002D40 CD21                <1>     int 21h
  1181 00002D42 3C01                <1>     cmp al, 1
  1182 00002D44 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1183                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1184                              <1>     ;No dirs to handle in here
  1185 00002D4A 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1186 00002D4E 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1187 00002D51 E812180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1188                              <1>     ;Count the number of ?'s, if 11, we print the message
  1189 00002D56 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1190 00002D5A 31C9                <1>     xor ecx, ecx
  1191                              <1> .wcScan:
  1192 00002D5C AC                  <1>     lodsb
  1193 00002D5D 3C3F                <1>     cmp al, "?"
  1194 00002D5F 7534                <1>     jne .endCount
  1195 00002D61 FFC1                <1>     inc ecx
  1196 00002D63 81F90B000000        <1>     cmp ecx, 11
  1197 00002D69 75F1                <1>     jne .wcScan
  1198                              <1> .ynmsg:
  1199 00002D6B 488D15ABDDFFFF      <1>     lea rdx, ynMes
  1200 00002D72 E8CB140000          <1>     call printString
  1201 00002D77 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1202 00002D79 CD21                <1>     int 21h ;Get char in al
  1203 00002D7B E8F2160000          <1>     call ucChar ;Uppercase the char
  1204 00002D80 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1205 00002D82 740C                <1>     je .endCount1
  1206 00002D84 3C4E                <1>     cmp al, "N"
  1207                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D86 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D88 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1208 00002D89 E8AD140000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1209 00002D8E EBDB                <1>     jmp short .ynmsg    
  1210                              <1> .endCount1:
  1211 00002D90 E8A6140000          <1>     call printCRLF
  1212                              <1> .endCount:
  1213                              <1>     ;Now we copy our search template pathstring to delPath
  1214 00002D95 488D3DC1D8FFFF      <1>     lea rdi, delPath
  1215 00002D9C 488D35EDD6FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1216 00002DA3 E8B6160000          <1>     call strcpy2         ;Copy the string over to delPath
  1217                              <1> .findFile:
  1218                              <1>     ;Now we find first/find next our way through the files
  1219 00002DA8 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1220 00002DAB 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1221 00002DAD B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1222 00002DB2 CD21                <1>     int 21h
  1223 00002DB4 0F82F8F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1224                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1225 00002DBA E885170000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1226 00002DBF 488D356ED3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1227                              <1> .delNextFile:
  1228                              <1> ;rsi and rdi dont move here
  1229 00002DC6 E893160000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1230 00002DCB 488D158BD8FFFF      <1>     lea rdx, delPath
  1231 00002DD2 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1232 00002DD7 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1233 00002DD9 488D15B0D6FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1234 00002DE0 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1235 00002DE5 CD21                <1>     int 21h
  1236 00002DE7 73DD                <1>     jnc .delNextFile    
  1237 00002DE9 F8                  <1>     clc ;Clear carry to indicate success
  1238                              <1>     return
    13                              <2> %%_ret:
    14 00002DEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1239                              <1> .noWildcard:
  1240                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1241                              <1>     ; a \*.*<NUL> over the null terminator
  1242 00002DEB 488D159ED6FFFF      <1>     lea rdx, searchSpec
  1243 00002DF2 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1244 00002DF7 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1245 00002DFC CD21                <1>     int 21h
  1246 00002DFE 0F82AEF1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1247 00002E04 F60520D3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1248 00002E0B 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1249                              <1>     ;Else, we are dealing with a dir
  1250 00002E0D 4889D7              <1>     mov rdi, rdx
  1251 00002E10 31C9                <1>     xor ecx, ecx
  1252 00002E12 FFC9                <1>     dec ecx
  1253 00002E14 F2AE                <1>     repne scasb ;Go to the end of the line!
  1254 00002E16 48FFCF              <1>     dec rdi
  1255 00002E19 0FB60509D2FFFF      <1>     movzx eax, byte [pathSep]
  1256 00002E20 AA                  <1>     stosb
  1257 00002E21 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1258 00002E26 AB                  <1>     stosd
  1259 00002E27 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1260                              <1> .delMain:   ;Call with rdx -> buffer!
  1261 00002E2C B800410000          <1>     mov eax, 4100h  ;Delete File 
  1262 00002E31 CD21                <1>     int 21h
  1263                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002E33 73(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1264 00002E35 3C05                <1>     cmp al, errAccDen
  1265 00002E37 0F843FF1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1266 00002E3D E95EF1FFFF          <1>     jmp badFileError
  1267                              <1>     return
    13                              <2> %%_ret:
    14 00002E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1268                              <1> 
  1269                              <1> date:
  1270 00002E43 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1271 00002E4A E83E160000          <1>     call skipDelimiters
  1272 00002E4F 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1273 00002E52 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1274                              <1> .init:
  1275                              <1>     ;Else, we do interactive mode!
  1276 00002E54 488D1545DCFFFF      <1>     lea rdx, curDate
  1277 00002E5B B409                <1>     mov ah, 09h
  1278 00002E5D CD21                <1>     int 21h
  1279 00002E5F E81F150000          <1>     call printFmtDate
  1280                              <1> .noCur:
  1281 00002E64 488D1546DCFFFF      <1>     lea rdx, newDate
  1282 00002E6B B409                <1>     mov ah, 09h
  1283 00002E6D CD21                <1>     int 21h
  1284 00002E6F 488D155ADCFFFF      <1>     lea rdx, ukDate
  1285 00002E76 488D0546DCFFFF      <1>     lea rax, usDate
  1286 00002E7D 488D1D59DCFFFF      <1>     lea rbx, jpDate
  1287 00002E84 803DA0D1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1288 00002E8B 480F47D3            <1>     cmova rdx, rbx
  1289 00002E8F 480F42D0            <1>     cmovb rdx, rax
  1290 00002E93 B409                <1>     mov ah, 09h
  1291 00002E95 CD21                <1>     int 21h
  1292                              <1> 
  1293 00002E97 488D1545D3FFFF      <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1294 00002E9E C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1295 00002EA1 B40A                <1>     mov ah, 0Ah
  1296 00002EA3 CD21                <1>     int 21h
  1297 00002EA5 52                  <1>     push rdx
  1298 00002EA6 E890130000          <1>     call printCRLF
  1299 00002EAB 5A                  <1>     pop rdx
  1300 00002EAC 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1301                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002EB0 74(42)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1302                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1303 00002EB2 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1304                              <1> .goDate:
  1305 00002EB6 31C0                <1>     xor eax, eax    
  1306 00002EB8 803D6CD1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1307 00002EBF 727B                <1>     jb .us
  1308 00002EC1 0F87B7000000        <1>     ja .jpn
  1309                              <1>     ;Here for UK style dates
  1310 00002EC7 E86E180000          <1>     call getByte
  1311 00002ECC 725D                <1>     jc .badDate
  1312 00002ECE 880587D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1313 00002ED4 E80C010000          <1>     call .validSep
  1314 00002ED9 7550                <1>     jne .badDate
  1315 00002EDB E85A180000          <1>     call getByte
  1316 00002EE0 7249                <1>     jc .badDate
  1317 00002EE2 880574D7FFFF        <1>     mov byte [td4], al  ;Store month
  1318 00002EE8 E8F8000000          <1>     call .validSep
  1319 00002EED 753C                <1>     jne .badDate
  1320 00002EEF E852180000          <1>     call getNum
  1321 00002EF4 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1322 00002EF9 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1323 00002EFE 732B                <1>     jae .badDate
  1324 00002F00 66890552D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1325                              <1> .writeDate:
  1326 00002F07 E881150000          <1>     call skipDelimiters
  1327 00002F0C 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1328 00002F0F 751A                <1>     jne .badDate
  1329 00002F11 0FB70D41D7FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1330 00002F18 668B153CD7FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1331 00002F1F B8002B0000          <1>     mov eax, 2B00h
  1332 00002F24 CD21                <1>     int 21h
  1333 00002F26 84C0                <1>     test al, al
  1334                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002F28 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002F2A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1335                              <1> .badDate:
  1336 00002F2B 488D155FDBFFFF      <1>     lea rdx, badDate
  1337 00002F32 E80B130000          <1>     call printString
  1338 00002F37 E928FFFFFF          <1>     jmp date.noCur
  1339                              <1> .us:
  1340 00002F3C E8F9170000          <1>     call getByte
  1341 00002F41 72E8                <1>     jc .badDate
  1342 00002F43 880513D7FFFF        <1>     mov byte [td4], al  ;Store the month
  1343 00002F49 E897000000          <1>     call .validSep
  1344 00002F4E 75DB                <1>     jne .badDate
  1345 00002F50 E8E5170000          <1>     call getByte
  1346 00002F55 72D4                <1>     jc .badDate
  1347 00002F57 8805FED6FFFF        <1>     mov byte [td3], al  ;Store day
  1348 00002F5D E883000000          <1>     call .validSep
  1349 00002F62 75C7                <1>     jne .badDate
  1350 00002F64 E8DD170000          <1>     call getNum
  1351 00002F69 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1352 00002F6E 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1353 00002F73 73B6                <1>     jae .badDate
  1354 00002F75 668905DDD6FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1355                              <1> .writeHop:
  1356 00002F7C EB89                <1>     jmp short .writeDate
  1357                              <1> .jpn:
  1358 00002F7E E8C3170000          <1>     call getNum
  1359 00002F83 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1360 00002F88 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1361 00002F8D 739C                <1>     jae .badDate
  1362 00002F8F 668905C3D6FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1363 00002F96 E84A000000          <1>     call .validSep
  1364 00002F9B 758E                <1>     jne .badDate
  1365 00002F9D E898170000          <1>     call getByte
  1366 00002FA2 7287                <1>     jc .badDate
  1367 00002FA4 8805B1D6FFFF        <1>     mov byte [td3], al  ;Store the day
  1368 00002FAA E836000000          <1>     call .validSep
  1369 00002FAF 0F8576FFFFFF        <1>     jne .badDate
  1370 00002FB5 E880170000          <1>     call getByte
  1371 00002FBA 0F826BFFFFFF        <1>     jc .badDate
  1372 00002FC0 880596D6FFFF        <1>     mov byte [td4], al  ;Store month
  1373 00002FC6 EBB4                <1>     jmp short .writeHop
  1374                              <1> .doYear:
  1375 00002FC8 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1376                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002FCD 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002FCF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1377                              <1> ;If the user specifies 80-99 it means 1980-1999
  1378                              <1> ;If the user specifies 00-79 it means 2000-2079
  1379 00002FD0 BBD0070000          <1>     mov ebx, 2000
  1380 00002FD5 B96C070000          <1>     mov ecx, 1900
  1381 00002FDA 3D50000000          <1>     cmp eax, 80     
  1382 00002FDF 0F42CB              <1>     cmovb ecx, ebx
  1383 00002FE2 01C8                <1>     add eax, ecx
  1384                              <1>     return
    13                              <2> %%_ret:
    14 00002FE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> .validSep:
  1386 00002FE5 AC                  <1>     lodsb           ;Get the char and return
  1387 00002FE6 3C2E                <1>     cmp al, "."
  1388                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FE8 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1389 00002FEA 3C2F                <1>     cmp al, "/"
  1390                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FEC 74(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1391 00002FEE 3C2D                <1>     cmp al, "-"
  1392                              <1>     return
    13                              <2> %%_ret:
    14 00002FF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> 
  1394                              <1> time:
  1395 00002FF1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1396 00002FF8 E890140000          <1>     call skipDelimiters
  1397 00002FFD 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1398 00003000 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1399                              <1> .init:
  1400 00003002 488D15F0DAFFFF      <1>     lea rdx, curTime
  1401 00003009 B409                <1>     mov ah, 09h
  1402 0000300B CD21                <1>     int 21h
  1403 0000300D E808130000          <1>     call printFmtTime
  1404                              <1> .noCur:
  1405 00003012 488D15F1DAFFFF      <1>     lea rdx, newTime
  1406 00003019 B409                <1>     mov ah, 09h
  1407 0000301B CD21                <1>     int 21h
  1408                              <1> 
  1409 0000301D 488D15BFD1FFFF      <1>     lea rdx, cpyBuffer  ;Make sure to use cpyBuffer to preserve F3
  1410 00003024 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1411 00003027 B40A                <1>     mov ah, 0Ah
  1412 00003029 CD21                <1>     int 21h
  1413 0000302B 52                  <1>     push rdx
  1414 0000302C 488D1551D8FFFF      <1>     lea rdx, crlf
  1415 00003033 B409                <1>     mov ah, 09h
  1416 00003035 CD21                <1>     int 21h
  1417 00003037 5A                  <1>     pop rdx
  1418 00003038 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1419                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000303C 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1420 0000303E 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1421                              <1> .goTime:
  1422 00003042 C7050DD6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1422 0000304B 00                  <1>
  1423 0000304C 31C0                <1>     xor eax, eax   
  1424 0000304E E8E7160000          <1>     call getByte
  1425 00003053 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1426 00003059 8805FBD5FFFF        <1>     mov byte [td2], al  ;Save hours
  1427 0000305F E89A000000          <1>     call .validsep
  1428 00003064 0F8583000000        <1>     jne .badTime
  1429 0000306A E8CB160000          <1>     call getByte
  1430 0000306F 727C                <1>     jc .badTime
  1431 00003071 8805E2D5FFFF        <1>     mov byte [td1], al  ;Save minutes
  1432 00003077 E882000000          <1>     call .validsep
  1433 0000307C 740F                <1>     je .goSec
  1434 0000307E 48FFCE              <1>     dec rsi ;Go back a char
  1435 00003081 E807140000          <1>     call skipDelimiters ;Skip any delimiters
  1436 00003086 803E0D              <1>     cmp byte [rsi], CR
  1437 00003089 743E                <1>     je .setTime
  1438 0000308B EB60                <1>     jmp short .badTime
  1439                              <1> .goSec:
  1440 0000308D E878000000          <1>     call .checkNum
  1441 00003092 7259                <1>     jc .badTime
  1442 00003094 E8A1160000          <1>     call getByte
  1443 00003099 7252                <1>     jc .badTime
  1444 0000309B 8805BBD5FFFF        <1>     mov byte [td4], al  ;Save seconds
  1445 000030A1 AC                  <1>     lodsb       ;Move rsi forwards
  1446 000030A2 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1447 000030A4 740F                <1>     je .goMsec
  1448 000030A6 48FFCE              <1>     dec rsi ;Go back a char
  1449 000030A9 E8DF130000          <1>     call skipDelimiters ;Skip any delimiters
  1450 000030AE 803E0D              <1>     cmp byte [rsi], CR
  1451 000030B1 7416                <1>     je .setTime
  1452 000030B3 EB38                <1>     jmp short .badTime
  1453                              <1> .goMsec:
  1454 000030B5 E850000000          <1>     call .checkNum
  1455 000030BA 7231                <1>     jc .badTime
  1456 000030BC E879160000          <1>     call getByte
  1457 000030C1 722A                <1>     jc .badTime
  1458 000030C3 880592D5FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1459                              <1> .setTime:
  1460 000030C9 E8BF130000          <1>     call skipDelimiters
  1461 000030CE 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1462 000030D1 751A                <1>     jne .badTime
  1463 000030D3 0FB70D7FD5FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1464 000030DA 0FB7157AD5FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1465 000030E1 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1466 000030E6 CD21                <1>     int 21h
  1467 000030E8 A8FF                <1>     test al, -1
  1468                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000030EA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000030EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1469                              <1> .badTime:
  1470 000030ED 488D15F6D9FFFF      <1>     lea rdx, badTime
  1471 000030F4 E849110000          <1>     call printString
  1472 000030F9 E914FFFFFF          <1>     jmp time.noCur
  1473                              <1> .validsep:
  1474 000030FE AC                  <1>     lodsb
  1475 000030FF 3A0533CFFFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1476                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003105 74(EC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1477 00003107 3C2E                <1>     cmp al, "."
  1478                              <1>     return
    13                              <2> %%_ret:
    14 00003109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> .checkNum:
  1480 0000310A AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1481 0000310B 48FFCE              <1>     dec rsi
  1482 0000310E 3C30                <1>     cmp al, "0"
  1483 00003110 7206                <1>     jb .cnbad
  1484 00003112 3C39                <1>     cmp al, "9"
  1485 00003114 7702                <1>     ja .cnbad
  1486 00003116 F8                  <1>     clc
  1487                              <1>     return
    13                              <2> %%_ret:
    14 00003117 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1488                              <1> .cnbad:
  1489 00003118 F9                  <1>     stc
  1490                              <1>     return
    13                              <2> %%_ret:
    14 00003119 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1491                              <1> ctty:
  1492 0000311A F60583CFFFFFFF      <1>     test byte [arg1Flg], -1
  1493 00003121 0F8470EEFFFF        <1>     jz badArgError
  1494 00003127 F60579CFFFFFFF      <1>     test byte [arg2Flg], -1
  1495 0000312E 0F8563EEFFFF        <1>     jnz badArgError
  1496 00003134 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1497 0000313B 0FB60563CFFFFF      <1>     movzx eax, byte [arg1Off]
  1498 00003142 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1499 00003145 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1500 00003149 750F                <1>     jne .noDrive
  1501 0000314B 0FB60554CFFFFF      <1>     movzx eax, byte [arg1FCBret]
  1502 00003152 3CFF                <1>     cmp al, -1
  1503 00003154 0F8434EEFFFF        <1>     je badDriveError
  1504                              <1> .noDrive:
  1505                              <1>     ;Now we open the provided file
  1506 0000315A E8BA140000          <1>     call copyArgumentToSearchSpec
  1507 0000315F 488D152AD3FFFF      <1>     lea rdx, searchSpec
  1508                              <1> .loadSwap:
  1509 00003166 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1510 0000316B CD21                <1>     int 21h
  1511 0000316D 0F822DEEFFFF        <1>     jc badFileError
  1512 00003173 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1513 00003176 B800440000          <1>     mov eax, 4400h  ;Get device word
  1514 0000317B CD21                <1>     int 21h
  1515 0000317D F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1516 00003180 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1517                              <1>     ;Now we set this handle to be STDIO
  1518 00003182 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1519 00003185 30F6                <1>     xor dh, dh
  1520 00003187 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1521 0000318C CD21                <1>     int 21h
  1522                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1523 0000318E 31C9                <1>     xor ecx, ecx    ;STDIN
  1524 00003190 B800460000          <1>     mov eax, 4600h
  1525 00003195 CD21                <1>     int 21h
  1526 00003197 FFC1                <1>     inc ecx         ;STDOUT
  1527 00003199 B800460000          <1>     mov eax, 4600h
  1528 0000319E CD21                <1>     int 21h
  1529 000031A0 FFC1                <1>     inc ecx         ;STDERR
  1530 000031A2 B800460000          <1>     mov eax, 4600h
  1531 000031A7 CD21                <1>     int 21h
  1532 000031A9 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1533 000031AE CD21                <1>     int 21h
  1534                              <1>     return
    13                              <2> %%_ret:
    14 000031B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1535                              <1> .badCharDev:
  1536 000031B1 488D1563DAFFFF      <1>     lea rdx, badDev
  1537 000031B8 B409                <1>     mov ah, 09h
  1538 000031BA CD21                <1>     int 21h
  1539 000031BC B43E                <1>     mov ah, 3Eh ;Close opened handle
  1540 000031BE CD21                <1>     int 21h
  1541                              <1>     return
    13                              <2> %%_ret:
    14 000031C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1542                              <1> 
  1543                              <1> cls:  
  1544 000031C1 B800440000          <1>     mov eax, 4400h  ;Get device info
  1545 000031C6 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1546 000031CB CD21                <1>     int 21h         ;in dx
  1547 000031CD F7C280000000        <1>     test edx, devCharDev
  1548 000031D3 7429                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1549 000031D5 F7C210000000        <1>     test edx, charDevFastOut
  1550 000031DB 7421                <1>     jz .doAnsi
  1551                              <1>     ;Test if Int 29h uses Int 30h
  1552                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1553                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1554 000031DD B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1555 000031E2 CD21                <1>     int 21h
  1556 000031E4 B900040000          <1>     mov ecx, 1024   ;Check in a 1024 byte window for a Int 30h call
  1557                              <1> .biosCheck:
  1558 000031E9 66813BCD30          <1>     cmp word [rbx], 30CDh
  1559 000031EE 7426                <1>     je .biosConfirmed
  1560 000031F0 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1561 000031F5 7407                <1>     je .doAnsi      ;If we hit an IRETQ, assume not BIOS
  1562 000031F7 48FFC3              <1>     inc rbx         ;Else, go to next byte for checking
  1563 000031FA FFC9                <1>     dec ecx
  1564 000031FC 75EB                <1>     jnz .biosCheck
  1565                              <1> .doAnsi:
  1566                              <1> ;4 chars in the ansi routine
  1567                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1568                              <1> ; understand ANSI codes
  1569 000031FE 488D359DDCFFFF      <1>     lea rsi, ansiCls
  1570 00003205 B904000000          <1>     mov ecx, 4
  1571 0000320A B406                <1>     mov ah, 06h ;Raw char output
  1572                              <1> .ansiLp:
  1573 0000320C AC                  <1>     lodsb   ;Get the char in 
  1574 0000320D 88C2                <1>     mov dl, al
  1575 0000320F CD21                <1>     int 21h
  1576 00003211 FFC9                <1>     dec ecx
  1577 00003213 75F7                <1>     jnz .ansiLp
  1578                              <1>     return
    13                              <2> %%_ret:
    14 00003215 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1579                              <1> .biosConfirmed:
  1580                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1581 00003216 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1582 00003218 31DB                <1>     xor ebx, ebx
  1583 0000321A CD30                <1>     int 30h
  1584 0000321C B40F                <1>     mov ah, 0Fh ;Get screen mode
  1585 0000321E CD30                <1>     int 30h
  1586 00003220 53                  <1>     push rbx
  1587 00003221 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1588 00003224 FECA                <1>     dec dl
  1589 00003226 B619                <1>     mov dh, 25  ;Number of rows is standard
  1590 00003228 31C0                <1>     xor eax, eax
  1591 0000322A 89C1                <1>     mov ecx, eax
  1592 0000322C B707                <1>     mov bh, 7   ;Screen attributes
  1593 0000322E B406                <1>     mov ah, 6   ;Scroll
  1594 00003230 CD30                <1>     int 30h
  1595 00003232 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1596 00003234 5B                  <1>     pop rbx
  1597 00003235 B402                <1>     mov ah, 2
  1598 00003237 CD30                <1>     int 30h
  1599                              <1>     return
    13                              <2> %%_ret:
    14 00003239 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1600                              <1> 
  1601                              <1> break:
  1602 0000323A F60563CEFFFFFF      <1>     test byte [arg1Flg], -1
  1603 00003241 752D                <1>     jnz .argumentProvided
  1604                              <1>     ;Here we just get the status of break
  1605 00003243 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1606 00003248 CD21                <1>     int 21h
  1607 0000324A 88D3                <1>     mov bl, dl
  1608 0000324C 488D156ADAFFFF      <1>     lea rdx, breakIs
  1609 00003253 B409                <1>     mov ah, 09h
  1610 00003255 CD21                <1>     int 21h
  1611 00003257 488D155ADAFFFF      <1>     lea rdx, onMes
  1612 0000325E 488D0D4DDAFFFF      <1>     lea rcx, offMes
  1613 00003265 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1614 00003267 480F44D1            <1>     cmovz rdx, rcx
  1615 0000326B B409                <1>     mov ah, 09h
  1616 0000326D CD21                <1>     int 21h
  1617                              <1>     return
    13                              <2> %%_ret:
    14 0000326F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1618                              <1> .argumentProvided:
  1619 00003270 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1620 00003274 AD                  <1>     lodsd   ;Read the word
  1621 00003275 89C3                <1>     mov ebx, eax
  1622 00003277 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1623 0000327C C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1624 0000327F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1625 00003284 7416                <1>     je .maybeOn
  1626 00003286 663D4F46            <1>     cmp ax, "OF"
  1627 0000328A 7523                <1>     jne .badOnOff
  1628 0000328C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1629 00003291 6681FB4620          <1>     cmp bx, "F "
  1630 00003296 7517                <1>     jne .badOnOff
  1631                              <1>     ;Set off
  1632 00003298 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1633 0000329A EB0B                <1>     jmp short .setBreak
  1634                              <1> .maybeOn:
  1635 0000329C 663D4F4E            <1>     cmp ax, "ON"
  1636 000032A0 750D                <1>     jne .badOnOff
  1637                              <1>     ;Set on
  1638 000032A2 BA01000000          <1>     mov edx, 1
  1639                              <1> .setBreak:
  1640 000032A7 B801330000          <1>     mov eax, 3301h  ;Set break
  1641 000032AC CD21                <1>     int 21h
  1642                              <1>     return
    13                              <2> %%_ret:
    14 000032AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1643                              <1> .badOnOff:
  1644 000032AF 488D15FCDBFFFF      <1>     lea rdx, badOnOff
  1645 000032B6 B409                <1>     mov ah, 09h
  1646 000032B8 CD21                <1>     int 21h
  1647                              <1>     return
    13                              <2> %%_ret:
    14 000032BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1648                              <1> 
  1649                              <1> verify:
  1650 000032BB F605E2CDFFFFFF      <1>     test byte [arg1Flg], -1
  1651 000032C2 752D                <1>     jnz .argumentProvided
  1652                              <1>     ;Here we just get the status of break
  1653 000032C4 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1654 000032C9 CD21                <1>     int 21h
  1655 000032CB 88C3                <1>     mov bl, al
  1656 000032CD 488D15F3D9FFFF      <1>     lea rdx, verifyIs
  1657 000032D4 B409                <1>     mov ah, 09h
  1658 000032D6 CD21                <1>     int 21h
  1659 000032D8 488D15D9D9FFFF      <1>     lea rdx, onMes
  1660 000032DF 488D0DCCD9FFFF      <1>     lea rcx, offMes
  1661 000032E6 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1662 000032E8 480F44D1            <1>     cmovz rdx, rcx
  1663 000032EC B409                <1>     mov ah, 09h
  1664 000032EE CD21                <1>     int 21h
  1665                              <1>     return
    13                              <2> %%_ret:
    14 000032F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1666                              <1> .argumentProvided:
  1667 000032F1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1668 000032F5 AD                  <1>     lodsd   ;Read the word
  1669 000032F6 89C3                <1>     mov ebx, eax
  1670 000032F8 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1671 000032FD C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1672 00003300 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1673 00003305 7416                <1>     je .maybeOn
  1674 00003307 663D4F46            <1>     cmp ax, "OF"
  1675 0000330B 751F                <1>     jne .badOnOff
  1676 0000330D 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1677 00003312 6681FB4620          <1>     cmp bx, "F "
  1678 00003317 7513                <1>     jne .badOnOff
  1679                              <1>     ;Set off
  1680 00003319 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1681 0000331B EB0A                <1>     jmp short .setVerify
  1682                              <1> .maybeOn:
  1683 0000331D 663D4F4E            <1>     cmp ax, "ON"
  1684 00003321 7509                <1>     jne .badOnOff
  1685                              <1>     ;Set on
  1686 00003323 31C0                <1>     xor eax, eax
  1687 00003325 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1688                              <1> .setVerify:
  1689 00003327 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1690 00003329 CD21                <1>     int 21h
  1691                              <1>     return
    13                              <2> %%_ret:
    14 0000332B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1692                              <1> .badOnOff:
  1693 0000332C 488D157FDBFFFF      <1>     lea rdx, badOnOff
  1694 00003333 B409                <1>     mov ah, 09h
  1695 00003335 CD21                <1>     int 21h
  1696                              <1>     return
    13                              <2> %%_ret:
    14 00003337 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> rename:
  1699 00003338 F60565CDFFFFFF      <1>     test byte [arg1Flg], -1
  1700 0000333F 0F8452ECFFFF        <1>     jz badArgError
  1701 00003345 F6055BCDFFFFFF      <1>     test byte [arg2Flg], -1
  1702 0000334C 0F8445ECFFFF        <1>     jz badArgError    
  1703                              <1>     ;Initialise the variables!
  1704 00003352 488D3504D3FFFF      <1>     lea rsi, srcSpec
  1705 00003359 48893501D4FFFF      <1>     mov qword [srcPtr], rsi
  1706 00003360 488D3578D3FFFF      <1>     lea rsi, destSpec
  1707 00003367 488935FBD3FFFF      <1>     mov qword [destPtr], rsi
  1708                              <1>     ;Check the second path is just a filename!
  1709 0000336E 0FB60533CDFFFF      <1>     movzx eax, byte [arg2Off]
  1710 00003375 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1711 0000337C 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1712 0000337F 488D3D0AD1FFFF      <1>     lea rdi, searchSpec
  1713 00003386 57                  <1>     push rdi
  1714 00003387 E832120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1715 0000338C 5F                  <1>     pop rdi
  1716 0000338D 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1717 00003391 0F8400ECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1718                              <1> ;Check if a drive specifier has been given
  1719 00003397 0FB60507CDFFFF      <1>     movzx eax, byte [arg1Off]
  1720 0000339E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1721 000033A5 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1722 000033A8 66AD                <1>     lodsw   ;Get the first two chars
  1723 000033AA 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1724 000033AD 752A                <1>     jne .curDrvSrc
  1725                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1726 000033AF 488B35ABD3FFFF      <1>     mov rsi, qword [srcPtr]
  1727 000033B6 668906              <1>     mov word [rsi], ax
  1728 000033B9 4881059DD3FFFF0200- <1>     add qword [srcPtr], 2   
  1728 000033C2 0000                <1>
  1729 000033C4 488B359ED3FFFF      <1>     mov rsi, qword [destPtr]
  1730 000033CB 668906              <1>     mov word [rsi], ax
  1731 000033CE 48810590D3FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1731 000033D7 0000                <1>
  1732                              <1> .curDrvSrc:
  1733 000033D9 4889FE              <1>     mov rsi, rdi
  1734                              <1> .destScan:
  1735 000033DC AC                  <1>     lodsb   ;Get the char
  1736 000033DD 3A0546CCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1737 000033E3 0F84AEEBFFFF        <1>     je badArgError
  1738 000033E9 84C0                <1>     test al, al
  1739 000033EB 75EF                <1>     jnz .destScan
  1740                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1741 000033ED 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1742 000033F1 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1742 000033FA 3F                  <1>
  1743 000033FB B903000000          <1>     mov ecx, 3  ;24 bytes
  1744 00003400 F348AB              <1>     rep stosq
  1745 00003403 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1746 00003404 488D3585D0FFFF      <1>     lea rsi, searchSpec
  1747 0000340B 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1748 0000340F B80D290000          <1>     mov eax, 290Dh
  1749 00003414 CD21                <1>     int 21h     
  1750 00003416 50                  <1>     push rax    ;Save the WC signature
  1751 00003417 E8E5110000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1752 0000341C 488D3D6DD0FFFF      <1>     lea rdi, searchSpec
  1753 00003423 E81C110000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1754 00003428 4889FE              <1>     mov rsi, rdi
  1755 0000342B 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1756 0000342E 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1757 00003432 B80D290000          <1>     mov eax, 290Dh
  1758 00003437 CD21                <1>     int 21h
  1759 00003439 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1760 0000343A 88CC                <1>     mov ah, cl
  1761 0000343C 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1762 0000343F 0F84EB000000        <1>     jz .noWC
  1763 00003445 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1764 00003447 0F844AEBFFFF        <1>     je badArgError
  1765 0000344D 488D353CD0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1766                              <1>     ;Now we check if we have a path to actually handle
  1767 00003454 4839F3              <1>     cmp rbx, rsi
  1768 00003457 7444                <1>     je .noPath
  1769 00003459 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1770 0000345D 488D352CD0FFFF      <1>     lea rsi, searchSpec
  1771 00003464 488B3DF2D1FFFF      <1>     mov rdi, qword [srcSpec]
  1772 0000346B 56                  <1>     push rsi
  1773 0000346C E8DE0F0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1774 00003471 5E                  <1>     pop rsi
  1775 00003472 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1776 00003475 8A05AECBFFFF        <1>     mov al, byte [pathSep]
  1777 0000347B AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1778 0000347C 48893DDED2FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1779 00003483 488B3DDFD2FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1780 0000348A E8C00F0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1781 0000348F 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1782 00003492 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1783 00003493 48893DCFD2FFFF      <1>     mov qword [destPtr], rdi
  1784 0000349A 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1785                              <1> .noPath:
  1786                              <1>     ;Now we have where to copy the files to, we can start our work!
  1787 0000349D E8F0120000          <1>     call setDTA
  1788 000034A2 488D15E7CFFFFF      <1>     lea rdx, searchSpec
  1789 000034A9 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1790 000034AB B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1791 000034B0 CD21                <1>     int 21h
  1792 000034B2 0F82F1EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1793                              <1> .wcLoop:
  1794                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1795 000034B8 488D3575CCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1796 000034BF 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1797 000034C3 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1798 000034C8 CD21                <1>     int 21h 
  1799                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1800 000034CA 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1801 000034CE 488D3D9CD2FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1802 000034D5 57                  <1>     push rdi
  1803 000034D6 48A5                <1>     movsq
  1804 000034D8 66A5                <1>     movsw
  1805 000034DA A4                  <1>     movsb
  1806 000034DB 5F                  <1>     pop rdi
  1807 000034DC 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1808 000034E0 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1809                              <1> .wcNameMake:
  1810 000034E5 AC                  <1>     lodsb   ;Get the char from the source string
  1811 000034E6 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1812 000034E9 7502                <1>     jne .noStore    ;Dont store the char there
  1813 000034EB 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1814                              <1> .noStore:
  1815 000034ED 48FFC7              <1>     inc rdi ;Goto next char position
  1816 000034F0 FFC9                <1>     dec ecx
  1817 000034F2 75F1                <1>     jnz .wcNameMake
  1818                              <1> ;renName now has the FCB name for the file we wish to make!
  1819                              <1> ;Now make the two paths!
  1820 000034F4 488D3539CCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1821 000034FB 488B3D5FD2FFFF      <1>     mov rdi, qword [srcPtr]
  1822 00003502 E8480F0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1823 00003507 488D3563D2FFFF      <1>     lea rsi, renName
  1824 0000350E 488B3D54D2FFFF      <1>     mov rdi, qword [destPtr]
  1825 00003515 E84E100000          <1>     call FCBToAsciiz
  1826 0000351A 488D153CD1FFFF      <1>     lea rdx, srcSpec
  1827 00003521 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1828 00003526 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1829 0000352B CD21                <1>     int 21h
  1830 0000352D 7389                <1>     jnc .wcLoop     ;And process it too!
  1831                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 0000352F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1832                              <1> .noWC:
  1833 00003530 E8CC100000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1834 00003535 0FB6056CCBFFFF      <1>     movzx eax, byte [arg2Off]
  1835 0000353C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1836 00003543 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1837 00003546 488B3D1CD2FFFF      <1>     mov rdi, qword [destPtr]    
  1838 0000354D E86C100000          <1>     call cpDelimPathToBufz
  1839 00003552 488D1537CFFFFF      <1>     lea rdx, searchSpec
  1840 00003559 E807000000          <1>     call .ren
  1841                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000355E 73(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1842 00003560 E944EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1843                              <1> .ren:
  1844 00003565 488D3D73D1FFFF      <1>     lea rdi, destSpec
  1845 0000356C B800560000          <1>     mov eax, 5600h
  1846 00003571 CD21                <1>     int 21h
  1847                              <1>     return
    13                              <2> %%_ret:
    14 00003573 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1848                              <1> 
  1849                              <1> truename:
  1850 00003574 F60529CBFFFFFF      <1>     test byte [arg1Flg], -1
  1851 0000357B 0F8416EAFFFF        <1>     jz badArgError
  1852 00003581 E87B100000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1853 00003586 488D3503CFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1854 0000358D 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1855 00003590 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1856 00003595 CD21                <1>     int 21h
  1857 00003597 730D                <1>     jnc .writePath
  1858 00003599 3C02                <1>     cmp al, errFnf
  1859 0000359B 0F84FFE9FFFF        <1>     je badFileError
  1860 000035A1 E9DFE9FFFF          <1>     jmp badParamError
  1861                              <1> .writePath:
  1862 000035A6 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1863 000035A9 B9FFFFFFFF          <1>     mov ecx, -1
  1864 000035AE 30C0                <1>     xor al, al
  1865 000035B0 F2AE                <1>     repne scasb     ;Get the new len
  1866 000035B2 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1867 000035B4 FFC9                <1>     dec ecx
  1868 000035B6 BB01000000          <1>     mov ebx, 01
  1869 000035BB B440                <1>     mov ah, 40h
  1870 000035BD CD21                <1>     int 21h
  1871 000035BF E8770C0000          <1>     call printCRLF
  1872                              <1>     return
    13                              <2> %%_ret:
    14 000035C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1873                              <1> 
  1874                              <1> volume:
  1875                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1876 000035C5 F605DBCAFFFFFF      <1>     test byte [arg2Flg], -1
  1877 000035CC 0F85C5E9FFFF        <1>     jnz badArgError
  1878 000035D2 F605CBCAFFFFFF      <1>     test byte [arg1Flg], -1
  1879 000035D9 7507                <1>     jnz .notCurrentDrive
  1880 000035DB E86A0E0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1881 000035E0 EB31                <1>     jmp short .dirEP
  1882                              <1> .notCurrentDrive:
  1883 000035E2 E81A100000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1884 000035E7 488D35A2CEFFFF      <1>     lea rsi, searchSpec
  1885 000035EE E89A0E0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1886 000035F3 66AD                <1>     lodsw                   ;Get this word
  1887 000035F5 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1888 000035F8 0F8599E9FFFF        <1>     jne badArgError
  1889 000035FE 8A05A2CAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1890 00003604 A8FF                <1>     test al, -1
  1891 00003606 0F8582E9FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1892 0000360C 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1893 00003611 FFC8                <1>     dec eax ;Convert to 0 based number
  1894                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1895 00003613 E87A110000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1896 00003618 488D150ED0FFFF      <1>     lea rdx, volFcb
  1897 0000361F FFC0                <1>     inc eax ;Get 1 based drive number
  1898 00003621 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1899 00003623 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1900 00003626 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1901 0000362B CD21                <1>     int 21h
  1902 0000362D 50                  <1>     push rax
  1903                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1904 0000362E 488D154FD2FFFF      <1>     lea rdx, crlf
  1905 00003635 B409                <1>     mov ah, 09h
  1906 00003637 CD21                <1>     int 21h
  1907 00003639 488D1504D5FFFF      <1>     lea rdx, volMes
  1908 00003640 B409                <1>     mov ah, 09h
  1909 00003642 CD21                <1>     int 21h
  1910 00003644 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1911 00003646 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1912 00003649 B402                <1>     mov ah, 02h
  1913 0000364B CD21                <1>     int 21h
  1914 0000364D 58                  <1>     pop rax
  1915 0000364E 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1916 00003650 7409                <1>     jz .volIDOk
  1917 00003652 488D1502D5FFFF      <1>     lea rdx, volNo
  1918 00003659 EB19                <1>     jmp short .volEndPrint
  1919                              <1> .volIDOk:
  1920 0000365B 488D15F4D4FFFF      <1>     lea rdx, volOk
  1921 00003662 B409                <1>     mov ah, 09h
  1922 00003664 CD21                <1>     int 21h
  1923 00003666 C605BCCAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1924 0000366D 488D15AACAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1925                              <1> .volEndPrint:
  1926 00003674 B409                <1>     mov ah, 09h
  1927 00003676 CD21                <1>     int 21h
  1928 00003678 488D1505D2FFFF      <1>     lea rdx, crlf
  1929 0000367F B409                <1>     mov ah, 09h
  1930 00003681 CD21                <1>     int 21h
  1931                              <1>     return
    13                              <2> %%_ret:
    14 00003683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1932                              <1> 
  1933                              <1> version:
  1934 00003684 488D15F9D1FFFF      <1>     lea rdx, crlf
  1935 0000368B B409                <1>     mov ah, 09h
  1936 0000368D CD21                <1>     int 21h
  1937 0000368F 488D159CD4FFFF      <1>     lea rdx, dosVer
  1938 00003696 B409                <1>     mov ah, 09h
  1939 00003698 CD21                <1>     int 21h
  1940 0000369A E80C000000          <1>     call .printVersionNumber
  1941 0000369F 488D15DED1FFFF      <1>     lea rdx, crlf
  1942 000036A6 B409                <1>     mov ah, 09h
  1943 000036A8 CD21                <1>     int 21h
  1944                              <1>     return
    13                              <2> %%_ret:
    14 000036AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1945                              <1> .printVersionNumber:
  1946 000036AB B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1947 000036AD CD21                <1>     int 21h
  1948 000036AF 50                  <1>     push rax
  1949 000036B0 0FB6C0              <1>     movzx eax, al
  1950 000036B3 E822100000          <1>     call printDecimalWord
  1951 000036B8 B22E                <1>     mov dl, "."
  1952 000036BA B402                <1>     mov ah, 02h
  1953 000036BC CD21                <1>     int 21h
  1954 000036BE 58                  <1>     pop rax
  1955 000036BF 0FB6C4              <1>     movzx eax, ah
  1956 000036C2 E813100000          <1>     call printDecimalWord
  1957                              <1>     return
    13                              <2> %%_ret:
    14 000036C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1958                              <1> 
  1959                              <1> 
  1960                              <1> memory:
  1961 000036C8 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  1962 000036CD CD21                <1>     int 21h
  1963 000036CF 4885DB              <1>     test rbx, rbx
  1964 000036D2 7510                <1>     jnz .sysvarsOK
  1965 000036D4 488D153ED7FFFF      <1>     lea rdx, memBad0
  1966 000036DB B409                <1>     mov ah, 09h
  1967 000036DD CD21                <1>     int 21h
  1968 000036DF E99E100000          <1>     jmp freezePC.altEP
  1969                              <1> .sysvarsOK:
  1970                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1971                              <1>     ; and rcx to store Application memory
  1972 000036E4 31F6                <1>     xor esi, esi
  1973 000036E6 31FF                <1>     xor edi, edi
  1974 000036E8 31ED                <1>     xor ebp, ebp
  1975 000036EA 31C9                <1>     xor ecx, ecx
  1976 000036EC 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1977 000036F0 488B1B              <1>     mov rbx, qword [rbx]
  1978                              <1> .memLp:
  1979 000036F3 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1980 000036F6 7409                <1>     je .validMCB
  1981 000036F8 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1982 000036FB 0F8506010000        <1>     jne .badMCBFound
  1983                              <1> .validMCB:
  1984 00003701 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1985 00003704 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1986 00003708 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1987 00003710 7505                <1>     jne .notDOS
  1988 00003712 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1989 00003715 EB21                <1>     jmp short .gotoNext
  1990                              <1> .notDOS:
  1991 00003717 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1992 0000371F 7505                <1>     jne .notFree
  1993 00003721 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1994 00003724 EB12                <1>     jmp short .gotoNext
  1995                              <1> .notFree:
  1996 00003726 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1997 0000372E 7505                <1>     jne .notHole
  1998 00003730 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1999 00003733 EB03                <1>     jmp short .gotoNext
  2000                              <1> .notHole:
  2001 00003735 4801C1              <1>     add rcx, rax    ;Add to Application count
  2002                              <1> .gotoNext:
  2003 00003738 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2004 0000373B 7407                <1>     je .endOfWalk
  2005 0000373D 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2006 00003742 EBAF                <1>     jmp short .memLp
  2007                              <1> .endOfWalk:
  2008                              <1>     
  2009 00003744 488D152FD6FFFF      <1>     lea rdx, memDOS
  2010 0000374B B409                <1>     mov ah, 09h
  2011 0000374D CD21                <1>     int 21h
  2012 0000374F 4889F0              <1>     mov rax, rsi
  2013 00003752 E89D000000          <1>     call .mcbPrintAmount
  2014 00003757 488D15B4D6FFFF      <1>     lea rdx, memByte
  2015 0000375E B409                <1>     mov ah, 09h
  2016 00003760 CD21                <1>     int 21h
  2017                              <1> 
  2018 00003762 4885ED              <1>     test rbp, rbp
  2019 00003765 741E                <1>     jz .skipHole
  2020 00003767 488D1558D6FFFF      <1>     lea rdx, memHole
  2021 0000376E B409                <1>     mov ah, 09h
  2022 00003770 CD21                <1>     int 21h
  2023 00003772 4889E8              <1>     mov rax, rbp
  2024 00003775 E87A000000          <1>     call .mcbPrintAmount
  2025 0000377A 488D1591D6FFFF      <1>     lea rdx, memByte
  2026 00003781 B409                <1>     mov ah, 09h
  2027 00003783 CD21                <1>     int 21h
  2028                              <1> .skipHole:
  2029                              <1> 
  2030 00003785 488D1514D6FFFF      <1>     lea rdx, memApp
  2031 0000378C B409                <1>     mov ah, 09h
  2032 0000378E CD21                <1>     int 21h
  2033 00003790 4889C8              <1>     mov rax, rcx
  2034 00003793 E85C000000          <1>     call .mcbPrintAmount
  2035 00003798 488D1573D6FFFF      <1>     lea rdx, memByte
  2036 0000379F B409                <1>     mov ah, 09h
  2037 000037A1 CD21                <1>     int 21h
  2038                              <1> 
  2039 000037A3 488D1542D6FFFF      <1>     lea rdx, memFree
  2040 000037AA B409                <1>     mov ah, 09h
  2041 000037AC CD21                <1>     int 21h
  2042 000037AE 4889F8              <1>     mov rax, rdi
  2043 000037B1 E83E000000          <1>     call .mcbPrintAmount
  2044 000037B6 488D1555D6FFFF      <1>     lea rdx, memByte
  2045 000037BD B409                <1>     mov ah, 09h
  2046 000037BF CD21                <1>     int 21h
  2047                              <1> 
  2048 000037C1 488D158CD5FFFF      <1>     lea rdx, memSys
  2049 000037C8 B409                <1>     mov ah, 09h
  2050 000037CA CD21                <1>     int 21h
  2051 000037CC 4889F0              <1>     mov rax, rsi
  2052 000037CF 4801F8              <1>     add rax, rdi
  2053 000037D2 4801C8              <1>     add rax, rcx
  2054 000037D5 4801E8              <1>     add rax, rbp
  2055 000037D8 E817000000          <1>     call .mcbPrintAmount
  2056 000037DD 488D152ED6FFFF      <1>     lea rdx, memByte
  2057 000037E4 B409                <1>     mov ah, 09h
  2058 000037E6 CD21                <1>     int 21h
  2059                              <1> 
  2060 000037E8 488D1595D0FFFF      <1>     lea rdx, crlf
  2061 000037EF B409                <1>     mov ah, 09h
  2062 000037F1 CD21                <1>     int 21h
  2063                              <1>     return
    13                              <2> %%_ret:
    14 000037F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2064                              <1> 
  2065                              <1> .mcbPrintAmount:
  2066 000037F4 51                  <1>     push rcx
  2067 000037F5 56                  <1>     push rsi
  2068 000037F6 57                  <1>     push rdi
  2069 000037F7 55                  <1>     push rbp
  2070 000037F8 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2071 000037FD E8380E0000          <1>     call printDecimalValLB
  2072 00003802 5D                  <1>     pop rbp
  2073 00003803 5F                  <1>     pop rdi
  2074 00003804 5E                  <1>     pop rsi
  2075 00003805 59                  <1>     pop rcx
  2076                              <1>     return
    13                              <2> %%_ret:
    14 00003806 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2077                              <1> .badMCBFound:
  2078 00003807 488D154BD6FFFF      <1>     lea rdx, memBad2
  2079 0000380E B409                <1>     mov ah, 09h
  2080 00003810 CD21                <1>     int 21h
  2081 00003812 E96B0F0000          <1>     jmp freezePC.altEP
  2082                              <1> 
  2083                              <1> type:
  2084 00003817 F60586C8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2085 0000381E 0F8473E7FFFF        <1>     jz badArgError
  2086 00003824 F6057CC8FFFFFF      <1>     test byte [arg2Flg], -1
  2087 0000382B 0F8566E7FFFF        <1>     jnz badArgError         ;If this set, error
  2088 00003831 4C8B05D7C7FFFF      <1>     mov r8, [pspPtr]
  2089 00003838 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2090 0000383F 0FB6055FC8FFFF      <1>     movzx eax, byte [arg1Off]
  2091 00003846 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2092 00003849 803E0D              <1>     cmp byte [rsi], CR
  2093 0000384C 0F8445E7FFFF        <1>     je badArgError
  2094 00003852 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2095 00003856 750F                <1>     jne .noDrive
  2096 00003858 0FB60547C8FFFF      <1>     movzx eax, byte [arg1FCBret]
  2097 0000385F 3CFF                <1>     cmp al, -1
  2098 00003861 0F8427E7FFFF        <1>     je badDriveError
  2099                              <1> .noDrive:
  2100                              <1>     ;Now we open the provided file
  2101 00003867 E8950D0000          <1>     call buildCommandPath
  2102 0000386C 488D151DCCFFFF      <1>     lea rdx, searchSpec
  2103 00003873 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2104 00003878 CD21                <1>     int 21h
  2105 0000387A 0F8220E7FFFF        <1>     jc badFileError
  2106 00003880 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2107 00003887 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2108                              <1> .lp:
  2109 0000388A B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2110 0000388F B43F                <1>     mov ah, 3Fh ;Read handle
  2111 00003891 CD21                <1>     int 21h
  2112 00003893 89C1                <1>     mov ecx, eax
  2113 00003895 67E317              <1>     jecxz .exit
  2114 00003898 53                  <1>     push rbx    ;Save the original in handle
  2115 00003899 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2116 0000389E B440                <1>     mov ah, 40h
  2117 000038A0 CD21                <1>     int 21h
  2118 000038A2 5B                  <1>     pop rbx ;Get back the original read handle
  2119 000038A3 720F                <1>     jc .exitBad
  2120 000038A5 39C8                <1>     cmp eax, ecx
  2121 000038A7 74E1                <1>     je .lp
  2122 000038A9 FFC9                <1>     dec ecx ;One less for a ^Z
  2123 000038AB 39C8                <1>     cmp eax, ecx
  2124 000038AD 7505                <1>     jne .exitBad
  2125                              <1> .exit:
  2126 000038AF B43E                <1>     mov ah, 3Eh ;Close handle
  2127 000038B1 CD21                <1>     int 21h
  2128                              <1>     return
    13                              <2> %%_ret:
    14 000038B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2129                              <1> .exitBad:
  2130                              <1>     ;If it is a char device, don't print an error
  2131 000038B4 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2132 000038B9 BB01000000          <1>     mov ebx, 1
  2133 000038BE CD21                <1>     int 21h
  2134 000038C0 F6C280              <1>     test dl, devCharDev
  2135                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000038C3 75(B3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2136 000038C5 E972E6FFFF          <1>     jmp badDiskFull
  2137                              <1> 
  2138                              <1> exit:
  2139 000038CA F605C3C7FFFF01      <1>     test byte [statFlg1], permaShell
  2140 000038D1 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2141 000038D3 F605BAC7FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2142 000038DA 0F8557E2FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2143                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 000038E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2144                              <1> .ouch:
  2145 000038E1 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2146 000038E6 CD21                <1>     int 21h
  2147                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 000038E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2148                              <1> 
  2149                              <1> launchChild:
  2150                              <1>     ;We execute an external command here.
  2151                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2152                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2153                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2154                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2155                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2156 000038E9 E8A40E0000          <1>     call setDTA         
  2157                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2158 000038EE 488D3DF2C9FFFF      <1>     lea rdi, cmdPathSpec
  2159 000038F5 4889FE              <1>     mov rsi, rdi
  2160 000038F8 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2161 000038FD CD2F                <1>     int 2fh
  2162 000038FF E8400C0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2163 00003904 4889FE              <1>     mov rsi, rdi    ;Source here
  2164 00003907 488D3DF8C7FFFF      <1>     lea rdi, cmdFcb
  2165 0000390E B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2166 00003913 CD21                <1>     int 21h
  2167 00003915 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2168 00003917 0F85AAE6FFFF        <1>     jnz badCmdError
  2169 0000391D 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2170                              <1> .pathLoop:
  2171 00003920 488D35E8C7FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2172 00003927 488D3DA5D5FFFF      <1>     lea rdi, extStr
  2173 0000392E BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2174                              <1> .extLp:
  2175 00003933 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2176 00003934 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2177 00003939 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2178 0000393B 5E                  <1>     pop rsi
  2179 0000393C 85C9                <1>     test ecx, ecx
  2180 0000393E 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2181 00003940 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2182 00003943 FFCA                <1>     dec edx         ;Else one less extension type to check
  2183 00003945 75EC                <1>     jnz .extLp
  2184                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2185                              <1>     ;If not, error.
  2186 00003947 B903000000          <1>     mov ecx, 3
  2187 0000394C 4889F7              <1>     mov rdi, rsi
  2188 0000394F B020                <1>     mov al, SPC
  2189 00003951 F3AE                <1>     rep scasb   
  2190 00003953 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2191 00003955 0F856CE6FFFF        <1>     jnz badCmdError    ;If not, error!
  2192                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2193 0000395B 488D3571D5FFFF      <1>     lea rsi, extStr
  2194 00003962 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2195                              <1> .extSrchLp:
  2196 00003967 488D3DA1C7FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2197 0000396E B903000000          <1>     mov ecx, 3
  2198 00003973 F3A4                <1>     rep movsb   ;Copy the extension over!
  2199 00003975 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2200 0000397A 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2201 0000397C FFCB                <1>     dec ebx                 ;Decrement extension counter
  2202 0000397E 75E7                <1>     jnz .extSrchLp
  2203                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2204                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2205                              <1> ; by setting the fcb extension back to all spaces.
  2206 00003980 488D3D88C7FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2207 00003987 B903000000          <1>     mov ecx, 3
  2208 0000398C B020                <1>     mov al, SPC
  2209 0000398E F3AA                <1>     rep stosb   ;Store back the empty extension!
  2210 00003990 EB70                <1>     jmp short .pathHandle
  2211                              <1> .extFnd:
  2212                              <1> ;Here if the file had the right extension.
  2213 00003992 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2214 00003997 7269                <1>     jc .pathHandle
  2215                              <1> .extSrchFnd:
  2216                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2217                              <1> ; a BAT. If it is, separate handling!
  2218 00003999 803D6FC7FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2219 000039A0 0F84EAE1FFFF        <1>     je batLaunch
  2220 000039A6 488D1D94C7FFFF      <1>     lea rbx, launchBlock
  2221 000039AD 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2222 000039B1 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2223 000039B4 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2224 000039BB 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2225 000039BF 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2226 000039C3 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2227 000039C7 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2228 000039CB 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2229 000039CF 488D1511C9FFFF      <1>     lea rdx, cmdPathSpec
  2230 000039D6 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2231 000039DB CD21                <1>     int 21h
  2232                              <1> ;If the program failed to start, verify why!
  2233 000039DD B800590000          <1>     mov eax, 5900h      ;Get extended error
  2234 000039E2 31DB                <1>     xor ebx, ebx
  2235 000039E4 CD21                <1>     int 21h
  2236 000039E6 66890520C6FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2237 000039ED 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2238 000039EF 0F8487E5FFFF        <1>     je badAccError
  2239 000039F5 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2240 000039F7 0F847A0D0000        <1>     je freezePC
  2241 000039FD E9C5E5FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2242                              <1> .pathHandle:        
  2243                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2244                              <1> ;al has error code!
  2245 00003A02 4885ED              <1>     test rbp, rbp
  2246 00003A05 0F85A3000000        <1>     jnz .pathReentry
  2247                              <1> ;Now check if the command we recieved included an absolute path.
  2248                              <1> ;If so, we don't do path substitution and just fail at this point
  2249 00003A0B 488D35D5C8FFFF      <1>     lea rsi, cmdPathSpec
  2250 00003A12 66AD                <1>     lodsw   ;Get the first two chars
  2251 00003A14 3A050FC6FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2252 00003A1A 0F84A7E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2253 00003A20 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2254 00003A22 7412                <1>     je .pathGetEnv
  2255 00003A24 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2256 00003A27 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2257 00003A29 AC                  <1>     lodsb   ;Get the third char
  2258 00003A2A 3A05F9C5FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2259 00003A30 0F8491E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2260                              <1> .pathGetEnv:
  2261                              <1> ;Now get a pointer to the environment and search for PATH=
  2262                              <1> ;We only take the final portion of the path and add it to each path componant
  2263                              <1> ;This agrees with DOS 3.3
  2264 00003A36 E8B80D0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2265 00003A3B 0F8486E5FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2266                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2267                              <1>     ;Now we know we dont have to keep track of chars!!
  2268 00003A41 488D3DADD4FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2269 00003A48 E8000E0000          <1>     call searchForEnvVar
  2270 00003A4D 0F8274E5FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2271 00003A53 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2272 00003A56 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2273                              <1> .pathRejoin:
  2274 00003A5D 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2275 00003A60 0F8461E5FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2276 00003A66 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2277 00003A69 488D3D20CAFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2278                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2279                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2280                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2281                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2282 00003A70 E8330B0000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2283 00003A75 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2284 00003A78 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2285 00003A7B 48FFCF              <1>     dec rdi ;Point to the null terminator
  2286 00003A7E 8A05A5C5FFFF        <1>     mov al, byte [pathSep]
  2287 00003A84 3847FF              <1>     cmp byte [rdi - 1], al
  2288 00003A87 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2289 00003A89 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2290                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2291 00003A8A 488D3576C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2292 00003A91 E8D20A0000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2293 00003A96 488D35F3C9FFFF      <1>     lea rsi, searchSpec 
  2294 00003A9D 488D3D43C8FFFF      <1>     lea rdi, cmdPathSpec
  2295 00003AA4 E8A6090000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2296 00003AA9 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2297                              <1> .pathReentry:
  2298 00003AAE 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2299 00003AB2 0F840FE5FFFF        <1>     je badCmdError
  2300                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2301                              <1> ;Not really a big deal...
  2302                              <1>     ;cmp al, errBadDrv
  2303                              <1>     ;jne .pathDrvOk
  2304                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2305                              <1>     ;mov eax, 0900h
  2306                              <1>     ;int 21h
  2307                              <1> ;.pathDrvOk:
  2308 00003AB8 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2309 00003ABB 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2310 00003ABE EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2311                              <1> 
  2312                              <1> .prepAndSearch:
  2313                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2314                              <1> ;cmdPathSpec and null terminates. 
  2315                              <1> ;Input: cmdFcb name + ext setup. 
  2316                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2317                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2318 00003AC0 51                  <1>     push rcx
  2319 00003AC1 56                  <1>     push rsi
  2320 00003AC2 57                  <1>     push rdi
  2321 00003AC3 488D3D1DC8FFFF      <1>     lea rdi, cmdPathSpec 
  2322 00003ACA 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2323 00003ACD E8720A0000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2324 00003AD2 807F013A            <1>     cmp byte [rdi + 1], ":"
  2325 00003AD6 7507                <1>     jne .notdriveRel
  2326 00003AD8 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2327                              <1> .notdriveRel:
  2328 00003ADF 488D3521C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2329 00003AE6 E87D0A0000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2330 00003AEB B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2331 00003AF0 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2332 00003AF2 CD21                <1>     int 21h
  2333 00003AF4 5F                  <1>     pop rdi
  2334 00003AF5 5E                  <1>     pop rsi
  2335 00003AF6 59                  <1>     pop rcx
  2336                              <1>     return
    13                              <2> %%_ret:
    14 00003AF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2337                              <1> 
  2338                              <1> set:
  2339 00003AF8 F605A5C5FFFFFF      <1>     test byte [arg1Flg], -1
  2340 00003AFF 7539                <1>     jnz .editEnv
  2341                              <1>     ;Here we just print the environment.
  2342 00003B01 E8ED0C0000          <1>     call checkEnvGoodAndGet 
  2343 00003B06 0F8467E4FFFF        <1>     jz badEnvSpaceError
  2344                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2345 00003B0C 4889F7              <1>     mov rdi, rsi
  2346 00003B0F 4889F2              <1>     mov rdx, rsi
  2347                              <1> .findLp:
  2348 00003B12 B9FFFFFFFF          <1>     mov ecx, -1
  2349 00003B17 31C0                <1>     xor eax, eax
  2350                              <1> .scanLp:
  2351 00003B19 F2AE                <1>     repne scasb
  2352 00003B1B 75FC                <1>     jne .scanLp
  2353 00003B1D F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2354                              <1>     ;Else, we now print this environment variable and CRLF it
  2355                              <1>     ;rdx points to the start of the string aleady
  2356                              <1>     ;ecx has the bytes to print
  2357 00003B1F BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2358 00003B24 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2359 00003B29 CD21                <1>     int 21h
  2360 00003B2B E80B070000          <1>     call printCRLF
  2361 00003B30 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2362                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B33 74(F7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2363 00003B35 4889FA              <1>     mov rdx, rdi   
  2364 00003B38 EBD8                <1>     jmp short .findLp
  2365                              <1> .editEnv:
  2366 00003B3A E8B40C0000          <1>     call checkEnvGoodAndGet
  2367 00003B3F 0F842EE4FFFF        <1>     jz badEnvSpaceError
  2368 00003B45 0FB60559C5FFFF      <1>     movzx eax, byte [arg1Off]
  2369 00003B4C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2370 00003B53 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2371                              <1> .altEp:
  2372 00003B56 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2373 00003B59 B00D                <1>     mov al, CR              ;Search for the CR
  2374 00003B5B 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2375 00003B63 89CB                <1>     mov ebx, ecx            ;Save this count 
  2376 00003B65 53                  <1>     push rbx                ;Save this count on the stack too!
  2377 00003B66 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2378 00003B68 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2379 00003B6A 66891D21CCFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2380 00003B71 59                  <1>     pop rcx                 ;Get the char count back!
  2381 00003B72 89CB                <1>     mov ebx, ecx            
  2382 00003B74 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2383 00003B77 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2384 00003B79 F2AE                <1>     repne scasb
  2385 00003B7B 0F85E9E3FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2386 00003B81 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2387 00003B83 66891D0ACCFFFF      <1>     mov word [envVarNamSz], bx
  2388 00003B8A 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2389 00003B8D 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2390 00003B8F 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2391 00003B90 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2392 00003B93 E8B50C0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2393 00003B98 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2394 00003B9A E8DC0C0000          <1>     call envFree            ;Free the var in rsi
  2395                              <1> .editNewEnv:
  2396 00003B9F E8100D0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2397 00003BA4 E8300D0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2398 00003BA9 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2399 00003BAA 31C0                <1>     xor eax, eax            ;Prepare null length!
  2400 00003BAC 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2401 00003BB2 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2402 00003BB5 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2403 00003BB7 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2404 00003BB9 663B0DD2CBFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2405 00003BC0 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2406                              <1> .reallocTry:
  2407                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2408                              <1>     ; we proceed with the environment size.
  2409 00003BC2 E8270D0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2410 00003BC7 7319                <1>     jnc .reallocOk
  2411 00003BC9 0F84A4E3FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2412                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2413                              <1>     ; partially the variable into the env. If so we do that. If the name
  2414                              <1>     ; cannot fit, we don't bother
  2415                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2416 00003BCF 663B0DBECBFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2417                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003BD6 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003BD8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2418 00003BD9 E895E3FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2419 00003BDE FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2420 00003BE0 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2421                              <1> .reallocOk:
  2422                              <1>     ;Here we have all the space to just copy the full path
  2423 00003BE2 0FB70DA9CBFFFF      <1>     movzx ecx, word [envVarSz]
  2424                              <1> .nameCp:
  2425                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2426                              <1> ;Always enough memory for name= here
  2427 00003BE9 AC                  <1>     lodsb
  2428 00003BEA E883080000          <1>     call ucChar
  2429 00003BEF AA                  <1>     stosb
  2430 00003BF0 66FFC9              <1>     dec cx      ;Always decrement this count
  2431 00003BF3 3C3D                <1>     cmp al, "="
  2432 00003BF5 75F2                <1>     jne .nameCp
  2433                              <1> .exitNameCp:
  2434 00003BF7 AC                  <1>     lodsb
  2435 00003BF8 3C0D                <1>     cmp al, CR
  2436 00003BFA 7405                <1>     je .exitCp
  2437 00003BFC AA                  <1>     stosb
  2438 00003BFD FFC9                <1>     dec ecx
  2439 00003BFF 75F6                <1>     jnz .exitNameCp
  2440                              <1> .exitCp:
  2441 00003C01 31C0                <1>     xor eax, eax
  2442 00003C03 66AB                <1>     stosw   ;Store the final null word
  2443                              <1>     return
    13                              <2> %%_ret:
    14 00003C05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2444                              <1> .delEnvVar:
  2445                              <1>     ;rsi -> Start of the envvar name in user buffer
  2446 00003C06 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2447 00003C09 E83F0C0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2448 00003C0E 7205                <1>     jc .delEnvVarSkip
  2449 00003C10 E8660C0000          <1>     call envFree    ;Free the env var at rsi
  2450                              <1> .delEnvVarSkip:
  2451 00003C15 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2452                              <1>     return
    13                              <2> %%_ret:
    14 00003C16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2453                              <1> 
  2454                              <1> pathEdit:
  2455                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2456                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2457                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2458                              <1> ; end there. Error with too many arguments error!
  2459                              <1> ;If after the equals sign there is nothing, we just print the path!
  2460                              <1> ;Gotta process the command line ourselves first
  2461 00003C17 E8D70B0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2462 00003C1C 0F8451E3FFFF        <1>     jz badEnvSpaceError
  2463                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2464 00003C22 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2465 00003C29 E8AD000000          <1>     call .skipPathDelimiters
  2466 00003C2E 3C0D                <1>     cmp al, CR
  2467 00003C30 7466                <1>     je .printPath
  2468                              <1> ;Else use the set command to setup the path in the searchSpec.
  2469 00003C32 56                  <1>     push rsi    ;Save the first char of the command line string
  2470 00003C33 488D35BBD2FFFF      <1>     lea rsi, pathEVar
  2471 00003C3A 488D3D4FC8FFFF      <1>     lea rdi, searchSpec
  2472 00003C41 E809080000          <1>     call strcpy
  2473 00003C46 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2474 00003C49 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2475 00003C4A 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2476                              <1> .cpLp:
  2477 00003C4C AC                  <1>     lodsb
  2478 00003C4D 3C0D                <1>     cmp al, CR
  2479 00003C4F 7411                <1>     je .cpLpExit
  2480 00003C51 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2481 00003C56 740A                <1>     je .cpLpExit
  2482 00003C58 E815080000          <1>     call ucChar ;Uppercase the char
  2483 00003C5D AA                  <1>     stosb       ;Store it
  2484 00003C5E FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2485 00003C60 EBEA                <1>     jmp short .cpLp
  2486                              <1> .cpLpExit:
  2487                              <1>     ;Remove trailing semicolons
  2488 00003C62 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2489 00003C66 7507                <1>     jne .cpLpNoIntervene
  2490 00003C68 FFC9                <1>     dec ecx     ;Reduce the count by one
  2491 00003C6A 48FFCF              <1>     dec rdi     ;Go back a char
  2492 00003C6D EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2493                              <1> .cpLpNoIntervene:
  2494 00003C6F B00D                <1>     mov al, CR  ;Now we store the terminator!
  2495 00003C71 AA                  <1>     stosb       ;Store it!
  2496 00003C72 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2497 00003C78 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2498 00003C7F FFC1                <1>     inc ecx     ;Add the CR for copying over
  2499 00003C81 488D3508C8FFFF      <1>     lea rsi, searchSpec
  2500 00003C88 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2501 00003C8F 57                  <1>     push rdi
  2502 00003C90 F3A4                <1>     rep movsb
  2503 00003C92 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2504 00003C93 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2505                              <1> .printPath:
  2506 00003C98 488D3D56D2FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2507 00003C9F E8A90B0000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2508 00003CA4 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2509 00003CA6 4889F7              <1>     mov rdi, rsi        
  2510 00003CA9 E8BA070000          <1>     call strlen         ;Get the length of the path in rdi
  2511 00003CAE 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2512 00003CB4 7411                <1>     je .noPathPrnt      ;Print no path!
  2513 00003CB6 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2514 00003CB8 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2515 00003CBB BB01000000          <1>     mov ebx, 1          ;STDOUT
  2516 00003CC0 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2517 00003CC5 EB0C                <1>     jmp short .pathExit
  2518                              <1> .noPathPrnt:
  2519 00003CC7 488D1513CFFFFF      <1>     lea rdx, noPath
  2520 00003CCE B800090000          <1>     mov eax, 0900h
  2521                              <1> .pathExit:
  2522 00003CD3 CD21                <1>     int 21h
  2523 00003CD5 E861050000          <1>     call printCRLF      ;Print a crlf at the end
  2524                              <1>     return
    13                              <2> %%_ret:
    14 00003CDA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2525                              <1> .skipPathDelimiters:
  2526                              <1> ;Input: rsi -> Start of string to parse
  2527                              <1> ;Output: rsi -> First non-delimiter char of string
  2528                              <1> ;        al = First non delim char
  2529 00003CDB AC                  <1>     lodsb
  2530 00003CDC E806000000          <1>     call .isALPathDelimiter
  2531 00003CE1 74F8                <1>     je .skipPathDelimiters
  2532 00003CE3 48FFCE              <1>     dec rsi
  2533                              <1>     return
    13                              <2> %%_ret:
    14 00003CE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2534                              <1> .isALPathDelimiter:
  2535                              <1> ;Same as before without semicolon
  2536 00003CE7 3C20                <1>     cmp al, SPC
  2537                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003CE9 74(E6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2538 00003CEB 3C09                <1>     cmp al, TAB
  2539                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003CED 74(E6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2540 00003CEF 3C2C                <1>     cmp al, ","
  2541                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003CF1 74(E6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2542 00003CF3 3C3D                <1>     cmp al, "="
  2543                              <1>     return
    13                              <2> %%_ret:
    14 00003CF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2544                              <1> 
  2545                              <1> prompt:
  2546 00003CF6 E8F80A0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2547 00003CFB 0F8472E2FFFF        <1>     jz badEnvSpaceError
  2548                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2549 00003D01 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2550 00003D08 E880070000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2551 00003D0D 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2552 00003D10 742C                <1>     je .reset   ;Reset if so
  2553 00003D12 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2554 00003D13 488D35B1D1FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2555 00003D1A 488D3D6FC7FFFF      <1>     lea rdi, searchSpec
  2556 00003D21 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2557 00003D26 F3A4                <1>     rep movsb
  2558 00003D28 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2559 00003D29 31C9                <1>     xor ecx, ecx    ;Get char count
  2560                              <1> .cp:    ;Now copy the user string over
  2561 00003D2B AC                  <1>     lodsb
  2562 00003D2C AA                  <1>     stosb 
  2563 00003D2D 3C0D                <1>     cmp al, CR
  2564 00003D2F 7404                <1>     je .cpOk
  2565 00003D31 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2566 00003D33 EBF6                <1>     jmp short .cp
  2567                              <1> .cpOk:
  2568 00003D35 488D3554C7FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2569 00003D3C EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2570                              <1> .reset:
  2571                              <1> ;Delete the environment variable!
  2572 00003D3E 488D3586D1FFFF      <1>     lea rsi, promptEVar 
  2573 00003D45 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2574                              <1> .goSet:
  2575 00003D47 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2576 00003D4D 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2577 00003D54 FFC1                <1>     inc ecx     ;Include CR in copy
  2578 00003D56 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2579 00003D5D 57                  <1>     push rdi
  2580 00003D5E F3A4                <1>     rep movsb
  2581 00003D60 5E                  <1>     pop rsi
  2582 00003D61 E9F0FDFFFF          <1>     jmp set.altEp
  2583                              <1> 
  2584                              <1> echo:
  2585 00003D66 F60537C3FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2586 00003D6D 752A                <1>     jnz .argGiven
  2587 00003D6F 488D155CCFFFFF      <1>     lea rdx, echoIs
  2588 00003D76 E8C7040000          <1>     call printString
  2589 00003D7B 488D1536CFFFFF      <1>     lea rdx, onMes
  2590 00003D82 488D0D29CFFFFF      <1>     lea rcx, offMes
  2591 00003D89 F60506C3FFFFFF      <1>     test byte [echoFlg], -1
  2592 00003D90 480F44D1            <1>     cmovz rdx, rcx
  2593 00003D94 E9A9040000          <1>     jmp printString
  2594                              <1> .argGiven:
  2595 00003D99 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2596 00003DA0 0FB605FEC2FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2597 00003DA7 4801C6              <1>     add rsi, rax
  2598 00003DAA AC                  <1>     lodsb   ;Get this char
  2599 00003DAB 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2600 00003DAE E8BF060000          <1>     call ucChar
  2601 00003DB3 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2602 00003DB5 755A                <1>     jne .directEcho
  2603 00003DB7 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2604 00003DBA E8B3060000          <1>     call ucChar
  2605 00003DBF 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2606 00003DC1 751B                <1>     jne .checkOff
  2607 00003DC3 56                  <1>     push rsi
  2608 00003DC4 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2609 00003DCB E8BD060000          <1>     call skipDelimiters
  2610 00003DD0 803E0D              <1>     cmp byte [rsi], CR
  2611 00003DD3 5E                  <1>     pop rsi
  2612 00003DD4 753B                <1>     jne .directEcho ;If its not, just echo the string
  2613 00003DD6 C605B9C2FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2614                              <1>     return
    13                              <2> %%_ret:
    14 00003DDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2615                              <1> .checkOff:
  2616 00003DDE 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2617 00003DE1 E88C060000          <1>     call ucChar
  2618 00003DE6 3C46                <1>     cmp al, "F" ;Is it an F?
  2619 00003DE8 7527                <1>     jne .directEcho ;No, just direct echo
  2620 00003DEA 8A4602              <1>     mov al, byte [rsi + 2]
  2621 00003DED E880060000          <1>     call ucChar
  2622 00003DF2 3C46                <1>     cmp al, "F"
  2623 00003DF4 751B                <1>     jne .directEcho
  2624 00003DF6 56                  <1>     push rsi
  2625 00003DF7 4881C603000000      <1>     add rsi, 3
  2626 00003DFE E88A060000          <1>     call skipDelimiters
  2627 00003E03 803E0D              <1>     cmp byte [rsi], CR
  2628 00003E06 5E                  <1>     pop rsi
  2629 00003E07 7508                <1>     jne .directEcho
  2630 00003E09 C60586C2FFFF00      <1>     mov byte [echoFlg], 0
  2631                              <1>     return
    13                              <2> %%_ret:
    14 00003E10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2632                              <1> .directEcho: 
  2633 00003E11 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2634 00003E18 4889F3              <1>     mov rbx, rsi    
  2635 00003E1B 4829D3              <1>     sub rbx, rdx
  2636 00003E1E 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2637 00003E26 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2638 00003E28 0F8203040000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2639 00003E2E 4889F2              <1>     mov rdx, rsi
  2640 00003E31 BB01000000          <1>     mov ebx, 1
  2641 00003E36 B800400000          <1>     mov eax, 4000h
  2642 00003E3B CD21                <1>     int 21h
  2643 00003E3D E9F9030000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2644                              <1> 
  2645                              <1> 
  2646                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2647                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2648                              <1> ; with just... the actual command tail being echoed with the command -_-
  2649 00003E42 F6054DC2FFFFFF      <1>     test byte [echoFlg], -1
  2650 00003E49 7528                <1>     jnz .echoTail
  2651                              <1> ;Since we havent echoed the command out, type the tail out manually
  2652 00003E4B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2653 00003E52 E836060000          <1>     call skipDelimiters ;Skip leading delims
  2654 00003E57 4889F2              <1>     mov rdx, rsi
  2655 00003E5A 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2656 00003E62 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2657 00003E67 B800400000          <1>     mov eax, 4000h  ;Write
  2658 00003E6C CD21                <1>     int 21h
  2659 00003E6E E8C8030000          <1>     call printCRLF
  2660                              <1> .echoTail:
  2661 00003E73 488D15CFCBFFFF      <1>     lea rdx, pauseMes
  2662 00003E7A E8C3030000          <1>     call printString
  2663 00003E7F B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2664 00003E84 CD21                <1>     int 21h
  2665 00003E86 E8B0030000          <1>     call printCRLF
  2666                              <1>     return
    13                              <2> %%_ret:
    14 00003E8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2667                              <1> remark:
  2668                              <1> ;If in a batch file, do nothing. Else, go through normal loop.
  2669 00003E8C F60501C2FFFF08      <1>     test byte [statFlg1], inBatch
  2670                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E93 74(8B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2671                              <1> .go:
  2672 00003E95 5B                  <1>     pop rbx
  2673 00003E96 5B                  <1>     pop rbx ;Realign the stack back :)
  2674 00003E97 E811DCFFFF          <1>     call getSetMainState
  2675 00003E9C E980D2FFFF          <1>     jmp commandMain.inputGetAgain   ;Clean any redirs and get input
  2676                              <1> shift:
  2677                              <1>     return
    13                              <2> %%_ret:
    14 00003EA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2678                              <1> forCmd:
  2679                              <1>     return
    13                              <2> %%_ret:
    14 00003EA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2680                              <1> ifCmd:
  2681                              <1>     return
    13                              <2> %%_ret:
    14 00003EA3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2682                              <1> goto:
  2683                              <1> ;If not in batch, immediately return!
  2684 00003EA4 F605E9C1FFFF08      <1>     test byte [statFlg1], inBatch
  2685                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003EAB 74(A3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2686 00003EAD 488B2DF7C1FFFF      <1>     mov rbp, qword [bbPtr]
  2687 00003EB4 4885ED              <1>     test rbp, rbp
  2688                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003EB7 74(A3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2689                              <1> ;Start by copying the command line label to fcb1
  2690 00003EB9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2691 00003EC0 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]  ;Use fcb1 for the command line
  2692 00003EC4 E8C4050000          <1>     call skipDelimiters     ;Go to the first argument on cmdline
  2693 00003EC9 B908000000          <1>     mov ecx, 8
  2694 00003ECE 803E3A              <1>     cmp byte [rsi], ":" ;If we the first char of the cmdline lbl is :, skip
  2695 00003ED1 7503                <1>     jne .startCopy
  2696 00003ED3 48FFC6              <1>     inc rsi
  2697                              <1> .startCopy:
  2698 00003ED6 AC                  <1>     lodsb
  2699 00003ED7 3C20                <1>     cmp al, SPC         ;Skip any spaces
  2700 00003ED9 74FB                <1>     je .startCopy       
  2701 00003EDB 3C0D                <1>     cmp al, CR          ;If CR, exit copy
  2702 00003EDD 740C                <1>     je .endCopy
  2703 00003EDF E8B7050000          <1>     call isALdelimiter  ;If delimiter char, exit copy
  2704 00003EE4 7405                <1>     jz .endCopy
  2705 00003EE6 AA                  <1>     stosb           
  2706 00003EE7 FFC9                <1>     dec ecx             ;Decrement counter
  2707 00003EE9 75EB                <1>     jnz .startCopy
  2708                              <1> .endCopy:
  2709                              <1> ;Now search the batch file for the label.
  2710 00003EEB F7D9                <1>     neg ecx
  2711 00003EED 81C108000000        <1>     add ecx, 8      ;Get the number of chars copied into ecx
  2712 00003EF3 498D505C            <1>     lea rdx, qword [r8 + fcb1]
  2713 00003EF7 880A                <1>     mov byte [rdx + fcb.driveNum], cl    ;Store the count in drivenum
  2714 00003EF9 E8CB000000          <1>     call .ucChars   ;Now we UC the chars in the string
  2715 00003EFE 48C7451300000000    <1>     mov qword [rbp + batBlockHdr.qBatOff], 0    ;Reset the file ptr
  2716 00003F06 E8D5DFFFFF          <1>     call batOpen    ;Open the batch file. Handle in ebx.
  2717                              <1> ;File opened from the start. Now start byte by byte read.
  2718                              <1> .notLabelLp:
  2719 00003F0B F60582C1FFFF10      <1>     test byte [statFlg1], batchEOF  
  2720 00003F12 0F859F000000        <1>     jnz .eof    ;If we hit an ^Z while processing file, don't loop again
  2721 00003F18 498D506D            <1>     lea rdx, [r8 + fcb2 + fcb.filename]  ;fcb2 for the bat search buffer
  2722                              <1> .findLbl:
  2723                              <1> ;Keep searching for a label
  2724 00003F1C E8F3DFFFFF          <1>     call batReadChar
  2725 00003F21 0F8490000000        <1>     jz .eof
  2726 00003F27 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2727 00003F2B 803A3A              <1>     cmp byte [rdx], ":"
  2728 00003F2E 75EC                <1>     jne .findLbl 
  2729                              <1> ;Here we found a candidate label. Take 8 chars w/o spaces and initial :
  2730 00003F30 31C9                <1>     xor ecx, ecx
  2731                              <1> .loadRead:
  2732 00003F32 E8DDDFFFFF          <1>     call batReadChar
  2733 00003F37 744D                <1>     jz .lblDone
  2734 00003F39 8A02                <1>     mov al, byte [rdx]  ;Get the char read into al
  2735 00003F3B 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2736 00003F3F 3C0D                <1>     cmp al, CR
  2737 00003F41 7433                <1>     je .lblDoneCR
  2738 00003F43 3C0A                <1>     cmp al, LF
  2739 00003F45 743F                <1>     je .lblDone
  2740 00003F47 3C20                <1>     cmp al, SPC
  2741 00003F49 74E7                <1>     je .loadRead
  2742 00003F4B E84B050000          <1>     call isALdelimiter
  2743 00003F50 740D                <1>     jz .pullEol ;If we have a delimiter char, pull it
  2744 00003F52 48FFC2              <1>     inc rdx ;Inc the storage pointer
  2745 00003F55 FFC1                <1>     inc ecx ;Inc the count
  2746 00003F57 81F908000000        <1>     cmp ecx, 8  ;Once we read 8 chars, readthru to end of line
  2747 00003F5D 75D3                <1>     jne .loadRead
  2748                              <1> .pullEol:
  2749 00003F5F E8B0DFFFFF          <1>     call batReadChar
  2750 00003F64 7420                <1>     jz .lblDone
  2751 00003F66 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] ;Inc the fp for each char read
  2752 00003F6A 803A0D              <1>     cmp byte [rdx], CR
  2753 00003F6D 7407                <1>     je .lblDoneCR
  2754 00003F6F 803A0A              <1>     cmp byte [rdx], LF
  2755 00003F72 7412                <1>     je .lblDone
  2756 00003F74 EBE9                <1>     jmp short .pullEol
  2757                              <1> .lblDoneCR:
  2758                              <1> ;Read a CR, check if the next char is an LF and scan past it.
  2759 00003F76 E899DFFFFF          <1>     call batReadChar
  2760 00003F7B 7409                <1>     jz .lblDone
  2761 00003F7D 803A0A              <1>     cmp byte [rdx], LF
  2762 00003F80 7504                <1>     jne .lblDone    ;No LF
  2763                              <1> ;Else include the LF in the count to go past
  2764 00003F82 48FF4513            <1>     inc qword [rbp + batBlockHdr.qBatOff] 
  2765                              <1> .lblDone:
  2766                              <1> ;Check what we have to see if it is possible to form a label
  2767 00003F86 498D506C            <1>     lea rdx, qword [r8 + fcb2]
  2768 00003F8A 880A                <1>     mov byte [rdx + fcb.driveNum], cl  ;Store the len in the drive letter
  2769 00003F8C E838000000          <1>     call .ucChars    ;Now we UC the chars in the fcb pointed to by rdx
  2770                              <1> ;Now compare the strings (trailing space padding)
  2771 00003F91 488D32              <1>     lea rsi, qword [rdx]
  2772 00003F94 AC                  <1>     lodsb   ;Get the count into al and move rsi to filename
  2773 00003F95 0FB6C8              <1>     movzx ecx, al   ;Move the count into ecx
  2774 00003F98 498D785D            <1>     lea rdi, qword [r8 + fcb1 + fcb.filename]
  2775 00003F9C 384FFF              <1>     cmp byte [rdi - 1], cl  ;If the counts are not equal, skip the cmp
  2776 00003F9F 0F8566FFFFFF        <1>     jne .notLabelLp
  2777 00003FA5 F3A6                <1>     repe cmpsb  ;Now do a string cmp
  2778 00003FA7 0F855EFFFFFF        <1>     jne .notLabelLp
  2779                              <1>     ;Here if the label is found. Bat FP points to the next line to read.
  2780 00003FAD E85ADFFFFF          <1>     call batClose   ;Close the handle
  2781 00003FB2 E9DEFEFFFF          <1>     jmp remark.go   ;Now behave like rem to get the next line!
  2782                              <1> .eof:
  2783                              <1> ;Print label not found, end batch mode and return
  2784 00003FB7 488D156ECCFFFF      <1>     lea rdx, badLbl
  2785 00003FBE E87F020000          <1>     call printString
  2786 00003FC3 E83CDDFFFF          <1>     call batFinish  ;Kill the batch processor
  2787                              <1>     return
    13                              <2> %%_ret:
    14 00003FC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2788                              <1> 
  2789                              <1> .ucChars:
  2790                              <1> ;Input: rdx -> Buffer where the first byte gives number of chars to UC
  2791                              <1> ;Output: The rdx[0] bytes from rdx[1] are UC'd
  2792 00003FC9 50                  <1>     push rax
  2793 00003FCA 51                  <1>     push rcx
  2794 00003FCB 56                  <1>     push rsi
  2795                              <1> 
  2796 00003FCC 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start of string to uppercase
  2797 00003FD0 0FB60A              <1>     movzx ecx, byte [rdx]       ;Get byte count to uppercase
  2798                              <1> .ucclp:
  2799 00003FD3 AC                  <1>     lodsb   ;Get the char
  2800 00003FD4 50                  <1>     push rax    ;Push it on stack
  2801 00003FD5 B813120000          <1>     mov eax, 1213h  ;Get DOS to UC it
  2802 00003FDA CD2F                <1>     int 2Fh
  2803 00003FDC 8846FF              <1>     mov byte [rsi - 1], al  ;Replace the char with it's UC'd version
  2804 00003FDF 58                  <1>     pop rax     ;Balance stack
  2805 00003FE0 FFC9                <1>     dec ecx     
  2806 00003FE2 75EF                <1>     jnz .ucclp  ;Go again if we havent exhausted all chars
  2807                              <1>     
  2808 00003FE4 5E                  <1>     pop rsi
  2809 00003FE5 59                  <1>     pop rcx
  2810 00003FE6 58                  <1>     pop rax
  2811                              <1>     return
    13                              <2> %%_ret:
    14 00003FE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003FE8 53                  <1>     push rbx
    11 00003FE9 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003FEB 803D39C0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003FF2 7240                <1>     jb .usDate
    14 00003FF4 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003FF6 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003FFB E8B0000000          <1>     call .printFirst
    18 00004000 8A1530C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00004006 B402                <1>     mov ah, 02h
    20 00004008 CD21                <1>     int 21h
    21                              <1> 
    22 0000400A 89C8                <1>     mov eax, ecx
    23 0000400C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00004011 C1E805              <1>     shr eax, 5
    25 00004014 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00004019 8A1517C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 0000401F B402                <1>     mov ah, 02h
    29 00004021 CD21                <1>     int 21h
    30                              <1> 
    31 00004023 89C8                <1>     mov eax, ecx
    32 00004025 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000402A C1E809              <1>     shr eax, 9
    34 0000402D 5B                  <1>     pop rbx ;Get the year signature back
    35 0000402E E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00004033 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00004034 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004039 C1E805              <1>     shr eax, 5
    41 0000403C E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00004041 8A15EFBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004047 B402                <1>     mov ah, 02h
    45 00004049 CD21                <1>     int 21h
    46                              <1> 
    47 0000404B 89C8                <1>     mov eax, ecx
    48 0000404D 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00004052 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004057 8A15D9BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000405D B402                <1>     mov ah, 02h
    53 0000405F CD21                <1>     int 21h
    54                              <1> 
    55 00004061 89C8                <1>     mov eax, ecx
    56 00004063 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004068 C1E809              <1>     shr eax, 9
    58 0000406B 5B                  <1>     pop rbx ;Get the year signature back
    59 0000406C E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00004071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00004072 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00004077 C1E809              <1>     shr eax, 9
    65 0000407A 5B                  <1>     pop rbx ;Get the year signature back
    66 0000407B E85C000000          <1>     call .printYear
    67                              <1> 
    68 00004080 8A15B0BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00004086 B402                <1>     mov ah, 02h
    70 00004088 CD21                <1>     int 21h
    71                              <1> 
    72 0000408A 89C8                <1>     mov eax, ecx
    73 0000408C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00004091 C1E805              <1>     shr eax, 5
    75 00004094 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00004099 8A1597BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 0000409F B402                <1>     mov ah, 02h
    79 000040A1 CD21                <1>     int 21h
    80                              <1> 
    81 000040A3 89C8                <1>     mov eax, ecx
    82 000040A5 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000040AA E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000040AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000040B0 51                  <1>     push rcx
    89 000040B1 E85D060000          <1>     call getDecimalWord
    90 000040B6 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000040B8 7504                <1>     jnz .skipSpace
    92 000040BA 88CD                <1>     mov ch, cl
    93 000040BC B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000040BE 88CA                <1>     mov dl, cl
    96 000040C0 B402                <1>     mov ah, 02h
    97 000040C2 CD21                <1>     int 21h
    98 000040C4 88EA                <1>     mov dl, ch
    99 000040C6 B402                <1>     mov ah, 02h
   100 000040C8 CD21                <1>     int 21h
   101 000040CA 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000040CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000040CC 51                  <1>     push rcx
   105 000040CD E841060000          <1>     call getDecimalWord
   106 000040D2 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000040D4 75E8                <1>     jnz .skipSpace
   108 000040D6 88CD                <1>     mov ch, cl
   109 000040D8 B130                <1>     mov cl, "0"
   110 000040DA EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000040DC 05BC070000          <1>     add eax, 1980
   113 000040E1 51                  <1>     push rcx
   114 000040E2 53                  <1>     push rbx
   115 000040E3 E82B060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000040E8 5B                  <1>     pop rbx
   117 000040E9 84DB                <1>     test bl, bl
   118 000040EB 740C                <1>     jz .twoDigitYear
   119 000040ED 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000040EF B402                <1>     mov ah, 02h
   121 000040F1 CD21                <1>     int 21h
   122 000040F3 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000040F5 B402                <1>     mov ah, 02h
   124 000040F7 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000040F9 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000040FC 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000040FE B402                <1>     mov ah, 02h
   129 00004100 CD21                <1>     int 21h
   130 00004102 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00004104 B402                <1>     mov ah, 02h
   132 00004106 CD21                <1>     int 21h
   133 00004108 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00004109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 0000410A 89C1                <1>     mov ecx, eax
   142 0000410C 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00004111 C1E80B              <1>     shr eax, 11
   144 00004114 803D21BFFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 0000411B 750B                <1>     jne .ampm
   146 0000411D E85A000000          <1>     call .printHours
   147 00004122 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004128 3D0C000000          <1>     cmp eax, 12
   151 0000412D 7713                <1>     ja .pm
   152 0000412F 7416                <1>     je .pm2
   153 00004131 E846000000          <1>     call .printHours
   154 00004136 E81D000000          <1>     call .printMinutes
   155 0000413B B261                <1>     mov dl, "a"
   156 0000413D B402                <1>     mov ah, 02h
   157 0000413F CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00004141 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00004142 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004147 E830000000          <1>     call .printHours
   163 0000414C E807000000          <1>     call .printMinutes
   164 00004151 B270                <1>     mov dl, "p"
   165 00004153 B402                <1>     mov ah, 02h
   166 00004155 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004157 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004158 8A15DABEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000415E B402                <1>     mov ah, 02h
   171 00004160 CD21                <1>     int 21h
   172                              <1> 
   173 00004162 89C8                <1>     mov eax, ecx
   174 00004164 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004169 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000416C 51                  <1>     push rcx
   178 0000416D E8A1050000          <1>     call getDecimalWord
   179 00004172 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00004174 7514                <1>     jnz .skipSpace
   181 00004176 88CD                <1>     mov ch, cl
   182 00004178 B130                <1>     mov cl, "0"
   183 0000417A EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000417C 51                  <1>     push rcx
   186 0000417D E891050000          <1>     call getDecimalWord
   187 00004182 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00004184 7504                <1>     jnz .skipSpace
   189 00004186 88CD                <1>     mov ch, cl
   190 00004188 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 0000418A 88CA                <1>     mov dl, cl
   193 0000418C B402                <1>     mov ah, 02h
   194 0000418E CD21                <1>     int 21h
   195 00004190 88EA                <1>     mov dl, ch
   196 00004192 B402                <1>     mov ah, 02h
   197 00004194 CD21                <1>     int 21h
   198 00004196 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00004197 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00004198 F605F7BEFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000419F 74(97)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000041A1 488D3D23CDFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000041A8 E8A0060000          <1>     call searchForEnvVar
   206 000041AD 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000041AF E803010000          <1>     call putCWDInPrompt
   209 000041B4 E8CF000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000041B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000041BA 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000041C1 AC                  <1>     lodsb   ;Get the char
   216 000041C2 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041C4 74(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000041C6 3C24                <1>     cmp al, "$"
   219 000041C8 7409                <1>     je .escapeChar
   220 000041CA 88C2                <1>     mov dl, al
   221 000041CC E8E1000000          <1>     call outChar    ;Prints the char in dl
   222 000041D1 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000041D3 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000041D4 E899020000          <1>     call ucChar ;Uppercase this char in al
   226 000041D9 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000041E0 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000041E5 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000041E7 740D                <1>     je .escapeFnd
   231 000041E9 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000041F0 FFC9                <1>     dec ecx
   233 000041F2 75F1                <1>     jnz .escapeLp
   234 000041F4 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000041F6 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 000041FD 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00004201 4801D8              <1>     add rax, rbx                ;Add these
   239 00004204 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004205 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004207 5E                  <1>     pop rsi
   242 00004208 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 0000420A 42                  <1>     db "B", 
   247 0000420B 7A00                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 0000420D 44                  <1>     db "D", 
   249 0000420E 7901                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00004210 45                  <1>     db "E", 
   251 00004211 6E00                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00004213 47                  <1>     db "G", 
   253 00004214 7E00                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00004216 48                  <1>     db "H", 
   255 00004217 8600                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004219 4C                  <1>     db "L", 
   257 0000421A 8200                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 0000421C 4E                  <1>     db "N", 
   259 0000421D 9F00                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 0000421F 50                  <1>     db "P", 
   261 00004220 AD00                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00004222 51                  <1>     db "Q", 
   263 00004223 7600                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00004225 54                  <1>     db "T", 
   265 00004226 1001                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004228 56                  <1>     db "V", 
   267 00004229 4000                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 0000422B 5F                  <1>     db "_", 
   269 0000422C 3100                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 0000422E 24                  <1>     db "$", 
   271 0000422F 7200                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLFecho:
   275 00004231 F6055EBEFFFFFF      <1>     test byte [echoFlg], -1
   276                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004238 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000423A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> printCRLF:
   278 0000423B 488D1542C6FFFF      <1>     lea rdx, crlf
   279                              <1> printString:
   280 00004242 B800090000          <1>     mov eax, 0900h  ;Print string
   281 00004247 CD21                <1>     int 21h
   282                              <1>     return
    13                              <2> %%_ret:
    14 00004249 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> putVersionInPrompt:
   285 0000424A 488D15E1C8FFFF      <1>     lea rdx, dosVer
   286 00004251 B409                <1>     mov ah, 09h ;Print String
   287 00004253 CD21                <1>     int 21h
   288 00004255 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   289 00004257 CD21                <1>     int 21h
   290 00004259 50                  <1>     push rax    ;Save minor version
   291 0000425A E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   292 0000425F E8AE010000          <1>     call printPackedBCD ;Print al
   293 00004264 B22E                <1>     mov dl, "."
   294 00004266 B402                <1>     mov ah, 02h
   295 00004268 CD21                <1>     int 21h
   296 0000426A 58                  <1>     pop rax
   297 0000426B 88E0                <1>     mov al, ah  ;Get the minor version low
   298 0000426D E883010000          <1>     call hexToBCD
   299 00004272 E89B010000          <1>     call printPackedBCD
   300                              <1>     return
    13                              <2> %%_ret:
    14 00004277 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> putEscInPrompt:
   302 00004278 B21B                <1>     mov dl, ESC
   303 0000427A EB36                <1>     jmp short outChar
   304                              <1> 
   305                              <1> putMoneyInPrompt:
   306 0000427C B224                <1>     mov dl, "$"
   307 0000427E EB32                <1>     jmp short outChar
   308                              <1> 
   309                              <1> putEquInPrompt:
   310 00004280 B23D                <1>     mov dl, "="
   311 00004282 EB2E                <1>     jmp short outChar
   312                              <1> 
   313                              <1> putPipeInPrompt:
   314 00004284 B27C                <1>     mov dl, "|"
   315 00004286 EB2A                <1>     jmp short outChar
   316                              <1> 
   317                              <1> putGTinPrompt:
   318 00004288 B23E                <1>     mov dl, ">"
   319 0000428A EB26                <1>     jmp short outChar
   320                              <1> 
   321                              <1> putLTinPrompt:
   322 0000428C B23C                <1>     mov dl, "<"
   323 0000428E EB22                <1>     jmp short outChar
   324                              <1> 
   325                              <1> putBSPinPrompt:
   326 00004290 488D1596CAFFFF      <1>     lea rdx, backSpace
   327 00004297 B903000000          <1>     mov ecx, 3
   328 0000429C BB01000000          <1>     mov ebx, 1
   329 000042A1 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   330 000042A6 CD21                <1>     int 21h
   331                              <1>     return
    13                              <2> %%_ret:
    14 000042A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> putDriveInPrompt:
   334 000042A9 E89C010000          <1>     call getCurrentDrive
   335 000042AE 0441                <1>     add al, "A" ;Convert to letter
   336 000042B0 88C2                <1>     mov dl, al
   337                              <1> outChar:
   338 000042B2 B402                <1>     mov ah, 02h ;Echo to STDOUT
   339 000042B4 CD21                <1>     int 21h
   340                              <1>     return
    13                              <2> %%_ret:
    14 000042B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> putCWDInPrompt:
   342 000042B7 E88E010000          <1>     call getCurrentDrive
   343 000042BC 3805D3BDFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   344 000042C2 C605CCBDFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   345 000042C9 7443                <1>     je .badDrive 
   346 000042CB 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   347 000042CD FEC2                <1>     inc dl
   348 000042CF 0441                <1>     add al, "A" ;Convert to letter
   349 000042D1 B43A                <1>     mov ah, ":"
   350 000042D3 488D3D77BDFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   351 000042DA 66AB                <1>     stosw   ;Store X:, rdi+=2
   352 000042DC 8A0547BDFFFF        <1>     mov al, byte [pathSep]
   353 000042E2 AA                  <1>     stosb   ;Store pathSep, inc rdi
   354 000042E3 B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   355 000042E8 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   356 000042EB CD21                <1>     int 21h
   357 000042ED 721F                <1>     jc .badDrive
   358 000042EF E874010000          <1>     call strlen
   359 000042F4 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   360                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   361 000042FA B800400000          <1>     mov eax, 4000h ;Write to handle
   362 000042FF BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 00004304 488D1546BDFFFF      <1>     lea rdx, currDirStr
   364 0000430B CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 0000430D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .badDrive:
   367                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   368 0000430E 488D15E5C8FFFF      <1>     lea rdx, badDrvMsg
   369 00004315 E928FFFFFF          <1>     jmp printString
   370                              <1> printFmtTime:
   371                              <1> ;Outputs the formatted time
   372 0000431A E847000000          <1>     call getTime
   373 0000431F 0FB6C5              <1>     movzx eax, ch
   374 00004322 E855FEFFFF          <1>     call printTime.printHours
   375 00004327 8A150BBDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   376 0000432D B402                <1>     mov ah, 02h
   377 0000432F CD21                <1>     int 21h
   378 00004331 0FB60521C3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   379 00004338 E82FFEFFFF          <1>     call printTime.printMinutesAlt
   380 0000433D 8A15F5BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   381 00004343 B402                <1>     mov ah, 02h
   382 00004345 CD21                <1>     int 21h
   383 00004347 0FB6050EC3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   384 0000434E E819FEFFFF          <1>     call printTime.printMinutesAlt
   385 00004353 B22E                <1>     mov dl, "."
   386 00004355 B402                <1>     mov ah, 02h
   387 00004357 CD21                <1>     int 21h
   388 00004359 0FB605FBC2FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   389 00004360 E807FEFFFF          <1>     call printTime.printMinutesAlt
   390                              <1>     return
    13                              <2> %%_ret:
    14 00004365 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> getTime:
   392 00004366 B42C                <1>     mov ah, 2Ch ;DOS get time
   393 00004368 CD21                <1>     int 21h
   394                              <1>     ;CH = hour (0-23)
   395                              <1> 	;CL = minutes (0-59)
   396                              <1> 	;DH = seconds (0-59)
   397                              <1> 	;DL = hundredths (0-99)
   398 0000436A 880DE9C2FFFF        <1>     mov byte [td1], cl
   399 00004370 882DE4C2FFFF        <1>     mov byte [td2], ch
   400 00004376 8815DFC2FFFF        <1>     mov byte [td3], dl
   401 0000437C 8835DAC2FFFF        <1>     mov byte [td4], dh
   402                              <1>     return
    13                              <2> %%_ret:
    14 00004382 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> printFmtDate:
   405                              <1> ;Outputs the formatted date
   406 00004383 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   407 00004388 CD21                <1>     int 21h
   408                              <1> 	;AL = day of the week (0=Sunday)
   409                              <1> 	;CX = year (1980-2099)
   410                              <1> 	;DH = month (1-12)
   411                              <1> 	;DL = day (1-31)
   412 0000438A 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   413 0000438F 66890DC3C2FFFF      <1>     mov word [td1], cx
   414 00004396 8815BFC2FFFF        <1>     mov byte [td3], dl
   415 0000439C 8835BAC2FFFF        <1>     mov byte [td4], dh
   416 000043A2 0FB6C0              <1>     movzx eax, al
   417 000043A5 89C3                <1>     mov ebx, eax
   418 000043A7 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   419 000043A9 01D8                <1>     add eax, ebx ;Make it 3 times 
   420 000043AB 488D15CAC6FFFF      <1>     lea rdx, dayName
   421 000043B2 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   422 000043B6 B903000000          <1>     mov ecx, 3  ;Print three chars
   423 000043BB BB01000000          <1>     mov ebx, 1  ;STDOUT
   424 000043C0 B440                <1>     mov ah, 40h ;Write to handle
   425 000043C2 CD21                <1>     int 21h
   426 000043C4 B220                <1>     mov dl, " "
   427 000043C6 E8E7FEFFFF          <1>     call outChar
   428                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   429                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   430                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   431 000043CB 0FB70587C2FFFF      <1>     movzx eax, word [td1]   ;Get this word
   432 000043D2 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   433 000043D5 0FB61D80C2FFFF      <1>     movzx ebx, byte [td4]
   434 000043DC C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   435 000043DF 09D8                <1>     or eax, ebx ;Add this date to eax
   436 000043E1 0FB61D73C2FFFF      <1>     movzx ebx, byte [td3]
   437 000043E8 09D8                <1>     or eax, ebx
   438 000043EA BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   439 000043EF E8F4FBFFFF          <1>     call printDate
   440                              <1>     return
    13                              <2> %%_ret:
    14 000043F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> 
   443                              <1> hexToBCD:
   444                              <1> ;Converts a Hex byte into two BCD digits
   445                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   446 000043F5 51                  <1>     push rcx
   447 000043F6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   448 000043F9 31C9                <1>     xor ecx, ecx
   449                              <1> .htb0:
   450 000043FB 3D0A000000          <1>     cmp eax, 10
   451 00004400 7209                <1>     jb .htb1
   452 00004402 2D0A000000          <1>     sub eax, 10
   453 00004407 FFC1                <1>     inc ecx
   454 00004409 EBF0                <1>     jmp short .htb0
   455                              <1> .htb1:
   456 0000440B C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   457 0000440E 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   458 00004410 59                  <1>     pop rcx
   459 00004411 C3                  <1>     ret
   460                              <1> 
   461                              <1> printPackedBCD:
   462                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   463                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   464                              <1> ;Preserves all registers
   465 00004412 50                  <1>     push rax
   466 00004413 52                  <1>     push rdx
   467 00004414 88C4                <1>     mov ah, al
   468 00004416 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   469 00004418 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   470 0000441B 7508                <1>     jnz .upperNybble
   471 0000441D B220                <1>     mov dl, " "
   472 0000441F B402                <1>     mov ah, 02h
   473 00004421 CD21                <1>     int 21h
   474 00004423 EB0E                <1>     jmp short .lowerNybble
   475                              <1> .upperNybble:
   476 00004425 50                  <1>     push rax
   477 00004426 C0EC04              <1>     shr ah, 4
   478 00004429 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   479 0000442C 88E2                <1>     mov dl, ah
   480 0000442E B402                <1>     mov ah, 02h ;Print DL
   481 00004430 CD21                <1>     int 21h
   482 00004432 58                  <1>     pop rax
   483                              <1> .lowerNybble:
   484 00004433 0430                <1>     add al, "0"
   485 00004435 88C2                <1>     mov dl, al
   486 00004437 B402                <1>     mov ah, 02h ;Print DL
   487 00004439 CD21                <1>     int 21h
   488 0000443B 5A                  <1>     pop rdx
   489 0000443C 58                  <1>     pop rax
   490                              <1>     return
    13                              <2> %%_ret:
    14 0000443D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> setDrive:
   493                              <1> ;Input: dl = 0 based Drive number to set to
   494                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   495                              <1> ;AX trashed.
   496 0000443E B40E                <1>     mov ah, 0Eh ;Set drive to dl
   497 00004440 CD21                <1>     int 21h 
   498 00004442 E803000000          <1>     call getCurrentDrive
   499 00004447 38D0                <1>     cmp al, dl  ;Is this the same drive?
   500                              <1>     return
    13                              <2> %%_ret:
    14 00004449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> getCurrentDrive:
   502                              <1> ;Returns the 0 based current drive in al
   503 0000444A B419                <1>     mov ah, 19h
   504 0000444C CD21                <1>     int 21h
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000444E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> strcpy:
   508                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   509                              <1> ;rsi -> Source
   510                              <1> ;rdi -> Destination
   511 0000444F 51                  <1>     push rcx
   512 00004450 57                  <1>     push rdi
   513 00004451 4889F7              <1>     mov rdi, rsi
   514 00004454 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   515 00004459 5F                  <1>     pop rdi
   516 0000445A F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   517 0000445C 59                  <1>     pop rcx
   518                              <1>     return
    13                              <2> %%_ret:
    14 0000445D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> strcpy2:
   521                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   522                              <1> ;rsi -> Source
   523                              <1> ;rdi -> Destination
   524 0000445E 56                  <1>     push rsi
   525 0000445F 57                  <1>     push rdi
   526 00004460 E8EAFFFFFF          <1>     call strcpy 
   527 00004465 5F                  <1>     pop rdi
   528 00004466 5E                  <1>     pop rsi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00004467 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> strlen:
   532                              <1> ;Gets the length of a ASCIIZ string
   533                              <1> ;Input: rdi = Source buffer
   534                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   535 00004468 50                  <1>     push rax
   536 00004469 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   537 0000446E CD2F                <1>     int 2fh
   538 00004470 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 00004471 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> ucChar:
   542                              <1> ;Input: al = Char to uppercase
   543                              <1> ;Output: al = Adjusted char 
   544 00004472 53                  <1>     push rbx
   545 00004473 50                  <1>     push rax    ;Push the char twice on the stack
   546 00004474 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   547 00004479 CD2F                <1>     int 2fh         ;Returns the processed char in al
   548 0000447B 5B                  <1>     pop rbx         ;Pop the old word off the stack
   549 0000447C 5B                  <1>     pop rbx
   550                              <1>     return
    13                              <2> %%_ret:
    14 0000447D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> normalisePath:
   553                              <1> ;Uppercases chars and flips pathseps
   554                              <1> ;Input: rsi -> Path to normalise
   555 0000447E 50                  <1>     push rax
   556 0000447F 57                  <1>     push rdi
   557 00004480 4889F7              <1>     mov rdi, rsi
   558 00004483 B811120000          <1>     mov eax, 1211h
   559 00004488 CD2F                <1>     int 2fh
   560 0000448A 5F                  <1>     pop rdi
   561 0000448B 58                  <1>     pop rax
   562                              <1>     return
    13                              <2> %%_ret:
    14 0000448C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> skipDelimiters:
   565                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   566                              <1> ; command delimiters but a subset thereof. 
   567                              <1> ;These are the same across all codepages.
   568                              <1> ;Input: rsi must point to the start of the data string
   569                              <1> ;Output: rsi points to the first non-delimiter char
   570 0000448D 50                  <1>     push rax
   571                              <1> .l1:
   572 0000448E AC                  <1>     lodsb
   573 0000448F E807000000          <1>     call isALdelimiter
   574 00004494 74F8                <1>     jz .l1
   575                              <1> .exit:
   576 00004496 58                  <1>     pop rax
   577 00004497 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   578                              <1>     return
    13                              <2> %%_ret:
    14 0000449A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> isALdelimiter:
   581                              <1> ;Returns: ZF=NZ if al is not a command separator 
   582                              <1> ;         ZF=ZE if al is a command separator
   583 0000449B 3C20                <1>     cmp al, " "
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000449D 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 0000449F 3C3B                <1>     cmp al, ";"
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044A1 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000044A3 3C3D                <1>     cmp al, "="
   588                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044A5 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   589 000044A7 3C2C                <1>     cmp al, ","
   590                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044A9 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   591 000044AB 3C09                <1>     cmp al, TAB
   592                              <1>     return
    13                              <2> %%_ret:
    14 000044AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> clearCommandState:
   595                              <1> ;Clears the command state
   596 000044AE 488D3DEFBBFFFF      <1>     lea rdi, cmdStatePtr
   597 000044B5 B907000000          <1>     mov ecx, cmdStateL
   598 000044BA 31C0                <1>     xor eax, eax
   599 000044BC F3AA                <1>     rep stosb
   600                              <1>     return
    13                              <2> %%_ret:
    14 000044BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> clearCommandLineState:
   603                              <1> ;Clears the command line state after a 0Dh encountered
   604 000044BF 488D3DD3BBFFFF      <1>     lea rdi, cmdLineStatePtr
   605 000044C6 B912000000          <1>     mov ecx, cmdLineStateL
   606 000044CB 31C0                <1>     xor eax, eax
   607 000044CD F3AA                <1>     rep stosb
   608 000044CF C705C1BBFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   608 000044D8 FF                  <1>
   609 000044D9 C705BDBBFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   609 000044E2 FF                  <1>
   610                              <1> ;Close all handles from 5->MAX
   611 000044E3 0FB70D3DBBFFFF      <1>     movzx ecx, word [numHdls]
   612 000044EA BB05000000          <1>     mov ebx, 5
   613                              <1> .lp:
   614 000044EF B43E                <1>     mov ah, 3Eh ;File close
   615 000044F1 CD21                <1>     int 21h
   616 000044F3 FFC3                <1>     inc ebx ;Goto next file
   617 000044F5 39CB                <1>     cmp ebx, ecx
   618 000044F7 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   619                              <1>     return
    13                              <2> %%_ret:
    14 000044F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> asciiFilenameToFCB:
   622                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   623                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   624                              <1> ;Also doesn't check if chars are valid
   625                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   626                              <1> ;Name is space padded.
   627                              <1> ;Input: rsi = ASCII string buffer
   628                              <1> ;       rdi = FCB name buffer
   629                              <1> ;Output: al = Char that terminated the source string 
   630 000044FA 53                  <1>     push rbx    
   631 000044FB 57                  <1>     push rdi
   632 000044FC B90B000000          <1>     mov ecx, 11
   633 00004501 B020                <1>     mov al, " "
   634 00004503 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   635 00004505 5F                  <1>     pop rdi
   636 00004506 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   637                              <1>     ;Preprocess for Dir Searches
   638 00004509 803E2E              <1>     cmp byte [rsi], "."
   639 0000450C 7509                <1>     jne .processName
   640 0000450E A4                  <1>     movsb   ;Store the first dot
   641 0000450F 803E2E              <1>     cmp byte [rsi], "."
   642 00004512 752C                <1>     jne .exitBadChar
   643 00004514 A4                  <1>     movsb
   644 00004515 EB29                <1>     jmp short .exitBadChar
   645                              <1> .processName:
   646 00004517 AC                  <1>     lodsb   ;Get the char in al
   647 00004518 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   648 0000451A 7426                <1>     jz .exit
   649 0000451C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   650 0000451E 7407                <1>     je .extSpace
   651 00004520 3C2E                <1>     cmp al, "."
   652 00004522 740C                <1>     je .ext
   653 00004524 AA                  <1>     stosb   ;Store the char
   654 00004525 EBF0                <1>     jmp short .processName
   655                              <1> .extSpace:
   656                              <1> ;Now we scan for a period in the name
   657 00004527 AC                  <1>     lodsb   ;Get a char and increase rsi
   658 00004528 84C0                <1>     test al, al
   659 0000452A 7416                <1>     jz .exit
   660 0000452C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   661 0000452E 75F7                <1>     jne .extSpace   ; keep searching
   662                              <1> .ext:
   663 00004530 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   664                              <1> .processExt:
   665 00004534 AC                  <1>     lodsb
   666 00004535 84C0                <1>     test al, al
   667 00004537 7409                <1>     jz .exit
   668 00004539 3C20                <1>     cmp al, " "
   669 0000453B 7405                <1>     je .exit
   670 0000453D AA                  <1>     stosb
   671 0000453E EBF4                <1>     jmp short .processExt
   672                              <1> .exitBadChar:
   673 00004540 30C0                <1>     xor al, al  ;Return a null terminator
   674                              <1> .exit:
   675 00004542 5B                  <1>     pop rbx
   676                              <1>     return
    13                              <2> %%_ret:
    14 00004543 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> 
   678                              <1> findLastPathComponant:
   679                              <1> ;Finds the last path componant of an ASCIIZ path string
   680                              <1> ;Input: rdi -> Head of the path to find last componant on
   681                              <1> ;Output: rdi -> Start of the last componant
   682 00004544 50                  <1>     push rax
   683 00004545 51                  <1>     push rcx
   684 00004546 31C9                <1>     xor ecx, ecx
   685 00004548 FFC9                <1>     dec ecx
   686 0000454A 31C0                <1>     xor eax, eax
   687 0000454C F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   688 0000454E F7D1                <1>     not ecx     ;This gets the count of chars  
   689 00004550 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   690 00004553 8A05D0BAFFFF        <1>     mov al, byte [pathSep]
   691 00004559 FD                  <1>     std
   692 0000455A F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   693 0000455C FC                  <1>     cld
   694 0000455D 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   695 0000455F 48FFC7              <1>     inc rdi     ;Point at pathsep
   696                              <1> .exit:
   697 00004562 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   698 00004565 59                  <1>     pop rcx
   699 00004566 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 00004567 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> FCBToAsciiz:
   703                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   704                              <1> ;Name is space padded too
   705                              <1> ;Input: rsi = FCB name buffer
   706                              <1> ;       rdi = ASCIIZ string buffer
   707 00004568 B908000000          <1>     mov ecx, 8
   708 0000456D F3A4                <1>     rep movsb   ;Move the name over
   709                              <1> .scanNameSpace:
   710 0000456F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   711 00004573 750D                <1>     jne .ext
   712 00004575 48FFCF              <1>     dec rdi
   713 00004578 FFC1                <1>     inc ecx
   714 0000457A 81F908000000        <1>     cmp ecx, 8
   715 00004580 72ED                <1>     jb .scanNameSpace
   716                              <1> .ext:
   717 00004582 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   718 00004587 7506                <1>     jne .validExt
   719 00004589 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   720 0000458D 7415                <1>     je .exit
   721                              <1> .validExt:
   722 0000458F B02E                <1>     mov al, "." ;We have a valid extension, store a period
   723 00004591 AA                  <1>     stosb
   724 00004592 B903000000          <1>     mov ecx, 3
   725 00004597 F3A4                <1>     rep movsb   ;Move the three extension chars over
   726                              <1> .scanExtSpace:
   727 00004599 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   728 0000459D 7505                <1>     jne .exit
   729 0000459F 48FFCF              <1>     dec rdi
   730 000045A2 EBF5                <1>     jmp short .scanExtSpace
   731                              <1> .exit:
   732 000045A4 31C0                <1>     xor eax, eax
   733 000045A6 AA                  <1>     stosb   ;Store a null at the end
   734                              <1>     return
    13                              <2> %%_ret:
    14 000045A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> cpDelimOrCtrlStringToBufz:
   737                              <1> ;Copy a delimited or control char terminated string to a buffer
   738                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   739                              <1> ;       rdi -> Buffer to store null terminated string in
   740                              <1> ;Output: rsi -> First char past string end
   741                              <1> ;       rdi -> One char past null terminator on string buffer
   742 000045A8 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   743                              <1> .lp:
   744 000045AB AC                  <1>     lodsb
   745 000045AC 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   746 000045AE 760A                <1>     jbe .exit
   747 000045B0 E8E6FEFFFF          <1>     call isALdelimiter
   748 000045B5 7403                <1>     je .exit
   749 000045B7 AA                  <1>     stosb
   750 000045B8 EBF1                <1>     jmp short .lp
   751                              <1> .exit:
   752 000045BA 31C0                <1>     xor eax, eax
   753 000045BC AA                  <1>     stosb   ;Store a null terminator
   754                              <1>     return
    13                              <2> %%_ret:
    14 000045BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> 
   757                              <1> cpDelimPathToBufz:
   758                              <1> ;Copy a delimited path into buffer and null terminate.
   759                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   760                              <1> ;       rdi -> Buffer to store null terminated path in
   761                              <1> ;Output: rsi -> First char past pathname delimiter
   762                              <1> ;       rdi -> One char past null terminator on pathname buffer
   763 000045BE 53                  <1>     push rbx
   764 000045BF 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   765 000045C2 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   766                              <1> .lp:
   767 000045C5 AC                  <1>     lodsb   ;Get the char
   768 000045C6 3C0D                <1>     cmp al, CR
   769 000045C8 7412                <1>     je .gotRedirPath
   770 000045CA E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   771 000045CF 740B                <1>     jz .gotRedirPath 
   772 000045D1 3A0553BAFFFF        <1>     cmp al, byte [switchChar]
   773 000045D7 7403                <1>     je .gotRedirPath
   774 000045D9 AA                  <1>     stosb   ;Store this char and loop next char
   775 000045DA EBE9                <1>     jmp short .lp
   776                              <1> .gotRedirPath:
   777 000045DC 50                  <1>     push rax    ;Save the char on stack
   778 000045DD 30C0                <1>     xor al, al  ;Get null terminator char
   779 000045DF 4829FB              <1>     sub rbx, rdi
   780 000045E2 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   781 000045E9 7412                <1>     je .notColon
   782 000045EB 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   783 000045F2 7409                <1>     je .notColon
   784 000045F4 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   785 000045F8 7503                <1>     jne .notColon
   786 000045FA 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   787                              <1> .notColon:
   788 000045FD AA                  <1>     stosb   ;Store the null terminator for the redir path
   789 000045FE 58                  <1>     pop rax ;Get back the char in al
   790 000045FF 5B                  <1>     pop rbx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00004600 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> buildCommandPath:
   794                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   795 00004601 0FB6059DBAFFFF      <1>     movzx eax, byte [arg1Off]
   796 00004608 4C8B0500BAFFFF      <1>     mov r8, [pspPtr]
   797 0000460F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   798 00004616 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   799                              <1> copyArgumentToSearchSpec:
   800                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   801                              <1> ; and null terminates
   802 00004619 488D3D70BEFFFF      <1>     lea rdi, searchSpec
   803 00004620 E899FFFFFF          <1>     call cpDelimPathToBufz
   804                              <1>     return
    13                              <2> %%_ret:
    14 00004625 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> 
   806                              <1> scanForWildcards:
   807                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   808                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   809 00004626 50                  <1>     push rax
   810 00004627 56                  <1>     push rsi
   811                              <1> .lp:
   812 00004628 AC                  <1>     lodsb
   813 00004629 3C3F                <1>     cmp al, "?"
   814 0000462B 740A                <1>     je .exit
   815 0000462D 3C2A                <1>     cmp al, "*"
   816 0000462F 7406                <1>     je .exit
   817 00004631 84C0                <1>     test al, al
   818 00004633 75F3                <1>     jnz .lp
   819 00004635 FEC0                <1>     inc al  ;This will clear the ZF
   820                              <1> .exit:
   821 00004637 5E                  <1>     pop rsi
   822 00004638 58                  <1>     pop rax
   823                              <1>     return
    13                              <2> %%_ret:
    14 00004639 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> printDecimalValLB:
   826                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   827                              <1> ; blanks and inserts commas where appropriate.
   828                              <1> ;Input: rax = Value to print
   829                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   830 0000463A 4889E5              <1>     mov rbp, rsp
   831 0000463D 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   832 00004640 4889EF              <1>     mov rdi, rbp
   833 00004643 4829CF              <1>     sub rdi, rcx
   834 00004646 50                  <1>     push rax
   835 00004647 51                  <1>     push rcx
   836 00004648 57                  <1>     push rdi
   837 00004649 31C0                <1>     xor eax, eax
   838 0000464B F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   839 0000464D 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   840 0000464E 59                  <1>     pop rcx
   841 0000464F 58                  <1>     pop rax
   842 00004650 51                  <1>     push rcx    ;Save this value to keep the buffer length
   843 00004651 E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   844 00004656 59                  <1>     pop rcx     ;Now print the buffer
   845 00004657 4889EF              <1>     mov rdi, rbp
   846 0000465A 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   847 0000465D 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   848                              <1> .skipLp:
   849 0000465F 8A1F                <1>     mov bl, byte [rdi]
   850 00004661 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   851 00004663 7513                <1>     jne .printLp
   852 00004665 B402                <1>     mov ah, 02h
   853 00004667 B220                <1>     mov dl, " "
   854 00004669 CD21                <1>     int 21h
   855 0000466B 48FFCF              <1>     dec rdi
   856 0000466E FFC9                <1>     dec ecx
   857 00004670 81F901000000        <1>     cmp ecx, 1
   858 00004676 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   859                              <1> .printLp:
   860 00004678 8A17                <1>     mov dl, byte [rdi]
   861 0000467A B402                <1>     mov ah, 02h
   862 0000467C CD21                <1>     int 21h
   863 0000467E 48FFCF              <1>     dec rdi
   864 00004681 FFC9                <1>     dec ecx
   865 00004683 75F3                <1>     jnz .printLp
   866                              <1> .exit:
   867 00004685 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   868                              <1>     return
    13                              <2> %%_ret:
    14 00004688 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   869                              <1> .errPrint:
   870                              <1> ;Print a default ? symbol if an overflow occurs.
   871 00004689 B23F                <1>     mov dl, "?"
   872 0000468B B800020000          <1>     mov eax, 0200h
   873 00004690 CD21                <1>     int 21h
   874 00004692 EBF1                <1>     jmp short .exit
   875                              <1> 
   876                              <1> decimalise:
   877                              <1> ;Input: rax = value to decimalise
   878                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   879                              <1> ;       ecx = buffer length
   880                              <1> ;Output: Buffer @ rdi filled in! 
   881                              <1> ;       ecx = Number of chars in buffer.
   882                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   883                              <1> ;   we return with CF=CY. Else, CF=NC.
   884 00004694 57                  <1>     push rdi
   885 00004695 89CE                <1>     mov esi, ecx    
   886 00004697 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   887 00004699 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   888                              <1> .lp:
   889 0000469E 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   890 000046A1 7514                <1>     jne .skipSep
   891 000046A3 4038CE              <1>     cmp sil, cl
   892 000046A6 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   893 000046A8 8A1584B9FFFF        <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   894 000046AE 8817                <1>     mov byte [rdi], dl
   895 000046B0 48FFC7              <1>     inc rdi 
   896 000046B3 FEC1                <1>     inc cl          ;Inc number of chars
   897 000046B5 30ED                <1>     xor ch, ch      ;Reset comma counter
   898                              <1> .skipSep:
   899 000046B7 4038CE              <1>     cmp sil, cl
   900 000046BA 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   901 000046BC 31D2                <1>     xor edx, edx
   902 000046BE 48F7F3              <1>     div rbx         ;Divide rax by 10
   903 000046C1 80C230              <1>     add dl, "0"     
   904 000046C4 8817                <1>     mov byte [rdi], dl
   905 000046C6 48FFC7              <1>     inc rdi
   906 000046C9 FEC1                <1>     inc cl          ;Inc number of chars
   907 000046CB FEC5                <1>     inc ch          ;Inc to keep track of commas
   908 000046CD 4885C0              <1>     test rax, rax
   909 000046D0 75CC                <1>     jnz .lp
   910                              <1> ;The test cleared CF if we are here
   911 000046D2 0FB6C9              <1>     movzx ecx, cl
   912                              <1> .exit:
   913 000046D5 5F                  <1>     pop rdi
   914                              <1>     return
    13                              <2> %%_ret:
    14 000046D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   915                              <1> .exitErr:
   916 000046D7 F9                  <1>     stc
   917 000046D8 EBFB                <1>     jmp short .exit
   918                              <1> printDecimalWord:
   919                              <1> ;Takes a word in ax and print it's decimal representation.
   920                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   921                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   922                              <1> ;Input: eax = Zero extended word to print
   923 000046DA 31C9                <1>     xor ecx, ecx
   924 000046DC 85C0                <1>     test eax, eax
   925 000046DE 750C                <1>     jnz .notZero
   926 000046E0 B930000000          <1>     mov ecx, "0"
   927 000046E5 BD01000000          <1>     mov ebp, 1  ;Print one digit
   928 000046EA EB19                <1>     jmp short .goPrint
   929                              <1> .notZero:
   930 000046EC 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   931 000046EE BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   932                              <1> .mainLp:
   933 000046F3 FFC5                <1>     inc ebp
   934 000046F5 C1E108              <1>     shl ecx, 8    ;Space for next nybble
   935 000046F8 31D2                <1>     xor edx, edx
   936 000046FA F7F6                <1>     div esi
   937 000046FC 80C230              <1>     add dl, '0'
   938 000046FF 88D1                <1>     mov cl, dl    ;Save remainder byte
   939 00004701 85C0                <1>     test eax, eax   ;We zero yet?
   940 00004703 75EE                <1>     jnz .mainLp
   941                              <1> .goPrint:
   942 00004705 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   943 00004707 C1E908              <1>     shr ecx, 8    ;Get next digit down
   944 0000470A B402                <1>     mov ah, 02h
   945 0000470C CD21                <1>     int 21h
   946 0000470E FFCD                <1>     dec ebp
   947 00004710 75F3                <1>     jnz .goPrint
   948                              <1>     return
    13                              <2> %%_ret:
    14 00004712 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   949                              <1> 
   950                              <1> getDecimalWord:
   951                              <1> ;Works on MAX A dword in eax
   952                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   953 00004713 31C9                <1>     xor ecx, ecx
   954 00004715 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   955 00004717 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   956                              <1> .dpfb0:
   957 0000471C FFC5                <1>     inc ebp
   958 0000471E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   959 00004722 31D2                <1>     xor edx, edx
   960 00004724 48F7F3              <1>     div rbx
   961 00004727 80C230              <1>     add dl, '0'
   962 0000472A 80FA39              <1>     cmp dl, '9'
   963 0000472D 7603                <1>     jbe .dpfb1
   964 0000472F 80C207              <1>     add dl, 'A'-'0'-10
   965                              <1> .dpfb1:
   966 00004732 88D1                <1>     mov cl, dl    ;Save remainder byte
   967 00004734 4885C0              <1>     test rax, rax
   968 00004737 75E3                <1>     jnz .dpfb0
   969                              <1>     return
    13                              <2> %%_ret:
    14 00004739 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   970                              <1> getByte:
   971                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   972 0000473A E807000000          <1>     call getNum
   973 0000473F 3D00010000          <1>     cmp eax, 100h
   974 00004744 F5                  <1>     cmc
   975                              <1>     return
    13                              <2> %%_ret:
    14 00004745 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   976                              <1> getNum:
   977                              <1> ;Gets a number from a command line.
   978                              <1> ;Input: rsi -> String to get number from
   979                              <1> ;Output: rsi -> Char which terminated the accumulation
   980                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   981                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   982 00004746 51                  <1>     push rcx
   983 00004747 53                  <1>     push rbx
   984 00004748 31DB                <1>     xor ebx, ebx
   985 0000474A 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   986 0000474C 31C0                <1>     xor eax, eax    
   987                              <1> .lp:
   988 0000474E AC                  <1>     lodsb
   989 0000474F 3C30                <1>     cmp al, "0"
   990 00004751 721B                <1>     jb .exit
   991 00004753 3C39                <1>     cmp al, "9"
   992 00004755 7717                <1>     ja .exit
   993 00004757 2C30                <1>     sub al, "0"                     ;Convert to binary 
   994 00004759 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   995 0000475D D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   996 0000475F 01C1                <1>     add ecx, eax
   997 00004761 FFC3                <1>     inc ebx
   998 00004763 81FB09000000        <1>     cmp ebx, 9
   999 00004769 75E3                <1>     jne short .lp   ;Get next digit
  1000 0000476B F9                  <1>     stc             ;Yikesaroony
  1001 0000476C EB01                <1>     jmp short .exitBad
  1002                              <1> .exit:
  1003 0000476E F8                  <1>     clc             ;Clear CF
  1004                              <1> .exitBad:
  1005 0000476F 89C8                <1>     mov eax, ecx
  1006 00004771 5B                  <1>     pop rbx
  1007 00004772 59                  <1>     pop rcx
  1008 00004773 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
  1009                              <1>     return
    13                              <2> %%_ret:
    14 00004776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> 
  1011                              <1> 
  1012                              <1> freezePC:
  1013 00004777 488D15C1C6FFFF      <1>     lea rdx, memBad1
  1014 0000477E B409                <1>     mov ah, 09h
  1015 00004780 CD21                <1>     int 21h
  1016                              <1> .altEP:
  1017 00004782 488D15DFC6FFFF      <1>     lea rdx, memBad3
  1018 00004789 B409                <1>     mov ah, 09h
  1019 0000478B CD21                <1>     int 21h
  1020                              <1> .lp:
  1021 0000478D F390                <1>     pause
  1022 0000478F F4                  <1>     hlt
  1023 00004790 EBFB                <1>     jmp short .lp
  1024                              <1> 
  1025                              <1> setDTA:
  1026 00004792 50                  <1>     push rax
  1027 00004793 52                  <1>     push rdx
  1028 00004794 488D157BB9FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1029 0000479B B8001A0000          <1>     mov eax, 1A00h
  1030 000047A0 CD21                <1>     int 21h
  1031 000047A2 5A                  <1>     pop rdx
  1032 000047A3 58                  <1>     pop rax
  1033                              <1>     return
    13                              <2> %%_ret:
    14 000047A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> 
  1035                              <1> getDTA:
  1036 000047A5 488D156AB9FFFF      <1>     lea rdx, cmdFFBlock
  1037                              <1>     return
    13                              <2> %%_ret:
    14 000047AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> resetIDTentries:
  1040                              <1> ;Resets the IDT entries if they were changed by dead child process
  1041 000047AD 488D1571020000      <1>     lea rdx, critErrorHandler
  1042 000047B4 B824250000          <1>     mov eax, 2524h
  1043 000047B9 CD21                <1>     int 21h
  1044 000047BB 488D1577010000      <1>     lea rdx, ctrlCHandler
  1045 000047C2 B823250000          <1>     mov eax, 2523h
  1046 000047C7 CD21                <1>     int 21h
  1047 000047C9 488D155DCDFFFF      <1>     lea rdx, appRet
  1048 000047D0 B822250000          <1>     mov eax, 2522h
  1049 000047D5 CD21                <1>     int 21h
  1050                              <1>     return
    13                              <2> %%_ret:
    14 000047D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> 
  1052                              <1> ;-------------------------------
  1053                              <1> ; Environment utility functions
  1054                              <1> ;-------------------------------
  1055                              <1> 
  1056                              <1> cmpEnvVar:
  1057                              <1> ;Checks that we have found the environment variable we are looking for.
  1058                              <1> ;Input: rsi -> Environment var to verify the name of
  1059                              <1> ;       rdi -> Supplied var name to compare against
  1060                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1061 000047D8 56                  <1>     push rsi
  1062 000047D9 57                  <1>     push rdi
  1063 000047DA 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs. rdi -> env. rsi -> given.
  1064                              <1> .lp:
  1065 000047DD AC                  <1>     lodsb               ;Pick up from environment string
  1066 000047DE E88FFCFFFF          <1>     call ucChar         ;Upper case it!
  1067 000047E3 3807                <1>     cmp byte [rdi], al  
  1068 000047E5 7509                <1>     jne .exit
  1069 000047E7 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1070 000047E9 7405                <1>     je .exit
  1071 000047EB 48FFC7              <1>     inc rdi
  1072 000047EE EBED                <1>     jmp short .lp
  1073                              <1> .exit:
  1074 000047F0 5F                  <1>     pop rdi
  1075 000047F1 5E                  <1>     pop rsi
  1076                              <1>     return
    13                              <2> %%_ret:
    14 000047F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> checkEnvGoodAndGet:
  1079                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1080                              <1> ;Output:
  1081                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1082                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1083                              <1> ;           rsi -> Environment pointer
  1084 000047F3 50                  <1>     push rax
  1085 000047F4 51                  <1>     push rcx
  1086 000047F5 57                  <1>     push rdi
  1087 000047F6 4150                <1>     push r8
  1088 000047F8 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1089 000047FC 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1090 000047FF 741A                <1>     jz .badExit
  1091 00004801 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1092 00004804 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1093                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1094 00004807 31C0                <1>     xor eax, eax
  1095                              <1> .pathNulScan:
  1096 00004809 F2AE                <1>     repne scasb
  1097 0000480B 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1098 0000480D 740C                <1>     jz .badExit
  1099 0000480F 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1100 00004811 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1101 00004813 31C0                <1>     xor eax, eax
  1102 00004815 FFC0                <1>     inc eax ;Clear the ZF
  1103 00004817 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1104                              <1> .badExit:
  1105 0000481B 4158                <1>     pop r8
  1106 0000481D 5F                  <1>     pop rdi
  1107 0000481E 59                  <1>     pop rcx
  1108 0000481F 58                  <1>     pop rax
  1109                              <1>     return
    13                              <2> %%_ret:
    14 00004820 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> 
  1111                              <1> 
  1112                              <1> findEnvSpace:
  1113                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1114                              <1> ; free space in the pointer and a count of free space in the environment.
  1115                              <1> ;If count is zero, pointer is not to be used.
  1116                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1117 00004821 31C9                <1>     xor ecx, ecx
  1118 00004823 31C0                <1>     xor eax, eax    ;Clear eax too
  1119 00004825 51                  <1>     push rcx
  1120 00004826 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1121 0000482B 59                  <1>     pop rcx
  1122                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000482C 74(20)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1123 0000482E 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1124 00004832 FFC9                <1>     dec ecx ;Make into a large counter
  1125 00004834 4889F7              <1>     mov rdi, rsi    
  1126                              <1> .endsearch:
  1127 00004837 F2AE                <1>     repne scasb ;Scan
  1128 00004839 803F00              <1>     cmp byte [rdi], 0
  1129 0000483C 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1130                              <1>     ;Here we are at the end of the environment
  1131 0000483E F7D9                <1>     neg ecx
  1132 00004840 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1133 00004842 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1134 00004845 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1135 00004848 29C8                <1>     sub eax, ecx
  1136 0000484A 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1137                              <1>     return
    13                              <2> %%_ret:
    14 0000484C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1138                              <1> 
  1139                              <1> searchForEnvVar:
  1140                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1141                              <1> ;Input: rdi -> Var name to look for.
  1142                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1143 0000484D 57                  <1>     push rdi
  1144 0000484E 51                  <1>     push rcx
  1145 0000484F 52                  <1>     push rdx
  1146 00004850 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1147 00004854 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1148                              <1> .varLp:
  1149 00004857 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1150 0000485A E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1151 0000485F 7416                <1>     je .varFound
  1152 00004861 31C0                <1>     xor eax, eax        ;Search for a null
  1153 00004863 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1154 00004866 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1155 0000486B F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1156 0000486D 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1157 0000486F 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1158 00004871 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1159 00004874 EBE1                <1>     jmp short .varLp    ;And scan again!
  1160                              <1> .varNotFound:
  1161 00004876 F9                  <1>     stc
  1162                              <1> .varFound:
  1163 00004877 59                  <1>     pop rcx
  1164 00004878 5A                  <1>     pop rdx
  1165 00004879 5F                  <1>     pop rdi
  1166                              <1>     return
    13                              <2> %%_ret:
    14 0000487A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> envFree:
  1169                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1170                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1171                              <1> ; free byte of the environment!
  1172                              <1> ;Input: rsi -> Variable to free.
  1173                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1174                              <1> ;        ecx = Number of free bytes in env
  1175 0000487B 4889F7              <1>     mov rdi, rsi
  1176 0000487E 31C0                <1>     xor eax, eax
  1177                              <1> .freeLp:
  1178 00004880 803F00              <1>     cmp byte [rdi], 0
  1179 00004883 7403                <1>     je .exitLp
  1180 00004885 AA                  <1>     stosb
  1181 00004886 EBF8                <1>     jmp short .freeLp
  1182                              <1> .exitLp:
  1183                              <1> ;rdi points to the terminating null of the var we just deleted
  1184                              <1> ;rsi points to the start of the free space
  1185 00004888 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1186 0000488B 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1187 00004890 7504                <1>     jne .prepPullup
  1188 00004892 31C0                <1>     xor eax, eax
  1189 00004894 EB0E                <1>     jmp short .cleanEnv
  1190                              <1> .prepPullup:
  1191 00004896 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1192                              <1> .pullUp:
  1193 00004899 AC                  <1>     lodsb
  1194 0000489A AA                  <1>     stosb
  1195 0000489B 84C0                <1>     test al, al ;Did we pick up a zero
  1196 0000489D 75FA                <1>     jne .pullUp ;If not, keep copying
  1197 0000489F 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1198 000048A2 75F5                <1>     jne .pullUp
  1199                              <1> ;We are at the end of the copy!
  1200                              <1> .cleanEnv:
  1201 000048A4 AA                  <1>     stosb   ;Store the famous second null
  1202 000048A5 48FFCF              <1>     dec rdi ;without incrementing it!!
  1203 000048A8 E807000000          <1>     call getFreeSpace
  1204 000048AD 31C0                <1>     xor eax, eax
  1205 000048AF 51                  <1>     push rcx
  1206 000048B0 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1207 000048B2 59                  <1>     pop rcx
  1208                              <1>     return
    13                              <2> %%_ret:
    14 000048B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1209                              <1> 
  1210                              <1> getFreeSpace:
  1211                              <1> ;Output: ecx = Number of free bytes in the environment block
  1212 000048B4 56                  <1>     push rsi
  1213 000048B5 57                  <1>     push rdi
  1214 000048B6 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1215 000048BB 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1216 000048BF 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1217 000048C2 E805000000          <1>     call getEnvSize ;Get total block size
  1218 000048C7 29F9                <1>     sub ecx, edi    ;Get difference!
  1219 000048C9 5F                  <1>     pop rdi
  1220 000048CA 5E                  <1>     pop rsi
  1221                              <1>     return
    13                              <2> %%_ret:
    14 000048CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1222                              <1> 
  1223                              <1> getEnvSize:
  1224                              <1> ;Gets the number of bytes in the environment allocation
  1225                              <1> ;Output: ecx = Number of bytes in the environment!
  1226 000048CC 53                  <1>     push rbx
  1227 000048CD 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1228 000048D1 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1229 000048D4 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1230 000048D7 5B                  <1>     pop rbx
  1231                              <1>     return
    13                              <2> %%_ret:
    14 000048D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> 
  1233                              <1> getPtrToEndOfEnv:
  1234                              <1> ;Gets ptr to end of the environment
  1235                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1236 000048D9 50                  <1>     push rax
  1237 000048DA 51                  <1>     push rcx
  1238 000048DB 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1239 000048DF 31C0                <1>     xor eax, eax
  1240 000048E1 31C9                <1>     xor ecx, ecx
  1241 000048E3 FFC9                <1>     dec ecx
  1242                              <1> .lp:
  1243 000048E5 F2AE                <1>     repne scasb
  1244 000048E7 3807                <1>     cmp byte [rdi], al
  1245 000048E9 75FA                <1>     jne .lp
  1246 000048EB 59                  <1>     pop rcx
  1247 000048EC 58                  <1>     pop rax
  1248                              <1>     return
    13                              <2> %%_ret:
    14 000048ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> growEnvBlock:
  1251                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1252                              <1> ; newly allocated 160 byte block of the environment.
  1253                              <1> ;Returns:   CF=NC - Environment grown ok!
  1254                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1255                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1256 000048EE 50                  <1>     push rax
  1257 000048EF 53                  <1>     push rbx
  1258 000048F0 51                  <1>     push rcx
  1259 000048F1 56                  <1>     push rsi
  1260 000048F2 57                  <1>     push rdi
  1261 000048F3 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1262 000048F8 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1263 000048FD 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1264 00004901 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1265 00004904 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1266 0000490A 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1267 00004910 7321                <1>     jae .tooLarge
  1268                              <1>     ;Here ZF must be NZ.
  1269 00004912 4150                <1>     push r8
  1270 00004914 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1271 00004918 B8004A0000          <1>     mov eax, 4A00h
  1272 0000491D CD21                <1>     int 21h
  1273 0000491F 4158                <1>     pop r8
  1274 00004921 720A                <1>     jc .exit
  1275                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1276                              <1>     ; so we add 160 zeros to the count of bytes
  1277 00004923 81C1A0000000        <1>     add ecx, 0A0h
  1278 00004929 31C0                <1>     xor eax, eax
  1279 0000492B F3AA                <1>     rep stosb
  1280                              <1> .exit:
  1281 0000492D 5F                  <1>     pop rdi
  1282 0000492E 5E                  <1>     pop rsi
  1283 0000492F 59                  <1>     pop rcx
  1284 00004930 5B                  <1>     pop rbx
  1285 00004931 58                  <1>     pop rax
  1286                              <1>     return
    13                              <2> %%_ret:
    14 00004932 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1287                              <1> .tooLarge:
  1288 00004933 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1289 00004936 F9                  <1>     stc             ;Set CF
  1290 00004937 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004939 F60554B7FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004940 7411                <1>     jz .notLoading
     4 00004942 F6054BB7FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004949 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000494B 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004951 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004953 F6053AB7FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000495A 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000495C 84E4                <1>     test ah, ah
    17 0000495E 7424                <1>     jz .inInt23 
    18 00004960 80FC0C              <1>     cmp ah, 0Ch
    19 00004963 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004965 50                  <1>     push rax
    23 00004966 488D0512000000      <1>     lea rax, .i23Bounce
    24 0000496D 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004972 31C0                <1>     xor eax, eax
    26 00004974 668CC8              <1>     mov ax, cs
    27 00004977 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 0000497C 58                  <1>     pop rax
    29 0000497D 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 0000497F 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004984 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004986 800D07B7FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 0000498D F60500B7FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004994 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004996 50                  <1>     push rax
    43 00004997 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 0000499C CD21                <1>     int 21h
    45 0000499E 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 0000499F F605EEB6FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 000049A6 7462                <1>     jz .notBat
    49 000049A8 F605E5B6FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 000049AF 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 000049B1 E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 000049B6 488D1524BFFFFF      <1>     lea rdx, batFail
    57 000049BD E880F8FFFF          <1>     call printString
    58 000049C2 488D1539B7FFFF      <1>     lea rdx, batYNstr
    59 000049C9 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 000049CF B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 000049D4 CD21                <1>     int 21h
    62 000049D6 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 000049D8 8A4202              <1>     mov al, byte [rdx + 2]
    64 000049DB E892FAFFFF          <1>     call ucChar         ;UC using DOS
    65 000049E0 3C59                <1>     cmp al, "Y"
    66 000049E2 740E                <1>     je .killBat
    67 000049E4 3C4E                <1>     cmp al, "N"
    68 000049E6 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 000049E8 E84EF8FFFF          <1>     call printCRLF
    74 000049ED E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 000049F2 E8B3D4FFFF          <1>     call batCleanup
    77 000049F7 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 000049F9 E8ACD4FFFF          <1>     call batCleanup
    80 000049FE 80258FB6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 00004A05 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004A0A 66813D84B6FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004A13 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004A15 E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004A1A 802573B6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 00004A21 F9                  <1>     stc     ;Set CF to kill the task
    91 00004A22 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004A25 53                  <1>     push rbx
    25 00004A26 51                  <1>     push rcx
    26 00004A27 52                  <1>     push rdx
    27 00004A28 57                  <1>     push rdi
    28 00004A29 56                  <1>     push rsi
    29 00004A2A E80F020000          <1>     call errSwapHdls
    30 00004A2F FC                  <1>     cld         ;Make String ops go forward
    31 00004A30 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004A33 88055CB6FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004A39 488D1544BEFFFF      <1>     lea rdx, crlf
    34 00004A40 E8FDF7FFFF          <1>     call printString    ;Trashes ax
    35 00004A45 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004A48 53                  <1>     push rbx        ;Save the action bitfield
    38 00004A49 56                  <1>     push rsi        ;Save the driver pointer
    39 00004A4A B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004A4F CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004A51 488D35BEC5FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004A58 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004A5B 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004A5D 66A5                <1>     movsw
    51 00004A5F A4                  <1>     movsb
    52 00004A60 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004A63 5E                  <1>     pop rsi
    54 00004A64 5B                  <1>     pop rbx
    55 00004A65 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004A6B 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004A6D 81FF24000000        <1>     cmp edi, errShrFul
    60 00004A73 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004A75 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004A7A CD21                <1>     int 21h
    65 00004A7C 3CFF                <1>     cmp al, -1
    66 00004A7E 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004A80 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004A82 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004A84 CD21                <1>     int 21h
    70 00004A86 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004A88 4889FA              <1>     mov rdx, rdi        
    76 00004A8B 50                  <1>     push rax            
    77 00004A8C 31C0                <1>     xor eax, eax
    78 00004A8E 89C1                <1>     mov ecx, eax
    79 00004A90 FFC9                <1>     dec ecx
    80 00004A92 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004A94 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004A98 E8A5F7FFFF          <1>     call printString 
    83 00004A9D C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004AA1 58                  <1>     pop rax
    85 00004AA2 84C0                <1>     test al, al ;Is this zero?
    86 00004AA4 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004AA6 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004AAB 488D1599C5FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004AB2 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004AB4 BA1F000000          <1>     mov edx, errGF
    98 00004AB9 81FF24000000        <1>     cmp edi, errShrFul
    99 00004ABF 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004AC2 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004AC7 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004ACD 0F42FA              <1>     cmovb edi, edx
   104 00004AD0 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004AD6 57                  <1>     push rdi    ;Save the error code for checking
   106 00004AD7 488D1532C4FFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004ADE 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004AE1 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004AE5 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004AE8 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004AE9 E854F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004AEE 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004AF4 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004AF6 488D156CC5FFFF      <1>     lea rdx, readMsg
   120 00004AFD 488D3D74C5FFFF      <1>     lea rdi, writeMsg
   121 00004B04 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004B07 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004B0B E832F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004B10 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004B13 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004B19 488D1542C5FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004B20 E81DF7FFFF          <1>     call printString
   130 00004B25 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004B27 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004B2A B402                <1>     mov ah, 02h ;Print char in dl
   133 00004B2C CD21                <1>     int 21h
   134                              <1>     
   135 00004B2E 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004B30 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004B35 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004B3A 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004B3C B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004B3E E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004B43 E8F3F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004B48 488D1538C5FFFF      <1>     lea rdx, abortMsg
   149 00004B4F E8EEF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004B54 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004B57 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004B59 488D153FC5FFFF      <1>     lea rdx, betweenMsg
   154 00004B60 E8DDF6FFFF          <1>     call printString
   155 00004B65 488D1528C5FFFF      <1>     lea rdx, retryMsg
   156 00004B6C E8D1F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004B71 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004B74 7418                <1>     jz .userFail
   160 00004B76 488D1522C5FFFF      <1>     lea rdx, betweenMsg
   161 00004B7D E8C0F6FFFF          <1>     call printString
   162 00004B82 488D1504C5FFFF      <1>     lea rdx, ignoreMsg
   163 00004B89 E8B4F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004B8E F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004B91 7418                <1>     jz .userMsgEnd
   167 00004B93 488D1505C5FFFF      <1>     lea rdx, betweenMsg
   168 00004B9A E8A3F6FFFF          <1>     call printString
   169 00004B9F 488D15F4C4FFFF      <1>     lea rdx, failMsg
   170 00004BA6 E897F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004BAB 488D15F0C4FFFF      <1>     lea rdx, endMsg
   173 00004BB2 E88BF6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004BB7 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004BB9 488D3DE5C4FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004BC0 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004BC5 CD21                <1>     int 21h ;Get char in al
   179 00004BC7 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004BC9 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004BCB 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004BCD AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004BCE 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004BD0 FFC1                <1>     inc ecx
   186 00004BD2 81F904000000        <1>     cmp ecx, 4
   187 00004BD8 75F3                <1>     jne .uip1
   188 00004BDA E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004BDF E857F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004BE4 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004BE6 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004BE8 7427                <1>     je .cehExit
   195 00004BEA 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004BEC 740F                <1>     je .viIgnore
   197 00004BEE 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004BF0 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004BF2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004BF5 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004BFB EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004BFD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004C00 0F843DFFFFFF        <1>     jz .userInput
   206 00004C06 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004C08 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004C0B 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004C11 E845000000          <1>     call errRetHdls
   212 00004C16 5E                  <1>     pop rsi
   213 00004C17 5F                  <1>     pop rdi
   214 00004C18 5A                  <1>     pop rdx
   215 00004C19 59                  <1>     pop rcx
   216 00004C1A 5B                  <1>     pop rbx
   217 00004C1B 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004C1D C60571B4FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004C24 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004C29 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004C30 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004C31 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004C33 B402                <1>     mov ah, 02h
   226 00004C35 CD21                <1>     int 21h ;Print char
   227 00004C37 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004C39 E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004C3E 50                  <1>     push rax
   236 00004C3F 53                  <1>     push rbx
   237 00004C40 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004C45 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004C48 66890548B4FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004C4F 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004C53 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004C55 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004C58 5B                  <1>     pop rbx
   244 00004C59 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004C5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004C5B 50                  <1>     push rax
   250 00004C5C 53                  <1>     push rbx
   251 00004C5D E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004C62 0FB7052EB4FFFF      <1>     movzx eax, word [errHdls]
   253 00004C69 66C70525B4FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004C72 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004C75 5B                  <1>     pop rbx
   256 00004C76 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004C78 50                  <1>     push rax        ;Save rax
   263 00004C79 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004C7E CD21                <1>     int 21h
   265 00004C80 58                  <1>     pop rax
   266 00004C81 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004C87 7605                <1>     jbe .pspJftExit
   268 00004C89 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004C8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004C8E 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004C92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004C93 B430                <1>     mov ah, 30h
     4 00004C95 CD21                <1>     int 21h
     5 00004C97 3C01                <1>     cmp al, 01h ;Version 1
     6 00004C99 760D                <1>     jbe .okVersion
     7 00004C9B 488D15CF040000      <1>     lea rdx, badVerStr
     8 00004CA2 B409                <1>     mov ah, 09h
     9 00004CA4 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004CA6 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004CA8 800DE5B3FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004CAF 4C890559B3FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004CB6 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004CBB CD21                <1>     int 21h
    19 00004CBD 3CFF                <1>     cmp al, -1
    20 00004CBF 7412                <1>     je .skipSwitch
    21 00004CC1 881563B3FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004CC7 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004CCA 7507                <1>     jne .skipSwitch
    24 00004CCC C60556B3FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004CD3 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004CD8 488D154CB3FFFF      <1>     lea rdx, ctryData
    28 00004CDF CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004CE1 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004CE8 4889E3              <1>     mov rbx, rsp
    33 00004CEB 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004CEE 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004CF2 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004CF5 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004CFA 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004CFD CD21                <1>     int 21h
    39 00004CFF 72A5                <1>     jc .exitBad 
    40 00004D01 4D89C8              <1>     mov r8, r9  ;Reset r8 to point to the psp
    41                              <1> ;Now space has been made, time to parse the command tail
    42 00004D04 E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    43 00004D09 E81D030000          <1>     call doEnv          ;Now enact the command tail actions
    44 00004D0E E89AFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    45 00004D13 F6057AB3FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    46 00004D1A 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    47                              <1> ;Ok so we are master COMMAND.COM
    48                              <1> ;Now make myself my own parent task. We already are the current psp
    49 00004D20 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    50                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    51 00004D24 488D15FAFCFFFF      <1>     lea rdx, critErrorHandler
    52 00004D2B 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    53 00004D2F 488D1503FCFFFF      <1>     lea rdx, ctrlCHandler
    54 00004D36 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    55 00004D3A 488D15ECC7FFFF      <1>     lea rdx, appRet
    56 00004D41 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    57 00004D45 488D157FCDFFFF      <1>     lea rdx, int2Eh
    58 00004D4C B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    59 00004D51 CD21                <1>     int 21h
    60                              <1> ;Always get the Autoexec from the root dir we are booting into
    61 00004D53 E8F2F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    62 00004D58 0441                <1>     add al, "A"
    63 00004D5A 880585C1FFFF        <1>     mov byte [autoSpec], al ;
    64                              <1> ;Now, open AUTOEXEC.BAT. 
    65 00004D60 488D157EC1FFFF      <1>     lea rdx, autoSpec
    66 00004D67 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    67 00004D6C CD21                <1>     int 21h
    68 00004D6E 7212                <1>     jc .noAutoexec
    69                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    70                              <1>     ; the normal hello there! string
    71 00004D70 89C3                <1>     mov ebx, eax
    72 00004D72 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    73 00004D77 CD21                <1>     int 21h
    74                              <1> ;Now we do the same as at the end, prepping for jettisoning
    75 00004D79 31D2                <1>     xor edx, edx
    76 00004D7B FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    77 00004D7D E954000000          <1>     jmp .prepStart
    78                              <1> .noAutoexec:
    79                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    80 00004D82 488D15FBBAFFFF      <1>     lea rdx, crlf
    81 00004D89 B409                <1>     mov ah, 09h
    82 00004D8B CD21                <1>     int 21h
    83 00004D8D 800D00B3FFFF40      <1>     or byte [statFlg1], inLdrDT
    84 00004D94 E869E2FFFF          <1>     call time.init
    85 00004D99 E8B6E0FFFF          <1>     call date.init
    86 00004D9E 8025EFB2FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    87 00004DA5 488D15D8BAFFFF      <1>     lea rdx, crlf
    88 00004DAC B409                <1>     mov ah, 09h
    89 00004DAE CD21                <1>     int 21h
    90                              <1>     ;Now fall thru.
    91                              <1> .notMaster:    
    92                              <1> ;Finish by printing INIT string.
    93 00004DB0 F605DDB2FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    94 00004DB7 7531                <1>     jnz .singleCom
    95 00004DB9 488D1578030000      <1>     lea rdx, initString
    96 00004DC0 B409                <1>     mov ah, 09h
    97 00004DC2 CD21                <1>     int 21h ;Print init string
    98 00004DC4 E8E2E8FFFF          <1>     call version.printVersionNumber
    99 00004DC9 488D157B030000      <1>     lea rdx, initString2
   100 00004DD0 B409                <1>     mov ah, 09h
   101 00004DD2 CD21                <1>     int 21h ;Print init string
   102 00004DD4 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   103                              <1> .prepStart:
   104 00004DD6 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   105 00004DDB 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   106 00004DDE 8025AFB2FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   107 00004DE5 E9BFC2FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   108                              <1> .singleCom:
   109                              <1> ;In single command mode, check the length of the input string was not 0.
   110                              <1> ; If it was, exit, else proceed
   111 00004DEA 803D71B3FFFF00      <1>     cmp byte [inBuffer + 1], 0
   112 00004DF1 0F84D3EAFFFF        <1>     je exit
   113 00004DF7 31D2                <1>     xor edx, edx
   114 00004DF9 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   115 00004DFB EBD9                <1>     jmp short .prepStart
   116                              <1> 
   117                              <1> computeStackPtr:
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 00004DFD 488D1D8FFEFFFF      <1>     lea rbx, endOfAlloc
   120 00004E04 4881C340060000      <1>     add rbx, stackSize
   121 00004E0B 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   122 00004E12 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   123 00004E16 48C1E304            <1>     shl rbx, 4
   124 00004E1A 48891DE4B1FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125                              <1>     return
    13                              <2> %%_ret:
    14 00004E21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   126                              <1> 
   127                              <1> parseCmdLine:
   128                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   129                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   130                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   131                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   132                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   133                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   134                              <1> ;           Default is CON
   135                              <1> ;[/C string] means execute the string as a command and terminate immediately
   136                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   137                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   138                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   139                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   140                              <1> ; permanent. Needs a colon after E. 
   141                              <1> ;
   142                              <1> ;Start by setting up the default comspec dir, null terminated
   143 00004E22 E823F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   144 00004E27 0441                <1>     add al, "A"
   145 00004E29 B43A                <1>     mov ah, ":"
   146 00004E2B 488D3D2BB8FFFF      <1>     lea rdi, comspecDir
   147 00004E32 66AB                <1>     stosw   ;Store drive specifier
   148 00004E34 0FB605EEB1FFFF      <1>     movzx eax, byte [pathSep]
   149 00004E3B 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   150                              <1> 
   151 00004E3D E850F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   152 00004E42 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   153                              <1> .parseLp:
   154 00004E49 E83FF6FFFF          <1>     call skipDelimiters             ;Strip delims
   155 00004E4E AC                  <1>     lodsb
   156 00004E4F 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   157 00004E52 3C0D                <1>     cmp al, CR
   158 00004E54 0F847C010000        <1>     je .endScan
   159 00004E5A 3A05CAB1FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   160 00004E60 752D                <1>     jne .file
   161                              <1> .switch:
   162 00004E62 48FFC6              <1>     inc rsi ;Go past the switch char
   163 00004E65 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   164 00004E66 E807F6FFFF          <1>     call ucChar
   165 00004E6B 3C43                <1>     cmp al, "C"
   166 00004E6D 0F842F010000        <1>     je .switchStr
   167 00004E73 3C50                <1>     cmp al, "P"
   168 00004E75 0F8403010000        <1>     je .switchPerma
   169 00004E7B 3C45                <1>     cmp al, "E"
   170 00004E7D 0F84B0000000        <1>     je .switchEnv
   171 00004E83 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   172                              <1> .badparm:
   173 00004E86 488D15DBBBFFFF      <1>     lea rdx, badParm
   174 00004E8D EBBA                <1>     jmp short .parseLp
   175                              <1> ;-----------------------------------------------------------------
   176                              <1> ;Search for the filespec
   177                              <1> .file:
   178 00004E8F E885F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   179 00004E94 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   180 00004E97 488D15F2B5FFFF      <1>     lea rdx, searchSpec
   181 00004E9E B8004E0000          <1>     mov eax, 4E00h  ;Find First
   182 00004EA3 B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   183 00004EA8 CD21                <1>     int 21h
   184 00004EAA 7319                <1>     jnc .charOrDir
   185                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   186 00004EAC 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   187 00004EAE 30C0                <1>     xor al, al
   188 00004EB0 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   189 00004EB5 741C                <1>     je .dir ;If so, root dir specified, all oki!
   190                              <1> .badSpec:
   191                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   192 00004EB7 488D15CB020000      <1>     lea rdx, badCmdDir
   193                              <1> .bs0:
   194 00004EBE E87FF3FFFF          <1>     call printString
   195                              <1> .plhop:
   196 00004EC3 EB84                <1>     jmp short .parseLp
   197                              <1> ;-----------------------------------------------------------------
   198                              <1> ;Check if a char or directory here
   199                              <1> .charOrDir:
   200 00004EC5 8A0560B2FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   201 00004ECB 2450                <1>     and al, dirCharDev | dirDirectory
   202 00004ECD 74E8                <1>     jz .badSpec
   203 00004ECF A840                <1>     test al, dirCharDev
   204 00004ED1 7525                <1>     jnz .charDev
   205                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   206                              <1> .dir:
   207 00004ED3 56                  <1>     push rsi
   208 00004ED4 488D35B5B5FFFF      <1>     lea rsi, searchSpec 
   209 00004EDB 488D3D7BB7FFFF      <1>     lea rdi, comspecDir
   210 00004EE2 E877F5FFFF          <1>     call strcpy2
   211 00004EE7 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   212 00004EEC CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   213 00004EEE 5E                  <1>     pop rsi
   214 00004EEF C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   215 00004EF6 EBCB                <1>     jmp short .plhop
   216                              <1> ;-----------------------------------------------------------------
   217                              <1> ;Handle char dev here
   218                              <1> .charDev:
   219                              <1> ;Check the name is max 8 chars in length
   220 00004EF8 488D3D91B5FFFF      <1>     lea rdi, searchSpec
   221 00004EFF E864F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   222 00004F04 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   223 00004F0A 771E                <1>     ja .badChar
   224 00004F0C 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   225 00004F0D 488D357CB5FFFF      <1>     lea rsi, searchSpec
   226 00004F14 488D3DC1BFFFFF      <1>     lea rdi, devName
   227 00004F1B E82FF5FFFF          <1>     call strcpy ;Copy this string over
   228 00004F20 5E                  <1>     pop rsi
   229 00004F21 C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   230                              <1> .plhop1:
   231 00004F28 EB99                <1>     jmp short .plhop    ;parseLp
   232                              <1> .badChar:
   233 00004F2A 488D15EABCFFFF      <1>     lea rdx, badDev
   234                              <1> .bs1:
   235 00004F31 EB8B                <1>     jmp short .bs0
   236                              <1> ;-----------------------------------------------------------------
   237                              <1> .switchEnv:
   238 00004F33 AC                  <1>     lodsb
   239 00004F34 48FFCE              <1>     dec rsi
   240 00004F37 3C3A                <1>     cmp al, ":"
   241 00004F39 0F8547FFFFFF        <1>     jne .badparm
   242 00004F3F 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   243 00004F42 E846F5FFFF          <1>     call skipDelimiters
   244 00004F47 AC                  <1>     lodsb       ;Get the first non-delimiter
   245 00004F48 48FFCE              <1>     dec rsi     ;Point back at it
   246 00004F4B 3C0D                <1>     cmp al, CR
   247 00004F4D 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   248                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   249 00004F53 E8EEF7FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   250 00004F58 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   251 00004F5E 3D00800000          <1>     cmp eax, 8000h
   252 00004F63 7710                <1>     ja .badEnv
   253 00004F65 3DA0000000          <1>     cmp eax, 0A0h
   254 00004F6A 7209                <1>     jb .badEnv
   255 00004F6C 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   256                              <1> .plhop2:
   257 00004F73 EBB3                <1>     jmp short .plhop1  ;parseLp
   258                              <1> .badEnv:
   259 00004F75 488D1536020000      <1>     lea rdx, badEnvSz
   260 00004F7C EBB3                <1>     jmp short .bs1
   261                              <1> ;-----------------------------------------------------------------
   262                              <1> .switchPerma:
   263 00004F7E AC                  <1>     lodsb   ;Get the second char after the P
   264 00004F7F 48FFCE              <1>     dec rsi ;Point back at it
   265 00004F82 3C0D                <1>     cmp al, CR
   266 00004F84 7413                <1>     je .spEmbCr ;Allow CR after the P
   267 00004F86 3A059EB0FFFF        <1>     cmp al, byte [switchChar]
   268 00004F8C 740B                <1>     je .spEmbCr ;Allow switch char after P
   269 00004F8E E808F5FFFF          <1>     call isALdelimiter
   270 00004F93 0F85EDFEFFFF        <1>     jne .badparm
   271                              <1> .spEmbCr:
   272 00004F99 800DF4B0FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   273 00004FA0 EBD1                <1>     jmp short .plhop2  ;parseLp
   274                              <1> ;-----------------------------------------------------------------
   275                              <1> .switchStr:
   276 00004FA2 AC                  <1>     lodsb       ;Get the char after the C
   277 00004FA3 48FFCE              <1>     dec rsi     ;Point back at it
   278 00004FA6 3C0D                <1>     cmp al, CR
   279 00004FA8 740B                <1>     je .ssembCr         ;Embedded CR ok
   280 00004FAA E8ECF4FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   281 00004FAF 0F85D1FEFFFF        <1>     jne .badparm
   282                              <1> .ssembCr:
   283 00004FB5 E8D3F4FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   284 00004FBA 488D3DA2B1FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   285                              <1> .ssLp:
   286 00004FC1 AC                  <1>     lodsb
   287 00004FC2 AA                  <1>     stosb
   288 00004FC3 3C0D                <1>     cmp al, CR
   289 00004FC5 7408                <1>     je .ssOk
   290 00004FC7 FE0595B1FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   291 00004FCD EBF2                <1>     jmp short .ssLp
   292                              <1> .ssOk:
   293 00004FCF 800DBEB0FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   294                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   295                              <1> ;-----------------------------------------------------------------
   296                              <1> .endScan:
   297                              <1> ;Now copy our name to the end of the dir specified
   298 00004FD6 488D3D80B6FFFF      <1>     lea rdi, comspecDir
   299 00004FDD E886F4FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   300 00004FE2 FFC9                <1>     dec ecx ;Point to null terminator
   301 00004FE4 8A053FB0FFFF        <1>     mov al, byte [pathSep]
   302 00004FEA 4801CF              <1>     add rdi, rcx    ;Now point to the null
   303 00004FED 3847FF              <1>     cmp byte [rdi - 1], al
   304 00004FF0 7401                <1>     je .esSkipPathsep
   305 00004FF2 AA                  <1>     stosb
   306                              <1> .esSkipPathsep:
   307 00004FF3 488D350ABFFFFF      <1>     lea rsi, cspec
   308 00004FFA E850F4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   309 00004FFF E812000000          <1>     call .replacestdio
   310                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   311                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   312 00005004 F60589B0FFFF04      <1>     test byte [statFlg1], inSingle
   313                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000500B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000500D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   314 0000500E 80257FB0FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   315                              <1>     return
    13                              <2> %%_ret:
    14 00005015 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   316                              <1> .replacestdio:
   317 00005016 F605B1010000FF      <1>     test byte [initNewDev], -1
   318                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000501D 74(15)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   319 0000501F 488D15B6BEFFFF      <1>     lea rdx, devName
   320 00005026 E93BE1FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   321                              <1> 
   322                              <1> doEnv:
   323                              <1> ;Will do the environment adjustments as needed
   324 0000502B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   325 0000502F 4885F6              <1>     test rsi, rsi
   326 00005032 7447                <1>     jz .noInitEnv
   327 00005034 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   328                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000503D 74(15)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   329                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   330                              <1> ;copy the environment from the master and free the original block.
   331                              <1> ;If the block we allocate is smaller than the original block, 
   332                              <1> ; print out of env space and stop there
   333                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   334                              <1> ; comspec. 
   335 0000503F F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   336 00005046 752E                <1>     jnz .prepNewEnv
   337                              <1>     ;Else, we create new alloc and copy master into it
   338 00005048 E867000000          <1>     call .allocEnv
   339 0000504D 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   340 00005050 E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   341 00005055 57                  <1>     push rdi            ;Save the start of the environment block
   342 00005056 E893000000          <1>     call .cpEnv         ;Copy the environment
   343 0000505B 5F                  <1>     pop rdi
   344 0000505C E805000000          <1>     call .freeCurrentEnv
   345 00005061 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   346                              <1>     return  
    13                              <2> %%_ret:
    14 00005065 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   347                              <1> .freeCurrentEnv:
   348 00005066 4150                <1>     push r8
   349 00005068 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   350 0000506C B800490000          <1>     mov eax, 4900h
   351 00005071 CD21                <1>     int 21h
   352 00005073 4158                <1>     pop r8
   353                              <1>     return
    13                              <2> %%_ret:
    14 00005075 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   354                              <1> .prepNewEnv:
   355 00005076 E8EBFFFFFF          <1>     call .freeCurrentEnv
   356                              <1> .noInitEnv:
   357                              <1> ;Build the initial block.
   358 0000507B E834000000          <1>     call .allocEnv
   359 00005080 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   360 00005083 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   361 00005087 57                  <1>     push rdi            ;Save the environment ptr!
   362 00005088 488D3566BEFFFF      <1>     lea rsi, pathEVar
   363 0000508F E8BBF3FFFF          <1>     call strcpy
   364 00005094 488D3560BEFFFF      <1>     lea rsi, comspecEVar
   365 0000509B E8AFF3FFFF          <1>     call strcpy
   366 000050A0 48FFCF              <1>     dec rdi ;Write over the terminating null
   367 000050A3 488D35B3B5FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   368 000050AA E8A0F3FFFF          <1>     call strcpy 
   369 000050AF 30C0                <1>     xor al, al
   370 000050B1 AA                  <1>     stosb   ;Store the second terminating null
   371 000050B2 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   372                              <1>     return
    13                              <2> %%_ret:
    14 000050B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .allocEnv:
   375                              <1> ;Output: rax -> Ptr to the environment block. 
   376                              <1> ;   If anything goes wrong, error message and exit the shell!
   377 000050B4 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   378 000050BB 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   379 000050BD 750C                <1>     jnz .goAlloc
   380 000050BF BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   381 000050C4 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   382                              <1> .goAlloc:
   383 000050CB 81C30F000000        <1>     add ebx, 0Fh
   384 000050D1 C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   385 000050D4 B800480000          <1>     mov eax, 4800h
   386 000050D9 CD21                <1>     int 21h
   387                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000050DB 73(B3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   388 000050DD 488D155BBDFFFF      <1>     lea rdx, memBad1
   389 000050E4 E859F1FFFF          <1>     call printString
   390 000050E9 E9F3E7FFFF          <1>     jmp exit.ouch 
   391                              <1> 
   392                              <1> .cpEnv:
   393                              <1> ;Copies the environment
   394                              <1> ;Input: rsi -> Source to copy from
   395                              <1> ;       rdi -> Destination to copy to
   396 000050EE 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   397                              <1> .lp:
   398 000050F5 AC                  <1>     lodsb
   399 000050F6 AA                  <1>     stosb
   400 000050F7 84C0                <1>     test al, al
   401 000050F9 750A                <1>     jnz .notNul
   402 000050FB 3806                <1>     cmp byte [rsi], al
   403 000050FD 7506                <1>     jnz .notNul
   404                              <1>     ;Here, we have encountered our double null!
   405 000050FF FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   406 00005101 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   407 00005103 AA                  <1>     stosb
   408                              <1>     return
    13                              <2> %%_ret:
    14 00005104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> .notNul:
   410 00005105 FFC9                <1>     dec ecx ;One less char to copy over
   411 00005107 75EC                <1>     jnz .lp
   412                              <1> .err:
   413 00005109 4881EF02000000      <1>     sub rdi, 2
   414 00005110 488D1545B8FFFF      <1>     lea rdx, noEnvSpace
   415 00005117 E826F1FFFF          <1>     call printString
   416 0000511C 31C0                <1>     xor eax, eax
   417 0000511E 66AB                <1>     stosw   ;Store 0 word
   418                              <1>     return
    13                              <2> %%_ret:
    14 00005120 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> getMasterEnv:
   421                              <1> ;Walks the psp chain to the first self parent.
   422                              <1> ;Output: rsi -> Environment of the first self-parent program
   423 00005121 4150                <1>     push r8
   424                              <1> .lp:
   425 00005123 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   426 00005127 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   427 0000512A 7405                <1>     je .exit
   428 0000512C 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   429 0000512F EBF2                <1>     jmp short .lp
   430                              <1> .exit:
   431 00005131 4158                <1>     pop r8
   432 00005133 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   433                              <1>     return
    13                              <2> %%_ret:
    14 00005137 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> 
   436                              <1> ;Loader Data here
   437                              <1> initString: 
   438 00005138 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   438 00005141 2056657273696F6E20- <1>
   438 0000514A 24                  <1>
   439                              <1> initString2:
   440 0000514B 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   440 00005154 687420323032322C20- <1>
   440 0000515D 323032342C20596C6C- <1>
   440 00005166 2042757A6F6B752E    <1>
   441 0000516E 0D0A24              <1>     db CR,LF,"$"
   442 00005171 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   442 0000517A 20444F532076657273- <1>
   442 00005183 696F6E0D0A24        <1>
   443 00005189 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   443 00005192 20434F4D4D414E4420- <1>
   443 0000519B 736561726368206469- <1>
   443 000051A4 726563746F72792062- <1>
   443 000051AD 61640D0A24          <1>
   444 000051B2 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   444 000051BB 6E7669726F6E6D656E- <1>
   444 000051C4 742053697A650D0A24  <1>
   445 000051CD 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   446 000051CE 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   447 000051CF 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+9+2 passes

