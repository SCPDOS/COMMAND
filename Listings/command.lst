     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E94F4C0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26 00000095 FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    27 00000096 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000097 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000099 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 0000009A FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009C FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009E 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009F 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 000000A0 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A2 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A4 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A5 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A6 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A7 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A8 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A9 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000AA 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AB 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B3 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BC 000000000000000000- <1>
    57 000000C5 000000000000000000- <1>
    57 000000CE 000000000000000000- <1>
    57 000000D7 000000000000000000- <1>
    57 000000E0 000000000000000000- <1>
    57 000000E9 000000000000000000- <1>
    57 000000F2 000000000000000000- <1>
    57 000000FB 00000000000000      <1>
    58 00000102 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000106 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010F 00000000000000      <1>
    64 00000116 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 00000000000000      <1>
    65                              <1> 
    66 00000141 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 0000014A 000000000000000000- <1>
    66 00000153 000000000000000000- <1>
    66 0000015C 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inLen   equ 128 
    75 00000161 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    75 0000016A 000000000000000000- <1>
    75 00000173 000000000000000000- <1>
    75 0000017C 000000000000000000- <1>
    75 00000185 000000000000000000- <1>
    75 0000018E 000000000000000000- <1>
    75 00000197 000000000000000000- <1>
    75 000001A0 000000000000000000- <1>
    75 000001A9 000000000000000000- <1>
    75 000001B2 000000000000000000- <1>
    75 000001BB 000000000000000000- <1>
    75 000001C4 000000000000000000- <1>
    75 000001CD 000000000000000000- <1>
    75 000001D6 000000000000000000- <1>
    75 000001DF 00000000            <1>
    76 000001E3 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    76 000001EC 000000000000000000- <1>
    76 000001F5 000000000000000000- <1>
    76 000001FE 000000000000000000- <1>
    76 00000207 000000000000000000- <1>
    76 00000210 000000000000000000- <1>
    76 00000219 000000000000000000- <1>
    76 00000222 000000000000000000- <1>
    76 0000022B 000000000000000000- <1>
    76 00000234 000000000000000000- <1>
    76 0000023D 000000000000000000- <1>
    76 00000246 000000000000000000- <1>
    76 0000024F 000000000000000000- <1>
    76 00000258 000000000000000000- <1>
    76 00000261 00000000            <1>
    77 00000265 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    77 0000026E 000000000000000000- <1>
    77 00000277 000000000000000000- <1>
    77 00000280 000000000000000000- <1>
    77 00000289 000000000000000000- <1>
    77 00000292 000000000000000000- <1>
    77 0000029B 000000000000000000- <1>
    77 000002A4 000000000000000000- <1>
    77 000002AD 000000000000000000- <1>
    77 000002B6 000000000000000000- <1>
    77 000002BF 000000000000000000- <1>
    77 000002C8 000000000000000000- <1>
    77 000002D1 000000000000000000- <1>
    77 000002DA 000000000000000000- <1>
    77 000002E3 00000000            <1>
    78 000002E7 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    78 000002F0 000000000000000000- <1>
    78 000002F9 000000000000000000- <1>
    78 00000302 000000000000000000- <1>
    78 0000030B 000000000000000000- <1>
    78 00000314 000000000000000000- <1>
    78 0000031D 000000000000000000- <1>
    78 00000326 000000000000000000- <1>
    78 0000032F 00000000000000      <1>
    79 00000336 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    79 0000033F 0000000000          <1>
    80                              <1> 
    81 00000344 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    81 0000034D 000000000000000000- <1>
    81 00000356 000000000000000000- <1>
    81 0000035F 000000000000000000- <1>
    81 00000368 000000000000000000- <1>
    81 00000371 000000000000000000- <1>
    81 0000037A 000000000000000000- <1>
    81 00000383 000000000000000000- <1>
    81 0000038C 00000000000000      <1>
    82 00000393 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    82 0000039C 000000000000000000- <1>
    82 000003A5 000000000000000000- <1>
    82 000003AE 000000000000000000- <1>
    82 000003B7 000000000000000000- <1>
    82 000003C0 000000000000000000- <1>
    82 000003C9 000000000000000000- <1>
    82 000003D2 000000000000000000- <1>
    82 000003DB 00000000000000      <1>
    83                              <1> 
    84                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    85 000003E2 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    85 000003EB 000000000000000000- <1>
    85 000003F4 000000000000000000- <1>
    85 000003FD 000000000000000000- <1>
    85 00000406 000000000000000000- <1>
    85 0000040F 000000000000000000- <1>
    85 00000418 000000000000000000- <1>
    85 00000421 000000000000000000- <1>
    85 0000042A 00000000000000      <1>
    86 00000431 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    86 0000043A 000000000000000000- <1>
    86 00000443 000000000000000000- <1>
    86 0000044C 000000000000000000- <1>
    86 00000455 000000000000000000- <1>
    86 0000045E 000000000000000000- <1>
    86 00000467 000000000000000000- <1>
    86 00000470 000000000000000000- <1>
    86 00000479 00000000000000      <1>
    87                              <1> 
    88 00000480 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    89 00000488 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    90                              <1> 
    91                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    92                              <1> ; a really long invalid DOS path for PATH to work properly.
    93 00000490 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    93 00000499 000000000000000000- <1>
    93 000004A2 000000000000000000- <1>
    93 000004AB 000000000000000000- <1>
    93 000004B4 000000000000000000- <1>
    93 000004BD 000000000000000000- <1>
    93 000004C6 000000000000000000- <1>
    93 000004CF 000000000000000000- <1>
    93 000004D8 000000000000000000- <1>
    93 000004E1 000000000000000000- <1>
    93 000004EA 000000000000000000- <1>
    93 000004F3 000000000000000000- <1>
    93 000004FC 000000000000000000- <1>
    93 00000505 000000000000000000- <1>
    93 0000050E 000000000000000000- <1>
    93 00000517 000000000000000000- <1>
    93 00000520 000000000000000000- <1>
    93 00000529 000000000000000000- <1>
    93 00000532 000000000000000000- <1>
    93 0000053B 000000000000000000- <1>
    93 00000544 000000000000000000- <1>
    93 0000054D 000000000000000000- <1>
    93 00000556 000000000000000000- <1>
    93 0000055F 000000000000000000- <1>
    93 00000568 000000000000000000- <1>
    93 00000571 000000000000000000- <1>
    93 0000057A 000000000000000000- <1>
    93 00000583 000000000000000000- <1>
    93 0000058C 0000000000000000    <1>
    94                              <1> 
    95                              <1> ;Internal Function vars
    96                              <1> ;Dir Vars
    97 00000594 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    98                              <1> ;                                   Bit[1] set => /P or /p specified
    99                              <1> ;                                   Bit[2] set => A file/path specified
   100 00000595 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   101 00000596 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   102 0000059A 00                  <1> dirDrv      db 0    ;0 based drive number to use
   103 0000059B 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   103 000005A4 000000000000000000- <1>
   103 000005AD 000000000000000000- <1>
   103 000005B6 000000000000000000- <1>
   103 000005BF 000000000000000000- <1>
   103 000005C8 000000000000000000- <1>
   103 000005D1 000000000000000000- <1>
   103 000005DA 000000000000000000- <1>
   103 000005E3 000000000000000000- <1>
   103 000005EC 000000000000000000- <1>
   103 000005F5 000000000000000000- <1>
   103 000005FE 000000000000000000- <1>
   103 00000607 000000000000000000- <1>
   103 00000610 000000000000000000- <1>
   103 00000619 00000000            <1>
   104 0000061D 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   104 00000626 3F3F3F3F3F3F3F      <1>
   105                              <1> dirWideType equ 1
   106                              <1> dirPageType equ 2
   107                              <1> dirFileType equ 4
   108                              <1> ;Volume Vars
   109                              <1> volFcb:
   110                              <1>     istruc exFcb
   111 0000062D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   112 0000062E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   113 00000634 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   114 00000635 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   115 0000063D 3F3F3F              <1>     at exFcb.fileext,   db "???"
   116 00000640 00000000            <1>     at exFcb.curBlock,  dd 0
   117 00000644 00<rep 15h>         <1>     iend 
   118                              <1> 
   119                              <1> ;Time/Date vars
   120 00000659 00                  <1> td1 db 0    ;Minutes/Year
   121 0000065A 00                  <1> td2 db 0    ;Hours/Zero
   122 0000065B 00                  <1> td3 db 0    ;Hundredths/Day
   123 0000065C 00                  <1> td4 db 0    ;Seconds/Month
   124                              <1> 
   125                              <1> ;Rename/Copy/Delete Buffers
   126                              <1> delPath:
   127                              <1> comspecDir:    ;Used to store the directory passed during startup
   128 0000065D 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   128 00000666 000000000000000000- <1>
   128 0000066F 000000000000000000- <1>
   128 00000678 000000000000000000- <1>
   128 00000681 000000000000000000- <1>
   128 0000068A 000000000000000000- <1>
   128 00000693 000000000000000000- <1>
   128 0000069C 000000000000000000- <1>
   128 000006A5 000000000000000000- <1>
   128 000006AE 000000000000000000- <1>
   128 000006B7 000000000000000000- <1>
   128 000006C0 000000000000000000- <1>
   128 000006C9 000000000000000000- <1>
   128 000006D2 000000000000000000- <1>
   128 000006DB 00000000            <1>
   129 000006DF 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   129 000006E8 000000000000000000- <1>
   129 000006F1 000000000000000000- <1>
   129 000006FA 000000000000000000- <1>
   129 00000703 000000000000000000- <1>
   129 0000070C 000000000000000000- <1>
   129 00000715 000000000000000000- <1>
   129 0000071E 000000000000000000- <1>
   129 00000727 000000000000000000- <1>
   129 00000730 000000000000000000- <1>
   129 00000739 000000000000000000- <1>
   129 00000742 000000000000000000- <1>
   129 0000074B 000000000000000000- <1>
   129 00000754 000000000000000000- <1>
   129 0000075D 00000000            <1>
   130 00000761 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   131 00000769 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   132 00000771 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   132 0000077A 2020                <1>
   133                              <1> ;Copy vars
   134 0000077C 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   135 0000077D FFFF                <1> sourceHdl   dw -1
   136 0000077F FFFF                <1> destHdl     dw -1
   137 00000781 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   138 00000783 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   139 0000078B 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   140 0000078D 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   141 00000791 00                  <1> bCpFlg      db 0    ;Copy state flag
   142                              <1> 
   143                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   144                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   145                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   146                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   147                              <1> oneDest     equ 10h ;Single destination, not dir 
   148                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   149                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   150                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   151                              <1> 
   152                              <1> ;Environment manipulation vars
   153 00000792 0000                <1> envVarSz        dw 0    ;Env var size
   154 00000794 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000796 03444952            <1>     db 3, "DIR"
     8 0000079A 0D1F                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079C 024344              <1>     db 2, "CD"
    11 0000079F FD23                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A1 054348444952        <1>     db 5, "CHDIR"
    14 000007A7 FD23                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A9 024D44              <1>     db 2, "MD"
    17 000007AC 7824                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AE 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B4 7824                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B6 025244              <1>     db 2, "RD"
    23 000007B9 C124                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BB 05524D444952        <1>     db 5, "RMDIR"
    26 000007C1 C124                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C3 0344454C            <1>     db 3, "DEL"
    29 000007C7 842C                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C9 054552415345        <1>     db 5, "ERASE"
    32 000007CF 842C                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D1 0444415445          <1>     db 4, "DATE"
    35 000007D6 C72D                <1>     dw date - startLbl
    36                              <1> 
    37 000007D8 0454494D45          <1>     db 4, "TIME"
    38 000007DD 752F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DF 04434F5059          <1>     db 4, "COPY"
    41 000007E4 0B25                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E6 0443545459          <1>     db 4, "CTTY"
    44 000007EB 9E30                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007ED 03434C53            <1>     db 3, "CLS"
    47 000007F1 4531                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F3 05425245414B        <1>     db 5, "BREAK"
    50 000007F9 B731                <1>     dw break - startLbl
    51                              <1> 
    52 000007FB 06564552494659      <1>     db 6, "VERIFY"
    53 00000802 3832                <1>     dw verify - startLbl
    54                              <1> 
    55 00000804 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080B B532                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080D 0352454E            <1>     db 3, "REN"
    59 00000811 B532                <1>     dw rename - startLbl
    60                              <1>     
    61 00000813 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081C FE36                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081E 03564552            <1>     db 3, "VER"
    65 00000822 0E38                <1>     dw version - startLbl
    66                              <1> 
    67 00000824 03564F4C            <1>     db 3, "VOL"
    68 00000828 4F37                <1>     dw volume - startLbl
    69                              <1> 
    70 0000082A 034D454D            <1>     db 3, "MEM"
    71 0000082E 5238                <1>     dw memory - startLbl
    72                              <1> 
    73 00000830 0445584954          <1>     db 4, "EXIT"
    74 00000835 4F3A                <1>     dw exit - startLbl
    75                              <1> 
    76 00000837 0454595045          <1>     db 4, "TYPE"
    77 0000083C 9C39                <1>     dw type - startLbl
    78                              <1> 
    79 0000083E 0450415448          <1>     db 4, "PATH"
    80 00000843 9C3D                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000845 03534554            <1>     db 3, "SET"
    83 00000849 7D3C                <1>     dw set - startLbl
    84                              <1> 
    85 0000084B 0650524F4D5054      <1>     db 6, "PROMPT"
    86 00000852 7B3E                <1>     dw prompt - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88                              <1> 
    89 00000854 05544F554348        <1>     db 5, "TOUCH"
    90 0000085A F134                <1>     dw touch - startLbl
    91                              <1> 
    92 0000085C 044A4F494E          <1>     db 4, "JOIN"
    93 00000861 5435                <1>     dw join - startLbl
    94                              <1> 
    95 00000863 055355425354        <1>     db 5, "SUBST"
    96 00000869 1736                <1>     dw subst - startLbl
    97                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    98                              <1> 
    99                              <1> ;BATCH ORIENTED COMMANDS HERE
   100 0000086B 044543484F          <1>     db 4, "ECHO"
   101 00000870 EB3E                <1>     dw echo - startLbl
   102                              <1> 
   103 00000872 055041555345        <1>     db 5, "PAUSE"
   104 00000878 C73F                <1>     dw pauza - startLbl
   105                              <1> 
   106 0000087A 0352454D            <1>     db 3, "REM"
   107 0000087E 1040                <1>     dw remark - startLbl
   108 00000880 FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000881 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000884 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000889 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000892 696C65206D69737369- <1>
     4 0000089B 6E670D0A24          <1>
     5 000008A0 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008A9 6469736B2077697468- <1>
     5 000008B2 206261746368206669- <1>
     5 000008BB 6C65                <1>
     6 000008BD 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008C6 737320616E79206B65- <1>
     6 000008CF 79207768656E207265- <1>
     6 000008D8 6164790D0A24        <1>
     7 000008DE 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000008E7 746520626174636820- <1>
     7 000008F0 6A6F622028592F4E29- <1>
     7 000008F9 3F2024              <1>
     8 000008FC 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 00000905 6E64206F722066696C- <1>
     8 0000090E 65206E616D650D0A24  <1>
     9 00000917 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000920 2066696C65206E616D- <1>
     9 00000929 65206F7220          <1>
    10 0000092E 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000937 666F756E640D0A24    <1>
    11 0000093F 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000948 656E74206469736B20- <1>
    11 00000951 73706163650D0A24    <1>
    12 00000959 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000962 7669726F6E6D656E74- <1>
    12 0000096B 2073706163650D0A24  <1>
    13 00000974 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000097D 74696F6E206572726F- <1>
    13 00000986 720D0A24            <1>
    14 0000098A 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000993 6F7420626520636F70- <1>
    14 0000099C 696564206F6E746F20- <1>
    14 000009A5 697473656C660D0A24  <1>
    15 000009AE 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009B7 662064657374696E61- <1>
    15 000009C0 74696F6E206C6F7374- <1>
    15 000009C9 206265666F72652063- <1>
    15 000009D2 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009D8 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000009E1 636F706965640D0A24  <1>
    18 000009EA 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000009F3 68206D656D6F727920- <1>
    18 000009FC 666F7220434F50590D- <1>
    18 00000A05 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 00000A07 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A10 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A11 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A1A 65650D0A24          <1>
    23 00000A1F 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A28 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A31 726976652073706563- <1>
    25 00000A3A 696669636174696F6E- <1>
    25 00000A43 0D0A24              <1>
    26 00000A46 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A4F 6B6579207768656E20- <1>
    26 00000A58 7265616479202E202E- <1>
    26 00000A61 202E2024            <1>
    27 00000A65 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A6E 6172616D657465720D- <1>
    27 00000A77 0A24                <1>
    28                              <1> 
    29 00000A79 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000A82 576564546875467269- <1>
    29 00000A8B 536174              <1>
    30 00000A8E 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000A97 206461746524        <1>
    31 00000A9D 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000AA6 6174652069732024    <1>
    32 00000AAE 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AB7 657720646174652024  <1>
    33 00000AC0 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000AC9 293A2024            <1>
    34 00000ACD 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AD6 293A2024            <1>
    35 00000ADA 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000AE3 293A2024            <1>
    36 00000AE7 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000AF0 2074696D6524        <1>
    37 00000AF6 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000AFF 696D652069732024    <1>
    38 00000B07 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B10 65772074696D653A20- <1>
    38 00000B19 24                  <1>
    39                              <1> 
    40 00000B1A 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B23 7572652028592F4E29- <1>
    40 00000B2C 3F2024              <1>
    41                              <1> 
    42 00000B2F 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B38 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B41 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B4A 6E2064726976652024  <1>
    45 00000B53 2069732024          <1> volOk   db " is $"
    46 00000B58 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B61 6162656C24          <1>
    47                              <1> 
    48 00000B66 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B6F 69726563746F72790D- <1>
    48 00000B78 0A24                <1>
    49 00000B7A 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000B83 206372656174652064- <1>
    49 00000B8C 69726563746F72790D- <1>
    49 00000B95 0A24                <1>
    50 00000B97 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000BA0 6174682C206E6F7420- <1>
    50 00000BA9 6469726563746F7279- <1>
    50 00000BB2 2C0D0A              <1>
    51 00000BB5 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BBE 6F7279206E6F742065- <1>
    51 00000BC7 6D7074790D0A24      <1>
    52 00000BCE 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BD7 79206F66202024      <1>
    53 00000BDE 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000BE7 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000BF0 6E6965640D0A24      <1>
    55 00000BF7 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000C00 72697665206973206E- <1>
    55 00000C09 6F206C6F6E67657220- <1>
    55 00000C12 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C18 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C21 65766963650D0A24    <1>
    58 00000C29 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C32 20666F756E640D0A24  <1>
    59 00000C3B 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C44 726F720D0A24        <1>
    60 00000C4A 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C53 6F74206265206E6573- <1>
    60 00000C5C 7465640D0A24        <1>
    61 00000C62 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C6B 6174652066696C6520- <1>
    61 00000C74 6572726F7220647572- <1>
    61 00000C7D 696E6720706970650D- <1>
    61 00000C86 0A24                <1>
    62 00000C88 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000C91 2062696E6172792072- <1>
    62 00000C9A 656164732066726F6D- <1>
    62 00000CA3 206120646576696365- <1>
    62 00000CAC 0D0A24              <1>
    63 00000CAF 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CB5 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CBA 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CC3 24                  <1>
    66 00000CC4 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CCD 2024                <1>
    67 00000CCF 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CD8 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000CE1 617468206F72206669- <1>
    68 00000CEA 6C65206E616D650D0A- <1>
    68 00000CF3 24                  <1>
    69 00000CF4 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000CFD 756D626572206F6620- <1>
    69 00000D06 706172616D65746572- <1>
    69 00000D0F 730D0A24            <1>
    70 00000D13 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D1C 74696E6720746F2064- <1>
    70 00000D25 6576696365          <1>
    71 00000D2A 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D2E 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D37 6F6F2062696720746F- <1>
    72 00000D40 2066697420696E206D- <1>
    72 00000D49 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D51 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D5A 20202020202020546F- <1>
    75 00000D63 74616C207379737465- <1>
    75 00000D6C 6D206D656D6F72793A- <1>
    75 00000D75 2024                <1>
    76 00000D77 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D80 20202020202020204D- <1>
    76 00000D89 656D6F727920757365- <1>
    76 00000D92 6420627920444F533A- <1>
    76 00000D9B 2024                <1>
    77 00000D9D 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000DA6 656D6F727920757365- <1>
    77 00000DAF 64206279206170706C- <1>
    77 00000DB8 69636174696F6E733A- <1>
    77 00000DC1 2024                <1>
    78 00000DC3 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DCC 656D6F727920726573- <1>
    78 00000DD5 657276656420627920- <1>
    78 00000DDE 68617264776172653A- <1>
    78 00000DE7 2024                <1>
    79 00000DE9 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000DF2 202020202020202020- <1>
    79 00000DFB 2020202020204D656D- <1>
    79 00000E04 6F727920667265653A- <1>
    79 00000E0D 2024                <1>
    80 00000E0F 20627974657324      <1> memByte db " bytes$"
    81 00000E16 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E1F 6F7420417373657274- <1>
    81 00000E28 61696E20444F532045- <1>
    81 00000E31 6E74727920506F696E- <1>
    81 00000E3A 7424                <1>
    82 00000E3C 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E45 416C6C6F636174696F- <1>
    82 00000E4E 6E204572726F7224    <1>
    83 00000E56 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E5F 4572726F7224        <1>
    84 00000E65 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E6E 68616C74656424      <1>
    85                              <1> 
    86 00000E75 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E7E 206372656174652070- <1>
    86 00000E87 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000E8C 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000E95 6F6E206572726F720D- <1>
    88 00000E9E 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000E9F 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000EA3 2020202024          <1> fourSpc  db "    $"
    93 00000EA8 20202024            <1> threeSpc db "   $"
    94 00000EAC 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000EAF 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EB8 696679204F4E206F72- <1>
    96 00000EC1 204F46460D0A24      <1>
    97                              <1> 
    98 00000EC8 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000ED0 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000ED9 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000EE2 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000EEB 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000EF2 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000EF8 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000F01 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000F0A 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000F0D 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F0F 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F11 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F13 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F15 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F17 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F19 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F1B 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F1D 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F1F 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F21 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F23 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F25 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F27 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F29 E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F2B F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F2D 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F2F 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F31 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F3A 63746563742024      <1>
   131 00000F41 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F4A 6E69742024          <1>
   132 00000F4F 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F58 2024                <1>
   133 00000F5A 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F63 6F6D6D616E642024    <1>
   134 00000F6B 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F71 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F7A 73742024            <1>
   136 00000F7E 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000F84 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000F8D 656469612024        <1>
   138 00000F93 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000F9C 7420466F756E642024  <1>
   139 00000FA5 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000FAE 7065722024          <1>
   140 00000FB3 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FBC 6C742024            <1>
   141 00000FC0 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FC9 742024              <1>
   142 00000FCC 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FD5 61696C7572652024    <1>
   143 00000FDD 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00000FE6 696F6C6174696F6E20- <1>
   143 00000FEF 24                  <1>
   144 00000FF0 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00000FF9 6174696F6E2024      <1>
   145 00001000 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00001009 73657274206469736B- <1>
   145 00001012 20                  <1>
   146 00001013 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000101C 2020                <1>
   147 0000101E 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001021 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 0000102A 696C61626C652024    <1>
   150 00001032 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000103B 756666657220657272- <1>
   150 00001044 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001048 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001051 6574776F726B204572- <1>
   153 0000105A 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 0000105F 64726976652024      <1> drvMsg      db "drive $"
   157 00001066 6572726F7220726561- <1> readMsg     db "error reading $"
   157 0000106F 64696E672024        <1>
   158 00001075 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 0000107E 74696E672024        <1>
   159 00001084 41626F727424        <1> abortMsg    db "Abort$" 
   160 0000108A 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 00001091 526574727924        <1> retryMsg    db "Retry$"
   162 00001097 4661696C24          <1> failMsg     db "Fail$"
   163 0000109C 2C2024              <1> betweenMsg  db ", $"
   164 0000109F 3F2024              <1> endMsg      db "? $"
   165 000010A2 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 000010A6 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 000010A9 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 000010AD C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010B0 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010B2 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010B5 CD21                <1>     int 21h
    12 000010B7 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010B9 7432                <1>     jz commandMain
    14 000010BB E8EA090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010C0 F605CDEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010C7 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010CD C6058EF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010D4 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010DB 488D3D81F0FFFF      <1>     lea rdi, inBuffer + 2
    22 000010E2 E891330000          <1>     call strcpy
    23 000010E7 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 000010EB EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 000010ED 488B2511EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 000010F4 E8B1090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 000010F9 F60594EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 00001100 0F8549290000        <1>     jnz exit
    31 00001106 E859310000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 0000110B B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 00001110 CD21                <1>     int 21h
    34 00001112 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001117 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000111C CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 0000111E E8C5330000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001123 E899300000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001128 F60565EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 0000112F 0F85D10B0000        <1>     jnz batNextLine
    43 00001135 488D1525F0FFFF      <1>     lea rdx, inBuffer
    44 0000113C B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001141 CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 00001143 E812310000          <1>     call printCRLFecho  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001148 803D13F0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 0000114F 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 00001151 488D3509F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001158 488D3D84F0FFFF      <1>     lea rdi, cpyBuffer
    55 0000115F B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 00001164 F3A4                <1>     rep movsb
    57 00001166 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 0000116B 488D35F5F0FFFF      <1>     lea rsi, cmdBuffer + 2
    60 00001172 E83F330000          <1>     call skipDelimiters
    61 00001177 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 0000117A 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 0000117C 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 0000117F 0F84DA030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 00001185 4C8B0583EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 0000118C E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 00001191 E861070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 00001196 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 0000119B E84B020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 000011A0 E857050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 000011A5 F605EDEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 000011AC 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 000011B2 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011B7 488D3DA9F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011BE 4889F1              <1>     mov rcx, rsi
    80 000011C1 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011C4 280D9CF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011CA 8A0D96F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011D0 FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011D2 F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011D4 E8FE320000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011D9 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011DB 488D3503F0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 000011E2 31C9                <1>     xor ecx, ecx
    94 000011E4 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 000011E7 AC                  <1>     lodsb
    97 000011E8 3C22                <1>     cmp al, '"'
    98 000011EA 7507                <1>     jne .notQuoteToCount
    99 000011EC FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 000011EE E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 000011F3 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 000011F5 75F0                <1>     jne .countQuotes
   104 000011F7 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 000011FA 488D3D66F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 00001201 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 00001202 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 00001204 750E                <1>     jne .notQuote
   110 00001206 FECD                <1>     dec ch          ;We have a quote, now decrement
   111 00001208 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 0000120A AA                  <1>     stosb   ;Store char and inc rdi
   115 0000120B FEC1                <1>     inc cl
   116 0000120D AC                  <1>     lodsb   ;Get next char
   117 0000120E 3C22                <1>     cmp al, '"'
   118 00001210 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00001212 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00001214 E87D060000          <1>     call peelRedir      ;Intervene redir if needed
   122 00001219 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 0000121B 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 0000121D EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 0000121F 0F843A030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00001225 AA                  <1>     stosb       ;Store char and advance rdi
   130 00001226 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001228 7404                <1>     je .exit
   132 0000122A FEC1                <1>     inc cl      ;Increment char count
   133 0000122C EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 0000122E 880D32F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00001234 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00001235 488D352BF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 0000123C 31C9                <1>     xor ecx, ecx
   145 0000123E 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00001241 AC                  <1>     lodsb
   148 00001242 3C22                <1>     cmp al, '"'
   149 00001244 7507                <1>     jne .notQuoteToCount
   150 00001246 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001248 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 0000124D 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 0000124F 75F0                <1>     jne .countQuotes
   155 00001251 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00001254 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 0000125B AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 0000125C 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 0000125E 750E                <1>     jne .notQuote
   161 00001260 FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00001262 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00001264 AA                  <1>     stosb   ;Store char and inc rdi
   166 00001265 FEC1                <1>     inc cl
   167 00001267 AC                  <1>     lodsb   ;Get next char
   168 00001268 3C22                <1>     cmp al, '"'
   169 0000126A 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 0000126C FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 0000126E 3C7C                <1>     cmp al, "|"
   173 00001270 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00001272 B00D                <1>     mov al, CR          ;Store the pipe char
   175 00001274 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001277 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001278 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 0000127A 7404                <1>     je .exit
   180 0000127C FEC1                <1>     inc cl      ;Increment char count
   181 0000127E EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 00001280 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 00001283 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 0000128A 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 0000128D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 0000128E C605A1F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 00001295 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 0000129C 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 0000129F 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 000012A3 8A0581EDFFFF        <1>     mov al, byte [switchChar]
   197 000012A9 F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 000012AB 7506                <1>     jne .noSwitchFnd
   199 000012AD F615F7EDFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 000012B3 E8FE310000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012B8 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012BB 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012BD 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012C0 488D3D3FEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012C7 B801290000          <1>     mov eax, 2901h
   208 000012CC CD21                <1>     int 21h
   209 000012CE 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012D0 0F8408010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012D6 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012DA 7505                <1>     jne .noTrailingDots
   215 000012DC 48FFCE              <1>     dec rsi
   216 000012DF EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 000012E1 8A0542EDFFFF        <1>     mov al, byte [pathSep]  
   219 000012E7 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 000012E9 7525                <1>     jne .notPs
   221 000012EB 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 000012EE AC                  <1>     lodsb   ;Get this char
   223 000012EF 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 000012F2 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 000012F4 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 000012F6 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 000012F8 7413                <1>     je .delimfnd
   228 000012FA 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 000012FC 740F                <1>     je .delimfnd
   230 000012FE 3C2E                <1>     cmp al, byte "."
   231 00001300 740B                <1>     je .delimfnd
   232 00001302 3C22                <1>     cmp al, byte '"'
   233 00001304 7407                <1>     je .delimfnd
   234 00001306 E8B9310000          <1>     call isALdelimiter  ;Is this a delim char?
   235 0000130B 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 0000130D 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 00001310 4889F1              <1>     mov rcx, rsi
   242 00001313 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00001316 0F84BA000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   244 0000131C 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   245 0000131F 488D3DC1EFFFFF      <1>     lea rdi, cmdPathSpec
   246 00001326 F3A4                <1>     rep movsb
   247 00001328 30C0                <1>     xor al, al
   248 0000132A AA                  <1>     stosb   ;Store a terminating null
   249 0000132B 4887DE              <1>     xchg rbx, rsi
   250                              <1> ;Now we build FCBs for the arguments!
   251 0000132E 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   252 00001335 E893000000          <1>     call .skipAndCheckCR
   253 0000133A 745B                <1>     je .setupCmdVars
   254 0000133C C60561EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   255 00001343 4889F0              <1>     mov rax, rsi
   256 00001346 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   257 00001349 880556EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   258 0000134F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   259 00001353 B801290000          <1>     mov eax, 2901h
   260 00001358 CD21                <1>     int 21h
   261 0000135A 880546EDFFFF        <1>     mov byte [arg1FCBret], al
   262                              <1> .skipArg:
   263 00001360 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   264 00001361 3C0D                <1>     cmp al, CR
   265 00001363 7432                <1>     je .setupCmdVars
   266 00001365 E85A310000          <1>     call isALdelimiter
   267 0000136A 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   268 0000136C E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   269 00001371 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   270 00001373 C6052DEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   271 0000137A 4889F0              <1>     mov rax, rsi            
   272 0000137D 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   273 00001380 880522EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   274 00001386 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 0000138A B801290000          <1>     mov eax, 2901h
   276 0000138F CD21                <1>     int 21h
   277 00001391 880512EDFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .setupCmdVars:
   279                              <1> ;Before returning, we copy the command name to cmdName 
   280 00001397 488D3D49EFFFFF      <1>     lea rdi, cmdPathSpec
   281 0000139E E8CA310000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   282 000013A3 E8E9300000          <1>     call strlen ;Get the length of the null terminated final path componant
   283 000013A8 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   284 000013AE 7726                <1>     ja .exitBad     ;Return error
   285 000013B0 4889FE              <1>     mov rsi, rdi
   286 000013B3 488D3D7CEFFFFF      <1>     lea rdi, cmdName
   287 000013BA FFC9                <1>     dec ecx ;Minus the terminating null
   288 000013BC 880F                <1>     mov byte [rdi], cl ;Store the length here
   289 000013BE 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   290                              <1> .cpCmdName:
   291 000013C1 AC                  <1>     lodsb
   292 000013C2 E8D4300000          <1>     call ucChar ;Uppercase the char
   293 000013C7 AA                  <1>     stosb
   294 000013C8 FFC9                <1>     dec ecx
   295 000013CA 75F5                <1>     jnz .cpCmdName
   296                              <1>     return
    13                              <2> %%_ret:
    14 000013CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> .skipAndCheckCR:
   298                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   299 000013CD E8E4300000          <1>     call skipDelimiters ;Go to the next char in the input line
   300 000013D2 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   301                              <1>     return
    13                              <2> %%_ret:
    14 000013D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> .exitBad:
   303 000013D6 C60559EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   304                              <1>     return
    13                              <2> %%_ret:
    14 000013DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .exitBadDrv:
   306 000013DE C60551EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   307 000013E5 E8E10A0000          <1>     call badDriveError
   308                              <1>     return
    13                              <2> %%_ret:
    14 000013EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> doCommandLine:
   311                              <1>     ;The following check accounts for the end of a piped command
   312 000013EB 803D44EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   313 000013F2 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   314 000013F8 803D37EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   315 000013FF 0F84FF0A0000        <1>     je badCmdError
   316 00001405 803D2AEFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   317                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000140C 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 0000140E 488D35D2EEFFFF      <1>     lea rsi, cmdPathSpec
   319 00001415 0FB71DCBEEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   320 0000141C 80FF3A              <1>     cmp bh, ":"
   321 0000141F 7520                <1>     jne .noDriveSpecified
   322 00001421 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   323 00001423 E873300000          <1>     call ucChar     ;Uppercase al
   324 00001428 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   325                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   326 0000142A 803D05EFFFFF02      <1>     cmp byte [cmdName], 2
   327 00001431 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   328 00001433 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   329 00001435 E82D300000          <1>     call setDrive
   330                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000143A 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 0000143C E98A0A0000          <1>     jmp badDriveError
   332                              <1> .noDriveSpecified:
   333                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   334 00001441 488D1D1DEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   335 00001448 488D35E7EEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   336 0000144F B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   337 00001454 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 00001459 B5FF                <1>     mov ch, -1
   339 0000145B CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   340 0000145D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   341 00001462 BAFFFF0000          <1>     mov edx, 0FFFFh
   342 00001467 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   343 00001469 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   344                              <1>             ;        al = 0  if the command should be executed as usual
   345 0000146B 84C0                <1>     test al, al
   346 0000146D 7444                <1>     jz .executeInternal
   347                              <1>     ;Here we execute externally and return to the prompt
   348                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   349 0000146F 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   350 00001476 488D35B9EEFFFF      <1>     lea rsi, cmdName        
   351 0000147D B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   352 00001482 BAFFFF0000          <1>     mov edx, 0FFFFh
   353 00001487 B5FF                <1>     mov ch, -1
   354 00001489 CD2F                <1>     int 2Fh
   355 0000148B 803DA4EEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   356                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001492 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001494 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   357                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   358                              <1>     ; is an external command that is in the CD or in the PATH.
   359                              <1>     ;Should not be used for this purpose but it is here...
   360 00001495 E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   361 0000149A 488D3595EEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   362 000014A1 AC                  <1>     lodsb                   ;Get the name length
   363 000014A2 0FB6C8              <1>     movzx ecx, al
   364 000014A5 488D3D3BEEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   365 000014AC F3A4                <1>     rep movsb   
   366 000014AE 31C0                <1>     xor eax, eax
   367 000014B0 AA                  <1>     stosb   ;Store null terminator
   368 000014B1 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   369                              <1> .executeInternal:
   370 000014B3 E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   371 000014B8 488D3D28EEFFFF      <1>     lea rdi, cmdPathSpec
   372 000014BF E8CD2F0000          <1>     call strlen ;Get the length of the input command
   373 000014C4 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   374 000014C6 380D6AEEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   375 000014CC 0F859C250000        <1>     jne launchChild     ;If not, a path was specified, exit!
   376                              <1> .executeInternal2:
   377                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   378 000014D2 488D1DBDF2FFFF      <1>     lea rbx, functionTable
   379                              <1> .nextEntry:
   380 000014D9 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   381 000014DC 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   382 000014DF 0F8489250000        <1>     je launchChild      ;If so, check externally now
   383 000014E5 380D4BEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   384 000014EB 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   385                              <1>     ;Here they have the same length so lets see if the name is the same
   386 000014ED 56                  <1>     push rsi
   387                              <1>     ;ecx has the length to compare
   388 000014EE 51                  <1>     push rcx
   389 000014EF 488D7301            <1>     lea rsi, qword [rbx + 1]
   390 000014F3 488D3D3DEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   391 000014FA F3A6                <1>     rep cmpsb   ;Check the strings are equal
   392 000014FC 59                  <1>     pop rcx
   393 000014FD 5E                  <1>     pop rsi
   394 000014FE 751E                <1>     jne .gotoNextEntry
   395                              <1>     ;Here it was found both strings are equal
   396 00001500 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   397 00001505 480FB71F            <1>     movzx rbx, word [rdi]
   398 00001509 488D3DF0EAFFFF      <1>     lea rdi, startLbl
   399 00001510 4801FB              <1>     add rbx, rdi
   400 00001513 C605F3EAFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   401 0000151A FFD3                <1>     call rbx        ;Call the internal function!
   402 0000151C EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   403                              <1> .gotoNextEntry:
   404 0000151E 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   405 00001525 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   406 00001528 EBAF                <1>     jmp short .nextEntry
   407                              <1> 
   408                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   409                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   410                              <1> ;Can depend on RSP here because I fixed DOS.
   411 0000152A 488B25D4EAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   412 00001531 E838320000          <1>     call resetIDTentries
   413 00001536 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   414 0000153B CD21                <1>     int 21h
   415 0000153D 668905C9EAFFFF      <1>     mov word [returnCode], ax
   416 00001544 84E4                <1>     test ah, ah     ;Regular exit
   417 00001546 0F8454FCFFFF        <1>     jz commandMain.okRet
   418 0000154C 80FC03              <1>     cmp ah, 3       ;TSR exit
   419 0000154F 0F844BFCFFFF        <1>     je commandMain.okRet
   420                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   421                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   422                              <1>     ; as we always close the COMMAND.COM instance at this point.
   423 00001555 E83F000000          <1>     call cleanupRedirs
   424 0000155A E98EFBFFFF          <1>     jmp commandMain
   425                              <1> 
   426                              <1> hardSynErr:
   427                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   428 0000155F E843090000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   429 00001564 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   430                              <1> redirFailure:
   431 00001569 488D151CF9FFFF      <1>     lea rdx, redirErrMsg
   432 00001570 B913000000          <1>     mov ecx, redirErrMsgL
   433 00001575 EB0C                <1>     jmp short redirPipeFailureCommon
   434                              <1> pipeFailure:
   435 00001577 488D15F7F8FFFF      <1>     lea rdx, pipeErrMsg
   436 0000157E B917000000          <1>     mov ecx, pipeErrMsgL
   437                              <1> redirPipeFailureCommon:
   438                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   439                              <1> ;This routine tries to close whatever handles are not -1 and delete
   440                              <1> ; pipe files if the pipe count is not 0.
   441                              <1> ;It resets all variables and jumps to reset the stack!
   442 00001583 B800400000          <1>     mov eax, 4000h  ;Write handle
   443 00001588 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   444 0000158D CD21                <1>     int 21h
   445                              <1> .noPrint:
   446 0000158F E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   447 00001594 E954FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   448                              <1> 
   449                              <1> cleanupRedirs:
   450                              <1> ;Cleans all active redirections, returning to the saved state.
   451                              <1> ;Deletes any pipe files, leaves any redir out files.
   452                              <1> ;Resets the internal vars
   453 00001599 0FB70500EBFFFF      <1>     movzx eax, word [redirSTDIN]
   454 000015A0 0FB715F3EAFFFF      <1>     movzx edx, word [pipeSTDIN]
   455 000015A7 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   456 000015A9 E8CC000000          <1>     call .closeAndReplace
   457 000015AE 0FB705EDEAFFFF      <1>     movzx eax, word [redirSTDOUT]
   458 000015B5 0FB715E0EAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   459 000015BC FFC3                <1>     inc ebx         ;Select STDOUT for closing
   460 000015BE E8B7000000          <1>     call .closeAndReplace
   461 000015C3 66C705D2EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   462 000015CC 0FB71DCDEAFFFF      <1>     movzx ebx, word [redirSTDIN]
   463 000015D3 E892000000          <1>     call .closeHandle
   464                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   465 000015D8 66C705BFEAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   466 000015E1 0FB71DBAEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   467 000015E8 E87D000000          <1>     call .closeHandle
   468 000015ED 66C705ACEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   469 000015F6 0FB71D9DEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   470 000015FD E868000000          <1>     call .closeHandle
   471 00001602 66C7058FEAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   472 0000160B 0FB71D8AEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 00001612 E853000000          <1>     call .closeHandle
   474 00001617 66C7057CEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   475 00001620 C60572EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   476 00001627 488D15B4EDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   477 0000162E 803A00              <1>     cmp byte [rdx], 0
   478 00001631 7407                <1>     jz .checkOld
   479 00001633 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   480 00001638 CD21                <1>     int 21h
   481                              <1> .checkOld:
   482 0000163A 488D15F0EDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   483 00001641 803A00              <1>     cmp byte [rdx],0
   484 00001644 7407                <1>     jz .pipeNamesComplete
   485 00001646 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   486 0000164B CD21                <1>     int 21h
   487                              <1> .pipeNamesComplete:
   488 0000164D 31C0                <1>     xor eax, eax
   489                              <1>     ;Invalidate the pointers and the paths too
   490 0000164F 4889052AEEFFFF      <1>     mov qword [newPipe], rax
   491 00001656 4889052BEEFFFF      <1>     mov qword [oldPipe], rax
   492 0000165D 89057FEDFFFF        <1>     mov dword [pipe1Filespec], eax
   493 00001663 8905C8EDFFFF        <1>     mov dword [pipe2Filespec], eax
   494                              <1>     return
    13                              <2> %%_ret:
    14 00001669 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .closeHandle:
   497 0000166A 81FBFFFFFFFF        <1>     cmp ebx, -1
   498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001670 74(69)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499 00001672 B8003E0000          <1>     mov eax, 3E00h
   500 00001677 CD21                <1>     int 21h
   501                              <1>     return
    13                              <2> %%_ret:
    14 00001679 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> .closeAndReplace:
   503                              <1> ;Input: ax = one possible handle, dx = second possible handle
   504                              <1> ;       bx = handle to close and copy ax/dx into
   505                              <1> ;Output: Handle intervened on. bx preserved
   506 0000167A C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   507 0000167D 09D0                <1>     or eax, edx     ;Form packed
   508 0000167F 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   509                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001684 74(79)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   510 00001686 E8DFFFFFFF          <1>     call .closeHandle
   511 0000168B 663DFFFF            <1>     cmp ax, -1      
   512 0000168F 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   513 00001693 53                  <1>     push rbx
   514 00001694 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   515 00001697 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   516 0000169C CD21                <1>     int 21h
   517 0000169E 5B                  <1>     pop rbx
   518                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000169F 73(79)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   519                              <1>     ;Else we now try to force default device to open!
   520 000016A1 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   521 000016A6 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   522 000016AB 488D1527F8FFFF      <1>     lea rdx, devName
   523 000016B2 CD21                <1>     int 21h
   524                              <1>     return
    13                              <2> %%_ret:
    14 000016B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> cleanRedirOut:
   527                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   528                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   529                              <1> ; particular cases like launching bat files which needs special handling in 
   530                              <1> ; that all redirs need to be completely removed.
   531 000016B5 66813DE4E9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   532                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016BE 74(B4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   533 000016C0 0FB71DDBE9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   534 000016C7 B901000000          <1>     mov ecx, 1      ;STDOUT
   535 000016CC B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   536 000016D1 CD21                <1>     int 21h
   537 000016D3 0FB71DC8E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   538 000016DA B8003E0000          <1>     mov eax, 3E00h  
   539 000016DF CD21                <1>     int 21h
   540 000016E1 66C705B8E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   541 000016EA 488D15A2ECFFFF      <1>     lea rdx, rdrOutFilespec
   542 000016F1 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   543 000016F6 CD21                <1>     int 21h
   544 000016F8 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   545                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   546                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   547                              <1>     return
    13                              <2> %%_ret:
    14 000016FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> advanceRedir:
   550                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   551                              <1> ;Close stdin redir then stdout redir. 
   552 000016FC F6059BE9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   553 00001703 0F8585000000        <1>     jnz .redirIn
   554 00001709 F60589E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   555 00001710 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   556 00001716 0FBF057DE9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   557 0000171D 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   558 00001722 0F84EB000000        <1>     je .pipeOut              
   559                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   560 00001728 0FB71D6BE9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   561 0000172F 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   562 00001731 B800460000          <1>     mov eax, 4600h
   563 00001736 CD21                <1>     int 21h
   564 00001738 0F8239FEFFFF        <1>     jc pipeFailure
   565 0000173E B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   566 00001743 CD21                <1>     int 21h
   567 00001745 0F822CFEFFFF        <1>     jc pipeFailure
   568 0000174B 488B1536EDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   569 00001752 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   570 00001757 CD21                <1>     int 21h
   571 00001759 0F8218FEFFFF        <1>     jc pipeFailure
   572 0000175F C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   573 00001762 66C7052FE9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   574                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   575                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   576                              <1>     ;Else exit!
   577 0000176B 0FBF052AE9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   578 00001772 3DFFFFFFFF          <1>     cmp eax, -1
   579 00001777 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   580 0000177D C60515E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   581 00001784 F60514E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   582 0000178B 753D                <1>     jnz .redirOut               ;Go for it if so!
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000178D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .redirIn:
   585                              <1> ;Here we clean redirIn
   586 0000178E 0FB71D0BE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   587 00001795 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   588 00001797 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   589 0000179C CD21                <1>     int 21h
   590 0000179E 0F82C5FDFFFF        <1>     jc redirFailure
   591 000017A4 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   592 000017A9 CD21                <1>     int 21h
   593 000017AB 0F82B8FDFFFF        <1>     jc redirFailure
   594 000017B1 66C705E6E8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   595 000017BA C605DDE8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   596 000017C1 F605D1E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   597 000017C8 7549                <1>     jnz .pipeOut
   598                              <1> .redirOut:
   599 000017CA F605CEE8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   600                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017D1 74(8D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   601                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   602 000017D3 F605BFE8FFFFFF      <1>     test byte [pipeFlag], -1
   603 000017DA 7537                <1>     jnz short .pipeOut
   604 000017DC 0FB71DBFE8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   605 000017E3 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   606 000017E8 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   607 000017ED CD21                <1>     int 21h
   608 000017EF 0F8274FDFFFF        <1>     jc redirFailure
   609 000017F5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   610 000017FA CD21                <1>     int 21h
   611 000017FC 0F8267FDFFFF        <1>     jc redirFailure
   612 00001802 66C70597E8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   613 0000180B C6058DE8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   614                              <1>     return
    13                              <2> %%_ret:
    14 00001812 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .pipeOut:
   616                              <1> ;Duplicate STDIN to save across pipe
   617 00001813 0FBF0582E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   618 0000181A 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   619                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000181F 74(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   620 00001821 B800450000          <1>     mov eax, 4500h
   621 00001826 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   622 00001828 CD21                <1>     int 21h
   623 0000182A 0F8247FDFFFF        <1>     jc pipeFailure
   624 00001830 66890563E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   625                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   626 00001837 B800460000          <1>     mov eax, 4600h
   627 0000183C 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   628 0000183E FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   629 00001840 CD21                <1>     int 21h
   630 00001842 0F822FFDFFFF        <1>     jc pipeFailure
   631                              <1> ;Now return the original stdout to stdout
   632 00001848 89D9                <1>     mov ecx, ebx
   633 0000184A 0FB71D4BE8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   634 00001851 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   635 00001856 CD21                <1>     int 21h
   636 00001858 0F8219FDFFFF        <1>     jc pipeFailure
   637                              <1> ;Now close the DUP'ed STDOUT
   638 0000185E B8003E0000          <1>     mov eax, 3E00h
   639 00001863 CD21                <1>     int 21h
   640 00001865 0F820CFDFFFF        <1>     jc pipeFailure
   641                              <1> ;Finally unwind STDIN to the beginning of the file
   642 0000186B B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   643 00001870 31DB                <1>     xor ebx, ebx    ;STDIN handle
   644 00001872 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   645 00001874 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   646 00001876 CD21                <1>     int 21h
   647 00001878 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   648 0000187E 488B15FBEBFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   649 00001885 488915FCEBFFFF      <1>     mov qword [oldPipe], rdx
   650 0000188C 66C70507E8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001895 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> 
   654                              <1> peelRedir:
   655                              <1> ;Checks and sets up redir as appropriate
   656                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   657                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   658                              <1> ;Output: ZF=NZ => No redir
   659                              <1> ;        ZF=ZY => Redir
   660                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   661                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   662 00001896 51                  <1>     push rcx
   663 00001897 57                  <1>     push rdi
   664 00001898 3C3C                <1>     cmp al, "<"
   665 0000189A 740C                <1>     je .inputRedir
   666 0000189C 3C3E                <1>     cmp al, ">"
   667 0000189E 7427                <1>     je .outputRedir
   668 000018A0 3C7C                <1>     cmp al, "|"
   669 000018A2 7441                <1>     je .pipeSetup
   670 000018A4 F8                  <1>     clc
   671                              <1> .redirExit:
   672 000018A5 5F                  <1>     pop rdi
   673 000018A6 59                  <1>     pop rcx
   674                              <1>     return
    13                              <2> %%_ret:
    14 000018A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   675                              <1> .inputRedir:
   676 000018A8 C605EFE7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   677 000018AF 488D3D8EEAFFFF      <1>     lea rdi, rdrInFilespec
   678                              <1> .redirCommon:
   679 000018B6 E8FB2B0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   680 000018BB E8272D0000          <1>     call cpDelimPathToBufz
   681 000018C0 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   682 000018C3 30C0                <1>     xor al, al  ;Clear the ZF flag
   683 000018C5 EBDE                <1>     jmp short .redirExit
   684                              <1> .outputRedir:
   685 000018C7 C605D1E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   686 000018CE 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   687 000018D1 7509                <1>     jne .notDouble
   688 000018D3 FE05C6E7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   689 000018D9 48FFC6              <1>     inc rsi ;Go past it too
   690                              <1> .notDouble:
   691 000018DC 488D3DB0EAFFFF      <1>     lea rdi, rdrOutFilespec
   692 000018E3 EBD1                <1>     jmp short .redirCommon
   693                              <1> .pipeSetup:
   694 000018E5 56                  <1>     push rsi    ;Save rsi pointing to char past |
   695 000018E6 E8CB2B0000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   696 000018EB 803E7C              <1>     cmp byte [rsi], "|" 
   697 000018EE 7403                <1>     je .badFnd
   698 000018F0 803E0D              <1>     cmp byte [rsi], CR
   699                              <1> .badFnd:
   700 000018F3 5E                  <1>     pop rsi
   701 000018F4 F9                  <1>     stc
   702 000018F5 EBAE                <1>     jmp short .redirExit
   703                              <1> 
   704                              <1> setupRedirandPipes:
   705                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   706                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   707 000018F7 0F8484000000        <1>     jz .redirIn
   708 000018FD 488D15DEEAFFFF      <1>     lea rdx, pipe1Filespec
   709 00001904 803A00              <1>     cmp byte [rdx], 0
   710 00001907 7410                <1>     jz .pathFound
   711 00001909 488D1521EBFFFF      <1>     lea rdx, pipe2Filespec
   712 00001910 803A00              <1>     cmp byte [rdx], 0
   713 00001913 0F855EFCFFFF        <1>     jnz pipeFailure
   714                              <1> .pathFound:
   715 00001919 48891560EBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   716 00001920 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   717 00001925 BB01000000          <1>     mov ebx, 1
   718 0000192A CD21                <1>     int 21h
   719 0000192C 0F8245FCFFFF        <1>     jc pipeFailure
   720 00001932 66890563E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   721 00001939 E8352B0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   722 0000193E 0441                <1>     add al, "A"
   723 00001940 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   724 00001945 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   725 00001947 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   726 00001949 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   727 0000194B B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   728 00001950 CD21                <1>     int 21h
   729 00001952 0F821FFCFFFF        <1>     jc pipeFailure
   730                              <1>     ;AX has the handle for this file now, this will become STDOUT
   731                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   732 00001958 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   733 0000195B B901000000          <1>     mov ecx, 1
   734 00001960 B800460000          <1>     mov eax, 4600h
   735 00001965 CD21                <1>     int 21h
   736 00001967 0F820AFCFFFF        <1>     jc pipeFailure
   737 0000196D B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   738 00001972 CD21                <1>     int 21h
   739 00001974 0F82FDFBFFFF        <1>     jc pipeFailure
   740 0000197A C60518E7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   741                              <1> .redirIn:
   742                              <1> ;Now check if any other redir needs to be setup
   743                              <1> ;Checks and sets up redir as appropriate.
   744                              <1>     ;Setup the redir here for STDIN
   745 00001981 F60516E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   746 00001988 7449                <1>     jz .redirOut
   747 0000198A 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   748 0000198C B800450000          <1>     mov eax, 4500h
   749 00001991 CD21                <1>     int 21h
   750 00001993 0F82D0FBFFFF        <1>     jc redirFailure
   751 00001999 66890500E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   752 000019A0 488D159DE9FFFF      <1>     lea rdx, rdrInFilespec
   753 000019A7 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   754 000019AC CD21                <1>     int 21h
   755 000019AE 0F82B5FBFFFF        <1>     jc redirFailure
   756 000019B4 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   757 000019B6 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   758 000019B9 B800460000          <1>     mov eax, 4600h
   759 000019BE CD21                <1>     int 21h
   760 000019C0 0F82A3FBFFFF        <1>     jc redirFailure
   761 000019C6 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   762 000019CB CD21                <1>     int 21h
   763 000019CD 0F8296FBFFFF        <1>     jc redirFailure
   764                              <1> .redirOut:
   765 000019D3 F605C5E6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   766                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019DA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019DC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 000019DD 803DB8E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   768                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019E4 75(DC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769                              <1>     ;Else setup the redir here for STDOUT
   770 000019E6 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   771 000019EB B800450000          <1>     mov eax, 4500h
   772 000019F0 CD21                <1>     int 21h
   773 000019F2 0F8271FBFFFF        <1>     jc redirFailure
   774 000019F8 668905A3E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   775 000019FF 488D158DE9FFFF      <1>     lea rdx, rdrOutFilespec
   776 00001A06 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   777 00001A0B CD21                <1>     int 21h
   778 00001A0D 730F                <1>     jnc .fileExists
   779 00001A0F B8003C0000          <1>     mov eax, 3C00h
   780 00001A14 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   781 00001A16 CD21                <1>     int 21h
   782 00001A18 0F824BFBFFFF        <1>     jc redirFailure
   783                              <1> .fileExists:
   784 00001A1E B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   785 00001A23 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   786 00001A26 B800460000          <1>     mov eax, 4600h  ;DUP2
   787 00001A2B CD21                <1>     int 21h
   788 00001A2D 0F8236FBFFFF        <1>     jc redirFailure
   789 00001A33 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   790 00001A38 CD21                <1>     int 21h
   791 00001A3A 0F8229FBFFFF        <1>     jc redirFailure
   792 00001A40 803D58E6FFFF01      <1>     cmp byte [redirOut], 1
   793                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A47 74(DC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   794                              <1>     ;Here we move the file pointer to the end of the file
   795 00001A49 31D2                <1>     xor edx, edx    ;Low order 32 bits
   796 00001A4B 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   797 00001A4D BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   798 00001A52 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   799 00001A57 CD21                <1>     int 21h
   800 00001A59 0F820AFBFFFF        <1>     jc redirFailure
   801                              <1>     return
    13                              <2> %%_ret:
    14 00001A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   802                              <1> 
   803                              <1> 
   804                              <1> pullCommandline:
   805                              <1> ;This command pulls the command tail down, removing the whole launch command
   806 00001A60 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   807                              <1> ;Skip leading separators
   808                              <1> .pctSkipLeading:
   809 00001A67 AC                  <1>     lodsb   ;Get first char
   810 00001A68 E8572A0000          <1>     call isALdelimiter
   811 00001A6D 74F8                <1>     je .pctSkipLeading
   812 00001A6F 48FFCE              <1>     dec rsi
   813                              <1>     ;rsi points to the start of the command
   814 00001A72 488D3D6EE8FFFF      <1>     lea rdi, cmdPathSpec
   815 00001A79 E8132A0000          <1>     call strlen ;Get the length of the command
   816 00001A7E FFC9                <1>     dec ecx ;Minus the terminating null
   817 00001A80 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   818 00001A83 280D1CE6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   819 00001A89 280D19E6FFFF        <1>     sub byte [arg2Off], cl
   820 00001A8F 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   821 00001A91 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   822                              <1> .pctPullChars:
   823 00001A98 AC                  <1>     lodsb
   824 00001A99 AA                  <1>     stosb
   825 00001A9A 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   826 00001A9C 7404                <1>     je .pctExit
   827 00001A9E FFC1                <1>     inc ecx     ;Increment count
   828 00001AA0 EBF6                <1>     jmp short .pctPullChars 
   829                              <1> .pctExit:
   830 00001AA2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   831                              <1>     return
    13                              <2> %%_ret:
    14 00001AA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   832                              <1> 
   833                              <1> getSetMainState:
   834                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   835 00001AAA FC                  <1>     cld ;Ensure stringops are done the right way
   836 00001AAB C605AFE6FFFF80      <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   837 00001AB2 C6052AE7FFFF80      <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   838 00001AB9 C605A5E7FFFF80      <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   839 00001AC0 4C8B0548E5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   840                              <1>     return
    13                              <2> %%_ret:
    14 00001AC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   841                              <1> 
   842                              <1> 
   843                              <1> int2Eh: 
   844                              <1> ;Very sucky interface for passing command lines to be processed by the 
   845                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   846                              <1> ; more reliable with a critical section flag. Currently, if we are already
   847                              <1> ; processing an Int 2Eh request, this will not process the command.
   848                              <1> ;
   849                              <1> ;Need to add further safeguards for when pipes are also setup and
   850                              <1> ; batchmode is on!
   851                              <1> ;
   852                              <1> ;Input: rsi points to the count byte of a command line.
   853                              <1> ;       Max number of chars is 128 (127 + count byte)
   854                              <1> ;Output:
   855                              <1> ;       CF=NC: Command was processed. ax = Retcode
   856                              <1> ;       CF=CY: Command was not processed.
   857 00001AC8 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   858 00001ACD F605C0E5FFFF04      <1>     test byte [statFlg1], inSingle
   859 00001AD4 0F8584000000        <1>     jnz int2EcheckReentry 
   860                              <1> .multiJoin:
   861 00001ADA 800DB3E5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   862 00001AE1 48892537E5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   863 00001AE8 488B2516E5FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   864 00001AEF B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   865 00001AF4 CD21                <1>     int 21h
   866 00001AF6 48891D1AE5FFFF      <1>     mov qword [int2Epsp], rbx
   867 00001AFD 52                  <1>     push rdx    ;Save on the stack
   868 00001AFE 488B1D0AE5FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   869 00001B05 B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   870 00001B0A CD21                <1>     int 21h
   871 00001B0C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   872 00001B0F 4989D9              <1>     mov r9, rbx
   873 00001B12 488D3D49E6FFFF      <1>     lea rdi, inBuffer + 1
   874 00001B19 B910000000          <1>     mov ecx, 10h    ;80h/8
   875 00001B1E FC                  <1>     cld
   876 00001B1F F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   877 00001B22 E883FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   878 00001B27 803D34E6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   879 00001B2E 0F851DF6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   880                              <1> int2ERet:
   881 00001B34 E8AF290000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   882 00001B39 488B25DFE4FFFF      <1>     mov rsp, qword [int2Ersp]
   883 00001B40 488B1DD0E4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   884 00001B47 B800500000          <1>     mov eax, 5000h ;Set Current PSP
   885 00001B4C CD21                <1>     int 21h
   886 00001B4E 0FB705B8E4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   887 00001B55 802538E5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   888 00001B5C 48CF                <1>     iretq
   889                              <1> 
   890                              <1> int2EcheckReentry:
   891                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   892                              <1> ; else, return with CF=CY.
   893 00001B5E B800520000          <1>     mov eax, 5200h  ;Get sysvars
   894 00001B63 CD21                <1>     int 21h
   895 00001B65 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   896 00001B69 7512                <1>     jnz short .multifnd
   897 00001B6B B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   898 00001B70 CD2F                <1>     int 2Fh
   899 00001B72 84C0                <1>     test al, al ;This must still be zero, else something installed
   900 00001B74 7507                <1>     jnz .multifnd
   901 00001B76 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   902 00001B7B 48CF                <1>     iretq   
   903                              <1> .multifnd:
   904                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   905 00001B7D F390                <1>     pause
   906 00001B7F F6050EE5FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   907 00001B86 75F5                <1>     jnz .multifnd
   908 00001B88 E94DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B8D BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001B92 B800480000          <1>     mov eax, 4800h
     7 00001B97 CD21                <1>     int 21h
     8 00001B99 730A                <1>     jnc .bbAlloced
     9 00001B9B E8FE020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001BA0 E9EAF9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001BA5 488905FFE4FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001BAC 4889C3              <1>     mov rbx, rax
    14 00001BAF 4889DF              <1>     mov rdi, rbx
    15 00001BB2 31C0                <1>     xor eax, eax
    16 00001BB4 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BB9 F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BBB 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BBE 8A05D2E4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BC4 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BC7 B8FFFFFFFF          <1>     mov eax, -1
    22 00001BCC B905000000          <1>     mov ecx, 5
    23 00001BD1 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BD5 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BD7 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BDD 488D3503E7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BE4 E88F280000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001BE9 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001BF1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001BF8 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001BF9 F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001BFB 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001BFC B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001C01 E8B0280000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001C06 E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001C0B 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001C0D 4889F0              <1>     mov rax, rsi
    43 00001C10 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001C14 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C17 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C1C FFC1                <1>     inc ecx
    48 00001C1E 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C24 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C26 AC                  <1>     lodsb   ;Getch
    52 00001C27 E898280000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C2C 74D3                <1>     je .bbFndLp
    54 00001C2E E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C33 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C35 488D35ABE6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C3C 488D3D70E4FFFF      <1>     lea rdi, batFile
    60 00001C43 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C46 80FC3A              <1>     cmp ah, ":"
    62 00001C49 746D                <1>     je .bbdrvGiven
    63 00001C4B 3A05D8E3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C51 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C53 E81B280000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C58 0441                <1>     add al, "A"
    68 00001C5A B43A                <1>     mov ah, ":"
    69 00001C5C 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C5E 8A05C5E3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C64 AA                  <1>     stosb   ;Store the pathsep
    73 00001C65 8A0548E4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C6B E82B280000          <1>     call ucChar             ;UC it
    75 00001C70 88053DE4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C76 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C78 88C2                <1>     mov dl, al
    78 00001C7A 56                  <1>     push rsi        ;Save remaining char source
    79 00001C7B 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C7E B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C83 CD21                <1>     int 21h
    82 00001C85 5E                  <1>     pop rsi
    83 00001C86 7311                <1>     jnc .bbRelPathOk
    84 00001C88 488D15FAEBFFFF      <1>     lea rdx, badBat
    85 00001C8F E8D7250000          <1>     call printString
    86 00001C94 E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001C99 31C0                <1>     xor eax, eax
    90 00001C9B 31C9                <1>     xor ecx, ecx
    91 00001C9D F2AE                <1>     repne scasb ;Find the terminating null
    92 00001C9F 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001CA2 8A0581E3FFFF        <1>     mov al, byte [pathSep]
    94 00001CA8 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001CA9 EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001CAB E8C3270000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001CB0 0441                <1>     add al, "A"
   102 00001CB2 B43A                <1>     mov ah, ":"
   103 00001CB4 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001CB6 EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001CB8 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001CBA AC                  <1>     lodsb
   111 00001CBB 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001CBE 3A0565E3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001CC4 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001CC6 E8AD270000          <1>     call strcpy ;Copy the remaining portion
   116 00001CCB 488D35E1E3FFFF      <1>     lea rsi, batFile
   117 00001CD2 4889F7              <1>     mov rdi, rsi
   118 00001CD5 B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001CDA CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001CDC E8D4F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001CE1 E8B3F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001CE6 800DA7E3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001CED E9FBF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001CF2 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001CF5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001CF7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001CF8 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001CFB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001CFC E842010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001D01 E9E7F3FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001D06 F60587E3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001D0D 75ED                <1>     jnz batFinish
   144 00001D0F 488D159DE3FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001D16 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001D1B CD21                <1>     int 21h
   148 00001D1D 7315                <1>     jnc .batOpened
   149 00001D1F 488D157AEBFFFF      <1>     lea rdx, needBat
   150 00001D26 E840250000          <1>     call printString
   151 00001D2B B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001D30 CD21                <1>     int 21h
   153 00001D32 EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001D34 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001D36 488B356EE3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001D3D 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001D40 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001D43 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001D48 CD21                <1>     int 21h
   161 00001D4A C60511E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001D51 488D150BE4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001D58 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001D5A E8CB000000          <1>     call .readChar          ;Read the char
   166 00001D5F 85C0                <1>     test eax, eax
   167 00001D61 7433                <1>     jz .endOfBatAddCr
   168 00001D63 FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001D65 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001D68 742C                <1>     je .endOfBatAddCr
   171 00001D6A 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001D6D 7444                <1>     je .endOfLineCr
   173 00001D6F 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001D72 744F                <1>     je .endOfLineLf
   175 00001D74 FE05E8E3FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001D7A 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001D7D 803DDEE3FFFF80      <1>     cmp byte [inBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   178 00001D84 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001D86 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   180 00001D89 C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   181 00001D8C FE0DD0E3FFFF        <1>     dec byte [inBuffer + 1] ;Reduce the valid char count by one
   182 00001D92 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   183 00001D94 EB30                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   184                              <1> .endOfBatAddCr:
   185 00001D96 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   186                              <1> .endOfBat:
   187 00001D99 800DF4E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   188 00001DA0 803DBBE3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   189 00001DA7 751D                <1>     jne .endOfLine
   190 00001DA9 E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   191 00001DAE E949FFFFFF          <1>     jmp batFinish
   192                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   193 00001DB3 E872000000          <1>     call .readChar  ;Get the LF over the CR
   194 00001DB8 85C0                <1>     test eax, eax   ;Did we read nothing?
   195 00001DBA 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   196 00001DBC 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   197 00001DBF 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   198 00001DC1 FFC7                <1>     inc edi             ;Else add to the count
   199                              <1> .endOfLineLf:
   200 00001DC3 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   201                              <1> .endOfLine:
   202                              <1> ;Close the file, update the batch block file pointer, then proceed.
   203                              <1> ;rsi -> Batch block.
   204 00001DC6 E857000000          <1>     call .closeBat
   205                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   206 00001DCB 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   207 00001DCE 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   208                              <1> ;Now we echo the line to the console unless the first char is @ or 
   209                              <1> ; the echo flag is off
   210 00001DD5 488D1587E3FFFF      <1>     lea rdx, inBuffer + 2
   211 00001DDC 803A40              <1>     cmp byte [rdx], batNoEchoChar
   212 00001DDF 7421                <1>     je .noEchoPull       
   213 00001DE1 F605AEE2FFFFFF      <1>     test byte [echoFlg], -1         
   214 00001DE8 7413                <1>     jz .noEcho
   215 00001DEA 0FB60D71E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   216 00001DF1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   217 00001DF6 B800400000          <1>     mov eax, 4000h  ;Write woo!
   218 00001DFB CD21                <1>     int 21h
   219                              <1> .noEcho:
   220 00001DFD E941F3FFFF          <1>     jmp commandMain.batProceed
   221                              <1> .noEchoPull:
   222 00001E02 FE0D5AE3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   223 00001E08 0F84F8FEFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   224 00001E0E 4889D7              <1>     mov rdi, rdx
   225 00001E11 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   226 00001E15 0FB60D46E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   227 00001E1C FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   228 00001E1E F3A4                <1>     rep movsb 
   229 00001E20 EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   230                              <1>     
   231                              <1> .closeBat:
   232                              <1> ;Close the handle in rbx
   233 00001E22 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   234 00001E27 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   235                              <1>     return
    13                              <2> %%_ret:
    14 00001E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> .readChar:
   237                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   238 00001E2A B901000000          <1>     mov ecx, 1
   239 00001E2F B8003F0000          <1>     mov eax, 3F00h
   240 00001E34 CD21                <1>     int 21h  
   241 00001E36 85C0                <1>     test eax, eax
   242                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E38 75(29)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   243 00001E3A 800D53E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   244                              <1>     return
    13                              <2> %%_ret:
    14 00001E41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> 
   247                              <1> batExpandVar:
   248                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   249                              <1> ;       rdi -> Position to place the substitution string
   250                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   251                              <1> ;        CF=CY: No substitution string found
   252                              <1>     return
    13                              <2> %%_ret:
    14 00001E42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1>     ;cmp byte [rsi], "%"
   254                              <1> 
   255                              <1> batCleanup:
   256                              <1> ;This function is called after the last line has been processed by the 
   257                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   258                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   259 00001E43 488B1D61E2FFFF      <1>     mov rbx, qword [bbPtr]
   260 00001E4A 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   261 00001E4D 880543E2FFFF        <1>     mov byte [echoFlg], al
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   264                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   265                              <1> ; But since this is the routine called by the error handler too, it 
   266                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   267                              <1> ; just have a null pointer.
   268                              <1> ;-----------------------------------------------------------------------
   269                              <1> ;Finally free this batch header
   270 00001E53 4150                <1>     push r8
   271 00001E55 4989D8              <1>     mov r8, rbx
   272 00001E58 B800490000          <1>     mov eax, 4900h
   273 00001E5D CD21                <1>     int 21h
   274 00001E5F 4158                <1>     pop r8
   275 00001E61 E833F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   276 00001E66 48C7053AE2FFFF0000- <1>     mov qword [bbPtr], 0    
   276 00001E6F 0000                <1>
   277 00001E71 80251CE2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   278                              <1>     return
    13                              <2> %%_ret:
    14 00001E78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001E79 488D15BFEAFFFF      <1>     lea rdx, noSpace
    10 00001E80 488D0DDBEDFFFF      <1>     lea rcx, pipeErr
    11 00001E87 F6050BE2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001E8E 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001E90 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001E94 E866000000          <1>     call badCmn     ;Print the string
    15 00001E99 E9F1F6FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001E9E 488D1589EEFFFF      <1>     lea rdx, noMemMsg
    18 00001EA5 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001EA7 488D158DEDFFFF      <1>     lea rdx, syntaxErr
    21 00001EAE EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001EB0 488D15A2EAFFFF      <1>     lea rdx, noEnvSpace
    24 00001EB7 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001EB9 488D1527EDFFFF      <1>     lea rdx, accDenMsg
    27 00001EC0 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001EC2 488D159CEBFFFF      <1>     lea rdx, badParm
    30 00001EC9 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001ECB 488D1556EBFFFF      <1>     lea rdx, badDrv
    33 00001ED2 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001ED4 488D1519EEFFFF      <1>     lea rdx, badArgs
    36 00001EDB EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001EDD 488D15F4EDFFFF      <1>     lea rdx, badSpec
    39 00001EE4 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001EE6 488D152AEAFFFF      <1>     lea rdx, dupName
    43 00001EED EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001EEF 488D1538EAFFFF      <1>     lea rdx, fnfMsg
    46 00001EF6 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001EF8 488D1567ECFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001EFF E967230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001F04 488D15F1E9FFFF      <1>     lea rdx, badCmd
    53 00001F0B EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001F0D C60580E6FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001F14 C6057AE6FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001F1B C70571E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001F24 00                  <1>
    59 00001F25 C6056FE6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001F2C 66C7055BE5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001F35 488D3DE1E6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001F3C C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001F3F 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001F48 3F                  <1>
    64 00001F49 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001F4D C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001F54 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001F5B 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001F5E E853250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001F63 AC                  <1>     lodsb   ;Get this char
    72 00001F64 3C0D                <1>     cmp al, CR
    73 00001F66 744D                <1>     je .scanDone
    74 00001F68 3A05BCE0FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001F6E 7524                <1>     jne .notSwitch
    76 00001F70 AC                  <1>     lodsb   ;Get the next char
    77 00001F71 E825250000          <1>     call ucChar
    78 00001F76 3C57                <1>     cmp al, "W"
    79 00001F78 7509                <1>     jne .notWide
    80 00001F7A 800D13E6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001F81 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001F83 3C50                <1>     cmp al, "P"
    84 00001F85 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001F8B 800D02E6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001F92 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001F94 F605F9E5FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001F9B 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001FA1 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001FA4 E899260000          <1>     call copyArgumentToSearchSpec   
    93 00001FA9 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001FAC 800DE1E5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001FB3 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001FB5 F605D8E5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001FBC 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001FBE 488D35CBE4FFFF      <1>     lea rsi, searchSpec
   101 00001FC5 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001FC9 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001FCB 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001FD0 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001FD4 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001FD9 CD21                <1>     int 21h
   108 00001FDB 3CFF                <1>     cmp al, -1
   109 00001FDD 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001FE3 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001FE8 84C0                <1>     test al, al
   113 00001FEA 740A                <1>     jz .currentDrv
   114 00001FEC FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001FEE 8805A6E5FFFF        <1>     mov byte [dirDrv], al
   116 00001FF4 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001FF6 E878240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001FFB 880599E5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00002001 488D3588E4FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00002008 488D3D8CE5FFFF      <1>     lea rdi, dirSrchDir
   124 0000200F 0FB60584E5FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00002016 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00002018 0441                <1>     add al, "A" ;Turn into a letter
   127 0000201A B43A                <1>     mov ah, ":"
   128 0000201C 66AB                <1>     stosw   ;Store X: into the search path
   129 0000201E B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00002023 CD2F                <1>     int 2fh
   131 00002025 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00002027 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 0000202D 8A05F6DFFFFF        <1>     mov al, byte [pathSep]
   135 00002033 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00002035 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00002037 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00002038 FEC2                <1>     inc dl  ;Increment by 1
   139 0000203A 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 0000203D B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00002042 CD21                <1>     int 21h
   142 00002044 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00002047 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00002049 3807                <1>     cmp byte [rdi], al
   149 0000204B 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 0000204D 48FFC7              <1>     inc rdi
   151 00002050 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00002052 8A05D1DFFFFF        <1>     mov al, byte [pathSep]
   154 00002058 3806                <1>     cmp byte [rsi], al
   155 0000205A 7412                <1>     je .copyPathLoop
   156 0000205C B43A                <1>     mov ah, ":"
   157 0000205E 86C4                <1>     xchg al, ah
   158 00002060 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002064 7408                <1>     je .copyPathLoop
   160 00002066 88E0                <1>     mov al, ah
   161 00002068 3847FF              <1>     cmp byte [rdi - 1], al
   162 0000206B 7401                <1>     je .copyPathLoop
   163 0000206D AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 0000206E AC                  <1>     lodsb
   166 0000206F 3A05B4DFFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002075 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002077 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00002079 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 0000207B 48FFC6              <1>     inc rsi
   172 0000207E EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00002080 3C2E                <1>     cmp al, "."
   175 00002082 7407                <1>     je .dots
   176                              <1> .store:
   177 00002084 AA                  <1>     stosb
   178 00002085 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002087 7472                <1>     jz .exitPathCopy
   180 00002089 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 0000208B 8A2598DFFFFF        <1>     mov ah, byte [pathSep]
   188 00002091 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00002094 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00002096 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00002098 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 0000209B 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 0000209D 3A2586DFFFFF        <1>     cmp ah, byte [pathSep]
   195 000020A3 7406                <1>     je .skipThisPathsep
   196 000020A5 84E4                <1>     test ah, ah
   197 000020A7 74C5                <1>     jz .copyPathLoop
   198 000020A9 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 000020AB 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 000020AE EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 000020B0 48FFC6              <1>     inc rsi ;Move past the second dot
   206 000020B3 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 000020B5 3A256EDFFFFF        <1>     cmp ah, byte [pathSep]
   208 000020BB 7408                <1>     je .tdOk
   209 000020BD 84E4                <1>     test ah, ah
   210 000020BF 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 000020C5 8A055EDFFFFF        <1>     mov al, byte byte [pathSep]
   213 000020CB 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 000020CF 0F84EDFDFFFF        <1>     je badParamError
   215 000020D5 4881EF02000000      <1>     sub rdi, 2
   216 000020DC 31C9                <1>     xor ecx, ecx
   217 000020DE FFC9                <1>     dec ecx
   218 000020E0 FD                  <1>     std
   219 000020E1 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000020E3 FC                  <1>     cld
   221 000020E4 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000020EB 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000020ED 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000020F3 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000020F6 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000020FB 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00002102 8A0521DFFFFF        <1>     mov al, byte [pathSep]
   230 00002108 B43A                <1>     mov ah, ":"
   231 0000210A 86C4                <1>     xchg al, ah
   232 0000210C 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00002110 7409                <1>     je .skipOverwrite
   234 00002112 88E0                <1>     mov al, ah
   235 00002114 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00002116 7503                <1>     jne .skipOverwrite
   237 00002118 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 0000211B 488D3579E4FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00002122 4889F7              <1>     mov rdi, rsi
   241 00002125 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 0000212A CD2F                <1>     int 2fh
   243 0000212C E81E250000          <1>     call scanForWildcards
   244 00002131 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00002133 4889F2              <1>     mov rdx, rsi
   246 00002136 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 0000213A 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 0000213C E812260000          <1>     call setDTA ;Set the DTA
   250 00002141 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002146 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 0000214B CD21                <1>     int 21h
   253 0000214D 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 0000214F F605D5DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002156 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002158 31C0                <1>     xor eax, eax
   259 0000215A 31C9                <1>     xor ecx, ecx
   260 0000215C FFC9                <1>     dec ecx
   261 0000215E F2AE                <1>     repne scasb
   262 00002160 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00002163 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00002165 31C0                <1>     xor eax, eax
   268 00002167 31C9                <1>     xor ecx, ecx
   269 00002169 FFC9                <1>     dec ecx
   270 0000216B F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 0000216D 8A05B6DEFFFF        <1>     mov al, byte [pathSep]
   273 00002173 31C9                <1>     xor ecx, ecx
   274 00002175 FFC9                <1>     dec ecx
   275 00002177 FD                  <1>     std ;Search backwards
   276 00002178 F2AE                <1>     repne scasb
   277 0000217A FC                  <1>     cld ;Search forwards again
   278 0000217B 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 0000217E 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00002182 7503                <1>     jne .wcsp1
   281 00002184 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00002187 57                  <1>     push rdi
   285 00002188 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 0000218A 7503                <1>     jne .wcsp2
   287 0000218C 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 0000218F 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00002192 488D3D84E4FFFF      <1>     lea rdi, dirSrchFCB
   291 00002199 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 0000219E CD21                <1>     int 21h
   293 000021A0 5F                  <1>     pop rdi
   294 000021A1 31C0                <1>     xor eax, eax
   295 000021A3 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 000021A5 0FB605EEE3FFFF      <1>     movzx eax, byte [dirDrv] 
   298 000021AC E8EC150000          <1>     call volume.dirEP
   299 000021B1 488D1516EAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000021B8 B409                <1>     mov ah, 09h
   301 000021BA CD21                <1>     int 21h
   302 000021BC C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000021BF 488D15D5E3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 000021C6 B409                <1>     mov ah, 09h
   305 000021C8 CD21                <1>     int 21h
   306 000021CA C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 000021CD 488D15B0E6FFFF      <1>     lea rdx, crlf2
   308 000021D4 B409                <1>     mov ah, 09h
   309 000021D6 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 000021D8 8A054BDEFFFF        <1>     mov al, byte [pathSep]
   313 000021DE 3847FF              <1>     cmp byte [rdi - 1], al
   314 000021E1 7403                <1>     je .root
   315 000021E3 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000021E6 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000021E9 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000021EA 488D352DE4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000021F1 E89B230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 000021F6 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 000021FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 000021FC E852250000          <1>     call setDTA
   326 00002201 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00002206 488D158EE3FFFF      <1>     lea rdx, dirSrchDir
   328 0000220D B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002212 CD21                <1>     int 21h
   330 00002214 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00002216 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 0000221B B44F                <1>     mov ah, 4Fh
   334 0000221D CD21                <1>     int 21h
   335 0000221F 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002221 F6056CE3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002228 740B                <1>     jz .dirNoEndNewLine
   339 0000222A 488D1550E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002231 B409                <1>     mov ah, 09h
   341 00002233 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002235 F70557E3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 0000223E FF                  <1>
   345 0000223F 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002241 488D15E6E6FFFF      <1>     lea rdx, fnfMsg
   348 00002248 E81E200000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 0000224D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 0000224E 488D154EECFFFF      <1>     lea rdx, fourSpc
   352 00002255 B409                <1>     mov ah, 09h
   353 00002257 CD21                <1>     int 21h
   354 00002259 B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 0000225B CD21                <1>     int 21h
   356 0000225D 8B0533E3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00002263 E8FB230000          <1>     call printDecimalWord
   358 00002268 488D1598E7FFFF      <1>     lea rdx, dirOk
   359 0000226F B409                <1>     mov ah, 09h
   360 00002271 CD21                <1>     int 21h
   361 00002273 488D152EECFFFF      <1>     lea rdx, threeSpc
   362 0000227A B409                <1>     mov ah, 09h
   363 0000227C CD21                <1>     int 21h
   364 0000227E B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00002283 8A1511E3FFFF        <1>     mov dl, byte [dirDrv]
   366 00002289 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 0000228B CD21                <1>     int 21h ;Get disk free space info
   368 0000228D 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00002290 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00002293 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00002295 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00002297 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 0000229A E8C4230000          <1>     call printDecimalWord
   375 0000229F 488D156BE7FFFF      <1>     lea rdx, bytesOk
   376 000022A6 B409                <1>     mov ah, 09h
   377 000022A8 CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 000022AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 000022AB F60579DEFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022B2 75(AA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 000022B4 488D3579DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 000022BB 488D3D44DEFFFF      <1>     lea rdi, cmdFcb
   388 000022C2 E85C220000          <1>     call asciiFilenameToFCB
   389 000022C7 488D1538DEFFFF      <1>     lea rdx, cmdFcb
   390 000022CE B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 000022D3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 000022D8 B440                <1>     mov ah, 40h ;Write handle
   393 000022DA CD21                <1>     int 21h
   394 000022DC 52                  <1>     push rdx
   395 000022DD B220                <1>     mov dl, " "
   396 000022DF B402                <1>     mov ah, 02h ;Print char
   397 000022E1 CD21                <1>     int 21h
   398 000022E3 5A                  <1>     pop rdx
   399 000022E4 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 000022EB B903000000          <1>     mov ecx, 3  ;Print three chars
   401 000022F0 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 000022F5 B440                <1>     mov ah, 40h ;Write handle
   403 000022F7 CD21                <1>     int 21h
   404 000022F9 F60594E2FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00002300 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00002306 F6051EDEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 0000230D 7418                <1>     jz .dirPrintNotDir
   410 0000230F 488D1509E7FFFF      <1>     lea rdx, dirLbl
   411 00002316 B409                <1>     mov ah, 09h
   412 00002318 CD21                <1>     int 21h
   413 0000231A 488D1587EBFFFF      <1>     lea rdx, threeSpc
   414 00002321 B409                <1>     mov ah, 09h
   415 00002323 CD21                <1>     int 21h
   416 00002325 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00002327 B220                <1>     mov dl, " "
   420 00002329 B402                <1>     mov ah, 02h
   421 0000232B CD21                <1>     int 21h
   422 0000232D 8B05FDDDFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00002333 E89C230000          <1>     call getDecimalWord
   424 00002338 4889CB              <1>     mov rbx, rcx
   425 0000233B 51                  <1>     push rcx
   426 0000233C 480FCB              <1>     bswap rbx
   427 0000233F B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00002344 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00002346 7514                <1>     jne .dirPrintFileSize
   431 00002348 B402                <1>     mov ah, 02h
   432 0000234A B220                <1>     mov dl, " "
   433 0000234C CD21                <1>     int 21h
   434 0000234E 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00002352 FFC9                <1>     dec ecx
   436 00002354 81F901000000        <1>     cmp ecx, 1
   437 0000235A 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 0000235C 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 0000235D 88DA                <1>     mov dl, bl
   442 0000235F B402                <1>     mov ah, 02h
   443 00002361 CD21                <1>     int 21h
   444 00002363 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00002367 FFC9                <1>     dec ecx
   446 00002369 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 0000236B 488D153AEBFFFF      <1>     lea rdx, twoSpc
   448 00002372 B409                <1>     mov ah, 09h
   449 00002374 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00002376 B220                <1>     mov dl, " "
   452 00002378 B402                <1>     mov ah, 02h
   453 0000237A CD21                <1>     int 21h
   454 0000237C 0FB705ABDDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00002383 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00002385 E8871C0000          <1>     call printDate
   457 0000238A 488D151BEBFFFF      <1>     lea rdx, twoSpc
   458 00002391 B409                <1>     mov ah, 09h
   459 00002393 CD21                <1>     int 21h
   460 00002395 0FB70590DDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 0000239C E8921D0000          <1>     call printTime
   462 000023A1 488D15D9E4FFFF      <1>     lea rdx, crlf
   463 000023A8 B409                <1>     mov ah, 09h
   464 000023AA CD21                <1>     int 21h
   465 000023AC B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 000023AE EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 000023B0 488D15ECEAFFFF      <1>     lea rdx, fourSpc
   470 000023B7 B409                <1>     mov ah, 09h ;Print string
   471 000023B9 CD21                <1>     int 21h
   472 000023BB B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 000023BD FF05D3E1FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 000023C3 FE05CCE1FFFF        <1>     inc byte [dirLineCtr]
   476 000023C9 3805C6E1FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000023CF 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000023D1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 000023D2 F605BBE1FFFF02      <1>     test byte [dirFlags], dirPageType
   479 000023D9 741A                <1>     jz .dirPrnNoPag
   480 000023DB 488D1564E6FFFF      <1>     lea rdx, pauseMes
   481 000023E2 B409                <1>     mov ah, 09h
   482 000023E4 CD21                <1>     int 21h
   483 000023E6 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 000023E8 CD21                <1>     int 21h
   485 000023EA 488D1590E4FFFF      <1>     lea rdx, crlf   ;Force new line
   486 000023F1 B409                <1>     mov ah, 09h
   487 000023F3 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 000023F5 C60599E1FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 000023FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 000023FD F605A0DCFFFFFF      <1>     test byte [arg1Flg], -1
   494 00002404 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00002406 E8D51E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 0000240B E8541E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 00002410 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00002411 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00002415 88D0                <1>     mov al, dl
   504 00002417 0440                <1>     add al, "@" ;Get the UC letter
   505 00002419 B43A                <1>     mov ah, ":"
   506 0000241B 488D3D6EE0FFFF      <1>     lea rdi, searchSpec
   507 00002422 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00002424 8A05FFDBFFFF        <1>     mov al, byte [pathSep]
   509 0000242A AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 0000242B B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 0000242D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 00002430 CD21                <1>     int 21h
   513 00002432 E85A200000          <1>     call strlen
   514 00002437 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000243D B440                <1>     mov ah, 40h ;Write to handle
   516 0000243F BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002444 488D1545E0FFFF      <1>     lea rdx, searchSpec
   518 0000244B CD21                <1>     int 21h
   519 0000244D E8121E0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002452 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002453 8A054DDCFFFF        <1>     mov al, byte [arg1FCBret]
   523 00002459 3CFF                <1>     cmp al, -1 
   524 0000245B 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 00002461 E8C4210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002466 488D1523E0FFFF      <1>     lea rdx, searchSpec
   527 0000246D B43B                <1>     mov ah, 3Bh ;CHDIR
   528 0000246F CD21                <1>     int 21h
   529 00002471 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002477 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 00002478 F60525DCFFFFFF      <1>     test byte [arg1Flg], -1
   534 0000247F 0F844FFAFFFF        <1>     jz badArgError
   535 00002485 F6051BDCFFFFFF      <1>     test byte [arg2Flg], -1
   536 0000248C 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 00002492 8A050EDCFFFF        <1>     mov al, byte [arg1FCBret]
   539 00002498 3CFF                <1>     cmp al, -1 
   540 0000249A 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 000024A0 E885210000          <1>     call buildCommandPath
   542 000024A5 488D15E4DFFFFF      <1>     lea rdx, searchSpec
   543 000024AC B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 000024B1 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000024B3 73(77)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 000024B5 488D15BEE6FFFF      <1>     lea rdx, badMD
   548 000024BC E9AA1D0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 000024C1 F605DCDBFFFFFF      <1>     test byte [arg1Flg], -1
   552 000024C8 0F8406FAFFFF        <1>     jz badArgError
   553 000024CE F605D2DBFFFFFF      <1>     test byte [arg2Flg], -1
   554 000024D5 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000024DB 8A05C5DBFFFF        <1>     mov al, byte [arg1FCBret]
   557 000024E1 3CFF                <1>     cmp al, -1 
   558 000024E3 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 000024E9 E83C210000          <1>     call buildCommandPath
   560 000024EE 488D159BDFFFFF      <1>     lea rdx, searchSpec
   561 000024F5 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 000024FA CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000024FC 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000024FE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 000024FF 488D1591E6FFFF      <1>     lea rdx, badRD
   566 00002506 E9601D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 0000250B 66C70569E2FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 00002514 66C70562E2FFFFFFFF  <1>     mov word [destHdl], -1
   571 0000251D 66C7055BE2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 00002526 C60564E2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 0000252D 48C7054BE2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002536 0000                <1>
   574 00002538 66C7054AE2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 00002541 C70542E2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 0000254A 00                  <1>
   576 0000254B C6050BE1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002552 C60586E1FFFF00      <1>     mov byte [destSpec], 0
   578 00002559 48C705FDE1FFFF0000- <1>     mov qword [srcPtr], 0
   578 00002562 0000                <1>
   579 00002564 48C705FAE1FFFF0000- <1>     mov qword [destPtr], 0
   579 0000256D 0000                <1>
   580 0000256F E8DF210000          <1>     call setDTA
   581 00002574 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 00002579 CD21                <1>     int 21h
   583 0000257B 8805FBE1FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 00002581 B800520000          <1>     mov eax, 5200h
   588 00002586 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 00002588 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 0000258C 89CB                <1>     mov ebx, ecx
   591 0000258E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 00002591 B800480000          <1>     mov eax, 4800h
   593 00002596 CD21                <1>     int 21h
   594 00002598 731E                <1>     jnc .bufOk
   595 0000259A 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 0000259C 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 0000259E 488D1545E4FFFF      <1>     lea rdx, cpNoMem
   600 000025A5 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 000025AA 89D9                <1>     mov ecx, ebx    
   603 000025AC C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 000025AF B800480000          <1>     mov eax, 4800h
   605 000025B4 CD21                <1>     int 21h
   606 000025B6 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 000025B8 488905C4E1FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 000025BF 66890DC5E1FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 000025C6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 000025CD 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 000025D5 FFC9                <1>     dec ecx ;Turn into offset
   614 000025D7 4801CE              <1>     add rsi, rcx
   615 000025DA 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   616 000025DC FD                  <1>     std ;Go in reverse
   617                              <1> .sd:    ;At this point, any switch chars affect destination!
   618 000025DD E8D41E0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   619 000025E2 8A0542DAFFFF        <1>     mov al, byte [switchChar]
   620 000025E8 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   621 000025EB 7509                <1>     jne .noSwitch
   622                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   623 000025ED 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   624 000025F1 50                  <1>     push rax        ;Push the switchchar
   625 000025F2 FFC2                <1>     inc edx         ;Inc the counter
   626 000025F4 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   627                              <1> .noSwitch:
   628                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   629 000025F6 85D2                <1>     test edx, edx
   630 000025F8 7412                <1>     jz .noDestSwitch
   631                              <1> .ns1:
   632 000025FA 58                  <1>     pop rax ;Pop the switch char
   633 000025FB B304                <1>     mov bl, ascDes
   634 000025FD E809040000          <1>     call .doSwitchRev
   635 00002602 0F8574040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   636 00002608 FFCA                <1>     dec edx
   637 0000260A 75EE                <1>     jnz .ns1
   638                              <1> .noDestSwitch:
   639                              <1> ;Now search for the starting delimiter or start of line
   640 0000260C 48FFC6              <1>     inc rsi ;Go to the last char in the path
   641                              <1> .noSwitchLp:
   642 0000260F AC                  <1>     lodsb   ;Get char at rsi, go back a char
   643 00002610 E8AF1E0000          <1>     call isALdelimiter
   644 00002615 7412                <1>     je .destFnd
   645 00002617 8A050DDAFFFF        <1>     mov al, byte [switchChar]
   646 0000261D 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   647 00002620 7404                <1>     je .se  ;Jump if so!
   648 00002622 FFC9                <1>     dec ecx ;One less char left to search
   649 00002624 EBE9                <1>     jmp short .noSwitchLp
   650                              <1> .se:
   651 00002626 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   652                              <1> .destFnd:
   653 00002629 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   654 00002630 FC                  <1>     cld 
   655 00002631 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   656 00002634 488D3DA4E0FFFF      <1>     lea rdi, destSpec
   657 0000263B 57                  <1>     push rdi
   658 0000263C E8A61F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   659 00002641 5F                  <1>     pop rdi
   660 00002642 E8261F0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   661 00002647 48893D1BE1FFFF      <1>     mov qword [destPtr], rdi
   662 0000264E 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   663 00002652 7517                <1>     jne .destEnd    ;Dont worry
   664 00002654 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   665 00002656 E8401E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   666 0000265B 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   667 0000265D 4881C702000000      <1>     add rdi, 2              ;Point to this null
   668 00002664 48893DFEE0FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   669                              <1> .destEnd:
   670                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   671 0000266B 80251FE1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   672 00002672 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   673                              <1> .srcLp:
   674 00002679 E8381E0000          <1>     call skipDelimiters 
   675 0000267E 8A05A6D9FFFF        <1>     mov al, byte [switchChar]
   676 00002684 3806                <1>     cmp byte [rsi], al
   677 00002686 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   678                              <1>     ;rsi points to switch after switchchar
   679 00002688 B301                <1>     mov bl, ascSrc
   680 0000268A E876030000          <1>     call .doSwitch
   681 0000268F 0F85E7030000        <1>     jnz .badExit
   682 00002695 4881C602000000      <1>     add rsi, 2
   683 0000269C EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   684                              <1> .noSrcSw:
   685 0000269E 4839F5              <1>     cmp rbp, rsi
   686 000026A1 7527                <1>     jne .noSameSrcDest
   687                              <1>     ;Here if the destination we specified earlier is the same as the source
   688                              <1>     ;This means, the actual destination is the current default drive
   689                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   690 000026A3 E8CB1D0000          <1>     call getCurrentDrive    ;Get current drive
   691 000026A8 0441                <1>     add al, "A"             ;Turn into a drive letter
   692 000026AA B43A                <1>     mov ah, ":"
   693 000026AC 0FB7C0              <1>     movzx eax, ax
   694 000026AF 89052AE0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   695 000026B5 488D3D25E0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   696 000026BC 48893DA6E0FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   697 000026C3 800DC7E0FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   698                              <1> .noSameSrcDest:
   699 000026CA 488D3D8CDFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   700 000026D1 57                  <1>     push rdi
   701 000026D2 E8101F0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   702 000026D7 5F                  <1>     pop rdi
   703                              <1>     ;Now go forwards and pick up any more switches.
   704                              <1>     ;Also any "+" signs here!!
   705 000026D8 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   706                              <1> .swSrcSwPost:
   707 000026DB E8D61D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   708 000026E0 8A0544D9FFFF        <1>     mov al, byte [switchChar]
   709 000026E6 3806                <1>     cmp byte [rsi], al
   710 000026E8 7516                <1>     jne .swSrcSwPostExit
   711                              <1>     ;rsi points to switch after switchchar
   712 000026EA B301                <1>     mov bl, ascSrc
   713 000026EC E814030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   714 000026F1 0F8585030000        <1>     jnz .badExit
   715 000026F7 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   716 000026FE EBDB                <1>     jmp short .swSrcSwPost
   717                              <1> .swSrcSwPostExit:
   718 00002700 4889FE              <1>     mov rsi, rdi
   719 00002703 E8471F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   720 00002708 7507                <1>     jnz .oneCp
   721 0000270A 800D80E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   722                              <1> .oneCp:
   723 00002711 E8571E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   724 00002716 48893D44E0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   725 0000271D 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   726 00002721 7517                <1>     jne .srcEnd             ;Dont worry
   727 00002723 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   728 00002725 E8711D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   729 0000272A 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   730 0000272C 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   731 00002733 48893D27E0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   732                              <1> .srcEnd:
   733                              <1> ;Now uppercase both paths
   734 0000273A 488D351CDFFFFF      <1>     lea rsi, srcSpec
   735 00002741 E8611D0000          <1>     call normalisePath
   736 00002746 488D3D92DFFFFF      <1>     lea rdi, destSpec
   737 0000274D E8551D0000          <1>     call normalisePath
   738                              <1> ;Now establish if the source is a directory or not!
   739 00002752 F60538E0FFFF08      <1>     test byte [bCpFlg], wcSrc
   740 00002759 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   741 0000275B 488D15FBDEFFFF      <1>     lea rdx, srcSpec
   742 00002762 4889D6              <1>     mov rsi, rdx
   743 00002765 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   744 00002767 80FC3A              <1>     cmp ah, ":"
   745 0000276A 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   746 0000276C AC                  <1>     lodsb           ;Get char past :
   747 0000276D 84C0                <1>     test al, al     ;Is byte three nul?
   748 0000276F 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   749 00002771 3A05B2D8FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   750 00002777 7515                <1>     jne .isSrcDir
   751 00002779 AC                  <1>     lodsb           ;Get char past char past "X:\"
   752 0000277A 84C0                <1>     test al, al     
   753 0000277C 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   754                              <1> .srcStorWc:
   755                              <1> ;rsi points past the char to store the WC at
   756 0000277E C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   757 00002785 800D05E0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   758 0000278C EB44                <1>     jmp short .checkDestDir
   759                              <1> .isSrcDir:
   760 0000278E B910000000          <1>     mov ecx, dirDirectory
   761 00002793 B8004E0000          <1>     mov eax, 4E00h
   762 00002798 CD21                <1>     int 21h
   763 0000279A 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   764                              <1>     ;Was the file we found actually a directory?
   765 0000279C 803D88D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   766 000027A3 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   767 000027A5 4889D7              <1>     mov rdi, rdx
   768 000027A8 E8E41C0000          <1>     call strlen
   769 000027AD FFC9                <1>     dec ecx
   770 000027AF 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   771 000027B2 8A0571D8FFFF        <1>     mov al, byte [pathSep]
   772 000027B8 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   773 000027BB 7401                <1>     je .srctpsp
   774 000027BD AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   775                              <1> .srctpsp:
   776 000027BE 48893D9CDFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   777 000027C5 B82A2E2A00          <1>     mov eax, "*.*"
   778 000027CA AB                  <1>     stosd   ;Store the WC with terminating nul!
   779 000027CB 800DBFDFFFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   780                              <1> .checkDestDir:
   781                              <1> ;Now establish if destination is a directory or not!
   782 000027D2 F605B8DFFFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   783 000027D9 0F855E010000        <1>     jnz .mod1
   784 000027DF 488D35F9DEFFFF      <1>     lea rsi, destSpec
   785 000027E6 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   786 000027E8 80FC3A              <1>     cmp ah, ":"
   787 000027EB 751A                <1>     jne .isDestDir
   788 000027ED 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   789 000027EF 84C0                <1>     test al, al ;Is byte three nul?
   790 000027F1 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   791 000027F7 84E4                <1>     test ah, ah ;Is byte four nul?
   792 000027F9 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   793 000027FB 3A0528D8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   794 00002801 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   795                              <1> .isDestDir:
   796                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   797 00002807 488D15D1DEFFFF      <1>     lea rdx, destSpec
   798 0000280E B910000000          <1>     mov ecx, dirDirectory
   799 00002813 B8004E0000          <1>     mov eax, 4E00h
   800 00002818 CD21                <1>     int 21h
   801 0000281A 7237                <1>     jc .mod2
   802                              <1>     ;Was the file we found actually a directory?
   803 0000281C 803D08D9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   804 00002823 752E                <1>     jne .mod2
   805                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   806                              <1>     ;If not, we need to place one there!
   807 00002825 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   808 00002828 E8641C0000          <1>     call strlen
   809 0000282D FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   810 0000282F 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   811 00002832 0FB605F0D7FFFF      <1>     movzx eax, byte [pathSep]
   812 00002839 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   813 0000283C 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   814 00002842 66AB                <1>     stosw           ;Else, store the pathsep and null!
   815 00002844 48FFCF              <1>     dec rdi         ;Point back to null
   816 00002847 48893D1BDFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   817 0000284E E9EA000000          <1>     jmp .mod1
   818                              <1> .mod2:
   819                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   820                              <1> ; to rename wildcard semantics. Always run through this as the destination
   821                              <1> ; name may have wildcards in it! But we don't add any.
   822 00002853 800D37DFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   823 0000285A 488D357EDEFFFF      <1>     lea rsi, destSpec
   824 00002861 E8E91D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   825 00002866 7407                <1>     jz .m2Wc
   826 00002868 800D22DFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   827                              <1> .m2Wc:
   828                              <1> ;Search for the source file
   829 0000286F 488D15E7DDFFFF      <1>     lea rdx, srcSpec
   830 00002876 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   831 00002878 B8004E0000          <1>     mov eax, 4E00h
   832 0000287D CD21                <1>     int 21h
   833 0000287F 0F82ED010000        <1>     jc .badSrcFile
   834 00002885 488B35DDDEFFFF      <1>     mov rsi, qword [destPtr]
   835 0000288C 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   836 00002890 B801290000          <1>     mov eax, 2901h
   837 00002895 CD21                <1>     int 21h
   838                              <1> .md2Lp:
   839 00002897 488D3596D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   840 0000289E 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   841 000028A2 B801290000          <1>     mov eax, 2901h
   842 000028A7 CD21                <1>     int 21h  
   843                              <1> ;Now depending on source and dest patterns, build a filename in renName
   844 000028A9 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   845 000028AD 488D3DBDDEFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   846 000028B4 57                  <1>     push rdi
   847 000028B5 48A5                <1>     movsq
   848 000028B7 66A5                <1>     movsw
   849 000028B9 A4                  <1>     movsb
   850 000028BA 5F                  <1>     pop rdi
   851 000028BB 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   852 000028BF B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   853                              <1> .md2NameMake:
   854 000028C4 AC                  <1>     lodsb   ;Get the char from the source string
   855 000028C5 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   856 000028C8 7502                <1>     jne .noStore    ;Dont store the char there
   857 000028CA 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   858                              <1> .noStore:
   859 000028CC 48FFC7              <1>     inc rdi ;Goto next char position
   860 000028CF FFC9                <1>     dec ecx
   861 000028D1 75F1                <1>     jnz .md2NameMake
   862 000028D3 488D355AD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   863 000028DA 488B3D80DEFFFF      <1>     mov rdi, qword [srcPtr]
   864 000028E1 E8921B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   865 000028E6 488D3584DEFFFF      <1>     lea rsi, renName
   866 000028ED 488B3D75DEFFFF      <1>     mov rdi, qword [destPtr]
   867 000028F4 E8981C0000          <1>     call FCBToAsciiz
   868 000028F9 E8DB000000          <1>     call .prntFilespec  ;Prints the source filename
   869 000028FE E8AE010000          <1>     call copyMain       ;And copy it!
   870 00002903 731D                <1>     jnc .md2Ok
   871                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   872                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   873 00002905 3CFD                <1>     cmp al, -3
   874 00002907 0F8442010000        <1>     je .badBinCdevErr
   875 0000290D 3CFE                <1>     cmp al, -2
   876 0000290F 0F8443010000        <1>     je .rootDirFull
   877 00002915 3CFF                <1>     cmp al, -1      ;Source and destination same?
   878 00002917 0F8444010000        <1>     je .badSameFile 
   879 0000291D E95A010000          <1>     jmp .badExit    ;Else generic error message
   880                              <1> .md2Ok:
   881 00002922 F60568DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   882 00002929 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   883 0000292F B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   884 00002934 CD21                <1>     int 21h
   885 00002936 727C                <1>     jc .copyDone        ;If no more files, we are done!
   886 00002938 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   887                              <1> .mod1:
   888                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   889 0000293D 800D4DDEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   890 00002944 488D1512DDFFFF      <1>     lea rdx, srcSpec
   891 0000294B 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   892 0000294D B8004E0000          <1>     mov eax, 4E00h
   893 00002952 CD21                <1>     int 21h
   894 00002954 0F8218010000        <1>     jc .badSrcFile  ;File not found error!!
   895                              <1> .mod1Lp:
   896 0000295A 488D35D3D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   897 00002961 488B3DF9DDFFFF      <1>     mov rdi, qword [srcPtr]
   898 00002968 E81A1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   899 0000296D 488B3DF5DDFFFF      <1>     mov rdi, qword [destPtr]
   900 00002974 E80E1B0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   901 00002979 E85B000000          <1>     call .prntFilespec
   902 0000297E E82E010000          <1>     call copyMain   ;And copy it!
   903 00002983 731D                <1>     jnc .mod1Ok
   904                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   905                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   906 00002985 3CFD                <1>     cmp al, -3
   907 00002987 0F84C2000000        <1>     je .badBinCdevErr
   908 0000298D 3CFE                <1>     cmp al, -2
   909 0000298F 0F84C3000000        <1>     je .rootDirFull
   910 00002995 3CFF                <1>     cmp al, -1      ;Source and destination same?
   911 00002997 0F84C4000000        <1>     je .badSameFile 
   912 0000299D E9DA000000          <1>     jmp .badExit    ;Else generic error message
   913                              <1> .mod1Ok:
   914 000029A2 F605E8DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   915 000029A9 7409                <1>     jz .copyDone
   916 000029AB B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   917 000029B0 CD21                <1>     int 21h
   918 000029B2 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   919                              <1> 
   920                              <1> .copyDone:
   921 000029B4 E8CD000000          <1>     call .copyCleanup   ;Clean up resources!
   922 000029B9 B800020000          <1>     mov eax, 0200h      ;Beep a TAB out :)
   923 000029BE B209                <1>     mov dl, TAB
   924 000029C0 CD21                <1>     int 21h
   925 000029C2 8B05C5DDFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   926 000029C8 E8961C0000          <1>     call printDecimalWord   ;n File(s) copied
   927 000029CD 488D1504E0FFFF      <1>     lea rdx, copyOk
   928 000029D4 B409                <1>     mov ah, 09h
   929 000029D6 CD21                <1>     int 21h    
   930                              <1>     return
    13                              <2> %%_ret:
    14 000029D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> 
   932                              <1> .prntFilespec:
   933                              <1> ;Prints the filespec to STDOUT. If the path is 
   934 000029D9 F605B1DDFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   935                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029E0 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   936 000029E2 488D1574DCFFFF      <1>     lea rdx, srcSpec
   937 000029E9 4889D7              <1>     mov rdi, rdx
   938 000029EC E8A01A0000          <1>     call strlen
   939 000029F1 FFC9                <1>     dec ecx     ;Drop terminating null
   940 000029F3 BB01000000          <1>     mov ebx, 1  ;STDOUT
   941 000029F8 B800400000          <1>     mov eax, 4000h  ;Write
   942 000029FD CD21                <1>     int 21h
   943 000029FF E860180000          <1>     call printCRLF
   944                              <1>     return
    13                              <2> %%_ret:
    14 00002A04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   945                              <1> .doSwitch:
   946                              <1> ;Since switches can come before or after a name, handle them here!
   947                              <1> ;If invalid switch char, returns ZF=NZ.
   948                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   949                              <1> ;       rsi -> Switchchar
   950 00002A05 56                  <1>     push rsi
   951 00002A06 48FFC6              <1>     inc rsi ;Point to char past switchchar
   952 00002A09 AC                  <1>     lodsb   ;Get this char, goto next char
   953 00002A0A 5E                  <1>     pop rsi
   954                              <1> .doSwitchRev:
   955 00002A0B E88B1A0000          <1>     call ucChar
   956 00002A10 3C41                <1>     cmp al, "A"
   957 00002A12 7510                <1>     jne .cB
   958 00002A14 081D77DDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   959 00002A1A 802570DDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   960                              <1> .cExit:
   961 00002A21 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   962                              <1>     return
    13                              <2> %%_ret:
    14 00002A23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> .cB:
   964 00002A24 3C42                <1>     cmp al, "B"
   965 00002A26 7511                <1>     jne .cV
   966 00002A28 F6D3                <1>     not bl  ;Reverse bits
   967 00002A2A 201D61DDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   968 00002A30 800D5ADDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   969 00002A37 EBE8                <1>     jmp short .cExit
   970                              <1> .cV:
   971 00002A39 3C56                <1>     cmp al, "V"
   972                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A3B 75(23)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   973 00002A3D F60538DDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   974 00002A44 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   975                              <1>     ;Else, set it. We return it at the end!
   976 00002A46 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   977 00002A4B CD21                <1>     int 21h
   978 00002A4D EBD2                <1>     jmp short .cExit
   979                              <1> 
   980                              <1> ;COPY Bad Exits!!
   981                              <1> .badBinCdevErr:
   982 00002A4F 488D1532E2FFFF      <1>     lea rdx, binDevErr
   983 00002A56 EB10                <1>     jmp short .badExitCmn
   984                              <1> .rootDirFull:
   985 00002A58 488D1515DFFFFF      <1>     lea rdx, fulRootDir
   986 00002A5F EB07                <1>     jmp short .badExitCmn
   987                              <1> .badSameFile:
   988 00002A61 488D1522DFFFFF      <1>     lea rdx, noSelfCopy
   989                              <1> .badExitCmn:
   990 00002A68 E892F4FFFF          <1>     call badCmn     ;Print error message
   991 00002A6D E942FFFFFF          <1>     jmp .copyDone   ;Clean resources
   992                              <1> .badSrcFile:
   993 00002A72 E878F4FFFF          <1>     call badFnf  ;File not found!!
   994 00002A77 E938FFFFFF          <1>     jmp .copyDone
   995                              <1> .badExit:
   996 00002A7C E841F4FFFF          <1>     call badParamError
   997 00002A81 E92EFFFFFF          <1>     jmp .copyDone
   998                              <1> 
   999                              <1> .copyCleanup:
  1000                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
  1001                              <1> ;Handles are never open in this process!
  1002 00002A86 B8002E0000          <1>     mov eax, 2E00h
  1003 00002A8B 8A05EBDCFFFF        <1>     mov al, byte [verifyFlg]
  1004 00002A91 CD21                <1>     int 21h
  1005 00002A93 4150                <1>     push r8
  1006 00002A95 4C8B05E7DCFFFF      <1>     mov r8, qword [cpBufPtr]
  1007 00002A9C 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
  1008 00002A9F 7407                <1>     jz .skipFree
  1009 00002AA1 B800490000          <1>     mov eax, 4900h
  1010 00002AA6 CD21                <1>     int 21h
  1011                              <1> .skipFree:
  1012 00002AA8 4158                <1>     pop r8
  1013 00002AAA 0F82881C0000        <1>     jc freezePC ;If free fails, man....
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00002AB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> copyMain:
  1017                              <1> ;This is the main copying procedure! 
  1018                              <1> ;Start by checking the two files are not the same. If so, complain!
  1019                              <1> ;If returns CF=CY, error code in al. 
  1020                              <1> ;   If al = -1, same filename error!
  1021                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1022                              <1> ;   If al = -3, attempted binary read from a device
  1023                              <1> ;If returns CF=NC, file copied successfully.
  1024                              <1> ;Check the two files are not the same using truename in searchspec
  1025 00002AB1 488D35A5DBFFFF      <1>     lea rsi, srcSpec
  1026 00002AB8 488D3DD1D9FFFF      <1>     lea rdi, searchSpec
  1027 00002ABF B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1028 00002AC4 CD21                <1>     int 21h 
  1029 00002AC6 57                  <1>     push rdi    ;Save this searchSpec
  1030 00002AC7 488D3511DCFFFF      <1>     lea rsi, destSpec
  1031 00002ACE 488D3D3DDAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1032 00002AD5 B800600000          <1>     mov eax, 6000h
  1033 00002ADA CD21                <1>     int 21h
  1034 00002ADC 5E                  <1>     pop rsi     ;Get this ptr back
  1035 00002ADD B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1036 00002AE2 CD2F                <1>     int 2Fh
  1037 00002AE4 750F                <1>     jnz .notSameFile
  1038 00002AE6 B0FF                <1>     mov al, -1  ;Same filename error!
  1039                              <1> .badExit:
  1040 00002AE8 50                  <1>     push rax
  1041 00002AE9 E8B0000000          <1>     call .exitCleanup
  1042 00002AEE 58                  <1>     pop rax
  1043 00002AEF F9                  <1>     stc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 00002AF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .badExitNoSpace:
  1046 00002AF1 B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1047 00002AF3 EBF3                <1>     jmp short .badExit
  1048                              <1> .notSameFile:
  1049                              <1> ;Open source with read permission
  1050                              <1> ;Open destination with write permission
  1051 00002AF5 488D1561DBFFFF      <1>     lea rdx, srcSpec
  1052 00002AFC B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1053 00002B01 CD21                <1>     int 21h
  1054 00002B03 72E3                <1>     jc .badExit
  1055 00002B05 66890571DCFFFF      <1>     mov word [sourceHdl], ax
  1056 00002B0C 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1057                              <1> 
  1058 00002B0F B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1059 00002B14 CD21                <1>     int 21h
  1060 00002B16 66891564DCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1061 00002B1D F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1062 00002B20 7412                <1>     jz .prepCopy
  1063                              <1> ;Check the binary flag was not set on this source filespec
  1064 00002B22 B0FD                <1>     mov al, -3  ;Prep the error code
  1065 00002B24 F60566DCFFFF02      <1>     test byte [bCpFlg], binSrc
  1066 00002B2B 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1067 00002B2D 800D5DDCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1068                              <1> .prepCopy:
  1069 00002B34 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1070 00002B36 488B1546DCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1071                              <1> .copyLoop:
  1072                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1073                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1074                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1075                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1076 00002B3D 0FB70D47DCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1077 00002B44 0FB71D32DCFFFF      <1>     movzx ebx, word [sourceHdl]
  1078 00002B4B B8003F0000          <1>     mov eax, 3F00h ;Read
  1079 00002B50 CD21                <1>     int 21h
  1080 00002B52 7294                <1>     jc .badExit
  1081 00002B54 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1082 00002B56 F60534DCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1083 00002B5D 7413                <1>     jz .notAscii
  1084                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1085 00002B5F 50                  <1>     push rax        ;Save the original char count
  1086 00002B60 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1087 00002B63 B01A                <1>     mov al, EOF
  1088 00002B65 F2AE                <1>     repne scasb     ;Loop thru now!
  1089 00002B67 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1090 00002B69 59                  <1>     pop rcx         ;Get the original read count into ecx
  1091 00002B6A 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1092                              <1> ;Here if EOF found.
  1093 00002B6C FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1094 00002B6E 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1095 00002B70 FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1096                              <1> .notAscii:
  1097 00002B72 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1098 00002B74 7428                <1>     jz .exitCleanup
  1099 00002B76 51                  <1>     push rcx    ;Save the number of bytes to write
  1100 00002B77 52                  <1>     push rdx    ;Save the buffer ptr
  1101 00002B78 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1102 00002B7D 5A                  <1>     pop rdx
  1103 00002B7E 59                  <1>     pop rcx
  1104 00002B7F 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1105 00002B85 B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1106 00002B8A CD21                <1>     int 21h
  1107 00002B8C 0F8256FFFFFF        <1>     jc .badExit
  1108 00002B92 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1109 00002B94 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1110 00002B9A 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1111 00002B9C 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1112                              <1> .exitCleanup:
  1113                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1114 00002B9E F605ECDBFFFF04      <1>     test byte [bCpFlg], ascDes
  1115 00002BA5 7425                <1>     jz .ecNoEOF
  1116 00002BA7 0FBF1DD1DBFFFF      <1>     movsx ebx, word [destHdl]
  1117 00002BAE 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1118 00002BB4 7416                <1>     je .ecNoEOF
  1119 00002BB6 488B15C6DBFFFF      <1>     mov rdx, qword [cpBufPtr]
  1120 00002BBD C6021A              <1>     mov byte [rdx], EOF
  1121 00002BC0 B901000000          <1>     mov ecx, 1
  1122 00002BC5 B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1123 00002BCA CD21                <1>     int 21h
  1124                              <1> .ecNoEOF:
  1125                              <1> ;Now close copy handles!
  1126 00002BCC 668B1DAADBFFFF      <1>     mov bx, word [sourceHdl]
  1127 00002BD3 6681FBFFFF          <1>     cmp bx, -1
  1128 00002BD8 7410                <1>     je .beSkipSource
  1129 00002BDA B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1130 00002BDF CD21                <1>     int 21h
  1131 00002BE1 66C70593DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1132                              <1> .beSkipSource:
  1133 00002BEA 668B1D8EDBFFFF      <1>     mov bx, word [destHdl]
  1134 00002BF1 6681FBFFFF          <1>     cmp bx, -1
  1135                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002BF6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002BF8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1136 00002BF9 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1137 00002BFE CD21                <1>     int 21h
  1138 00002C00 66C70576DBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1139                              <1>     return
    13                              <2> %%_ret:
    14 00002C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .getWriteHandle:
  1142                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1143                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1144                              <1> ;Input: Nothing
  1145                              <1> ;Output: CF=NC: bx = Handle to the file
  1146                              <1> ;        CF=CY: File failed to open/create. 
  1147 00002C0A 0FB71D6EDBFFFF      <1>     movzx ebx, word [destHdl]
  1148 00002C11 6681FBFFFF          <1>     cmp bx, -1
  1149 00002C16 7402                <1>     je .gwHProceed
  1150 00002C18 F8                  <1>     clc     ;Clear the CF
  1151                              <1>     return
    13                              <2> %%_ret:
    14 00002C19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> .gwHProceed:
  1153                              <1> ;Here if the destination has not been opened yet!
  1154 00002C1A 488D15BEDAFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1155                              <1> ;Now we create/reopen the file here!
  1156 00002C21 F60569DBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1157 00002C28 743E                <1>     jz .createFile
  1158                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1159                              <1> ;If this is more than file 0, we open
  1160 00002C2A 813D59DBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1160 00002C33 00                  <1>
  1161 00002C34 7432                <1>     je .createFile
  1162                              <1>     ;Now we open the file instead and append to the end
  1163 00002C36 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1164 00002C3B CD21                <1>     int 21h
  1165                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C3D 72(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1166 00002C3F FF0548DBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1167 00002C45 66890533DBFFFF      <1>     mov word [destHdl], ax
  1168 00002C4C 0FB7D8              <1>     movzx ebx, ax
  1169 00002C4F 31C9                <1>     xor ecx, ecx
  1170 00002C51 31D2                <1>     xor edx, edx
  1171 00002C53 F60537DBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1172 00002C5A 7404                <1>     jz .gwHNoAscii
  1173 00002C5C FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1174 00002C5E FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1175                              <1> .gwHNoAscii:
  1176 00002C60 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1177 00002C65 CD21                <1>     int 21h
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00002C67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .createFile:
  1180 00002C68 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1181 00002C6D 31C9                <1>     xor ecx, ecx    ;No file attributes
  1182 00002C6F CD21                <1>     int 21h
  1183                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C71 72(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1184 00002C73 FF0514DBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1185 00002C79 668905FFDAFFFF      <1>     mov word [destHdl], ax
  1186 00002C80 0FB7D8              <1>     movzx ebx, ax
  1187                              <1>     return
    13                              <2> %%_ret:
    14 00002C83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> 
  1189                              <1> erase:
  1190 00002C84 F60519D4FFFFFF      <1>     test byte [arg1Flg], -1
  1191 00002C8B 0F8443F2FFFF        <1>     jz badArgError
  1192 00002C91 E8BD1A0000          <1>     call setDTA     ;Start by resetting the DTA
  1193 00002C96 E88F190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1194                              <1> .dirLp:
  1195 00002C9B 488D3DEED7FFFF      <1>     lea rdi, searchSpec
  1196 00002CA2 E8C6180000          <1>     call findLastPathComponant
  1197 00002CA7 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1198 00002CAA 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1199 00002CAE B03F                <1>     mov al, "?"
  1200                              <1>     ;Store question marks in the name field
  1201 00002CB0 57                  <1>     push rdi
  1202 00002CB1 48FFC7              <1>     inc rdi ;Goto the first char
  1203 00002CB4 B90B000000          <1>     mov ecx, 11
  1204 00002CB9 F3AA                <1>     rep stosb
  1205 00002CBB 5F                  <1>     pop rdi
  1206 00002CBC 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1207 00002CBF B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1208 00002CC4 CD21                <1>     int 21h
  1209 00002CC6 3C01                <1>     cmp al, 1
  1210 00002CC8 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1211                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1212                              <1>     ;No dirs to handle in here
  1213 00002CCE 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1214 00002CD2 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1215 00002CD5 E8B7180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1216                              <1>     ;Count the number of ?'s, if 11, we print the message
  1217 00002CDA 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1218 00002CDE 31C9                <1>     xor ecx, ecx
  1219                              <1> .wcScan:
  1220 00002CE0 AC                  <1>     lodsb
  1221 00002CE1 3C3F                <1>     cmp al, "?"
  1222 00002CE3 7534                <1>     jne .endCount
  1223 00002CE5 FFC1                <1>     inc ecx
  1224 00002CE7 81F90B000000        <1>     cmp ecx, 11
  1225 00002CED 75F1                <1>     jne .wcScan
  1226                              <1> .ynmsg:
  1227 00002CEF 488D1524DEFFFF      <1>     lea rdx, ynMes
  1228 00002CF6 E870150000          <1>     call printString
  1229 00002CFB B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1230 00002CFD CD21                <1>     int 21h ;Get char in al
  1231 00002CFF E897170000          <1>     call ucChar ;Uppercase the char
  1232 00002D04 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1233 00002D06 740C                <1>     je .endCount1
  1234 00002D08 3C4E                <1>     cmp al, "N"
  1235                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002D0A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002D0C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1236 00002D0D E852150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1237 00002D12 EBDB                <1>     jmp short .ynmsg    
  1238                              <1> .endCount1:
  1239 00002D14 E84B150000          <1>     call printCRLF
  1240                              <1> .endCount:
  1241                              <1>     ;Now we copy our search template pathstring to delPath
  1242 00002D19 488D3D3DD9FFFF      <1>     lea rdi, delPath
  1243 00002D20 488D3569D7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1244 00002D27 E85B170000          <1>     call strcpy2         ;Copy the string over to delPath
  1245                              <1> .findFile:
  1246                              <1>     ;Now we find first/find next our way through the files
  1247 00002D2C 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1248 00002D2F 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1249 00002D31 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1250 00002D36 CD21                <1>     int 21h
  1251 00002D38 0F82B1F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1252                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1253 00002D3E E82A180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1254 00002D43 488D35EAD3FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1255                              <1> .delNextFile:
  1256                              <1> ;rsi and rdi dont move here
  1257 00002D4A E838170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1258 00002D4F 488D1507D9FFFF      <1>     lea rdx, delPath
  1259 00002D56 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1260 00002D5B CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1261 00002D5D 488D152CD7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1262 00002D64 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1263 00002D69 CD21                <1>     int 21h
  1264 00002D6B 73DD                <1>     jnc .delNextFile    
  1265 00002D6D F8                  <1>     clc ;Clear carry to indicate success
  1266                              <1>     return
    13                              <2> %%_ret:
    14 00002D6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1267                              <1> .noWildcard:
  1268                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1269                              <1>     ; a \*.*<NUL> over the null terminator
  1270 00002D6F 488D151AD7FFFF      <1>     lea rdx, searchSpec
  1271 00002D76 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1272 00002D7B B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1273 00002D80 CD21                <1>     int 21h
  1274 00002D82 0F8267F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1275 00002D88 F6059CD3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1276 00002D8F 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1277                              <1>     ;Else, we are dealing with a dir
  1278 00002D91 4889D7              <1>     mov rdi, rdx
  1279 00002D94 31C9                <1>     xor ecx, ecx
  1280 00002D96 FFC9                <1>     dec ecx
  1281 00002D98 F2AE                <1>     repne scasb ;Go to the end of the line!
  1282 00002D9A 48FFCF              <1>     dec rdi
  1283 00002D9D 0FB60585D2FFFF      <1>     movzx eax, byte [pathSep]
  1284 00002DA4 AA                  <1>     stosb
  1285 00002DA5 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1286 00002DAA AB                  <1>     stosd
  1287 00002DAB E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1288                              <1> .delMain:   ;Call with rdx -> buffer!
  1289 00002DB0 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1290 00002DB5 CD21                <1>     int 21h
  1291                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DB7 73(6E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1292 00002DB9 3C05                <1>     cmp al, errAccDen
  1293 00002DBB 0F84F8F0FFFF        <1>     je badAccError ;If the file is RO, fail!
  1294 00002DC1 E917F1FFFF          <1>     jmp badFileError
  1295                              <1>     return
    13                              <2> %%_ret:
    14 00002DC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1296                              <1> 
  1297                              <1> date:
  1298 00002DC7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1299 00002DCE E8E3160000          <1>     call skipDelimiters
  1300 00002DD3 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1301 00002DD6 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1302                              <1> .init:
  1303                              <1>     ;Else, we do interactive mode!
  1304 00002DD8 488D15BEDCFFFF      <1>     lea rdx, curDate
  1305 00002DDF B409                <1>     mov ah, 09h
  1306 00002DE1 CD21                <1>     int 21h
  1307 00002DE3 E8C4150000          <1>     call printFmtDate
  1308                              <1> .noCur:
  1309 00002DE8 488D15BFDCFFFF      <1>     lea rdx, newDate
  1310 00002DEF B409                <1>     mov ah, 09h
  1311 00002DF1 CD21                <1>     int 21h
  1312 00002DF3 488D15D3DCFFFF      <1>     lea rdx, ukDate
  1313 00002DFA 488D05BFDCFFFF      <1>     lea rax, usDate
  1314 00002E01 488D1DD2DCFFFF      <1>     lea rbx, jpDate
  1315 00002E08 803D1CD2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1316 00002E0F 480F47D3            <1>     cmova rdx, rbx
  1317 00002E13 480F42D0            <1>     cmovb rdx, rax
  1318 00002E17 B409                <1>     mov ah, 09h
  1319 00002E19 CD21                <1>     int 21h
  1320                              <1> 
  1321 00002E1B 488D15C1D3FFFF      <1>     lea rdx, cpyBuffer
  1322 00002E22 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1323 00002E25 B40A                <1>     mov ah, 0Ah
  1324 00002E27 CD21                <1>     int 21h
  1325 00002E29 52                  <1>     push rdx
  1326 00002E2A E835140000          <1>     call printCRLF
  1327 00002E2F 5A                  <1>     pop rdx
  1328 00002E30 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1329                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002E34 74(C6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1330                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1331 00002E36 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1332                              <1> .goDate:
  1333 00002E3A 31C0                <1>     xor eax, eax    
  1334 00002E3C 803DE8D1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1335 00002E43 727B                <1>     jb .us
  1336 00002E45 0F87B7000000        <1>     ja .jpn
  1337                              <1>     ;Here for UK style dates
  1338 00002E4B E8AB180000          <1>     call getByte
  1339 00002E50 725D                <1>     jc .badDate
  1340 00002E52 880503D8FFFF        <1>     mov byte [td3], al  ;Store the day
  1341 00002E58 E80C010000          <1>     call .validSep
  1342 00002E5D 7550                <1>     jne .badDate
  1343 00002E5F E897180000          <1>     call getByte
  1344 00002E64 7249                <1>     jc .badDate
  1345 00002E66 8805F0D7FFFF        <1>     mov byte [td4], al  ;Store month
  1346 00002E6C E8F8000000          <1>     call .validSep
  1347 00002E71 753C                <1>     jne .badDate
  1348 00002E73 E88F180000          <1>     call getNum
  1349 00002E78 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1350 00002E7D 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1351 00002E82 732B                <1>     jae .badDate
  1352 00002E84 668905CED7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1353                              <1> .writeDate:
  1354 00002E8B E826160000          <1>     call skipDelimiters
  1355 00002E90 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1356 00002E93 751A                <1>     jne .badDate
  1357 00002E95 0FB70DBDD7FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1358 00002E9C 668B15B8D7FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1359 00002EA3 B8002B0000          <1>     mov eax, 2B00h
  1360 00002EA8 CD21                <1>     int 21h
  1361 00002EAA 84C0                <1>     test al, al
  1362                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EAC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EAE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1363                              <1> .badDate:
  1364 00002EAF 488D15D8DBFFFF      <1>     lea rdx, badDate
  1365 00002EB6 E8B0130000          <1>     call printString
  1366 00002EBB E928FFFFFF          <1>     jmp date.noCur
  1367                              <1> .us:
  1368 00002EC0 E836180000          <1>     call getByte
  1369 00002EC5 72E8                <1>     jc .badDate
  1370 00002EC7 88058FD7FFFF        <1>     mov byte [td4], al  ;Store the month
  1371 00002ECD E897000000          <1>     call .validSep
  1372 00002ED2 75DB                <1>     jne .badDate
  1373 00002ED4 E822180000          <1>     call getByte
  1374 00002ED9 72D4                <1>     jc .badDate
  1375 00002EDB 88057AD7FFFF        <1>     mov byte [td3], al  ;Store day
  1376 00002EE1 E883000000          <1>     call .validSep
  1377 00002EE6 75C7                <1>     jne .badDate
  1378 00002EE8 E81A180000          <1>     call getNum
  1379 00002EED E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1380 00002EF2 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1381 00002EF7 73B6                <1>     jae .badDate
  1382 00002EF9 66890559D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1383                              <1> .writeHop:
  1384 00002F00 EB89                <1>     jmp short .writeDate
  1385                              <1> .jpn:
  1386 00002F02 E800180000          <1>     call getNum
  1387 00002F07 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1388 00002F0C 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1389 00002F11 739C                <1>     jae .badDate
  1390 00002F13 6689053FD7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1391 00002F1A E84A000000          <1>     call .validSep
  1392 00002F1F 758E                <1>     jne .badDate
  1393 00002F21 E8D5170000          <1>     call getByte
  1394 00002F26 7287                <1>     jc .badDate
  1395 00002F28 88052DD7FFFF        <1>     mov byte [td3], al  ;Store the day
  1396 00002F2E E836000000          <1>     call .validSep
  1397 00002F33 0F8576FFFFFF        <1>     jne .badDate
  1398 00002F39 E8BD170000          <1>     call getByte
  1399 00002F3E 0F826BFFFFFF        <1>     jc .badDate
  1400 00002F44 880512D7FFFF        <1>     mov byte [td4], al  ;Store month
  1401 00002F4A EBB4                <1>     jmp short .writeHop
  1402                              <1> .doYear:
  1403 00002F4C 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1404                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002F51 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002F53 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1405                              <1> ;If the user specifies 80-99 it means 1980-1999
  1406                              <1> ;If the user specifies 00-79 it means 2000-2079
  1407 00002F54 BBD0070000          <1>     mov ebx, 2000
  1408 00002F59 B96C070000          <1>     mov ecx, 1900
  1409 00002F5E 3D50000000          <1>     cmp eax, 80     
  1410 00002F63 0F42CB              <1>     cmovb ecx, ebx
  1411 00002F66 01C8                <1>     add eax, ecx
  1412                              <1>     return
    13                              <2> %%_ret:
    14 00002F68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1413                              <1> .validSep:
  1414 00002F69 AC                  <1>     lodsb           ;Get the char and return
  1415 00002F6A 3C2E                <1>     cmp al, "."
  1416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F6C 74(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1417 00002F6E 3C2F                <1>     cmp al, "/"
  1418                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F70 74(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1419 00002F72 3C2D                <1>     cmp al, "-"
  1420                              <1>     return
    13                              <2> %%_ret:
    14 00002F74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1421                              <1> 
  1422                              <1> time:
  1423 00002F75 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1424 00002F7C E835150000          <1>     call skipDelimiters
  1425 00002F81 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1426 00002F84 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1427                              <1> .init:
  1428 00002F86 488D1569DBFFFF      <1>     lea rdx, curTime
  1429 00002F8D B409                <1>     mov ah, 09h
  1430 00002F8F CD21                <1>     int 21h
  1431 00002F91 E8AD130000          <1>     call printFmtTime
  1432                              <1> .noCur:
  1433 00002F96 488D156ADBFFFF      <1>     lea rdx, newTime
  1434 00002F9D B409                <1>     mov ah, 09h
  1435 00002F9F CD21                <1>     int 21h
  1436                              <1> 
  1437 00002FA1 488D15B9D1FFFF      <1>     lea rdx, inBuffer
  1438 00002FA8 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1439 00002FAB B40A                <1>     mov ah, 0Ah
  1440 00002FAD CD21                <1>     int 21h
  1441 00002FAF 52                  <1>     push rdx
  1442 00002FB0 488D15CAD8FFFF      <1>     lea rdx, crlf
  1443 00002FB7 B409                <1>     mov ah, 09h
  1444 00002FB9 CD21                <1>     int 21h
  1445 00002FBB 5A                  <1>     pop rdx
  1446 00002FBC 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1447                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FC0 74(74)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1448 00002FC2 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1449                              <1> .goTime:
  1450 00002FC6 C70589D6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1450 00002FCF 00                  <1>
  1451 00002FD0 31C0                <1>     xor eax, eax   
  1452 00002FD2 E824170000          <1>     call getByte
  1453 00002FD7 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1454 00002FDD 880577D6FFFF        <1>     mov byte [td2], al  ;Save hours
  1455 00002FE3 E89A000000          <1>     call .validsep
  1456 00002FE8 0F8583000000        <1>     jne .badTime
  1457 00002FEE E808170000          <1>     call getByte
  1458 00002FF3 727C                <1>     jc .badTime
  1459 00002FF5 88055ED6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1460 00002FFB E882000000          <1>     call .validsep
  1461 00003000 740F                <1>     je .goSec
  1462 00003002 48FFCE              <1>     dec rsi ;Go back a char
  1463 00003005 E8AC140000          <1>     call skipDelimiters ;Skip any delimiters
  1464 0000300A 803E0D              <1>     cmp byte [rsi], CR
  1465 0000300D 743E                <1>     je .setTime
  1466 0000300F EB60                <1>     jmp short .badTime
  1467                              <1> .goSec:
  1468 00003011 E878000000          <1>     call .checkNum
  1469 00003016 7259                <1>     jc .badTime
  1470 00003018 E8DE160000          <1>     call getByte
  1471 0000301D 7252                <1>     jc .badTime
  1472 0000301F 880537D6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1473 00003025 AC                  <1>     lodsb       ;Move rsi forwards
  1474 00003026 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1475 00003028 740F                <1>     je .goMsec
  1476 0000302A 48FFCE              <1>     dec rsi ;Go back a char
  1477 0000302D E884140000          <1>     call skipDelimiters ;Skip any delimiters
  1478 00003032 803E0D              <1>     cmp byte [rsi], CR
  1479 00003035 7416                <1>     je .setTime
  1480 00003037 EB38                <1>     jmp short .badTime
  1481                              <1> .goMsec:
  1482 00003039 E850000000          <1>     call .checkNum
  1483 0000303E 7231                <1>     jc .badTime
  1484 00003040 E8B6160000          <1>     call getByte
  1485 00003045 722A                <1>     jc .badTime
  1486 00003047 88050ED6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1487                              <1> .setTime:
  1488 0000304D E864140000          <1>     call skipDelimiters
  1489 00003052 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1490 00003055 751A                <1>     jne .badTime
  1491 00003057 0FB70DFBD5FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1492 0000305E 0FB715F6D5FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1493 00003065 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1494 0000306A CD21                <1>     int 21h
  1495 0000306C A8FF                <1>     test al, -1
  1496                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000306E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003070 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1497                              <1> .badTime:
  1498 00003071 488D156FDAFFFF      <1>     lea rdx, badTime
  1499 00003078 E8EE110000          <1>     call printString
  1500 0000307D E914FFFFFF          <1>     jmp time.noCur
  1501                              <1> .validsep:
  1502 00003082 AC                  <1>     lodsb
  1503 00003083 3A05AFCFFFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1504                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003089 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1505 0000308B 3C2E                <1>     cmp al, "."
  1506                              <1>     return
    13                              <2> %%_ret:
    14 0000308D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1507                              <1> .checkNum:
  1508 0000308E AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1509 0000308F 48FFCE              <1>     dec rsi
  1510 00003092 3C30                <1>     cmp al, "0"
  1511 00003094 7206                <1>     jb .cnbad
  1512 00003096 3C39                <1>     cmp al, "9"
  1513 00003098 7702                <1>     ja .cnbad
  1514 0000309A F8                  <1>     clc
  1515                              <1>     return
    13                              <2> %%_ret:
    14 0000309B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1516                              <1> .cnbad:
  1517 0000309C F9                  <1>     stc
  1518                              <1>     return
    13                              <2> %%_ret:
    14 0000309D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1519                              <1> ctty:
  1520 0000309E F605FFCFFFFFFF      <1>     test byte [arg1Flg], -1
  1521 000030A5 0F8429EEFFFF        <1>     jz badArgError
  1522 000030AB F605F5CFFFFFFF      <1>     test byte [arg2Flg], -1
  1523 000030B2 0F851CEEFFFF        <1>     jnz badArgError
  1524 000030B8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1525 000030BF 0FB605DFCFFFFF      <1>     movzx eax, byte [arg1Off]
  1526 000030C6 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1527 000030C9 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1528 000030CD 750F                <1>     jne .noDrive
  1529 000030CF 0FB605D0CFFFFF      <1>     movzx eax, byte [arg1FCBret]
  1530 000030D6 3CFF                <1>     cmp al, -1
  1531 000030D8 0F84EDEDFFFF        <1>     je badDriveError
  1532                              <1> .noDrive:
  1533                              <1>     ;Now we open the provided file
  1534 000030DE E85F150000          <1>     call copyArgumentToSearchSpec
  1535 000030E3 488D15A6D3FFFF      <1>     lea rdx, searchSpec
  1536                              <1> .loadSwap:
  1537 000030EA B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1538 000030EF CD21                <1>     int 21h
  1539 000030F1 0F82E6EDFFFF        <1>     jc badFileError
  1540 000030F7 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1541 000030FA B800440000          <1>     mov eax, 4400h  ;Get device word
  1542 000030FF CD21                <1>     int 21h
  1543 00003101 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1544 00003104 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1545                              <1>     ;Now we set this handle to be STDIO
  1546 00003106 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1547 00003109 30F6                <1>     xor dh, dh
  1548 0000310B B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1549 00003110 CD21                <1>     int 21h
  1550                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1551 00003112 31C9                <1>     xor ecx, ecx    ;STDIN
  1552 00003114 B800460000          <1>     mov eax, 4600h
  1553 00003119 CD21                <1>     int 21h
  1554 0000311B FFC1                <1>     inc ecx         ;STDOUT
  1555 0000311D B800460000          <1>     mov eax, 4600h
  1556 00003122 CD21                <1>     int 21h
  1557 00003124 FFC1                <1>     inc ecx         ;STDERR
  1558 00003126 B800460000          <1>     mov eax, 4600h
  1559 0000312B CD21                <1>     int 21h
  1560 0000312D B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1561 00003132 CD21                <1>     int 21h
  1562                              <1>     return
    13                              <2> %%_ret:
    14 00003134 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1563                              <1> .badCharDev:
  1564 00003135 488D15DCDAFFFF      <1>     lea rdx, badDev
  1565 0000313C B409                <1>     mov ah, 09h
  1566 0000313E CD21                <1>     int 21h
  1567 00003140 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1568 00003142 CD21                <1>     int 21h
  1569                              <1>     return
    13                              <2> %%_ret:
    14 00003144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1570                              <1> 
  1571                              <1> cls:  
  1572 00003145 B800440000          <1>     mov eax, 4400h  ;Get device info
  1573 0000314A BB01000000          <1>     mov ebx, 1      ;for handle 1
  1574 0000314F CD21                <1>     int 21h         ;in dx
  1575 00003151 F7C280000000        <1>     test edx, devCharDev
  1576 00003157 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1577 00003159 F7C210000000        <1>     test edx, charDevFastOut
  1578 0000315F 743E                <1>     jz .doAnsi
  1579                              <1>     ;Test if Int 29h uses Int 30h
  1580                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1581                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1582 00003161 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1583 00003166 CD21                <1>     int 21h
  1584                              <1> .biosCheck:
  1585 00003168 66813BCD30          <1>     cmp word [rbx], 30CDh
  1586 0000316D 740C                <1>     je .biosConfirmed
  1587 0000316F 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1588 00003174 7429                <1>     je .doAnsi
  1589 00003176 48FFC3              <1>     inc rbx
  1590 00003179 EBED                <1>     jmp short .biosCheck
  1591                              <1> .biosConfirmed:
  1592                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1593 0000317B B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1594 0000317D 31DB                <1>     xor ebx, ebx
  1595 0000317F CD30                <1>     int 30h
  1596 00003181 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1597 00003183 CD30                <1>     int 30h
  1598 00003185 53                  <1>     push rbx
  1599 00003186 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1600 00003189 FECA                <1>     dec dl
  1601 0000318B B619                <1>     mov dh, 25  ;Number of rows is standard
  1602 0000318D 31C0                <1>     xor eax, eax
  1603 0000318F 89C1                <1>     mov ecx, eax
  1604 00003191 B707                <1>     mov bh, 7   ;Screen attributes
  1605 00003193 B406                <1>     mov ah, 6   ;Scroll
  1606 00003195 CD30                <1>     int 30h
  1607 00003197 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1608 00003199 5B                  <1>     pop rbx
  1609 0000319A B402                <1>     mov ah, 2
  1610 0000319C CD30                <1>     int 30h
  1611                              <1>     return
    13                              <2> %%_ret:
    14 0000319E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1612                              <1> .doAnsi:
  1613                              <1> ;4 chars in the ansi routine
  1614                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1615                              <1> ; understand ANSI codes
  1616 0000319F 488D35F9DCFFFF      <1>     lea rsi, ansiCls
  1617 000031A6 B904000000          <1>     mov ecx, 4
  1618 000031AB B406                <1>     mov ah, 06h ;Raw char output
  1619                              <1> .ansiLp:
  1620 000031AD AC                  <1>     lodsb   ;Get the char in 
  1621 000031AE 88C2                <1>     mov dl, al
  1622 000031B0 CD21                <1>     int 21h
  1623 000031B2 FFC9                <1>     dec ecx
  1624 000031B4 75F7                <1>     jnz .ansiLp
  1625                              <1>     return
    13                              <2> %%_ret:
    14 000031B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1626                              <1> 
  1627                              <1> break:
  1628 000031B7 F605E6CEFFFFFF      <1>     test byte [arg1Flg], -1
  1629 000031BE 752D                <1>     jnz .argumentProvided
  1630                              <1>     ;Here we just get the status of break
  1631 000031C0 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1632 000031C5 CD21                <1>     int 21h
  1633 000031C7 88D3                <1>     mov bl, dl
  1634 000031C9 488D15EADAFFFF      <1>     lea rdx, breakIs
  1635 000031D0 B409                <1>     mov ah, 09h
  1636 000031D2 CD21                <1>     int 21h
  1637 000031D4 488D15DADAFFFF      <1>     lea rdx, onMes
  1638 000031DB 488D0DCDDAFFFF      <1>     lea rcx, offMes
  1639 000031E2 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1640 000031E4 480F44D1            <1>     cmovz rdx, rcx
  1641 000031E8 B409                <1>     mov ah, 09h
  1642 000031EA CD21                <1>     int 21h
  1643                              <1>     return
    13                              <2> %%_ret:
    14 000031EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1644                              <1> .argumentProvided:
  1645 000031ED 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1646 000031F1 AD                  <1>     lodsd   ;Read the word
  1647 000031F2 89C3                <1>     mov ebx, eax
  1648 000031F4 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1649 000031F9 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1650 000031FC 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1651 00003201 7416                <1>     je .maybeOn
  1652 00003203 663D4F46            <1>     cmp ax, "OF"
  1653 00003207 7523                <1>     jne .badOnOff
  1654 00003209 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1655 0000320E 6681FB4620          <1>     cmp bx, "F "
  1656 00003213 7517                <1>     jne .badOnOff
  1657                              <1>     ;Set off
  1658 00003215 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1659 00003217 EB0B                <1>     jmp short .setBreak
  1660                              <1> .maybeOn:
  1661 00003219 663D4F4E            <1>     cmp ax, "ON"
  1662 0000321D 750D                <1>     jne .badOnOff
  1663                              <1>     ;Set on
  1664 0000321F BA01000000          <1>     mov edx, 1
  1665                              <1> .setBreak:
  1666 00003224 B801330000          <1>     mov eax, 3301h  ;Set break
  1667 00003229 CD21                <1>     int 21h
  1668                              <1>     return
    13                              <2> %%_ret:
    14 0000322B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1669                              <1> .badOnOff:
  1670 0000322C 488D157CDCFFFF      <1>     lea rdx, badOnOff
  1671 00003233 B409                <1>     mov ah, 09h
  1672 00003235 CD21                <1>     int 21h
  1673                              <1>     return
    13                              <2> %%_ret:
    14 00003237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1674                              <1> 
  1675                              <1> verify:
  1676 00003238 F60565CEFFFFFF      <1>     test byte [arg1Flg], -1
  1677 0000323F 752D                <1>     jnz .argumentProvided
  1678                              <1>     ;Here we just get the status of break
  1679 00003241 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1680 00003246 CD21                <1>     int 21h
  1681 00003248 88C3                <1>     mov bl, al
  1682 0000324A 488D1573DAFFFF      <1>     lea rdx, verifyIs
  1683 00003251 B409                <1>     mov ah, 09h
  1684 00003253 CD21                <1>     int 21h
  1685 00003255 488D1559DAFFFF      <1>     lea rdx, onMes
  1686 0000325C 488D0D4CDAFFFF      <1>     lea rcx, offMes
  1687 00003263 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1688 00003265 480F44D1            <1>     cmovz rdx, rcx
  1689 00003269 B409                <1>     mov ah, 09h
  1690 0000326B CD21                <1>     int 21h
  1691                              <1>     return
    13                              <2> %%_ret:
    14 0000326D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1692                              <1> .argumentProvided:
  1693 0000326E 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1694 00003272 AD                  <1>     lodsd   ;Read the word
  1695 00003273 89C3                <1>     mov ebx, eax
  1696 00003275 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1697 0000327A C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1698 0000327D 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1699 00003282 7416                <1>     je .maybeOn
  1700 00003284 663D4F46            <1>     cmp ax, "OF"
  1701 00003288 751F                <1>     jne .badOnOff
  1702 0000328A 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1703 0000328F 6681FB4620          <1>     cmp bx, "F "
  1704 00003294 7513                <1>     jne .badOnOff
  1705                              <1>     ;Set off
  1706 00003296 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1707 00003298 EB0A                <1>     jmp short .setVerify
  1708                              <1> .maybeOn:
  1709 0000329A 663D4F4E            <1>     cmp ax, "ON"
  1710 0000329E 7509                <1>     jne .badOnOff
  1711                              <1>     ;Set on
  1712 000032A0 31C0                <1>     xor eax, eax
  1713 000032A2 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1714                              <1> .setVerify:
  1715 000032A4 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1716 000032A6 CD21                <1>     int 21h
  1717                              <1>     return
    13                              <2> %%_ret:
    14 000032A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1718                              <1> .badOnOff:
  1719 000032A9 488D15FFDBFFFF      <1>     lea rdx, badOnOff
  1720 000032B0 B409                <1>     mov ah, 09h
  1721 000032B2 CD21                <1>     int 21h
  1722                              <1>     return
    13                              <2> %%_ret:
    14 000032B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1723                              <1> 
  1724                              <1> rename:
  1725 000032B5 F605E8CDFFFFFF      <1>     test byte [arg1Flg], -1
  1726 000032BC 0F8412ECFFFF        <1>     jz badArgError
  1727 000032C2 F605DECDFFFFFF      <1>     test byte [arg2Flg], -1
  1728 000032C9 0F8405ECFFFF        <1>     jz badArgError    
  1729                              <1>     ;Initialise the variables!
  1730 000032CF 488D3587D3FFFF      <1>     lea rsi, srcSpec
  1731 000032D6 48893584D4FFFF      <1>     mov qword [srcPtr], rsi
  1732 000032DD 488D35FBD3FFFF      <1>     lea rsi, destSpec
  1733 000032E4 4889357ED4FFFF      <1>     mov qword [destPtr], rsi
  1734                              <1>     ;Check the second path is just a filename!
  1735 000032EB 0FB605B6CDFFFF      <1>     movzx eax, byte [arg2Off]
  1736 000032F2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1737 000032F9 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1738 000032FC 488D3D8DD1FFFF      <1>     lea rdi, searchSpec
  1739 00003303 57                  <1>     push rdi
  1740 00003304 E8DE120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1741 00003309 5F                  <1>     pop rdi
  1742 0000330A 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1743 0000330E 0F84C0EBFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1744                              <1> ;Check if a drive specifier has been given
  1745 00003314 0FB6058ACDFFFF      <1>     movzx eax, byte [arg1Off]
  1746 0000331B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1747 00003322 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1748 00003325 66AD                <1>     lodsw   ;Get the first two chars
  1749 00003327 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1750 0000332A 752A                <1>     jne .curDrvSrc
  1751                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1752 0000332C 488B352ED4FFFF      <1>     mov rsi, qword [srcPtr]
  1753 00003333 668906              <1>     mov word [rsi], ax
  1754 00003336 48810520D4FFFF0200- <1>     add qword [srcPtr], 2   
  1754 0000333F 0000                <1>
  1755 00003341 488B3521D4FFFF      <1>     mov rsi, qword [destPtr]
  1756 00003348 668906              <1>     mov word [rsi], ax
  1757 0000334B 48810513D4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1757 00003354 0000                <1>
  1758                              <1> .curDrvSrc:
  1759 00003356 4889FE              <1>     mov rsi, rdi
  1760                              <1> .destScan:
  1761 00003359 AC                  <1>     lodsb   ;Get the char
  1762 0000335A 3A05C9CCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1763 00003360 0F846EEBFFFF        <1>     je badArgError
  1764 00003366 84C0                <1>     test al, al
  1765 00003368 75EF                <1>     jnz .destScan
  1766                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1767 0000336A 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1768 0000336E 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1768 00003377 3F                  <1>
  1769 00003378 B903000000          <1>     mov ecx, 3  ;24 bytes
  1770 0000337D F348AB              <1>     rep stosq
  1771 00003380 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1772 00003381 488D3508D1FFFF      <1>     lea rsi, searchSpec
  1773 00003388 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1774 0000338C B80D290000          <1>     mov eax, 290Dh
  1775 00003391 CD21                <1>     int 21h     
  1776 00003393 50                  <1>     push rax    ;Save the WC signature
  1777 00003394 E891120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1778 00003399 488D3DF0D0FFFF      <1>     lea rdi, searchSpec
  1779 000033A0 E8C8110000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1780 000033A5 4889FE              <1>     mov rsi, rdi
  1781 000033A8 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1782 000033AB 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1783 000033AF B80D290000          <1>     mov eax, 290Dh
  1784 000033B4 CD21                <1>     int 21h
  1785 000033B6 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1786 000033B7 88CC                <1>     mov ah, cl
  1787 000033B9 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1788 000033BC 0F84EB000000        <1>     jz .noWC
  1789 000033C2 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1790 000033C4 0F840AEBFFFF        <1>     je badArgError
  1791 000033CA 488D35BFD0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1792                              <1>     ;Now we check if we have a path to actually handle
  1793 000033D1 4839F3              <1>     cmp rbx, rsi
  1794 000033D4 7444                <1>     je .noPath
  1795 000033D6 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1796 000033DA 488D35AFD0FFFF      <1>     lea rsi, searchSpec
  1797 000033E1 488B3D75D2FFFF      <1>     mov rdi, qword [srcSpec]
  1798 000033E8 56                  <1>     push rsi
  1799 000033E9 E88A100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1800 000033EE 5E                  <1>     pop rsi
  1801 000033EF 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1802 000033F2 8A0531CCFFFF        <1>     mov al, byte [pathSep]
  1803 000033F8 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1804 000033F9 48893D61D3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1805 00003400 488B3D62D3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1806 00003407 E86C100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1807 0000340C 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1808 0000340F AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1809 00003410 48893D52D3FFFF      <1>     mov qword [destPtr], rdi
  1810 00003417 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1811                              <1> .noPath:
  1812                              <1>     ;Now we have where to copy the files to, we can start our work!
  1813 0000341A E834130000          <1>     call setDTA
  1814 0000341F 488D156AD0FFFF      <1>     lea rdx, searchSpec
  1815 00003426 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1816 00003428 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1817 0000342D CD21                <1>     int 21h
  1818 0000342F 0F82B1EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1819                              <1> .wcLoop:
  1820                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1821 00003435 488D35F8CCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1822 0000343C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1823 00003440 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1824 00003445 CD21                <1>     int 21h 
  1825                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1826 00003447 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1827 0000344B 488D3D1FD3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1828 00003452 57                  <1>     push rdi
  1829 00003453 48A5                <1>     movsq
  1830 00003455 66A5                <1>     movsw
  1831 00003457 A4                  <1>     movsb
  1832 00003458 5F                  <1>     pop rdi
  1833 00003459 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1834 0000345D B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1835                              <1> .wcNameMake:
  1836 00003462 AC                  <1>     lodsb   ;Get the char from the source string
  1837 00003463 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1838 00003466 7502                <1>     jne .noStore    ;Dont store the char there
  1839 00003468 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1840                              <1> .noStore:
  1841 0000346A 48FFC7              <1>     inc rdi ;Goto next char position
  1842 0000346D FFC9                <1>     dec ecx
  1843 0000346F 75F1                <1>     jnz .wcNameMake
  1844                              <1> ;renName now has the FCB name for the file we wish to make!
  1845                              <1> ;Now make the two paths!
  1846 00003471 488D35BCCCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1847 00003478 488B3DE2D2FFFF      <1>     mov rdi, qword [srcPtr]
  1848 0000347F E8F40F0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1849 00003484 488D35E6D2FFFF      <1>     lea rsi, renName
  1850 0000348B 488B3DD7D2FFFF      <1>     mov rdi, qword [destPtr]
  1851 00003492 E8FA100000          <1>     call FCBToAsciiz
  1852 00003497 488D15BFD1FFFF      <1>     lea rdx, srcSpec
  1853 0000349E E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1854 000034A3 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1855 000034A8 CD21                <1>     int 21h
  1856 000034AA 7389                <1>     jnc .wcLoop     ;And process it too!
  1857                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000034AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1858                              <1> .noWC:
  1859 000034AD E878110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1860 000034B2 0FB605EFCBFFFF      <1>     movzx eax, byte [arg2Off]
  1861 000034B9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1862 000034C0 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1863 000034C3 488B3D9FD2FFFF      <1>     mov rdi, qword [destPtr]    
  1864 000034CA E818110000          <1>     call cpDelimPathToBufz
  1865 000034CF 488D15BACFFFFF      <1>     lea rdx, searchSpec
  1866 000034D6 E807000000          <1>     call .ren
  1867                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034DB 73(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1868 000034DD E904EAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1869                              <1> .ren:
  1870 000034E2 488D3DF6D1FFFF      <1>     lea rdi, destSpec
  1871 000034E9 B800560000          <1>     mov eax, 5600h
  1872 000034EE CD21                <1>     int 21h
  1873                              <1>     return
    13                              <2> %%_ret:
    14 000034F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1874                              <1> 
  1875                              <1> touch:
  1876                              <1> ;Temporarily used to create files
  1877 000034F1 F605ACCBFFFFFF      <1>     test byte [arg1Flg], -1
  1878 000034F8 0F84D6E9FFFF        <1>     jz badArgError
  1879 000034FE E827110000          <1>     call buildCommandPath
  1880 00003503 488D1586CFFFFF      <1>     lea rdx, searchSpec
  1881 0000350A B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1882 0000350F 31C9                <1>     xor ecx, ecx
  1883 00003511 CD21                <1>     int 21h
  1884 00003513 721D                <1>     jc .touch1
  1885                              <1> .touchClose:
  1886 00003515 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1887 00003518 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1888 0000351D CD2F                <1>     int 2fh
  1889 0000351F 89C1                <1>     mov ecx, eax    ;Move the time here
  1890 00003521 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1891 00003523 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1892 00003528 CD21                <1>     int 21h
  1893 0000352A B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1894 0000352F CD21                <1>     int 21h
  1895                              <1>     return
    13                              <2> %%_ret:
    14 00003531 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1896                              <1> .touch1:
  1897 00003532 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1898 00003534 7509                <1>     jne .touchError ;If not, this is a proper error!
  1899 00003536 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1900 0000353B CD21                <1>     int 21h
  1901 0000353D 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1902                              <1> .touchError:
  1903 0000353F 3C03                <1>     cmp al, errPnf
  1904 00003541 0F848DE9FFFF        <1>     je badArgError
  1905 00003547 3C02                <1>     cmp al, errFnf
  1906 00003549 0F84A0E9FFFF        <1>     je badFnf
  1907 0000354F E965E9FFFF          <1>     jmp badAccError
  1908                              <1>     
  1909                              <1> 
  1910                              <1> join:
  1911                              <1> ;Mock join command, to test join. Make an external command.
  1912                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1913 00003554 F605AF000000FF      <1>     test byte [.joinOn], -1
  1914 0000355B 743D                <1>     jz .okJoin
  1915                              <1> .joindisable:
  1916 0000355D B800520000          <1>     mov eax, 5200h  
  1917 00003562 CD21                <1>     int 21h
  1918                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1919 00003564 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1920 00003569 CD2A                <1>     int 2Ah
  1921 0000356B 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1922 0000356F 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1923 00003573 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1924 00003579 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1925 0000357C C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1926 00003580 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1927 00003583 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1928 00003588 CD2A                <1>     int 2Ah
  1929 0000358A C6057900000000      <1>     mov byte [.joinOn], 0
  1930 00003591 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1931 00003598 EB45                <1>     jmp short .joinExit
  1932                              <1> .okJoin:
  1933 0000359A C60569000000FF      <1>     mov byte [.joinOn], -1
  1934 000035A1 B800520000          <1>     mov eax, 5200h  
  1935 000035A6 CD21                <1>     int 21h
  1936 000035A8 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1937 000035AC 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1938                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1939 000035B0 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1940 000035B5 CD2A                <1>     int 2Ah
  1941 000035B7 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1942 000035BD 4889DF              <1>     mov rdi, rbx
  1943 000035C0 488D3544000000      <1>     lea rsi, .joinPath
  1944 000035C7 B90C000000          <1>     mov ecx, .joinPathL
  1945 000035CC F3A4                <1>     rep movsb   ;Copy chars over
  1946 000035CE FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1947 000035D1 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1948 000035D6 CD2A                <1>     int 2Ah
  1949 000035D8 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1950                              <1> .joinExit:
  1951 000035DF B800090000          <1>     mov eax, 0900h
  1952 000035E4 CD21                <1>     int 21h
  1953                              <1>     return
    13                              <2> %%_ret:
    14 000035E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1954 000035E7 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1954 000035F0 61626C65640D0A24    <1>
  1955 000035F8 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1955 00003601 7361626C65640D0A24  <1>
  1956 0000360A 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1957 0000360B 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1957 00003614 535400              <1>
  1958                              <1> .joinPathL  equ $ - .joinPath 
  1959                              <1> 
  1960                              <1> subst:
  1961                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1962                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1963 00003617 F605D3000000FF      <1>     test byte [.substOn], -1
  1964 0000361E 7443                <1>     jz .okSubst
  1965                              <1> .substdisable:
  1966 00003620 B800520000          <1>     mov eax, 5200h  
  1967 00003625 CD21                <1>     int 21h
  1968                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1969 00003627 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1970 0000362C CD2A                <1>     int 2Ah
  1971 0000362E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1972 00003632 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1973 00003639 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1974 0000363F C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1975 00003642 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1976 00003646 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1977 0000364C B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1978 00003651 CD2A                <1>     int 2Ah
  1979 00003653 C6059700000000      <1>     mov byte [.substOn], 0
  1980 0000365A 488D157D000000      <1>     lea rdx, .substDisableMsg
  1981 00003661 EB61                <1>     jmp short .substExit
  1982                              <1> .okSubst:
  1983 00003663 C60587000000FF      <1>     mov byte [.substOn], -1
  1984 0000366A B800520000          <1>     mov eax, 5200h  
  1985 0000366F CD21                <1>     int 21h
  1986 00003671 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1987 00003676 CD2A                <1>     int 2Ah
  1988 00003678 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1989 0000367C 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1990 00003683 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1991 00003687 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1992 0000368E 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1993 00003692 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1994                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1995 00003699 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1996 0000369F 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1997 000036A5 4889DF              <1>     mov rdi, rbx
  1998 000036A8 488D3543000000      <1>     lea rsi, .substPath
  1999 000036AF B90C000000          <1>     mov ecx, .substPathL
  2000 000036B4 F3A4                <1>     rep movsb   ;Copy chars over
  2001 000036B6 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  2002 000036BB CD2A                <1>     int 2Ah
  2003 000036BD 488D1508000000      <1>     lea rdx, .substEnableMsg
  2004                              <1> .substExit:
  2005 000036C4 B800090000          <1>     mov eax, 0900h
  2006 000036C9 CD21                <1>     int 21h
  2007                              <1>     return
    13                              <2> %%_ret:
    14 000036CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2008 000036CC 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  2008 000036D5 6E61626C65640D0A24  <1>
  2009 000036DE 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  2009 000036E7 697361626C65640D0A- <1>
  2009 000036F0 24                  <1>
  2010 000036F1 00                  <1> .substOn: db 0    ;Var to indicate we are on
  2011 000036F2 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  2011 000036FB 535400              <1>
  2012                              <1> .substPathL  equ $ - .substPath 
  2013                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  2014                              <1> truename:
  2015 000036FE F6059FC9FFFFFF      <1>     test byte [arg1Flg], -1
  2016 00003705 0F84C9E7FFFF        <1>     jz badArgError
  2017 0000370B E81A0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2018 00003710 488D3579CDFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  2019 00003717 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  2020 0000371A B800600000          <1>     mov eax, 6000h  ;TRUENAME
  2021 0000371F CD21                <1>     int 21h
  2022 00003721 730D                <1>     jnc .writePath
  2023 00003723 3C02                <1>     cmp al, errFnf
  2024 00003725 0F84B2E7FFFF        <1>     je badFileError
  2025 0000372B E992E7FFFF          <1>     jmp badParamError
  2026                              <1> .writePath:
  2027 00003730 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  2028 00003733 B9FFFFFFFF          <1>     mov ecx, -1
  2029 00003738 30C0                <1>     xor al, al
  2030 0000373A F2AE                <1>     repne scasb     ;Get the new len
  2031 0000373C F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  2032 0000373E FFC9                <1>     dec ecx
  2033 00003740 BB01000000          <1>     mov ebx, 01
  2034 00003745 B440                <1>     mov ah, 40h
  2035 00003747 CD21                <1>     int 21h
  2036 00003749 E8160B0000          <1>     call printCRLF
  2037                              <1>     return
    13                              <2> %%_ret:
    14 0000374E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2038                              <1> 
  2039                              <1> volume:
  2040                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2041 0000374F F60551C9FFFFFF      <1>     test byte [arg2Flg], -1
  2042 00003756 0F8578E7FFFF        <1>     jnz badArgError
  2043 0000375C F60541C9FFFFFF      <1>     test byte [arg1Flg], -1
  2044 00003763 7507                <1>     jnz .notCurrentDrive
  2045 00003765 E8090D0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2046 0000376A EB31                <1>     jmp short .dirEP
  2047                              <1> .notCurrentDrive:
  2048 0000376C E8B90E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2049 00003771 488D3518CDFFFF      <1>     lea rsi, searchSpec
  2050 00003778 E8390D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2051 0000377D 66AD                <1>     lodsw                   ;Get this word
  2052 0000377F 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2053 00003782 0F854CE7FFFF        <1>     jne badArgError
  2054 00003788 8A0518C9FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2055 0000378E A8FF                <1>     test al, -1
  2056 00003790 0F8535E7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2057 00003796 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2058 0000379B FFC8                <1>     dec eax ;Convert to 0 based number
  2059                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2060 0000379D E8B10F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2061 000037A2 488D1584CEFFFF      <1>     lea rdx, volFcb
  2062 000037A9 FFC0                <1>     inc eax ;Get 1 based drive number
  2063 000037AB 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2064 000037AD 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2065 000037B0 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2066 000037B5 CD21                <1>     int 21h
  2067 000037B7 50                  <1>     push rax
  2068                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2069 000037B8 488D15C2D0FFFF      <1>     lea rdx, crlf
  2070 000037BF B409                <1>     mov ah, 09h
  2071 000037C1 CD21                <1>     int 21h
  2072 000037C3 488D1577D3FFFF      <1>     lea rdx, volMes
  2073 000037CA B409                <1>     mov ah, 09h
  2074 000037CC CD21                <1>     int 21h
  2075 000037CE 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2076 000037D0 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2077 000037D3 B402                <1>     mov ah, 02h
  2078 000037D5 CD21                <1>     int 21h
  2079 000037D7 58                  <1>     pop rax
  2080 000037D8 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2081 000037DA 7409                <1>     jz .volIDOk
  2082 000037DC 488D1575D3FFFF      <1>     lea rdx, volNo
  2083 000037E3 EB19                <1>     jmp short .volEndPrint
  2084                              <1> .volIDOk:
  2085 000037E5 488D1567D3FFFF      <1>     lea rdx, volOk
  2086 000037EC B409                <1>     mov ah, 09h
  2087 000037EE CD21                <1>     int 21h
  2088 000037F0 C60532C9FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2089 000037F7 488D1520C9FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2090                              <1> .volEndPrint:
  2091 000037FE B409                <1>     mov ah, 09h
  2092 00003800 CD21                <1>     int 21h
  2093 00003802 488D1578D0FFFF      <1>     lea rdx, crlf
  2094 00003809 B409                <1>     mov ah, 09h
  2095 0000380B CD21                <1>     int 21h
  2096                              <1>     return
    13                              <2> %%_ret:
    14 0000380D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2097                              <1> 
  2098                              <1> version:
  2099 0000380E 488D156CD0FFFF      <1>     lea rdx, crlf
  2100 00003815 B409                <1>     mov ah, 09h
  2101 00003817 CD21                <1>     int 21h
  2102 00003819 488D150FD3FFFF      <1>     lea rdx, dosVer
  2103 00003820 B409                <1>     mov ah, 09h
  2104 00003822 CD21                <1>     int 21h
  2105 00003824 E80C000000          <1>     call .printVersionNumber
  2106 00003829 488D1551D0FFFF      <1>     lea rdx, crlf
  2107 00003830 B409                <1>     mov ah, 09h
  2108 00003832 CD21                <1>     int 21h
  2109                              <1>     return
    13                              <2> %%_ret:
    14 00003834 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2110                              <1> .printVersionNumber:
  2111 00003835 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2112 00003837 CD21                <1>     int 21h
  2113 00003839 50                  <1>     push rax
  2114 0000383A 0FB6C0              <1>     movzx eax, al
  2115 0000383D E8210E0000          <1>     call printDecimalWord
  2116 00003842 B22E                <1>     mov dl, "."
  2117 00003844 B402                <1>     mov ah, 02h
  2118 00003846 CD21                <1>     int 21h
  2119 00003848 58                  <1>     pop rax
  2120 00003849 0FB6C4              <1>     movzx eax, ah
  2121 0000384C E8120E0000          <1>     call printDecimalWord
  2122                              <1>     return
    13                              <2> %%_ret:
    14 00003851 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2123                              <1> 
  2124                              <1> 
  2125                              <1> memory:
  2126 00003852 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  2127 00003857 CD21                <1>     int 21h
  2128 00003859 4885DB              <1>     test rbx, rbx
  2129 0000385C 7510                <1>     jnz .sysvarsOK
  2130 0000385E 488D15B1D5FFFF      <1>     lea rdx, memBad0
  2131 00003865 B409                <1>     mov ah, 09h
  2132 00003867 CD21                <1>     int 21h
  2133 00003869 E9D50E0000          <1>     jmp freezePC.altEP
  2134                              <1> .sysvarsOK:
  2135                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2136                              <1>     ; and rcx to store Application memory
  2137 0000386E 31F6                <1>     xor esi, esi
  2138 00003870 31FF                <1>     xor edi, edi
  2139 00003872 31ED                <1>     xor ebp, ebp
  2140 00003874 31C9                <1>     xor ecx, ecx
  2141 00003876 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2142 0000387A 488B1B              <1>     mov rbx, qword [rbx]
  2143                              <1> .memLp:
  2144 0000387D 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2145 00003880 7409                <1>     je .validMCB
  2146 00003882 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2147 00003885 0F8501010000        <1>     jne .badMCBFound
  2148                              <1> .validMCB:
  2149 0000388B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2150 0000388E 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2151 00003892 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2152 0000389A 7505                <1>     jne .notDOS
  2153 0000389C 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2154 0000389F EB21                <1>     jmp short .gotoNext
  2155                              <1> .notDOS:
  2156 000038A1 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2157 000038A9 7505                <1>     jne .notFree
  2158 000038AB 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2159 000038AE EB12                <1>     jmp short .gotoNext
  2160                              <1> .notFree:
  2161 000038B0 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2162 000038B8 7505                <1>     jne .notHole
  2163 000038BA 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2164 000038BD EB03                <1>     jmp short .gotoNext
  2165                              <1> .notHole:
  2166 000038BF 4801C1              <1>     add rcx, rax    ;Add to Application count
  2167                              <1> .gotoNext:
  2168 000038C2 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2169 000038C5 7407                <1>     je .endOfWalk
  2170 000038C7 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2171 000038CC EBAF                <1>     jmp short .memLp
  2172                              <1> .endOfWalk:
  2173                              <1>     
  2174 000038CE 488D15A2D4FFFF      <1>     lea rdx, memDOS
  2175 000038D5 B409                <1>     mov ah, 09h
  2176 000038D7 CD21                <1>     int 21h
  2177 000038D9 4889F0              <1>     mov rax, rsi
  2178 000038DC E89D000000          <1>     call .mcbPrintAmount
  2179 000038E1 488D1527D5FFFF      <1>     lea rdx, memByte
  2180 000038E8 B409                <1>     mov ah, 09h
  2181 000038EA CD21                <1>     int 21h
  2182                              <1> 
  2183 000038EC 4885ED              <1>     test rbp, rbp
  2184 000038EF 741E                <1>     jz .skipHole
  2185 000038F1 488D15CBD4FFFF      <1>     lea rdx, memHole
  2186 000038F8 B409                <1>     mov ah, 09h
  2187 000038FA CD21                <1>     int 21h
  2188 000038FC 4889E8              <1>     mov rax, rbp
  2189 000038FF E87A000000          <1>     call .mcbPrintAmount
  2190 00003904 488D1504D5FFFF      <1>     lea rdx, memByte
  2191 0000390B B409                <1>     mov ah, 09h
  2192 0000390D CD21                <1>     int 21h
  2193                              <1> .skipHole:
  2194                              <1> 
  2195 0000390F 488D1587D4FFFF      <1>     lea rdx, memApp
  2196 00003916 B409                <1>     mov ah, 09h
  2197 00003918 CD21                <1>     int 21h
  2198 0000391A 4889C8              <1>     mov rax, rcx
  2199 0000391D E85C000000          <1>     call .mcbPrintAmount
  2200 00003922 488D15E6D4FFFF      <1>     lea rdx, memByte
  2201 00003929 B409                <1>     mov ah, 09h
  2202 0000392B CD21                <1>     int 21h
  2203                              <1> 
  2204 0000392D 488D15B5D4FFFF      <1>     lea rdx, memFree
  2205 00003934 B409                <1>     mov ah, 09h
  2206 00003936 CD21                <1>     int 21h
  2207 00003938 4889F8              <1>     mov rax, rdi
  2208 0000393B E83E000000          <1>     call .mcbPrintAmount
  2209 00003940 488D15C8D4FFFF      <1>     lea rdx, memByte
  2210 00003947 B409                <1>     mov ah, 09h
  2211 00003949 CD21                <1>     int 21h
  2212                              <1> 
  2213 0000394B 488D15FFD3FFFF      <1>     lea rdx, memSys
  2214 00003952 B409                <1>     mov ah, 09h
  2215 00003954 CD21                <1>     int 21h
  2216 00003956 4889F0              <1>     mov rax, rsi
  2217 00003959 4801F8              <1>     add rax, rdi
  2218 0000395C 4801C8              <1>     add rax, rcx
  2219 0000395F 4801E8              <1>     add rax, rbp
  2220 00003962 E817000000          <1>     call .mcbPrintAmount
  2221 00003967 488D15A1D4FFFF      <1>     lea rdx, memByte
  2222 0000396E B409                <1>     mov ah, 09h
  2223 00003970 CD21                <1>     int 21h
  2224                              <1> 
  2225 00003972 488D1508CFFFFF      <1>     lea rdx, crlf
  2226 00003979 B409                <1>     mov ah, 09h
  2227 0000397B CD21                <1>     int 21h
  2228                              <1>     return
    13                              <2> %%_ret:
    14 0000397D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2229                              <1> 
  2230                              <1> .mcbPrintAmount:
  2231 0000397E 51                  <1>     push rcx
  2232 0000397F 56                  <1>     push rsi
  2233 00003980 57                  <1>     push rdi
  2234 00003981 55                  <1>     push rbp
  2235 00003982 E8DC0C0000          <1>     call printDecimalWord
  2236 00003987 5D                  <1>     pop rbp
  2237 00003988 5F                  <1>     pop rdi
  2238 00003989 5E                  <1>     pop rsi
  2239 0000398A 59                  <1>     pop rcx
  2240                              <1>     return
    13                              <2> %%_ret:
    14 0000398B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2241                              <1> .badMCBFound:
  2242 0000398C 488D15C3D4FFFF      <1>     lea rdx, memBad2
  2243 00003993 B409                <1>     mov ah, 09h
  2244 00003995 CD21                <1>     int 21h
  2245 00003997 E9A70D0000          <1>     jmp freezePC.altEP
  2246                              <1> 
  2247                              <1> type:
  2248 0000399C F60501C7FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2249 000039A3 0F842BE5FFFF        <1>     jz badArgError
  2250 000039A9 F605F7C6FFFFFF      <1>     test byte [arg2Flg], -1
  2251 000039B0 0F851EE5FFFF        <1>     jnz badArgError         ;If this set, error
  2252 000039B6 4C8B0552C6FFFF      <1>     mov r8, [pspPtr]
  2253 000039BD 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2254 000039C4 0FB605DAC6FFFF      <1>     movzx eax, byte [arg1Off]
  2255 000039CB 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2256 000039CE 803E0D              <1>     cmp byte [rsi], CR
  2257 000039D1 0F84FDE4FFFF        <1>     je badArgError
  2258 000039D7 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2259 000039DB 750F                <1>     jne .noDrive
  2260 000039DD 0FB605C2C6FFFF      <1>     movzx eax, byte [arg1FCBret]
  2261 000039E4 3CFF                <1>     cmp al, -1
  2262 000039E6 0F84DFE4FFFF        <1>     je badDriveError
  2263                              <1> .noDrive:
  2264                              <1>     ;Now we open the provided file
  2265 000039EC E8390C0000          <1>     call buildCommandPath
  2266 000039F1 488D1598CAFFFF      <1>     lea rdx, searchSpec
  2267 000039F8 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2268 000039FD CD21                <1>     int 21h
  2269 000039FF 0F82D8E4FFFF        <1>     jc badFileError
  2270 00003A05 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2271 00003A0C 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2272                              <1> .lp:
  2273 00003A0F B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2274 00003A14 B43F                <1>     mov ah, 3Fh ;Read handle
  2275 00003A16 CD21                <1>     int 21h
  2276 00003A18 89C1                <1>     mov ecx, eax
  2277 00003A1A 67E317              <1>     jecxz .exit
  2278 00003A1D 53                  <1>     push rbx    ;Save the original in handle
  2279 00003A1E BB01000000          <1>     mov ebx, 1  ;STDOUT
  2280 00003A23 B440                <1>     mov ah, 40h
  2281 00003A25 CD21                <1>     int 21h
  2282 00003A27 5B                  <1>     pop rbx ;Get back the original read handle
  2283 00003A28 720F                <1>     jc .exitBad
  2284 00003A2A 39C8                <1>     cmp eax, ecx
  2285 00003A2C 74E1                <1>     je .lp
  2286 00003A2E FFC9                <1>     dec ecx ;One less for a ^Z
  2287 00003A30 39C8                <1>     cmp eax, ecx
  2288 00003A32 7505                <1>     jne .exitBad
  2289                              <1> .exit:
  2290 00003A34 B43E                <1>     mov ah, 3Eh ;Close handle
  2291 00003A36 CD21                <1>     int 21h
  2292                              <1>     return
    13                              <2> %%_ret:
    14 00003A38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2293                              <1> .exitBad:
  2294                              <1>     ;If it is a char device, don't print an error
  2295 00003A39 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2296 00003A3E BB01000000          <1>     mov ebx, 1
  2297 00003A43 CD21                <1>     int 21h
  2298 00003A45 F6C280              <1>     test dl, devCharDev
  2299                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A48 75(38)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2300 00003A4A E92AE4FFFF          <1>     jmp badDiskFull
  2301                              <1> 
  2302                              <1> exit:
  2303 00003A4F F6053EC6FFFF01      <1>     test byte [statFlg1], permaShell
  2304 00003A56 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2305 00003A58 F60535C6FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2306 00003A5F 0F85CFE0FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2307                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 00003A65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2308                              <1> .ouch:
  2309 00003A66 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2310 00003A6B CD21                <1>     int 21h
  2311                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003A6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2312                              <1> 
  2313                              <1> launchChild:
  2314                              <1>     ;We execute an external command here.
  2315                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2316                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2317                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2318                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2319                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2320 00003A6E E8E00C0000          <1>     call setDTA         
  2321                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2322 00003A73 488D3D6DC8FFFF      <1>     lea rdi, cmdPathSpec
  2323 00003A7A 4889FE              <1>     mov rsi, rdi
  2324 00003A7D B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2325 00003A82 CD2F                <1>     int 2fh
  2326 00003A84 E8E40A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2327 00003A89 4889FE              <1>     mov rsi, rdi    ;Source here
  2328 00003A8C 488D3D73C6FFFF      <1>     lea rdi, cmdFcb
  2329 00003A93 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2330 00003A98 CD21                <1>     int 21h
  2331 00003A9A 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2332 00003A9C 0F8562E4FFFF        <1>     jnz badCmdError
  2333 00003AA2 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2334                              <1> .pathLoop:
  2335 00003AA5 488D3563C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2336 00003AAC 488D3D1DD4FFFF      <1>     lea rdi, extStr
  2337 00003AB3 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2338                              <1> .extLp:
  2339 00003AB8 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2340 00003AB9 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2341 00003ABE F3A6                <1>     rep cmpsb   ;Compare the two strings
  2342 00003AC0 5E                  <1>     pop rsi
  2343 00003AC1 85C9                <1>     test ecx, ecx
  2344 00003AC3 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2345 00003AC5 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2346 00003AC8 FFCA                <1>     dec edx         ;Else one less extension type to check
  2347 00003ACA 75EC                <1>     jnz .extLp
  2348                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2349                              <1>     ;If not, error.
  2350 00003ACC B903000000          <1>     mov ecx, 3
  2351 00003AD1 4889F7              <1>     mov rdi, rsi
  2352 00003AD4 B020                <1>     mov al, SPC
  2353 00003AD6 F3AE                <1>     rep scasb   
  2354 00003AD8 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2355 00003ADA 0F8524E4FFFF        <1>     jnz badCmdError    ;If not, error!
  2356                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2357 00003AE0 488D35E9D3FFFF      <1>     lea rsi, extStr
  2358 00003AE7 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2359                              <1> .extSrchLp:
  2360 00003AEC 488D3D1CC6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2361 00003AF3 B903000000          <1>     mov ecx, 3
  2362 00003AF8 F3A4                <1>     rep movsb   ;Copy the extension over!
  2363 00003AFA E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2364 00003AFF 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2365 00003B01 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2366 00003B03 75E7                <1>     jnz .extSrchLp
  2367                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2368                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2369                              <1> ; by setting the fcb extension back to all spaces.
  2370 00003B05 488D3D03C6FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2371 00003B0C B903000000          <1>     mov ecx, 3
  2372 00003B11 B020                <1>     mov al, SPC
  2373 00003B13 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2374 00003B15 EB70                <1>     jmp short .pathHandle
  2375                              <1> .extFnd:
  2376                              <1> ;Here if the file had the right extension.
  2377 00003B17 E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2378 00003B1C 7269                <1>     jc .pathHandle
  2379                              <1> .extSrchFnd:
  2380                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2381                              <1> ; a BAT. If it is, separate handling!
  2382 00003B1E 803DEAC5FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2383 00003B25 0F8462E0FFFF        <1>     je batLaunch
  2384 00003B2B 488D1D0FC6FFFF      <1>     lea rbx, launchBlock
  2385 00003B32 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2386 00003B36 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2387 00003B39 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2388 00003B40 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2389 00003B44 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2390 00003B48 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2391 00003B4C 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2392 00003B50 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2393 00003B54 488D158CC7FFFF      <1>     lea rdx, cmdPathSpec
  2394 00003B5B B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2395 00003B60 CD21                <1>     int 21h
  2396                              <1> ;If the program failed to start, verify why!
  2397 00003B62 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2398 00003B67 31DB                <1>     xor ebx, ebx
  2399 00003B69 CD21                <1>     int 21h
  2400 00003B6B 6689059BC4FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2401 00003B72 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2402 00003B74 0F843FE3FFFF        <1>     je badAccError
  2403 00003B7A 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2404 00003B7C 0F84B60B0000        <1>     je freezePC
  2405 00003B82 E97DE3FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2406                              <1> .pathHandle:        
  2407                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2408                              <1> ;al has error code!
  2409 00003B87 4885ED              <1>     test rbp, rbp
  2410 00003B8A 0F85A3000000        <1>     jnz .pathReentry
  2411                              <1> ;Now check if the command we recieved included an absolute path.
  2412                              <1> ;If so, we don't do path substitution and just fail at this point
  2413 00003B90 488D3550C7FFFF      <1>     lea rsi, cmdPathSpec
  2414 00003B97 66AD                <1>     lodsw   ;Get the first two chars
  2415 00003B99 3A058AC4FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2416 00003B9F 0F845FE3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2417 00003BA5 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2418 00003BA7 7412                <1>     je .pathGetEnv
  2419 00003BA9 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2420 00003BAC 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2421 00003BAE AC                  <1>     lodsb   ;Get the third char
  2422 00003BAF 3A0574C4FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2423 00003BB5 0F8449E3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2424                              <1> .pathGetEnv:
  2425                              <1> ;Now get a pointer to the environment and search for PATH=
  2426                              <1> ;We only take the final portion of the path and add it to each path componant
  2427                              <1> ;This agrees with DOS 3.3
  2428 00003BBB E8F40B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2429 00003BC0 0F843EE3FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2430                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2431                              <1>     ;Now we know we dont have to keep track of chars!!
  2432 00003BC6 488D3D25D3FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2433 00003BCD E83C0C0000          <1>     call searchForEnvVar
  2434 00003BD2 0F822CE3FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2435 00003BD8 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2436 00003BDB 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2437                              <1> .pathRejoin:
  2438 00003BE2 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2439 00003BE5 0F8419E3FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2440 00003BEB 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2441 00003BEE 488D3D9BC8FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2442                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2443                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2444                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2445                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2446 00003BF5 E8D7090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2447 00003BFA 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2448 00003BFD 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2449 00003C00 48FFCF              <1>     dec rdi ;Point to the null terminator
  2450 00003C03 8A0520C4FFFF        <1>     mov al, byte [pathSep]
  2451 00003C09 3847FF              <1>     cmp byte [rdi - 1], al
  2452 00003C0C 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2453 00003C0E AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2454                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2455 00003C0F 488D35F1C4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2456 00003C16 E876090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2457 00003C1B 488D356EC8FFFF      <1>     lea rsi, searchSpec 
  2458 00003C22 488D3DBEC6FFFF      <1>     lea rdi, cmdPathSpec
  2459 00003C29 E84A080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2460 00003C2E E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2461                              <1> .pathReentry:
  2462 00003C33 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2463 00003C37 0F84C7E2FFFF        <1>     je badCmdError
  2464                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2465                              <1> ;Not really a big deal...
  2466                              <1>     ;cmp al, errBadDrv
  2467                              <1>     ;jne .pathDrvOk
  2468                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2469                              <1>     ;mov eax, 0900h
  2470                              <1>     ;int 21h
  2471                              <1> ;.pathDrvOk:
  2472 00003C3D 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2473 00003C40 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2474 00003C43 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2475                              <1> 
  2476                              <1> .prepAndSearch:
  2477                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2478                              <1> ;cmdPathSpec and null terminates. 
  2479                              <1> ;Input: cmdFcb name + ext setup. 
  2480                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2481                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2482 00003C45 51                  <1>     push rcx
  2483 00003C46 56                  <1>     push rsi
  2484 00003C47 57                  <1>     push rdi
  2485 00003C48 488D3D98C6FFFF      <1>     lea rdi, cmdPathSpec 
  2486 00003C4F 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2487 00003C52 E816090000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2488 00003C57 807F013A            <1>     cmp byte [rdi + 1], ":"
  2489 00003C5B 7507                <1>     jne .notdriveRel
  2490 00003C5D 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2491                              <1> .notdriveRel:
  2492 00003C64 488D359CC4FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2493 00003C6B E821090000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2494 00003C70 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2495 00003C75 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2496 00003C77 CD21                <1>     int 21h
  2497 00003C79 5F                  <1>     pop rdi
  2498 00003C7A 5E                  <1>     pop rsi
  2499 00003C7B 59                  <1>     pop rcx
  2500                              <1>     return
    13                              <2> %%_ret:
    14 00003C7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2501                              <1> 
  2502                              <1> set:
  2503 00003C7D F60520C4FFFFFF      <1>     test byte [arg1Flg], -1
  2504 00003C84 7539                <1>     jnz .editEnv
  2505                              <1>     ;Here we just print the environment.
  2506 00003C86 E8290B0000          <1>     call checkEnvGoodAndGet 
  2507 00003C8B 0F841FE2FFFF        <1>     jz badEnvSpaceError
  2508                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2509 00003C91 4889F7              <1>     mov rdi, rsi
  2510 00003C94 4889F2              <1>     mov rdx, rsi
  2511                              <1> .findLp:
  2512 00003C97 B9FFFFFFFF          <1>     mov ecx, -1
  2513 00003C9C 31C0                <1>     xor eax, eax
  2514                              <1> .scanLp:
  2515 00003C9E F2AE                <1>     repne scasb
  2516 00003CA0 75FC                <1>     jne .scanLp
  2517 00003CA2 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2518                              <1>     ;Else, we now print this environment variable and CRLF it
  2519                              <1>     ;rdx points to the start of the string aleady
  2520                              <1>     ;ecx has the bytes to print
  2521 00003CA4 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2522 00003CA9 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2523 00003CAE CD21                <1>     int 21h
  2524 00003CB0 E8AF050000          <1>     call printCRLF
  2525 00003CB5 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2526                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003CB8 74(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2527 00003CBA 4889FA              <1>     mov rdx, rdi   
  2528 00003CBD EBD8                <1>     jmp short .findLp
  2529                              <1> .editEnv:
  2530 00003CBF E8F00A0000          <1>     call checkEnvGoodAndGet
  2531 00003CC4 0F84E6E1FFFF        <1>     jz badEnvSpaceError
  2532 00003CCA 0FB605D4C3FFFF      <1>     movzx eax, byte [arg1Off]
  2533 00003CD1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2534 00003CD8 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2535                              <1> .altEp:
  2536 00003CDB 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2537 00003CDE B00D                <1>     mov al, CR              ;Search for the CR
  2538 00003CE0 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2539 00003CE8 89CB                <1>     mov ebx, ecx            ;Save this count 
  2540 00003CEA 53                  <1>     push rbx                ;Save this count on the stack too!
  2541 00003CEB F2AE                <1>     repne scasb             ;Now get the length of this env string
  2542 00003CED 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2543 00003CEF 66891D9CCAFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2544 00003CF6 59                  <1>     pop rcx                 ;Get the char count back!
  2545 00003CF7 89CB                <1>     mov ebx, ecx            
  2546 00003CF9 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2547 00003CFC B03D                <1>     mov al, "="             ;Scan for an equals sign
  2548 00003CFE F2AE                <1>     repne scasb
  2549 00003D00 0F85A1E1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2550 00003D06 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2551 00003D08 66891D85CAFFFF      <1>     mov word [envVarNamSz], bx
  2552 00003D0F 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2553 00003D12 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2554 00003D14 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2555 00003D15 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2556 00003D18 E8F10A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2557 00003D1D 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2558 00003D1F E8180B0000          <1>     call envFree            ;Free the var in rsi
  2559                              <1> .editNewEnv:
  2560 00003D24 E84C0B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2561 00003D29 E86C0B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2562 00003D2E 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2563 00003D2F 31C0                <1>     xor eax, eax            ;Prepare null length!
  2564 00003D31 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2565 00003D37 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2566 00003D3A 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2567 00003D3C FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2568 00003D3E 663B0D4DCAFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2569 00003D45 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2570                              <1> .reallocTry:
  2571                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2572                              <1>     ; we proceed with the environment size.
  2573 00003D47 E8630B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2574 00003D4C 7319                <1>     jnc .reallocOk
  2575 00003D4E 0F845CE1FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2576                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2577                              <1>     ; partially the variable into the env. If so we do that. If the name
  2578                              <1>     ; cannot fit, we don't bother
  2579                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2580 00003D54 663B0D39CAFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2581                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003D5B 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003D5D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2582 00003D5E E84DE1FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2583 00003D63 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2584 00003D65 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2585                              <1> .reallocOk:
  2586                              <1>     ;Here we have all the space to just copy the full path
  2587 00003D67 0FB70D24CAFFFF      <1>     movzx ecx, word [envVarSz]
  2588                              <1> .nameCp:
  2589                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2590                              <1> ;Always enough memory for name= here
  2591 00003D6E AC                  <1>     lodsb
  2592 00003D6F E827070000          <1>     call ucChar
  2593 00003D74 AA                  <1>     stosb
  2594 00003D75 66FFC9              <1>     dec cx      ;Always decrement this count
  2595 00003D78 3C3D                <1>     cmp al, "="
  2596 00003D7A 75F2                <1>     jne .nameCp
  2597                              <1> .exitNameCp:
  2598 00003D7C AC                  <1>     lodsb
  2599 00003D7D 3C0D                <1>     cmp al, CR
  2600 00003D7F 7405                <1>     je .exitCp
  2601 00003D81 AA                  <1>     stosb
  2602 00003D82 FFC9                <1>     dec ecx
  2603 00003D84 75F6                <1>     jnz .exitNameCp
  2604                              <1> .exitCp:
  2605 00003D86 31C0                <1>     xor eax, eax
  2606 00003D88 66AB                <1>     stosw   ;Store the final null word
  2607                              <1>     return
    13                              <2> %%_ret:
    14 00003D8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2608                              <1> .delEnvVar:
  2609                              <1>     ;rsi -> Start of the envvar name in user buffer
  2610 00003D8B 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2611 00003D8E E87B0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2612 00003D93 7205                <1>     jc .delEnvVarSkip
  2613 00003D95 E8A20A0000          <1>     call envFree    ;Free the env var at rsi
  2614                              <1> .delEnvVarSkip:
  2615 00003D9A F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2616                              <1>     return
    13                              <2> %%_ret:
    14 00003D9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2617                              <1> 
  2618                              <1> pathEdit:
  2619                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2620                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2621                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2622                              <1> ; end there. Error with too many arguments error!
  2623                              <1> ;If after the equals sign there is nothing, we just print the path!
  2624                              <1> ;Gotta process the command line ourselves first
  2625 00003D9C E8130A0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2626 00003DA1 0F8409E1FFFF        <1>     jz badEnvSpaceError
  2627                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2628 00003DA7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2629 00003DAE E8AD000000          <1>     call .skipPathDelimiters
  2630 00003DB3 3C0D                <1>     cmp al, CR
  2631 00003DB5 7466                <1>     je .printPath
  2632                              <1> ;Else use the set command to setup the path in the searchSpec.
  2633 00003DB7 56                  <1>     push rsi    ;Save the first char of the command line string
  2634 00003DB8 488D3533D1FFFF      <1>     lea rsi, pathEVar
  2635 00003DBF 488D3DCAC6FFFF      <1>     lea rdi, searchSpec
  2636 00003DC6 E8AD060000          <1>     call strcpy
  2637 00003DCB 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2638 00003DCE 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2639 00003DCF 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2640                              <1> .cpLp:
  2641 00003DD1 AC                  <1>     lodsb
  2642 00003DD2 3C0D                <1>     cmp al, CR
  2643 00003DD4 7411                <1>     je .cpLpExit
  2644 00003DD6 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2645 00003DDB 740A                <1>     je .cpLpExit
  2646 00003DDD E8B9060000          <1>     call ucChar ;Uppercase the char
  2647 00003DE2 AA                  <1>     stosb       ;Store it
  2648 00003DE3 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2649 00003DE5 EBEA                <1>     jmp short .cpLp
  2650                              <1> .cpLpExit:
  2651                              <1>     ;Remove trailing semicolons
  2652 00003DE7 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2653 00003DEB 7507                <1>     jne .cpLpNoIntervene
  2654 00003DED FFC9                <1>     dec ecx     ;Reduce the count by one
  2655 00003DEF 48FFCF              <1>     dec rdi     ;Go back a char
  2656 00003DF2 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2657                              <1> .cpLpNoIntervene:
  2658 00003DF4 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2659 00003DF6 AA                  <1>     stosb       ;Store it!
  2660 00003DF7 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2661 00003DFD 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2662 00003E04 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2663 00003E06 488D3583C6FFFF      <1>     lea rsi, searchSpec
  2664 00003E0D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2665 00003E14 57                  <1>     push rdi
  2666 00003E15 F3A4                <1>     rep movsb
  2667 00003E17 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2668 00003E18 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2669                              <1> .printPath:
  2670 00003E1D 488D3DCED0FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2671 00003E24 E8E5090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2672 00003E29 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2673 00003E2B 4889F7              <1>     mov rdi, rsi        
  2674 00003E2E E85E060000          <1>     call strlen         ;Get the length of the path in rdi
  2675 00003E33 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2676 00003E39 7411                <1>     je .noPathPrnt      ;Print no path!
  2677 00003E3B FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2678 00003E3D 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2679 00003E40 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2680 00003E45 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2681 00003E4A EB0C                <1>     jmp short .pathExit
  2682                              <1> .noPathPrnt:
  2683 00003E4C 488D158BCDFFFF      <1>     lea rdx, noPath
  2684 00003E53 B800090000          <1>     mov eax, 0900h
  2685                              <1> .pathExit:
  2686 00003E58 CD21                <1>     int 21h
  2687 00003E5A E805040000          <1>     call printCRLF      ;Print a crlf at the end
  2688                              <1>     return
    13                              <2> %%_ret:
    14 00003E5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2689                              <1> .skipPathDelimiters:
  2690                              <1> ;Input: rsi -> Start of string to parse
  2691                              <1> ;Output: rsi -> First non-delimiter char of string
  2692                              <1> ;        al = First non delim char
  2693 00003E60 AC                  <1>     lodsb
  2694 00003E61 E806000000          <1>     call .isALPathDelimiter
  2695 00003E66 74F8                <1>     je .skipPathDelimiters
  2696 00003E68 48FFCE              <1>     dec rsi
  2697                              <1>     return
    13                              <2> %%_ret:
    14 00003E6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2698                              <1> .isALPathDelimiter:
  2699                              <1> ;Same as before without semicolon
  2700 00003E6C 3C20                <1>     cmp al, SPC
  2701                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E6E 74(6B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2702 00003E70 3C09                <1>     cmp al, TAB
  2703                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E72 74(6B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2704 00003E74 3C2C                <1>     cmp al, ","
  2705                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E76 74(6B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2706 00003E78 3C3D                <1>     cmp al, "="
  2707                              <1>     return
    13                              <2> %%_ret:
    14 00003E7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2708                              <1> 
  2709                              <1> prompt:
  2710 00003E7B E834090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2711 00003E80 0F842AE0FFFF        <1>     jz badEnvSpaceError
  2712                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2713 00003E86 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2714 00003E8D E824060000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2715 00003E92 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2716 00003E95 742C                <1>     je .reset   ;Reset if so
  2717 00003E97 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2718 00003E98 488D3529D0FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2719 00003E9F 488D3DEAC5FFFF      <1>     lea rdi, searchSpec
  2720 00003EA6 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2721 00003EAB F3A4                <1>     rep movsb
  2722 00003EAD 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2723 00003EAE 31C9                <1>     xor ecx, ecx    ;Get char count
  2724                              <1> .cp:    ;Now copy the user string over
  2725 00003EB0 AC                  <1>     lodsb
  2726 00003EB1 AA                  <1>     stosb 
  2727 00003EB2 3C0D                <1>     cmp al, CR
  2728 00003EB4 7404                <1>     je .cpOk
  2729 00003EB6 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2730 00003EB8 EBF6                <1>     jmp short .cp
  2731                              <1> .cpOk:
  2732 00003EBA 488D35CFC5FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2733 00003EC1 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2734                              <1> .reset:
  2735                              <1> ;Delete the environment variable!
  2736 00003EC3 488D35FECFFFFF      <1>     lea rsi, promptEVar 
  2737 00003ECA 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2738                              <1> .goSet:
  2739 00003ECC 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2740 00003ED2 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2741 00003ED9 FFC1                <1>     inc ecx     ;Include CR in copy
  2742 00003EDB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2743 00003EE2 57                  <1>     push rdi
  2744 00003EE3 F3A4                <1>     rep movsb
  2745 00003EE5 5E                  <1>     pop rsi
  2746 00003EE6 E9F0FDFFFF          <1>     jmp set.altEp
  2747                              <1> 
  2748                              <1> echo:
  2749 00003EEB F605B2C1FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2750 00003EF2 752A                <1>     jnz .argGiven
  2751 00003EF4 488D15D4CDFFFF      <1>     lea rdx, echoIs
  2752 00003EFB E86B030000          <1>     call printString
  2753 00003F00 488D15AECDFFFF      <1>     lea rdx, onMes
  2754 00003F07 488D0DA1CDFFFF      <1>     lea rcx, offMes
  2755 00003F0E F60581C1FFFFFF      <1>     test byte [echoFlg], -1
  2756 00003F15 480F44D1            <1>     cmovz rdx, rcx
  2757 00003F19 E94D030000          <1>     jmp printString
  2758                              <1> .argGiven:
  2759 00003F1E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2760 00003F25 0FB60579C1FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2761 00003F2C 4801C6              <1>     add rsi, rax
  2762 00003F2F AC                  <1>     lodsb   ;Get this char
  2763 00003F30 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2764 00003F33 E863050000          <1>     call ucChar
  2765 00003F38 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2766 00003F3A 755A                <1>     jne .directEcho
  2767 00003F3C 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2768 00003F3F E857050000          <1>     call ucChar
  2769 00003F44 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2770 00003F46 751B                <1>     jne .checkOff
  2771 00003F48 56                  <1>     push rsi
  2772 00003F49 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2773 00003F50 E861050000          <1>     call skipDelimiters
  2774 00003F55 803E0D              <1>     cmp byte [rsi], CR
  2775 00003F58 5E                  <1>     pop rsi
  2776 00003F59 753B                <1>     jne .directEcho ;If its not, just echo the string
  2777 00003F5B C60534C1FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2778                              <1>     return
    13                              <2> %%_ret:
    14 00003F62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2779                              <1> .checkOff:
  2780 00003F63 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2781 00003F66 E830050000          <1>     call ucChar
  2782 00003F6B 3C46                <1>     cmp al, "F" ;Is it an F?
  2783 00003F6D 7527                <1>     jne .directEcho ;No, just direct echo
  2784 00003F6F 8A4602              <1>     mov al, byte [rsi + 2]
  2785 00003F72 E824050000          <1>     call ucChar
  2786 00003F77 3C46                <1>     cmp al, "F"
  2787 00003F79 751B                <1>     jne .directEcho
  2788 00003F7B 56                  <1>     push rsi
  2789 00003F7C 4881C603000000      <1>     add rsi, 3
  2790 00003F83 E82E050000          <1>     call skipDelimiters
  2791 00003F88 803E0D              <1>     cmp byte [rsi], CR
  2792 00003F8B 5E                  <1>     pop rsi
  2793 00003F8C 7508                <1>     jne .directEcho
  2794 00003F8E C60501C1FFFF00      <1>     mov byte [echoFlg], 0
  2795                              <1>     return
    13                              <2> %%_ret:
    14 00003F95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2796                              <1> .directEcho: 
  2797 00003F96 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2798 00003F9D 4889F3              <1>     mov rbx, rsi    
  2799 00003FA0 4829D3              <1>     sub rbx, rdx
  2800 00003FA3 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2801 00003FAB 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2802 00003FAD 0F82A7020000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2803 00003FB3 4889F2              <1>     mov rdx, rsi
  2804 00003FB6 BB01000000          <1>     mov ebx, 1
  2805 00003FBB B800400000          <1>     mov eax, 4000h
  2806 00003FC0 CD21                <1>     int 21h
  2807 00003FC2 E99D020000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2808                              <1> 
  2809                              <1> 
  2810                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2811                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2812                              <1> ; with just... the actual command tail being echoed with the command -_-
  2813 00003FC7 F605C8C0FFFFFF      <1>     test byte [echoFlg], -1
  2814 00003FCE 7528                <1>     jnz .echoTail
  2815                              <1> ;Since we havent echoed the command out, type the tail out manually
  2816 00003FD0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2817 00003FD7 E8DA040000          <1>     call skipDelimiters ;Skip leading delims
  2818 00003FDC 4889F2              <1>     mov rdx, rsi
  2819 00003FDF 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2820 00003FE7 BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2821 00003FEC B800400000          <1>     mov eax, 4000h  ;Write
  2822 00003FF1 CD21                <1>     int 21h
  2823 00003FF3 E86C020000          <1>     call printCRLF
  2824                              <1> .echoTail:
  2825 00003FF8 488D1547CAFFFF      <1>     lea rdx, pauseMes
  2826 00003FFF E867020000          <1>     call printString
  2827 00004004 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2828 00004009 CD21                <1>     int 21h
  2829 0000400B E854020000          <1>     call printCRLF
  2830                              <1> remark:
  2831                              <1>     return
    13                              <2> %%_ret:
    14 00004010 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00004011 53                  <1>     push rbx
    11 00004012 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00004014 803D10C0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 0000401B 7240                <1>     jb .usDate
    14 0000401D 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 0000401F 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00004024 E8B0000000          <1>     call .printFirst
    18 00004029 8A1507C0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 0000402F B402                <1>     mov ah, 02h
    20 00004031 CD21                <1>     int 21h
    21                              <1> 
    22 00004033 89C8                <1>     mov eax, ecx
    23 00004035 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 0000403A C1E805              <1>     shr eax, 5
    25 0000403D E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00004042 8A15EEBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00004048 B402                <1>     mov ah, 02h
    29 0000404A CD21                <1>     int 21h
    30                              <1> 
    31 0000404C 89C8                <1>     mov eax, ecx
    32 0000404E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00004053 C1E809              <1>     shr eax, 9
    34 00004056 5B                  <1>     pop rbx ;Get the year signature back
    35 00004057 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 0000405C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 0000405D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00004062 C1E805              <1>     shr eax, 5
    41 00004065 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 0000406A 8A15C6BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00004070 B402                <1>     mov ah, 02h
    45 00004072 CD21                <1>     int 21h
    46                              <1> 
    47 00004074 89C8                <1>     mov eax, ecx
    48 00004076 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000407B E875000000          <1>     call .printSecond
    50                              <1> 
    51 00004080 8A15B0BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00004086 B402                <1>     mov ah, 02h
    53 00004088 CD21                <1>     int 21h
    54                              <1> 
    55 0000408A 89C8                <1>     mov eax, ecx
    56 0000408C 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00004091 C1E809              <1>     shr eax, 9
    58 00004094 5B                  <1>     pop rbx ;Get the year signature back
    59 00004095 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 0000409A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 0000409B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000040A0 C1E809              <1>     shr eax, 9
    65 000040A3 5B                  <1>     pop rbx ;Get the year signature back
    66 000040A4 E85C000000          <1>     call .printYear
    67                              <1> 
    68 000040A9 8A1587BFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000040AF B402                <1>     mov ah, 02h
    70 000040B1 CD21                <1>     int 21h
    71                              <1> 
    72 000040B3 89C8                <1>     mov eax, ecx
    73 000040B5 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000040BA C1E805              <1>     shr eax, 5
    75 000040BD E833000000          <1>     call .printSecond
    76                              <1> 
    77 000040C2 8A156EBFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000040C8 B402                <1>     mov ah, 02h
    79 000040CA CD21                <1>     int 21h
    80                              <1> 
    81 000040CC 89C8                <1>     mov eax, ecx
    82 000040CE 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000040D3 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000040D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000040D9 51                  <1>     push rcx
    89 000040DA E8F5050000          <1>     call getDecimalWord
    90 000040DF 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 000040E1 7504                <1>     jnz .skipSpace
    92 000040E3 88CD                <1>     mov ch, cl
    93 000040E5 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 000040E7 88CA                <1>     mov dl, cl
    96 000040E9 B402                <1>     mov ah, 02h
    97 000040EB CD21                <1>     int 21h
    98 000040ED 88EA                <1>     mov dl, ch
    99 000040EF B402                <1>     mov ah, 02h
   100 000040F1 CD21                <1>     int 21h
   101 000040F3 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000040F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000040F5 51                  <1>     push rcx
   105 000040F6 E8D9050000          <1>     call getDecimalWord
   106 000040FB 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000040FD 75E8                <1>     jnz .skipSpace
   108 000040FF 88CD                <1>     mov ch, cl
   109 00004101 B130                <1>     mov cl, "0"
   110 00004103 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00004105 05BC070000          <1>     add eax, 1980
   113 0000410A 51                  <1>     push rcx
   114 0000410B 53                  <1>     push rbx
   115 0000410C E8C3050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00004111 5B                  <1>     pop rbx
   117 00004112 84DB                <1>     test bl, bl
   118 00004114 740C                <1>     jz .twoDigitYear
   119 00004116 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00004118 B402                <1>     mov ah, 02h
   121 0000411A CD21                <1>     int 21h
   122 0000411C 88EA                <1>     mov dl, ch  ;Print the second digit
   123 0000411E B402                <1>     mov ah, 02h
   124 00004120 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00004122 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00004125 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00004127 B402                <1>     mov ah, 02h
   129 00004129 CD21                <1>     int 21h
   130 0000412B 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 0000412D B402                <1>     mov ah, 02h
   132 0000412F CD21                <1>     int 21h
   133 00004131 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00004132 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00004133 89C1                <1>     mov ecx, eax
   142 00004135 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 0000413A C1E80B              <1>     shr eax, 11
   144 0000413D 803DF8BEFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00004144 750B                <1>     jne .ampm
   146 00004146 E85A000000          <1>     call .printHours
   147 0000414B E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00004150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00004151 3D0C000000          <1>     cmp eax, 12
   151 00004156 7713                <1>     ja .pm
   152 00004158 7416                <1>     je .pm2
   153 0000415A E846000000          <1>     call .printHours
   154 0000415F E81D000000          <1>     call .printMinutes
   155 00004164 B261                <1>     mov dl, "a"
   156 00004166 B402                <1>     mov ah, 02h
   157 00004168 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 0000416A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000416B 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00004170 E830000000          <1>     call .printHours
   163 00004175 E807000000          <1>     call .printMinutes
   164 0000417A B270                <1>     mov dl, "p"
   165 0000417C B402                <1>     mov ah, 02h
   166 0000417E CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00004180 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00004181 8A15B1BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00004187 B402                <1>     mov ah, 02h
   171 00004189 CD21                <1>     int 21h
   172                              <1> 
   173 0000418B 89C8                <1>     mov eax, ecx
   174 0000418D 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00004192 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00004195 51                  <1>     push rcx
   178 00004196 E839050000          <1>     call getDecimalWord
   179 0000419B 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 0000419D 7514                <1>     jnz .skipSpace
   181 0000419F 88CD                <1>     mov ch, cl
   182 000041A1 B130                <1>     mov cl, "0"
   183 000041A3 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000041A5 51                  <1>     push rcx
   186 000041A6 E829050000          <1>     call getDecimalWord
   187 000041AB 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000041AD 7504                <1>     jnz .skipSpace
   189 000041AF 88CD                <1>     mov ch, cl
   190 000041B1 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000041B3 88CA                <1>     mov dl, cl
   193 000041B5 B402                <1>     mov ah, 02h
   194 000041B7 CD21                <1>     int 21h
   195 000041B9 88EA                <1>     mov dl, ch
   196 000041BB B402                <1>     mov ah, 02h
   197 000041BD CD21                <1>     int 21h
   198 000041BF 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000041C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000041C1 F605CEBEFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041C8 74(C0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000041CA 488D3DF7CCFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000041D1 E838060000          <1>     call searchForEnvVar
   206 000041D6 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000041D8 E803010000          <1>     call putCWDInPrompt
   209 000041DD E8CF000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 000041E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 000041E3 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 000041EA AC                  <1>     lodsb   ;Get the char
   216 000041EB 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000041ED 74(E2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 000041EF 3C24                <1>     cmp al, "$"
   219 000041F1 7409                <1>     je .escapeChar
   220 000041F3 88C2                <1>     mov dl, al
   221 000041F5 E8E1000000          <1>     call outChar    ;Prints the char in dl
   222 000041FA EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 000041FC AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 000041FD E899020000          <1>     call ucChar ;Uppercase this char in al
   226 00004202 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00004209 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 0000420E 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00004210 740D                <1>     je .escapeFnd
   231 00004212 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00004219 FFC9                <1>     dec ecx
   233 0000421B 75F1                <1>     jnz .escapeLp
   234 0000421D EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 0000421F 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00004226 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000422A 4801D8              <1>     add rax, rbx                ;Add these
   239 0000422D 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 0000422E FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004230 5E                  <1>     pop rsi
   242 00004231 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00004233 42                  <1>     db "B", 
   247 00004234 7A00                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00004236 44                  <1>     db "D", 
   249 00004237 7901                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00004239 45                  <1>     db "E", 
   251 0000423A 6E00                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 0000423C 47                  <1>     db "G", 
   253 0000423D 7E00                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 0000423F 48                  <1>     db "H", 
   255 00004240 8600                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004242 4C                  <1>     db "L", 
   257 00004243 8200                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00004245 4E                  <1>     db "N", 
   259 00004246 9F00                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00004248 50                  <1>     db "P", 
   261 00004249 AD00                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 0000424B 51                  <1>     db "Q", 
   263 0000424C 7600                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 0000424E 54                  <1>     db "T", 
   265 0000424F 1001                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004251 56                  <1>     db "V", 
   267 00004252 4000                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00004254 5F                  <1>     db "_", 
   269 00004255 3100                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00004257 24                  <1>     db "$", 
   271 00004258 7200                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLFecho:
   275 0000425A F60535BEFFFFFF      <1>     test byte [echoFlg], -1
   276                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004261 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004263 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> printCRLF:
   278 00004264 488D1516C6FFFF      <1>     lea rdx, crlf
   279                              <1> printString:
   280 0000426B B800090000          <1>     mov eax, 0900h  ;Print string
   281 00004270 CD21                <1>     int 21h
   282                              <1>     return
    13                              <2> %%_ret:
    14 00004272 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> putVersionInPrompt:
   285 00004273 488D15B5C8FFFF      <1>     lea rdx, dosVer
   286 0000427A B409                <1>     mov ah, 09h ;Print String
   287 0000427C CD21                <1>     int 21h
   288 0000427E B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   289 00004280 CD21                <1>     int 21h
   290 00004282 50                  <1>     push rax    ;Save minor version
   291 00004283 E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   292 00004288 E8AE010000          <1>     call printPackedBCD ;Print al
   293 0000428D B22E                <1>     mov dl, "."
   294 0000428F B402                <1>     mov ah, 02h
   295 00004291 CD21                <1>     int 21h
   296 00004293 58                  <1>     pop rax
   297 00004294 88E0                <1>     mov al, ah  ;Get the minor version low
   298 00004296 E883010000          <1>     call hexToBCD
   299 0000429B E89B010000          <1>     call printPackedBCD
   300                              <1>     return
    13                              <2> %%_ret:
    14 000042A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> putEscInPrompt:
   302 000042A1 B21B                <1>     mov dl, ESC
   303 000042A3 EB36                <1>     jmp short outChar
   304                              <1> 
   305                              <1> putMoneyInPrompt:
   306 000042A5 B224                <1>     mov dl, "$"
   307 000042A7 EB32                <1>     jmp short outChar
   308                              <1> 
   309                              <1> putEquInPrompt:
   310 000042A9 B23D                <1>     mov dl, "="
   311 000042AB EB2E                <1>     jmp short outChar
   312                              <1> 
   313                              <1> putPipeInPrompt:
   314 000042AD B27C                <1>     mov dl, "|"
   315 000042AF EB2A                <1>     jmp short outChar
   316                              <1> 
   317                              <1> putGTinPrompt:
   318 000042B1 B23E                <1>     mov dl, ">"
   319 000042B3 EB26                <1>     jmp short outChar
   320                              <1> 
   321                              <1> putLTinPrompt:
   322 000042B5 B23C                <1>     mov dl, "<"
   323 000042B7 EB22                <1>     jmp short outChar
   324                              <1> 
   325                              <1> putBSPinPrompt:
   326 000042B9 488D156ACAFFFF      <1>     lea rdx, backSpace
   327 000042C0 B903000000          <1>     mov ecx, 3
   328 000042C5 BB01000000          <1>     mov ebx, 1
   329 000042CA B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   330 000042CF CD21                <1>     int 21h
   331                              <1>     return
    13                              <2> %%_ret:
    14 000042D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> putDriveInPrompt:
   334 000042D2 E89C010000          <1>     call getCurrentDrive
   335 000042D7 0441                <1>     add al, "A" ;Convert to letter
   336 000042D9 88C2                <1>     mov dl, al
   337                              <1> outChar:
   338 000042DB B402                <1>     mov ah, 02h ;Echo to STDOUT
   339 000042DD CD21                <1>     int 21h
   340                              <1>     return
    13                              <2> %%_ret:
    14 000042DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> putCWDInPrompt:
   342 000042E0 E88E010000          <1>     call getCurrentDrive
   343 000042E5 3805AABDFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   344 000042EB C605A3BDFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   345 000042F2 7443                <1>     je .badDrive 
   346 000042F4 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   347 000042F6 FEC2                <1>     inc dl
   348 000042F8 0441                <1>     add al, "A" ;Convert to letter
   349 000042FA B43A                <1>     mov ah, ":"
   350 000042FC 488D3D4EBDFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   351 00004303 66AB                <1>     stosw   ;Store X:, rdi+=2
   352 00004305 8A051EBDFFFF        <1>     mov al, byte [pathSep]
   353 0000430B AA                  <1>     stosb   ;Store pathSep, inc rdi
   354 0000430C B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   355 00004311 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   356 00004314 CD21                <1>     int 21h
   357 00004316 721F                <1>     jc .badDrive
   358 00004318 E874010000          <1>     call strlen
   359 0000431D 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   360                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   361 00004323 B800400000          <1>     mov eax, 4000h ;Write to handle
   362 00004328 BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 0000432D 488D151DBDFFFF      <1>     lea rdx, currDirStr
   364 00004334 CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 00004336 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .badDrive:
   367                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   368 00004337 488D15B9C8FFFF      <1>     lea rdx, badDrvMsg
   369 0000433E E928FFFFFF          <1>     jmp printString
   370                              <1> printFmtTime:
   371                              <1> ;Outputs the formatted time
   372 00004343 E847000000          <1>     call getTime
   373 00004348 0FB6C5              <1>     movzx eax, ch
   374 0000434B E855FEFFFF          <1>     call printTime.printHours
   375 00004350 8A15E2BCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   376 00004356 B402                <1>     mov ah, 02h
   377 00004358 CD21                <1>     int 21h
   378 0000435A 0FB605F8C2FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   379 00004361 E82FFEFFFF          <1>     call printTime.printMinutesAlt
   380 00004366 8A15CCBCFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   381 0000436C B402                <1>     mov ah, 02h
   382 0000436E CD21                <1>     int 21h
   383 00004370 0FB605E5C2FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   384 00004377 E819FEFFFF          <1>     call printTime.printMinutesAlt
   385 0000437C B22E                <1>     mov dl, "."
   386 0000437E B402                <1>     mov ah, 02h
   387 00004380 CD21                <1>     int 21h
   388 00004382 0FB605D2C2FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   389 00004389 E807FEFFFF          <1>     call printTime.printMinutesAlt
   390                              <1>     return
    13                              <2> %%_ret:
    14 0000438E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> getTime:
   392 0000438F B42C                <1>     mov ah, 2Ch ;DOS get time
   393 00004391 CD21                <1>     int 21h
   394                              <1>     ;CH = hour (0-23)
   395                              <1> 	;CL = minutes (0-59)
   396                              <1> 	;DH = seconds (0-59)
   397                              <1> 	;DL = hundredths (0-99)
   398 00004393 880DC0C2FFFF        <1>     mov byte [td1], cl
   399 00004399 882DBBC2FFFF        <1>     mov byte [td2], ch
   400 0000439F 8815B6C2FFFF        <1>     mov byte [td3], dl
   401 000043A5 8835B1C2FFFF        <1>     mov byte [td4], dh
   402                              <1>     return
    13                              <2> %%_ret:
    14 000043AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> printFmtDate:
   405                              <1> ;Outputs the formatted date
   406 000043AC B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   407 000043B1 CD21                <1>     int 21h
   408                              <1> 	;AL = day of the week (0=Sunday)
   409                              <1> 	;CX = year (1980-2099)
   410                              <1> 	;DH = month (1-12)
   411                              <1> 	;DL = day (1-31)
   412 000043B3 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   413 000043B8 66890D9AC2FFFF      <1>     mov word [td1], cx
   414 000043BF 881596C2FFFF        <1>     mov byte [td3], dl
   415 000043C5 883591C2FFFF        <1>     mov byte [td4], dh
   416 000043CB 0FB6C0              <1>     movzx eax, al
   417 000043CE 89C3                <1>     mov ebx, eax
   418 000043D0 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   419 000043D2 01D8                <1>     add eax, ebx ;Make it 3 times 
   420 000043D4 488D159EC6FFFF      <1>     lea rdx, dayName
   421 000043DB 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   422 000043DF B903000000          <1>     mov ecx, 3  ;Print three chars
   423 000043E4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   424 000043E9 B440                <1>     mov ah, 40h ;Write to handle
   425 000043EB CD21                <1>     int 21h
   426 000043ED B220                <1>     mov dl, " "
   427 000043EF E8E7FEFFFF          <1>     call outChar
   428                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   429                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   430                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   431 000043F4 0FB7055EC2FFFF      <1>     movzx eax, word [td1]   ;Get this word
   432 000043FB C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   433 000043FE 0FB61D57C2FFFF      <1>     movzx ebx, byte [td4]
   434 00004405 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   435 00004408 09D8                <1>     or eax, ebx ;Add this date to eax
   436 0000440A 0FB61D4AC2FFFF      <1>     movzx ebx, byte [td3]
   437 00004411 09D8                <1>     or eax, ebx
   438 00004413 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   439 00004418 E8F4FBFFFF          <1>     call printDate
   440                              <1>     return
    13                              <2> %%_ret:
    14 0000441D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> 
   443                              <1> hexToBCD:
   444                              <1> ;Converts a Hex byte into two BCD digits
   445                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   446 0000441E 51                  <1>     push rcx
   447 0000441F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   448 00004422 31C9                <1>     xor ecx, ecx
   449                              <1> .htb0:
   450 00004424 3D0A000000          <1>     cmp eax, 10
   451 00004429 7209                <1>     jb .htb1
   452 0000442B 2D0A000000          <1>     sub eax, 10
   453 00004430 FFC1                <1>     inc ecx
   454 00004432 EBF0                <1>     jmp short .htb0
   455                              <1> .htb1:
   456 00004434 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   457 00004437 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   458 00004439 59                  <1>     pop rcx
   459 0000443A C3                  <1>     ret
   460                              <1> 
   461                              <1> printPackedBCD:
   462                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   463                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   464                              <1> ;Preserves all registers
   465 0000443B 50                  <1>     push rax
   466 0000443C 52                  <1>     push rdx
   467 0000443D 88C4                <1>     mov ah, al
   468 0000443F 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   469 00004441 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   470 00004444 7508                <1>     jnz .upperNybble
   471 00004446 B220                <1>     mov dl, " "
   472 00004448 B402                <1>     mov ah, 02h
   473 0000444A CD21                <1>     int 21h
   474 0000444C EB0E                <1>     jmp short .lowerNybble
   475                              <1> .upperNybble:
   476 0000444E 50                  <1>     push rax
   477 0000444F C0EC04              <1>     shr ah, 4
   478 00004452 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   479 00004455 88E2                <1>     mov dl, ah
   480 00004457 B402                <1>     mov ah, 02h ;Print DL
   481 00004459 CD21                <1>     int 21h
   482 0000445B 58                  <1>     pop rax
   483                              <1> .lowerNybble:
   484 0000445C 0430                <1>     add al, "0"
   485 0000445E 88C2                <1>     mov dl, al
   486 00004460 B402                <1>     mov ah, 02h ;Print DL
   487 00004462 CD21                <1>     int 21h
   488 00004464 5A                  <1>     pop rdx
   489 00004465 58                  <1>     pop rax
   490                              <1>     return
    13                              <2> %%_ret:
    14 00004466 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> setDrive:
   493                              <1> ;Input: dl = 0 based Drive number to set to
   494                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   495                              <1> ;AX trashed.
   496 00004467 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   497 00004469 CD21                <1>     int 21h 
   498 0000446B E803000000          <1>     call getCurrentDrive
   499 00004470 38D0                <1>     cmp al, dl  ;Is this the same drive?
   500                              <1>     return
    13                              <2> %%_ret:
    14 00004472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> getCurrentDrive:
   502                              <1> ;Returns the 0 based current drive in al
   503 00004473 B419                <1>     mov ah, 19h
   504 00004475 CD21                <1>     int 21h
   505                              <1>     return
    13                              <2> %%_ret:
    14 00004477 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> strcpy:
   508                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   509                              <1> ;rsi -> Source
   510                              <1> ;rdi -> Destination
   511 00004478 51                  <1>     push rcx
   512 00004479 57                  <1>     push rdi
   513 0000447A 4889F7              <1>     mov rdi, rsi
   514 0000447D E80F000000          <1>     call strlen ;Get the length of the string in rsi
   515 00004482 5F                  <1>     pop rdi
   516 00004483 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   517 00004485 59                  <1>     pop rcx
   518                              <1>     return
    13                              <2> %%_ret:
    14 00004486 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> strcpy2:
   521                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   522                              <1> ;rsi -> Source
   523                              <1> ;rdi -> Destination
   524 00004487 56                  <1>     push rsi
   525 00004488 57                  <1>     push rdi
   526 00004489 E8EAFFFFFF          <1>     call strcpy 
   527 0000448E 5F                  <1>     pop rdi
   528 0000448F 5E                  <1>     pop rsi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00004490 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> strlen:
   532                              <1> ;Gets the length of a ASCIIZ string
   533                              <1> ;Input: rdi = Source buffer
   534                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   535 00004491 50                  <1>     push rax
   536 00004492 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   537 00004497 CD2F                <1>     int 2fh
   538 00004499 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 0000449A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> ucChar:
   542                              <1> ;Input: al = Char to uppercase
   543                              <1> ;Output: al = Adjusted char 
   544 0000449B 53                  <1>     push rbx
   545 0000449C 50                  <1>     push rax    ;Push the char twice on the stack
   546 0000449D B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   547 000044A2 CD2F                <1>     int 2fh         ;Returns the processed char in al
   548 000044A4 5B                  <1>     pop rbx         ;Pop the old word off the stack
   549 000044A5 5B                  <1>     pop rbx
   550                              <1>     return
    13                              <2> %%_ret:
    14 000044A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> normalisePath:
   553                              <1> ;Uppercases chars and flips pathseps
   554                              <1> ;Input: rsi -> Path to normalise
   555 000044A7 50                  <1>     push rax
   556 000044A8 57                  <1>     push rdi
   557 000044A9 4889F7              <1>     mov rdi, rsi
   558 000044AC B811120000          <1>     mov eax, 1211h
   559 000044B1 CD2F                <1>     int 2fh
   560 000044B3 5F                  <1>     pop rdi
   561 000044B4 58                  <1>     pop rax
   562                              <1>     return
    13                              <2> %%_ret:
    14 000044B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> skipDelimiters:
   565                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   566                              <1> ; command delimiters but a subset thereof. 
   567                              <1> ;These are the same across all codepages.
   568                              <1> ;Input: rsi must point to the start of the data string
   569                              <1> ;Output: rsi points to the first non-delimiter char
   570 000044B6 50                  <1>     push rax
   571                              <1> .l1:
   572 000044B7 AC                  <1>     lodsb
   573 000044B8 E807000000          <1>     call isALdelimiter
   574 000044BD 74F8                <1>     jz .l1
   575                              <1> .exit:
   576 000044BF 58                  <1>     pop rax
   577 000044C0 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   578                              <1>     return
    13                              <2> %%_ret:
    14 000044C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> isALdelimiter:
   581                              <1> ;Returns: ZF=NZ if al is not a command separator 
   582                              <1> ;         ZF=ZE if al is a command separator
   583 000044C4 3C20                <1>     cmp al, " "
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044C6 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000044C8 3C3B                <1>     cmp al, ";"
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044CA 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000044CC 3C3D                <1>     cmp al, "="
   588                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044CE 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   589 000044D0 3C2C                <1>     cmp al, ","
   590                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000044D2 74(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   591 000044D4 3C09                <1>     cmp al, TAB
   592                              <1>     return
    13                              <2> %%_ret:
    14 000044D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> clearCommandState:
   595                              <1> ;Clears the command state
   596 000044D7 488D3DC6BBFFFF      <1>     lea rdi, cmdStatePtr
   597 000044DE B907000000          <1>     mov ecx, cmdStateL
   598 000044E3 31C0                <1>     xor eax, eax
   599 000044E5 F3AA                <1>     rep stosb
   600                              <1>     return
    13                              <2> %%_ret:
    14 000044E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> clearCommandLineState:
   603                              <1> ;Clears the command line state after a 0Dh encountered
   604 000044E8 488D3DAABBFFFF      <1>     lea rdi, cmdLineStatePtr
   605 000044EF B912000000          <1>     mov ecx, cmdLineStateL
   606 000044F4 31C0                <1>     xor eax, eax
   607 000044F6 F3AA                <1>     rep stosb
   608 000044F8 C70598BBFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   608 00004501 FF                  <1>
   609 00004502 C70594BBFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   609 0000450B FF                  <1>
   610                              <1> ;Close all handles from 5->MAX
   611 0000450C 0FB70D14BBFFFF      <1>     movzx ecx, word [numHdls]
   612 00004513 BB05000000          <1>     mov ebx, 5
   613                              <1> .lp:
   614 00004518 B43E                <1>     mov ah, 3Eh ;File close
   615 0000451A CD21                <1>     int 21h
   616 0000451C FFC3                <1>     inc ebx ;Goto next file
   617 0000451E 39CB                <1>     cmp ebx, ecx
   618 00004520 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   619                              <1>     return
    13                              <2> %%_ret:
    14 00004522 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> asciiFilenameToFCB:
   622                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   623                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   624                              <1> ;Also doesn't check if chars are valid
   625                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   626                              <1> ;Name is space padded.
   627                              <1> ;Input: rsi = ASCII string buffer
   628                              <1> ;       rdi = FCB name buffer
   629                              <1> ;Output: al = Char that terminated the source string 
   630 00004523 53                  <1>     push rbx    
   631 00004524 57                  <1>     push rdi
   632 00004525 B90B000000          <1>     mov ecx, 11
   633 0000452A B020                <1>     mov al, " "
   634 0000452C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   635 0000452E 5F                  <1>     pop rdi
   636 0000452F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   637                              <1>     ;Preprocess for Dir Searches
   638 00004532 803E2E              <1>     cmp byte [rsi], "."
   639 00004535 7509                <1>     jne .processName
   640 00004537 A4                  <1>     movsb   ;Store the first dot
   641 00004538 803E2E              <1>     cmp byte [rsi], "."
   642 0000453B 752C                <1>     jne .exitBadChar
   643 0000453D A4                  <1>     movsb
   644 0000453E EB29                <1>     jmp short .exitBadChar
   645                              <1> .processName:
   646 00004540 AC                  <1>     lodsb   ;Get the char in al
   647 00004541 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   648 00004543 7426                <1>     jz .exit
   649 00004545 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   650 00004547 7407                <1>     je .extSpace
   651 00004549 3C2E                <1>     cmp al, "."
   652 0000454B 740C                <1>     je .ext
   653 0000454D AA                  <1>     stosb   ;Store the char
   654 0000454E EBF0                <1>     jmp short .processName
   655                              <1> .extSpace:
   656                              <1> ;Now we scan for a period in the name
   657 00004550 AC                  <1>     lodsb   ;Get a char and increase rsi
   658 00004551 84C0                <1>     test al, al
   659 00004553 7416                <1>     jz .exit
   660 00004555 3C2E                <1>     cmp al, "."     ;If al is not a period...
   661 00004557 75F7                <1>     jne .extSpace   ; keep searching
   662                              <1> .ext:
   663 00004559 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   664                              <1> .processExt:
   665 0000455D AC                  <1>     lodsb
   666 0000455E 84C0                <1>     test al, al
   667 00004560 7409                <1>     jz .exit
   668 00004562 3C20                <1>     cmp al, " "
   669 00004564 7405                <1>     je .exit
   670 00004566 AA                  <1>     stosb
   671 00004567 EBF4                <1>     jmp short .processExt
   672                              <1> .exitBadChar:
   673 00004569 30C0                <1>     xor al, al  ;Return a null terminator
   674                              <1> .exit:
   675 0000456B 5B                  <1>     pop rbx
   676                              <1>     return
    13                              <2> %%_ret:
    14 0000456C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> 
   678                              <1> findLastPathComponant:
   679                              <1> ;Finds the last path componant of an ASCIIZ path string
   680                              <1> ;Input: rdi -> Head of the path to find last componant on
   681                              <1> ;Output: rdi -> Start of the last componant
   682 0000456D 50                  <1>     push rax
   683 0000456E 51                  <1>     push rcx
   684 0000456F 31C9                <1>     xor ecx, ecx
   685 00004571 FFC9                <1>     dec ecx
   686 00004573 31C0                <1>     xor eax, eax
   687 00004575 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   688 00004577 F7D1                <1>     not ecx     ;This gets the count of chars  
   689 00004579 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   690 0000457C 8A05A7BAFFFF        <1>     mov al, byte [pathSep]
   691 00004582 FD                  <1>     std
   692 00004583 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   693 00004585 FC                  <1>     cld
   694 00004586 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   695 00004588 48FFC7              <1>     inc rdi     ;Point at pathsep
   696                              <1> .exit:
   697 0000458B 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   698 0000458E 59                  <1>     pop rcx
   699 0000458F 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 00004590 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> FCBToAsciiz:
   703                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   704                              <1> ;Name is space padded too
   705                              <1> ;Input: rsi = FCB name buffer
   706                              <1> ;       rdi = ASCIIZ string buffer
   707 00004591 B908000000          <1>     mov ecx, 8
   708 00004596 F3A4                <1>     rep movsb   ;Move the name over
   709                              <1> .scanNameSpace:
   710 00004598 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   711 0000459C 750D                <1>     jne .ext
   712 0000459E 48FFCF              <1>     dec rdi
   713 000045A1 FFC1                <1>     inc ecx
   714 000045A3 81F908000000        <1>     cmp ecx, 8
   715 000045A9 72ED                <1>     jb .scanNameSpace
   716                              <1> .ext:
   717 000045AB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   718 000045B0 7506                <1>     jne .validExt
   719 000045B2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   720 000045B6 7415                <1>     je .exit
   721                              <1> .validExt:
   722 000045B8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   723 000045BA AA                  <1>     stosb
   724 000045BB B903000000          <1>     mov ecx, 3
   725 000045C0 F3A4                <1>     rep movsb   ;Move the three extension chars over
   726                              <1> .scanExtSpace:
   727 000045C2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   728 000045C6 7505                <1>     jne .exit
   729 000045C8 48FFCF              <1>     dec rdi
   730 000045CB EBF5                <1>     jmp short .scanExtSpace
   731                              <1> .exit:
   732 000045CD 31C0                <1>     xor eax, eax
   733 000045CF AA                  <1>     stosb   ;Store a null at the end
   734                              <1>     return
    13                              <2> %%_ret:
    14 000045D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> cpDelimOrCtrlStringToBufz:
   737                              <1> ;Copy a delimited or control char terminated string to a buffer
   738                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   739                              <1> ;       rdi -> Buffer to store null terminated string in
   740                              <1> ;Output: rsi -> First char past string end
   741                              <1> ;       rdi -> One char past null terminator on string buffer
   742 000045D1 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   743                              <1> .lp:
   744 000045D4 AC                  <1>     lodsb
   745 000045D5 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   746 000045D7 760A                <1>     jbe .exit
   747 000045D9 E8E6FEFFFF          <1>     call isALdelimiter
   748 000045DE 7403                <1>     je .exit
   749 000045E0 AA                  <1>     stosb
   750 000045E1 EBF1                <1>     jmp short .lp
   751                              <1> .exit:
   752 000045E3 31C0                <1>     xor eax, eax
   753 000045E5 AA                  <1>     stosb   ;Store a null terminator
   754                              <1>     return
    13                              <2> %%_ret:
    14 000045E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> 
   757                              <1> cpDelimPathToBufz:
   758                              <1> ;Copy a delimited path into buffer and null terminate.
   759                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   760                              <1> ;       rdi -> Buffer to store null terminated path in
   761                              <1> ;Output: rsi -> First char past pathname delimiter
   762                              <1> ;       rdi -> One char past null terminator on pathname buffer
   763 000045E7 53                  <1>     push rbx
   764 000045E8 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   765 000045EB C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   766                              <1> .lp:
   767 000045EE AC                  <1>     lodsb   ;Get the char
   768 000045EF 3C0D                <1>     cmp al, CR
   769 000045F1 7412                <1>     je .gotRedirPath
   770 000045F3 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   771 000045F8 740B                <1>     jz .gotRedirPath 
   772 000045FA 3A052ABAFFFF        <1>     cmp al, byte [switchChar]
   773 00004600 7403                <1>     je .gotRedirPath
   774 00004602 AA                  <1>     stosb   ;Store this char and loop next char
   775 00004603 EBE9                <1>     jmp short .lp
   776                              <1> .gotRedirPath:
   777 00004605 50                  <1>     push rax    ;Save the char on stack
   778 00004606 30C0                <1>     xor al, al  ;Get null terminator char
   779 00004608 4829FB              <1>     sub rbx, rdi
   780 0000460B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   781 00004612 7412                <1>     je .notColon
   782 00004614 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   783 0000461B 7409                <1>     je .notColon
   784 0000461D 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   785 00004621 7503                <1>     jne .notColon
   786 00004623 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   787                              <1> .notColon:
   788 00004626 AA                  <1>     stosb   ;Store the null terminator for the redir path
   789 00004627 58                  <1>     pop rax ;Get back the char in al
   790 00004628 5B                  <1>     pop rbx
   791                              <1>     return
    13                              <2> %%_ret:
    14 00004629 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> buildCommandPath:
   794                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   795 0000462A 0FB60574BAFFFF      <1>     movzx eax, byte [arg1Off]
   796 00004631 4C8B05D7B9FFFF      <1>     mov r8, [pspPtr]
   797 00004638 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   798 0000463F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   799                              <1> copyArgumentToSearchSpec:
   800                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   801                              <1> ; and null terminates
   802 00004642 488D3D47BEFFFF      <1>     lea rdi, searchSpec
   803 00004649 E899FFFFFF          <1>     call cpDelimPathToBufz
   804                              <1>     return
    13                              <2> %%_ret:
    14 0000464E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> 
   806                              <1> scanForWildcards:
   807                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   808                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   809 0000464F 50                  <1>     push rax
   810 00004650 56                  <1>     push rsi
   811                              <1> .lp:
   812 00004651 AC                  <1>     lodsb
   813 00004652 3C3F                <1>     cmp al, "?"
   814 00004654 740A                <1>     je .exit
   815 00004656 3C2A                <1>     cmp al, "*"
   816 00004658 7406                <1>     je .exit
   817 0000465A 84C0                <1>     test al, al
   818 0000465C 75F3                <1>     jnz .lp
   819 0000465E FEC0                <1>     inc al  ;This will clear the ZF
   820                              <1> .exit:
   821 00004660 5E                  <1>     pop rsi
   822 00004661 58                  <1>     pop rax
   823                              <1>     return
    13                              <2> %%_ret:
    14 00004662 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> printDecimalWord:
   826                              <1> ;Takes qword in rax and print it's decimal representation
   827                              <1> ;Takes the qword in eax and prints its decimal representation
   828 00004663 31C9                <1>     xor ecx, ecx
   829 00004665 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   830 00004667 85C0                <1>     test eax, eax
   831 00004669 750C                <1>     jnz .notZero
   832 0000466B B930000000          <1>     mov ecx, "0"
   833 00004670 BD01000000          <1>     mov ebp, 1  ;Print one digit
   834 00004675 EB3E                <1>     jmp short .dpfb2
   835                              <1> .notZero:
   836 00004677 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   837 00004679 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   838                              <1> .dpfb0:
   839 0000467E FFC5                <1>     inc ebp
   840 00004680 81FD08000000        <1>     cmp ebp, 8
   841 00004686 7206                <1>     jb .dpfb00
   842 00004688 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   843 0000468C EB04                <1>     jmp short .dpfb01
   844                              <1> .dpfb00:
   845 0000468E 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   846                              <1> .dpfb01:
   847 00004692 31D2                <1>     xor edx, edx
   848 00004694 48F7F6              <1>     div rsi
   849 00004697 80C230              <1>     add dl, '0'
   850 0000469A 80FA39              <1>     cmp dl, '9'
   851 0000469D 7603                <1>     jbe .dpfb1
   852 0000469F 80C207              <1>     add dl, 'A'-'0'-10
   853                              <1> .dpfb1:
   854 000046A2 81FD08000000        <1>     cmp ebp, 8
   855 000046A8 7204                <1>     jb .dpfb10
   856 000046AA 88D3                <1>     mov bl, dl ;Add the bottom bits
   857 000046AC EB02                <1>     jmp short .dpfb11
   858                              <1> .dpfb10:
   859 000046AE 88D1                <1>     mov cl, dl    ;Save remainder byte
   860                              <1> .dpfb11:
   861 000046B0 4885C0              <1>     test rax, rax
   862 000046B3 75C9                <1>     jnz .dpfb0
   863                              <1> .dpfb2:
   864 000046B5 81FD08000000        <1>     cmp ebp, 8
   865 000046BB 7208                <1>     jb .dpfb20
   866 000046BD 88DA                <1>     mov dl, bl
   867 000046BF 48C1EB08            <1>     shr rbx, 8
   868 000046C3 EB06                <1>     jmp short .dpfb21
   869                              <1> .dpfb20:
   870 000046C5 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   871 000046C7 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   872                              <1> .dpfb21:
   873 000046CB B402                <1>     mov ah, 02h
   874 000046CD CD21                <1>     int 21h
   875 000046CF FFCD                <1>     dec ebp
   876 000046D1 75E2                <1>     jnz .dpfb2
   877                              <1>     return
    13                              <2> %%_ret:
    14 000046D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   878                              <1> 
   879                              <1> getDecimalWord:
   880                              <1> ;Works on MAX A dword in eax
   881                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   882 000046D4 31C9                <1>     xor ecx, ecx
   883 000046D6 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   884 000046D8 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   885                              <1> .dpfb0:
   886 000046DD FFC5                <1>     inc ebp
   887 000046DF 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   888 000046E3 31D2                <1>     xor edx, edx
   889 000046E5 48F7F3              <1>     div rbx
   890 000046E8 80C230              <1>     add dl, '0'
   891 000046EB 80FA39              <1>     cmp dl, '9'
   892 000046EE 7603                <1>     jbe .dpfb1
   893 000046F0 80C207              <1>     add dl, 'A'-'0'-10
   894                              <1> .dpfb1:
   895 000046F3 88D1                <1>     mov cl, dl    ;Save remainder byte
   896 000046F5 4885C0              <1>     test rax, rax
   897 000046F8 75E3                <1>     jnz .dpfb0
   898                              <1>     return
    13                              <2> %%_ret:
    14 000046FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   899                              <1> getByte:
   900                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   901 000046FB E807000000          <1>     call getNum
   902 00004700 3D00010000          <1>     cmp eax, 100h
   903 00004705 F5                  <1>     cmc
   904                              <1>     return
    13                              <2> %%_ret:
    14 00004706 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> getNum:
   906                              <1> ;Gets a number from a command line.
   907                              <1> ;Input: rsi -> String to get number from
   908                              <1> ;Output: rsi -> Char which terminated the accumulation
   909                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   910                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   911 00004707 51                  <1>     push rcx
   912 00004708 53                  <1>     push rbx
   913 00004709 31DB                <1>     xor ebx, ebx
   914 0000470B 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   915 0000470D 31C0                <1>     xor eax, eax    
   916                              <1> .lp:
   917 0000470F AC                  <1>     lodsb
   918 00004710 3C30                <1>     cmp al, "0"
   919 00004712 721B                <1>     jb .exit
   920 00004714 3C39                <1>     cmp al, "9"
   921 00004716 7717                <1>     ja .exit
   922 00004718 2C30                <1>     sub al, "0"                     ;Convert to binary 
   923 0000471A 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   924 0000471E D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   925 00004720 01C1                <1>     add ecx, eax
   926 00004722 FFC3                <1>     inc ebx
   927 00004724 81FB09000000        <1>     cmp ebx, 9
   928 0000472A 75E3                <1>     jne short .lp   ;Get next digit
   929 0000472C F9                  <1>     stc             ;Yikesaroony
   930 0000472D EB01                <1>     jmp short .exitBad
   931                              <1> .exit:
   932 0000472F F8                  <1>     clc             ;Clear CF
   933                              <1> .exitBad:
   934 00004730 89C8                <1>     mov eax, ecx
   935 00004732 5B                  <1>     pop rbx
   936 00004733 59                  <1>     pop rcx
   937 00004734 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
   938                              <1>     return
    13                              <2> %%_ret:
    14 00004737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   939                              <1> 
   940                              <1> 
   941                              <1> freezePC:
   942 00004738 488D15FDC6FFFF      <1>     lea rdx, memBad1
   943 0000473F B409                <1>     mov ah, 09h
   944 00004741 CD21                <1>     int 21h
   945                              <1> .altEP:
   946 00004743 488D151BC7FFFF      <1>     lea rdx, memBad3
   947 0000474A B409                <1>     mov ah, 09h
   948 0000474C CD21                <1>     int 21h
   949                              <1> .lp:
   950 0000474E F390                <1>     pause
   951 00004750 F4                  <1>     hlt
   952 00004751 EBFB                <1>     jmp short .lp
   953                              <1> 
   954                              <1> setDTA:
   955 00004753 50                  <1>     push rax
   956 00004754 52                  <1>     push rdx
   957 00004755 488D15BAB9FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   958 0000475C B8001A0000          <1>     mov eax, 1A00h
   959 00004761 CD21                <1>     int 21h
   960 00004763 5A                  <1>     pop rdx
   961 00004764 58                  <1>     pop rax
   962                              <1>     return
    13                              <2> %%_ret:
    14 00004765 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   963                              <1> 
   964                              <1> getDTA:
   965 00004766 488D15A9B9FFFF      <1>     lea rdx, cmdFFBlock
   966                              <1>     return
    13                              <2> %%_ret:
    14 0000476D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   967                              <1> 
   968                              <1> resetIDTentries:
   969                              <1> ;Resets the IDT entries if they were changed by dead child process
   970 0000476E 488D1571020000      <1>     lea rdx, critErrorHandler
   971 00004775 B824250000          <1>     mov eax, 2524h
   972 0000477A CD21                <1>     int 21h
   973 0000477C 488D1577010000      <1>     lea rdx, ctrlCHandler
   974 00004783 B823250000          <1>     mov eax, 2523h
   975 00004788 CD21                <1>     int 21h
   976 0000478A 488D1599CDFFFF      <1>     lea rdx, appRet
   977 00004791 B822250000          <1>     mov eax, 2522h
   978 00004796 CD21                <1>     int 21h
   979                              <1>     return
    13                              <2> %%_ret:
    14 00004798 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> ;-------------------------------
   982                              <1> ; Environment utility functions
   983                              <1> ;-------------------------------
   984                              <1> 
   985                              <1> cmpEnvVar:
   986                              <1> ;Checks that we have found the environment variable we are looking for.
   987                              <1> ;Input: rsi -> Environment var to verify the name of
   988                              <1> ;       rdi -> Environment var name to compare against
   989                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   990 00004799 56                  <1>     push rsi
   991 0000479A 57                  <1>     push rdi
   992 0000479B 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   993                              <1> .lp:
   994 0000479E AC                  <1>     lodsb               ;Pick up from user string
   995 0000479F E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   996 000047A4 3807                <1>     cmp byte [rdi], al  
   997 000047A6 7509                <1>     jne .exit
   998 000047A8 3C3D                <1>     cmp al, "="         ;Are we at the end?
   999 000047AA 7405                <1>     je .exit
  1000 000047AC 48FFC7              <1>     inc rdi
  1001 000047AF EBED                <1>     jmp short .lp
  1002                              <1> .exit:
  1003 000047B1 5F                  <1>     pop rdi
  1004 000047B2 5E                  <1>     pop rsi
  1005                              <1>     return
    13                              <2> %%_ret:
    14 000047B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1006                              <1> 
  1007                              <1> checkEnvGoodAndGet:
  1008                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1009                              <1> ;Output:
  1010                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1011                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1012                              <1> ;           rsi -> Environment pointer
  1013 000047B4 50                  <1>     push rax
  1014 000047B5 51                  <1>     push rcx
  1015 000047B6 57                  <1>     push rdi
  1016 000047B7 4150                <1>     push r8
  1017 000047B9 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1018 000047BD 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1019 000047C0 741A                <1>     jz .badExit
  1020 000047C2 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1021 000047C5 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1022                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1023 000047C8 31C0                <1>     xor eax, eax
  1024                              <1> .pathNulScan:
  1025 000047CA F2AE                <1>     repne scasb
  1026 000047CC 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1027 000047CE 740C                <1>     jz .badExit
  1028 000047D0 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1029 000047D2 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1030 000047D4 31C0                <1>     xor eax, eax
  1031 000047D6 FFC0                <1>     inc eax ;Clear the ZF
  1032 000047D8 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1033                              <1> .badExit:
  1034 000047DC 4158                <1>     pop r8
  1035 000047DE 5F                  <1>     pop rdi
  1036 000047DF 59                  <1>     pop rcx
  1037 000047E0 58                  <1>     pop rax
  1038                              <1>     return
    13                              <2> %%_ret:
    14 000047E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1039                              <1> 
  1040                              <1> 
  1041                              <1> findEnvSpace:
  1042                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1043                              <1> ; free space in the pointer and a count of free space in the environment.
  1044                              <1> ;If count is zero, pointer is not to be used.
  1045                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1046 000047E2 31C9                <1>     xor ecx, ecx
  1047 000047E4 31C0                <1>     xor eax, eax    ;Clear eax too
  1048 000047E6 51                  <1>     push rcx
  1049 000047E7 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1050 000047EC 59                  <1>     pop rcx
  1051                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000047ED 74(E1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1052 000047EF 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1053 000047F3 FFC9                <1>     dec ecx ;Make into a large counter
  1054 000047F5 4889F7              <1>     mov rdi, rsi    
  1055                              <1> .endsearch:
  1056 000047F8 F2AE                <1>     repne scasb ;Scan
  1057 000047FA 803F00              <1>     cmp byte [rdi], 0
  1058 000047FD 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1059                              <1>     ;Here we are at the end of the environment
  1060 000047FF F7D9                <1>     neg ecx
  1061 00004801 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1062 00004803 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1063 00004806 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1064 00004809 29C8                <1>     sub eax, ecx
  1065 0000480B 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1066                              <1>     return
    13                              <2> %%_ret:
    14 0000480D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1067                              <1> 
  1068                              <1> searchForEnvVar:
  1069                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1070                              <1> ;Input: rdi -> Var name to look for.
  1071                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1072 0000480E 57                  <1>     push rdi
  1073 0000480F 51                  <1>     push rcx
  1074 00004810 52                  <1>     push rdx
  1075 00004811 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1076 00004815 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1077                              <1> .varLp:
  1078 00004818 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1079 0000481B E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1080 00004820 7416                <1>     je .varFound
  1081 00004822 31C0                <1>     xor eax, eax        ;Search for a null
  1082 00004824 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1083 00004827 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1084 0000482C F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1085 0000482E 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1086 00004830 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1087 00004832 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1088 00004835 EBE1                <1>     jmp short .varLp    ;And scan again!
  1089                              <1> .varNotFound:
  1090 00004837 F9                  <1>     stc
  1091                              <1> .varFound:
  1092 00004838 59                  <1>     pop rcx
  1093 00004839 5A                  <1>     pop rdx
  1094 0000483A 5F                  <1>     pop rdi
  1095                              <1>     return
    13                              <2> %%_ret:
    14 0000483B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> 
  1097                              <1> envFree:
  1098                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1099                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1100                              <1> ; free byte of the environment!
  1101                              <1> ;Input: rsi -> Variable to free.
  1102                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1103                              <1> ;        ecx = Number of free bytes in env
  1104 0000483C 4889F7              <1>     mov rdi, rsi
  1105 0000483F 31C0                <1>     xor eax, eax
  1106                              <1> .freeLp:
  1107 00004841 803F00              <1>     cmp byte [rdi], 0
  1108 00004844 7403                <1>     je .exitLp
  1109 00004846 AA                  <1>     stosb
  1110 00004847 EBF8                <1>     jmp short .freeLp
  1111                              <1> .exitLp:
  1112                              <1> ;rdi points to the terminating null of the var we just deleted
  1113                              <1> ;rsi points to the start of the free space
  1114 00004849 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1115 0000484C 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1116 00004851 7504                <1>     jne .prepPullup
  1117 00004853 31C0                <1>     xor eax, eax
  1118 00004855 EB0E                <1>     jmp short .cleanEnv
  1119                              <1> .prepPullup:
  1120 00004857 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1121                              <1> .pullUp:
  1122 0000485A AC                  <1>     lodsb
  1123 0000485B AA                  <1>     stosb
  1124 0000485C 84C0                <1>     test al, al ;Did we pick up a zero
  1125 0000485E 75FA                <1>     jne .pullUp ;If not, keep copying
  1126 00004860 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1127 00004863 75F5                <1>     jne .pullUp
  1128                              <1> ;We are at the end of the copy!
  1129                              <1> .cleanEnv:
  1130 00004865 AA                  <1>     stosb   ;Store the famous second null
  1131 00004866 48FFCF              <1>     dec rdi ;without incrementing it!!
  1132 00004869 E807000000          <1>     call getFreeSpace
  1133 0000486E 31C0                <1>     xor eax, eax
  1134 00004870 51                  <1>     push rcx
  1135 00004871 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1136 00004873 59                  <1>     pop rcx
  1137                              <1>     return
    13                              <2> %%_ret:
    14 00004874 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1138                              <1> 
  1139                              <1> getFreeSpace:
  1140                              <1> ;Output: ecx = Number of free bytes in the environment block
  1141 00004875 56                  <1>     push rsi
  1142 00004876 57                  <1>     push rdi
  1143 00004877 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1144 0000487C 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1145 00004880 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1146 00004883 E805000000          <1>     call getEnvSize ;Get total block size
  1147 00004888 29F9                <1>     sub ecx, edi    ;Get difference!
  1148 0000488A 5F                  <1>     pop rdi
  1149 0000488B 5E                  <1>     pop rsi
  1150                              <1>     return
    13                              <2> %%_ret:
    14 0000488C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> 
  1152                              <1> getEnvSize:
  1153                              <1> ;Gets the number of bytes in the environment allocation
  1154                              <1> ;Output: ecx = Number of bytes in the environment!
  1155 0000488D 53                  <1>     push rbx
  1156 0000488E 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1157 00004892 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1158 00004895 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1159 00004898 5B                  <1>     pop rbx
  1160                              <1>     return
    13                              <2> %%_ret:
    14 00004899 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1161                              <1> 
  1162                              <1> getPtrToEndOfEnv:
  1163                              <1> ;Gets ptr to end of the environment
  1164                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1165 0000489A 50                  <1>     push rax
  1166 0000489B 51                  <1>     push rcx
  1167 0000489C 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1168 000048A0 31C0                <1>     xor eax, eax
  1169 000048A2 31C9                <1>     xor ecx, ecx
  1170 000048A4 FFC9                <1>     dec ecx
  1171                              <1> .lp:
  1172 000048A6 F2AE                <1>     repne scasb
  1173 000048A8 3807                <1>     cmp byte [rdi], al
  1174 000048AA 75FA                <1>     jne .lp
  1175 000048AC 59                  <1>     pop rcx
  1176 000048AD 58                  <1>     pop rax
  1177                              <1>     return
    13                              <2> %%_ret:
    14 000048AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1178                              <1> 
  1179                              <1> growEnvBlock:
  1180                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1181                              <1> ; newly allocated 160 byte block of the environment.
  1182                              <1> ;Returns:   CF=NC - Environment grown ok!
  1183                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1184                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1185 000048AF 50                  <1>     push rax
  1186 000048B0 53                  <1>     push rbx
  1187 000048B1 51                  <1>     push rcx
  1188 000048B2 56                  <1>     push rsi
  1189 000048B3 57                  <1>     push rdi
  1190 000048B4 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1191 000048B9 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1192 000048BE 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1193 000048C2 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1194 000048C5 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1195 000048CB 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1196 000048D1 7321                <1>     jae .tooLarge
  1197                              <1>     ;Here ZF must be NZ.
  1198 000048D3 4150                <1>     push r8
  1199 000048D5 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1200 000048D9 B8004A0000          <1>     mov eax, 4A00h
  1201 000048DE CD21                <1>     int 21h
  1202 000048E0 4158                <1>     pop r8
  1203 000048E2 720A                <1>     jc .exit
  1204                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1205                              <1>     ; so we add 160 zeros to the count of bytes
  1206 000048E4 81C1A0000000        <1>     add ecx, 0A0h
  1207 000048EA 31C0                <1>     xor eax, eax
  1208 000048EC F3AA                <1>     rep stosb
  1209                              <1> .exit:
  1210 000048EE 5F                  <1>     pop rdi
  1211 000048EF 5E                  <1>     pop rsi
  1212 000048F0 59                  <1>     pop rcx
  1213 000048F1 5B                  <1>     pop rbx
  1214 000048F2 58                  <1>     pop rax
  1215                              <1>     return
    13                              <2> %%_ret:
    14 000048F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1216                              <1> .tooLarge:
  1217 000048F4 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1218 000048F7 F9                  <1>     stc             ;Set CF
  1219 000048F8 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 000048FA F60593B7FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 00004901 7411                <1>     jz .notLoading
     4 00004903 F6058AB7FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 0000490A 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 0000490C 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 00004912 EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004914 F60579B7FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 0000491B 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000491D 84E4                <1>     test ah, ah
    17 0000491F 7424                <1>     jz .inInt23 
    18 00004921 80FC0C              <1>     cmp ah, 0Ch
    19 00004924 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004926 50                  <1>     push rax
    23 00004927 488D0512000000      <1>     lea rax, .i23Bounce
    24 0000492E 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 00004933 31C0                <1>     xor eax, eax
    26 00004935 668CC8              <1>     mov ax, cs
    27 00004938 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 0000493D 58                  <1>     pop rax
    29 0000493E 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 00004940 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 00004945 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 00004947 800D46B7FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 0000494E F6053FB7FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 00004955 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 00004957 50                  <1>     push rax
    43 00004958 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 0000495D CD21                <1>     int 21h
    45 0000495F 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 00004960 F6052DB7FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 00004967 7462                <1>     jz .notBat
    49 00004969 F60524B7FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 00004970 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 00004972 E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 00004977 488D1560BFFFFF      <1>     lea rdx, batFail
    57 0000497E E8E8F8FFFF          <1>     call printString
    58 00004983 488D1578B7FFFF      <1>     lea rdx, batYNstr
    59 0000498A 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 00004990 B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004995 CD21                <1>     int 21h
    62 00004997 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004999 8A4202              <1>     mov al, byte [rdx + 2]
    64 0000499C E8FAFAFFFF          <1>     call ucChar         ;UC using DOS
    65 000049A1 3C59                <1>     cmp al, "Y"
    66 000049A3 740E                <1>     je .killBat
    67 000049A5 3C4E                <1>     cmp al, "N"
    68 000049A7 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 000049A9 E8B6F8FFFF          <1>     call printCRLF
    74 000049AE E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 000049B3 E88BD4FFFF          <1>     call batCleanup
    77 000049B8 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 000049BA E884D4FFFF          <1>     call batCleanup
    80 000049BF 8025CEB6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 000049C6 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 000049CB 66813DC3B6FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 000049D4 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 000049D6 E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 000049DB 8025B2B6FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 000049E2 F9                  <1>     stc     ;Set CF to kill the task
    91 000049E3 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000049E6 53                  <1>     push rbx
    25 000049E7 51                  <1>     push rcx
    26 000049E8 52                  <1>     push rdx
    27 000049E9 57                  <1>     push rdi
    28 000049EA 56                  <1>     push rsi
    29 000049EB E80F020000          <1>     call errSwapHdls
    30 000049F0 FC                  <1>     cld         ;Make String ops go forward
    31 000049F1 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000049F4 88059BB6FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 000049FA 488D1580BEFFFF      <1>     lea rdx, crlf
    34 00004A01 E865F8FFFF          <1>     call printString    ;Trashes ax
    35 00004A06 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004A09 53                  <1>     push rbx        ;Save the action bitfield
    38 00004A0A 56                  <1>     push rsi        ;Save the driver pointer
    39 00004A0B B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 00004A10 CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 00004A12 488D35FAC5FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004A19 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004A1C 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 00004A1E 66A5                <1>     movsw
    51 00004A20 A4                  <1>     movsb
    52 00004A21 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004A24 5E                  <1>     pop rsi
    54 00004A25 5B                  <1>     pop rbx
    55 00004A26 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004A2C 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 00004A2E 81FF24000000        <1>     cmp edi, errShrFul
    60 00004A34 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 00004A36 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 00004A3B CD21                <1>     int 21h
    65 00004A3D 3CFF                <1>     cmp al, -1
    66 00004A3F 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 00004A41 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 00004A43 B405                <1>     mov ah, 05h         ;Get the string we need
    69 00004A45 CD21                <1>     int 21h
    70 00004A47 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 00004A49 4889FA              <1>     mov rdx, rdi        
    76 00004A4C 50                  <1>     push rax            
    77 00004A4D 31C0                <1>     xor eax, eax
    78 00004A4F 89C1                <1>     mov ecx, eax
    79 00004A51 FFC9                <1>     dec ecx
    80 00004A53 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 00004A55 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 00004A59 E80DF8FFFF          <1>     call printString 
    83 00004A5E C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 00004A62 58                  <1>     pop rax
    85 00004A63 84C0                <1>     test al, al ;Is this zero?
    86 00004A65 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 00004A67 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 00004A6C 488D15D5C5FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 00004A73 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 00004A75 BA1F000000          <1>     mov edx, errGF
    98 00004A7A 81FF24000000        <1>     cmp edi, errShrFul
    99 00004A80 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 00004A83 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 00004A88 81FF13000000        <1>     cmp edi, drvErrShft
   103 00004A8E 0F42FA              <1>     cmovb edi, edx
   104 00004A91 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004A97 57                  <1>     push rdi    ;Save the error code for checking
   106 00004A98 488D156EC4FFFF      <1>     lea rdx, errMsgPtrTbl
   107 00004A9F 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 00004AA2 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004AA6 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004AA9 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004AAA E8BCF7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 00004AAF 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004AB5 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004AB7 488D15A8C5FFFF      <1>     lea rdx, readMsg
   120 00004ABE 488D3DB0C5FFFF      <1>     lea rdi, writeMsg
   121 00004AC5 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004AC8 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004ACC E89AF7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 00004AD1 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004AD4 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004ADA 488D157EC5FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 00004AE1 E885F7FFFF          <1>     call printString
   130 00004AE6 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004AE8 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004AEB B402                <1>     mov ah, 02h ;Print char in dl
   133 00004AED CD21                <1>     int 21h
   134                              <1>     
   135 00004AEF 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 00004AF1 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004AF6 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004AFB 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 00004AFD B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 00004AFF E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004B04 E85BF7FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004B09 488D1574C5FFFF      <1>     lea rdx, abortMsg
   149 00004B10 E856F7FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004B15 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004B18 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004B1A 488D157BC5FFFF      <1>     lea rdx, betweenMsg
   154 00004B21 E845F7FFFF          <1>     call printString
   155 00004B26 488D1564C5FFFF      <1>     lea rdx, retryMsg
   156 00004B2D E839F7FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 00004B32 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 00004B35 7418                <1>     jz .userFail
   160 00004B37 488D155EC5FFFF      <1>     lea rdx, betweenMsg
   161 00004B3E E828F7FFFF          <1>     call printString
   162 00004B43 488D1540C5FFFF      <1>     lea rdx, ignoreMsg
   163 00004B4A E81CF7FFFF          <1>     call printString
   164                              <1> .userFail:
   165 00004B4F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 00004B52 7418                <1>     jz .userMsgEnd
   167 00004B54 488D1541C5FFFF      <1>     lea rdx, betweenMsg
   168 00004B5B E80BF7FFFF          <1>     call printString
   169 00004B60 488D1530C5FFFF      <1>     lea rdx, failMsg
   170 00004B67 E8FFF6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 00004B6C 488D152CC5FFFF      <1>     lea rdx, endMsg
   173 00004B73 E8F3F6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 00004B78 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 00004B7A 488D3D21C5FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 00004B81 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 00004B86 CD21                <1>     int 21h ;Get char in al
   179 00004B88 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 00004B8A 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 00004B8C 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 00004B8E AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 00004B8F 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 00004B91 FFC1                <1>     inc ecx
   186 00004B93 81F904000000        <1>     cmp ecx, 4
   187 00004B99 75F3                <1>     jne .uip1
   188 00004B9B E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004BA0 E8BFF6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004BA5 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004BA7 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004BA9 7427                <1>     je .cehExit
   195 00004BAB 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004BAD 740F                <1>     je .viIgnore
   197 00004BAF 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004BB1 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004BB3 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004BB6 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004BBC EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004BBE F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004BC1 0F843DFFFFFF        <1>     jz .userInput
   206 00004BC7 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004BC9 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004BCC 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004BD2 E845000000          <1>     call errRetHdls
   212 00004BD7 5E                  <1>     pop rsi
   213 00004BD8 5F                  <1>     pop rdi
   214 00004BD9 5A                  <1>     pop rdx
   215 00004BDA 59                  <1>     pop rcx
   216 00004BDB 5B                  <1>     pop rbx
   217 00004BDC 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004BDE C605B0B4FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004BE5 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004BEA 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004BF1 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004BF2 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004BF4 B402                <1>     mov ah, 02h
   226 00004BF6 CD21                <1>     int 21h ;Print char
   227 00004BF8 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004BFA E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004BFF 50                  <1>     push rax
   236 00004C00 53                  <1>     push rbx
   237 00004C01 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004C06 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004C09 66890587B4FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004C10 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004C14 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004C16 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004C19 5B                  <1>     pop rbx
   244 00004C1A 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004C1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004C1C 50                  <1>     push rax
   250 00004C1D 53                  <1>     push rbx
   251 00004C1E E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004C23 0FB7056DB4FFFF      <1>     movzx eax, word [errHdls]
   253 00004C2A 66C70564B4FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004C33 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004C36 5B                  <1>     pop rbx
   256 00004C37 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004C38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004C39 50                  <1>     push rax        ;Save rax
   263 00004C3A B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004C3F CD21                <1>     int 21h
   265 00004C41 58                  <1>     pop rax
   266 00004C42 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004C48 7605                <1>     jbe .pspJftExit
   268 00004C4A 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004C4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004C4F 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004C53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004C54 B430                <1>     mov ah, 30h
     4 00004C56 CD21                <1>     int 21h
     5 00004C58 3C01                <1>     cmp al, 01h ;Version 1
     6 00004C5A 760D                <1>     jbe .okVersion
     7 00004C5C 488D1507050000      <1>     lea rdx, badVerStr
     8 00004C63 B409                <1>     mov ah, 09h
     9 00004C65 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004C67 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004C69 800D24B4FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004C70 4C890598B3FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004C77 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004C7C CD21                <1>     int 21h
    19 00004C7E 3CFF                <1>     cmp al, -1
    20 00004C80 7412                <1>     je .skipSwitch
    21 00004C82 8815A2B3FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004C88 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004C8B 7507                <1>     jne .skipSwitch
    24 00004C8D C60595B3FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004C94 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004C99 488D158BB3FFFF      <1>     lea rdx, ctryData
    28 00004CA0 CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004CA2 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004CA9 4889E3              <1>     mov rbx, rsp
    33 00004CAC 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004CAF 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004CB3 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004CB6 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004CBB 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004CBE CD21                <1>     int 21h
    39 00004CC0 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004CC2 E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004CC7 E81D030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004CCC E89DFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004CD1 F605BCB3FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004CD8 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004CDE 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004CE2 488D15FDFCFFFF      <1>     lea rdx, critErrorHandler
    51 00004CE9 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004CED 488D1506FCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004CF4 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004CF8 488D152BC8FFFF      <1>     lea rdx, appRet
    55 00004CFF 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004D03 488D15BECDFFFF      <1>     lea rdx, int2Eh
    57 00004D0A B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004D0F CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004D11 E85DF7FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004D16 0441                <1>     add al, "A"
    62 00004D18 8805C4C1FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004D1E 488D15BDC1FFFF      <1>     lea rdx, autoSpec
    65 00004D25 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004D2A CD21                <1>     int 21h
    67 00004D2C 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004D2E 89C3                <1>     mov ebx, eax
    71 00004D30 B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004D35 CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004D37 31D2                <1>     xor edx, edx
    75 00004D39 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004D3B E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004D40 488D153ABBFFFF      <1>     lea rdx, crlf
    80 00004D47 B409                <1>     mov ah, 09h
    81 00004D49 CD21                <1>     int 21h
    82 00004D4B 800D42B3FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004D52 E82FE2FFFF          <1>     call time.init
    84 00004D57 E87CE0FFFF          <1>     call date.init
    85 00004D5C 802531B3FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004D63 488D1517BBFFFF      <1>     lea rdx, crlf
    87 00004D6A B409                <1>     mov ah, 09h
    88 00004D6C CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004D6E F6051FB3FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004D75 7531                <1>     jnz .singleCom
    94 00004D77 488D1578030000      <1>     lea rdx, initString
    95 00004D7E B409                <1>     mov ah, 09h
    96 00004D80 CD21                <1>     int 21h ;Print init string
    97 00004D82 E8AEEAFFFF          <1>     call version.printVersionNumber
    98 00004D87 488D159E030000      <1>     lea rdx, initString2
    99 00004D8E B409                <1>     mov ah, 09h
   100 00004D90 CD21                <1>     int 21h ;Print init string
   101 00004D92 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004D94 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004D99 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004D9C 8025F1B2FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004DA3 E9FEC2FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004DA8 803DB3B3FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004DAF 0F849AECFFFF        <1>     je exit
   112 00004DB5 31D2                <1>     xor edx, edx
   113 00004DB7 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004DB9 EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004DBB 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004DC2 4881C340060000      <1>     add rbx, stackSize
   120 00004DC9 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004DD0 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004DD4 48C1E304            <1>     shl rbx, 4
   123 00004DD8 48891D26B2FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004DDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004DE0 E88EF6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004DE5 0441                <1>     add al, "A"
   144 00004DE7 B43A                <1>     mov ah, ":"
   145 00004DE9 488D3D6DB8FFFF      <1>     lea rdi, comspecDir
   146 00004DF0 66AB                <1>     stosw   ;Store drive specifier
   147 00004DF2 0FB60530B2FFFF      <1>     movzx eax, byte [pathSep]
   148 00004DF9 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004DFB E853F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004E00 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004E07 E8AAF6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004E0C AC                  <1>     lodsb
   155 00004E0D 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004E10 3C0D                <1>     cmp al, CR
   157 00004E12 0F847C010000        <1>     je .endScan
   158 00004E18 3A050CB2FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004E1E 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004E20 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004E23 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004E24 E872F6FFFF          <1>     call ucChar
   164 00004E29 3C43                <1>     cmp al, "C"
   165 00004E2B 0F842F010000        <1>     je .switchStr
   166 00004E31 3C50                <1>     cmp al, "P"
   167 00004E33 0F8403010000        <1>     je .switchPerma
   168 00004E39 3C45                <1>     cmp al, "E"
   169 00004E3B 0F84B0000000        <1>     je .switchEnv
   170 00004E41 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004E44 488D151ABCFFFF      <1>     lea rdx, badParm
   173 00004E4B EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004E4D E8F0F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004E52 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004E55 488D1534B6FFFF      <1>     lea rdx, searchSpec
   180 00004E5C B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004E61 B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004E66 CD21                <1>     int 21h
   183 00004E68 7319                <1>     jnc .charOrDir
   184                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   185 00004E6A 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   186 00004E6C 30C0                <1>     xor al, al
   187 00004E6E 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   188 00004E73 741C                <1>     je .dir ;If so, root dir specified, all oki!
   189                              <1> .badSpec:
   190                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   191 00004E75 488D1506030000      <1>     lea rdx, badCmdDir
   192                              <1> .bs0:
   193 00004E7C E8EAF3FFFF          <1>     call printString
   194                              <1> .plhop:
   195 00004E81 EB84                <1>     jmp short .parseLp
   196                              <1> ;-----------------------------------------------------------------
   197                              <1> ;Check if a char or directory here
   198                              <1> .charOrDir:
   199 00004E83 8A05A2B2FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   200 00004E89 2450                <1>     and al, dirCharDev | dirDirectory
   201 00004E8B 74E8                <1>     jz .badSpec
   202 00004E8D A840                <1>     test al, dirCharDev
   203 00004E8F 7525                <1>     jnz .charDev
   204                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   205                              <1> .dir:
   206 00004E91 56                  <1>     push rsi
   207 00004E92 488D35F7B5FFFF      <1>     lea rsi, searchSpec 
   208 00004E99 488D3DBDB7FFFF      <1>     lea rdi, comspecDir
   209 00004EA0 E8E2F5FFFF          <1>     call strcpy2
   210 00004EA5 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   211 00004EAA CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   212 00004EAC 5E                  <1>     pop rsi
   213 00004EAD C60512030000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   214 00004EB4 EBCB                <1>     jmp short .plhop
   215                              <1> ;-----------------------------------------------------------------
   216                              <1> ;Handle char dev here
   217                              <1> .charDev:
   218                              <1> ;Check the name is max 8 chars in length
   219 00004EB6 488D3DD3B5FFFF      <1>     lea rdi, searchSpec
   220 00004EBD E8CFF5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   221 00004EC2 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   222 00004EC8 771E                <1>     ja .badChar
   223 00004ECA 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   224 00004ECB 488D35BEB5FFFF      <1>     lea rsi, searchSpec
   225 00004ED2 488D3D00C0FFFF      <1>     lea rdi, devName
   226 00004ED9 E89AF5FFFF          <1>     call strcpy ;Copy this string over
   227 00004EDE 5E                  <1>     pop rsi
   228 00004EDF C605E1020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   229                              <1> .plhop1:
   230 00004EE6 EB99                <1>     jmp short .plhop    ;parseLp
   231                              <1> .badChar:
   232 00004EE8 488D1529BDFFFF      <1>     lea rdx, badDev
   233                              <1> .bs1:
   234 00004EEF EB8B                <1>     jmp short .bs0
   235                              <1> ;-----------------------------------------------------------------
   236                              <1> .switchEnv:
   237 00004EF1 AC                  <1>     lodsb
   238 00004EF2 48FFCE              <1>     dec rsi
   239 00004EF5 3C3A                <1>     cmp al, ":"
   240 00004EF7 0F8547FFFFFF        <1>     jne .badparm
   241 00004EFD 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   242 00004F00 E8B1F5FFFF          <1>     call skipDelimiters
   243 00004F05 AC                  <1>     lodsb       ;Get the first non-delimiter
   244 00004F06 48FFCE              <1>     dec rsi     ;Point back at it
   245 00004F09 3C0D                <1>     cmp al, CR
   246 00004F0B 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   247                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   248 00004F11 E8F1F7FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   249 00004F16 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   250 00004F1C 3D00800000          <1>     cmp eax, 8000h
   251 00004F21 7710                <1>     ja .badEnv
   252 00004F23 3DA0000000          <1>     cmp eax, 0A0h
   253 00004F28 7209                <1>     jb .badEnv
   254 00004F2A 66890597020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   255                              <1> .plhop2:
   256 00004F31 EBB3                <1>     jmp short .plhop1  ;parseLp
   257                              <1> .badEnv:
   258 00004F33 488D1571020000      <1>     lea rdx, badEnvSz
   259 00004F3A EBB3                <1>     jmp short .bs1
   260                              <1> ;-----------------------------------------------------------------
   261                              <1> .switchPerma:
   262 00004F3C AC                  <1>     lodsb   ;Get the second char after the P
   263 00004F3D 48FFCE              <1>     dec rsi ;Point back at it
   264 00004F40 3C0D                <1>     cmp al, CR
   265 00004F42 7413                <1>     je .spEmbCr ;Allow CR after the P
   266 00004F44 3A05E0B0FFFF        <1>     cmp al, byte [switchChar]
   267 00004F4A 740B                <1>     je .spEmbCr ;Allow switch char after P
   268 00004F4C E873F5FFFF          <1>     call isALdelimiter
   269 00004F51 0F85EDFEFFFF        <1>     jne .badparm
   270                              <1> .spEmbCr:
   271 00004F57 800D36B1FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   272 00004F5E EBD1                <1>     jmp short .plhop2  ;parseLp
   273                              <1> ;-----------------------------------------------------------------
   274                              <1> .switchStr:
   275 00004F60 AC                  <1>     lodsb       ;Get the char after the C
   276 00004F61 48FFCE              <1>     dec rsi     ;Point back at it
   277 00004F64 3C0D                <1>     cmp al, CR
   278 00004F66 740B                <1>     je .ssembCr         ;Embedded CR ok
   279 00004F68 E857F5FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   280 00004F6D 0F85D1FEFFFF        <1>     jne .badparm
   281                              <1> .ssembCr:
   282 00004F73 E83EF5FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   283 00004F78 488D3DE4B1FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   284                              <1> .ssLp:
   285 00004F7F AC                  <1>     lodsb
   286 00004F80 AA                  <1>     stosb
   287 00004F81 3C0D                <1>     cmp al, CR
   288 00004F83 7408                <1>     je .ssOk
   289 00004F85 FE05D7B1FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   290 00004F8B EBF2                <1>     jmp short .ssLp
   291                              <1> .ssOk:
   292 00004F8D 800D00B1FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   293                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   294                              <1> ;-----------------------------------------------------------------
   295                              <1> .endScan:
   296                              <1> ;Now copy our name to the end of the dir specified
   297 00004F94 488D3DC2B6FFFF      <1>     lea rdi, comspecDir
   298 00004F9B E8F1F4FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   299 00004FA0 FFC9                <1>     dec ecx ;Point to null terminator
   300 00004FA2 8A0581B0FFFF        <1>     mov al, byte [pathSep]
   301 00004FA8 4801CF              <1>     add rdi, rcx    ;Now point to the null
   302 00004FAB 3847FF              <1>     cmp byte [rdi - 1], al
   303 00004FAE 7401                <1>     je .esSkipPathsep
   304 00004FB0 AA                  <1>     stosb
   305                              <1> .esSkipPathsep:
   306 00004FB1 488D3549BFFFFF      <1>     lea rsi, cspec
   307 00004FB8 E8BBF4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   308 00004FBD E812000000          <1>     call .replacestdio
   309                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   310                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   311 00004FC2 F605CBB0FFFF04      <1>     test byte [statFlg1], inSingle
   312                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004FC9 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004FCB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   313 00004FCC 8025C1B0FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004FD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .replacestdio:
   316 00004FD4 F605EC010000FF      <1>     test byte [initNewDev], -1
   317                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004FDB 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 00004FDD 488D15F5BEFFFF      <1>     lea rdx, devName
   319 00004FE4 E901E1FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   320                              <1> 
   321                              <1> doEnv:
   322                              <1> ;Will do the environment adjustments as needed
   323 00004FE9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   324 00004FED 4885F6              <1>     test rsi, rsi
   325 00004FF0 7447                <1>     jz .noInitEnv
   326 00004FF2 66813DCD0100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   327                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004FFB 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   328                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   329                              <1> ;copy the environment from the master and free the original block.
   330                              <1> ;If the block we allocate is smaller than the original block, 
   331                              <1> ; print out of env space and stop there
   332                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   333                              <1> ; comspec. 
   334 00004FFD F605C2010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   335 00005004 752E                <1>     jnz .prepNewEnv
   336                              <1>     ;Else, we create new alloc and copy master into it
   337 00005006 E867000000          <1>     call .allocEnv
   338 0000500B 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   339 0000500E E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   340 00005013 57                  <1>     push rdi            ;Save the start of the environment block
   341 00005014 E893000000          <1>     call .cpEnv         ;Copy the environment
   342 00005019 5F                  <1>     pop rdi
   343 0000501A E805000000          <1>     call .freeCurrentEnv
   344 0000501F 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   345                              <1>     return  
    13                              <2> %%_ret:
    14 00005023 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> .freeCurrentEnv:
   347 00005024 4150                <1>     push r8
   348 00005026 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   349 0000502A B800490000          <1>     mov eax, 4900h
   350 0000502F CD21                <1>     int 21h
   351 00005031 4158                <1>     pop r8
   352                              <1>     return
    13                              <2> %%_ret:
    14 00005033 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .prepNewEnv:
   354 00005034 E8EBFFFFFF          <1>     call .freeCurrentEnv
   355                              <1> .noInitEnv:
   356                              <1> ;Build the initial block.
   357 00005039 E834000000          <1>     call .allocEnv
   358 0000503E 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   359 00005041 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   360 00005045 57                  <1>     push rdi            ;Save the environment ptr!
   361 00005046 488D35A5BEFFFF      <1>     lea rsi, pathEVar
   362 0000504D E826F4FFFF          <1>     call strcpy
   363 00005052 488D359FBEFFFF      <1>     lea rsi, comspecEVar
   364 00005059 E81AF4FFFF          <1>     call strcpy
   365 0000505E 48FFCF              <1>     dec rdi ;Write over the terminating null
   366 00005061 488D35F5B5FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   367 00005068 E80BF4FFFF          <1>     call strcpy 
   368 0000506D 30C0                <1>     xor al, al
   369 0000506F AA                  <1>     stosb   ;Store the second terminating null
   370 00005070 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   371                              <1>     return
    13                              <2> %%_ret:
    14 00005071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> .allocEnv:
   374                              <1> ;Output: rax -> Ptr to the environment block. 
   375                              <1> ;   If anything goes wrong, error message and exit the shell!
   376 00005072 0FB71D4F010000      <1>     movzx ebx, word [initEnvSz]
   377 00005079 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   378 0000507B 750C                <1>     jnz .goAlloc
   379 0000507D BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   380 00005082 66891D3F010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   381                              <1> .goAlloc:
   382 00005089 81C30F000000        <1>     add ebx, 0Fh
   383 0000508F C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   384 00005092 B800480000          <1>     mov eax, 4800h
   385 00005097 CD21                <1>     int 21h
   386                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00005099 73(71)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   387 0000509B 488D159ABDFFFF      <1>     lea rdx, memBad1
   388 000050A2 E8C4F1FFFF          <1>     call printString
   389 000050A7 E9BAE9FFFF          <1>     jmp exit.ouch 
   390                              <1> 
   391                              <1> .cpEnv:
   392                              <1> ;Copies the environment
   393                              <1> ;Input: rsi -> Source to copy from
   394                              <1> ;       rdi -> Destination to copy to
   395 000050AC 0FB70D15010000      <1>     movzx ecx, word [initEnvSz]
   396                              <1> .lp:
   397 000050B3 AC                  <1>     lodsb
   398 000050B4 AA                  <1>     stosb
   399 000050B5 84C0                <1>     test al, al
   400 000050B7 750A                <1>     jnz .notNul
   401 000050B9 3806                <1>     cmp byte [rsi], al
   402 000050BB 7506                <1>     jnz .notNul
   403                              <1>     ;Here, we have encountered our double null!
   404 000050BD FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   405 000050BF 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   406 000050C1 AA                  <1>     stosb
   407                              <1>     return
    13                              <2> %%_ret:
    14 000050C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> .notNul:
   409 000050C3 FFC9                <1>     dec ecx ;One less char to copy over
   410 000050C5 75EC                <1>     jnz .lp
   411                              <1> .err:
   412 000050C7 4881EF02000000      <1>     sub rdi, 2
   413 000050CE 488D1584B8FFFF      <1>     lea rdx, noEnvSpace
   414 000050D5 E891F1FFFF          <1>     call printString
   415 000050DA 31C0                <1>     xor eax, eax
   416 000050DC 66AB                <1>     stosw   ;Store 0 word
   417                              <1>     return
    13                              <2> %%_ret:
    14 000050DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> getMasterEnv:
   420                              <1> ;Walks the psp chain to the first self parent.
   421                              <1> ;Output: rsi -> Environment of the first self-parent program
   422 000050DF 4150                <1>     push r8
   423                              <1> .lp:
   424 000050E1 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   425 000050E5 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   426 000050E8 7405                <1>     je .exit
   427 000050EA 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   428 000050ED EBF2                <1>     jmp short .lp
   429                              <1> .exit:
   430 000050EF 4158                <1>     pop r8
   431 000050F1 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   432                              <1>     return
    13                              <2> %%_ret:
    14 000050F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> 
   435                              <1> ;Loader Data here
   436                              <1> initString: 
   437 000050F6 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   437 000050FF 66696320436F6D7075- <1>
   437 00005108 746572205265736561- <1>
   437 00005111 726368285229205343- <1>
   437 0000511A 502F444F5328522920- <1>
   437 00005123 56657273696F6E2024  <1>
   438                              <1> initString2:
   439 0000512C 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",
   439 00005135 202020284329436F70- <1>
   439 0000513E 797269676874205363- <1>
   439 00005147 69656E746966696320- <1>
   439 00005150 436F6D707574657220- <1>
   439 00005159 526573656172636820- <1>
   439 00005162 323032342E          <1>
   440 00005167 0D0A24              <1>     db CR,LF,"$"
   441 0000516A 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   441 00005173 20444F532076657273- <1>
   441 0000517C 696F6E0D0A24        <1>
   442 00005182 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   442 0000518B 20434F4D4D414E4420- <1>
   442 00005194 736561726368206469- <1>
   442 0000519D 726563746F72792062- <1>
   442 000051A6 61640D0A24          <1>
   443 000051AB 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   443 000051B4 6E7669726F6E6D656E- <1>
   443 000051BD 742053697A650D0A24  <1>
   444 000051C6 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   445 000051C7 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   446 000051C8 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

