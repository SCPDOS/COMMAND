     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B3 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B4 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    49 000000BC 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    49 000000C5 000000000000000000- <1>
    49 000000CE 000000000000000000- <1>
    49 000000D7 000000000000000000- <1>
    49 000000E0 000000000000000000- <1>
    49 000000E9 000000000000000000- <1>
    49 000000F2 000000000000000000- <1>
    49 000000FB 000000000000000000- <1>
    49 00000104 00000000000000      <1>
    50 0000010B 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    50 00000114 000000000000000000- <1>
    50 0000011D 000000000000000000- <1>
    50 00000126 000000000000000000- <1>
    50 0000012F 000000000000000000- <1>
    50 00000138 000000000000000000- <1>
    50 00000141 000000000000000000- <1>
    50 0000014A 000000000000000000- <1>
    50 00000153 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 0000015A 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000163 00000000000000      <1>
    56 0000016A 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000173 000000000000000000- <1>
    56 0000017C 000000000000000000- <1>
    56 00000185 000000000000000000- <1>
    56 0000018E 00000000000000      <1>
    57                              <1> 
    58 00000195 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019E 000000000000000000- <1>
    58 000001A7 000000000000000000- <1>
    58 000001B0 0000000000          <1>
    59                              <1> 
    60 000001B5 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BE 000000000000000000- <1>
    60 000001C7 000000000000000000- <1>
    60 000001D0 000000000000000000- <1>
    60 000001D9 000000000000000000- <1>
    60 000001E2 000000000000000000- <1>
    60 000001EB 000000000000000000- <1>
    60 000001F4 000000000000000000- <1>
    60 000001FD 000000000000000000- <1>
    60 00000206 000000000000000000- <1>
    60 0000020F 000000000000000000- <1>
    60 00000218 000000000000000000- <1>
    60 00000221 000000000000000000- <1>
    60 0000022A 000000000000000000- <1>
    60 00000233 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    62 00000237 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 00000240 000000000000000000- <1>
    62 00000249 000000000000000000- <1>
    62 00000252 000000000000000000- <1>
    62 0000025B 000000000000000000- <1>
    62 00000264 000000000000000000- <1>
    62 0000026D 000000000000000000- <1>
    62 00000276 000000000000000000- <1>
    62 0000027F 000000000000000000- <1>
    62 00000288 000000000000000000- <1>
    62 00000291 000000000000000000- <1>
    62 0000029A 000000000000000000- <1>
    62 000002A3 000000000000000000- <1>
    62 000002AC 000000000000000000- <1>
    62 000002B5 00000000            <1>
    63 000002B9 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C2 000000000000000000- <1>
    63 000002CB 000000000000000000- <1>
    63 000002D4 000000000000000000- <1>
    63 000002DD 000000000000000000- <1>
    63 000002E6 000000000000000000- <1>
    63 000002EF 000000000000000000- <1>
    63 000002F8 000000000000000000- <1>
    63 00000301 000000000000000000- <1>
    63 0000030A 000000000000000000- <1>
    63 00000313 000000000000000000- <1>
    63 0000031C 000000000000000000- <1>
    63 00000325 000000000000000000- <1>
    63 0000032E 000000000000000000- <1>
    63 00000337 00000000            <1>
    64 0000033B 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000344 000000000000000000- <1>
    64 0000034D 000000000000000000- <1>
    64 00000356 000000000000000000- <1>
    64 0000035F 000000000000000000- <1>
    64 00000368 000000000000000000- <1>
    64 00000371 000000000000000000- <1>
    64 0000037A 000000000000000000- <1>
    64 00000383 00000000000000      <1>
    65 0000038A 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000393 0000000000          <1>
    66                              <1> 
    67 00000398 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 000003A1 000000000000000000- <1>
    67 000003AA 000000000000000000- <1>
    67 000003B3 000000000000000000- <1>
    67 000003BC 000000000000000000- <1>
    67 000003C5 000000000000000000- <1>
    67 000003CE 000000000000000000- <1>
    67 000003D7 000000000000000000- <1>
    67 000003E0 00000000000000      <1>
    68 000003E7 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003F0 000000000000000000- <1>
    68 000003F9 000000000000000000- <1>
    68 00000402 000000000000000000- <1>
    68 0000040B 000000000000000000- <1>
    68 00000414 000000000000000000- <1>
    68 0000041D 000000000000000000- <1>
    68 00000426 000000000000000000- <1>
    68 0000042F 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000436 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043F 000000000000000000- <1>
    71 00000448 000000000000000000- <1>
    71 00000451 000000000000000000- <1>
    71 0000045A 000000000000000000- <1>
    71 00000463 000000000000000000- <1>
    71 0000046C 000000000000000000- <1>
    71 00000475 000000000000000000- <1>
    71 0000047E 00000000000000      <1>
    72 00000485 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048E 000000000000000000- <1>
    72 00000497 000000000000000000- <1>
    72 000004A0 000000000000000000- <1>
    72 000004A9 000000000000000000- <1>
    72 000004B2 000000000000000000- <1>
    72 000004BB 000000000000000000- <1>
    72 000004C4 000000000000000000- <1>
    72 000004CD 00000000000000      <1>
    73                              <1> 
    74 000004D4 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DC 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E4 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004ED 000000000000000000- <1>
    79 000004F6 000000000000000000- <1>
    79 000004FF 000000000000000000- <1>
    79 00000508 000000000000000000- <1>
    79 00000511 000000000000000000- <1>
    79 0000051A 000000000000000000- <1>
    79 00000523 000000000000000000- <1>
    79 0000052C 000000000000000000- <1>
    79 00000535 000000000000000000- <1>
    79 0000053E 000000000000000000- <1>
    79 00000547 000000000000000000- <1>
    79 00000550 000000000000000000- <1>
    79 00000559 000000000000000000- <1>
    79 00000562 000000000000000000- <1>
    79 0000056B 000000000000000000- <1>
    79 00000574 000000000000000000- <1>
    79 0000057D 000000000000000000- <1>
    79 00000586 000000000000000000- <1>
    79 0000058F 000000000000000000- <1>
    79 00000598 000000000000000000- <1>
    79 000005A1 000000000000000000- <1>
    79 000005AA 000000000000000000- <1>
    79 000005B3 000000000000000000- <1>
    79 000005BC 000000000000000000- <1>
    79 000005C5 000000000000000000- <1>
    79 000005CE 000000000000000000- <1>
    79 000005D7 000000000000000000- <1>
    79 000005E0 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E8 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E9 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005EA 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    88 000005EE 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005EF 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F8 000000000000000000- <1>
    89 00000601 000000000000000000- <1>
    89 0000060A 000000000000000000- <1>
    89 00000613 000000000000000000- <1>
    89 0000061C 000000000000000000- <1>
    89 00000625 000000000000000000- <1>
    89 0000062E 000000000000000000- <1>
    89 00000637 000000000000000000- <1>
    89 00000640 000000000000000000- <1>
    89 00000649 000000000000000000- <1>
    89 00000652 000000000000000000- <1>
    89 0000065B 000000000000000000- <1>
    89 00000664 000000000000000000- <1>
    89 0000066D 00000000            <1>
    90 00000671 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 0000067A 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 00000681 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 00000682 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000688 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000689 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 00000691 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 00000694 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000698 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006AD 00                  <1> td1 db 0    ;Minutes/Year
   107 000006AE 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AF 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006B0 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006B1 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006BA 000000000000000000- <1>
   113 000006C3 000000000000000000- <1>
   113 000006CC 000000000000000000- <1>
   113 000006D5 000000000000000000- <1>
   113 000006DE 000000000000000000- <1>
   113 000006E7 000000000000000000- <1>
   113 000006F0 000000000000000000- <1>
   113 000006F9 000000000000000000- <1>
   113 00000702 000000000000000000- <1>
   113 0000070B 000000000000000000- <1>
   113 00000714 000000000000000000- <1>
   113 0000071D 000000000000000000- <1>
   113 00000726 000000000000000000- <1>
   113 0000072F 00000000            <1>
   114 00000733 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 0000073C 000000000000000000- <1>
   114 00000745 000000000000000000- <1>
   114 0000074E 000000000000000000- <1>
   114 00000757 000000000000000000- <1>
   114 00000760 000000000000000000- <1>
   114 00000769 000000000000000000- <1>
   114 00000772 000000000000000000- <1>
   114 0000077B 000000000000000000- <1>
   114 00000784 000000000000000000- <1>
   114 0000078D 000000000000000000- <1>
   114 00000796 000000000000000000- <1>
   114 0000079F 000000000000000000- <1>
   114 000007A8 000000000000000000- <1>
   114 000007B1 00000000            <1>
   115 000007B5 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   116 000007BD 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   117 000007C5 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007CE 2020                <1>
   118                              <1> ;Copy vars
   119 000007D0 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   120 000007D1 FFFF                <1> sourceHdl   dw -1
   121 000007D3 FFFF                <1> destHdl     dw -1
   122 000007D5 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   123 000007D7 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   124 000007DF 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   125 000007E1 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   126 000007E5 00                  <1> bCpFlg      db 0    ;Copy state flag
   127                              <1> 
   128                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file. Else, binary
   129                              <1> ascDes      equ 2   ;Set if add ^Z at end of file. Clear if not!
   130                              <1> wcSrc       equ 4   ;Set if wc's in source pattern. Display source file names.
   131                              <1> noWcDes     equ 8   ;Single destination, not dir 
   132                              <1> mod1Cpy     equ 10h ;Set if copying files to new dir with same names
   133                              <1> mod2Cpy     equ 20h ;Set if copying files with new names
   134                              <1> mod3Cpy     equ 40h ;Set if dflt cat ASCII files to a single destination
   135                              <1> 
   136                              <1> ;Environment manipulation vars
   137 000007E6 0000                <1> envVarSz        dw 0    ;Env var size
   138 000007E8 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007EA 03444952            <1>     db 3, "DIR"
     8 000007EE DF1A                <1>     dw dir - startLbl
     9                              <1> 
    10 000007F0 024344              <1>     db 2, "CD"
    11 000007F3 CF1F                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007F5 054348444952        <1>     db 5, "CHDIR"
    14 000007FB CF1F                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007FD 024D44              <1>     db 2, "MD"
    17 00000800 4A20                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000802 054D4B444952        <1>     db 5, "MKDIR"
    20 00000808 4A20                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000080A 025244              <1>     db 2, "RD"
    23 0000080D 9320                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000080F 05524D444952        <1>     db 5, "RMDIR"
    26 00000815 9320                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000817 0344454C            <1>     db 3, "DEL"
    29 0000081B E727                <1>     dw erase - startLbl
    30                              <1> 
    31 0000081D 054552415345        <1>     db 5, "ERASE"
    32 00000823 E727                <1>     dw erase - startLbl
    33                              <1> 
    34 00000825 0444415445          <1>     db 4, "DATE"
    35 0000082A 2A29                <1>     dw date - startLbl
    36                              <1> 
    37 0000082C 0454494D45          <1>     db 4, "TIME"
    38 00000831 D82A                <1>     dw time - startLbl
    39                              <1> 
    40 00000833 04434F5059          <1>     db 4, "COPY"
    41 00000838 DD20                <1>     dw copy - startLbl
    42                              <1> 
    43 0000083A 0443545459          <1>     db 4, "CTTY"
    44 0000083F 012C                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000841 03434C53            <1>     db 3, "CLS"
    47 00000845 9C2C                <1>     dw cls - startLbl
    48                              <1> 
    49 00000847 05425245414B        <1>     db 5, "BREAK"
    50 0000084D 0E2D                <1>     dw break - startLbl
    51                              <1> 
    52 0000084F 06564552494659      <1>     db 6, "VERIFY"
    53 00000856 8F2D                <1>     dw verify - startLbl
    54                              <1> 
    55 00000858 0652454E414D45      <1>     db 6, "RENAME"
    56 0000085F 0C2E                <1>     dw rename - startLbl
    57                              <1> 
    58 00000861 0352454E            <1>     db 3, "REN"
    59 00000865 0C2E                <1>     dw rename - startLbl
    60                              <1>     
    61 00000867 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000870 0932                <1>     dw truename - startLbl
    63                              <1> 
    64 00000872 03564552            <1>     db 3, "VER"
    65 00000876 EF33                <1>     dw version - startLbl
    66                              <1> 
    67 00000878 03564F4C            <1>     db 3, "VOL"
    68 0000087C 3033                <1>     dw volume - startLbl
    69                              <1> 
    70 0000087E 034D454D            <1>     db 3, "MEM"
    71 00000882 3334                <1>     dw memory - startLbl
    72                              <1> 
    73 00000884 0445584954          <1>     db 4, "EXIT"
    74 00000889 3036                <1>     dw exit - startLbl
    75                              <1> 
    76 0000088B 0454595045          <1>     db 4, "TYPE"
    77 00000890 7D35                <1>     dw type - startLbl
    78                              <1> 
    79 00000892 054C4142454C        <1>     db 5, "LABEL"
    80 00000898 5A32                <1>     dw label - startLbl
    81                              <1> 
    82 0000089A 0450415448          <1>     db 4, "PATH"
    83 0000089F 8739                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 000008A1 03534554            <1>     db 3, "SET"
    86 000008A5 6838                <1>     dw set - startLbl
    87                              <1> 
    88 000008A7 0650524F4D5054      <1>     db 6, "PROMPT"
    89 000008AE 663A                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 000008B0 054D4B4C424C        <1>     db 5, "MKLBL"
    92 000008B6 8432                <1>     dw mklbl - startLbl
    93                              <1> 
    94 000008B8 05524D4C424C        <1>     db 5, "RMLBL"
    95 000008BE BF32                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 000008C0 05524E4C424C        <1>     db 5, "RNLBL"
    98 000008C6 FA32                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 000008C8 05544F554348        <1>     db 5, "TOUCH"
   101 000008CE FC2F                <1>     dw touch - startLbl
   102                              <1> 
   103 000008D0 044A4F494E          <1>     db 4, "JOIN"
   104 000008D5 5F30                <1>     dw join - startLbl
   105                              <1> 
   106 000008D7 055355425354        <1>     db 5, "SUBST"
   107 000008DD 2231                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 000008DF 044543484F          <1>     db 4, "ECHO"
   111 000008E4 073B                <1>     dw echo - startLbl
   112 000008E6 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008E7 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008EA 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008EF 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008F8 696C65206D69737369- <1>
     4 00000901 6E670D0A24          <1>
     5 00000906 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000090F 6469736B2077697468- <1>
     5 00000918 206261746368206669- <1>
     5 00000921 6C65                <1>
     6 00000923 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000092C 737320616E79206B65- <1>
     6 00000935 79207768656E207265- <1>
     6 0000093E 6164790D0A24        <1>
     7 00000944 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 0000094D 6E64206F722066696C- <1>
     7 00000956 65206E616D650D0A24  <1>
     8 0000095F 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000968 2066696C65206E616D- <1>
     8 00000971 65206F7220          <1>
     9 00000976 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 0000097F 666F756E640D0A24    <1>
    10 00000987 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 00000990 656E74206469736B20- <1>
    10 00000999 73706163650D0A24    <1>
    11 000009A1 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000009AA 7669726F6E6D656E74- <1>
    11 000009B3 2073706163650D0A24  <1>
    12 000009BC 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 000009C5 74696F6E206572726F- <1>
    12 000009CE 720D0A24            <1>
    13 000009D2 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000009DB 6F7420626520636F70- <1>
    13 000009E4 696564206F6E746F20- <1>
    13 000009ED 697473656C660D0A24  <1>
    14 000009F6 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000009FF 662064657374696E61- <1>
    14 00000A08 74696F6E206C6F7374- <1>
    14 00000A11 206265666F72652063- <1>
    14 00000A1A 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A20 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A29 636F706965640D0A24  <1>
    17 00000A32 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    17 00000A3B 68206D656D6F727920- <1>
    17 00000A44 666F7220434F50590D- <1>
    17 00000A4D 0A24                <1>
    18                              <1> ;Dir end1 msg. First write # files in dir then this
    19 00000A4F 2046696C6528732920- <1> dirOk   db  " File(s) $"
    19 00000A58 24                  <1>
    20                              <1> ;Dir end2 msg. First write # bytes free then this message
    21 00000A59 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    21 00000A62 65650D0A24          <1>
    22 00000A67 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    23                              <1> 
    24 00000A70 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    24 00000A79 726976652073706563- <1>
    24 00000A82 696669636174696F6E- <1>
    24 00000A8B 0D0A24              <1>
    25 00000A8E 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    25 00000A97 6B6579207768656E20- <1>
    25 00000AA0 7265616479202E202E- <1>
    25 00000AA9 202E2024            <1>
    26 00000AAD 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    26 00000AB6 6172616D657465720D- <1>
    26 00000ABF 0A24                <1>
    27                              <1> 
    28 00000AC1 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    28 00000ACA 576564546875467269- <1>
    28 00000AD3 536174              <1>
    29 00000AD6 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    29 00000ADF 206461746524        <1>
    30 00000AE5 43757272656E742064- <1> curDate db  "Current date is $"
    30 00000AEE 6174652069732024    <1>
    31 00000AF6 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    31 00000AFF 657720646174652024  <1>
    32 00000B08 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    32 00000B11 293A2024            <1>
    33 00000B15 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    33 00000B1E 293A2024            <1>
    34 00000B22 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    34 00000B2B 293A2024            <1>
    35 00000B2F 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    35 00000B38 2074696D6524        <1>
    36 00000B3E 43757272656E742074- <1> curTime db  "Current time is $"
    36 00000B47 696D652069732024    <1>
    37 00000B4F 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    37 00000B58 65772074696D653A20- <1>
    37 00000B61 24                  <1>
    38                              <1> 
    39 00000B62 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    39 00000B6B 7572652028592F4E29- <1>
    39 00000B74 3F2024              <1>
    40                              <1> 
    41 00000B77 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    41 00000B80 56657273696F6E2024  <1>
    42                              <1> 
    43 00000B89 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    43 00000B92 6E2064726976652024  <1>
    44 00000B9B 2069732024          <1> volOk   db " is $"
    45 00000BA0 20686173206E6F206C- <1> volNo   db " has no label$"
    45 00000BA9 6162656C24          <1>
    46                              <1> 
    47 00000BAE 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    47 00000BB7 69726563746F72790D- <1>
    47 00000BC0 0A24                <1>
    48 00000BC2 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    48 00000BCB 206372656174652064- <1>
    48 00000BD4 69726563746F72790D- <1>
    48 00000BDD 0A24                <1>
    49 00000BDF 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    49 00000BE8 6174682C206E6F7420- <1>
    49 00000BF1 6469726563746F7279- <1>
    49 00000BFA 2C0D0A              <1>
    50 00000BFD 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    50 00000C06 6F7279206E6F742065- <1>
    50 00000C0F 6D7074790D0A24      <1>
    51 00000C16 204469726563746F72- <1> dirMain db " Directory of  $"
    51 00000C1F 79206F66202024      <1>
    52 00000C26 4E6F20506174682024  <1> noPath  db "No Path $"
    53 00000C2F 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    53 00000C38 6E6965640D0A24      <1>
    54 00000C3F 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    54 00000C48 72697665206973206E- <1>
    54 00000C51 6F206C6F6E67657220- <1>
    54 00000C5A 76616C696424        <1>
    55                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    56 00000C60 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    56 00000C69 65766963650D0A24    <1>
    57 00000C71 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    57 00000C7A 20666F756E640D0A24  <1>
    58 00000C83 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    58 00000C8C 726F720D0A24        <1>
    59 00000C92 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    59 00000C9B 6F74206265206E6573- <1>
    59 00000CA4 7465640D0A24        <1>
    60 00000CAA 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    60 00000CB3 6174652066696C6520- <1>
    60 00000CBC 6572726F7220647572- <1>
    60 00000CC5 696E6720706970650D- <1>
    60 00000CCE 0A24                <1>
    61 00000CD0 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    61 00000CD9 2062696E6172792072- <1>
    61 00000CE2 656164732066726F6D- <1>
    61 00000CEB 206120646576696365- <1>
    61 00000CF4 0D0A24              <1>
    62 00000CF7 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    63 00000CFD 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    64 00000D02 425245414B20697320- <1> breakIs db "BREAK is $"
    64 00000D0B 24                  <1>
    65 00000D0C 564552494659206973- <1> verifyIs    db "VERIFY is $"
    65 00000D15 2024                <1>
    66 00000D17 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    67 00000D20 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    67 00000D29 617468206F72206669- <1>
    67 00000D32 6C65206E616D650D0A- <1>
    67 00000D3B 24                  <1>
    68 00000D3C 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    68 00000D45 756D626572206F6620- <1>
    68 00000D4E 706172616D65746572- <1>
    68 00000D57 730D0A24            <1>
    69 00000D5B 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    69 00000D64 74696E6720746F2064- <1>
    69 00000D6D 6576696365          <1>
    70 00000D72 08200800            <1> backSpace   db BSP," ",BSP,NUL
    71                              <1> 
    72 00000D76 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    72 00000D7F 20202020202020546F- <1>
    72 00000D88 74616C207379737465- <1>
    72 00000D91 6D206D656D6F72793A- <1>
    72 00000D9A 2024                <1>
    73 00000D9C 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    73 00000DA5 20202020202020204D- <1>
    73 00000DAE 656D6F727920757365- <1>
    73 00000DB7 6420627920444F533A- <1>
    73 00000DC0 2024                <1>
    74 00000DC2 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    74 00000DCB 656D6F727920757365- <1>
    74 00000DD4 64206279206170706C- <1>
    74 00000DDD 69636174696F6E733A- <1>
    74 00000DE6 2024                <1>
    75 00000DE8 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    75 00000DF1 656D6F727920726573- <1>
    75 00000DFA 657276656420627920- <1>
    75 00000E03 68617264776172653A- <1>
    75 00000E0C 2024                <1>
    76 00000E0E 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    76 00000E17 202020202020202020- <1>
    76 00000E20 2020202020204D656D- <1>
    76 00000E29 6F727920667265653A- <1>
    76 00000E32 2024                <1>
    77 00000E34 20627974657324      <1> memByte db " bytes$"
    78 00000E3B 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    78 00000E44 6F7420417373657274- <1>
    78 00000E4D 61696E20444F532045- <1>
    78 00000E56 6E74727920506F696E- <1>
    78 00000E5F 7424                <1>
    79 00000E61 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    79 00000E6A 416C6C6F636174696F- <1>
    79 00000E73 6E204572726F7224    <1>
    80 00000E7B 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    80 00000E84 4572726F7224        <1>
    81 00000E8A 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    81 00000E93 68616C74656424      <1>
    82                              <1> 
    83 00000E9A 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    83 00000EA3 206372656174652070- <1>
    83 00000EAC 6970650D0A          <1>
    84                              <1> pipeErrMsgL equ $ - pipeErrMsg
    85 00000EB1 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    85 00000EBA 6F6E206572726F720D- <1>
    85 00000EC3 0A                  <1>
    86                              <1> redirErrMsgL   equ $ - redirErrMsg
    87                              <1> 
    88 00000EC4 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    89 00000EC8 2020202024          <1> fourSpc  db "    $"
    90 00000ECD 20202024            <1> threeSpc db "   $"
    91 00000ED1 202024              <1> twoSpc   db "  $"
    92                              <1> 
    93 00000ED4 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    93 00000EDD 696679204F4E206F72- <1>
    93 00000EE6 204F46460D0A24      <1>
    94                              <1> 
    95 00000EED 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    96 00000EF5 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    97                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    98                              <1> ; handles and reopen CON
    99 00000EFE 434F4E00            <1> conName db "CON",0    
   100                              <1>   
   101                              <1> ;Int 24h strings
   102                              <1> errorMsgTable: ;Each table entry is 18 chars long
   103 00000F02 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   103 00000F0B 746563742024202020  <1>
   104 00000F14 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   104 00000F1D 6E6974202420202020  <1>
   105 00000F26 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   105 00000F2F 202420202020202020  <1>
   106 00000F38 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   106 00000F41 6F6D6D616E64202420  <1>
   107 00000F4A 446174612024202020- <1>             db "Data $            "       ;Error 4
   107 00000F53 202020202020202020  <1>
   108 00000F5C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   108 00000F65 737420242020202020  <1>
   109 00000F6E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   109 00000F77 202020202020202020  <1>
   110 00000F80 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   110 00000F89 656469612024202020  <1>
   111 00000F92 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   111 00000F9B 7420466F756E642024  <1>
   112 00000FA4 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   112 00000FAD 706572202420202020  <1>
   113 00000FB6 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   113 00000FBF 6C7420242020202020  <1>
   114 00000FC8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   114 00000FD1 742024202020202020  <1>
   115 00000FDA 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   115 00000FE3 61696C757265202420  <1>
   116                              <1> 
   117 00000FEC 64726976652024      <1> drvMsg     db "drive $"
   118 00000FF3 6572726F7220726561- <1> readMsg    db "error reading $"
   118 00000FFC 64696E672024        <1>
   119 00001002 6572726F7220777269- <1> writeMsg   db "error writing $"
   119 0000100B 74696E672024        <1>
   120 00001011 41626F727424        <1> abortMsg   db "Abort$" 
   121 00001017 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   122 0000101E 526574727924        <1> retryMsg   db "Retry$"
   123 00001024 4661696C24          <1> failMsg    db "Fail$"
   124 00001029 2C2024              <1> betweenMsg db ", $"
   125 0000102C 3F2024              <1> endMsg     db "? $"
   126 0000102F 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001033 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 0000103B 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00001044 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 0000104A 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00001051 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00001054 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00001058 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 0000105B B44A                <1>     mov ah, 4Ah ;Realloc
     9 0000105D 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00001060 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00001062 488B259CEFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00001069 FC                  <1>     cld ;Ensure stringops are done the right way
    14 0000106A C60544F1FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00001071 C605BFF1FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00001078 C6053AF2FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 0000107F E8892D0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00001084 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00001089 CD21                <1>     int 21h
    21 0000108B B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00001090 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00001095 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00001097 E8E92F0000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 0000109C F60510F0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 000010A3 0F8523090000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 000010A9 E8C62C0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 000010AE 488D1500F1FFFF      <1>     lea rdx, inBuffer
    31 000010B5 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 000010BA CD21                <1>     int 21h
    33 000010BC E84C2D0000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 000010C1 803DEEF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 000010C8 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 000010CA 488D35E4F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 000010D1 488D3D5FF1FFFF      <1>     lea rdi, cpyBuffer
    41 000010D8 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 000010DD F3A4                <1>     rep movsb
    43 000010DF E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 000010E4 488D35D0F1FFFF      <1>     lea rsi, cmdBuffer + 2
    46 000010EB E8632F0000          <1>     call skipDelimiters
    47 000010F0 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 000010F3 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 000010F5 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 000010F8 0F84CF030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 000010FE 4C8B050AEFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001105 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000110A E80A070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 0000110F E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001114 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 00001119 E800050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 0000111E F6057CEFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 00001125 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 0000112B E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001130 488D3D84F1FFFF      <1>     lea rdi, cmdBuffer + 2
    65 00001137 4889F1              <1>     mov rcx, rsi
    66 0000113A 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 0000113D 280D77F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 00001143 8A0D71F1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 00001149 FFC1                <1>     inc ecx     ;One more for the terminating char
    70 0000114B F3A4                <1>     rep movsb   ;Move the chars over    
    71 0000114D E8222F0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 00001152 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 00001154 488D35DEF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 0000115B 31C9                <1>     xor ecx, ecx
    80 0000115D 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 00001160 AC                  <1>     lodsb
    83 00001161 3C22                <1>     cmp al, '"'
    84 00001163 7507                <1>     jne .notQuoteToCount
    85 00001165 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 00001167 E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 0000116C 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 0000116E 75F0                <1>     jne .countQuotes
    90 00001170 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 00001173 488D3D41F1FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 0000117A AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 0000117B 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 0000117D 750E                <1>     jne .notQuote
    96 0000117F FECD                <1>     dec ch          ;We have a quote, now decrement
    97 00001181 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 00001183 AA                  <1>     stosb   ;Store char and inc rdi
   101 00001184 FEC1                <1>     inc cl
   102 00001186 AC                  <1>     lodsb   ;Get next char
   103 00001187 3C22                <1>     cmp al, '"'
   104 00001189 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 0000118B FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 0000118D E826060000          <1>     call peelRedir      ;Intervene redir if needed
   108 00001192 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 00001194 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 00001196 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 00001198 0F842F030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 0000119E AA                  <1>     stosb       ;Store char and advance rdi
   116 0000119F 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 000011A1 7404                <1>     je .exit
   118 000011A3 FEC1                <1>     inc cl      ;Increment char count
   119 000011A5 EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 000011A7 880D0DF1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 000011AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 000011AE 488D3506F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 000011B5 31C9                <1>     xor ecx, ecx
   131 000011B7 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 000011BA AC                  <1>     lodsb
   134 000011BB 3C22                <1>     cmp al, '"'
   135 000011BD 7507                <1>     jne .notQuoteToCount
   136 000011BF FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 000011C1 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 000011C6 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 000011C8 75F0                <1>     jne .countQuotes
   141 000011CA 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 000011CD 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 000011D4 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 000011D5 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 000011D7 750E                <1>     jne .notQuote
   147 000011D9 FECD                <1>     dec ch          ;We have a quote, now decrement
   148 000011DB 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 000011DD AA                  <1>     stosb   ;Store char and inc rdi
   152 000011DE FEC1                <1>     inc cl
   153 000011E0 AC                  <1>     lodsb   ;Get next char
   154 000011E1 3C22                <1>     cmp al, '"'
   155 000011E3 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 000011E5 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 000011E7 3C7C                <1>     cmp al, "|"
   159 000011E9 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 000011EB B00D                <1>     mov al, CR          ;Store the pipe char
   161 000011ED 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 000011F0 AA                  <1>     stosb       ;Store char and advance rdi
   164 000011F1 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 000011F3 7404                <1>     je .exit
   166 000011F5 FEC1                <1>     inc cl      ;Increment char count
   167 000011F7 EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 000011F9 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 000011FC 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001203 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 00001206 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 00001207 C6057CF1FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 0000120E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 00001215 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 00001218 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 0000121C 8A0508EEFFFF        <1>     mov al, byte [switchChar]
   183 00001222 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001224 7506                <1>     jne .noSwitchFnd
   185 00001226 F61586EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 0000122C E8222E0000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001231 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001234 74(06)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 00001236 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 00001239 488D3D1AEFFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 00001240 B801290000          <1>     mov eax, 2901h
   194 00001245 CD21                <1>     int 21h
   195 00001247 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 00001249 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 0000124F 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 00001253 7505                <1>     jne .noTrailingDots
   201 00001255 48FFCE              <1>     dec rsi
   202 00001258 EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 0000125A 8A05C9EDFFFF        <1>     mov al, byte [pathSep]  
   205 00001260 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 00001262 7525                <1>     jne .notPs
   207 00001264 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 00001267 AC                  <1>     lodsb   ;Get this char
   209 00001268 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 0000126B 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 0000126D 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 0000126F 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 00001271 7413                <1>     je .delimfnd
   214 00001273 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 00001275 740F                <1>     je .delimfnd
   216 00001277 3C2E                <1>     cmp al, byte "."
   217 00001279 740B                <1>     je .delimfnd
   218 0000127B 3C22                <1>     cmp al, byte '"'
   219 0000127D 7407                <1>     je .delimfnd
   220 0000127F E8DD2D0000          <1>     call isALdelimiter  ;Is this a delim char?
   221 00001284 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 00001286 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 00001289 4889F1              <1>     mov rcx, rsi
   228 0000128C 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 0000128F 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 00001292 488D3DA2F0FFFF      <1>     lea rdi, cmdPathSpec
   231 00001299 F3A4                <1>     rep movsb
   232 0000129B 30C0                <1>     xor al, al
   233 0000129D AA                  <1>     stosb   ;Store a terminating null
   234 0000129E 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 000012A1 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 000012A8 E893000000          <1>     call .skipAndCheckCR
   238 000012AD 745B                <1>     je .setupCmdVars
   239 000012AF C605F6EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 000012B6 4889F0              <1>     mov rax, rsi
   241 000012B9 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 000012BC 8805EBEDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 000012C2 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 000012C6 B801290000          <1>     mov eax, 2901h
   245 000012CB CD21                <1>     int 21h
   246 000012CD 8805DBEDFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 000012D3 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 000012D4 3C0D                <1>     cmp al, CR
   250 000012D6 7432                <1>     je .setupCmdVars
   251 000012D8 E8842D0000          <1>     call isALdelimiter
   252 000012DD 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 000012DF E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 000012E4 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 000012E6 C605C2EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 000012ED 4889F0              <1>     mov rax, rsi            
   257 000012F0 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 000012F3 8805B7EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 000012F9 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 000012FD B801290000          <1>     mov eax, 2901h
   261 00001302 CD21                <1>     int 21h
   262 00001304 8805A7EDFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000130A 488D3D2AF0FFFF      <1>     lea rdi, cmdPathSpec
   266 00001311 E8F42D0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 00001316 E80D2D0000          <1>     call strlen ;Get the length of the final path componant
   268 0000131B 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001321 7726                <1>     ja .exitBad     ;Return error
   270 00001323 4889FE              <1>     mov rsi, rdi
   271 00001326 488D3D5DF0FFFF      <1>     lea rdi, cmdName
   272 0000132D FFC9                <1>     dec ecx ;Minus the terminating null
   273 0000132F 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001331 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001334 AC                  <1>     lodsb
   277 00001335 E8F82C0000          <1>     call ucChar ;Uppercase the char
   278 0000133A AA                  <1>     stosb
   279 0000133B FFC9                <1>     dec ecx
   280 0000133D 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000133F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 00001340 E80E2D0000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 00001345 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 00001348 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 00001349 C6053AF0FFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 00001350 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 00001351 C60532F0FFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 00001358 E840070000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 0000135D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 0000135E 803D25F0FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 00001365 0F8462010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 0000136B 803D18F0FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 00001372 0F845E070000        <1>     je badCmdError
   301 00001378 803D0BF0FFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000137F 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 00001381 488D35B3EFFFFF      <1>     lea rsi, cmdPathSpec
   304 00001388 0FB71DACEFFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 0000138F 80FF3A              <1>     cmp bh, ":"
   306 00001392 7520                <1>     jne .noDriveSpecified
   307 00001394 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 00001396 E8972C0000          <1>     call ucChar     ;Uppercase al
   309 0000139B 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 0000139D 803DE6EFFFFF02      <1>     cmp byte [cmdName], 2
   312 000013A4 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 000013A6 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 000013A8 E8512C0000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013AD 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 000013AF E9E9060000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 000013B4 488D1DFEEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 000013BB 488D35C8EFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 000013C2 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 000013C7 BAFFFF0000          <1>     mov edx, 0FFFFh
   323 000013CC B5FF                <1>     mov ch, -1
   324 000013CE CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 000013D0 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 000013D5 BAFFFF0000          <1>     mov edx, 0FFFFh
   327 000013DA 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 000013DC CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 000013DE 84C0                <1>     test al, al
   331 000013E0 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 000013E2 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 000013E9 488D359AEFFFFF      <1>     lea rsi, cmdName        
   336 000013F0 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 000013F5 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 000013FA B5FF                <1>     mov ch, -1
   339 000013FC CD2F                <1>     int 2Fh
   340 000013FE 803D85EFFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001405 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001407 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 00001408 E875050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 0000140D 488D3576EFFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001414 AC                  <1>     lodsb                   ;Get the name length
   348 00001415 0FB6C8              <1>     movzx ecx, al
   349 00001418 488D3D1CEFFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 0000141F F3A4                <1>     rep movsb   
   351 00001421 31C0                <1>     xor eax, eax
   352 00001423 AA                  <1>     stosb   ;Store null terminator
   353 00001424 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 00001426 E857050000          <1>     call pullCommandline    ;Now pull the tail down
   356 0000142B 488D3D09EFFFFF      <1>     lea rdi, cmdPathSpec
   357 00001432 E8F12B0000          <1>     call strlen ;Get the length of the input command
   358 00001437 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 00001439 380D4BEFFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 0000143F 0F8521220000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 00001445 488D1D9EF3FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 0000144C 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 0000144F 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 00001452 0F840E220000        <1>     je launchChild      ;If so, check externally now
   368 00001458 380D2CEFFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 0000145E 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 00001460 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 00001461 51                  <1>     push rcx
   374 00001462 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 00001466 488D3D1EEFFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 0000146D F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 0000146F 59                  <1>     pop rcx
   378 00001470 5E                  <1>     pop rsi
   379 00001471 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 00001473 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 00001478 480FB71F            <1>     movzx rbx, word [rdi]
   383 0000147C 488D3D7DEBFFFF      <1>     lea rdi, startLbl
   384 00001483 4801FB              <1>     add rbx, rdi
   385 00001486 C60580EBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 0000148D FFD3                <1>     call rbx        ;Call the internal function!
   387 0000148F EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 00001491 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 00001498 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 0000149B EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here if the rsp ptr in the psp was not mangled (i.e. in an
   396                              <1> ; abort or CTRL+C call).
   397 0000149D 488B2561EBFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   398 000014A4 E8502E0000          <1>     call resetIDTentries
   399 000014A9 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   400 000014AE CD21                <1>     int 21h
   401 000014B0 66890556EBFFFF      <1>     mov word [returnCode], ax
   402 000014B7 84E4                <1>     test ah, ah     ;Regular exit
   403 000014B9 0F845AFCFFFF        <1>     jz commandMain.okRet
   404 000014BF 80FC03              <1>     cmp ah, 3       ;TSR exit
   405 000014C2 0F8451FCFFFF        <1>     je commandMain.okRet
   406                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   407                              <1>     ;For now, just clean redirs
   408 000014C8 E930000000          <1>     jmp redirPipeFailureCommon.noPrint  ;Jumps to commandMain
   409                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   410                              <1>     ;je commandMain
   411                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   412                              <1> 
   413                              <1> hardSynErr:
   414                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   415 000014CD E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   416 000014D2 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   417                              <1> redirFailure:
   418 000014D7 488D15D3F9FFFF      <1>     lea rdx, redirErrMsg
   419 000014DE B913000000          <1>     mov ecx, redirErrMsgL
   420 000014E3 EB0C                <1>     jmp short redirPipeFailureCommon
   421                              <1> pipeFailure:
   422 000014E5 488D15AEF9FFFF      <1>     lea rdx, pipeErrMsg
   423 000014EC B917000000          <1>     mov ecx, pipeErrMsgL
   424                              <1> redirPipeFailureCommon:
   425                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   426                              <1> ;This routine tries to close whatever handles are not -1 and delete
   427                              <1> ; pipe files if the pipe count is not 0.
   428                              <1> ;It resets all variables and jumps to reset the stack!
   429 000014F1 B800400000          <1>     mov eax, 4000h  ;Write handle
   430 000014F6 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   431 000014FB CD21                <1>     int 21h
   432                              <1> .noPrint:
   433 000014FD 0FB705A4EBFFFF      <1>     movzx eax, word [redirSTDIN]
   434 00001504 0FB71597EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   435 0000150B 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   436 0000150D E8D1000000          <1>     call .closeAndReplace
   437 00001512 0FB70591EBFFFF      <1>     movzx eax, word [redirSTDOUT]
   438 00001519 0FB71584EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   439 00001520 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   440 00001522 E8BC000000          <1>     call .closeAndReplace
   441 00001527 66C70576EBFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   442 00001530 0FB71D71EBFFFF      <1>     movzx ebx, word [redirSTDIN]
   443 00001537 E896000000          <1>     call .closeHandle
   444                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   445 0000153C 66C70563EBFFFFFFFF  <1>     mov word [redirSTDIN], -1
   446 00001545 0FB71D5EEBFFFF      <1>     movzx ebx, word [redirSTDOUT]
   447 0000154C E881000000          <1>     call .closeHandle
   448 00001551 66C70550EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   449 0000155A 0FB71D41EBFFFF      <1>     movzx ebx, word [pipeSTDIN]
   450 00001561 E86C000000          <1>     call .closeHandle
   451 00001566 66C70533EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   452 0000156F 0FB71D2EEBFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   453 00001576 E857000000          <1>     call .closeHandle
   454 0000157B 66C70520EBFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   455 00001584 C60516EBFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   456 0000158B 488D15A4EEFFFF      <1>     lea rdx, qword [pipe1Filespec]
   457 00001592 803A00              <1>     cmp byte [rdx], 0
   458 00001595 7407                <1>     jz .checkOld
   459 00001597 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   460 0000159C CD21                <1>     int 21h
   461                              <1> .checkOld:
   462 0000159E 488D15E0EEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   463 000015A5 803A00              <1>     cmp byte [rdx],0
   464 000015A8 7407                <1>     jz .pipeNamesComplete
   465 000015AA B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   466 000015AF CD21                <1>     int 21h
   467                              <1> .pipeNamesComplete:
   468 000015B1 31C0                <1>     xor eax, eax
   469                              <1>     ;Invalidate the pointers and the paths too
   470 000015B3 4889051AEFFFFF      <1>     mov qword [newPipe], rax
   471 000015BA 4889051BEFFFFF      <1>     mov qword [oldPipe], rax
   472 000015C1 89056FEEFFFF        <1>     mov dword [pipe1Filespec], eax
   473 000015C7 8905B8EEFFFF        <1>     mov dword [pipe2Filespec], eax
   474                              <1> 
   475 000015CD E990FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   476                              <1> .closeHandle:
   477 000015D2 81FBFFFFFFFF        <1>     cmp ebx, -1
   478                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000015D8 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000015DA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   479 000015DB B8003E0000          <1>     mov eax, 3E00h
   480 000015E0 CD21                <1>     int 21h
   481                              <1>     return
    13                              <2> %%_ret:
    14 000015E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> .closeAndReplace:
   483                              <1> ;Input: ax = one possible handle, dx = second possible handle
   484                              <1> ;       bx = handle to close and copy ax/dx into
   485                              <1> ;Output: Handle intervened on. bx preserved
   486 000015E3 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   487 000015E6 09D0                <1>     or eax, edx     ;Form packed
   488 000015E8 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   489                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015ED 74(E2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   490 000015EF E8DEFFFFFF          <1>     call .closeHandle
   491 000015F4 663DFFFF            <1>     cmp ax, -1      
   492 000015F8 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   493 000015FC 53                  <1>     push rbx
   494 000015FD 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   495 00001600 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   496 00001605 CD21                <1>     int 21h
   497 00001607 5B                  <1>     pop rbx
   498                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001608 73(E2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499                              <1>     ;Else we now try to force con to open!
   500 0000160A E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   501 0000160F B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   502 00001614 488D15E3F8FFFF      <1>     lea rdx, conName
   503 0000161B CD21                <1>     int 21h
   504                              <1>     return
    13                              <2> %%_ret:
    14 0000161D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> advanceRedir:
   507                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   508                              <1> ;Close stdin redir then stdout redir. 
   509 0000161E F60581EAFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   510 00001625 0F8585000000        <1>     jnz .redirIn
   511 0000162B F6056FEAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   512 00001632 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   513 00001638 0FBF0563EAFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   514 0000163F 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   515 00001644 0F84EB000000        <1>     je .pipeOut              
   516                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   517 0000164A 0FB71D51EAFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   518 00001651 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   519 00001653 B800460000          <1>     mov eax, 4600h
   520 00001658 CD21                <1>     int 21h
   521 0000165A 0F8285FEFFFF        <1>     jc pipeFailure
   522 00001660 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   523 00001665 CD21                <1>     int 21h
   524 00001667 0F8278FEFFFF        <1>     jc pipeFailure
   525 0000166D 488B1568EEFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   526 00001674 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   527 00001679 CD21                <1>     int 21h
   528 0000167B 0F8264FEFFFF        <1>     jc pipeFailure
   529 00001681 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   530 00001684 66C70515EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   531                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   532                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   533                              <1>     ;Else exit!
   534 0000168D 0FBF0510EAFFFF      <1>     movsx eax, word [pipeSTDOUT]
   535 00001694 3DFFFFFFFF          <1>     cmp eax, -1
   536 00001699 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   537 0000169F C605FBE9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   538 000016A6 F605FAE9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   539 000016AD 753D                <1>     jnz .redirOut               ;Go for it if so!
   540                              <1>     return
    13                              <2> %%_ret:
    14 000016AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> .redirIn:
   542                              <1> ;Here we clean redirIn
   543 000016B0 0FB71DF1E9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   544 000016B7 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   545 000016B9 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   546 000016BE CD21                <1>     int 21h
   547 000016C0 0F8211FEFFFF        <1>     jc redirFailure
   548 000016C6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   549 000016CB CD21                <1>     int 21h
   550 000016CD 0F8204FEFFFF        <1>     jc redirFailure
   551 000016D3 66C705CCE9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   552 000016DC C605C3E9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   553 000016E3 F605B7E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   554 000016EA 7549                <1>     jnz .pipeOut
   555                              <1> .redirOut:
   556 000016EC F605B4E9FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   557                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016F3 74(AF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   558                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   559 000016F5 F605A5E9FFFFFF      <1>     test byte [pipeFlag], -1
   560 000016FC 7537                <1>     jnz short .pipeOut
   561 000016FE 0FB71DA5E9FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   562 00001705 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   563 0000170A B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   564 0000170F CD21                <1>     int 21h
   565 00001711 0F82C0FDFFFF        <1>     jc redirFailure
   566 00001717 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   567 0000171C CD21                <1>     int 21h
   568 0000171E 0F82B3FDFFFF        <1>     jc redirFailure
   569 00001724 66C7057DE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   570 0000172D C60573E9FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   571                              <1>     return
    13                              <2> %%_ret:
    14 00001734 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> .pipeOut:
   573                              <1> ;Duplicate STDIN to save across pipe
   574 00001735 0FBF0568E9FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   575 0000173C 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   576                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001741 74(34)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   577 00001743 B800450000          <1>     mov eax, 4500h
   578 00001748 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   579 0000174A CD21                <1>     int 21h
   580 0000174C 0F8293FDFFFF        <1>     jc pipeFailure
   581 00001752 66890549E9FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   582                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   583 00001759 B800460000          <1>     mov eax, 4600h
   584 0000175E 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   585 00001760 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   586 00001762 CD21                <1>     int 21h
   587 00001764 0F827BFDFFFF        <1>     jc pipeFailure
   588                              <1> ;Now return the original stdout to stdout
   589 0000176A 89D9                <1>     mov ecx, ebx
   590 0000176C 0FB71D31E9FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   591 00001773 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   592 00001778 CD21                <1>     int 21h
   593 0000177A 0F8265FDFFFF        <1>     jc pipeFailure
   594                              <1> ;Now close the DUP'ed STDOUT
   595 00001780 B8003E0000          <1>     mov eax, 3E00h
   596 00001785 CD21                <1>     int 21h
   597 00001787 0F8258FDFFFF        <1>     jc pipeFailure
   598                              <1> ;Finally unwind STDIN to the beginning of the file
   599 0000178D B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   600 00001792 31DB                <1>     xor ebx, ebx    ;STDIN handle
   601 00001794 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   602 00001796 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   603 00001798 CD21                <1>     int 21h
   604 0000179A 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   605 000017A0 488B152DEDFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   606 000017A7 4889152EEDFFFF      <1>     mov qword [oldPipe], rdx
   607 000017AE 66C705EDE8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   608                              <1>     return
    13                              <2> %%_ret:
    14 000017B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> peelRedir:
   612                              <1> ;Checks and sets up redir as appropriate
   613                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   614                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   615                              <1> ;Output: ZF=NZ => No redir
   616                              <1> ;        ZF=ZY => Redir
   617                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   618                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   619 000017B8 51                  <1>     push rcx
   620 000017B9 57                  <1>     push rdi
   621 000017BA 3C3C                <1>     cmp al, "<"
   622 000017BC 740C                <1>     je .inputRedir
   623 000017BE 3C3E                <1>     cmp al, ">"
   624 000017C0 7427                <1>     je .outputRedir
   625 000017C2 3C7C                <1>     cmp al, "|"
   626 000017C4 7441                <1>     je .pipeSetup
   627 000017C6 F8                  <1>     clc
   628                              <1> .redirExit:
   629 000017C7 5F                  <1>     pop rdi
   630 000017C8 59                  <1>     pop rcx
   631                              <1>     return
    13                              <2> %%_ret:
    14 000017C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   632                              <1> .inputRedir:
   633 000017CA C605D5E8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   634 000017D1 488D3DC0EBFFFF      <1>     lea rdi, rdrInFilespec
   635                              <1> .redirCommon:
   636 000017D8 E876280000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   637 000017DD E8A2290000          <1>     call cpDelimPathToBufz
   638 000017E2 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   639 000017E5 30C0                <1>     xor al, al  ;Clear the ZF flag
   640 000017E7 EBDE                <1>     jmp short .redirExit
   641                              <1> .outputRedir:
   642 000017E9 C605B7E8FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   643 000017F0 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   644 000017F3 7509                <1>     jne .notDouble
   645 000017F5 FE05ACE8FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   646 000017FB 48FFC6              <1>     inc rsi ;Go past it too
   647                              <1> .notDouble:
   648 000017FE 488D3DE2EBFFFF      <1>     lea rdi, rdrOutFilespec
   649 00001805 EBD1                <1>     jmp short .redirCommon
   650                              <1> .pipeSetup:
   651 00001807 56                  <1>     push rsi    ;Save rsi pointing to char past |
   652 00001808 E846280000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   653 0000180D 803E7C              <1>     cmp byte [rsi], "|" 
   654 00001810 7403                <1>     je .badFnd
   655 00001812 803E0D              <1>     cmp byte [rsi], CR
   656                              <1> .badFnd:
   657 00001815 5E                  <1>     pop rsi
   658 00001816 F9                  <1>     stc
   659 00001817 EBAE                <1>     jmp short .redirExit
   660                              <1> 
   661                              <1> setupRedirandPipes:
   662                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   663                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   664 00001819 0F8484000000        <1>     jz .redirIn
   665 0000181F 488D1510ECFFFF      <1>     lea rdx, pipe1Filespec
   666 00001826 803A00              <1>     cmp byte [rdx], 0
   667 00001829 7410                <1>     jz .pathFound
   668 0000182B 488D1553ECFFFF      <1>     lea rdx, pipe2Filespec
   669 00001832 803A00              <1>     cmp byte [rdx], 0
   670 00001835 0F85AAFCFFFF        <1>     jnz pipeFailure
   671                              <1> .pathFound:
   672 0000183B 48891592ECFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   673 00001842 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   674 00001847 BB01000000          <1>     mov ebx, 1
   675 0000184C CD21                <1>     int 21h
   676 0000184E 0F8291FCFFFF        <1>     jc pipeFailure
   677 00001854 66890549E8FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   678 0000185B E8AA270000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   679 00001860 0441                <1>     add al, "A"
   680 00001862 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   681 00001867 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   682 00001869 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   683 0000186B 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   684 0000186D B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   685 00001872 CD21                <1>     int 21h
   686 00001874 0F826BFCFFFF        <1>     jc pipeFailure
   687                              <1>     ;AX has the handle for this file now, this will become STDOUT
   688                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   689 0000187A 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   690 0000187D B901000000          <1>     mov ecx, 1
   691 00001882 B800460000          <1>     mov eax, 4600h
   692 00001887 CD21                <1>     int 21h
   693 00001889 0F8256FCFFFF        <1>     jc pipeFailure
   694 0000188F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   695 00001894 CD21                <1>     int 21h
   696 00001896 0F8249FCFFFF        <1>     jc pipeFailure
   697 0000189C C605FEE7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   698                              <1> .redirIn:
   699                              <1> ;Now check if any other redir needs to be setup
   700                              <1> ;Checks and sets up redir as appropriate.
   701                              <1>     ;Setup the redir here for STDIN
   702 000018A3 F605FCE7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   703 000018AA 7449                <1>     jz .redirOut
   704 000018AC 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   705 000018AE B800450000          <1>     mov eax, 4500h
   706 000018B3 CD21                <1>     int 21h
   707 000018B5 0F821CFCFFFF        <1>     jc redirFailure
   708 000018BB 668905E6E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   709 000018C2 488D15CFEAFFFF      <1>     lea rdx, rdrInFilespec
   710 000018C9 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   711 000018CE CD21                <1>     int 21h
   712 000018D0 0F8201FCFFFF        <1>     jc redirFailure
   713 000018D6 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   714 000018D8 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   715 000018DB B800460000          <1>     mov eax, 4600h
   716 000018E0 CD21                <1>     int 21h
   717 000018E2 0F82EFFBFFFF        <1>     jc redirFailure
   718 000018E8 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   719 000018ED CD21                <1>     int 21h
   720 000018EF 0F82E2FBFFFF        <1>     jc redirFailure
   721                              <1> .redirOut:
   722 000018F5 F605ABE7FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   723                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000018FC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000018FE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   724 000018FF 803D9EE7FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   725                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001906 75(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   726                              <1>     ;Else setup the redir here for STDOUT
   727 00001908 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   728 0000190D B800450000          <1>     mov eax, 4500h
   729 00001912 CD21                <1>     int 21h
   730 00001914 0F82BDFBFFFF        <1>     jc redirFailure
   731 0000191A 66890589E7FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   732 00001921 488D15BFEAFFFF      <1>     lea rdx, rdrOutFilespec
   733 00001928 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   734 0000192D CD21                <1>     int 21h
   735 0000192F 730F                <1>     jnc .fileExists
   736 00001931 B8003C0000          <1>     mov eax, 3C00h
   737 00001936 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   738 00001938 CD21                <1>     int 21h
   739 0000193A 0F8297FBFFFF        <1>     jc redirFailure
   740                              <1> .fileExists:
   741 00001940 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   742 00001945 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   743 00001948 B800460000          <1>     mov eax, 4600h  ;DUP2
   744 0000194D CD21                <1>     int 21h
   745 0000194F 0F8282FBFFFF        <1>     jc redirFailure
   746 00001955 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   747 0000195A CD21                <1>     int 21h
   748 0000195C 0F8275FBFFFF        <1>     jc redirFailure
   749 00001962 803D3EE7FFFF01      <1>     cmp byte [redirOut], 1
   750                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001969 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   751                              <1>     ;Here we move the file pointer to the end of the file
   752 0000196B 31D2                <1>     xor edx, edx    ;Low order 32 bits
   753 0000196D 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   754 0000196F BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   755 00001974 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   756 00001979 CD21                <1>     int 21h
   757 0000197B 0F8256FBFFFF        <1>     jc redirFailure
   758                              <1>     return
    13                              <2> %%_ret:
    14 00001981 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   759                              <1> 
   760                              <1> 
   761                              <1> pullCommandline:
   762                              <1> ;This command pulls the command tail down, removing the whole launch command
   763 00001982 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   764                              <1> ;Skip leading separators
   765                              <1> .pctSkipLeading:
   766 00001989 AC                  <1>     lodsb   ;Get first char
   767 0000198A E8D2260000          <1>     call isALdelimiter
   768 0000198F 74F8                <1>     je .pctSkipLeading
   769 00001991 48FFCE              <1>     dec rsi
   770                              <1>     ;rsi points to the start of the command
   771 00001994 488D3DA0E9FFFF      <1>     lea rdi, cmdPathSpec
   772 0000199B E888260000          <1>     call strlen ;Get the length of the command
   773 000019A0 FFC9                <1>     dec ecx ;Minus the terminating null
   774 000019A2 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   775 000019A5 280D02E7FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   776 000019AB 280DFFE6FFFF        <1>     sub byte [arg2Off], cl
   777 000019B1 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   778 000019B3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   779                              <1> .pctPullChars:
   780 000019BA AC                  <1>     lodsb
   781 000019BB AA                  <1>     stosb
   782 000019BC 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   783 000019BE 7404                <1>     je .pctExit
   784 000019C0 FFC1                <1>     inc ecx     ;Increment count
   785 000019C2 EBF6                <1>     jmp short .pctPullChars 
   786                              <1> .pctExit:
   787 000019C4 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   788                              <1>     return
    13                              <2> %%_ret:
    14 000019CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> batNextLine:
   791                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   792 000019CC 488D1513000000      <1>     lea rdx, .l1
   793 000019D3 B800090000          <1>     mov eax, 0900h
   794 000019D8 CD21                <1>     int 21h
   795 000019DA C605D2E6FFFF00      <1>     mov byte [batFlag], 0
   796 000019E1 E97CF6FFFF          <1>     jmp commandMain
   797 000019E6 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   797 000019EF 652E2E2E2077616974- <1>
   797 000019F8 2C20776861743F2048- <1>
   797 00001A01 6F772064696420796F- <1>
   797 00001A0A 7520646F2074686174- <1>
   797 00001A13 3F0D0A24            <1>
   798                              <1> 
   799                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   800                              <1> ;Input: rsi points to the count byte of a command line
   801 00001A17 4150                <1>     push r8
   802 00001A19 4151                <1>     push r9
   803 00001A1B B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   804 00001A1D CD21                <1>     int 21h
   805 00001A1F 52                  <1>     push rdx    ;Save on the stack
   806 00001A20 488D1DD9E4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   807 00001A27 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   808 00001A29 CD21                <1>     int 21h
   809 00001A2B 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   810 00001A2E 4989D9              <1>     mov r9, rbx
   811 00001A31 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   812 00001A38 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   813 00001A3D F348A5              <1>     rep movsq   ;Copy command line over
   814                              <1>     ;call doCommandLine
   815 00001A40 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   816 00001A41 B450                <1>     mov ah, 50h ;Set Current PSP
   817 00001A43 CD21                <1>     int 21h
   818 00001A45 4159                <1>     pop r9
   819 00001A47 4158                <1>     pop r8
   820 00001A49 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001A4B 488D1535EFFFFF      <1>     lea rdx, noSpace
    10 00001A52 488D0D51F2FFFF      <1>     lea rcx, pipeErr
    11 00001A59 F60541E6FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001A60 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001A62 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001A66 E866000000          <1>     call badCmn     ;Print the string
    15 00001A6B E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 00001A70 488D150CF2FFFF      <1>     lea rdx, syntaxErr
    18 00001A77 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 00001A79 488D1521EFFFFF      <1>     lea rdx, noEnvSpace
    21 00001A80 EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 00001A82 488D15A6F1FFFF      <1>     lea rdx, accDenMsg
    24 00001A89 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 00001A8B 488D1540EFFFFF      <1>     lea rdx, noSelfCopy
    27 00001A92 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001A94 488D1512F0FFFF      <1>     lea rdx, badParm
    30 00001A9B EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001A9D 488D15CCEFFFFF      <1>     lea rdx, badDrv
    33 00001AA4 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001AA6 488D158FF2FFFF      <1>     lea rdx, badArgs
    36 00001AAD EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001AAF 488D156AF2FFFF      <1>     lea rdx, badSpec
    39 00001AB6 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001AB8 488D15A0EEFFFF      <1>     lea rdx, dupName
    43 00001ABF EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001AC1 488D15AEEEFFFF      <1>     lea rdx, fnfMsg
    46 00001AC8 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001ACA 488D15DDF0FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001AD1 E93E230000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001AD6 488D1567EEFFFF      <1>     lea rdx, badCmd
    53 00001ADD EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001ADF C60502EBFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001AE6 C605FCEAFFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001AED C705F3EAFFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001AF6 00                  <1>
    59 00001AF7 C605F1EAFFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001AFE 66C705DDE9FFFF0000  <1>     mov word [searchSpec], 0
    61 00001B07 488D3D63EBFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001B0E C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001B11 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001B1A 3F                  <1>
    64 00001B1B 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001B1F C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001B26 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001B2D 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001B30 E81E250000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001B35 AC                  <1>     lodsb   ;Get this char
    72 00001B36 3C0D                <1>     cmp al, CR
    73 00001B38 744D                <1>     je .scanDone
    74 00001B3A 3A05EAE4FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001B40 7524                <1>     jne .notSwitch
    76 00001B42 AC                  <1>     lodsb   ;Get the next char
    77 00001B43 E8EA240000          <1>     call ucChar
    78 00001B48 3C57                <1>     cmp al, "W"
    79 00001B4A 7509                <1>     jne .notWide
    80 00001B4C 800D95EAFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001B53 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001B55 3C50                <1>     cmp al, "P"
    84 00001B57 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001B5D 800D84EAFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001B64 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001B66 F6057BEAFFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001B6D 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001B73 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001B76 E864260000          <1>     call copyArgumentToSearchSpec   
    93 00001B7B 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001B7E 800D63EAFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001B85 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001B87 F6055AEAFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001B8E 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001B90 488D354DE9FFFF      <1>     lea rsi, searchSpec
   101 00001B97 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001B9B 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001B9D 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001BA2 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001BA6 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001BAB CD21                <1>     int 21h
   108 00001BAD 3CFF                <1>     cmp al, -1
   109 00001BAF 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001BB5 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001BBA 84C0                <1>     test al, al
   113 00001BBC 740A                <1>     jz .currentDrv
   114 00001BBE FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001BC0 880528EAFFFF        <1>     mov byte [dirDrv], al
   116 00001BC6 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001BC8 E83D240000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001BCD 88051BEAFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001BD3 488D350AE9FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001BDA 488D3D0EEAFFFF      <1>     lea rdi, dirSrchDir
   124 00001BE1 0FB60506EAFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001BE8 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001BEA 0441                <1>     add al, "A" ;Turn into a letter
   127 00001BEC B43A                <1>     mov ah, ":"
   128 00001BEE 66AB                <1>     stosw   ;Store X: into the search path
   129 00001BF0 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001BF5 CD2F                <1>     int 2fh
   131 00001BF7 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001BF9 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001BFF 8A0524E4FFFF        <1>     mov al, byte [pathSep]
   135 00001C05 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001C07 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001C09 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001C0A FEC2                <1>     inc dl  ;Increment by 1
   139 00001C0C 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001C0F B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001C14 CD21                <1>     int 21h
   142 00001C16 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001C19 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001C1B 3807                <1>     cmp byte [rdi], al
   149 00001C1D 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001C1F 48FFC7              <1>     inc rdi
   151 00001C22 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001C24 8A05FFE3FFFF        <1>     mov al, byte [pathSep]
   154 00001C2A 3806                <1>     cmp byte [rsi], al
   155 00001C2C 7412                <1>     je .copyPathLoop
   156 00001C2E B43A                <1>     mov ah, ":"
   157 00001C30 86C4                <1>     xchg al, ah
   158 00001C32 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001C36 7408                <1>     je .copyPathLoop
   160 00001C38 88E0                <1>     mov al, ah
   161 00001C3A 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001C3D 7401                <1>     je .copyPathLoop
   163 00001C3F AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001C40 AC                  <1>     lodsb
   166 00001C41 3A05E2E3FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001C47 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001C49 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001C4B 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001C4D 48FFC6              <1>     inc rsi
   172 00001C50 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001C52 3C2E                <1>     cmp al, "."
   175 00001C54 7407                <1>     je .dots
   176                              <1> .store:
   177 00001C56 AA                  <1>     stosb
   178 00001C57 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001C59 7472                <1>     jz .exitPathCopy
   180 00001C5B EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001C5D 8A25C6E3FFFF        <1>     mov ah, byte [pathSep]
   188 00001C63 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001C66 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001C68 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001C6A 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001C6D 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001C6F 3A25B4E3FFFF        <1>     cmp ah, byte [pathSep]
   195 00001C75 7406                <1>     je .skipThisPathsep
   196 00001C77 84E4                <1>     test ah, ah
   197 00001C79 74C5                <1>     jz .copyPathLoop
   198 00001C7B EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001C7D 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001C80 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001C82 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001C85 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001C87 3A259CE3FFFF        <1>     cmp ah, byte [pathSep]
   208 00001C8D 7408                <1>     je .tdOk
   209 00001C8F 84E4                <1>     test ah, ah
   210 00001C91 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001C97 8A058CE3FFFF        <1>     mov al, byte byte [pathSep]
   213 00001C9D 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001CA1 0F84EDFDFFFF        <1>     je badParamError
   215 00001CA7 4881EF02000000      <1>     sub rdi, 2
   216 00001CAE 31C9                <1>     xor ecx, ecx
   217 00001CB0 FFC9                <1>     dec ecx
   218 00001CB2 FD                  <1>     std
   219 00001CB3 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001CB5 FC                  <1>     cld
   221 00001CB6 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001CBD 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001CBF 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001CC5 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001CC8 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001CCD 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001CD4 8A054FE3FFFF        <1>     mov al, byte [pathSep]
   230 00001CDA B43A                <1>     mov ah, ":"
   231 00001CDC 86C4                <1>     xchg al, ah
   232 00001CDE 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001CE2 7409                <1>     je .skipOverwrite
   234 00001CE4 88E0                <1>     mov al, ah
   235 00001CE6 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001CE8 7503                <1>     jne .skipOverwrite
   237 00001CEA C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001CED 488D35FBE8FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001CF4 4889F7              <1>     mov rdi, rsi
   241 00001CF7 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001CFC CD2F                <1>     int 2fh
   243 00001CFE E8E9240000          <1>     call scanForWildcards
   244 00001D03 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001D05 4889F2              <1>     mov rdx, rsi
   246 00001D08 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001D0C 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001D0E E8CB250000          <1>     call setDTA ;Set the DTA
   250 00001D13 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001D18 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001D1D CD21                <1>     int 21h
   253 00001D1F 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001D21 F60557E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001D28 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001D2A 31C0                <1>     xor eax, eax
   259 00001D2C 31C9                <1>     xor ecx, ecx
   260 00001D2E FFC9                <1>     dec ecx
   261 00001D30 F2AE                <1>     repne scasb
   262 00001D32 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001D35 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001D37 31C0                <1>     xor eax, eax
   268 00001D39 31C9                <1>     xor ecx, ecx
   269 00001D3B FFC9                <1>     dec ecx
   270 00001D3D F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001D3F 8A05E4E2FFFF        <1>     mov al, byte [pathSep]
   273 00001D45 31C9                <1>     xor ecx, ecx
   274 00001D47 FFC9                <1>     dec ecx
   275 00001D49 FD                  <1>     std ;Search backwards
   276 00001D4A F2AE                <1>     repne scasb
   277 00001D4C FC                  <1>     cld ;Search forwards again
   278 00001D4D 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001D50 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001D54 7503                <1>     jne .wcsp1
   281 00001D56 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001D59 57                  <1>     push rdi
   285 00001D5A 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001D5C 7503                <1>     jne .wcsp2
   287 00001D5E 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001D61 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001D64 488D3D06E9FFFF      <1>     lea rdi, dirSrchFCB
   291 00001D6B B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001D70 CD21                <1>     int 21h
   293 00001D72 5F                  <1>     pop rdi
   294 00001D73 31C0                <1>     xor eax, eax
   295 00001D75 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001D77 0FB60570E8FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001D7E E8FB150000          <1>     call volume.dirEP
   299 00001D83 488D158CEEFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001D8A B409                <1>     mov ah, 09h
   301 00001D8C CD21                <1>     int 21h
   302 00001D8E C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001D91 488D1557E8FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001D98 B409                <1>     mov ah, 09h
   305 00001D9A CD21                <1>     int 21h
   306 00001D9C C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001D9F 488D1544EBFFFF      <1>     lea rdx, crlf2
   308 00001DA6 B409                <1>     mov ah, 09h
   309 00001DA8 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001DAA 8A0579E2FFFF        <1>     mov al, byte [pathSep]
   313 00001DB0 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001DB3 7403                <1>     je .root
   315 00001DB5 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001DB8 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001DBB AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001DBC 488D35AFE8FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001DC3 E866230000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001DC8 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001DCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001DCE E80B250000          <1>     call setDTA
   326 00001DD3 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001DD8 488D1510E8FFFF      <1>     lea rdx, dirSrchDir
   328 00001DDF B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001DE4 CD21                <1>     int 21h
   330 00001DE6 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001DE8 E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001DED B44F                <1>     mov ah, 4Fh
   334 00001DEF CD21                <1>     int 21h
   335 00001DF1 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001DF3 F605EEE7FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001DFA 740B                <1>     jz .dirNoEndNewLine
   339 00001DFC 488D15E4EAFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001E03 B409                <1>     mov ah, 09h
   341 00001E05 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001E07 F705D9E7FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001E10 FF                  <1>
   345 00001E11 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001E13 488D155CEBFFFF      <1>     lea rdx, fnfMsg
   348 00001E1A E8F51F0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001E1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001E20 488D15A1F0FFFF      <1>     lea rdx, fourSpc
   352 00001E27 B409                <1>     mov ah, 09h
   353 00001E29 CD21                <1>     int 21h
   354 00001E2B B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001E2D CD21                <1>     int 21h
   356 00001E2F 8B05B5E7FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001E35 E8C6230000          <1>     call printDecimalWord
   358 00001E3A 488D150EECFFFF      <1>     lea rdx, dirOk
   359 00001E41 B409                <1>     mov ah, 09h
   360 00001E43 CD21                <1>     int 21h
   361 00001E45 488D1581F0FFFF      <1>     lea rdx, threeSpc
   362 00001E4C B409                <1>     mov ah, 09h
   363 00001E4E CD21                <1>     int 21h
   364 00001E50 B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00001E55 8A1593E7FFFF        <1>     mov dl, byte [dirDrv]
   366 00001E5B FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00001E5D CD21                <1>     int 21h ;Get disk free space info
   368 00001E5F 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00001E62 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00001E65 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00001E67 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00001E69 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00001E6C E88F230000          <1>     call printDecimalWord
   375 00001E71 488D15E1EBFFFF      <1>     lea rdx, bytesOk
   376 00001E78 B409                <1>     mov ah, 09h
   377 00001E7A CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001E7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00001E7D F605FBE2FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E84 75(7C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 00001E86 488D35FBE2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00001E8D 488D3DC6E2FFFF      <1>     lea rdi, cmdFcb
   388 00001E94 E827220000          <1>     call asciiFilenameToFCB
   389 00001E99 488D15BAE2FFFF      <1>     lea rdx, cmdFcb
   390 00001EA0 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00001EA5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00001EAA B440                <1>     mov ah, 40h ;Write handle
   393 00001EAC CD21                <1>     int 21h
   394 00001EAE 52                  <1>     push rdx
   395 00001EAF B220                <1>     mov dl, " "
   396 00001EB1 B402                <1>     mov ah, 02h ;Print char
   397 00001EB3 CD21                <1>     int 21h
   398 00001EB5 5A                  <1>     pop rdx
   399 00001EB6 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00001EBD B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00001EC2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00001EC7 B440                <1>     mov ah, 40h ;Write handle
   403 00001EC9 CD21                <1>     int 21h
   404 00001ECB F60516E7FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00001ED2 0F85AA000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00001ED8 F605A0E2FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00001EDF 7418                <1>     jz .dirPrintNotDir
   410 00001EE1 488D157FEBFFFF      <1>     lea rdx, dirLbl
   411 00001EE8 B409                <1>     mov ah, 09h
   412 00001EEA CD21                <1>     int 21h
   413 00001EEC 488D15DAEFFFFF      <1>     lea rdx, threeSpc
   414 00001EF3 B409                <1>     mov ah, 09h
   415 00001EF5 CD21                <1>     int 21h
   416 00001EF7 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00001EF9 B220                <1>     mov dl, " "
   420 00001EFB B402                <1>     mov ah, 02h
   421 00001EFD CD21                <1>     int 21h
   422 00001EFF 8B057FE2FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00001F05 E867230000          <1>     call getDecimalWord
   424 00001F0A 4889CB              <1>     mov rbx, rcx
   425 00001F0D 51                  <1>     push rcx
   426 00001F0E 480FCB              <1>     bswap rbx
   427 00001F11 B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00001F16 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00001F18 7514                <1>     jne .dirPrintFileSize
   431 00001F1A B402                <1>     mov ah, 02h
   432 00001F1C B220                <1>     mov dl, " "
   433 00001F1E CD21                <1>     int 21h
   434 00001F20 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00001F24 FFC9                <1>     dec ecx
   436 00001F26 81F901000000        <1>     cmp ecx, 1
   437 00001F2C 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00001F2E 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00001F2F 88DA                <1>     mov dl, bl
   442 00001F31 B402                <1>     mov ah, 02h
   443 00001F33 CD21                <1>     int 21h
   444 00001F35 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00001F39 FFC9                <1>     dec ecx
   446 00001F3B 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00001F3D 488D158DEFFFFF      <1>     lea rdx, twoSpc
   448 00001F44 B409                <1>     mov ah, 09h
   449 00001F46 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00001F48 B220                <1>     mov dl, " "
   452 00001F4A B402                <1>     mov ah, 02h
   453 00001F4C CD21                <1>     int 21h
   454 00001F4E 0FB7052DE2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00001F55 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00001F57 E8681C0000          <1>     call printDate
   457 00001F5C 488D156EEFFFFF      <1>     lea rdx, twoSpc
   458 00001F63 B409                <1>     mov ah, 09h
   459 00001F65 CD21                <1>     int 21h
   460 00001F67 0FB70512E2FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00001F6E E8731D0000          <1>     call printTime
   462 00001F73 488D156DE9FFFF      <1>     lea rdx, crlf
   463 00001F7A B409                <1>     mov ah, 09h
   464 00001F7C CD21                <1>     int 21h
   465 00001F7E B017                <1>     mov al, 23  ;23 lines... for the next bit
   466 00001F80 EB0D                <1>     jmp short .dirPrintNameExit
   467                              <1> .widePrint:
   468                              <1> ;If /W, print name space ext space space space space
   469 00001F82 488D153FEFFFFF      <1>     lea rdx, fourSpc
   470 00001F89 B409                <1>     mov ah, 09h ;Print string
   471 00001F8B CD21                <1>     int 21h
   472 00001F8D B073                <1>     mov al, 5*23    ;5 entries per line...
   473                              <1> .dirPrintNameExit:
   474 00001F8F FF0555E6FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   475 00001F95 FE054EE6FFFF        <1>     inc byte [dirLineCtr]
   476 00001F9B 380548E6FFFF        <1>     cmp byte [dirLineCtr], al
   477                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FA1 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FA3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   478 00001FA4 F6053DE6FFFF02      <1>     test byte [dirFlags], dirPageType
   479 00001FAB 741A                <1>     jz .dirPrnNoPag
   480 00001FAD 488D15DAEAFFFF      <1>     lea rdx, pauseMes
   481 00001FB4 B409                <1>     mov ah, 09h
   482 00001FB6 CD21                <1>     int 21h
   483 00001FB8 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   484 00001FBA CD21                <1>     int 21h
   485 00001FBC 488D1524E9FFFF      <1>     lea rdx, crlf   ;Force new line
   486 00001FC3 B409                <1>     mov ah, 09h
   487 00001FC5 CD21                <1>     int 21h
   488                              <1> .dirPrnNoPag:
   489 00001FC7 C6051BE6FFFF00      <1>     mov byte [dirLineCtr], 0
   490                              <1>     return
    13                              <2> %%_ret:
    14 00001FCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> chdir:
   493 00001FCF F605D6E0FFFFFF      <1>     test byte [arg1Flg], -1
   494 00001FD6 754D                <1>     jnz .changeDir
   495                              <1>     ;Print CWD
   496                              <1> .printCWD:
   497 00001FD8 E8AC1E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   498 00001FDD E82B1E0000          <1>     call printCRLF
   499                              <1>     return
    13                              <2> %%_ret:
    14 00001FE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .printDiskCWD:
   501                              <1> ;Print CWD for a specified drive
   502 00001FE3 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   503 00001FE7 88D0                <1>     mov al, dl
   504 00001FE9 0440                <1>     add al, "@" ;Get the UC letter
   505 00001FEB B43A                <1>     mov ah, ":"
   506 00001FED 488D3DF0E4FFFF      <1>     lea rdi, searchSpec
   507 00001FF4 66AB                <1>     stosw   ;Store X:, rdi+=2
   508 00001FF6 8A052DE0FFFF        <1>     mov al, byte [pathSep]
   509 00001FFC AA                  <1>     stosb   ;Store pathSep, inc rdi
   510 00001FFD B447                <1>     mov ah, 47h ;Get Current Working Directory
   511 00001FFF 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   512 00002002 CD21                <1>     int 21h
   513 00002004 E81F200000          <1>     call strlen
   514 00002009 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   515 0000200F B440                <1>     mov ah, 40h ;Write to handle
   516 00002011 BB01000000          <1>     mov ebx, 1  ;STDOUT
   517 00002016 488D15C7E4FFFF      <1>     lea rdx, searchSpec
   518 0000201D CD21                <1>     int 21h
   519 0000201F E8E91D0000          <1>     call printCRLF
   520                              <1>     return
    13                              <2> %%_ret:
    14 00002024 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> .changeDir:
   522 00002025 8A0583E0FFFF        <1>     mov al, byte [arg1FCBret]
   523 0000202B 3CFF                <1>     cmp al, -1 
   524 0000202D 0F846AFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   525 00002033 E88F210000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   526 00002038 488D15A5E4FFFF      <1>     lea rdx, searchSpec
   527 0000203F B43B                <1>     mov ah, 3Bh ;CHDIR
   528 00002041 CD21                <1>     int 21h
   529 00002043 0F8281FAFFFF        <1>     jc badDirError
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002049 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> mkdir:
   533 0000204A F6055BE0FFFFFF      <1>     test byte [arg1Flg], -1
   534 00002051 0F844FFAFFFF        <1>     jz badArgError
   535 00002057 F60551E0FFFFFF      <1>     test byte [arg2Flg], -1
   536 0000205E 0F8542FAFFFF        <1>     jnz badArgError
   537                              <1>     ;We have exactly one argument
   538 00002064 8A0544E0FFFF        <1>     mov al, byte [arg1FCBret]
   539 0000206A 3CFF                <1>     cmp al, -1 
   540 0000206C 0F842BFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   541 00002072 E850210000          <1>     call buildCommandPath
   542 00002077 488D1566E4FFFF      <1>     lea rdx, searchSpec
   543 0000207E B800390000          <1>     mov eax, 3900h  ;MKDIR
   544 00002083 CD21                <1>     int 21h
   545                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002085 73(49)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   546                              <1> .badMake:   ;Else, bad make
   547 00002087 488D1534EBFFFF      <1>     lea rdx, badMD
   548 0000208E E9811D0000          <1>     jmp printString
   549                              <1> 
   550                              <1> rmdir:
   551 00002093 F60512E0FFFFFF      <1>     test byte [arg1Flg], -1
   552 0000209A 0F8406FAFFFF        <1>     jz badArgError
   553 000020A0 F60508E0FFFFFF      <1>     test byte [arg2Flg], -1
   554 000020A7 0F85F9F9FFFF        <1>     jnz badArgError
   555                              <1>     ;We have exactly one argument
   556 000020AD 8A05FBDFFFFF        <1>     mov al, byte [arg1FCBret]
   557 000020B3 3CFF                <1>     cmp al, -1 
   558 000020B5 0F84E2F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   559 000020BB E807210000          <1>     call buildCommandPath
   560 000020C0 488D151DE4FFFF      <1>     lea rdx, searchSpec
   561 000020C7 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   562 000020CC CD21                <1>     int 21h
   563                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020CE 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020D0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   564                              <1> .badRemove:   ;Else, bad make
   565 000020D1 488D1507EBFFFF      <1>     lea rdx, badRD
   566 000020D8 E9371D0000          <1>     jmp printString
   567                              <1> 
   568                              <1> copy:
   569 000020DD 66C705EBE6FFFFFFFF  <1>     mov word [sourceHdl], -1
   570 000020E6 66C705E4E6FFFFFFFF  <1>     mov word [destHdl], -1
   571 000020EF 66C705DDE6FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   572 000020F8 C605E6E6FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   573 000020FF 48C705CDE6FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   573 00002108 0000                <1>
   574 0000210A 66C705CCE6FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   575 00002113 C705C4E6FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   575 0000211C 00                  <1>
   576 0000211D C6058DE5FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   577 00002124 C60508E6FFFF00      <1>     mov byte [destSpec], 0
   578 0000212B 48C7057FE6FFFF0000- <1>     mov qword [srcPtr], 0
   578 00002134 0000                <1>
   579 00002136 48C7057CE6FFFF0000- <1>     mov qword [destPtr], 0
   579 0000213F 0000                <1>
   580 00002141 E898210000          <1>     call setDTA
   581 00002146 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   582 0000214B CD21                <1>     int 21h
   583 0000214D 88057DE6FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   584                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   585                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   586                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   587 00002153 B800520000          <1>     mov eax, 5200h
   588 00002158 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   589 0000215A 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   590 0000215E 89CB                <1>     mov ebx, ecx
   591 00002160 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   592 00002163 B800480000          <1>     mov eax, 4800h
   593 00002168 CD21                <1>     int 21h
   594 0000216A 731E                <1>     jnc .bufOk
   595 0000216C 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   596 0000216E 750C                <1>     jnz .okSize
   597                              <1> .badAlloc:
   598                              <1> ;Not enough memory error!
   599 00002170 488D15BBE8FFFF      <1>     lea rdx, cpNoMem
   600 00002177 E955F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   601                              <1> .okSize:
   602 0000217C 89D9                <1>     mov ecx, ebx    
   603 0000217E C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   604 00002181 B800480000          <1>     mov eax, 4800h
   605 00002186 CD21                <1>     int 21h
   606 00002188 72E6                <1>     jc .badAlloc
   607                              <1> .bufOk:
   608 0000218A 48890546E6FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   609 00002191 66890D47E6FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   610                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   611 00002198 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   612 0000219F 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   613 000021A7 FFC9                <1>     dec ecx ;Turn into offset
   614 000021A9 4801CE              <1>     add rsi, rcx
   615 000021AC FD                  <1>     std ;Go in reverse
   616                              <1> .sd:    ;At this point, any switch chars affect destination!
   617 000021AD E8A11E0000          <1>     call skipDelimiters ;SkipDelimiters in reverse!
   618 000021B2 8A0572DEFFFF        <1>     mov al, byte [switchChar]
   619 000021B8 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   620 000021BB 7518                <1>     jne .noSwitch
   621                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   622 000021BD 48FFC6              <1>     inc rsi ;Point to the switch
   623 000021C0 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the char after the switchchar
   624 000021C3 B302                <1>     mov bl, ascDes
   625 000021C5 E812040000          <1>     call .doSwitchRev
   626 000021CA 0F8567040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!
   627 000021D0 48FFCE              <1>     dec rsi         ;Go past the switchchar
   628 000021D3 EBD8                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   629                              <1> .noSwitch:
   630                              <1> ;Ok so we hit a path. Now search for the starting delimiter or start of line
   631 000021D5 48FFC6              <1>     inc rsi ;Go to the last char in the path
   632                              <1> .noSwitchLp:
   633 000021D8 AC                  <1>     lodsb   ;Get char at rsi, go back a char
   634 000021D9 E8831E0000          <1>     call isALdelimiter
   635 000021DE 7412                <1>     je .destFnd
   636 000021E0 8A0544DEFFFF        <1>     mov al, byte [switchChar]
   637 000021E6 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   638 000021E9 7404                <1>     je .se  ;Jump if so!
   639 000021EB FFC9                <1>     dec ecx ;One less char left to search
   640 000021ED EBE9                <1>     jmp short .noSwitchLp
   641                              <1> .se:
   642 000021EF 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   643                              <1> .destFnd:
   644 000021F2 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   645 000021F9 FC                  <1>     cld 
   646 000021FA 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   647 000021FD 488D3D2FE5FFFF      <1>     lea rdi, destSpec
   648 00002204 57                  <1>     push rdi
   649 00002205 E87A1F0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   650 0000220A 5F                  <1>     pop rdi
   651 0000220B E8FA1E0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   652 00002210 48893DA6E5FFFF      <1>     mov qword [destPtr], rdi
   653 00002217 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   654 0000221B 7517                <1>     jne .destEnd    ;Dont worry
   655 0000221D 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   656 0000221F E80E1E0000          <1>     call ucChar             ;Make sure we UC the drive letter
   657 00002224 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   658 00002226 4881C702000000      <1>     add rdi, 2              ;Point to this null
   659 0000222D 48893D89E5FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   660                              <1> .destEnd:
   661                              <1> ;Now start with source processing!!
   662 00002234 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   663                              <1> .srcLp:
   664 0000223B E8131E0000          <1>     call skipDelimiters 
   665 00002240 8A05E4DDFFFF        <1>     mov al, byte [switchChar]
   666 00002246 3806                <1>     cmp byte [rsi], al
   667 00002248 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   668                              <1>     ;rsi points to switch after switchchar
   669 0000224A B301                <1>     mov bl, ascSrc
   670 0000224C E885030000          <1>     call .doSwitch
   671 00002251 0F85E0030000        <1>     jnz .badExit
   672 00002257 4881C602000000      <1>     add rsi, 2
   673 0000225E EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   674                              <1> .noSrcSw:
   675 00002260 4839F5              <1>     cmp rbp, rsi
   676 00002263 7527                <1>     jne .noSameSrcDest
   677                              <1>     ;Here if the destination we specified earlier is the same as the source
   678                              <1>     ;This means, the actual destination is the current default drive
   679                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   680 00002265 E8A01D0000          <1>     call getCurrentDrive    ;Get current drive
   681 0000226A 0441                <1>     add al, "A"             ;Turn into a drive letter
   682 0000226C B43A                <1>     mov ah, ":"
   683 0000226E 0FB7C0              <1>     movzx eax, ax
   684 00002271 8905BCE4FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   685 00002277 488D3DB7E4FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   686 0000227E 48893D38E5FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   687 00002285 800D59E5FFFF10      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   688                              <1> .noSameSrcDest:
   689 0000228C 488D3D1EE4FFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   690 00002293 57                  <1>     push rdi
   691 00002294 E8EB1E0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   692 00002299 5F                  <1>     pop rdi
   693                              <1>     ;Now go forwards and pick up any more switches.
   694                              <1>     ;Also any "+" signs here!!
   695 0000229A 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   696                              <1> .swSrcSwPost:
   697 0000229D E8B11D0000          <1>     call skipDelimiters ;Skips trailing delimiters
   698 000022A2 8A0582DDFFFF        <1>     mov al, byte [switchChar]
   699 000022A8 3806                <1>     cmp byte [rsi], al
   700 000022AA 7516                <1>     jne .swSrcSwPostExit
   701                              <1>     ;rsi points to switch after switchchar
   702 000022AC B301                <1>     mov bl, ascSrc
   703 000022AE E823030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   704 000022B3 0F857E030000        <1>     jnz .badExit
   705 000022B9 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   706 000022C0 EBDB                <1>     jmp short .swSrcSwPost
   707                              <1> .swSrcSwPostExit:
   708 000022C2 4889FE              <1>     mov rsi, rdi
   709 000022C5 E8221F0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   710 000022CA 7507                <1>     jnz .oneCp
   711 000022CC 800D12E5FFFF04      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   712                              <1> .oneCp:
   713 000022D3 E8321E0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   714 000022D8 48893DD6E4FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   715 000022DF 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   716 000022E3 7517                <1>     jne .srcEnd             ;Dont worry
   717 000022E5 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   718 000022E7 E8461D0000          <1>     call ucChar             ;Make sure we UC the drive letter
   719 000022EC 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   720 000022EE 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   721 000022F5 48893DB9E4FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   722                              <1> .srcEnd:
   723                              <1> ;Now uppercase both paths
   724 000022FC 488D35AEE3FFFF      <1>     lea rsi, srcSpec
   725 00002303 E83C1D0000          <1>     call normalisePath
   726 00002308 488D3D24E4FFFF      <1>     lea rdi, destSpec
   727 0000230F E8301D0000          <1>     call normalisePath
   728                              <1> ;Now establish if the source is a directory or not!
   729 00002314 F605CAE4FFFF04      <1>     test byte [bCpFlg], wcSrc
   730 0000231B 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   731 0000231D 488D158DE3FFFF      <1>     lea rdx, srcSpec
   732 00002324 4889D6              <1>     mov rsi, rdx
   733 00002327 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   734 00002329 80FC3A              <1>     cmp ah, ":"
   735 0000232C 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   736 0000232E AC                  <1>     lodsb           ;Get char past :
   737 0000232F 84C0                <1>     test al, al     ;Is byte three nul?
   738 00002331 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   739 00002333 3A05F0DCFFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   740 00002339 7515                <1>     jne .isSrcDir
   741 0000233B AC                  <1>     lodsb           ;Get char past char past "X:\"
   742 0000233C 84C0                <1>     test al, al     
   743 0000233E 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   744                              <1> .srcStorWc:
   745                              <1> ;rsi points past the char to store the WC at
   746 00002340 C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   747 00002347 800D97E4FFFF04      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   748 0000234E EB44                <1>     jmp short .checkDestDir
   749                              <1> .isSrcDir:
   750 00002350 B910000000          <1>     mov ecx, dirDirectory
   751 00002355 B8004E0000          <1>     mov eax, 4E00h
   752 0000235A CD21                <1>     int 21h
   753 0000235C 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   754                              <1>     ;Was the file we found actually a directory?
   755 0000235E 803D1ADEFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   756 00002365 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   757 00002367 4889D7              <1>     mov rdi, rdx
   758 0000236A E8B91C0000          <1>     call strlen
   759 0000236F FFC9                <1>     dec ecx
   760 00002371 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   761 00002374 8A05AFDCFFFF        <1>     mov al, byte [pathSep]
   762 0000237A 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   763 0000237D 7401                <1>     je .srctpsp
   764 0000237F AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   765                              <1> .srctpsp:
   766 00002380 48893D2EE4FFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   767 00002387 B82A2E2A00          <1>     mov eax, "*.*"
   768 0000238C AB                  <1>     stosd   ;Store the WC with terminating nul!
   769 0000238D 800D51E4FFFF04      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   770                              <1> .checkDestDir:
   771                              <1> ;Now establish if destination is a directory or not!
   772 00002394 F6054AE4FFFF10      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   773 0000239B 0F855F010000        <1>     jnz .mod1
   774 000023A1 488D358BE3FFFF      <1>     lea rsi, destSpec
   775 000023A8 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   776 000023AA 80FC3A              <1>     cmp ah, ":"
   777 000023AD 751A                <1>     jne .isDestDir
   778 000023AF 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   779 000023B1 84C0                <1>     test al, al ;Is byte three nul?
   780 000023B3 0F8447010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   781 000023B9 84E4                <1>     test ah, ah ;Is byte four nul?
   782 000023BB 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   783 000023BD 3A0566DCFFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   784 000023C3 0F8437010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   785                              <1> .isDestDir:
   786                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   787 000023C9 488D1563E3FFFF      <1>     lea rdx, destSpec
   788 000023D0 B910000000          <1>     mov ecx, dirDirectory
   789 000023D5 B8004E0000          <1>     mov eax, 4E00h
   790 000023DA CD21                <1>     int 21h
   791 000023DC 7237                <1>     jc .mod2
   792                              <1>     ;Was the file we found actually a directory?
   793 000023DE 803D9ADDFFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   794 000023E5 752E                <1>     jne .mod2
   795                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   796                              <1>     ;If not, we need to place one there!
   797 000023E7 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   798 000023EA E8391C0000          <1>     call strlen
   799 000023EF FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   800 000023F1 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   801 000023F4 0FB6052EDCFFFF      <1>     movzx eax, byte [pathSep]
   802 000023FB 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   803 000023FE 0F84FC000000        <1>     je .mod1        ;If so, skip adding another one!
   804 00002404 66AB                <1>     stosw           ;Else, store the pathsep and null!
   805 00002406 48FFCF              <1>     dec rdi         ;Point back to null
   806 00002409 48893DADE3FFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   807 00002410 E9EB000000          <1>     jmp .mod1
   808                              <1> .mod2:
   809                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   810                              <1> ; to rename wildcard semantics. Always run through this as the destination
   811                              <1> ; name may have wildcards in it! But we don't add any.
   812 00002415 800DC9E3FFFF20      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   813 0000241C 488D3510E3FFFF      <1>     lea rsi, destSpec
   814 00002423 E8C41D0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   815 00002428 7407                <1>     jz .m2Wc
   816 0000242A 800DB4E3FFFF08      <1>     or byte [bCpFlg], noWcDes   ;The destination is a single file!
   817                              <1> .m2Wc:
   818                              <1> ;Search for the source file
   819 00002431 488D1579E2FFFF      <1>     lea rdx, srcSpec
   820 00002438 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   821 0000243A B8004E0000          <1>     mov eax, 4E00h
   822 0000243F CD21                <1>     int 21h
   823 00002441 0F82DC010000        <1>     jc .badSrcFile
   824 00002447 488B356FE3FFFF      <1>     mov rsi, qword [destPtr]
   825 0000244E 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   826 00002452 B801290000          <1>     mov eax, 2901h
   827 00002457 CD21                <1>     int 21h
   828                              <1> .md2Lp:
   829 00002459 488D3528DDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   830 00002460 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   831 00002464 B801290000          <1>     mov eax, 2901h
   832 00002469 CD21                <1>     int 21h  
   833                              <1> ;Now depending on source and dest patterns, build a filename in renName
   834 0000246B 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   835 0000246F 488D3D4FE3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   836 00002476 57                  <1>     push rdi
   837 00002477 48A5                <1>     movsq
   838 00002479 66A5                <1>     movsw
   839 0000247B A4                  <1>     movsb
   840 0000247C 5F                  <1>     pop rdi
   841 0000247D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   842 00002481 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   843                              <1> .md2NameMake:
   844 00002486 AC                  <1>     lodsb   ;Get the char from the source string
   845 00002487 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   846 0000248A 7502                <1>     jne .noStore    ;Dont store the char there
   847 0000248C 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   848                              <1> .noStore:
   849 0000248E 48FFC7              <1>     inc rdi ;Goto next char position
   850 00002491 FFC9                <1>     dec ecx
   851 00002493 75F1                <1>     jnz .md2NameMake
   852 00002495 488D35ECDCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   853 0000249C 488B3D12E3FFFF      <1>     mov rdi, qword [srcPtr]
   854 000024A3 E8671B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   855 000024A8 488D3516E3FFFF      <1>     lea rsi, renName
   856 000024AF 488B3D07E3FFFF      <1>     mov rdi, qword [destPtr]
   857 000024B6 E8731C0000          <1>     call FCBToAsciiz
   858 000024BB E8EA000000          <1>     call .prntFilespec  ;Prints the source filename
   859 000024C0 E8A7010000          <1>     call copyMain       ;And copy it!
   860 000024C5 731E                <1>     jnc .md2Ok
   861                              <1> ;Errors EXCEPT root dir full are ignored if in wildcard mode
   862 000024C7 3CFE                <1>     cmp al, -2
   863 000024C9 0F8443010000        <1>     je .rootDirFull
   864 000024CF F6050FE3FFFF04      <1>     test byte [bCpFlg], wcSrc   ;If in wc mode, proceed with next copy
   865 000024D6 750D                <1>     jnz .md2Ok      ;Ignore any errors in file creation   
   866 000024D8 3CFF                <1>     cmp al, -1      ;Source and destination same?
   867 000024DA 0F844D010000        <1>     je .badSameFile 
   868 000024E0 E952010000          <1>     jmp .badExit    ;Else generic error message
   869                              <1> .md2Ok:
   870 000024E5 F605F9E2FFFF04      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   871 000024EC 0F8486000000        <1>     jz .copyDone        ;Copy complete!
   872 000024F2 B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   873 000024F7 CD21                <1>     int 21h
   874 000024F9 727D                <1>     jc .copyDone        ;If no more files, we are done!
   875 000024FB E959FFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   876                              <1> .mod1:
   877                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   878 00002500 800DDEE2FFFF10      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   879 00002507 488D15A3E1FFFF      <1>     lea rdx, srcSpec
   880 0000250E 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   881 00002510 B8004E0000          <1>     mov eax, 4E00h
   882 00002515 CD21                <1>     int 21h
   883 00002517 0F8206010000        <1>     jc .badSrcFile  ;File not found error!!
   884                              <1> .mod1Lp:
   885 0000251D 488D3564DCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   886 00002524 488B3D8AE2FFFF      <1>     mov rdi, qword [srcPtr]
   887 0000252B E8EE1A0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   888 00002530 488B3D86E2FFFF      <1>     mov rdi, qword [destPtr]
   889 00002537 E8E21A0000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   890 0000253C E869000000          <1>     call .prntFilespec
   891 00002541 E826010000          <1>     call copyMain   ;And copy it!
   892 00002546 731E                <1>     jnc .mod1Ok
   893                              <1>     ;Errors EXCEPT root dir full are ignored if in wildcard mode
   894 00002548 3CFE                <1>     cmp al, -2
   895 0000254A 0F84C2000000        <1>     je .rootDirFull
   896 00002550 F6058EE2FFFF04      <1>     test byte [bCpFlg], wcSrc   ;If in wc mode, proceed with next copy
   897 00002557 750D                <1>     jnz .mod1Ok     ;Ignore any errors in file creation   
   898 00002559 3CFF                <1>     cmp al, -1      ;Source and destination same?
   899 0000255B 0F84CC000000        <1>     je .badSameFile 
   900 00002561 E9D1000000          <1>     jmp .badExit    ;Else generic error message
   901                              <1> .mod1Ok:
   902 00002566 F60578E2FFFF04      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   903 0000256D 7409                <1>     jz .copyDone
   904 0000256F B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   905 00002574 CD21                <1>     int 21h
   906 00002576 73A5                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   907                              <1> 
   908                              <1> .copyDone:
   909 00002578 E8C4000000          <1>     call .copyCleanup   ;Clean up resources!
   910 0000257D 488D1563E3FFFF      <1>     lea rdx, crlf
   911 00002584 B409                <1>     mov ah, 09h
   912 00002586 CD21                <1>     int 21h
   913 00002588 488D1539E9FFFF      <1>     lea rdx, fourSpc
   914 0000258F B409                <1>     mov ah, 09h
   915 00002591 CD21                <1>     int 21h
   916 00002593 8B0548E2FFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   917 00002599 E8621C0000          <1>     call printDecimalWord   ;n File(s) copied
   918 0000259E 488D157BE4FFFF      <1>     lea rdx, copyOk
   919 000025A5 B409                <1>     mov ah, 09h
   920 000025A7 CD21                <1>     int 21h    
   921                              <1>     return
    13                              <2> %%_ret:
    14 000025A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> .prntFilespec:
   924                              <1> ;Prints the filespec to STDOUT. If the path is 
   925 000025AA F60534E2FFFF04      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   926                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025B1 74(A9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   927 000025B3 488D15F7E0FFFF      <1>     lea rdx, srcSpec
   928 000025BA 4889D7              <1>     mov rdi, rdx
   929 000025BD E8661A0000          <1>     call strlen
   930 000025C2 FFC9                <1>     dec ecx     ;Drop terminating null
   931 000025C4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   932 000025C9 B800400000          <1>     mov eax, 4000h  ;Write
   933 000025CE CD21                <1>     int 21h
   934 000025D0 E838180000          <1>     call printCRLF
   935                              <1>     return
    13                              <2> %%_ret:
    14 000025D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> .doSwitch:
   937                              <1> ;Since switches can come before or after a name, handle them here!
   938                              <1> ;If invalid switch char, returns ZF=NZ.
   939                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   940                              <1> ;       rsi -> Switchchar
   941 000025D6 56                  <1>     push rsi
   942 000025D7 48FFC6              <1>     inc rsi ;Point to char past switchchar
   943 000025DA AC                  <1>     lodsb   ;Get this char, goto next char
   944 000025DB 5E                  <1>     pop rsi
   945                              <1> .doSwitchRev:
   946 000025DC E8511A0000          <1>     call ucChar
   947 000025E1 3C41                <1>     cmp al, "A"
   948 000025E3 7509                <1>     jne .cB
   949 000025E5 081DFAE1FFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   950                              <1> .cExit:
   951 000025EB 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   952                              <1>     return
    13                              <2> %%_ret:
    14 000025ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   953                              <1> .cB:
   954 000025EE 3C42                <1>     cmp al, "B"
   955 000025F0 750A                <1>     jne .cV
   956 000025F2 F6D3                <1>     not bl  ;Reverse bits
   957 000025F4 201DEBE1FFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   958 000025FA EBEF                <1>     jmp short .cExit
   959                              <1> .cV:
   960 000025FC 3C56                <1>     cmp al, "V"
   961                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025FE 75(ED)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   962 00002600 F605C9E1FFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   963 00002607 75E2                <1>     jnz .cExit                  ;If not zero, flag already set!
   964                              <1>     ;Else, set it. We return it at the end!
   965 00002609 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   966 0000260E CD21                <1>     int 21h
   967 00002610 EBD9                <1>     jmp short .cExit
   968                              <1> 
   969                              <1> ;COPY Bad Exits!!
   970                              <1> .rootDirFull:
   971 00002612 E82A000000          <1>     call .copyCleanup
   972 00002617 488D159EE3FFFF      <1>     lea rdx, fulRootDir
   973 0000261E E9AEF4FFFF          <1>     jmp badCmn
   974                              <1> .badSrcFile:
   975 00002623 E819000000          <1>     call .copyCleanup
   976 00002628 E994F4FFFF          <1>     jmp badFnf  ;File not found!!
   977                              <1> .badSameFile:
   978 0000262D E80F000000          <1>     call .copyCleanup
   979 00002632 E954F4FFFF          <1>     jmp noSelfCopyError
   980                              <1> .badExit:
   981 00002637 E805000000          <1>     call .copyCleanup   ;Clean resources
   982 0000263C E953F4FFFF          <1>     jmp badParamError
   983                              <1> .copyCleanup:
   984                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   985                              <1> ;Handles are never open in this process!
   986 00002641 B8002E0000          <1>     mov eax, 2E00h
   987 00002646 8A0584E1FFFF        <1>     mov al, byte [verifyFlg]
   988 0000264C CD21                <1>     int 21h
   989 0000264E 4150                <1>     push r8
   990 00002650 4C8B0580E1FFFF      <1>     mov r8, qword [cpBufPtr]
   991 00002657 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   992 0000265A 7407                <1>     jz .skipFree
   993 0000265C B800490000          <1>     mov eax, 4900h
   994 00002661 CD21                <1>     int 21h
   995                              <1> .skipFree:
   996 00002663 4158                <1>     pop r8
   997 00002665 0F82581C0000        <1>     jc freezePC ;If free fails, man....
   998                              <1>     return
    13                              <2> %%_ret:
    14 0000266B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   999                              <1> 
  1000                              <1> copyMain:
  1001                              <1> ;This is the main copying procedure! 
  1002                              <1> ;Start by checking the two files are not the same. If so, complain!
  1003                              <1> ;If returns CF=CY, error code in al. 
  1004                              <1> ;   If al = -1, same filename error!
  1005                              <1> ;   If al = -2, Root Dir full (couldn't create file)
  1006                              <1> ;If returns CF=NC, file copied successfully.
  1007                              <1> ;Check the two files are not the same using truename in searchspec
  1008 0000266C 488D353EE0FFFF      <1>     lea rsi, srcSpec
  1009 00002673 488D3D6ADEFFFF      <1>     lea rdi, searchSpec
  1010 0000267A B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1011 0000267F CD21                <1>     int 21h 
  1012 00002681 57                  <1>     push rdi    ;Save this searchSpec
  1013 00002682 488D35AAE0FFFF      <1>     lea rsi, destSpec
  1014 00002689 488D3DD6DEFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1015 00002690 B800600000          <1>     mov eax, 6000h
  1016 00002695 CD21                <1>     int 21h
  1017 00002697 5E                  <1>     pop rsi     ;Get this ptr back
  1018 00002698 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1019 0000269D CD2F                <1>     int 2Fh
  1020 0000269F 750F                <1>     jnz .notSameFile
  1021 000026A1 B0FF                <1>     mov al, -1  ;Same filename error!
  1022                              <1> .badExit:
  1023 000026A3 50                  <1>     push rax
  1024 000026A4 E812010000          <1>     call .closeHandles
  1025 000026A9 58                  <1>     pop rax
  1026 000026AA F9                  <1>     stc
  1027                              <1>     return
    13                              <2> %%_ret:
    14 000026AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1028                              <1> .badExitNoSpace:
  1029 000026AC B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1030 000026AE EBF3                <1>     jmp short .badExit
  1031                              <1> .notSameFile:
  1032                              <1> ;Open source with read permission
  1033                              <1> ;Open destination with write permission
  1034 000026B0 488D15FADFFFFF      <1>     lea rdx, srcSpec
  1035 000026B7 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1036 000026BC CD21                <1>     int 21h
  1037 000026BE 72E3                <1>     jc .badExit
  1038 000026C0 6689050AE1FFFF      <1>     mov word [sourceHdl], ax
  1039 000026C7 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1040                              <1> 
  1041 000026CA B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1042 000026CF CD21                <1>     int 21h
  1043 000026D1 668915FDE0FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1044 000026D8 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1045 000026DB 7524                <1>     jnz .charDev
  1046                              <1>     ;Work out file size!
  1047 000026DD B802420000          <1>     mov eax, 4202h  ;LSEEK to the end of the file, if it is 0, exit w/o copy
  1048 000026E2 31D2                <1>     xor edx, edx
  1049 000026E4 31C9                <1>     xor ecx, ecx    ;ecx:edx is pointer
  1050 000026E6 CD21                <1>     int 21h         ;Returns in edx:eax
  1051 000026E8 72B9                <1>     jc .badExit
  1052 000026EA 85C0                <1>     test eax, eax   ;Are low bytes 0?
  1053 000026EC 7508                <1>     jnz .nonZero
  1054 000026EE 85D2                <1>     test edx, edx   ;If both are zero, then we have 0 byte file
  1055 000026F0 0F84C5000000        <1>     jz .closeHandles  ;So skip this file!
  1056                              <1> .nonZero:
  1057 000026F6 31D2                <1>     xor edx, edx    ;Return low bits to 0 = ecx:edx
  1058 000026F8 B800420000          <1>     mov eax, 4200h  ;Start from the start of the file
  1059 000026FD CD21                <1>     int 21h
  1060 000026FF 72A2                <1>     jc .badExit
  1061                              <1> .charDev:
  1062 00002701 488D152BE0FFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1063 00002708 F605D6E0FFFF08      <1>     test byte [bCpFlg], noWcDes
  1064 0000270F 742A                <1>     jz .normalOpen
  1065                              <1>     ;Now we first try to open this file. If this is file 0, we create.
  1066                              <1>     ;If this is more than file 0, we open
  1067 00002711 813DC6E0FFFF000000- <1>     cmp dword [dCpCnt], 0
  1067 0000271A 00                  <1>
  1068 0000271B 741E                <1>     je .normalOpen
  1069                              <1>     ;Now we open the file instead and append to the end
  1070 0000271D B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1071 00002722 CD21                <1>     int 21h
  1072 00002724 668905A8E0FFFF      <1>     mov word [destHdl], ax
  1073 0000272B 0FB7D8              <1>     movzx ebx, ax
  1074 0000272E 31D2                <1>     xor edx, edx
  1075 00002730 31C9                <1>     xor ecx, ecx
  1076 00002732 B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1077 00002737 CD21                <1>     int 21h
  1078 00002739 EB16                <1>     jmp short .prepCopy
  1079                              <1> .normalOpen:
  1080 0000273B B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1081 00002740 31C9                <1>     xor ecx, ecx    ;No file attributes
  1082 00002742 CD21                <1>     int 21h
  1083 00002744 0F8262FFFFFF        <1>     jc .badExitNoSpace
  1084 0000274A 66890582E0FFFF      <1>     mov word [destHdl], ax
  1085                              <1> .prepCopy:
  1086 00002751 31F6                <1>     xor esi, esi
  1087 00002753 488B157DE0FFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1088                              <1> .copyLoop:
  1089 0000275A 0FB70D7EE0FFFF      <1>     movzx ecx, word [wCpBufSz]
  1090 00002761 0FB71D69E0FFFF      <1>     movzx ebx, word [sourceHdl]
  1091 00002768 B43F                <1>     mov ah, 3Fh ;Read
  1092 0000276A CD21                <1>     int 21h
  1093 0000276C 0F8231FFFFFF        <1>     jc .badExit
  1094 00002772 85C0                <1>     test eax, eax   ;If no bytes read, exit!
  1095 00002774 743F                <1>     jz .okExit
  1096 00002776 01C6                <1>     add esi, eax
  1097 00002778 89C1                <1>     mov ecx, eax
  1098 0000277A 0FB71D52E0FFFF      <1>     movzx ebx, word [destHdl]
  1099 00002781 B440                <1>     mov ah, 40h ;Write
  1100 00002783 CD21                <1>     int 21h
  1101 00002785 0F8218FFFFFF        <1>     jc .badExit
  1102 0000278B 0FB70D4DE0FFFF      <1>     movzx ecx, word [wCpBufSz]
  1103 00002792 39C8                <1>     cmp eax, ecx    ;Did we read full buffer of chars?
  1104 00002794 74C4                <1>     je .copyLoop
  1105                              <1> ;If not char dev, exit
  1106 00002796 66F70536E0FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
  1107 0000279F 7414                <1>     jz .okExit
  1108 000027A1 66F7052BE0FFFF2000  <1>     test word [srcHdlInfo], 20h ;Is handle in cooked or binary mode?
  1109 000027AA 7509                <1>     jnz .okExit
  1110                              <1> ;Here the char dev must be in cooked mode. 
  1111                              <1> ;Check if the last char was ^Z
  1112 000027AC 09C0                <1>     or eax, eax ;Clear upper bits in eax
  1113 000027AE 807C02FD1A          <1>     cmp byte [rdx + rax - 3], EOF ;Was char before CRLF a EOF?
  1114 000027B3 75A5                <1>     jne .copyLoop   ;Jump if not
  1115                              <1> .okExit:
  1116 000027B5 FF0526E0FFFF        <1>     inc dword [dCpCnt]
  1117                              <1> .closeHandles:
  1118                              <1> ;Closes copy handles!
  1119 000027BB 668B1D0FE0FFFF      <1>     mov bx, word [sourceHdl]
  1120 000027C2 6681FBFFFF          <1>     cmp bx, -1
  1121 000027C7 7407                <1>     je .beSkipSource
  1122 000027C9 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1123 000027CE CD21                <1>     int 21h
  1124                              <1> .beSkipSource:
  1125 000027D0 668B1DFCDFFFFF      <1>     mov bx, word [destHdl]
  1126 000027D7 6681FBFFFF          <1>     cmp bx, -1
  1127                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000027DC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000027DE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1128 000027DF B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1129 000027E4 CD21                <1>     int 21h
  1130                              <1>     return
    13                              <2> %%_ret:
    14 000027E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> 
  1132                              <1> erase:
  1133 000027E7 F605BED8FFFFFF      <1>     test byte [arg1Flg], -1
  1134 000027EE 0F84B2F2FFFF        <1>     jz badArgError
  1135 000027F4 E8E51A0000          <1>     call setDTA     ;Start by resetting the DTA
  1136 000027F9 E8C9190000          <1>     call buildCommandPath   ;Get the relative path to the file
  1137                              <1> .dirLp:
  1138 000027FE 488D3DDFDCFFFF      <1>     lea rdi, searchSpec
  1139 00002805 E800190000          <1>     call findLastPathComponant
  1140 0000280A 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1141 0000280D 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1142 00002811 B03F                <1>     mov al, "?"
  1143                              <1>     ;Store question marks in the name field
  1144 00002813 57                  <1>     push rdi
  1145 00002814 48FFC7              <1>     inc rdi ;Goto the first char
  1146 00002817 B90B000000          <1>     mov ecx, 11
  1147 0000281C F3AA                <1>     rep stosb
  1148 0000281E 5F                  <1>     pop rdi
  1149 0000281F 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1150 00002822 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1151 00002827 CD21                <1>     int 21h
  1152 00002829 3C01                <1>     cmp al, 1
  1153 0000282B 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1154                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1155                              <1>     ;No dirs to handle in here
  1156 00002831 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1157 00002835 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1158 00002838 E8F1180000          <1>     call FCBToAsciiz    ;Null terminates for free
  1159                              <1>     ;Count the number of ?'s, if 11, we print the message
  1160 0000283D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1161 00002841 31C9                <1>     xor ecx, ecx
  1162                              <1> .wcScan:
  1163 00002843 AC                  <1>     lodsb
  1164 00002844 3C3F                <1>     cmp al, "?"
  1165 00002846 7534                <1>     jne .endCount
  1166 00002848 FFC1                <1>     inc ecx
  1167 0000284A 81F90B000000        <1>     cmp ecx, 11
  1168 00002850 75F1                <1>     jne .wcScan
  1169                              <1> .ynmsg:
  1170 00002852 488D1509E3FFFF      <1>     lea rdx, ynMes
  1171 00002859 E8B6150000          <1>     call printString
  1172 0000285E B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1173 00002860 CD21                <1>     int 21h ;Get char in al
  1174 00002862 E8CB170000          <1>     call ucChar ;Uppercase the char
  1175 00002867 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1176 00002869 740C                <1>     je .endCount1
  1177 0000286B 3C4E                <1>     cmp al, "N"
  1178                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000286D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000286F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1179 00002870 E898150000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1180 00002875 EBDB                <1>     jmp short .ynmsg    
  1181                              <1> .endCount1:
  1182 00002877 E891150000          <1>     call printCRLF
  1183                              <1> .endCount:
  1184                              <1>     ;Now we copy our search template pathstring to delPath
  1185 0000287C 488D3D2EDEFFFF      <1>     lea rdi, delPath
  1186 00002883 488D355ADCFFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1187 0000288A E88F170000          <1>     call strcpy2         ;Copy the string over to delPath
  1188                              <1> .findFile:
  1189                              <1>     ;Now we find first/find next our way through the files
  1190 0000288F 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1191 00002892 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1192 00002894 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1193 00002899 CD21                <1>     int 21h
  1194 0000289B 0F8220F2FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1195                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1196 000028A1 E864180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1197 000028A6 488D35DBD8FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1198                              <1> .delNextFile:
  1199                              <1> ;rsi and rdi dont move here
  1200 000028AD E86C170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1201 000028B2 488D15F8DDFFFF      <1>     lea rdx, delPath
  1202 000028B9 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1203 000028BE CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1204 000028C0 488D151DDCFFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1205 000028C7 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1206 000028CC CD21                <1>     int 21h
  1207 000028CE 73DD                <1>     jnc .delNextFile    
  1208 000028D0 F8                  <1>     clc ;Clear carry to indicate success
  1209                              <1>     return
    13                              <2> %%_ret:
    14 000028D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> .noWildcard:
  1211                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1212                              <1>     ; a \*.*<NUL> over the null terminator
  1213 000028D2 488D150BDCFFFF      <1>     lea rdx, searchSpec
  1214 000028D9 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1215 000028DE B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1216 000028E3 CD21                <1>     int 21h
  1217 000028E5 0F82D6F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1218 000028EB F6058DD8FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1219 000028F2 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1220                              <1>     ;Else, we are dealing with a dir
  1221 000028F4 4889D7              <1>     mov rdi, rdx
  1222 000028F7 31C9                <1>     xor ecx, ecx
  1223 000028F9 FFC9                <1>     dec ecx
  1224 000028FB F2AE                <1>     repne scasb ;Go to the end of the line!
  1225 000028FD 48FFCF              <1>     dec rdi
  1226 00002900 0FB60522D7FFFF      <1>     movzx eax, byte [pathSep]
  1227 00002907 AA                  <1>     stosb
  1228 00002908 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1229 0000290D AB                  <1>     stosd
  1230 0000290E E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1231                              <1> .delMain:   ;Call with rdx -> buffer!
  1232 00002913 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1233 00002918 CD21                <1>     int 21h
  1234                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000291A 73(D1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1235 0000291C 3C05                <1>     cmp al, errAccDen
  1236 0000291E 0F845EF1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1237 00002924 E986F1FFFF          <1>     jmp badFileError
  1238                              <1>     return
    13                              <2> %%_ret:
    14 00002929 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1239                              <1> 
  1240                              <1> date:
  1241 0000292A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1242 00002931 E81D170000          <1>     call skipDelimiters
  1243 00002936 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1244 00002939 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1245                              <1>     ;Else, we do interactive mode!
  1246 0000293B 488D15A3E1FFFF      <1>     lea rdx, curDate
  1247 00002942 B409                <1>     mov ah, 09h
  1248 00002944 CD21                <1>     int 21h
  1249 00002946 E8F8150000          <1>     call printFmtDate
  1250                              <1> .noCur:
  1251 0000294B 488D15A4E1FFFF      <1>     lea rdx, newDate
  1252 00002952 B409                <1>     mov ah, 09h
  1253 00002954 CD21                <1>     int 21h
  1254 00002956 488D15B8E1FFFF      <1>     lea rdx, ukDate
  1255 0000295D 488D05A4E1FFFF      <1>     lea rax, usDate
  1256 00002964 488D1DB7E1FFFF      <1>     lea rbx, jpDate
  1257 0000296B 803DC2D6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1258 00002972 480F47D3            <1>     cmova rdx, rbx
  1259 00002976 480F42D0            <1>     cmovb rdx, rax
  1260 0000297A B409                <1>     mov ah, 09h
  1261 0000297C CD21                <1>     int 21h
  1262                              <1> 
  1263 0000297E 488D15B2D8FFFF      <1>     lea rdx, cpyBuffer
  1264 00002985 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1265 00002988 B40A                <1>     mov ah, 0Ah
  1266 0000298A CD21                <1>     int 21h
  1267 0000298C 52                  <1>     push rdx
  1268 0000298D E87B140000          <1>     call printCRLF
  1269 00002992 5A                  <1>     pop rdx
  1270 00002993 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1271                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002997 74(29)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1272                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1273 00002999 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1274                              <1> .goDate:
  1275 0000299D 31C0                <1>     xor eax, eax    
  1276 0000299F 803D8ED6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1277 000029A6 727B                <1>     jb .us
  1278 000029A8 0F87B7000000        <1>     ja .jpn
  1279                              <1>     ;Here for UK style dates
  1280 000029AE E8E5180000          <1>     call getByte
  1281 000029B3 725D                <1>     jc .badDate
  1282 000029B5 8805F4DCFFFF        <1>     mov byte [td3], al  ;Store the day
  1283 000029BB E80C010000          <1>     call .validSep
  1284 000029C0 7550                <1>     jne .badDate
  1285 000029C2 E8D1180000          <1>     call getByte
  1286 000029C7 7249                <1>     jc .badDate
  1287 000029C9 8805E1DCFFFF        <1>     mov byte [td4], al  ;Store month
  1288 000029CF E8F8000000          <1>     call .validSep
  1289 000029D4 753C                <1>     jne .badDate
  1290 000029D6 E8C9180000          <1>     call getNum
  1291 000029DB E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1292 000029E0 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1293 000029E5 732B                <1>     jae .badDate
  1294 000029E7 668905BFDCFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1295                              <1> .writeDate:
  1296 000029EE E860160000          <1>     call skipDelimiters
  1297 000029F3 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1298 000029F6 751A                <1>     jne .badDate
  1299 000029F8 0FB70DAEDCFFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1300 000029FF 668B15A9DCFFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1301 00002A06 B8002B0000          <1>     mov eax, 2B00h
  1302 00002A0B CD21                <1>     int 21h
  1303 00002A0D 84C0                <1>     test al, al
  1304                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002A0F 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002A11 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1305                              <1> .badDate:
  1306 00002A12 488D15BDE0FFFF      <1>     lea rdx, badDate
  1307 00002A19 E8F6130000          <1>     call printString
  1308 00002A1E E928FFFFFF          <1>     jmp date.noCur
  1309                              <1> .us:
  1310 00002A23 E870180000          <1>     call getByte
  1311 00002A28 72E8                <1>     jc .badDate
  1312 00002A2A 880580DCFFFF        <1>     mov byte [td4], al  ;Store the month
  1313 00002A30 E897000000          <1>     call .validSep
  1314 00002A35 75DB                <1>     jne .badDate
  1315 00002A37 E85C180000          <1>     call getByte
  1316 00002A3C 72D4                <1>     jc .badDate
  1317 00002A3E 88056BDCFFFF        <1>     mov byte [td3], al  ;Store day
  1318 00002A44 E883000000          <1>     call .validSep
  1319 00002A49 75C7                <1>     jne .badDate
  1320 00002A4B E854180000          <1>     call getNum
  1321 00002A50 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1322 00002A55 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1323 00002A5A 73B6                <1>     jae .badDate
  1324 00002A5C 6689054ADCFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1325                              <1> .writeHop:
  1326 00002A63 EB89                <1>     jmp short .writeDate
  1327                              <1> .jpn:
  1328 00002A65 E83A180000          <1>     call getNum
  1329 00002A6A E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1330 00002A6F 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1331 00002A74 739C                <1>     jae .badDate
  1332 00002A76 66890530DCFFFF      <1>     mov word [td1], ax  ;Store the word directly
  1333 00002A7D E84A000000          <1>     call .validSep
  1334 00002A82 758E                <1>     jne .badDate
  1335 00002A84 E80F180000          <1>     call getByte
  1336 00002A89 7287                <1>     jc .badDate
  1337 00002A8B 88051EDCFFFF        <1>     mov byte [td3], al  ;Store the day
  1338 00002A91 E836000000          <1>     call .validSep
  1339 00002A96 0F8576FFFFFF        <1>     jne .badDate
  1340 00002A9C E8F7170000          <1>     call getByte
  1341 00002AA1 0F826BFFFFFF        <1>     jc .badDate
  1342 00002AA7 880503DCFFFF        <1>     mov byte [td4], al  ;Store month
  1343 00002AAD EBB4                <1>     jmp short .writeHop
  1344                              <1> .doYear:
  1345 00002AAF 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1346                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002AB4 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002AB6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1347                              <1> ;If the user specifies 80-99 it means 1980-1999
  1348                              <1> ;If the user specifies 00-79 it means 2000-2079
  1349 00002AB7 BBD0070000          <1>     mov ebx, 2000
  1350 00002ABC B96C070000          <1>     mov ecx, 1900
  1351 00002AC1 3D50000000          <1>     cmp eax, 80     
  1352 00002AC6 0F42CB              <1>     cmovb ecx, ebx
  1353 00002AC9 01C8                <1>     add eax, ecx
  1354                              <1>     return
    13                              <2> %%_ret:
    14 00002ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .validSep:
  1356 00002ACC AC                  <1>     lodsb           ;Get the char and return
  1357 00002ACD 3C2E                <1>     cmp al, "."
  1358                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002ACF 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1359 00002AD1 3C2F                <1>     cmp al, "/"
  1360                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AD3 74(CB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1361 00002AD5 3C2D                <1>     cmp al, "-"
  1362                              <1>     return
    13                              <2> %%_ret:
    14 00002AD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1363                              <1> 
  1364                              <1> time:
  1365 00002AD8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1366 00002ADF E86F150000          <1>     call skipDelimiters
  1367 00002AE4 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1368 00002AE7 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1369 00002AE9 488D154EE0FFFF      <1>     lea rdx, curTime
  1370 00002AF0 B409                <1>     mov ah, 09h
  1371 00002AF2 CD21                <1>     int 21h
  1372 00002AF4 E8E1130000          <1>     call printFmtTime
  1373                              <1> .noCur:
  1374 00002AF9 488D154FE0FFFF      <1>     lea rdx, newTime
  1375 00002B00 B409                <1>     mov ah, 09h
  1376 00002B02 CD21                <1>     int 21h
  1377                              <1> 
  1378 00002B04 488D15AAD6FFFF      <1>     lea rdx, inBuffer
  1379 00002B0B C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
  1380 00002B0E B40A                <1>     mov ah, 0Ah
  1381 00002B10 CD21                <1>     int 21h
  1382 00002B12 52                  <1>     push rdx
  1383 00002B13 488D15CDDDFFFF      <1>     lea rdx, crlf
  1384 00002B1A B409                <1>     mov ah, 09h
  1385 00002B1C CD21                <1>     int 21h
  1386 00002B1E 5A                  <1>     pop rdx
  1387 00002B1F 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1388                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B23 74(D7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1389 00002B25 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1390                              <1> .goTime:
  1391 00002B29 C7057ADBFFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1391 00002B32 00                  <1>
  1392 00002B33 31C0                <1>     xor eax, eax   
  1393 00002B35 E85E170000          <1>     call getByte
  1394 00002B3A 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1395 00002B40 880568DBFFFF        <1>     mov byte [td2], al  ;Save hours
  1396 00002B46 E89A000000          <1>     call .validsep
  1397 00002B4B 0F8583000000        <1>     jne .badTime
  1398 00002B51 E842170000          <1>     call getByte
  1399 00002B56 727C                <1>     jc .badTime
  1400 00002B58 88054FDBFFFF        <1>     mov byte [td1], al  ;Save minutes
  1401 00002B5E E882000000          <1>     call .validsep
  1402 00002B63 740F                <1>     je .goSec
  1403 00002B65 48FFCE              <1>     dec rsi ;Go back a char
  1404 00002B68 E8E6140000          <1>     call skipDelimiters ;Skip any delimiters
  1405 00002B6D 803E0D              <1>     cmp byte [rsi], CR
  1406 00002B70 743E                <1>     je .setTime
  1407 00002B72 EB60                <1>     jmp short .badTime
  1408                              <1> .goSec:
  1409 00002B74 E878000000          <1>     call .checkNum
  1410 00002B79 7259                <1>     jc .badTime
  1411 00002B7B E818170000          <1>     call getByte
  1412 00002B80 7252                <1>     jc .badTime
  1413 00002B82 880528DBFFFF        <1>     mov byte [td4], al  ;Save seconds
  1414 00002B88 AC                  <1>     lodsb       ;Move rsi forwards
  1415 00002B89 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1416 00002B8B 740F                <1>     je .goMsec
  1417 00002B8D 48FFCE              <1>     dec rsi ;Go back a char
  1418 00002B90 E8BE140000          <1>     call skipDelimiters ;Skip any delimiters
  1419 00002B95 803E0D              <1>     cmp byte [rsi], CR
  1420 00002B98 7416                <1>     je .setTime
  1421 00002B9A EB38                <1>     jmp short .badTime
  1422                              <1> .goMsec:
  1423 00002B9C E850000000          <1>     call .checkNum
  1424 00002BA1 7231                <1>     jc .badTime
  1425 00002BA3 E8F0160000          <1>     call getByte
  1426 00002BA8 722A                <1>     jc .badTime
  1427 00002BAA 8805FFDAFFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1428                              <1> .setTime:
  1429 00002BB0 E89E140000          <1>     call skipDelimiters
  1430 00002BB5 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1431 00002BB8 751A                <1>     jne .badTime
  1432 00002BBA 0FB70DECDAFFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1433 00002BC1 0FB715E7DAFFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1434 00002BC8 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1435 00002BCD CD21                <1>     int 21h
  1436 00002BCF A8FF                <1>     test al, -1
  1437                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002BD1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002BD3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1438                              <1> .badTime:
  1439 00002BD4 488D1554DFFFFF      <1>     lea rdx, badTime
  1440 00002BDB E834120000          <1>     call printString
  1441 00002BE0 E914FFFFFF          <1>     jmp time.noCur
  1442                              <1> .validsep:
  1443 00002BE5 AC                  <1>     lodsb
  1444 00002BE6 3A0555D4FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1445                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BEC 74(D3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1446 00002BEE 3C2E                <1>     cmp al, "."
  1447                              <1>     return
    13                              <2> %%_ret:
    14 00002BF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1448                              <1> .checkNum:
  1449 00002BF1 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1450 00002BF2 48FFCE              <1>     dec rsi
  1451 00002BF5 3C30                <1>     cmp al, "0"
  1452 00002BF7 7206                <1>     jb .cnbad
  1453 00002BF9 3C39                <1>     cmp al, "9"
  1454 00002BFB 7702                <1>     ja .cnbad
  1455 00002BFD F8                  <1>     clc
  1456                              <1>     return
    13                              <2> %%_ret:
    14 00002BFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1457                              <1> .cnbad:
  1458 00002BFF F9                  <1>     stc
  1459                              <1>     return
    13                              <2> %%_ret:
    14 00002C00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1460                              <1> ctty:
  1461 00002C01 F605A4D4FFFFFF      <1>     test byte [arg1Flg], -1
  1462 00002C08 0F8498EEFFFF        <1>     jz badArgError
  1463 00002C0E F6059AD4FFFFFF      <1>     test byte [arg2Flg], -1
  1464 00002C15 0F858BEEFFFF        <1>     jnz badArgError
  1465 00002C1B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1466 00002C22 0FB60584D4FFFF      <1>     movzx eax, byte [arg1Off]
  1467 00002C29 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1468 00002C2C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1469 00002C30 750F                <1>     jne .noDrive
  1470 00002C32 0FB60575D4FFFF      <1>     movzx eax, byte [arg1FCBret]
  1471 00002C39 3CFF                <1>     cmp al, -1
  1472 00002C3B 0F845CEEFFFF        <1>     je badDriveError
  1473                              <1> .noDrive:
  1474                              <1>     ;Now we open the provided file
  1475 00002C41 E899150000          <1>     call copyArgumentToSearchSpec
  1476 00002C46 488D1597D8FFFF      <1>     lea rdx, searchSpec
  1477 00002C4D B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1478 00002C52 CD21                <1>     int 21h
  1479 00002C54 0F8255EEFFFF        <1>     jc badFileError
  1480 00002C5A 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1481 00002C5D B800440000          <1>     mov eax, 4400h  ;Get device word
  1482 00002C62 CD21                <1>     int 21h
  1483 00002C64 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1484 00002C67 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1485                              <1>     ;Now we set this handle to be STDIO
  1486 00002C69 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1487 00002C6C 30F6                <1>     xor dh, dh
  1488 00002C6E B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1489 00002C73 CD21                <1>     int 21h
  1490                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1491 00002C75 31C9                <1>     xor ecx, ecx    ;STDIN
  1492 00002C77 B446                <1>     mov ah, 46h
  1493 00002C79 CD21                <1>     int 21h
  1494 00002C7B FFC1                <1>     inc ecx         ;STDOUT
  1495 00002C7D B446                <1>     mov ah, 46h
  1496 00002C7F CD21                <1>     int 21h
  1497 00002C81 FFC1                <1>     inc ecx         ;STDERR
  1498 00002C83 B446                <1>     mov ah, 46h
  1499 00002C85 CD21                <1>     int 21h
  1500 00002C87 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1501 00002C89 CD21                <1>     int 21h
  1502                              <1>     return
    13                              <2> %%_ret:
    14 00002C8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1503                              <1> .badCharDev:
  1504 00002C8C 488D15CDDFFFFF      <1>     lea rdx, badDev
  1505 00002C93 B409                <1>     mov ah, 09h
  1506 00002C95 CD21                <1>     int 21h
  1507 00002C97 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1508 00002C99 CD21                <1>     int 21h
  1509                              <1>     return
    13                              <2> %%_ret:
    14 00002C9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1510                              <1> 
  1511                              <1> cls:  
  1512 00002C9C B800440000          <1>     mov eax, 4400h  ;Get device info
  1513 00002CA1 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1514 00002CA6 CD21                <1>     int 21h         ;in dx
  1515 00002CA8 F7C280000000        <1>     test edx, devCharDev
  1516 00002CAE 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1517 00002CB0 F7C210000000        <1>     test edx, charDevFastOut
  1518 00002CB6 743E                <1>     jz .doAnsi
  1519                              <1>     ;Test if Int 29h uses Int 30h
  1520                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1521                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1522 00002CB8 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1523 00002CBD CD21                <1>     int 21h
  1524                              <1> .biosCheck:
  1525 00002CBF 66813BCD30          <1>     cmp word [rbx], 30CDh
  1526 00002CC4 740C                <1>     je .biosConfirmed
  1527 00002CC6 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1528 00002CCB 7429                <1>     je .doAnsi
  1529 00002CCD 48FFC3              <1>     inc rbx
  1530 00002CD0 EBED                <1>     jmp short .biosCheck
  1531                              <1> .biosConfirmed:
  1532                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1533 00002CD2 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1534 00002CD4 31DB                <1>     xor ebx, ebx
  1535 00002CD6 CD30                <1>     int 30h
  1536 00002CD8 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1537 00002CDA CD30                <1>     int 30h
  1538 00002CDC 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1539 00002CDF FECA                <1>     dec dl
  1540 00002CE1 B619                <1>     mov dh, 25  ;Number of rows is standard
  1541 00002CE3 31C0                <1>     xor eax, eax
  1542 00002CE5 89C1                <1>     mov ecx, eax
  1543 00002CE7 B707                <1>     mov bh, 7   ;Screen attributes
  1544 00002CE9 B406                <1>     mov ah, 6   ;Scroll
  1545 00002CEB CD30                <1>     int 30h
  1546 00002CED 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1547 00002CEF B700                <1>     mov bh, 0   ;Page 0
  1548 00002CF1 B402                <1>     mov ah, 2
  1549 00002CF3 CD30                <1>     int 30h
  1550                              <1>     return
    13                              <2> %%_ret:
    14 00002CF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1551                              <1> .doAnsi:
  1552                              <1> ;4 chars in the ansi routine
  1553                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1554                              <1> ; understand ANSI codes
  1555 00002CF6 488D35C7E1FFFF      <1>     lea rsi, ansiCls
  1556 00002CFD B904000000          <1>     mov ecx, 4
  1557 00002D02 B406                <1>     mov ah, 06h ;Raw char output
  1558                              <1> .ansiLp:
  1559 00002D04 AC                  <1>     lodsb   ;Get the char in 
  1560 00002D05 88C2                <1>     mov dl, al
  1561 00002D07 CD21                <1>     int 21h
  1562 00002D09 FFC9                <1>     dec ecx
  1563 00002D0B 75F7                <1>     jnz .ansiLp
  1564                              <1>     return
    13                              <2> %%_ret:
    14 00002D0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1565                              <1> 
  1566                              <1> break:
  1567 00002D0E F60597D3FFFFFF      <1>     test byte [arg1Flg], -1
  1568 00002D15 752D                <1>     jnz .argumentProvided
  1569                              <1>     ;Here we just get the status of break
  1570 00002D17 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1571 00002D1C CD21                <1>     int 21h
  1572 00002D1E 88D3                <1>     mov bl, dl
  1573 00002D20 488D15DBDFFFFF      <1>     lea rdx, breakIs
  1574 00002D27 B409                <1>     mov ah, 09h
  1575 00002D29 CD21                <1>     int 21h
  1576 00002D2B 488D15CBDFFFFF      <1>     lea rdx, onMes
  1577 00002D32 488D0DBEDFFFFF      <1>     lea rcx, offMes
  1578 00002D39 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1579 00002D3B 480F44D1            <1>     cmovz rdx, rcx
  1580 00002D3F B409                <1>     mov ah, 09h
  1581 00002D41 CD21                <1>     int 21h
  1582                              <1>     return
    13                              <2> %%_ret:
    14 00002D43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1583                              <1> .argumentProvided:
  1584 00002D44 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1585 00002D48 AD                  <1>     lodsd   ;Read the word
  1586 00002D49 89C3                <1>     mov ebx, eax
  1587 00002D4B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1588 00002D50 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1589 00002D53 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1590 00002D58 7416                <1>     je .maybeOn
  1591 00002D5A 663D4F46            <1>     cmp ax, "OF"
  1592 00002D5E 7523                <1>     jne .badOnOff
  1593 00002D60 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1594 00002D65 6681FB4620          <1>     cmp bx, "F "
  1595 00002D6A 7517                <1>     jne .badOnOff
  1596                              <1>     ;Set off
  1597 00002D6C 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1598 00002D6E EB0B                <1>     jmp short .setBreak
  1599                              <1> .maybeOn:
  1600 00002D70 663D4F4E            <1>     cmp ax, "ON"
  1601 00002D74 750D                <1>     jne .badOnOff
  1602                              <1>     ;Set on
  1603 00002D76 BA01000000          <1>     mov edx, 1
  1604                              <1> .setBreak:
  1605 00002D7B B801330000          <1>     mov eax, 3301h  ;Set break
  1606 00002D80 CD21                <1>     int 21h
  1607                              <1>     return
    13                              <2> %%_ret:
    14 00002D82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1608                              <1> .badOnOff:
  1609 00002D83 488D154AE1FFFF      <1>     lea rdx, badOnOff
  1610 00002D8A B409                <1>     mov ah, 09h
  1611 00002D8C CD21                <1>     int 21h
  1612                              <1>     return
    13                              <2> %%_ret:
    14 00002D8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1613                              <1> 
  1614                              <1> verify:
  1615 00002D8F F60516D3FFFFFF      <1>     test byte [arg1Flg], -1
  1616 00002D96 752D                <1>     jnz .argumentProvided
  1617                              <1>     ;Here we just get the status of break
  1618 00002D98 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1619 00002D9D CD21                <1>     int 21h
  1620 00002D9F 88C3                <1>     mov bl, al
  1621 00002DA1 488D1564DFFFFF      <1>     lea rdx, verifyIs
  1622 00002DA8 B409                <1>     mov ah, 09h
  1623 00002DAA CD21                <1>     int 21h
  1624 00002DAC 488D154ADFFFFF      <1>     lea rdx, onMes
  1625 00002DB3 488D0D3DDFFFFF      <1>     lea rcx, offMes
  1626 00002DBA 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1627 00002DBC 480F44D1            <1>     cmovz rdx, rcx
  1628 00002DC0 B409                <1>     mov ah, 09h
  1629 00002DC2 CD21                <1>     int 21h
  1630                              <1>     return
    13                              <2> %%_ret:
    14 00002DC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1631                              <1> .argumentProvided:
  1632 00002DC5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1633 00002DC9 AD                  <1>     lodsd   ;Read the word
  1634 00002DCA 89C3                <1>     mov ebx, eax
  1635 00002DCC 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1636 00002DD1 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1637 00002DD4 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1638 00002DD9 7416                <1>     je .maybeOn
  1639 00002DDB 663D4F46            <1>     cmp ax, "OF"
  1640 00002DDF 751F                <1>     jne .badOnOff
  1641 00002DE1 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1642 00002DE6 6681FB4620          <1>     cmp bx, "F "
  1643 00002DEB 7513                <1>     jne .badOnOff
  1644                              <1>     ;Set off
  1645 00002DED 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1646 00002DEF EB0A                <1>     jmp short .setVerify
  1647                              <1> .maybeOn:
  1648 00002DF1 663D4F4E            <1>     cmp ax, "ON"
  1649 00002DF5 7509                <1>     jne .badOnOff
  1650                              <1>     ;Set on
  1651 00002DF7 31C0                <1>     xor eax, eax
  1652 00002DF9 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1653                              <1> .setVerify:
  1654 00002DFB B42E                <1>     mov ah, 2Eh  ;Set Verify
  1655 00002DFD CD21                <1>     int 21h
  1656                              <1>     return
    13                              <2> %%_ret:
    14 00002DFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1657                              <1> .badOnOff:
  1658 00002E00 488D15CDE0FFFF      <1>     lea rdx, badOnOff
  1659 00002E07 B409                <1>     mov ah, 09h
  1660 00002E09 CD21                <1>     int 21h
  1661                              <1>     return
    13                              <2> %%_ret:
    14 00002E0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1662                              <1> 
  1663                              <1> rename:
  1664 00002E0C F60599D2FFFFFF      <1>     test byte [arg1Flg], -1
  1665 00002E13 0F848DECFFFF        <1>     jz badArgError
  1666 00002E19 F6058FD2FFFFFF      <1>     test byte [arg2Flg], -1
  1667 00002E20 0F8480ECFFFF        <1>     jz badArgError    
  1668                              <1>     ;Initialise the variables!
  1669 00002E26 488D3584D8FFFF      <1>     lea rsi, srcSpec
  1670 00002E2D 48893581D9FFFF      <1>     mov qword [srcPtr], rsi
  1671 00002E34 488D35F8D8FFFF      <1>     lea rsi, destSpec
  1672 00002E3B 4889357BD9FFFF      <1>     mov qword [destPtr], rsi
  1673                              <1>     ;Check the second path is just a filename!
  1674 00002E42 0FB60567D2FFFF      <1>     movzx eax, byte [arg2Off]
  1675 00002E49 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1676 00002E50 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1677 00002E53 488D3D8AD6FFFF      <1>     lea rdi, searchSpec
  1678 00002E5A 57                  <1>     push rdi
  1679 00002E5B E824130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1680 00002E60 5F                  <1>     pop rdi
  1681 00002E61 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1682 00002E65 0F843BECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1683 00002E6B 4889FE              <1>     mov rsi, rdi
  1684                              <1> .destScan:
  1685 00002E6E AC                  <1>     lodsb   ;Get the char
  1686 00002E6F 3A05B4D1FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1687 00002E75 0F842BECFFFF        <1>     je badArgError
  1688 00002E7B 84C0                <1>     test al, al
  1689 00002E7D 75EF                <1>     jnz .destScan
  1690                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1691 00002E7F 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1692 00002E83 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1692 00002E8C 3F                  <1>
  1693 00002E8D B903000000          <1>     mov ecx, 3  ;24 bytes
  1694 00002E92 F348AB              <1>     rep stosq
  1695 00002E95 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1696 00002E96 488D3547D6FFFF      <1>     lea rsi, searchSpec
  1697 00002E9D 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1698 00002EA1 B80D290000          <1>     mov eax, 290Dh
  1699 00002EA6 CD21                <1>     int 21h     
  1700 00002EA8 50                  <1>     push rax    ;Save the WC signature
  1701 00002EA9 E819130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1702 00002EAE 488D3D2FD6FFFF      <1>     lea rdi, searchSpec
  1703 00002EB5 E850120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1704 00002EBA 4889FE              <1>     mov rsi, rdi
  1705 00002EBD 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1706 00002EC0 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1707 00002EC4 B80D290000          <1>     mov eax, 290Dh
  1708 00002EC9 CD21                <1>     int 21h
  1709 00002ECB 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1710 00002ECC 88CC                <1>     mov ah, cl
  1711 00002ECE 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1712 00002ED1 0F84EC000000        <1>     jz .noWC
  1713 00002ED7 488D3506D6FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1714                              <1>     ;Now we check if we have a path to actually handle
  1715 00002EDE 4839F3              <1>     cmp rbx, rsi
  1716 00002EE1 7444                <1>     je .noPath
  1717 00002EE3 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1718 00002EE7 488D35F6D5FFFF      <1>     lea rsi, searchSpec
  1719 00002EEE 488D3DBCD7FFFF      <1>     lea rdi, srcSpec
  1720 00002EF5 56                  <1>     push rsi
  1721 00002EF6 E814110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1722 00002EFB 5E                  <1>     pop rsi
  1723 00002EFC 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1724 00002EFF 8A0524D1FFFF        <1>     mov al, byte [pathSep]
  1725 00002F05 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1726 00002F06 48893DA8D8FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1727 00002F0D 488D3D1FD8FFFF      <1>     lea rdi, destSpec
  1728 00002F14 E8F6100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1729 00002F19 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1730 00002F1C AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1731 00002F1D 48893D99D8FFFF      <1>     mov qword [destPtr], rdi
  1732 00002F24 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1733                              <1> .noPath:
  1734                              <1>     ;Now we have where to copy the files to, we can start our work!
  1735 00002F27 E8B2130000          <1>     call setDTA
  1736 00002F2C 488D15B1D5FFFF      <1>     lea rdx, searchSpec
  1737 00002F33 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1738 00002F35 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1739 00002F3A CD21                <1>     int 21h
  1740 00002F3C 0F8276EBFFFF        <1>     jc badDupFnf    ;If no file was found!
  1741                              <1> .wcLoop:
  1742                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1743 00002F42 488D353FD2FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1744 00002F49 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1745 00002F4D B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1746 00002F52 CD21                <1>     int 21h 
  1747                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1748 00002F54 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1749 00002F58 488D3D66D8FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1750 00002F5F 57                  <1>     push rdi
  1751 00002F60 48A5                <1>     movsq
  1752 00002F62 66A5                <1>     movsw
  1753 00002F64 A4                  <1>     movsb
  1754 00002F65 5F                  <1>     pop rdi
  1755 00002F66 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1756 00002F6A B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1757                              <1> .wcNameMake:
  1758 00002F6F AC                  <1>     lodsb   ;Get the char from the source string
  1759 00002F70 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1760 00002F73 7502                <1>     jne .noStore    ;Dont store the char there
  1761 00002F75 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1762                              <1> .noStore:
  1763 00002F77 48FFC7              <1>     inc rdi ;Goto next char position
  1764 00002F7A FFC9                <1>     dec ecx
  1765 00002F7C 75F1                <1>     jnz .wcNameMake
  1766                              <1> ;renName now has the FCB name for the file we wish to make!
  1767                              <1> ;Now make the two paths!
  1768 00002F7E 488D3503D2FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1769 00002F85 488B3D29D8FFFF      <1>     mov rdi, qword [srcPtr]
  1770 00002F8C E87E100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1771 00002F91 488D352DD8FFFF      <1>     lea rsi, renName
  1772 00002F98 488B3D1ED8FFFF      <1>     mov rdi, qword [destPtr]
  1773 00002F9F E88A110000          <1>     call FCBToAsciiz
  1774 00002FA4 488D1506D7FFFF      <1>     lea rdx, srcSpec
  1775 00002FAB 488D3D81D7FFFF      <1>     lea rdi, destSpec
  1776 00002FB2 B800560000          <1>     mov eax, 5600h
  1777 00002FB7 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1778 00002FB9 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1779 00002FBE CD21                <1>     int 21h
  1780 00002FC0 7380                <1>     jnc .wcLoop     ;And process it too!
  1781                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002FC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1782                              <1> .noWC:
  1783 00002FC3 E8FF110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1784 00002FC8 0FB605E1D0FFFF      <1>     movzx eax, byte [arg2Off]
  1785 00002FCF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1786 00002FD6 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1787 00002FD9 488D3D53D7FFFF      <1>     lea rdi, destSpec
  1788 00002FE0 57                  <1>     push rdi
  1789 00002FE1 E89E110000          <1>     call cpDelimPathToBufz
  1790 00002FE6 5F                  <1>     pop rdi
  1791 00002FE7 488D15F6D4FFFF      <1>     lea rdx, searchSpec
  1792 00002FEE B800560000          <1>     mov eax, 5600h
  1793 00002FF3 CD21                <1>     int 21h
  1794                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FF5 73(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1795 00002FF7 E9BCEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1796                              <1> 
  1797                              <1> 
  1798                              <1> touch:
  1799                              <1> ;Temporarily used to create files
  1800 00002FFC F605A9D0FFFFFF      <1>     test byte [arg1Flg], -1
  1801 00003003 0F849DEAFFFF        <1>     jz badArgError
  1802 00003009 E8B9110000          <1>     call buildCommandPath
  1803 0000300E 488D15CFD4FFFF      <1>     lea rdx, searchSpec
  1804 00003015 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1805 0000301A 31C9                <1>     xor ecx, ecx
  1806 0000301C CD21                <1>     int 21h
  1807 0000301E 721D                <1>     jc .touch1
  1808                              <1> .touchClose:
  1809 00003020 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1810 00003023 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1811 00003028 CD2F                <1>     int 2fh
  1812 0000302A 89C1                <1>     mov ecx, eax    ;Move the time here
  1813 0000302C 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1814 0000302E B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1815 00003033 CD21                <1>     int 21h
  1816 00003035 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1817 0000303A CD21                <1>     int 21h
  1818                              <1>     return
    13                              <2> %%_ret:
    14 0000303C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1819                              <1> .touch1:
  1820 0000303D 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1821 0000303F 7509                <1>     jne .touchError ;If not, this is a proper error!
  1822 00003041 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1823 00003046 CD21                <1>     int 21h
  1824 00003048 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1825                              <1> .touchError:
  1826 0000304A 3C03                <1>     cmp al, errPnf
  1827 0000304C 0F8454EAFFFF        <1>     je badArgError
  1828 00003052 3C02                <1>     cmp al, errFnf
  1829 00003054 0F8467EAFFFF        <1>     je badFnf
  1830 0000305A E923EAFFFF          <1>     jmp badAccError
  1831                              <1>     
  1832                              <1> 
  1833                              <1> join:
  1834                              <1> ;Mock join command, to test join. Make an external command.
  1835                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1836 0000305F F605AF000000FF      <1>     test byte [.joinOn], -1
  1837 00003066 743D                <1>     jz .okJoin
  1838                              <1> .joindisable:
  1839 00003068 B800520000          <1>     mov eax, 5200h  
  1840 0000306D CD21                <1>     int 21h
  1841                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1842 0000306F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1843 00003074 CD2A                <1>     int 2Ah
  1844 00003076 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1845 0000307A 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1846 0000307E 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1847 00003084 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1848 00003087 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1849 0000308B FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1850 0000308E B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1851 00003093 CD2A                <1>     int 2Ah
  1852 00003095 C6057900000000      <1>     mov byte [.joinOn], 0
  1853 0000309C 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1854 000030A3 EB45                <1>     jmp short .joinExit
  1855                              <1> .okJoin:
  1856 000030A5 C60569000000FF      <1>     mov byte [.joinOn], -1
  1857 000030AC B800520000          <1>     mov eax, 5200h  
  1858 000030B1 CD21                <1>     int 21h
  1859 000030B3 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1860 000030B7 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1861                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1862 000030BB B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1863 000030C0 CD2A                <1>     int 2Ah
  1864 000030C2 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1865 000030C8 4889DF              <1>     mov rdi, rbx
  1866 000030CB 488D3544000000      <1>     lea rsi, .joinPath
  1867 000030D2 B90C000000          <1>     mov ecx, .joinPathL
  1868 000030D7 F3A4                <1>     rep movsb   ;Copy chars over
  1869 000030D9 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1870 000030DC B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1871 000030E1 CD2A                <1>     int 2Ah
  1872 000030E3 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1873                              <1> .joinExit:
  1874 000030EA B800090000          <1>     mov eax, 0900h
  1875 000030EF CD21                <1>     int 21h
  1876                              <1>     return
    13                              <2> %%_ret:
    14 000030F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1877 000030F2 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1877 000030FB 61626C65640D0A24    <1>
  1878 00003103 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1878 0000310C 7361626C65640D0A24  <1>
  1879 00003115 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1880 00003116 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1880 0000311F 535400              <1>
  1881                              <1> .joinPathL  equ $ - .joinPath 
  1882                              <1> 
  1883                              <1> subst:
  1884                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1885                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1886 00003122 F605D3000000FF      <1>     test byte [.substOn], -1
  1887 00003129 7443                <1>     jz .okSubst
  1888                              <1> .substdisable:
  1889 0000312B B800520000          <1>     mov eax, 5200h  
  1890 00003130 CD21                <1>     int 21h
  1891                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1892 00003132 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1893 00003137 CD2A                <1>     int 2Ah
  1894 00003139 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1895 0000313D 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1896 00003144 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1897 0000314A C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1898 0000314D C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1899 00003151 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1900 00003157 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1901 0000315C CD2A                <1>     int 2Ah
  1902 0000315E C6059700000000      <1>     mov byte [.substOn], 0
  1903 00003165 488D157D000000      <1>     lea rdx, .substDisableMsg
  1904 0000316C EB61                <1>     jmp short .substExit
  1905                              <1> .okSubst:
  1906 0000316E C60587000000FF      <1>     mov byte [.substOn], -1
  1907 00003175 B800520000          <1>     mov eax, 5200h  
  1908 0000317A CD21                <1>     int 21h
  1909 0000317C B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1910 00003181 CD2A                <1>     int 2Ah
  1911 00003183 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1912 00003187 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1913 0000318E 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1914 00003192 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1915 00003199 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1916 0000319D C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1917                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1918 000031A4 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1919 000031AA 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1920 000031B0 4889DF              <1>     mov rdi, rbx
  1921 000031B3 488D3543000000      <1>     lea rsi, .substPath
  1922 000031BA B90C000000          <1>     mov ecx, .substPathL
  1923 000031BF F3A4                <1>     rep movsb   ;Copy chars over
  1924 000031C1 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1925 000031C6 CD2A                <1>     int 2Ah
  1926 000031C8 488D1508000000      <1>     lea rdx, .substEnableMsg
  1927                              <1> .substExit:
  1928 000031CF B800090000          <1>     mov eax, 0900h
  1929 000031D4 CD21                <1>     int 21h
  1930                              <1>     return
    13                              <2> %%_ret:
    14 000031D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1931 000031D7 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1931 000031E0 6E61626C65640D0A24  <1>
  1932 000031E9 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1932 000031F2 697361626C65640D0A- <1>
  1932 000031FB 24                  <1>
  1933 000031FC 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1934 000031FD 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1934 00003206 535400              <1>
  1935                              <1> .substPathL  equ $ - .substPath 
  1936                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1937                              <1> truename:
  1938 00003209 F6059CCEFFFFFF      <1>     test byte [arg1Flg], -1
  1939 00003210 0F8490E8FFFF        <1>     jz badArgError
  1940 00003216 E8AC0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1941 0000321B 488D35C2D2FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1942 00003222 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1943 00003225 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1944 0000322A CD21                <1>     int 21h
  1945 0000322C 730D                <1>     jnc .writePath
  1946 0000322E 3C02                <1>     cmp al, errFnf
  1947 00003230 0F8479E8FFFF        <1>     je badFileError
  1948 00003236 E959E8FFFF          <1>     jmp badParamError
  1949                              <1> .writePath:
  1950 0000323B 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1951 0000323E B9FFFFFFFF          <1>     mov ecx, -1
  1952 00003243 30C0                <1>     xor al, al
  1953 00003245 F2AE                <1>     repne scasb     ;Get the new len
  1954 00003247 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1955 00003249 FFC9                <1>     dec ecx
  1956 0000324B BB01000000          <1>     mov ebx, 01
  1957 00003250 B440                <1>     mov ah, 40h
  1958 00003252 CD21                <1>     int 21h
  1959 00003254 E8B40B0000          <1>     call printCRLF
  1960                              <1>     return
    13                              <2> %%_ret:
    14 00003259 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1961                              <1> 
  1962                              <1> label:
  1963                              <1> ;Displays/Changes/Deletes the file label
  1964 0000325A 488D1508000000      <1>     lea rdx, .l1
  1965 00003261 B800090000          <1>     mov eax, 0900h
  1966 00003266 CD21                <1>     int 21h
  1967                              <1>     return
    13                              <2> %%_ret:
    14 00003268 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1968 00003269 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1968 00003272 6E20756E696D706C65- <1>
  1968 0000327B 6D656E7465640D0A24  <1>
  1969                              <1> 
  1970                              <1> mklbl:
  1971                              <1>     ;lea rdx, .l1
  1972                              <1>     ;mov cx, 08h ;Make a label
  1973                              <1>     ;mov eax, 3C00h
  1974                              <1>     ;int 21h
  1975                              <1> 
  1976                              <1>     ;mov ebx, eax
  1977                              <1>     ;mov eax, 3E00h  ;Close the handle
  1978                              <1>     ;int 21h
  1979                              <1>     ;return
  1980                              <1> 
  1981                              <1> ;.l1: db "TESTLABEL",0
  1982 00003284 488D1508000000      <1>     lea rdx, .l1
  1983 0000328B B800160000          <1>     mov eax, 1600h  ;Create FCB
  1984 00003290 CD21                <1>     int 21h
  1985                              <1>     return
    13                              <2> %%_ret:
    14 00003292 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1986                              <1> .l1:
  1987                              <1>     istruc exFcb
  1988 00003293 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1989 00003294 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1990 0000329A 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1991 0000329B 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1992 000032A3 4C2020              <1>     at exFcb.fileext,   db "L  "
  1993 000032A6 00000000            <1>     at exFcb.curBlock,  dd 0
  1994 000032AA 00<rep 15h>         <1>     iend 
  1995                              <1> rmlbl:
  1996 000032BF 488D1508000000      <1>     lea rdx, .l1
  1997 000032C6 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1998 000032CB CD21                <1>     int 21h
  1999                              <1>     return
    13                              <2> %%_ret:
    14 000032CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2000                              <1> .l1:    ;FCB to volume label
  2001                              <1>     istruc exFcb
  2002 000032CE FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  2003 000032CF 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  2004 000032D5 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  2005 000032D6 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  2006 000032DE 3F3F3F              <1>     at exFcb.fileext,   db "???"
  2007 000032E1 00000000            <1>     at exFcb.curBlock,  dd 0
  2008 000032E5 00<rep 15h>         <1>     iend 
  2009                              <1> 
  2010                              <1> rnlbl:
  2011 000032FA 488D1508000000      <1>     lea rdx, .l1
  2012 00003301 B800170000          <1>     mov eax, 1700h
  2013 00003306 CD21                <1>     int 21h
  2014                              <1>     return
    13                              <2> %%_ret:
    14 00003308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2015                              <1> .l1:
  2016                              <1>     istruc exRenFcb
  2017 00003309 FF                  <1>     at exRenFcb.extSig,     db -1
  2018 0000330A 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  2019 00003310 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  2020 00003311 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  2021 00003319 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  2022 0000331C 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  2022 00003325 4C414245            <1>
  2023 00003329 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  2024 0000332C 00<rep 4h>          <1>     iend
  2025                              <1> volume:
  2026                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  2027 00003330 F60578CDFFFFFF      <1>     test byte [arg2Flg], -1
  2028 00003337 0F8569E7FFFF        <1>     jnz badArgError
  2029 0000333D F60568CDFFFFFF      <1>     test byte [arg1Flg], -1
  2030 00003344 7507                <1>     jnz .notCurrentDrive
  2031 00003346 E8BF0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  2032 0000334B EB31                <1>     jmp short .dirEP
  2033                              <1> .notCurrentDrive:
  2034 0000334D E8750E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  2035 00003352 488D358BD1FFFF      <1>     lea rsi, searchSpec
  2036 00003359 E8F50C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  2037 0000335E 66AD                <1>     lodsw                   ;Get this word
  2038 00003360 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  2039 00003363 0F853DE7FFFF        <1>     jne badArgError
  2040 00003369 8A053FCDFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  2041 0000336F A8FF                <1>     test al, -1
  2042 00003371 0F8526E7FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  2043 00003377 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  2044 0000337C FFC8                <1>     dec eax ;Convert to 0 based number
  2045                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  2046 0000337E E85B0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  2047 00003383 488D15F7D2FFFF      <1>     lea rdx, volFcb
  2048 0000338A FFC0                <1>     inc eax ;Get 1 based drive number
  2049 0000338C 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  2050 0000338E 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  2051 00003391 B800110000          <1>     mov eax, 1100h ;Find first FCB
  2052 00003396 CD21                <1>     int 21h
  2053 00003398 50                  <1>     push rax
  2054                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  2055 00003399 488D1547D5FFFF      <1>     lea rdx, crlf
  2056 000033A0 B409                <1>     mov ah, 09h
  2057 000033A2 CD21                <1>     int 21h
  2058 000033A4 488D15DED7FFFF      <1>     lea rdx, volMes
  2059 000033AB B409                <1>     mov ah, 09h
  2060 000033AD CD21                <1>     int 21h
  2061 000033AF 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  2062 000033B1 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  2063 000033B4 B402                <1>     mov ah, 02h
  2064 000033B6 CD21                <1>     int 21h
  2065 000033B8 58                  <1>     pop rax
  2066 000033B9 84C0                <1>     test al, al ;If this is zero, the call succeeded
  2067 000033BB 7409                <1>     jz .volIDOk
  2068 000033BD 488D15DCD7FFFF      <1>     lea rdx, volNo
  2069 000033C4 EB19                <1>     jmp short .volEndPrint
  2070                              <1> .volIDOk:
  2071 000033C6 488D15CED7FFFF      <1>     lea rdx, volOk
  2072 000033CD B409                <1>     mov ah, 09h
  2073 000033CF CD21                <1>     int 21h
  2074 000033D1 C605A5CDFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  2075 000033D8 488D1593CDFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  2076                              <1> .volEndPrint:
  2077 000033DF B409                <1>     mov ah, 09h
  2078 000033E1 CD21                <1>     int 21h
  2079 000033E3 488D15FDD4FFFF      <1>     lea rdx, crlf
  2080 000033EA B409                <1>     mov ah, 09h
  2081 000033EC CD21                <1>     int 21h
  2082                              <1>     return
    13                              <2> %%_ret:
    14 000033EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2083                              <1> 
  2084                              <1> version:
  2085 000033EF 488D15F1D4FFFF      <1>     lea rdx, crlf
  2086 000033F6 B409                <1>     mov ah, 09h
  2087 000033F8 CD21                <1>     int 21h
  2088 000033FA 488D1576D7FFFF      <1>     lea rdx, dosVer
  2089 00003401 B409                <1>     mov ah, 09h
  2090 00003403 CD21                <1>     int 21h
  2091 00003405 E80C000000          <1>     call .printVersionNumber
  2092 0000340A 488D15D6D4FFFF      <1>     lea rdx, crlf
  2093 00003411 B409                <1>     mov ah, 09h
  2094 00003413 CD21                <1>     int 21h
  2095                              <1>     return
    13                              <2> %%_ret:
    14 00003415 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2096                              <1> .printVersionNumber:
  2097 00003416 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  2098 00003418 CD21                <1>     int 21h
  2099 0000341A 50                  <1>     push rax
  2100 0000341B 0FB6C0              <1>     movzx eax, al
  2101 0000341E E8DD0D0000          <1>     call printDecimalWord
  2102 00003423 B22E                <1>     mov dl, "."
  2103 00003425 B402                <1>     mov ah, 02h
  2104 00003427 CD21                <1>     int 21h
  2105 00003429 58                  <1>     pop rax
  2106 0000342A 0FB6C4              <1>     movzx eax, ah
  2107 0000342D E8CE0D0000          <1>     call printDecimalWord
  2108                              <1>     return
    13                              <2> %%_ret:
    14 00003432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2109                              <1> 
  2110                              <1> 
  2111                              <1> memory:
  2112 00003433 488B1DE5CBFFFF      <1>     mov rbx, qword [sysVars]
  2113 0000343A 4885DB              <1>     test rbx, rbx
  2114 0000343D 7510                <1>     jnz .sysvarsOK
  2115 0000343F 488D15F5D9FFFF      <1>     lea rdx, memBad0
  2116 00003446 B409                <1>     mov ah, 09h
  2117 00003448 CD21                <1>     int 21h
  2118 0000344A E97F0E0000          <1>     jmp freezePC.altEP
  2119                              <1> .sysvarsOK:
  2120                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2121                              <1>     ; and rcx to store Application memory
  2122 0000344F 31F6                <1>     xor esi, esi
  2123 00003451 31FF                <1>     xor edi, edi
  2124 00003453 31ED                <1>     xor ebp, ebp
  2125 00003455 31C9                <1>     xor ecx, ecx
  2126 00003457 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2127 0000345B 488B1B              <1>     mov rbx, qword [rbx]
  2128                              <1> .memLp:
  2129 0000345E 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2130 00003461 7409                <1>     je .validMCB
  2131 00003463 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2132 00003466 0F8501010000        <1>     jne .badMCBFound
  2133                              <1> .validMCB:
  2134 0000346C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2135 0000346F 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2136 00003473 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2137 0000347B 7505                <1>     jne .notDOS
  2138 0000347D 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2139 00003480 EB21                <1>     jmp short .gotoNext
  2140                              <1> .notDOS:
  2141 00003482 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2142 0000348A 7505                <1>     jne .notFree
  2143 0000348C 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2144 0000348F EB12                <1>     jmp short .gotoNext
  2145                              <1> .notFree:
  2146 00003491 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2147 00003499 7505                <1>     jne .notHole
  2148 0000349B 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2149 0000349E EB03                <1>     jmp short .gotoNext
  2150                              <1> .notHole:
  2151 000034A0 4801C1              <1>     add rcx, rax    ;Add to Application count
  2152                              <1> .gotoNext:
  2153 000034A3 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2154 000034A6 7407                <1>     je .endOfWalk
  2155 000034A8 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2156 000034AD EBAF                <1>     jmp short .memLp
  2157                              <1> .endOfWalk:
  2158                              <1>     
  2159 000034AF 488D15E6D8FFFF      <1>     lea rdx, memDOS
  2160 000034B6 B409                <1>     mov ah, 09h
  2161 000034B8 CD21                <1>     int 21h
  2162 000034BA 4889F0              <1>     mov rax, rsi
  2163 000034BD E89D000000          <1>     call .mcbPrintAmount
  2164 000034C2 488D156BD9FFFF      <1>     lea rdx, memByte
  2165 000034C9 B409                <1>     mov ah, 09h
  2166 000034CB CD21                <1>     int 21h
  2167                              <1> 
  2168 000034CD 4885ED              <1>     test rbp, rbp
  2169 000034D0 741E                <1>     jz .skipHole
  2170 000034D2 488D150FD9FFFF      <1>     lea rdx, memHole
  2171 000034D9 B409                <1>     mov ah, 09h
  2172 000034DB CD21                <1>     int 21h
  2173 000034DD 4889E8              <1>     mov rax, rbp
  2174 000034E0 E87A000000          <1>     call .mcbPrintAmount
  2175 000034E5 488D1548D9FFFF      <1>     lea rdx, memByte
  2176 000034EC B409                <1>     mov ah, 09h
  2177 000034EE CD21                <1>     int 21h
  2178                              <1> .skipHole:
  2179                              <1> 
  2180 000034F0 488D15CBD8FFFF      <1>     lea rdx, memApp
  2181 000034F7 B409                <1>     mov ah, 09h
  2182 000034F9 CD21                <1>     int 21h
  2183 000034FB 4889C8              <1>     mov rax, rcx
  2184 000034FE E85C000000          <1>     call .mcbPrintAmount
  2185 00003503 488D152AD9FFFF      <1>     lea rdx, memByte
  2186 0000350A B409                <1>     mov ah, 09h
  2187 0000350C CD21                <1>     int 21h
  2188                              <1> 
  2189 0000350E 488D15F9D8FFFF      <1>     lea rdx, memFree
  2190 00003515 B409                <1>     mov ah, 09h
  2191 00003517 CD21                <1>     int 21h
  2192 00003519 4889F8              <1>     mov rax, rdi
  2193 0000351C E83E000000          <1>     call .mcbPrintAmount
  2194 00003521 488D150CD9FFFF      <1>     lea rdx, memByte
  2195 00003528 B409                <1>     mov ah, 09h
  2196 0000352A CD21                <1>     int 21h
  2197                              <1> 
  2198 0000352C 488D1543D8FFFF      <1>     lea rdx, memSys
  2199 00003533 B409                <1>     mov ah, 09h
  2200 00003535 CD21                <1>     int 21h
  2201 00003537 4889F0              <1>     mov rax, rsi
  2202 0000353A 4801F8              <1>     add rax, rdi
  2203 0000353D 4801C8              <1>     add rax, rcx
  2204 00003540 4801E8              <1>     add rax, rbp
  2205 00003543 E817000000          <1>     call .mcbPrintAmount
  2206 00003548 488D15E5D8FFFF      <1>     lea rdx, memByte
  2207 0000354F B409                <1>     mov ah, 09h
  2208 00003551 CD21                <1>     int 21h
  2209                              <1> 
  2210 00003553 488D158DD3FFFF      <1>     lea rdx, crlf
  2211 0000355A B409                <1>     mov ah, 09h
  2212 0000355C CD21                <1>     int 21h
  2213                              <1>     return
    13                              <2> %%_ret:
    14 0000355E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2214                              <1> 
  2215                              <1> .mcbPrintAmount:
  2216 0000355F 51                  <1>     push rcx
  2217 00003560 56                  <1>     push rsi
  2218 00003561 57                  <1>     push rdi
  2219 00003562 55                  <1>     push rbp
  2220 00003563 E8980C0000          <1>     call printDecimalWord
  2221 00003568 5D                  <1>     pop rbp
  2222 00003569 5F                  <1>     pop rdi
  2223 0000356A 5E                  <1>     pop rsi
  2224 0000356B 59                  <1>     pop rcx
  2225                              <1>     return
    13                              <2> %%_ret:
    14 0000356C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2226                              <1> .badMCBFound:
  2227 0000356D 488D1507D9FFFF      <1>     lea rdx, memBad2
  2228 00003574 B409                <1>     mov ah, 09h
  2229 00003576 CD21                <1>     int 21h
  2230 00003578 E9510D0000          <1>     jmp freezePC.altEP
  2231                              <1> 
  2232                              <1> type:
  2233 0000357D F60528CBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2234 00003584 0F841CE5FFFF        <1>     jz badArgError
  2235 0000358A F6051ECBFFFFFF      <1>     test byte [arg2Flg], -1
  2236 00003591 0F850FE5FFFF        <1>     jnz badArgError         ;If this set, error
  2237 00003597 4C8B0571CAFFFF      <1>     mov r8, [pspPtr]
  2238 0000359E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2239 000035A5 0FB60501CBFFFF      <1>     movzx eax, byte [arg1Off]
  2240 000035AC 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2241 000035AF 803E0D              <1>     cmp byte [rsi], CR
  2242 000035B2 0F84EEE4FFFF        <1>     je badArgError
  2243 000035B8 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2244 000035BC 750F                <1>     jne .noDrive
  2245 000035BE 0FB605E9CAFFFF      <1>     movzx eax, byte [arg1FCBret]
  2246 000035C5 3CFF                <1>     cmp al, -1
  2247 000035C7 0F84D0E4FFFF        <1>     je badDriveError
  2248                              <1> .noDrive:
  2249                              <1>     ;Now we open the provided file
  2250 000035CD E8F50B0000          <1>     call buildCommandPath
  2251 000035D2 488D150BCFFFFF      <1>     lea rdx, searchSpec
  2252 000035D9 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2253 000035DE CD21                <1>     int 21h
  2254 000035E0 0F82C9E4FFFF        <1>     jc badFileError
  2255 000035E6 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2256 000035ED 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2257                              <1> .lp:
  2258 000035F0 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2259 000035F5 B43F                <1>     mov ah, 3Fh ;Read handle
  2260 000035F7 CD21                <1>     int 21h
  2261 000035F9 89C1                <1>     mov ecx, eax
  2262 000035FB 67E317              <1>     jecxz .exit
  2263 000035FE 53                  <1>     push rbx    ;Save the original in handle
  2264 000035FF BB01000000          <1>     mov ebx, 1  ;STDOUT
  2265 00003604 B440                <1>     mov ah, 40h
  2266 00003606 CD21                <1>     int 21h
  2267 00003608 5B                  <1>     pop rbx ;Get back the original read handle
  2268 00003609 720F                <1>     jc .exitBad
  2269 0000360B 39C8                <1>     cmp eax, ecx
  2270 0000360D 74E1                <1>     je .lp
  2271 0000360F FFC9                <1>     dec ecx ;One less for a ^Z
  2272 00003611 39C8                <1>     cmp eax, ecx
  2273 00003613 7505                <1>     jne .exitBad
  2274                              <1> .exit:
  2275 00003615 B43E                <1>     mov ah, 3Eh ;Close handle
  2276 00003617 CD21                <1>     int 21h
  2277                              <1>     return
    13                              <2> %%_ret:
    14 00003619 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2278                              <1> .exitBad:
  2279                              <1>     ;If it is a char device, don't print an error
  2280 0000361A B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2281 0000361F BB01000000          <1>     mov ebx, 1
  2282 00003624 CD21                <1>     int 21h
  2283 00003626 F6C280              <1>     test dl, devCharDev
  2284                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003629 75(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2285 0000362B E91BE4FFFF          <1>     jmp badDiskFull
  2286                              <1> 
  2287                              <1> exit:
  2288 00003630 F605F4C9FFFFFF      <1>     test byte [permaSwitch], -1
  2289                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003637 75(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2290 00003639 488B05D7C9FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  2291 00003640 483DFFFFFFFF        <1>     cmp rax, -1
  2292                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003646 74(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2293 00003648 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  2294                              <1> 
  2295 0000364C 488B15D9C9FFFF      <1>     mov rdx, qword [parentInt22]
  2296 00003653 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  2297 00003657 B822250000          <1>     mov eax, 2522h
  2298 0000365C CD21                <1>     int 21h
  2299                              <1> 
  2300 0000365E B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2301 00003663 CD21                <1>     int 21h
  2302                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2303                              <1> 
  2304                              <1> launchChild:
  2305                              <1>     ;We execute an external command here.
  2306                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2307                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2308                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2309                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2310                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2311 00003666 E8730C0000          <1>     call setDTA         
  2312                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2313 0000366B 488D3DC9CCFFFF      <1>     lea rdi, cmdPathSpec
  2314 00003672 4889FE              <1>     mov rsi, rdi
  2315 00003675 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2316 0000367A CD2F                <1>     int 2fh
  2317 0000367C E8890A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2318 00003681 4889FE              <1>     mov rsi, rdi    ;Source here
  2319 00003684 488D3DCFCAFFFF      <1>     lea rdi, cmdFcb
  2320 0000368B B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2321 00003690 CD21                <1>     int 21h
  2322 00003692 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2323 00003694 0F853CE4FFFF        <1>     jnz badCmdError
  2324 0000369A 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2325                              <1> .pathLoop:
  2326 0000369D 488D35BFCAFFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2327 000036A4 488D3D4AD8FFFF      <1>     lea rdi, extStr
  2328 000036AB BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2329                              <1> .extLp:
  2330 000036B0 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2331 000036B1 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2332 000036B6 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2333 000036B8 5E                  <1>     pop rsi
  2334 000036B9 85C9                <1>     test ecx, ecx
  2335 000036BB 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2336 000036BD 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2337 000036C0 FFCA                <1>     dec edx         ;Else one less extension type to check
  2338 000036C2 75EC                <1>     jnz .extLp
  2339                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2340                              <1>     ;If not, error.
  2341 000036C4 B903000000          <1>     mov ecx, 3
  2342 000036C9 4889F7              <1>     mov rdi, rsi
  2343 000036CC B020                <1>     mov al, SPC
  2344 000036CE F3AE                <1>     rep scasb   
  2345 000036D0 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2346 000036D2 0F85FEE3FFFF        <1>     jnz badCmdError    ;If not, error!
  2347                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2348 000036D8 488D3516D8FFFF      <1>     lea rsi, extStr
  2349 000036DF BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2350                              <1> .extSrchLp:
  2351 000036E4 488D3D78CAFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2352 000036EB B903000000          <1>     mov ecx, 3
  2353 000036F0 F3A4                <1>     rep movsb   ;Copy the extension over!
  2354 000036F2 E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2355 000036F7 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2356 000036F9 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2357 000036FB 75E7                <1>     jnz .extSrchLp
  2358                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2359                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2360                              <1> ; by setting the fcb extension back to all spaces.
  2361 000036FD 488D3D5FCAFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2362 00003704 B903000000          <1>     mov ecx, 3
  2363 00003709 B020                <1>     mov al, SPC
  2364 0000370B F3AA                <1>     rep stosb   ;Store back the empty extension!
  2365 0000370D EB70                <1>     jmp short .pathHandle
  2366                              <1> .extFnd:
  2367                              <1> ;Here if the file had the right extension.
  2368 0000370F E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2369 00003714 7269                <1>     jc .pathHandle
  2370                              <1> .extSrchFnd:
  2371                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2372                              <1> ; a BAT. If it is, separate handling!
  2373 00003716 803D46CAFFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2374 0000371D 0F84B3030000        <1>     je batLaunch
  2375 00003723 488D1D6BCAFFFF      <1>     lea rbx, launchBlock
  2376 0000372A 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2377 0000372E 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2378 00003731 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2379 00003738 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2380 0000373C 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2381 00003740 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2382 00003744 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2383 00003748 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2384 0000374C 488D15E8CBFFFF      <1>     lea rdx, cmdPathSpec
  2385 00003753 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2386 00003758 CD21                <1>     int 21h
  2387                              <1> ;If the program failed to start, verify why!
  2388 0000375A B800590000          <1>     mov eax, 5900h      ;Get extended error
  2389 0000375F 31DB                <1>     xor ebx, ebx
  2390 00003761 CD21                <1>     int 21h
  2391 00003763 668905A3C8FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2392 0000376A 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2393 0000376C 0F8410E3FFFF        <1>     je badAccError
  2394 00003772 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2395 00003774 0F84490B0000        <1>     je freezePC
  2396 0000377A E957E3FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2397                              <1> .pathHandle:        
  2398                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2399                              <1> ;al has error code!
  2400 0000377F 4885ED              <1>     test rbp, rbp
  2401 00003782 0F85A3000000        <1>     jnz .pathReentry
  2402                              <1> ;Now check if the command we recieved included an absolute path.
  2403                              <1> ;If so, we don't do path substitution and just fail at this point
  2404 00003788 488D35ACCBFFFF      <1>     lea rsi, cmdPathSpec
  2405 0000378F 66AD                <1>     lodsw   ;Get the first two chars
  2406 00003791 3A0592C8FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2407 00003797 0F8439E3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2408 0000379D 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2409 0000379F 7412                <1>     je .pathGetEnv
  2410 000037A1 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2411 000037A4 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2412 000037A6 AC                  <1>     lodsb   ;Get the third char
  2413 000037A7 3A057CC8FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2414 000037AD 0F8423E3FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2415                              <1> .pathGetEnv:
  2416                              <1> ;Now get a pointer to the environment and search for PATH=
  2417                              <1> ;We only take the final portion of the path and add it to each path componant
  2418                              <1> ;This agrees with DOS 3.3
  2419 000037B3 E8930B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2420 000037B8 0F8418E3FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2421                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2422                              <1>     ;Now we know we dont have to keep track of chars!!
  2423 000037BE 488D3D85D8FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2424 000037C5 E8DB0B0000          <1>     call searchForEnvVar
  2425 000037CA 0F8206E3FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2426 000037D0 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2427 000037D3 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2428                              <1> .pathRejoin:
  2429 000037DA 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2430 000037DD 0F84F3E2FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2431 000037E3 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2432 000037E6 488D3DF7CCFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2433                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2434                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2435                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2436                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2437 000037ED E87C090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2438 000037F2 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2439 000037F5 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2440 000037F8 48FFCF              <1>     dec rdi ;Point to the null terminator
  2441 000037FB 8A0528C8FFFF        <1>     mov al, byte [pathSep]
  2442 00003801 3847FF              <1>     cmp byte [rdi - 1], al
  2443 00003804 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2444 00003806 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2445                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2446 00003807 488D354DC9FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2447 0000380E E81B090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2448 00003813 488D35CACCFFFF      <1>     lea rsi, searchSpec 
  2449 0000381A 488D3D1ACBFFFF      <1>     lea rdi, cmdPathSpec
  2450 00003821 E8E9070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2451 00003826 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2452                              <1> .pathReentry:
  2453 0000382B 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2454 0000382F 0F84A1E2FFFF        <1>     je badCmdError
  2455                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2456                              <1> ;Not really a big deal...
  2457                              <1>     ;cmp al, errBadDrv
  2458                              <1>     ;jne .pathDrvOk
  2459                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2460                              <1>     ;mov eax, 0900h
  2461                              <1>     ;int 21h
  2462                              <1> ;.pathDrvOk:
  2463 00003835 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2464 00003838 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2465 0000383B EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2466                              <1> 
  2467                              <1> .prepAndSearch:
  2468                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2469                              <1> ;cmdPathSpec and null terminates. 
  2470                              <1> ;Input: cmdFcb name + ext setup. 
  2471                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2472                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2473 0000383D 51                  <1>     push rcx
  2474 0000383E 56                  <1>     push rsi
  2475 0000383F 57                  <1>     push rdi
  2476 00003840 488D3DF4CAFFFF      <1>     lea rdi, cmdPathSpec 
  2477 00003847 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2478 0000384A E8BB080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2479 0000384F 488D3505C9FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2480 00003856 E8D3080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2481 0000385B B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2482 00003860 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2483 00003862 CD21                <1>     int 21h
  2484 00003864 5F                  <1>     pop rdi
  2485 00003865 5E                  <1>     pop rsi
  2486 00003866 59                  <1>     pop rcx
  2487                              <1>     return
    13                              <2> %%_ret:
    14 00003867 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2488                              <1> 
  2489                              <1> set:
  2490 00003868 F6053DC8FFFFFF      <1>     test byte [arg1Flg], -1
  2491 0000386F 7539                <1>     jnz .editEnv
  2492                              <1>     ;Here we just print the environment.
  2493 00003871 E8D50A0000          <1>     call checkEnvGoodAndGet 
  2494 00003876 0F84FDE1FFFF        <1>     jz badEnvSpaceError
  2495                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2496 0000387C 4889F7              <1>     mov rdi, rsi
  2497 0000387F 4889F2              <1>     mov rdx, rsi
  2498                              <1> .findLp:
  2499 00003882 B9FFFFFFFF          <1>     mov ecx, -1
  2500 00003887 31C0                <1>     xor eax, eax
  2501                              <1> .scanLp:
  2502 00003889 F2AE                <1>     repne scasb
  2503 0000388B 75FC                <1>     jne .scanLp
  2504 0000388D F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2505                              <1>     ;Else, we now print this environment variable and CRLF it
  2506                              <1>     ;rdx points to the start of the string aleady
  2507                              <1>     ;ecx has the bytes to print
  2508 0000388F BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2509 00003894 B800400000          <1>     mov eax, 4000h  ;Print to handle
  2510 00003899 CD21                <1>     int 21h
  2511 0000389B E86D050000          <1>     call printCRLF
  2512 000038A0 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2513                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000038A3 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2514 000038A5 4889FA              <1>     mov rdx, rdi   
  2515 000038A8 EBD8                <1>     jmp short .findLp
  2516                              <1> .editEnv:
  2517 000038AA E89C0A0000          <1>     call checkEnvGoodAndGet
  2518 000038AF 0F84C4E1FFFF        <1>     jz badEnvSpaceError
  2519 000038B5 0FB605F1C7FFFF      <1>     movzx eax, byte [arg1Off]
  2520 000038BC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2521 000038C3 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2522                              <1> .altEp:
  2523 000038C6 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2524 000038C9 B00D                <1>     mov al, CR              ;Search for the CR
  2525 000038CB 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2526 000038D3 89CB                <1>     mov ebx, ecx            ;Save this count 
  2527 000038D5 53                  <1>     push rbx                ;Save this count on the stack too!
  2528 000038D6 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2529 000038D8 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2530 000038DA 66891D05CFFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2531 000038E1 59                  <1>     pop rcx                 ;Get the char count back!
  2532 000038E2 89CB                <1>     mov ebx, ecx            
  2533 000038E4 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2534 000038E7 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2535 000038E9 F2AE                <1>     repne scasb
  2536 000038EB 0F857FE1FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2537 000038F1 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2538 000038F3 66891DEECEFFFF      <1>     mov word [envVarNamSz], bx
  2539 000038FA 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2540 000038FD 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2541 000038FF 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2542 00003900 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2543 00003903 E89D0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2544 00003908 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2545 0000390A E8C40A0000          <1>     call envFree            ;Free the var in rsi
  2546                              <1> .editNewEnv:
  2547 0000390F E8F80A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2548 00003914 E8180B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2549 00003919 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2550 0000391A 31C0                <1>     xor eax, eax            ;Prepare null length!
  2551 0000391C 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2552 00003922 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2553 00003925 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2554 00003927 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2555 00003929 663B0DB6CEFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2556 00003930 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2557                              <1> .reallocTry:
  2558                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2559                              <1>     ; we proceed with the environment size.
  2560 00003932 E80F0B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2561 00003937 7319                <1>     jnc .reallocOk
  2562 00003939 0F843AE1FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2563                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2564                              <1>     ; partially the variable into the env. If so we do that. If the name
  2565                              <1>     ; cannot fit, we don't bother
  2566                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2567 0000393F 663B0DA2CEFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2568                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003946 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003948 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2569 00003949 E82BE1FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2570 0000394E FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2571 00003950 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2572                              <1> .reallocOk:
  2573                              <1>     ;Here we have all the space to just copy the full path
  2574 00003952 0FB70D8DCEFFFF      <1>     movzx ecx, word [envVarSz]
  2575                              <1> .nameCp:
  2576                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2577                              <1> ;Always enough memory for name= here
  2578 00003959 AC                  <1>     lodsb
  2579 0000395A E8D3060000          <1>     call ucChar
  2580 0000395F AA                  <1>     stosb
  2581 00003960 66FFC9              <1>     dec cx      ;Always decrement this count
  2582 00003963 3C3D                <1>     cmp al, "="
  2583 00003965 75F2                <1>     jne .nameCp
  2584                              <1> .exitNameCp:
  2585 00003967 AC                  <1>     lodsb
  2586 00003968 3C0D                <1>     cmp al, CR
  2587 0000396A 7405                <1>     je .exitCp
  2588 0000396C AA                  <1>     stosb
  2589 0000396D FFC9                <1>     dec ecx
  2590 0000396F 75F6                <1>     jnz .exitNameCp
  2591                              <1> .exitCp:
  2592 00003971 31C0                <1>     xor eax, eax
  2593 00003973 66AB                <1>     stosw   ;Store the final null word
  2594                              <1>     return
    13                              <2> %%_ret:
    14 00003975 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2595                              <1> .delEnvVar:
  2596                              <1>     ;rsi -> Start of the envvar name in user buffer
  2597 00003976 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2598 00003979 E8270A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2599 0000397E 7205                <1>     jc .delEnvVarSkip
  2600 00003980 E84E0A0000          <1>     call envFree    ;Free the env var at rsi
  2601                              <1> .delEnvVarSkip:
  2602 00003985 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2603                              <1>     return
    13                              <2> %%_ret:
    14 00003986 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2604                              <1> 
  2605                              <1> pathEdit:
  2606                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2607                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2608                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2609                              <1> ; end there. Error with too many arguments error!
  2610                              <1> ;If after the equals sign there is nothing, we just print the path!
  2611                              <1> ;Gotta process the command line ourselves first
  2612 00003987 E8BF090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2613 0000398C 0F84E7E0FFFF        <1>     jz badEnvSpaceError
  2614                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2615 00003992 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2616 00003999 E8AD000000          <1>     call .skipPathDelimiters
  2617 0000399E 3C0D                <1>     cmp al, CR
  2618 000039A0 7466                <1>     je .printPath
  2619                              <1> ;Else use the set command to setup the path in the searchSpec.
  2620 000039A2 56                  <1>     push rsi    ;Save the first char of the command line string
  2621 000039A3 488D35A0D6FFFF      <1>     lea rsi, pathEVar
  2622 000039AA 488D3D33CBFFFF      <1>     lea rdi, searchSpec
  2623 000039B1 E859060000          <1>     call strcpy
  2624 000039B6 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2625 000039B9 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2626 000039BA 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2627                              <1> .cpLp:
  2628 000039BC AC                  <1>     lodsb
  2629 000039BD 3C0D                <1>     cmp al, CR
  2630 000039BF 7411                <1>     je .cpLpExit
  2631 000039C1 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2632 000039C6 740A                <1>     je .cpLpExit
  2633 000039C8 E865060000          <1>     call ucChar ;Uppercase the char
  2634 000039CD AA                  <1>     stosb       ;Store it
  2635 000039CE FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2636 000039D0 EBEA                <1>     jmp short .cpLp
  2637                              <1> .cpLpExit:
  2638                              <1>     ;Remove trailing semicolons
  2639 000039D2 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2640 000039D6 7507                <1>     jne .cpLpNoIntervene
  2641 000039D8 FFC9                <1>     dec ecx     ;Reduce the count by one
  2642 000039DA 48FFCF              <1>     dec rdi     ;Go back a char
  2643 000039DD EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2644                              <1> .cpLpNoIntervene:
  2645 000039DF B00D                <1>     mov al, CR  ;Now we store the terminator!
  2646 000039E1 AA                  <1>     stosb       ;Store it!
  2647 000039E2 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2648 000039E8 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2649 000039EF FFC1                <1>     inc ecx     ;Add the CR for copying over
  2650 000039F1 488D35ECCAFFFF      <1>     lea rsi, searchSpec
  2651 000039F8 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2652 000039FF 57                  <1>     push rdi
  2653 00003A00 F3A4                <1>     rep movsb
  2654 00003A02 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2655 00003A03 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2656                              <1> .printPath:
  2657 00003A08 488D3D3BD6FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2658 00003A0F E891090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2659 00003A14 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2660 00003A16 4889F7              <1>     mov rdi, rsi        
  2661 00003A19 E80A060000          <1>     call strlen         ;Get the length of the path in rdi
  2662 00003A1E 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2663 00003A24 7411                <1>     je .noPathPrnt      ;Print no path!
  2664 00003A26 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2665 00003A28 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2666 00003A2B BB01000000          <1>     mov ebx, 1          ;STDOUT
  2667 00003A30 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2668 00003A35 EB0C                <1>     jmp short .pathExit
  2669                              <1> .noPathPrnt:
  2670 00003A37 488D15E8D1FFFF      <1>     lea rdx, noPath
  2671 00003A3E B800090000          <1>     mov eax, 0900h
  2672                              <1> .pathExit:
  2673 00003A43 CD21                <1>     int 21h
  2674 00003A45 E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2675                              <1>     return
    13                              <2> %%_ret:
    14 00003A4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2676                              <1> .skipPathDelimiters:
  2677                              <1> ;Input: rsi -> Start of string to parse
  2678                              <1> ;Output: rsi -> First non-delimiter char of string
  2679                              <1> ;        al = First non delim char
  2680 00003A4B AC                  <1>     lodsb
  2681 00003A4C E806000000          <1>     call .isALPathDelimiter
  2682 00003A51 74F8                <1>     je .skipPathDelimiters
  2683 00003A53 48FFCE              <1>     dec rsi
  2684                              <1>     return
    13                              <2> %%_ret:
    14 00003A56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2685                              <1> .isALPathDelimiter:
  2686                              <1> ;Same as before without semicolon
  2687 00003A57 3C20                <1>     cmp al, SPC
  2688                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A59 74(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2689 00003A5B 3C09                <1>     cmp al, TAB
  2690                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A5D 74(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2691 00003A5F 3C2C                <1>     cmp al, ","
  2692                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A61 74(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2693 00003A63 3C3D                <1>     cmp al, "="
  2694                              <1>     return
    13                              <2> %%_ret:
    14 00003A65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2695                              <1> 
  2696                              <1> prompt:
  2697 00003A66 E8E0080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2698 00003A6B 0F8408E0FFFF        <1>     jz badEnvSpaceError
  2699                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2700 00003A71 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2701 00003A78 E8D6050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2702 00003A7D 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2703 00003A80 742C                <1>     je .reset   ;Reset if so
  2704 00003A82 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2705 00003A83 488D3563D4FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2706 00003A8A 488D3D53CAFFFF      <1>     lea rdi, searchSpec
  2707 00003A91 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2708 00003A96 F3A4                <1>     rep movsb
  2709 00003A98 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2710 00003A99 31C9                <1>     xor ecx, ecx    ;Get char count
  2711                              <1> .cp:    ;Now copy the user string over
  2712 00003A9B AC                  <1>     lodsb
  2713 00003A9C AA                  <1>     stosb 
  2714 00003A9D 3C0D                <1>     cmp al, CR
  2715 00003A9F 7404                <1>     je .cpOk
  2716 00003AA1 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2717 00003AA3 EBF6                <1>     jmp short .cp
  2718                              <1> .cpOk:
  2719 00003AA5 488D3538CAFFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2720 00003AAC EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2721                              <1> .reset:
  2722                              <1> ;Delete the environment variable!
  2723 00003AAE 488D3538D4FFFF      <1>     lea rsi, promptEVar 
  2724 00003AB5 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2725                              <1> .goSet:
  2726 00003AB7 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2727 00003ABD 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2728 00003AC4 FFC1                <1>     inc ecx     ;Include CR in copy
  2729 00003AC6 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2730 00003ACD 57                  <1>     push rdi
  2731 00003ACE F3A4                <1>     rep movsb
  2732 00003AD0 5E                  <1>     pop rsi
  2733 00003AD1 E9F0FDFFFF          <1>     jmp set.altEp
  2734                              <1> 
  2735                              <1> batLaunch:
  2736                              <1> ;Preps and launches a batch file!
  2737 00003AD6 488D1505000000      <1>     lea rdx, .batMsg
  2738 00003ADD E932030000          <1>     jmp printString
  2739 00003AE2 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2739 00003AEB 70726F636573736F72- <1>
  2739 00003AF4 206E6F7420696D706C- <1>
  2739 00003AFD 656D656E7465640D0A- <1>
  2739 00003B06 24                  <1>
  2740                              <1> 
  2741                              <1> echo:
  2742 00003B07 F6059EC5FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2743 00003B0E 752A                <1>     jnz .argGiven
  2744 00003B10 488D1500D2FFFF      <1>     lea rdx, echoIs
  2745 00003B17 E8F8020000          <1>     call printString
  2746 00003B1C 488D15DAD1FFFF      <1>     lea rdx, onMes
  2747 00003B23 488D0DCDD1FFFF      <1>     lea rcx, offMes
  2748 00003B2A F6056DC5FFFFFF      <1>     test byte [echoFlg], -1
  2749 00003B31 480F44D1            <1>     cmovz rdx, rcx
  2750 00003B35 E9DA020000          <1>     jmp printString
  2751                              <1> .argGiven:
  2752 00003B3A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2753 00003B41 0FB60565C5FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2754 00003B48 4801C6              <1>     add rsi, rax
  2755 00003B4B AC                  <1>     lodsb   ;Get this char
  2756 00003B4C 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2757 00003B4F E8DE040000          <1>     call ucChar
  2758 00003B54 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2759 00003B56 755A                <1>     jne .directEcho
  2760 00003B58 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2761 00003B5B E8D2040000          <1>     call ucChar
  2762 00003B60 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2763 00003B62 751B                <1>     jne .checkOff
  2764 00003B64 56                  <1>     push rsi
  2765 00003B65 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2766 00003B6C E8E2040000          <1>     call skipDelimiters
  2767 00003B71 803E0D              <1>     cmp byte [rsi], CR
  2768 00003B74 5E                  <1>     pop rsi
  2769 00003B75 753B                <1>     jne .directEcho ;If its not, just echo the string
  2770 00003B77 C60520C5FFFFFF      <1>     mov byte [echoFlg], -1
  2771                              <1>     return
    13                              <2> %%_ret:
    14 00003B7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2772                              <1> .checkOff:
  2773 00003B7F 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2774 00003B82 E8AB040000          <1>     call ucChar
  2775 00003B87 3C46                <1>     cmp al, "F" ;Is it an F?
  2776 00003B89 7527                <1>     jne .directEcho ;No, just direct echo
  2777 00003B8B 8A4602              <1>     mov al, byte [rsi + 2]
  2778 00003B8E E89F040000          <1>     call ucChar
  2779 00003B93 3C46                <1>     cmp al, "F"
  2780 00003B95 751B                <1>     jne .directEcho
  2781 00003B97 56                  <1>     push rsi
  2782 00003B98 4881C603000000      <1>     add rsi, 3
  2783 00003B9F E8AF040000          <1>     call skipDelimiters
  2784 00003BA4 803E0D              <1>     cmp byte [rsi], CR
  2785 00003BA7 5E                  <1>     pop rsi
  2786 00003BA8 7508                <1>     jne .directEcho
  2787 00003BAA C605EDC4FFFF00      <1>     mov byte [echoFlg], 0
  2788                              <1>     return
    13                              <2> %%_ret:
    14 00003BB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2789                              <1> .directEcho: 
  2790 00003BB2 AC                  <1>     lodsb
  2791 00003BB3 3C0D                <1>     cmp al, CR
  2792 00003BB5 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2793 00003BBB 88C2                <1>     mov dl, al
  2794 00003BBD E8C2020000          <1>     call outChar
  2795 00003BC2 EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003BC4 53                  <1>     push rbx
    11 00003BC5 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003BC7 803D66C4FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003BCE 7240                <1>     jb .usDate
    14 00003BD0 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003BD2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003BD7 E8B0000000          <1>     call .printFirst
    18 00003BDC 8A155DC4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003BE2 B402                <1>     mov ah, 02h
    20 00003BE4 CD21                <1>     int 21h
    21                              <1> 
    22 00003BE6 89C8                <1>     mov eax, ecx
    23 00003BE8 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003BED C1E805              <1>     shr eax, 5
    25 00003BF0 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003BF5 8A1544C4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003BFB B402                <1>     mov ah, 02h
    29 00003BFD CD21                <1>     int 21h
    30                              <1> 
    31 00003BFF 89C8                <1>     mov eax, ecx
    32 00003C01 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003C06 C1E809              <1>     shr eax, 9
    34 00003C09 5B                  <1>     pop rbx ;Get the year signature back
    35 00003C0A E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003C0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003C10 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003C15 C1E805              <1>     shr eax, 5
    41 00003C18 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003C1D 8A151CC4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003C23 B402                <1>     mov ah, 02h
    45 00003C25 CD21                <1>     int 21h
    46                              <1> 
    47 00003C27 89C8                <1>     mov eax, ecx
    48 00003C29 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003C2E E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003C33 8A1506C4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003C39 B402                <1>     mov ah, 02h
    53 00003C3B CD21                <1>     int 21h
    54                              <1> 
    55 00003C3D 89C8                <1>     mov eax, ecx
    56 00003C3F 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003C44 C1E809              <1>     shr eax, 9
    58 00003C47 5B                  <1>     pop rbx ;Get the year signature back
    59 00003C48 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003C4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003C4E 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003C53 C1E809              <1>     shr eax, 9
    65 00003C56 5B                  <1>     pop rbx ;Get the year signature back
    66 00003C57 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003C5C 8A15DDC3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003C62 B402                <1>     mov ah, 02h
    70 00003C64 CD21                <1>     int 21h
    71                              <1> 
    72 00003C66 89C8                <1>     mov eax, ecx
    73 00003C68 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003C6D C1E805              <1>     shr eax, 5
    75 00003C70 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003C75 8A15C4C3FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003C7B B402                <1>     mov ah, 02h
    79 00003C7D CD21                <1>     int 21h
    80                              <1> 
    81 00003C7F 89C8                <1>     mov eax, ecx
    82 00003C81 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003C86 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003C8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003C8C 51                  <1>     push rcx
    89 00003C8D E8DF050000          <1>     call getDecimalWord
    90 00003C92 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003C94 7504                <1>     jnz .skipSpace
    92 00003C96 88CD                <1>     mov ch, cl
    93 00003C98 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003C9A 88CA                <1>     mov dl, cl
    96 00003C9C B402                <1>     mov ah, 02h
    97 00003C9E CD21                <1>     int 21h
    98 00003CA0 88EA                <1>     mov dl, ch
    99 00003CA2 B402                <1>     mov ah, 02h
   100 00003CA4 CD21                <1>     int 21h
   101 00003CA6 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003CA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003CA8 51                  <1>     push rcx
   105 00003CA9 E8C3050000          <1>     call getDecimalWord
   106 00003CAE 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003CB0 75E8                <1>     jnz .skipSpace
   108 00003CB2 88CD                <1>     mov ch, cl
   109 00003CB4 B130                <1>     mov cl, "0"
   110 00003CB6 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003CB8 05BC070000          <1>     add eax, 1980
   113 00003CBD 51                  <1>     push rcx
   114 00003CBE 53                  <1>     push rbx
   115 00003CBF E8AD050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003CC4 5B                  <1>     pop rbx
   117 00003CC5 84DB                <1>     test bl, bl
   118 00003CC7 740C                <1>     jz .twoDigitYear
   119 00003CC9 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003CCB B402                <1>     mov ah, 02h
   121 00003CCD CD21                <1>     int 21h
   122 00003CCF 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003CD1 B402                <1>     mov ah, 02h
   124 00003CD3 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003CD5 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003CD8 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003CDA B402                <1>     mov ah, 02h
   129 00003CDC CD21                <1>     int 21h
   130 00003CDE 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003CE0 B402                <1>     mov ah, 02h
   132 00003CE2 CD21                <1>     int 21h
   133 00003CE4 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003CE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003CE6 89C1                <1>     mov ecx, eax
   142 00003CE8 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003CED C1E80B              <1>     shr eax, 11
   144 00003CF0 803D4EC3FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003CF7 750B                <1>     jne .ampm
   146 00003CF9 E85A000000          <1>     call .printHours
   147 00003CFE E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003D03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003D04 3D0C000000          <1>     cmp eax, 12
   151 00003D09 7713                <1>     ja .pm
   152 00003D0B 7416                <1>     je .pm2
   153 00003D0D E846000000          <1>     call .printHours
   154 00003D12 E81D000000          <1>     call .printMinutes
   155 00003D17 B261                <1>     mov dl, "a"
   156 00003D19 B402                <1>     mov ah, 02h
   157 00003D1B CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003D1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003D1E 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003D23 E830000000          <1>     call .printHours
   163 00003D28 E807000000          <1>     call .printMinutes
   164 00003D2D B270                <1>     mov dl, "p"
   165 00003D2F B402                <1>     mov ah, 02h
   166 00003D31 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003D33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003D34 8A1507C3FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003D3A B402                <1>     mov ah, 02h
   171 00003D3C CD21                <1>     int 21h
   172                              <1> 
   173 00003D3E 89C8                <1>     mov eax, ecx
   174 00003D40 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003D45 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003D48 51                  <1>     push rcx
   178 00003D49 E823050000          <1>     call getDecimalWord
   179 00003D4E 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003D50 7514                <1>     jnz .skipSpace
   181 00003D52 88CD                <1>     mov ch, cl
   182 00003D54 B130                <1>     mov cl, "0"
   183 00003D56 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003D58 51                  <1>     push rcx
   186 00003D59 E813050000          <1>     call getDecimalWord
   187 00003D5E 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003D60 7504                <1>     jnz .skipSpace
   189 00003D62 88CD                <1>     mov ch, cl
   190 00003D64 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003D66 88CA                <1>     mov dl, cl
   193 00003D68 B402                <1>     mov ah, 02h
   194 00003D6A CD21                <1>     int 21h
   195 00003D6C 88EA                <1>     mov dl, ch
   196 00003D6E B402                <1>     mov ah, 02h
   197 00003D70 CD21                <1>     int 21h
   198 00003D72 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003D73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003D74 F60523C3FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003D7B 74(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003D7D 488D3D69D1FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003D84 E81C060000          <1>     call searchForEnvVar
   206 00003D89 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003D8B E8F9000000          <1>     call putCWDInPrompt
   209 00003D90 E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003D95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003D96 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003D9D AC                  <1>     lodsb   ;Get the char
   216 00003D9E 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003DA0 74(95)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003DA2 3C24                <1>     cmp al, "$"
   219 00003DA4 7409                <1>     je .escapeChar
   220 00003DA6 88C2                <1>     mov dl, al
   221 00003DA8 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003DAD EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00003DAF AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00003DB0 E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 00003DB5 488D1D2A000000      <1>     lea rbx, .pTbl
   227 00003DBC B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00003DC1 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003DC3 740D                <1>     je .escapeFnd
   231 00003DC5 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 00003DCC FFC9                <1>     dec ecx
   233 00003DCE 75F1                <1>     jnz .escapeLp
   234 00003DD0 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003DD2 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00003DD9 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 00003DDD 4801D8              <1>     add rax, rbx                ;Add these
   239 00003DE0 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00003DE1 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003DE3 5E                  <1>     pop rsi
   242 00003DE4 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00003DE6 42                  <1>     db "B", 
   247 00003DE7 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00003DE9 44                  <1>     db "D", 
   249 00003DEA 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 00003DEC 45                  <1>     db "E", 
   251 00003DED 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00003DEF 47                  <1>     db "G", 
   253 00003DF0 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003DF2 48                  <1>     db "H", 
   255 00003DF3 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003DF5 4C                  <1>     db "L", 
   257 00003DF6 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00003DF8 4E                  <1>     db "N", 
   259 00003DF9 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003DFB 50                  <1>     db "P", 
   261 00003DFC A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00003DFE 51                  <1>     db "Q", 
   263 00003DFF 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00003E01 54                  <1>     db "T", 
   265 00003E02 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00003E04 56                  <1>     db "V", 
   267 00003E05 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00003E07 5F                  <1>     db "_", 
   269 00003E08 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003E0A 24                  <1>     db "$", 
   271 00003E0B 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 00003E0D 488D15D3CAFFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00003E14 B800090000          <1>     mov eax, 0900h  ;Print string
   278 00003E19 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003E1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003E1C 488D1554CDFFFF      <1>     lea rdx, dosVer
   283 00003E23 B409                <1>     mov ah, 09h ;Print String
   284 00003E25 CD21                <1>     int 21h
   285 00003E27 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00003E29 CD21                <1>     int 21h
   287 00003E2B 50                  <1>     push rax    ;Save minor version
   288 00003E2C E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 00003E31 E89C010000          <1>     call printPackedBCD ;Print al
   290 00003E36 B22E                <1>     mov dl, "."
   291 00003E38 B402                <1>     mov ah, 02h
   292 00003E3A CD21                <1>     int 21h
   293 00003E3C 58                  <1>     pop rax
   294 00003E3D 88E0                <1>     mov al, ah  ;Get the minor version low
   295 00003E3F E871010000          <1>     call hexToBCD
   296 00003E44 E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 00003E49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 00003E4A B21B                <1>     mov dl, ESC
   300 00003E4C EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00003E4E B224                <1>     mov dl, "$"
   304 00003E50 EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 00003E52 B23D                <1>     mov dl, "="
   308 00003E54 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00003E56 B27C                <1>     mov dl, "|"
   312 00003E58 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 00003E5A B23E                <1>     mov dl, ">"
   316 00003E5C EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00003E5E B23C                <1>     mov dl, "<"
   320 00003E60 EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 00003E62 488D1509CFFFFF      <1>     lea rdx, backSpace
   324 00003E69 B903000000          <1>     mov ecx, 3
   325 00003E6E BB01000000          <1>     mov ebx, 1
   326 00003E73 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 00003E78 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 00003E7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 00003E7B E88A010000          <1>     call getCurrentDrive
   332 00003E80 0441                <1>     add al, "A" ;Convert to letter
   333 00003E82 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 00003E84 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00003E86 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 00003E88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 00003E89 E87C010000          <1>     call getCurrentDrive
   340 00003E8E 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 00003E90 FEC2                <1>     inc dl
   342 00003E92 0441                <1>     add al, "A" ;Convert to letter
   343 00003E94 B43A                <1>     mov ah, ":"
   344 00003E96 488D3DBDC1FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00003E9D 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 00003E9F 8A0584C1FFFF        <1>     mov al, byte [pathSep]
   347 00003EA5 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00003EA6 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00003EA8 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00003EAB CD21                <1>     int 21h
   351 00003EAD 721F                <1>     jc .badDrive
   352 00003EAF E874010000          <1>     call strlen
   353 00003EB4 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 00003EBA B800400000          <1>     mov eax, 4000h ;Write to handle
   356 00003EBF BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 00003EC4 488D158FC1FFFF      <1>     lea rdx, currDirStr
   358 00003ECB CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00003ECD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 00003ECE 488D156ACDFFFF      <1>     lea rdx, badDrvMsg
   363 00003ED5 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00003EDA E847000000          <1>     call getTime
   367 00003EDF 0FB6C5              <1>     movzx eax, ch
   368 00003EE2 E871FEFFFF          <1>     call printTime.printHours
   369 00003EE7 8A1554C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 00003EED B402                <1>     mov ah, 02h
   371 00003EEF CD21                <1>     int 21h
   372 00003EF1 0FB605B5C7FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 00003EF8 E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 00003EFD 8A153EC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 00003F03 B402                <1>     mov ah, 02h
   376 00003F05 CD21                <1>     int 21h
   377 00003F07 0FB605A2C7FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 00003F0E E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 00003F13 B22E                <1>     mov dl, "."
   380 00003F15 B402                <1>     mov ah, 02h
   381 00003F17 CD21                <1>     int 21h
   382 00003F19 0FB6058FC7FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00003F20 E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00003F25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 00003F26 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 00003F28 CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 00003F2A 880D7DC7FFFF        <1>     mov byte [td1], cl
   393 00003F30 882D78C7FFFF        <1>     mov byte [td2], ch
   394 00003F36 881573C7FFFF        <1>     mov byte [td3], dl
   395 00003F3C 88356EC7FFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 00003F42 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 00003F43 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 00003F48 CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 00003F4A 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 00003F4F 66890D57C7FFFF      <1>     mov word [td1], cx
   408 00003F56 881553C7FFFF        <1>     mov byte [td3], dl
   409 00003F5C 88354EC7FFFF        <1>     mov byte [td4], dh
   410 00003F62 0FB6C0              <1>     movzx eax, al
   411 00003F65 89C3                <1>     mov ebx, eax
   412 00003F67 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 00003F69 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 00003F6B 488D154FCBFFFF      <1>     lea rdx, dayName
   415 00003F72 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00003F76 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 00003F7B BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00003F80 B440                <1>     mov ah, 40h ;Write to handle
   419 00003F82 CD21                <1>     int 21h
   420 00003F84 B220                <1>     mov dl, " "
   421 00003F86 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 00003F8B 0FB7051BC7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00003F92 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 00003F95 0FB61D14C7FFFF      <1>     movzx ebx, byte [td4]
   428 00003F9C C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00003F9F 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00003FA1 0FB61D07C7FFFF      <1>     movzx ebx, byte [td3]
   431 00003FA8 09D8                <1>     or eax, ebx
   432 00003FAA BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 00003FAF E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00003FB4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00003FB5 51                  <1>     push rcx
   441 00003FB6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00003FB9 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00003FBB 3D0A000000          <1>     cmp eax, 10
   445 00003FC0 7209                <1>     jb .htb1
   446 00003FC2 2D0A000000          <1>     sub eax, 10
   447 00003FC7 FFC1                <1>     inc ecx
   448 00003FC9 EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00003FCB C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 00003FCE 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 00003FD0 59                  <1>     pop rcx
   453 00003FD1 C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 00003FD2 50                  <1>     push rax
   460 00003FD3 52                  <1>     push rdx
   461 00003FD4 88C4                <1>     mov ah, al
   462 00003FD6 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00003FD8 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00003FDB 7508                <1>     jnz .upperNybble
   465 00003FDD B220                <1>     mov dl, " "
   466 00003FDF B402                <1>     mov ah, 02h
   467 00003FE1 CD21                <1>     int 21h
   468 00003FE3 EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00003FE5 50                  <1>     push rax
   471 00003FE6 C0EC04              <1>     shr ah, 4
   472 00003FE9 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00003FEC 88E2                <1>     mov dl, ah
   474 00003FEE B402                <1>     mov ah, 02h ;Print DL
   475 00003FF0 CD21                <1>     int 21h
   476 00003FF2 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00003FF3 0430                <1>     add al, "0"
   479 00003FF5 88C2                <1>     mov dl, al
   480 00003FF7 B402                <1>     mov ah, 02h ;Print DL
   481 00003FF9 CD21                <1>     int 21h
   482 00003FFB 5A                  <1>     pop rdx
   483 00003FFC 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00003FFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00003FFE B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00004000 CD21                <1>     int 21h 
   492 00004002 E803000000          <1>     call getCurrentDrive
   493 00004007 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00004009 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 0000400A B419                <1>     mov ah, 19h
   498 0000400C CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 0000400E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 0000400F 51                  <1>     push rcx
   506 00004010 57                  <1>     push rdi
   507 00004011 4889F7              <1>     mov rdi, rsi
   508 00004014 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 00004019 5F                  <1>     pop rdi
   510 0000401A F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 0000401C 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 0000401D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 0000401E 56                  <1>     push rsi
   519 0000401F 57                  <1>     push rdi
   520 00004020 E8EAFFFFFF          <1>     call strcpy 
   521 00004025 5F                  <1>     pop rdi
   522 00004026 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00004027 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 00004028 50                  <1>     push rax
   530 00004029 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 0000402E CD2F                <1>     int 2fh
   532 00004030 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00004031 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00004032 53                  <1>     push rbx
   539 00004033 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   540 00004036 50                  <1>     push rax    ;Push the char twice on the stack
   541 00004037 50                  <1>     push rax
   542 00004038 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   543 0000403D CD2F                <1>     int 2fh         ;Returns the processed char in al
   544 0000403F 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   545 00004042 5B                  <1>     pop rbx
   546                              <1>     return
    13                              <2> %%_ret:
    14 00004043 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> normalisePath:
   549                              <1> ;Uppercases chars and flips pathseps
   550                              <1> ;Input: rsi -> Path to normalise
   551 00004044 50                  <1>     push rax
   552 00004045 57                  <1>     push rdi
   553 00004046 4889F7              <1>     mov rdi, rsi
   554 00004049 B811120000          <1>     mov eax, 1211h
   555 0000404E CD2F                <1>     int 2fh
   556 00004050 5F                  <1>     pop rdi
   557 00004051 58                  <1>     pop rax
   558                              <1>     return
    13                              <2> %%_ret:
    14 00004052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> skipDelimiters:
   561                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   562                              <1> ; command delimiters but a subset thereof. 
   563                              <1> ;These are the same across all codepages.
   564                              <1> ;Input: rsi must point to the start of the data string
   565                              <1> ;Output: rsi points to the first non-delimiter char
   566 00004053 50                  <1>     push rax
   567                              <1> .l1:
   568 00004054 AC                  <1>     lodsb
   569 00004055 E807000000          <1>     call isALdelimiter
   570 0000405A 74F8                <1>     jz .l1
   571                              <1> .exit:
   572 0000405C 58                  <1>     pop rax
   573 0000405D 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   574                              <1>     return
    13                              <2> %%_ret:
    14 00004060 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> isALdelimiter:
   577                              <1> ;Returns: ZF=NZ if al is not a command separator 
   578                              <1> ;         ZF=ZE if al is a command separator
   579 00004061 3C20                <1>     cmp al, " "
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004063 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 00004065 3C3B                <1>     cmp al, ";"
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004067 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 00004069 3C3D                <1>     cmp al, "="
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000406B 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 0000406D 3C2C                <1>     cmp al, ","
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000406F 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 00004071 3C09                <1>     cmp al, TAB
   588                              <1>     return
    13                              <2> %%_ret:
    14 00004073 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> clearCommandState:
   591                              <1> ;Clears the command state
   592 00004074 488D3D31C0FFFF      <1>     lea rdi, cmdStatePtr
   593 0000407B B907000000          <1>     mov ecx, cmdStateL
   594 00004080 31C0                <1>     xor eax, eax
   595 00004082 F3AA                <1>     rep stosb
   596                              <1>     return
    13                              <2> %%_ret:
    14 00004084 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> clearCommandLineState:
   599                              <1> ;Clears the command line state after a 0Dh encountered
   600 00004085 488D3D15C0FFFF      <1>     lea rdi, cmdLineStatePtr
   601 0000408C B912000000          <1>     mov ecx, cmdLineStateL
   602 00004091 31C0                <1>     xor eax, eax
   603 00004093 F3AA                <1>     rep stosb
   604 00004095 C70503C0FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   604 0000409E FF                  <1>
   605 0000409F C705FFBFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   605 000040A8 FF                  <1>
   606                              <1> ;Close all handles from 5->MAX
   607 000040A9 0FB70D77BFFFFF      <1>     movzx ecx, word [numHdls]
   608 000040B0 BB05000000          <1>     mov ebx, 5
   609                              <1> .lp:
   610 000040B5 B43E                <1>     mov ah, 3Eh ;File close
   611 000040B7 CD21                <1>     int 21h
   612 000040B9 FFC3                <1>     inc ebx ;Goto next file
   613 000040BB 39CB                <1>     cmp ebx, ecx
   614 000040BD 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   615                              <1>     return
    13                              <2> %%_ret:
    14 000040BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> asciiFilenameToFCB:
   618                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   619                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   620                              <1> ;Also doesn't check if chars are valid
   621                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   622                              <1> ;Name is space padded.
   623                              <1> ;Input: rsi = ASCII string buffer
   624                              <1> ;       rdi = FCB name buffer
   625                              <1> ;Output: al = Char that terminated the source string 
   626 000040C0 53                  <1>     push rbx    
   627 000040C1 57                  <1>     push rdi
   628 000040C2 B90B000000          <1>     mov ecx, 11
   629 000040C7 B020                <1>     mov al, " "
   630 000040C9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   631 000040CB 5F                  <1>     pop rdi
   632 000040CC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   633                              <1>     ;Preprocess for Dir Searches
   634 000040CF 803E2E              <1>     cmp byte [rsi], "."
   635 000040D2 7509                <1>     jne .processName
   636 000040D4 A4                  <1>     movsb   ;Store the first dot
   637 000040D5 803E2E              <1>     cmp byte [rsi], "."
   638 000040D8 752C                <1>     jne .exitBadChar
   639 000040DA A4                  <1>     movsb
   640 000040DB EB29                <1>     jmp short .exitBadChar
   641                              <1> .processName:
   642 000040DD AC                  <1>     lodsb   ;Get the char in al
   643 000040DE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   644 000040E0 7426                <1>     jz .exit
   645 000040E2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   646 000040E4 7407                <1>     je .extSpace
   647 000040E6 3C2E                <1>     cmp al, "."
   648 000040E8 740C                <1>     je .ext
   649 000040EA AA                  <1>     stosb   ;Store the char
   650 000040EB EBF0                <1>     jmp short .processName
   651                              <1> .extSpace:
   652                              <1> ;Now we scan for a period in the name
   653 000040ED AC                  <1>     lodsb   ;Get a char and increase rsi
   654 000040EE 84C0                <1>     test al, al
   655 000040F0 7416                <1>     jz .exit
   656 000040F2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   657 000040F4 75F7                <1>     jne .extSpace   ; keep searching
   658                              <1> .ext:
   659 000040F6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   660                              <1> .processExt:
   661 000040FA AC                  <1>     lodsb
   662 000040FB 84C0                <1>     test al, al
   663 000040FD 7409                <1>     jz .exit
   664 000040FF 3C20                <1>     cmp al, " "
   665 00004101 7405                <1>     je .exit
   666 00004103 AA                  <1>     stosb
   667 00004104 EBF4                <1>     jmp short .processExt
   668                              <1> .exitBadChar:
   669 00004106 30C0                <1>     xor al, al  ;Return a null terminator
   670                              <1> .exit:
   671 00004108 5B                  <1>     pop rbx
   672                              <1>     return
    13                              <2> %%_ret:
    14 00004109 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> findLastPathComponant:
   675                              <1> ;Finds the last path componant of an ASCIIZ path string
   676                              <1> ;Input: rdi -> Head of the path to find last componant on
   677                              <1> ;Output: rdi -> Start of the last componant
   678 0000410A 50                  <1>     push rax
   679 0000410B 51                  <1>     push rcx
   680 0000410C 31C9                <1>     xor ecx, ecx
   681 0000410E FFC9                <1>     dec ecx
   682 00004110 31C0                <1>     xor eax, eax
   683 00004112 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   684 00004114 F7D1                <1>     not ecx     ;This gets the count of chars  
   685 00004116 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   686 00004119 8A050ABFFFFF        <1>     mov al, byte [pathSep]
   687 0000411F FD                  <1>     std
   688 00004120 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   689 00004122 FC                  <1>     cld
   690 00004123 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   691 00004125 48FFC7              <1>     inc rdi     ;Point at pathsep
   692                              <1> .exit:
   693 00004128 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   694 0000412B 59                  <1>     pop rcx
   695 0000412C 58                  <1>     pop rax
   696                              <1>     return
    13                              <2> %%_ret:
    14 0000412D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> 
   698                              <1> FCBToAsciiz:
   699                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   700                              <1> ;Name is space padded too
   701                              <1> ;Input: rsi = FCB name buffer
   702                              <1> ;       rdi = ASCIIZ string buffer
   703 0000412E B908000000          <1>     mov ecx, 8
   704 00004133 F3A4                <1>     rep movsb   ;Move the name over
   705                              <1> .scanNameSpace:
   706 00004135 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   707 00004139 750D                <1>     jne .ext
   708 0000413B 48FFCF              <1>     dec rdi
   709 0000413E FFC1                <1>     inc ecx
   710 00004140 81F908000000        <1>     cmp ecx, 8
   711 00004146 72ED                <1>     jb .scanNameSpace
   712                              <1> .ext:
   713 00004148 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   714 0000414D 7506                <1>     jne .validExt
   715 0000414F 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   716 00004153 7415                <1>     je .exit
   717                              <1> .validExt:
   718 00004155 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   719 00004157 AA                  <1>     stosb
   720 00004158 B903000000          <1>     mov ecx, 3
   721 0000415D F3A4                <1>     rep movsb   ;Move the three extension chars over
   722                              <1> .scanExtSpace:
   723 0000415F 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   724 00004163 7505                <1>     jne .exit
   725 00004165 48FFCF              <1>     dec rdi
   726 00004168 EBF5                <1>     jmp short .scanExtSpace
   727                              <1> .exit:
   728 0000416A 31C0                <1>     xor eax, eax
   729 0000416C AA                  <1>     stosb   ;Store a null at the end
   730                              <1>     return
    13                              <2> %%_ret:
    14 0000416D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> 
   732                              <1> cpDelimOrCtrlStringToBufz:
   733                              <1> ;Copy a delimited or control char terminated string to a buffer
   734                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   735                              <1> ;       rdi -> Buffer to store null terminated string in
   736                              <1> ;Output: rsi -> First char past string end
   737                              <1> ;       rdi -> One char past null terminator on string buffer
   738 0000416E C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   739                              <1> .lp:
   740 00004171 AC                  <1>     lodsb
   741 00004172 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   742 00004174 760A                <1>     jbe .exit
   743 00004176 E8E6FEFFFF          <1>     call isALdelimiter
   744 0000417B 7403                <1>     je .exit
   745 0000417D AA                  <1>     stosb
   746 0000417E EBF1                <1>     jmp short .lp
   747                              <1> .exit:
   748 00004180 31C0                <1>     xor eax, eax
   749 00004182 AA                  <1>     stosb   ;Store a null terminator
   750                              <1>     return
    13                              <2> %%_ret:
    14 00004183 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> 
   753                              <1> cpDelimPathToBufz:
   754                              <1> ;Copy a delimited path into buffer and null terminate.
   755                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   756                              <1> ;       rdi -> Buffer to store null terminated path in
   757                              <1> ;Output: rsi -> First char past pathname delimiter
   758                              <1> ;       rdi -> One char past null terminator on pathname buffer
   759 00004184 53                  <1>     push rbx
   760 00004185 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   761 00004188 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   762                              <1> .lp:
   763 0000418B AC                  <1>     lodsb   ;Get the char
   764 0000418C 3C0D                <1>     cmp al, CR
   765 0000418E 7412                <1>     je .gotRedirPath
   766 00004190 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   767 00004195 740B                <1>     jz .gotRedirPath 
   768 00004197 3A058DBEFFFF        <1>     cmp al, byte [switchChar]
   769 0000419D 7403                <1>     je .gotRedirPath
   770 0000419F AA                  <1>     stosb   ;Store this char and loop next char
   771 000041A0 EBE9                <1>     jmp short .lp
   772                              <1> .gotRedirPath:
   773 000041A2 50                  <1>     push rax    ;Save the char on stack
   774 000041A3 30C0                <1>     xor al, al  ;Get null terminator char
   775 000041A5 4829FB              <1>     sub rbx, rdi
   776 000041A8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   777 000041AF 7412                <1>     je .notColon
   778 000041B1 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   779 000041B8 7409                <1>     je .notColon
   780 000041BA 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   781 000041BE 7503                <1>     jne .notColon
   782 000041C0 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   783                              <1> .notColon:
   784 000041C3 AA                  <1>     stosb   ;Store the null terminator for the redir path
   785 000041C4 58                  <1>     pop rax ;Get back the char in al
   786 000041C5 5B                  <1>     pop rbx
   787                              <1>     return
    13                              <2> %%_ret:
    14 000041C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> buildCommandPath:
   790                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   791 000041C7 0FB605DFBEFFFF      <1>     movzx eax, byte [arg1Off]
   792 000041CE 4C8B053ABEFFFF      <1>     mov r8, [pspPtr]
   793 000041D5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794 000041DC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   795                              <1> copyArgumentToSearchSpec:
   796                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   797                              <1> ; and null terminates
   798 000041DF 488D3DFEC2FFFF      <1>     lea rdi, searchSpec
   799 000041E6 E899FFFFFF          <1>     call cpDelimPathToBufz
   800                              <1>     return
    13                              <2> %%_ret:
    14 000041EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> scanForWildcards:
   803                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   804                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   805 000041EC 50                  <1>     push rax
   806 000041ED 56                  <1>     push rsi
   807                              <1> .lp:
   808 000041EE AC                  <1>     lodsb
   809 000041EF 3C3F                <1>     cmp al, "?"
   810 000041F1 740A                <1>     je .exit
   811 000041F3 3C2A                <1>     cmp al, "*"
   812 000041F5 7406                <1>     je .exit
   813 000041F7 84C0                <1>     test al, al
   814 000041F9 75F3                <1>     jnz .lp
   815 000041FB FEC0                <1>     inc al  ;This will clear the ZF
   816                              <1> .exit:
   817 000041FD 5E                  <1>     pop rsi
   818 000041FE 58                  <1>     pop rax
   819                              <1>     return
    13                              <2> %%_ret:
    14 000041FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> 
   821                              <1> printDecimalWord:
   822                              <1> ;Takes qword in rax and print it's decimal representation
   823                              <1> ;Takes the qword in eax and prints its decimal representation
   824 00004200 31C9                <1>     xor ecx, ecx
   825 00004202 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   826 00004204 85C0                <1>     test eax, eax
   827 00004206 750C                <1>     jnz .notZero
   828 00004208 B930000000          <1>     mov ecx, "0"
   829 0000420D BD01000000          <1>     mov ebp, 1  ;Print one digit
   830 00004212 EB3E                <1>     jmp short .dpfb2
   831                              <1> .notZero:
   832 00004214 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   833 00004216 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   834                              <1> .dpfb0:
   835 0000421B FFC5                <1>     inc ebp
   836 0000421D 81FD08000000        <1>     cmp ebp, 8
   837 00004223 7206                <1>     jb .dpfb00
   838 00004225 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   839 00004229 EB04                <1>     jmp short .dpfb01
   840                              <1> .dpfb00:
   841 0000422B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   842                              <1> .dpfb01:
   843 0000422F 31D2                <1>     xor edx, edx
   844 00004231 48F7F6              <1>     div rsi
   845 00004234 80C230              <1>     add dl, '0'
   846 00004237 80FA39              <1>     cmp dl, '9'
   847 0000423A 7603                <1>     jbe .dpfb1
   848 0000423C 80C207              <1>     add dl, 'A'-'0'-10
   849                              <1> .dpfb1:
   850 0000423F 81FD08000000        <1>     cmp ebp, 8
   851 00004245 7204                <1>     jb .dpfb10
   852 00004247 88D3                <1>     mov bl, dl ;Add the bottom bits
   853 00004249 EB02                <1>     jmp short .dpfb11
   854                              <1> .dpfb10:
   855 0000424B 88D1                <1>     mov cl, dl    ;Save remainder byte
   856                              <1> .dpfb11:
   857 0000424D 4885C0              <1>     test rax, rax
   858 00004250 75C9                <1>     jnz .dpfb0
   859                              <1> .dpfb2:
   860 00004252 81FD08000000        <1>     cmp ebp, 8
   861 00004258 7208                <1>     jb .dpfb20
   862 0000425A 88DA                <1>     mov dl, bl
   863 0000425C 48C1EB08            <1>     shr rbx, 8
   864 00004260 EB06                <1>     jmp short .dpfb21
   865                              <1> .dpfb20:
   866 00004262 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   867 00004264 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   868                              <1> .dpfb21:
   869 00004268 B402                <1>     mov ah, 02h
   870 0000426A CD21                <1>     int 21h
   871 0000426C FFCD                <1>     dec ebp
   872 0000426E 75E2                <1>     jnz .dpfb2
   873                              <1>     return
    13                              <2> %%_ret:
    14 00004270 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> 
   875                              <1> getDecimalWord:
   876                              <1> ;Works on MAX A dword in eax
   877                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   878 00004271 31C9                <1>     xor ecx, ecx
   879 00004273 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   880 00004275 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   881                              <1> .dpfb0:
   882 0000427A FFC5                <1>     inc ebp
   883 0000427C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   884 00004280 31D2                <1>     xor edx, edx
   885 00004282 48F7F3              <1>     div rbx
   886 00004285 80C230              <1>     add dl, '0'
   887 00004288 80FA39              <1>     cmp dl, '9'
   888 0000428B 7603                <1>     jbe .dpfb1
   889 0000428D 80C207              <1>     add dl, 'A'-'0'-10
   890                              <1> .dpfb1:
   891 00004290 88D1                <1>     mov cl, dl    ;Save remainder byte
   892 00004292 4885C0              <1>     test rax, rax
   893 00004295 75E3                <1>     jnz .dpfb0
   894                              <1>     return
    13                              <2> %%_ret:
    14 00004297 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   895                              <1> getByte:
   896                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   897 00004298 E807000000          <1>     call getNum
   898 0000429D 3D00010000          <1>     cmp eax, 100h
   899 000042A2 F5                  <1>     cmc
   900                              <1>     return
    13                              <2> %%_ret:
    14 000042A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   901                              <1> getNum:
   902                              <1> ;Gets a number from a command line.
   903                              <1> ;Input: rsi -> String to get number from
   904                              <1> ;Output: rsi -> Char which terminated the accumulation
   905                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   906 000042A4 51                  <1>     push rcx
   907 000042A5 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   908                              <1> .lp:
   909 000042A7 AC                  <1>     lodsb
   910 000042A8 3C30                <1>     cmp al, "0"
   911 000042AA 7210                <1>     jb .exit
   912 000042AC 3C39                <1>     cmp al, "9"
   913 000042AE 770C                <1>     ja .exit
   914 000042B0 2C30                <1>     sub al, "0"                     ;Convert to binary 
   915 000042B2 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   916 000042B6 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   917 000042B8 01C1                <1>     add ecx, eax
   918 000042BA EBEB                <1>     jmp short .lp   ;Get next digit
   919                              <1> .exit:
   920 000042BC 89C8                <1>     mov eax, ecx
   921 000042BE 59                  <1>     pop rcx
   922 000042BF 48FFCE              <1>     dec rsi
   923                              <1>     return
    13                              <2> %%_ret:
    14 000042C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   924                              <1> 
   925                              <1> 
   926                              <1> freezePC:
   927 000042C3 488D1597CBFFFF      <1>     lea rdx, memBad1
   928 000042CA B409                <1>     mov ah, 09h
   929 000042CC CD21                <1>     int 21h
   930                              <1> .altEP:
   931 000042CE 488D15B5CBFFFF      <1>     lea rdx, memBad3
   932 000042D5 B409                <1>     mov ah, 09h
   933 000042D7 CD21                <1>     int 21h
   934                              <1> .lp:
   935 000042D9 F390                <1>     pause
   936 000042DB F4                  <1>     hlt
   937 000042DC EBFB                <1>     jmp short .lp
   938                              <1> 
   939                              <1> setDTA:
   940 000042DE 50                  <1>     push rax
   941 000042DF 52                  <1>     push rdx
   942 000042E0 488D1583BEFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   943 000042E7 B8001A0000          <1>     mov eax, 1A00h
   944 000042EC CD21                <1>     int 21h
   945 000042EE 5A                  <1>     pop rdx
   946 000042EF 58                  <1>     pop rax
   947                              <1>     return
    13                              <2> %%_ret:
    14 000042F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   948                              <1> 
   949                              <1> getDTA:
   950 000042F1 488D1572BEFFFF      <1>     lea rdx, cmdFFBlock
   951                              <1>     return
    13                              <2> %%_ret:
    14 000042F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   952                              <1> 
   953                              <1> resetIDTentries:
   954                              <1> ;Resets the IDT entries
   955 000042F9 488D1591010000      <1>     lea rdx, critErrorHandler
   956 00004300 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   957 00004304 B824250000          <1>     mov eax, 2524h
   958 00004309 CD21                <1>     int 21h
   959 0000430B 488D15F6020000      <1>     lea rdx, int23h
   960 00004312 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   961 00004316 B823250000          <1>     mov eax, 2523h
   962 0000431B CD21                <1>     int 21h
   963 0000431D 488D1579D1FFFF      <1>     lea rdx, appRet
   964 00004324 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   965 00004328 B822250000          <1>     mov eax, 2522h
   966 0000432D CD21                <1>     int 21h
   967                              <1>     return
    13                              <2> %%_ret:
    14 0000432F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   968                              <1> 
   969                              <1> ;-------------------------------
   970                              <1> ; Environment utility functions
   971                              <1> ;-------------------------------
   972                              <1> 
   973                              <1> cmpEnvVar:
   974                              <1> ;Checks that we have found the environment variable we are looking for.
   975                              <1> ;Input: rsi -> Environment var to verify the name of
   976                              <1> ;       rdi -> Environment var name to compare against
   977                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   978 00004330 56                  <1>     push rsi
   979 00004331 57                  <1>     push rdi
   980 00004332 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   981                              <1> .lp:
   982 00004335 AC                  <1>     lodsb               ;Pick up from user string
   983 00004336 E8F7FCFFFF          <1>     call ucChar         ;Upper case it!
   984 0000433B 3807                <1>     cmp byte [rdi], al  
   985 0000433D 7509                <1>     jne .exit
   986 0000433F 3C3D                <1>     cmp al, "="         ;Are we at the end?
   987 00004341 7405                <1>     je .exit
   988 00004343 48FFC7              <1>     inc rdi
   989 00004346 EBED                <1>     jmp short .lp
   990                              <1> .exit:
   991 00004348 5F                  <1>     pop rdi
   992 00004349 5E                  <1>     pop rsi
   993                              <1>     return
    13                              <2> %%_ret:
    14 0000434A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   994                              <1> 
   995                              <1> checkEnvGoodAndGet:
   996                              <1> ;Gets the env ptr and checks that it is double null terminated.
   997                              <1> ;Output:
   998                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   999                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1000                              <1> ;           rsi -> Environment pointer
  1001 0000434B 50                  <1>     push rax
  1002 0000434C 51                  <1>     push rcx
  1003 0000434D 57                  <1>     push rdi
  1004 0000434E 4150                <1>     push r8
  1005 00004350 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1006 00004354 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1007 00004357 741A                <1>     jz .badExit
  1008 00004359 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1009 0000435C C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1010                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1011 0000435F 31C0                <1>     xor eax, eax
  1012                              <1> .pathNulScan:
  1013 00004361 F2AE                <1>     repne scasb
  1014 00004363 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1015 00004365 740C                <1>     jz .badExit
  1016 00004367 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1017 00004369 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1018 0000436B 31C0                <1>     xor eax, eax
  1019 0000436D FFC0                <1>     inc eax ;Clear the ZF
  1020 0000436F 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1021                              <1> .badExit:
  1022 00004373 4158                <1>     pop r8
  1023 00004375 5F                  <1>     pop rdi
  1024 00004376 59                  <1>     pop rcx
  1025 00004377 58                  <1>     pop rax
  1026                              <1>     return
    13                              <2> %%_ret:
    14 00004378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1027                              <1> 
  1028                              <1> 
  1029                              <1> findEnvSpace:
  1030                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1031                              <1> ; free space in the pointer and a count of free space in the environment.
  1032                              <1> ;If count is zero, pointer is not to be used.
  1033                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1034 00004379 31C9                <1>     xor ecx, ecx
  1035 0000437B 31C0                <1>     xor eax, eax    ;Clear eax too
  1036 0000437D 51                  <1>     push rcx
  1037 0000437E E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1038 00004383 59                  <1>     pop rcx
  1039                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004384 74(78)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1040 00004386 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1041 0000438A FFC9                <1>     dec ecx ;Make into a large counter
  1042 0000438C 4889F7              <1>     mov rdi, rsi    
  1043                              <1> .endsearch:
  1044 0000438F F2AE                <1>     repne scasb ;Scan
  1045 00004391 803F00              <1>     cmp byte [rdi], 0
  1046 00004394 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1047                              <1>     ;Here we are at the end of the environment
  1048 00004396 F7D9                <1>     neg ecx
  1049 00004398 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1050 0000439A 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1051 0000439D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1052 000043A0 29C8                <1>     sub eax, ecx
  1053 000043A2 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1054                              <1>     return
    13                              <2> %%_ret:
    14 000043A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1055                              <1> 
  1056                              <1> searchForEnvVar:
  1057                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1058                              <1> ;Input: rdi -> Var name to look for.
  1059                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1060 000043A5 57                  <1>     push rdi
  1061 000043A6 51                  <1>     push rcx
  1062 000043A7 52                  <1>     push rdx
  1063 000043A8 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1064 000043AC 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1065                              <1> .varLp:
  1066 000043AF 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1067 000043B2 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1068 000043B7 7416                <1>     je .varFound
  1069 000043B9 31C0                <1>     xor eax, eax        ;Search for a null
  1070 000043BB 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1071 000043BE B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1072 000043C3 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1073 000043C5 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1074 000043C7 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1075 000043C9 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1076 000043CC EBE1                <1>     jmp short .varLp    ;And scan again!
  1077                              <1> .varNotFound:
  1078 000043CE F9                  <1>     stc
  1079                              <1> .varFound:
  1080 000043CF 59                  <1>     pop rcx
  1081 000043D0 5A                  <1>     pop rdx
  1082 000043D1 5F                  <1>     pop rdi
  1083                              <1>     return
    13                              <2> %%_ret:
    14 000043D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084                              <1> 
  1085                              <1> envFree:
  1086                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1087                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1088                              <1> ; free byte of the environment!
  1089                              <1> ;Input: rsi -> Variable to free.
  1090                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1091                              <1> ;        ecx = Number of free bytes in env
  1092 000043D3 4889F7              <1>     mov rdi, rsi
  1093 000043D6 31C0                <1>     xor eax, eax
  1094                              <1> .freeLp:
  1095 000043D8 803F00              <1>     cmp byte [rdi], 0
  1096 000043DB 7403                <1>     je .exitLp
  1097 000043DD AA                  <1>     stosb
  1098 000043DE EBF8                <1>     jmp short .freeLp
  1099                              <1> .exitLp:
  1100                              <1> ;rdi points to the terminating null of the var we just deleted
  1101                              <1> ;rsi points to the start of the free space
  1102 000043E0 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1103 000043E3 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1104 000043E8 7504                <1>     jne .prepPullup
  1105 000043EA 31C0                <1>     xor eax, eax
  1106 000043EC EB0E                <1>     jmp short .cleanEnv
  1107                              <1> .prepPullup:
  1108 000043EE 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1109                              <1> .pullUp:
  1110 000043F1 AC                  <1>     lodsb
  1111 000043F2 AA                  <1>     stosb
  1112 000043F3 84C0                <1>     test al, al ;Did we pick up a zero
  1113 000043F5 75FA                <1>     jne .pullUp ;If not, keep copying
  1114 000043F7 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1115 000043FA 75F5                <1>     jne .pullUp
  1116                              <1> ;We are at the end of the copy!
  1117                              <1> .cleanEnv:
  1118 000043FC AA                  <1>     stosb   ;Store the famous second null
  1119 000043FD 48FFCF              <1>     dec rdi ;without incrementing it!!
  1120 00004400 E807000000          <1>     call getFreeSpace
  1121 00004405 31C0                <1>     xor eax, eax
  1122 00004407 51                  <1>     push rcx
  1123 00004408 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1124 0000440A 59                  <1>     pop rcx
  1125                              <1>     return
    13                              <2> %%_ret:
    14 0000440B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1126                              <1> 
  1127                              <1> getFreeSpace:
  1128                              <1> ;Output: ecx = Number of free bytes in the environment block
  1129 0000440C 56                  <1>     push rsi
  1130 0000440D 57                  <1>     push rdi
  1131 0000440E E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1132 00004413 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1133 00004417 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1134 0000441A E805000000          <1>     call getEnvSize ;Get total block size
  1135 0000441F 29F9                <1>     sub ecx, edi    ;Get difference!
  1136 00004421 5F                  <1>     pop rdi
  1137 00004422 5E                  <1>     pop rsi
  1138                              <1>     return
    13                              <2> %%_ret:
    14 00004423 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1139                              <1> 
  1140                              <1> getEnvSize:
  1141                              <1> ;Gets the number of bytes in the environment allocation
  1142                              <1> ;Output: ecx = Number of bytes in the environment!
  1143 00004424 53                  <1>     push rbx
  1144 00004425 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1145 00004429 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1146 0000442C C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1147 0000442F 5B                  <1>     pop rbx
  1148                              <1>     return
    13                              <2> %%_ret:
    14 00004430 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> 
  1150                              <1> getPtrToEndOfEnv:
  1151                              <1> ;Gets ptr to end of the environment
  1152                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1153 00004431 50                  <1>     push rax
  1154 00004432 51                  <1>     push rcx
  1155 00004433 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1156 00004437 31C0                <1>     xor eax, eax
  1157 00004439 31C9                <1>     xor ecx, ecx
  1158 0000443B FFC9                <1>     dec ecx
  1159                              <1> .lp:
  1160 0000443D F2AE                <1>     repne scasb
  1161 0000443F 3807                <1>     cmp byte [rdi], al
  1162 00004441 75FA                <1>     jne .lp
  1163 00004443 59                  <1>     pop rcx
  1164 00004444 58                  <1>     pop rax
  1165                              <1>     return
    13                              <2> %%_ret:
    14 00004445 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1166                              <1> 
  1167                              <1> growEnvBlock:
  1168                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1169                              <1> ; newly allocated 160 byte block of the environment.
  1170                              <1> ;Returns:   CF=NC - Environment grown ok!
  1171                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1172                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1173 00004446 50                  <1>     push rax
  1174 00004447 53                  <1>     push rbx
  1175 00004448 51                  <1>     push rcx
  1176 00004449 56                  <1>     push rsi
  1177 0000444A 57                  <1>     push rdi
  1178 0000444B E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1179 00004450 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1180 00004455 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1181 00004459 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1182 0000445C 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1183 00004462 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1184 00004468 7321                <1>     jae .tooLarge
  1185                              <1>     ;Here ZF must be NZ.
  1186 0000446A 4150                <1>     push r8
  1187 0000446C 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1188 00004470 B8004A0000          <1>     mov eax, 4A00h
  1189 00004475 CD21                <1>     int 21h
  1190 00004477 4158                <1>     pop r8
  1191 00004479 720A                <1>     jc .exit
  1192                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1193                              <1>     ; so we add 160 zeros to the count of bytes
  1194 0000447B 81C1A0000000        <1>     add ecx, 0A0h
  1195 00004481 31C0                <1>     xor eax, eax
  1196 00004483 F3AA                <1>     rep stosb
  1197                              <1> .exit:
  1198 00004485 5F                  <1>     pop rdi
  1199 00004486 5E                  <1>     pop rsi
  1200 00004487 59                  <1>     pop rcx
  1201 00004488 5B                  <1>     pop rbx
  1202 00004489 58                  <1>     pop rax
  1203                              <1>     return
    13                              <2> %%_ret:
    14 0000448A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1204                              <1> .tooLarge:
  1205 0000448B 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1206 0000448E F9                  <1>     stc             ;Set CF
  1207 0000448F EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004491 53                  <1>     push rbx
    25 00004492 51                  <1>     push rcx
    26 00004493 52                  <1>     push rdx
    27 00004494 57                  <1>     push rdi
    28 00004495 56                  <1>     push rsi
    29 00004496 E8A0010000          <1>     call errSwapHdls
    30 0000449B FC                  <1>     cld         ;Make String ops go forward
    31 0000449C 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 0000449F 488D1541C4FFFF      <1>     lea rdx, crlf
    33 000044A6 E869F9FFFF          <1>     call printString
    34                              <1> 
    35 000044AB 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 000044B1 B90C000000          <1>     mov ecx, 0Ch
    37 000044B6 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 000044B8 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 000044BB 480FB7FF            <1>     movzx rdi, di
    40 000044BF 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 000044C2 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 000044C6 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 000044C9 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 000044CC 488D152FCAFFFF      <1>     lea rdx, errorMsgTable
    45 000044D3 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 000044D7 E838F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 000044DC 488D1510CBFFFF      <1>     lea rdx, readMsg
    49 000044E3 488D3D18CBFFFF      <1>     lea rdi, writeMsg
    50 000044EA F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 000044ED 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 000044F1 E81EF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 000044F6 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 000044F9 0F85EF000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 000044FF 488D15E6CAFFFF      <1>     lea rdx, drvMsg ;Drive message
    58 00004506 E809F9FFFF          <1>     call printString
    59 0000450B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 0000450D 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00004510 B402                <1>     mov ah, 02h ;Print char in dl
    62 00004512 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00004514 E8F4F8FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00004519 488D15F1CAFFFF      <1>     lea rdx, abortMsg
    70 00004520 E8EFF8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00004525 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00004528 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 0000452A 488D15F8CAFFFF      <1>     lea rdx, betweenMsg
    75 00004531 E8DEF8FFFF          <1>     call printString
    76 00004536 488D15E1CAFFFF      <1>     lea rdx, retryMsg
    77 0000453D E8D2F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00004542 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00004545 7418                <1>     jz .userFail
    81 00004547 488D15DBCAFFFF      <1>     lea rdx, betweenMsg
    82 0000454E E8C1F8FFFF          <1>     call printString
    83 00004553 488D15BDCAFFFF      <1>     lea rdx, ignoreMsg
    84 0000455A E8B5F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 0000455F F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00004562 7418                <1>     jz .userMsgEnd
    88 00004564 488D15BECAFFFF      <1>     lea rdx, betweenMsg
    89 0000456B E8A4F8FFFF          <1>     call printString
    90 00004570 488D15ADCAFFFF      <1>     lea rdx, failMsg
    91 00004577 E898F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 0000457C 488D15A9CAFFFF      <1>     lea rdx, endMsg
    94 00004583 E88CF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00004588 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 0000458A 488D3D9ECAFFFF      <1>     lea rdi, i24Resp ;Go to start of string
    98 00004591 B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
    99 00004596 CD21                <1>     int 21h ;Get char in al
   100 00004598 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 0000459A 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 0000459C 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 0000459E AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 0000459F 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 000045A1 FFC1                <1>     inc ecx
   107 000045A3 81F904000000        <1>     cmp ecx, 4
   108 000045A9 75F3                <1>     jne .uip1
   109 000045AB E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 000045B0 E858F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 000045B5 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 000045B7 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 000045B9 7427                <1>     je .cehExit
   116 000045BB 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 000045BD 740F                <1>     je .viIgnore
   118 000045BF 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 000045C1 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 000045C3 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 000045C6 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 000045CC EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 000045CE F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 000045D1 0F843DFFFFFF        <1>     jz .userInput
   127 000045D7 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 000045D9 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 000045DC 0F8432FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 000045E2 E871000000          <1>     call errRetHdls
   133 000045E7 5E                  <1>     pop rsi
   134 000045E8 5F                  <1>     pop rdi
   135 000045E9 5A                  <1>     pop rdx
   136 000045EA 59                  <1>     pop rcx
   137 000045EB 5B                  <1>     pop rbx
   138 000045EC 48CF                <1>     iretq
   139                              <1> .charError:
   140 000045EE B908000000          <1>     mov ecx, 8  ;8 chars in device name
   141 000045F3 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   142                              <1> .ce1:
   143 000045FA AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   144 000045FB 88C2                <1>     mov dl, al  ;Move char into dl
   145 000045FD B402                <1>     mov ah, 02h
   146 000045FF CD21                <1>     int 21h ;Print char
   147 00004601 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   148 00004603 E90CFFFFFF          <1>     jmp .userInput
   149                              <1> 
   150                              <1> 
   151                              <1> int23h:
   152 00004608 F6051CBAFFFFFF      <1>     test byte [permaSwitch], -1
   153 0000460F 7516                <1>     jnz .noJug   ;If this is non-zero, just exit as normal
   154                              <1>     ;Else, we juggle parent PSP's
   155 00004611 50                  <1>     push rax
   156 00004612 53                  <1>     push rbx
   157 00004613 488B05FDB9FFFF      <1>     mov rax, qword [realParent]
   158 0000461A 488B1DEEB9FFFF      <1>     mov rbx, qword [pspPtr]
   159 00004621 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   160 00004625 5B                  <1>     pop rbx
   161 00004626 58                  <1>     pop rax
   162                              <1> .noJug:
   163 00004627 66813D6FBAFFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
   164 00004630 7405                <1>     je .exit
   165 00004632 E821000000          <1>     call errRetHdls 
   166                              <1> .exit:
   167 00004637 F9                  <1>     stc     ;Set CF to kill the task
   168 00004638 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
   169                              <1> 
   170                              <1> errSwapHdls:
   171                              <1> ;Swaps STDIO to STDERR
   172                              <1> ;Start by tmporarily moving the stderr handler into stdio
   173                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   174 0000463B 50                  <1>     push rax
   175 0000463C 53                  <1>     push rbx
   176 0000463D E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   177 00004642 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   178 00004645 66890553BAFFFF      <1>     mov word [errHdls], ax      ;Save em
   179 0000464C 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   180 00004650 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   181 00004652 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   182 00004655 5B                  <1>     pop rbx
   183 00004656 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00004657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> errRetHdls:
   187                              <1> ;Returns STDIO from STDERR.
   188 00004658 50                  <1>     push rax
   189 00004659 53                  <1>     push rbx
   190 0000465A E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   191 0000465F 0FB70539BAFFFF      <1>     movzx eax, word [errHdls]
   192 00004666 66C70530BAFFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   193 0000466F 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   194 00004672 5B                  <1>     pop rbx
   195 00004673 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00004674 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getJftPtr:
   199                              <1> ;Preserves all registers except rbx.
   200                              <1> ;Output: rbx -> JFT of current task
   201 00004675 50                  <1>     push rax        ;Save rax
   202 00004676 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   203 0000467B CD21                <1>     int 21h
   204 0000467D 58                  <1>     pop rax
   205 0000467E 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   206 00004684 7605                <1>     jbe .pspJftExit
   207 00004686 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   208                              <1>     return
    13                              <2> %%_ret:
    14 0000468A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> .pspJftExit:
   210 0000468B 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   211                              <1>     return
    13                              <2> %%_ret:
    14 0000468F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15D7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21 00000036 E8(F9420000)        <1>     call resetIDTentries
    22                              <1> ;Get a pointer to DOS Sysvars
    23 0000003B B452                <1>     mov ah, 52h ;Get sysvars
    24 0000003D CD21                <1>     int 21h
    25 0000003F 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    26                              <1> ;Call for simple internationalisation data
    27 00000046 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    28 0000004B CD21                <1>     int 21h
    29 0000004D 3CFF                <1>     cmp al, -1
    30 0000004F 7412                <1>     je .skipSwitch
    31 00000051 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    32 00000057 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    33 0000005A 7507                <1>     jne .skipSwitch
    34 0000005C C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    35                              <1> .skipSwitch:
    36 00000063 B800380000          <1>     mov eax, 3800h  ;Get current country data
    37 00000068 488D15(34000000)    <1>     lea rdx, ctryData
    38 0000006F CD21                <1>     int 21h ;Write the data to the internal country table
    39                              <1> ;Now determine if this is the master copy of COMMAND.COM
    40                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    41 00000071 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    42 00000076 CD21                <1>     int 21h
    43 00000078 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    44 0000007B B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    45 00000080 CD21                <1>     int 21h
    46 00000082 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    47 00000085 7574                <1>     jne .skipMaster
    48                              <1> ;Ok so we are master command.com
    49                              <1> ;Now make myself the real parent
    50 00000087 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    51 0000008E 4C8905(17000000)    <1>     mov qword [realParent], r8
    52                              <1> ;Set current Drive in COMSPEC
    53 00000095 B800190000          <1>     mov eax, 1900h ;Get current Drive
    54 0000009A CD21                <1>     int 21h
    55 0000009C 0441                <1>     add al, "A"
    56 0000009E 8805(3B100000)      <1>     mov byte [comspecEvar.cspec], al
    57                              <1> ;Set Int 2Eh up
    58 000000A4 488D15(171A0000)    <1>     lea rdx, int2Eh
    59 000000AB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000B0 CD21                <1>     int 21h
    61                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    62                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    63 000000B2 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    64 000000B7 B800480000          <1>     mov eax, 4800h
    65 000000BC CD21                <1>     int 21h
    66 000000BE 0F824FFFFFFF        <1>     jc .exitBad
    67                              <1> ;Set master environment as mine
    68 000000C4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    69 000000C8 488D35(33100000)    <1>     lea rsi, masterEnv
    70 000000CF 4889C7              <1>     mov rdi, rax
    71 000000D2 B91E000000          <1>     mov ecx, menv_len
    72 000000D7 F3A4                <1>     rep movsb   ;Copy the chars over!
    73                              <1> 
    74 000000D9 488D15(E7080000)    <1>     lea rdx, crlf
    75 000000E0 B409                <1>     mov ah, 09h
    76 000000E2 CD21                <1>     int 21h
    77 000000E4 E8(D82A0000)        <1>     call time
    78 000000E9 E8(2A290000)        <1>     call date
    79 000000EE 488D15(E7080000)    <1>     lea rdx, crlf
    80 000000F5 B409                <1>     mov ah, 09h
    81 000000F7 CD21                <1>     int 21h
    82 000000F9 EB2E                <1>     jmp short .printInit
    83                              <1> .skipMaster:    
    84                              <1> ;We now search for the master environment!!
    85                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    86                              <1>     ; parent. This is the previous master command interpreter! This means
    87                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    88                              <1>     ; then set our environment ptr in the PSP to the master environment.
    89 000000FB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    90 00000102 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    91 0000010A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    92 00000111 F2AE                <1>     repne scasb
    93 00000113 67E313              <1>     jecxz .printInit
    94 00000116 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    95 00000119 E8(32400000)        <1>     call ucChar
    96 0000011E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    97 00000120 7507                <1>     jne .printInit
    98 00000122 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    99                              <1> .printInit:
   100 00000129 488D1D(90460000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   101                              <1> ;Finish by printing INIT string.
   102 00000130 53                  <1>     push rbx
   103 00000131 488D153A000000      <1>     lea rdx, initString
   104 00000138 B409                <1>     mov ah, 09h
   105 0000013A CD21                <1>     int 21h ;Print init string
   106 0000013C E8(16340000)        <1>     call version.printVersionNumber
   107 00000141 488D1560000000      <1>     lea rdx, initString2
   108 00000148 B409                <1>     mov ah, 09h
   109 0000014A CD21                <1>     int 21h ;Print init string
   110 0000014C 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 0000014D 4881C340060000      <1>     add rbx, stackSize
   113 00000154 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 0000015B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 0000015F 48C1E304            <1>     shl rbx, 4
   116 00000163 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 00000166 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 0000016D E9(51100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000172 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 0000017B 66696320436F6D7075- <1>
   121 00000184 746572205265736561- <1>
   121 0000018D 726368285229205343- <1>
   121 00000196 502F444F5328522920- <1>
   121 0000019F 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001A8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001B1 202020284329436F70- <1>
   123 000001BA 797269676874205363- <1>
   123 000001C3 69656E746966696320- <1>
   123 000001CC 436F6D707574657220- <1>
   123 000001D5 526573656172636820- <1>
   123 000001DE 323032342E0D0A24    <1>
   124 000001E6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 000001EF 20444F532076657273- <1>
   124 000001F8 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+6+2 passes

