     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19                              <1> 
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B0 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B1 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B2 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    49 000000BA 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    49 000000C3 000000000000000000- <1>
    49 000000CC 000000000000000000- <1>
    49 000000D5 000000000000000000- <1>
    49 000000DE 000000000000000000- <1>
    49 000000E7 000000000000000000- <1>
    49 000000F0 000000000000000000- <1>
    49 000000F9 000000000000000000- <1>
    49 00000102 00000000000000      <1>
    50 00000109 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    50 00000112 000000000000000000- <1>
    50 0000011B 000000000000000000- <1>
    50 00000124 000000000000000000- <1>
    50 0000012D 000000000000000000- <1>
    50 00000136 000000000000000000- <1>
    50 0000013F 000000000000000000- <1>
    50 00000148 000000000000000000- <1>
    50 00000151 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 00000158 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000161 00000000000000      <1>
    56 00000168 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000171 000000000000000000- <1>
    56 0000017A 000000000000000000- <1>
    56 00000183 000000000000000000- <1>
    56 0000018C 00000000000000      <1>
    57                              <1> 
    58 00000193 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019C 000000000000000000- <1>
    58 000001A5 000000000000000000- <1>
    58 000001AE 0000000000          <1>
    59                              <1> 
    60 000001B3 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BC 000000000000000000- <1>
    60 000001C5 000000000000000000- <1>
    60 000001CE 000000000000000000- <1>
    60 000001D7 000000000000000000- <1>
    60 000001E0 000000000000000000- <1>
    60 000001E9 000000000000000000- <1>
    60 000001F2 000000000000000000- <1>
    60 000001FB 000000000000000000- <1>
    60 00000204 000000000000000000- <1>
    60 0000020D 000000000000000000- <1>
    60 00000216 000000000000000000- <1>
    60 0000021F 000000000000000000- <1>
    60 00000228 000000000000000000- <1>
    60 00000231 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    62 00000235 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 0000023E 000000000000000000- <1>
    62 00000247 000000000000000000- <1>
    62 00000250 000000000000000000- <1>
    62 00000259 000000000000000000- <1>
    62 00000262 000000000000000000- <1>
    62 0000026B 000000000000000000- <1>
    62 00000274 000000000000000000- <1>
    62 0000027D 000000000000000000- <1>
    62 00000286 000000000000000000- <1>
    62 0000028F 000000000000000000- <1>
    62 00000298 000000000000000000- <1>
    62 000002A1 000000000000000000- <1>
    62 000002AA 000000000000000000- <1>
    62 000002B3 00000000            <1>
    63 000002B7 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C0 000000000000000000- <1>
    63 000002C9 000000000000000000- <1>
    63 000002D2 000000000000000000- <1>
    63 000002DB 000000000000000000- <1>
    63 000002E4 000000000000000000- <1>
    63 000002ED 000000000000000000- <1>
    63 000002F6 000000000000000000- <1>
    63 000002FF 000000000000000000- <1>
    63 00000308 000000000000000000- <1>
    63 00000311 000000000000000000- <1>
    63 0000031A 000000000000000000- <1>
    63 00000323 000000000000000000- <1>
    63 0000032C 000000000000000000- <1>
    63 00000335 00000000            <1>
    64 00000339 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000342 000000000000000000- <1>
    64 0000034B 000000000000000000- <1>
    64 00000354 000000000000000000- <1>
    64 0000035D 000000000000000000- <1>
    64 00000366 000000000000000000- <1>
    64 0000036F 000000000000000000- <1>
    64 00000378 000000000000000000- <1>
    64 00000381 00000000000000      <1>
    65 00000388 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000391 0000000000          <1>
    66                              <1> 
    67 00000396 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 0000039F 000000000000000000- <1>
    67 000003A8 000000000000000000- <1>
    67 000003B1 000000000000000000- <1>
    67 000003BA 000000000000000000- <1>
    67 000003C3 000000000000000000- <1>
    67 000003CC 000000000000000000- <1>
    67 000003D5 000000000000000000- <1>
    67 000003DE 00000000000000      <1>
    68 000003E5 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003EE 000000000000000000- <1>
    68 000003F7 000000000000000000- <1>
    68 00000400 000000000000000000- <1>
    68 00000409 000000000000000000- <1>
    68 00000412 000000000000000000- <1>
    68 0000041B 000000000000000000- <1>
    68 00000424 000000000000000000- <1>
    68 0000042D 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000434 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043D 000000000000000000- <1>
    71 00000446 000000000000000000- <1>
    71 0000044F 000000000000000000- <1>
    71 00000458 000000000000000000- <1>
    71 00000461 000000000000000000- <1>
    71 0000046A 000000000000000000- <1>
    71 00000473 000000000000000000- <1>
    71 0000047C 00000000000000      <1>
    72 00000483 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048C 000000000000000000- <1>
    72 00000495 000000000000000000- <1>
    72 0000049E 000000000000000000- <1>
    72 000004A7 000000000000000000- <1>
    72 000004B0 000000000000000000- <1>
    72 000004B9 000000000000000000- <1>
    72 000004C2 000000000000000000- <1>
    72 000004CB 00000000000000      <1>
    73                              <1> 
    74 000004D2 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DA 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E2 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004EB 000000000000000000- <1>
    79 000004F4 000000000000000000- <1>
    79 000004FD 000000000000000000- <1>
    79 00000506 000000000000000000- <1>
    79 0000050F 000000000000000000- <1>
    79 00000518 000000000000000000- <1>
    79 00000521 000000000000000000- <1>
    79 0000052A 000000000000000000- <1>
    79 00000533 000000000000000000- <1>
    79 0000053C 000000000000000000- <1>
    79 00000545 000000000000000000- <1>
    79 0000054E 000000000000000000- <1>
    79 00000557 000000000000000000- <1>
    79 00000560 000000000000000000- <1>
    79 00000569 000000000000000000- <1>
    79 00000572 000000000000000000- <1>
    79 0000057B 000000000000000000- <1>
    79 00000584 000000000000000000- <1>
    79 0000058D 000000000000000000- <1>
    79 00000596 000000000000000000- <1>
    79 0000059F 000000000000000000- <1>
    79 000005A8 000000000000000000- <1>
    79 000005B1 000000000000000000- <1>
    79 000005BA 000000000000000000- <1>
    79 000005C3 000000000000000000- <1>
    79 000005CC 000000000000000000- <1>
    79 000005D5 000000000000000000- <1>
    79 000005DE 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E6 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E7 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005E8 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    88 000005E9 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005EA 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F3 000000000000000000- <1>
    89 000005FC 000000000000000000- <1>
    89 00000605 000000000000000000- <1>
    89 0000060E 000000000000000000- <1>
    89 00000617 000000000000000000- <1>
    89 00000620 000000000000000000- <1>
    89 00000629 000000000000000000- <1>
    89 00000632 000000000000000000- <1>
    89 0000063B 000000000000000000- <1>
    89 00000644 000000000000000000- <1>
    89 0000064D 000000000000000000- <1>
    89 00000656 000000000000000000- <1>
    89 0000065F 000000000000000000- <1>
    89 00000668 00000000            <1>
    90 0000066C 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 00000675 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 0000067C FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 0000067D 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000683 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000684 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 0000068C 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 0000068F 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000693 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006A8 00                  <1> td1 db 0    ;Minutes/Year
   107 000006A9 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AA 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006AB 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006AC 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006B5 000000000000000000- <1>
   113 000006BE 000000000000000000- <1>
   113 000006C7 000000000000000000- <1>
   113 000006D0 000000000000000000- <1>
   113 000006D9 000000000000000000- <1>
   113 000006E2 000000000000000000- <1>
   113 000006EB 000000000000000000- <1>
   113 000006F4 000000000000000000- <1>
   113 000006FD 000000000000000000- <1>
   113 00000706 000000000000000000- <1>
   113 0000070F 000000000000000000- <1>
   113 00000718 000000000000000000- <1>
   113 00000721 000000000000000000- <1>
   113 0000072A 00000000            <1>
   114 0000072E 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 00000737 000000000000000000- <1>
   114 00000740 000000000000000000- <1>
   114 00000749 000000000000000000- <1>
   114 00000752 000000000000000000- <1>
   114 0000075B 000000000000000000- <1>
   114 00000764 000000000000000000- <1>
   114 0000076D 000000000000000000- <1>
   114 00000776 000000000000000000- <1>
   114 0000077F 000000000000000000- <1>
   114 00000788 000000000000000000- <1>
   114 00000791 000000000000000000- <1>
   114 0000079A 000000000000000000- <1>
   114 000007A3 000000000000000000- <1>
   114 000007AC 00000000            <1>
   115 000007B0 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   116 000007B8 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   117 000007C0 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007C9 2020                <1>
   118                              <1> ;Copy Handles
   119 000007CB FFFF                <1> sourceHdl   dw -1
   120 000007CD FFFF                <1> destHdl     dw -1
   121 000007CF 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   122 000007D1 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   122 000007DA 000000000000000000- <1>
   122 000007E3 000000000000000000- <1>
   122 000007EC 000000000000000000- <1>
   122 000007F5 000000000000000000- <1>
   122 000007FE 000000000000000000- <1>
   122 00000807 000000000000000000- <1>
   122 00000810 000000000000000000- <1>
   122 00000819 000000000000000000- <1>
   122 00000822 000000000000000000- <1>
   122 0000082B 000000000000000000- <1>
   122 00000834 000000000000000000- <1>
   122 0000083D 000000000000000000- <1>
   122 00000846 000000000000000000- <1>
   122 0000084F 0000                <1>
   123                              <1> 
   124                              <1> ;Environment manipulation vars
   125 00000851 0000                <1> envVarSz        dw 0    ;Env var size
   126 00000853 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000855 03444952            <1>     db 3, "DIR"
     8 00000859 CA19                <1>     dw dir - startLbl
     9                              <1> 
    10 0000085B 024344              <1>     db 2, "CD"
    11 0000085E 931E                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000860 054348444952        <1>     db 5, "CHDIR"
    14 00000866 931E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000868 024D44              <1>     db 2, "MD"
    17 0000086B 0E1F                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000086D 054D4B444952        <1>     db 5, "MKDIR"
    20 00000873 0E1F                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000875 025244              <1>     db 2, "RD"
    23 00000878 571F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000087A 05524D444952        <1>     db 5, "RMDIR"
    26 00000880 571F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000882 0344454C            <1>     db 3, "DEL"
    29 00000886 4321                <1>     dw erase - startLbl
    30                              <1> 
    31 00000888 054552415345        <1>     db 5, "ERASE"
    32 0000088E 4321                <1>     dw erase - startLbl
    33                              <1> 
    34 00000890 0444415445          <1>     db 4, "DATE"
    35 00000895 8122                <1>     dw date - startLbl
    36                              <1> 
    37 00000897 0454494D45          <1>     db 4, "TIME"
    38 0000089C E622                <1>     dw time - startLbl
    39                              <1> 
    40 0000089E 04434F5059          <1>     db 4, "COPY"
    41 000008A3 A11F                <1>     dw copy - startLbl
    42                              <1> 
    43 000008A5 0443545459          <1>     db 4, "CTTY"
    44 000008AA 2323                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008AC 03434C53            <1>     db 3, "CLS"
    47 000008B0 BE23                <1>     dw cls - startLbl
    48                              <1> 
    49 000008B2 05425245414B        <1>     db 5, "BREAK"
    50 000008B8 3024                <1>     dw break - startLbl
    51                              <1> 
    52 000008BA 06564552494659      <1>     db 6, "VERIFY"
    53 000008C1 B124                <1>     dw verify - startLbl
    54                              <1> 
    55 000008C3 0652454E414D45      <1>     db 6, "RENAME"
    56 000008CA 2E25                <1>     dw rename - startLbl
    57                              <1> 
    58 000008CC 0352454E            <1>     db 3, "REN"
    59 000008D0 2E25                <1>     dw rename - startLbl
    60                              <1>     
    61 000008D2 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008DB 2B29                <1>     dw truename - startLbl
    63                              <1> 
    64 000008DD 03564552            <1>     db 3, "VER"
    65 000008E1 112B                <1>     dw version - startLbl
    66                              <1> 
    67 000008E3 03564F4C            <1>     db 3, "VOL"
    68 000008E7 522A                <1>     dw volume - startLbl
    69                              <1> 
    70 000008E9 034D454D            <1>     db 3, "MEM"
    71 000008ED 552B                <1>     dw memory - startLbl
    72                              <1> 
    73 000008EF 0445584954          <1>     db 4, "EXIT"
    74 000008F4 522D                <1>     dw exit - startLbl
    75                              <1> 
    76 000008F6 0454595045          <1>     db 4, "TYPE"
    77 000008FB 9F2C                <1>     dw type - startLbl
    78                              <1> 
    79 000008FD 054C4142454C        <1>     db 5, "LABEL"
    80 00000903 7C29                <1>     dw label - startLbl
    81                              <1> 
    82 00000905 0450415448          <1>     db 4, "PATH"
    83 0000090A F530                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 0000090C 03534554            <1>     db 3, "SET"
    86 00000910 D62F                <1>     dw set - startLbl
    87                              <1> 
    88 00000912 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000919 D431                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000091B 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000921 A629                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000923 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000929 E129                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000092B 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000931 1C2A                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000933 05544F554348        <1>     db 5, "TOUCH"
   101 00000939 1E27                <1>     dw touch - startLbl
   102                              <1> 
   103 0000093B 044A4F494E          <1>     db 4, "JOIN"
   104 00000940 8127                <1>     dw join - startLbl
   105                              <1> 
   106 00000942 055355425354        <1>     db 5, "SUBST"
   107 00000948 4428                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 0000094A 044543484F          <1>     db 4, "ECHO"
   111 0000094F 7532                <1>     dw echo - startLbl
   112 00000951 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000952 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000955 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000095A 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000963 696C65206D69737369- <1>
     4 0000096C 6E670D0A24          <1>
     5 00000971 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000097A 6469736B2077697468- <1>
     5 00000983 206261746368206669- <1>
     5 0000098C 6C65                <1>
     6 0000098E 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000997 737320616E79206B65- <1>
     6 000009A0 79207768656E207265- <1>
     6 000009A9 6164790D0A24        <1>
     7 000009AF 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009B8 6E64206F722066696C- <1>
     7 000009C1 65206E616D650D0A24  <1>
     8 000009CA 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009D3 2066696C65206E616D- <1>
     8 000009DC 65206F7220          <1>
     9 000009E1 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009EA 666F756E640D0A24    <1>
    10 000009F2 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 000009FB 656E74206469736B20- <1>
    10 00000A04 73706163650D0A24    <1>
    11 00000A0C 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A15 7669726F6E6D656E74- <1>
    11 00000A1E 2073706163650D0A24  <1>
    12 00000A27 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A30 74696F6E206572726F- <1>
    12 00000A39 720D0A24            <1>
    13 00000A3D 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A46 6F7420626520636F70- <1>
    13 00000A4F 696564206F6E746F20- <1>
    13 00000A58 697473656C660D0A24  <1>
    14 00000A61 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A6A 662064657374696E61- <1>
    14 00000A73 74696F6E206C6F7374- <1>
    14 00000A7C 206265666F72652063- <1>
    14 00000A85 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A8B 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A94 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A9D 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000AA6 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000AA7 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AB0 65650D0A24          <1>
    21 00000AB5 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000ABE 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000AC7 726976652073706563- <1>
    23 00000AD0 696669636174696F6E- <1>
    23 00000AD9 0D0A24              <1>
    24 00000ADC 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AE5 6B6579207768656E20- <1>
    24 00000AEE 7265616479202E202E- <1>
    24 00000AF7 202E2024            <1>
    25 00000AFB 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000B04 6172616D657465720D- <1>
    25 00000B0D 0A24                <1>
    26                              <1> 
    27 00000B0F 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B18 576564546875467269- <1>
    27 00000B21 536174              <1>
    28 00000B24 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B2D 206461746524        <1>
    29 00000B33 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B3C 6174652069732024    <1>
    30 00000B44 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B4D 657720646174652024  <1>
    31 00000B56 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B5F 293A2024            <1>
    32 00000B63 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B6C 293A2024            <1>
    33 00000B70 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B79 293A2024            <1>
    34 00000B7D 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B86 2074696D6524        <1>
    35 00000B8C 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B95 696D652069732024    <1>
    36 00000B9D 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000BA6 65772074696D653A20- <1>
    36 00000BAF 24                  <1>
    37                              <1> 
    38 00000BB0 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BB9 7572652028592F4E29- <1>
    38 00000BC2 3F2024              <1>
    39                              <1> 
    40 00000BC5 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BCE 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BD7 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BE0 6E2064726976652024  <1>
    43 00000BE9 2069732024          <1> volOk   db " is $"
    44 00000BEE 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000BF7 6162656C24          <1>
    45                              <1> 
    46 00000BFC 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000C05 69726563746F72790D- <1>
    46 00000C0E 0A24                <1>
    47 00000C10 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C19 206372656174652064- <1>
    47 00000C22 69726563746F72790D- <1>
    47 00000C2B 0A24                <1>
    48 00000C2D 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C36 6174682C206E6F7420- <1>
    48 00000C3F 6469726563746F7279- <1>
    48 00000C48 2C0D0A              <1>
    49 00000C4B 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C54 6F7279206E6F742065- <1>
    49 00000C5D 6D7074790D0A24      <1>
    50 00000C64 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C6D 79206F66202024      <1>
    51 00000C74 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C7D 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C86 6E6965640D0A24      <1>
    53 00000C8D 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C96 72697665206973206E- <1>
    53 00000C9F 6F206C6F6E67657220- <1>
    53 00000CA8 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CAE 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CB7 65766963650D0A24    <1>
    56 00000CBF 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CC8 20666F756E640D0A24  <1>
    57 00000CD1 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CDA 726F720D0A24        <1>
    58 00000CE0 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CE9 6F74206265206E6573- <1>
    58 00000CF2 7465640D0A24        <1>
    59 00000CF8 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D01 6174652066696C6520- <1>
    59 00000D0A 6572726F7220647572- <1>
    59 00000D13 696E6720706970650D- <1>
    59 00000D1C 0A24                <1>
    60 00000D1E 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D27 2062696E6172792072- <1>
    60 00000D30 656164732066726F6D- <1>
    60 00000D39 206120646576696365- <1>
    60 00000D42 0D0A24              <1>
    61 00000D45 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D4B 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D50 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D59 24                  <1>
    64 00000D5A 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D63 2024                <1>
    65 00000D65 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D6E 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D77 617468206F72206669- <1>
    66 00000D80 6C65206E616D650D0A- <1>
    66 00000D89 24                  <1>
    67 00000D8A 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D93 756D626572206F6620- <1>
    67 00000D9C 706172616D65746572- <1>
    67 00000DA5 730D0A24            <1>
    68 00000DA9 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DB2 74696E6720746F2064- <1>
    68 00000DBB 6576696365          <1>
    69 00000DC0 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DC4 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DCD 20202020202020546F- <1>
    71 00000DD6 74616C207379737465- <1>
    71 00000DDF 6D206D656D6F72793A- <1>
    71 00000DE8 2024                <1>
    72 00000DEA 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000DF3 20202020202020204D- <1>
    72 00000DFC 656D6F727920757365- <1>
    72 00000E05 6420627920444F533A- <1>
    72 00000E0E 2024                <1>
    73 00000E10 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E19 656D6F727920757365- <1>
    73 00000E22 64206279206170706C- <1>
    73 00000E2B 69636174696F6E733A- <1>
    73 00000E34 2024                <1>
    74 00000E36 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E3F 656D6F727920726573- <1>
    74 00000E48 657276656420627920- <1>
    74 00000E51 68617264776172653A- <1>
    74 00000E5A 2024                <1>
    75 00000E5C 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E65 202020202020202020- <1>
    75 00000E6E 2020202020204D656D- <1>
    75 00000E77 6F727920667265653A- <1>
    75 00000E80 2024                <1>
    76 00000E82 20627974657324      <1> memByte db " bytes$"
    77 00000E89 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E92 6F7420417373657274- <1>
    77 00000E9B 61696E20444F532045- <1>
    77 00000EA4 6E74727920506F696E- <1>
    77 00000EAD 7424                <1>
    78 00000EAF 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000EB8 416C6C6F636174696F- <1>
    78 00000EC1 6E204572726F7224    <1>
    79 00000EC9 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000ED2 4572726F7224        <1>
    80 00000ED8 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EE1 68616C74656424      <1>
    81                              <1> 
    82 00000EE8 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000EF1 206372656174652070- <1>
    82 00000EFA 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000EFF 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F08 6F6E206572726F720D- <1>
    84 00000F11 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F12 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F16 2020202024          <1> fourSpc  db "    $"
    89 00000F1B 20202024            <1> threeSpc db "   $"
    90 00000F1F 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F22 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F2B 696679204F4E206F72- <1>
    92 00000F34 204F46460D0A24      <1>
    93                              <1> 
    94 00000F3B 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F43 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F4C 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F50 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F58 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F61 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F67 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F6E 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F71 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F75 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F78 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F7A 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F7D CD21                <1>     int 21h
    11                              <1> commandMain:
    12 00000F7F 488B257FF0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 00000F86 FC                  <1>     cld ;Ensure stringops are done the right way
    14 00000F87 C60525F2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 00000F8E C605A0F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 00000F95 C6051BF3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 00000F9C E8DA250000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 00000FA1 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 00000FA6 CD21                <1>     int 21h
    21 00000FA8 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 00000FAD BA01000000          <1>     mov edx, 1      ;Start new print job
    23 00000FB2 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 00000FB4 E844280000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 00000FB9 F605F1F0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00000FC0 0F85F1080000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 00000FC6 E817250000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00000FCB 488D15E1F1FFFF      <1>     lea rdx, inBuffer
    31 00000FD2 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 00000FD7 CD21                <1>     int 21h
    33 00000FD9 E89D250000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00000FDE 803DCFF1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 00000FE5 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 00000FE7 488D35C5F1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00000FEE 488D3D40F2FFFF      <1>     lea rdi, cpyBuffer
    41 00000FF5 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 00000FFA F3A4                <1>     rep movsb
    43 00000FFC E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001001 488D35B1F2FFFF      <1>     lea rsi, cmdBuffer + 2
    46 00001008 E8BE270000          <1>     call skipDelimiters
    47 0000100D 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001010 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 00001012 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 00001015 0F849D030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 0000101B 4C8B05EDEFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001022 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 00001027 E8D8060000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 0000102C E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001031 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58 00001036 E8CE040000          <1>     call advanceRedir       ;Now advance and end redir if needed
    59 0000103B F6055DF0FFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    60 00001042 0F8454FFFFFF        <1>     jz .inputMain
    61                              <1>     ;Now we pull the commandline forwards. 
    62 00001048 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    63 0000104D 488D3D65F2FFFF      <1>     lea rdi, cmdBuffer + 2
    64 00001054 4889F1              <1>     mov rcx, rsi
    65 00001057 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    66 0000105A 280D58F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    67 00001060 8A0D52F2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    68 00001066 FFC1                <1>     inc ecx     ;One more for the terminating char
    69 00001068 F3A4                <1>     rep movsb   ;Move the chars over    
    70 0000106A E87D270000          <1>     call clearCommandState  ;Else, clear the command state and start again
    71 0000106F EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    72                              <1> 
    73                              <1> makeCmdBuffer:
    74                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    75                              <1> ; copy buffer. Called only once in a cycle.
    76                              <1> ;Throughout: CL has char count, CH has quote count
    77 00001071 488D35BFF1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    78 00001078 31C9                <1>     xor ecx, ecx
    79 0000107A 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    80                              <1> .countQuotes:
    81 0000107D AC                  <1>     lodsb
    82 0000107E 3C22                <1>     cmp al, '"'
    83 00001080 7507                <1>     jne .notQuoteToCount
    84 00001082 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    85 00001084 E9F4FFFFFF          <1>     jmp .countQuotes
    86                              <1> .notQuoteToCount:
    87 00001089 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    88 0000108B 75F0                <1>     jne .countQuotes
    89 0000108D 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    90 00001090 488D3D22F2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    91                              <1> .getChar:
    92 00001097 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    93 00001098 3C22                <1>     cmp al, '"'     ;Is char a quote?
    94 0000109A 750E                <1>     jne .notQuote
    95 0000109C FECD                <1>     dec ch          ;We have a quote, now decrement
    96 0000109E 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    97                              <1> .searchForClosingQuote:
    98                              <1>     ;Char was quote, now directly store all chars until we hit closing char
    99 000010A0 AA                  <1>     stosb   ;Store char and inc rdi
   100 000010A1 FEC1                <1>     inc cl
   101 000010A3 AC                  <1>     lodsb   ;Get next char
   102 000010A4 3C22                <1>     cmp al, '"'
   103 000010A6 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   104 000010A8 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   105                              <1> .notQuote:
   106 000010AA E8F4050000          <1>     call peelRedir      ;Intervene redir if needed
   107 000010AF 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   108 000010B1 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   109 000010B3 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   110                              <1> .pipeHandle:
   111                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   112 000010B5 0F84FD020000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   113                              <1> .notRedir:
   114 000010BB AA                  <1>     stosb       ;Store char and advance rdi
   115 000010BC 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   116 000010BE 7404                <1>     je .exit
   117 000010C0 FEC1                <1>     inc cl      ;Increment char count
   118 000010C2 EBD3                <1>     jmp short .getChar    ;If not, get next char
   119                              <1> .exit:
   120 000010C4 880DEEF1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   121                              <1>     return
    13                              <2> %%_ret:
    14 000010CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> makeCmdString:
   124                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   125                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   126                              <1> ; Copies into the psp.
   127                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   128 000010CB 488D35E7F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   129 000010D2 31C9                <1>     xor ecx, ecx
   130 000010D4 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   131                              <1> .countQuotes:
   132 000010D7 AC                  <1>     lodsb
   133 000010D8 3C22                <1>     cmp al, '"'
   134 000010DA 7507                <1>     jne .notQuoteToCount
   135 000010DC FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   136 000010DE E9F4FFFFFF          <1>     jmp .countQuotes
   137                              <1> .notQuoteToCount:
   138 000010E3 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   139 000010E5 75F0                <1>     jne .countQuotes
   140 000010E7 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   141 000010EA 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   142                              <1> .getChar:
   143 000010F1 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   144 000010F2 3C22                <1>     cmp al, '"'     ;Is char a quote?
   145 000010F4 750E                <1>     jne .notQuote
   146 000010F6 FECD                <1>     dec ch          ;We have a quote, now decrement
   147 000010F8 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   148                              <1> .searchForClosingQuote:
   149                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   150 000010FA AA                  <1>     stosb   ;Store char and inc rdi
   151 000010FB FEC1                <1>     inc cl
   152 000010FD AC                  <1>     lodsb   ;Get next char
   153 000010FE 3C22                <1>     cmp al, '"'
   154 00001100 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   155 00001102 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   156                              <1> .notQuote:
   157 00001104 3C7C                <1>     cmp al, "|"
   158 00001106 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   159 00001108 B00D                <1>     mov al, CR          ;Store the pipe char
   160 0000110A 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   161                              <1> .notPipe:
   162 0000110D AA                  <1>     stosb       ;Store char and advance rdi
   163 0000110E 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   164 00001110 7404                <1>     je .exit
   165 00001112 FEC1                <1>     inc cl      ;Increment char count
   166 00001114 EBDB                <1>     jmp short .getChar    ;If not, get next char
   167                              <1> .exit:
   168 00001116 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   169 00001119 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   170 00001120 803E0D              <1>     cmp byte [rsi], CR  
   171                              <1>     return
    13                              <2> %%_ret:
    14 00001123 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   172                              <1> 
   173                              <1> analyseCmdline:
   174                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   175                              <1> ; processes the command name into the FCB.  
   176 00001124 C6055DF2FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   177                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   178 0000112B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   179 00001132 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   180 00001135 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   181 00001139 8A05EBEEFFFF        <1>     mov al, byte [switchChar]
   182 0000113F F2AE                <1>     repne scasb                     ;Scan for the switch char
   183 00001141 7506                <1>     jne .noSwitchFnd
   184 00001143 F61567EFFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   185                              <1> .noSwitchFnd:
   186 00001149 E87D260000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   187 0000114E 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   188                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001151 74(23)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   189 00001153 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   190                              <1> .plp:
   191 00001156 488D3DFBEFFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   192 0000115D B801290000          <1>     mov eax, 2901h
   193 00001162 CD21                <1>     int 21h
   194 00001164 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   195 00001166 0F8402010000        <1>     je .exitBadDrv
   196                              <1> .trailingDotLp:
   197                              <1> ;Reverse along trailing dots!
   198 0000116C 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   199 00001170 7505                <1>     jne .noTrailingDots
   200 00001172 48FFCE              <1>     dec rsi
   201 00001175 EBF5                <1>     jmp short .trailingDotLp
   202                              <1> .noTrailingDots:
   203 00001177 8A05ACEEFFFF        <1>     mov al, byte [pathSep]  
   204 0000117D 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   205 0000117F 7525                <1>     jne .notPs
   206 00001181 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   207 00001184 AC                  <1>     lodsb   ;Get this char
   208 00001185 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   209 00001188 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   210 0000118A 7217                <1>     jb .delimfnd    ;Also a delimiter
   211 0000118C 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   212 0000118E 7413                <1>     je .delimfnd
   213 00001190 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   214 00001192 740F                <1>     je .delimfnd
   215 00001194 3C2E                <1>     cmp al, byte "."
   216 00001196 740B                <1>     je .delimfnd
   217 00001198 3C22                <1>     cmp al, byte '"'
   218 0000119A 7407                <1>     je .delimfnd
   219 0000119C E838260000          <1>     call isALdelimiter  ;Is this a delim char?
   220 000011A1 75B3                <1>     jne .plp            ;If not, we loop again
   221                              <1> .delimfnd:
   222 000011A3 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   223                              <1> .notPs:
   224                              <1> ;Now we have reached the end of the command, rsi points to the first char
   225                              <1> ; after the command, whether a delimiter or not.
   226 000011A6 4889F1              <1>     mov rcx, rsi
   227 000011A9 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   228 000011AC 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   229 000011AF 488D3D83F1FFFF      <1>     lea rdi, cmdPathSpec
   230 000011B6 F3A4                <1>     rep movsb
   231 000011B8 30C0                <1>     xor al, al
   232 000011BA AA                  <1>     stosb   ;Store a terminating null
   233 000011BB 4887DE              <1>     xchg rbx, rsi
   234                              <1> ;Now we build FCBs for the arguments!
   235 000011BE 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   236 000011C5 E893000000          <1>     call .skipAndCheckCR
   237 000011CA 745B                <1>     je .setupCmdVars
   238 000011CC C605D7EEFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   239 000011D3 4889F0              <1>     mov rax, rsi
   240 000011D6 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   241 000011D9 8805CCEEFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   242 000011DF 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   243 000011E3 B801290000          <1>     mov eax, 2901h
   244 000011E8 CD21                <1>     int 21h
   245 000011EA 8805BCEEFFFF        <1>     mov byte [arg1FCBret], al
   246                              <1> .skipArg:
   247 000011F0 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   248 000011F1 3C0D                <1>     cmp al, CR
   249 000011F3 7432                <1>     je .setupCmdVars
   250 000011F5 E8DF250000          <1>     call isALdelimiter
   251 000011FA 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   252 000011FC E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   253 00001201 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   254 00001203 C605A3EEFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   255 0000120A 4889F0              <1>     mov rax, rsi            
   256 0000120D 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   257 00001210 880598EEFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   258 00001216 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   259 0000121A B801290000          <1>     mov eax, 2901h
   260 0000121F CD21                <1>     int 21h
   261 00001221 880588EEFFFF        <1>     mov byte [arg2FCBret], al
   262                              <1> .setupCmdVars:
   263                              <1> ;Before returning, we copy the command name to cmdName 
   264 00001227 488D3D0BF1FFFF      <1>     lea rdi, cmdPathSpec
   265 0000122E E84F260000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   266 00001233 E877250000          <1>     call strlen ;Get the length of the final path componant
   267 00001238 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   268 0000123E 7726                <1>     ja .exitBad     ;Return error
   269 00001240 4889FE              <1>     mov rsi, rdi
   270 00001243 488D3D3EF1FFFF      <1>     lea rdi, cmdName
   271 0000124A FFC9                <1>     dec ecx ;Minus the terminating null
   272 0000124C 880F                <1>     mov byte [rdi], cl ;Store the length here
   273 0000124E 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   274                              <1> .cpCmdName:
   275 00001251 AC                  <1>     lodsb
   276 00001252 E862250000          <1>     call ucChar ;Uppercase the char
   277 00001257 AA                  <1>     stosb
   278 00001258 FFC9                <1>     dec ecx
   279 0000125A 75F5                <1>     jnz .cpCmdName
   280                              <1>     return
    13                              <2> %%_ret:
    14 0000125C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> .skipAndCheckCR:
   282                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   283 0000125D E869250000          <1>     call skipDelimiters ;Go to the next char in the input line
   284 00001262 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   285                              <1>     return
    13                              <2> %%_ret:
    14 00001265 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   286                              <1> .exitBad:
   287 00001266 C6051BF1FFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   288                              <1>     return
    13                              <2> %%_ret:
    14 0000126D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   289                              <1> .exitBadDrv:
   290 0000126E C60513F1FFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   291 00001275 E80E070000          <1>     call badDriveError
   292                              <1>     return
    13                              <2> %%_ret:
    14 0000127A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> 
   294                              <1> doCommandLine:
   295                              <1>     ;The following check accounts for the end of a piped command
   296 0000127B 803D06F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   297 00001282 0F8430010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   298 00001288 803DF9F0FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   299 0000128F 0F842C070000        <1>     je badCmdError
   300 00001295 803DECF0FFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   301                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000129C 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   302 0000129E 488D3594F0FFFF      <1>     lea rsi, cmdPathSpec
   303 000012A5 0FB71D8DF0FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   304 000012AC 80FF3A              <1>     cmp bh, ":"
   305 000012AF 7520                <1>     jne .noDriveSpecified
   306 000012B1 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   307 000012B3 E801250000          <1>     call ucChar     ;Uppercase al
   308 000012B8 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   309                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   310 000012BA 803DC7F0FFFF02      <1>     cmp byte [cmdName], 2
   311 000012C1 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   312 000012C3 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   313 000012C5 E8BB240000          <1>     call setDrive
   314                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012CA 74(7A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   315 000012CC E9B7060000          <1>     jmp badDriveError
   316                              <1> .noDriveSpecified:
   317                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   318 000012D1 488D1DDFEFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   319 000012D8 488D35A9F0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   320 000012DF B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   321 000012E4 BAFFFF0000          <1>     mov edx, 0FFFFh
   322 000012E9 B5FF                <1>     mov ch, -1
   323 000012EB CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   324 000012ED B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   325 000012F2 BAFFFF0000          <1>     mov edx, 0FFFFh
   326 000012F7 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   327 000012F9 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   328                              <1>             ;        al = 0  if the command should be executed as usual
   329 000012FB 84C0                <1>     test al, al
   330 000012FD 7444                <1>     jz .executeInternal
   331                              <1>     ;Here we execute externally and return to the prompt
   332                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   333 000012FF 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   334 00001306 488D357BF0FFFF      <1>     lea rsi, cmdName        
   335 0000130D B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   336 00001312 BAFFFF0000          <1>     mov edx, 0FFFFh
   337 00001317 B5FF                <1>     mov ch, -1
   338 00001319 CD2F                <1>     int 2Fh
   339 0000131B 803D66F0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   340                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001322 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001324 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   342                              <1>     ; is an external command that is in the CD or in the PATH.
   343                              <1>     ;Should not be used for this purpose but it is here...
   344 00001325 E843050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   345 0000132A 488D3557F0FFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   346 00001331 AC                  <1>     lodsb                   ;Get the name length
   347 00001332 0FB6C8              <1>     movzx ecx, al
   348 00001335 488D3DFDEFFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   349 0000133C F3A4                <1>     rep movsb   
   350 0000133E 31C0                <1>     xor eax, eax
   351 00001340 AA                  <1>     stosb   ;Store null terminator
   352 00001341 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   353                              <1> .executeInternal:
   354 00001343 E825050000          <1>     call pullCommandline    ;Now pull the tail down
   355 00001348 488D3DEAEFFFFF      <1>     lea rdi, cmdPathSpec
   356 0000134F E85B240000          <1>     call strlen ;Get the length of the input command
   357 00001354 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   358 00001356 380D2CF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   359 0000135C 0F85261A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   360                              <1> .executeInternal2:
   361                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   362 00001362 488D1DECF4FFFF      <1>     lea rbx, functionTable
   363                              <1> .nextEntry:
   364 00001369 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   365 0000136C 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   366 0000136F 0F84131A0000        <1>     je launchChild      ;If so, check externally now
   367 00001375 380D0DF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   368 0000137B 752F                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   369                              <1>     ;Here they have the same length so lets see if the name is the same
   370 0000137D 56                  <1>     push rsi
   371                              <1>     ;ecx has the length to compare
   372 0000137E 51                  <1>     push rcx
   373 0000137F 488D7301            <1>     lea rsi, qword [rbx + 1]
   374 00001383 488D3DFFEFFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   375 0000138A F3A6                <1>     rep cmpsb   ;Check the strings are equal
   376 0000138C 59                  <1>     pop rcx
   377 0000138D 5E                  <1>     pop rsi
   378 0000138E 751C                <1>     jne .gotoNextEntry
   379                              <1>     ;Here it was found both strings are equal
   380 00001390 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   381 00001395 480FB71F            <1>     movzx rbx, word [rdi]
   382 00001399 488D3D60ECFFFF      <1>     lea rdi, startLbl
   383 000013A0 4801FB              <1>     add rbx, rdi
   384 000013A3 C60563ECFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   385 000013AA FFE3                <1>     jmp rbx    ;Jump to this function and return a level up!
   386                              <1> .gotoNextEntry:
   387 000013AC 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   388 000013B3 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   389 000013B6 EBB1                <1>     jmp short .nextEntry
   390                              <1> 
   391                              <1> hardSynErr:
   392                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   393 000013B8 E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   394 000013BD E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   395                              <1> redirFailure:
   396 000013C2 488D1536FBFFFF      <1>     lea rdx, redirErrMsg
   397 000013C9 B913000000          <1>     mov ecx, redirErrMsgL
   398 000013CE EB0C                <1>     jmp short redirPipeFailureCommon
   399                              <1> pipeFailure:
   400 000013D0 488D1511FBFFFF      <1>     lea rdx, pipeErrMsg
   401 000013D7 B917000000          <1>     mov ecx, pipeErrMsgL
   402                              <1> redirPipeFailureCommon:
   403                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   404                              <1> ;This routine tries to close whatever handles are not -1 and delete
   405                              <1> ; pipe files if the pipe count is not 0.
   406                              <1> ;It resets all variables and jumps to reset the stack!
   407 000013DC B800400000          <1>     mov eax, 4000h  ;Write handle
   408 000013E1 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   409 000013E6 CD21                <1>     int 21h
   410                              <1> .noPrint:
   411 000013E8 0FB705B7ECFFFF      <1>     movzx eax, word [redirSTDIN]
   412 000013EF 0FB715AAECFFFF      <1>     movzx edx, word [pipeSTDIN]
   413 000013F6 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   414 000013F8 E8D1000000          <1>     call .closeAndReplace
   415 000013FD 0FB705A4ECFFFF      <1>     movzx eax, word [redirSTDOUT]
   416 00001404 0FB71597ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   417 0000140B FFC3                <1>     inc ebx         ;Select STDOUT for closing
   418 0000140D E8BC000000          <1>     call .closeAndReplace
   419 00001412 66C70589ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   420 0000141B 0FB71D84ECFFFF      <1>     movzx ebx, word [redirSTDIN]
   421 00001422 E896000000          <1>     call .closeHandle
   422                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   423 00001427 66C70576ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   424 00001430 0FB71D71ECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   425 00001437 E881000000          <1>     call .closeHandle
   426 0000143C 66C70563ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   427 00001445 0FB71D54ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   428 0000144C E86C000000          <1>     call .closeHandle
   429 00001451 66C70546ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   430 0000145A 0FB71D41ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   431 00001461 E857000000          <1>     call .closeHandle
   432 00001466 66C70533ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   433 0000146F C60529ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   434 00001476 488D15B7EFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   435 0000147D 803A00              <1>     cmp byte [rdx], 0
   436 00001480 7407                <1>     jz .checkOld
   437 00001482 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   438 00001487 CD21                <1>     int 21h
   439                              <1> .checkOld:
   440 00001489 488D15F3EFFFFF      <1>     lea rdx, qword [pipe2Filespec]
   441 00001490 803A00              <1>     cmp byte [rdx],0
   442 00001493 7407                <1>     jz .pipeNamesComplete
   443 00001495 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   444 0000149A CD21                <1>     int 21h
   445                              <1> .pipeNamesComplete:
   446 0000149C 31C0                <1>     xor eax, eax
   447                              <1>     ;Invalidate the pointers and the paths too
   448 0000149E 4889052DF0FFFF      <1>     mov qword [newPipe], rax
   449 000014A5 4889052EF0FFFF      <1>     mov qword [oldPipe], rax
   450 000014AC 890582EFFFFF        <1>     mov dword [pipe1Filespec], eax
   451 000014B2 8905CBEFFFFF        <1>     mov dword [pipe2Filespec], eax
   452                              <1> 
   453 000014B8 E9C2FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   454                              <1> .closeHandle:
   455 000014BD 81FBFFFFFFFF        <1>     cmp ebx, -1
   456                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014C3 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014C5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 000014C6 B8003E0000          <1>     mov eax, 3E00h
   458 000014CB CD21                <1>     int 21h
   459                              <1>     return
    13                              <2> %%_ret:
    14 000014CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> .closeAndReplace:
   461                              <1> ;Input: ax = one possible handle, dx = second possible handle
   462                              <1> ;       bx = handle to close and copy ax/dx into
   463                              <1> ;Output: Handle intervened on. bx preserved
   464 000014CE C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   465 000014D1 09D0                <1>     or eax, edx     ;Form packed
   466 000014D3 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   467                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014D8 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   468 000014DA E8DEFFFFFF          <1>     call .closeHandle
   469 000014DF 663DFFFF            <1>     cmp ax, -1      
   470 000014E3 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   471 000014E7 53                  <1>     push rbx
   472 000014E8 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   473 000014EB B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   474 000014F0 CD21                <1>     int 21h
   475 000014F2 5B                  <1>     pop rbx
   476                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014F3 73(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   477                              <1>     ;Else we now try to force con to open!
   478 000014F5 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   479 000014FA B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   480 000014FF 488D1546FAFFFF      <1>     lea rdx, conName
   481 00001506 CD21                <1>     int 21h
   482                              <1>     return
    13                              <2> %%_ret:
    14 00001508 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> advanceRedir:
   485                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   486                              <1> ;Close stdin redir then stdout redir. 
   487 00001509 F60594EBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   488 00001510 0F8585000000        <1>     jnz .redirIn
   489 00001516 F60582EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   490 0000151D 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   491 00001523 0FBF0576EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   492 0000152A 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   493 0000152F 0F84EB000000        <1>     je .pipeOut              
   494                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   495 00001535 0FB71D64EBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   496 0000153C 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   497 0000153E B800460000          <1>     mov eax, 4600h
   498 00001543 CD21                <1>     int 21h
   499 00001545 0F8285FEFFFF        <1>     jc pipeFailure
   500 0000154B B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   501 00001550 CD21                <1>     int 21h
   502 00001552 0F8278FEFFFF        <1>     jc pipeFailure
   503 00001558 488B157BEFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   504 0000155F B800410000          <1>     mov eax, 4100h  ;Delete the file!
   505 00001564 CD21                <1>     int 21h
   506 00001566 0F8264FEFFFF        <1>     jc pipeFailure
   507 0000156C C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   508 0000156F 66C70528EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   509                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   510                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   511                              <1>     ;Else exit!
   512 00001578 0FBF0523EBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   513 0000157F 3DFFFFFFFF          <1>     cmp eax, -1
   514 00001584 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   515 0000158A C6050EEBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   516 00001591 F6050DEBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   517 00001598 753D                <1>     jnz .redirOut               ;Go for it if so!
   518                              <1>     return
    13                              <2> %%_ret:
    14 0000159A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> .redirIn:
   520                              <1> ;Here we clean redirIn
   521 0000159B 0FB71D04EBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   522 000015A2 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   523 000015A4 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   524 000015A9 CD21                <1>     int 21h
   525 000015AB 0F8211FEFFFF        <1>     jc redirFailure
   526 000015B1 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   527 000015B6 CD21                <1>     int 21h
   528 000015B8 0F8204FEFFFF        <1>     jc redirFailure
   529 000015BE 66C705DFEAFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   530 000015C7 C605D6EAFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   531 000015CE F605CAEAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   532 000015D5 7549                <1>     jnz .pipeOut
   533                              <1> .redirOut:
   534 000015D7 F605C7EAFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   535                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015DE 74(9A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   536                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   537 000015E0 F605B8EAFFFFFF      <1>     test byte [pipeFlag], -1
   538 000015E7 7537                <1>     jnz short .pipeOut
   539 000015E9 0FB71DB8EAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   540 000015F0 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   541 000015F5 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   542 000015FA CD21                <1>     int 21h
   543 000015FC 0F82C0FDFFFF        <1>     jc redirFailure
   544 00001602 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   545 00001607 CD21                <1>     int 21h
   546 00001609 0F82B3FDFFFF        <1>     jc redirFailure
   547 0000160F 66C70590EAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   548 00001618 C60586EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   549                              <1>     return
    13                              <2> %%_ret:
    14 0000161F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   550                              <1> .pipeOut:
   551                              <1> ;Duplicate STDIN to save across pipe
   552 00001620 0FBF057BEAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   553 00001627 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   554                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000162C 74(1F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   555 0000162E B800450000          <1>     mov eax, 4500h
   556 00001633 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   557 00001635 CD21                <1>     int 21h
   558 00001637 0F8293FDFFFF        <1>     jc pipeFailure
   559 0000163D 6689055CEAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   560                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   561 00001644 B800460000          <1>     mov eax, 4600h
   562 00001649 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   563 0000164B FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   564 0000164D CD21                <1>     int 21h
   565 0000164F 0F827BFDFFFF        <1>     jc pipeFailure
   566                              <1> ;Now return the original stdout to stdout
   567 00001655 89D9                <1>     mov ecx, ebx
   568 00001657 0FB71D44EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   569 0000165E B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   570 00001663 CD21                <1>     int 21h
   571 00001665 0F8265FDFFFF        <1>     jc pipeFailure
   572                              <1> ;Now close the DUP'ed STDOUT
   573 0000166B B8003E0000          <1>     mov eax, 3E00h
   574 00001670 CD21                <1>     int 21h
   575 00001672 0F8258FDFFFF        <1>     jc pipeFailure
   576                              <1> ;Finally unwind STDIN to the beginning of the file
   577 00001678 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   578 0000167D 31DB                <1>     xor ebx, ebx    ;STDIN handle
   579 0000167F 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   580 00001681 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   581 00001683 CD21                <1>     int 21h
   582 00001685 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   583 0000168B 488B1540EEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   584 00001692 48891541EEFFFF      <1>     mov qword [oldPipe], rdx
   585 00001699 66C70500EAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   586                              <1>     return
    13                              <2> %%_ret:
    14 000016A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> 
   589                              <1> peelRedir:
   590                              <1> ;Checks and sets up redir as appropriate
   591                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   592                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   593                              <1> ;Output: ZF=NZ => No redir
   594                              <1> ;        ZF=ZY => Redir
   595                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   596                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   597 000016A3 51                  <1>     push rcx
   598 000016A4 57                  <1>     push rdi
   599 000016A5 3C3C                <1>     cmp al, "<"
   600 000016A7 740C                <1>     je .inputRedir
   601 000016A9 3C3E                <1>     cmp al, ">"
   602 000016AB 7427                <1>     je .outputRedir
   603 000016AD 3C7C                <1>     cmp al, "|"
   604 000016AF 7441                <1>     je .pipeSetup
   605 000016B1 F8                  <1>     clc
   606                              <1> .redirExit:
   607 000016B2 5F                  <1>     pop rdi
   608 000016B3 59                  <1>     pop rcx
   609                              <1>     return
    13                              <2> %%_ret:
    14 000016B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> .inputRedir:
   611 000016B5 C605E8E9FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   612 000016BC 488D3DD3ECFFFF      <1>     lea rdi, rdrInFilespec
   613                              <1> .redirCommon:
   614 000016C3 E803210000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   615 000016C8 E82F220000          <1>     call cpDelimPathToBufz
   616 000016CD 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   617 000016D0 30C0                <1>     xor al, al  ;Clear the ZF flag
   618 000016D2 EBDE                <1>     jmp short .redirExit
   619                              <1> .outputRedir:
   620 000016D4 C605CAE9FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   621 000016DB 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   622 000016DE 7509                <1>     jne .notDouble
   623 000016E0 FE05BFE9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   624 000016E6 48FFC6              <1>     inc rsi ;Go past it too
   625                              <1> .notDouble:
   626 000016E9 488D3DF5ECFFFF      <1>     lea rdi, rdrOutFilespec
   627 000016F0 EBD1                <1>     jmp short .redirCommon
   628                              <1> .pipeSetup:
   629 000016F2 56                  <1>     push rsi    ;Save rsi pointing to char past |
   630 000016F3 E8D3200000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   631 000016F8 803E7C              <1>     cmp byte [rsi], "|" 
   632 000016FB 7403                <1>     je .badFnd
   633 000016FD 803E0D              <1>     cmp byte [rsi], CR
   634                              <1> .badFnd:
   635 00001700 5E                  <1>     pop rsi
   636 00001701 F9                  <1>     stc
   637 00001702 EBAE                <1>     jmp short .redirExit
   638                              <1> 
   639                              <1> setupRedirandPipes:
   640                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   641                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   642 00001704 0F8484000000        <1>     jz .redirIn
   643 0000170A 488D1523EDFFFF      <1>     lea rdx, pipe1Filespec
   644 00001711 803A00              <1>     cmp byte [rdx], 0
   645 00001714 7410                <1>     jz .pathFound
   646 00001716 488D1566EDFFFF      <1>     lea rdx, pipe2Filespec
   647 0000171D 803A00              <1>     cmp byte [rdx], 0
   648 00001720 0F85AAFCFFFF        <1>     jnz pipeFailure
   649                              <1> .pathFound:
   650 00001726 488915A5EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   651 0000172D B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   652 00001732 BB01000000          <1>     mov ebx, 1
   653 00001737 CD21                <1>     int 21h
   654 00001739 0F8291FCFFFF        <1>     jc pipeFailure
   655 0000173F 6689055CE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   656 00001746 E846200000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   657 0000174B 0441                <1>     add al, "A"
   658 0000174D BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   659 00001752 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   660 00001754 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   661 00001756 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   662 00001758 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   663 0000175D CD21                <1>     int 21h
   664 0000175F 0F826BFCFFFF        <1>     jc pipeFailure
   665                              <1>     ;AX has the handle for this file now, this will become STDOUT
   666                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   667 00001765 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   668 00001768 B901000000          <1>     mov ecx, 1
   669 0000176D B800460000          <1>     mov eax, 4600h
   670 00001772 CD21                <1>     int 21h
   671 00001774 0F8256FCFFFF        <1>     jc pipeFailure
   672 0000177A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   673 0000177F CD21                <1>     int 21h
   674 00001781 0F8249FCFFFF        <1>     jc pipeFailure
   675 00001787 C60511E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   676                              <1> .redirIn:
   677                              <1> ;Now check if any other redir needs to be setup
   678                              <1> ;Checks and sets up redir as appropriate.
   679                              <1>     ;Setup the redir here for STDIN
   680 0000178E F6050FE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   681 00001795 7449                <1>     jz .redirOut
   682 00001797 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   683 00001799 B800450000          <1>     mov eax, 4500h
   684 0000179E CD21                <1>     int 21h
   685 000017A0 0F821CFCFFFF        <1>     jc redirFailure
   686 000017A6 668905F9E8FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   687 000017AD 488D15E2EBFFFF      <1>     lea rdx, rdrInFilespec
   688 000017B4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   689 000017B9 CD21                <1>     int 21h
   690 000017BB 0F8201FCFFFF        <1>     jc redirFailure
   691 000017C1 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   692 000017C3 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   693 000017C6 B800460000          <1>     mov eax, 4600h
   694 000017CB CD21                <1>     int 21h
   695 000017CD 0F82EFFBFFFF        <1>     jc redirFailure
   696 000017D3 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   697 000017D8 CD21                <1>     int 21h
   698 000017DA 0F82E2FBFFFF        <1>     jc redirFailure
   699                              <1> .redirOut:
   700 000017E0 F605BEE8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   701                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000017E7 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000017E9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   702 000017EA 803DB1E8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   703                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017F1 75(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   704                              <1>     ;Else setup the redir here for STDOUT
   705 000017F3 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   706 000017F8 B800450000          <1>     mov eax, 4500h
   707 000017FD CD21                <1>     int 21h
   708 000017FF 0F82BDFBFFFF        <1>     jc redirFailure
   709 00001805 6689059CE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   710 0000180C 488D15D2EBFFFF      <1>     lea rdx, rdrOutFilespec
   711 00001813 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   712 00001818 CD21                <1>     int 21h
   713 0000181A 730F                <1>     jnc .fileExists
   714 0000181C B8003C0000          <1>     mov eax, 3C00h
   715 00001821 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   716 00001823 CD21                <1>     int 21h
   717 00001825 0F8297FBFFFF        <1>     jc redirFailure
   718                              <1> .fileExists:
   719 0000182B B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   720 00001830 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   721 00001833 B800460000          <1>     mov eax, 4600h  ;DUP2
   722 00001838 CD21                <1>     int 21h
   723 0000183A 0F8282FBFFFF        <1>     jc redirFailure
   724 00001840 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   725 00001845 CD21                <1>     int 21h
   726 00001847 0F8275FBFFFF        <1>     jc redirFailure
   727 0000184D 803D51E8FFFF01      <1>     cmp byte [redirOut], 1
   728                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001854 74(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   729                              <1>     ;Here we move the file pointer to the end of the file
   730 00001856 31D2                <1>     xor edx, edx    ;Low order 32 bits
   731 00001858 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   732 0000185A BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   733 0000185F B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   734 00001864 CD21                <1>     int 21h
   735 00001866 0F8256FBFFFF        <1>     jc redirFailure
   736                              <1>     return
    13                              <2> %%_ret:
    14 0000186C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> 
   739                              <1> pullCommandline:
   740                              <1> ;This command pulls the command tail down, removing the whole launch command
   741 0000186D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   742                              <1> ;Skip leading separators
   743                              <1> .pctSkipLeading:
   744 00001874 AC                  <1>     lodsb   ;Get first char
   745 00001875 E85F1F0000          <1>     call isALdelimiter
   746 0000187A 74F8                <1>     je .pctSkipLeading
   747 0000187C 48FFCE              <1>     dec rsi
   748                              <1>     ;rsi points to the start of the command
   749 0000187F 488D3DB3EAFFFF      <1>     lea rdi, cmdPathSpec
   750 00001886 E8241F0000          <1>     call strlen ;Get the length of the command
   751 0000188B FFC9                <1>     dec ecx ;Minus the terminating null
   752 0000188D 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   753 00001890 280D15E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   754 00001896 280D12E8FFFF        <1>     sub byte [arg2Off], cl
   755 0000189C 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   756 0000189E 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   757                              <1> .pctPullChars:
   758 000018A5 AC                  <1>     lodsb
   759 000018A6 AA                  <1>     stosb
   760 000018A7 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   761 000018A9 7404                <1>     je .pctExit
   762 000018AB FFC1                <1>     inc ecx     ;Increment count
   763 000018AD EBF6                <1>     jmp short .pctPullChars 
   764                              <1> .pctExit:
   765 000018AF 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   766                              <1>     return
    13                              <2> %%_ret:
    14 000018B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   767                              <1> 
   768                              <1> batNextLine:
   769                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   770 000018B7 488D1513000000      <1>     lea rdx, .l1
   771 000018BE B800090000          <1>     mov eax, 0900h
   772 000018C3 CD21                <1>     int 21h
   773 000018C5 C605E5E7FFFF00      <1>     mov byte [batFlag], 0
   774 000018CC E9AEF6FFFF          <1>     jmp commandMain
   775 000018D1 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   775 000018DA 652E2E2E2077616974- <1>
   775 000018E3 2C20776861743F2048- <1>
   775 000018EC 6F772064696420796F- <1>
   775 000018F5 7520646F2074686174- <1>
   775 000018FE 3F0D0A24            <1>
   776                              <1> 
   777                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   778                              <1> ;Input: rsi points to the count byte of a command line
   779 00001902 4150                <1>     push r8
   780 00001904 4151                <1>     push r9
   781 00001906 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   782 00001908 CD21                <1>     int 21h
   783 0000190A 52                  <1>     push rdx    ;Save on the stack
   784 0000190B 488D1DEEE5FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   785 00001912 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   786 00001914 CD21                <1>     int 21h
   787 00001916 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   788 00001919 4989D9              <1>     mov r9, rbx
   789 0000191C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   790 00001923 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   791 00001928 F348A5              <1>     rep movsq   ;Copy command line over
   792                              <1>     ;call doCommandLine
   793 0000192B 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   794 0000192C B450                <1>     mov ah, 50h ;Set Current PSP
   795 0000192E CD21                <1>     int 21h
   796 00001930 4159                <1>     pop r9
   797 00001932 4158                <1>     pop r8
   798 00001934 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001936 488D15B5F0FFFF      <1>     lea rdx, noSpace
    10 0000193D 488D0DB4F3FFFF      <1>     lea rcx, pipeErr
    11 00001944 F60554E7FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 0000194B 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 0000194D 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001951 E866000000          <1>     call badCmn     ;Print the string
    15 00001956 E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 0000195B 488D156FF3FFFF      <1>     lea rdx, syntaxErr
    18 00001962 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 00001964 488D15A1F0FFFF      <1>     lea rdx, noEnvSpace
    21 0000196B EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 0000196D 488D1509F3FFFF      <1>     lea rdx, accDenMsg
    24 00001974 EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 00001976 488D15C0F0FFFF      <1>     lea rdx, noSelfCopy
    27 0000197D EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 0000197F 488D1575F1FFFF      <1>     lea rdx, badParm
    30 00001986 EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001988 488D152FF1FFFF      <1>     lea rdx, badDrv
    33 0000198F EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001991 488D15F2F3FFFF      <1>     lea rdx, badArgs
    36 00001998 EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 0000199A 488D15CDF3FFFF      <1>     lea rdx, badSpec
    39 000019A1 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 000019A3 488D1520F0FFFF      <1>     lea rdx, dupName
    43 000019AA EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 000019AC 488D152EF0FFFF      <1>     lea rdx, fnfMsg
    46 000019B3 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 000019B5 488D1540F2FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 000019BC E9C11B0000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 000019C1 488D15E7EFFFFF      <1>     lea rdx, badCmd
    53 000019C8 EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 000019CA C60515ECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 000019D1 C6050FECFFFF00      <1>     mov byte [dirLineCtr], 0
    58 000019D8 C60509ECFFFF00      <1>     mov byte [dirFileCtr], 0
    59 000019DF C60504ECFFFF00      <1>     mov byte [dirSrchDir], 0
    60 000019E6 66C705F3EAFFFF0000  <1>     mov word [searchSpec], 0
    61 000019EF 488D3D76ECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 000019F6 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 000019F9 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001A02 3F                  <1>
    64 00001A03 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001A07 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001A0E 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001A15 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001A18 E8AE1D0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001A1D AC                  <1>     lodsb   ;Get this char
    72 00001A1E 3C0D                <1>     cmp al, CR
    73 00001A20 744D                <1>     je .scanDone
    74 00001A22 3A0502E6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001A28 7524                <1>     jne .notSwitch
    76 00001A2A AC                  <1>     lodsb   ;Get the next char
    77 00001A2B E8891D0000          <1>     call ucChar
    78 00001A30 3C57                <1>     cmp al, "W"
    79 00001A32 7509                <1>     jne .notWide
    80 00001A34 800DABEBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001A3B EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001A3D 3C50                <1>     cmp al, "P"
    84 00001A3F 0F853AFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001A45 800D9AEBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001A4C EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001A4E F60591EBFFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001A55 0F8524FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001A5B 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001A5E E8F41E0000          <1>     call copyArgumentToSearchSpec   
    93 00001A63 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001A66 800D79EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001A6D EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001A6F F60570EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001A76 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001A78 488D3563EAFFFF      <1>     lea rsi, searchSpec
   101 00001A7F 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001A83 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001A85 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001A8A 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001A8E B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001A93 CD21                <1>     int 21h
   108 00001A95 3CFF                <1>     cmp al, -1
   109 00001A97 0F84EBFEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001A9D 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001AA2 84C0                <1>     test al, al
   113 00001AA4 740A                <1>     jz .currentDrv
   114 00001AA6 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001AA8 88053BEBFFFF        <1>     mov byte [dirDrv], al
   116 00001AAE EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001AB0 E8DC1C0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001AB5 88052EEBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001ABB 488D3520EAFFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001AC2 488D3D21EBFFFF      <1>     lea rdi, dirSrchDir
   124 00001AC9 0FB60519EBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001AD0 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001AD2 0441                <1>     add al, "A" ;Turn into a letter
   127 00001AD4 B43A                <1>     mov ah, ":"
   128 00001AD6 66AB                <1>     stosw   ;Store X: into the search path
   129 00001AD8 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001ADD CD2F                <1>     int 2fh
   131 00001ADF 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001AE1 0F84A1FEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001AE7 8A053CE5FFFF        <1>     mov al, byte [pathSep]
   135 00001AED 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001AEF 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001AF1 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001AF2 FEC2                <1>     inc dl  ;Increment by 1
   139 00001AF4 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001AF7 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001AFC CD21                <1>     int 21h
   142 00001AFE 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001B01 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001B03 3807                <1>     cmp byte [rdi], al
   149 00001B05 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001B07 48FFC7              <1>     inc rdi
   151 00001B0A EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001B0C 8A0517E5FFFF        <1>     mov al, byte [pathSep]
   154 00001B12 3806                <1>     cmp byte [rsi], al
   155 00001B14 7412                <1>     je .copyPathLoop
   156 00001B16 B43A                <1>     mov ah, ":"
   157 00001B18 86C4                <1>     xchg al, ah
   158 00001B1A 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001B1E 7408                <1>     je .copyPathLoop
   160 00001B20 88E0                <1>     mov al, ah
   161 00001B22 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001B25 7401                <1>     je .copyPathLoop
   163 00001B27 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001B28 AC                  <1>     lodsb
   166 00001B29 3A05FAE4FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001B2F 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001B31 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001B33 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001B35 48FFC6              <1>     inc rsi
   172 00001B38 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001B3A 3C2E                <1>     cmp al, "."
   175 00001B3C 7407                <1>     je .dots
   176                              <1> .store:
   177 00001B3E AA                  <1>     stosb
   178 00001B3F 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001B41 7472                <1>     jz .exitPathCopy
   180 00001B43 EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001B45 8A25DEE4FFFF        <1>     mov ah, byte [pathSep]
   188 00001B4B 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001B4E 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001B50 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001B52 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001B55 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001B57 3A25CCE4FFFF        <1>     cmp ah, byte [pathSep]
   195 00001B5D 7406                <1>     je .skipThisPathsep
   196 00001B5F 84E4                <1>     test ah, ah
   197 00001B61 74C5                <1>     jz .copyPathLoop
   198 00001B63 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001B65 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001B68 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001B6A 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001B6D 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001B6F 3A25B4E4FFFF        <1>     cmp ah, byte [pathSep]
   208 00001B75 7408                <1>     je .tdOk
   209 00001B77 84E4                <1>     test ah, ah
   210 00001B79 0F8500FEFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001B7F 8A05A4E4FFFF        <1>     mov al, byte byte [pathSep]
   213 00001B85 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001B89 0F84F0FDFFFF        <1>     je badParamError
   215 00001B8F 4881EF02000000      <1>     sub rdi, 2
   216 00001B96 31C9                <1>     xor ecx, ecx
   217 00001B98 FFC9                <1>     dec ecx
   218 00001B9A FD                  <1>     std
   219 00001B9B F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001B9D FC                  <1>     cld
   221 00001B9E 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001BA5 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001BA7 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001BAD 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001BB0 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001BB5 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001BBC 8A0567E4FFFF        <1>     mov al, byte [pathSep]
   230 00001BC2 B43A                <1>     mov ah, ":"
   231 00001BC4 86C4                <1>     xchg al, ah
   232 00001BC6 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001BCA 7409                <1>     je .skipOverwrite
   234 00001BCC 88E0                <1>     mov al, ah
   235 00001BCE 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001BD0 7503                <1>     jne .skipOverwrite
   237 00001BD2 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001BD5 488D350EEAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001BDC 4889F7              <1>     mov rdi, rsi
   241 00001BDF B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001BE4 CD2F                <1>     int 2fh
   243 00001BE6 E8791D0000          <1>     call scanForWildcards
   244 00001BEB 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001BED 4889F2              <1>     mov rdx, rsi
   246 00001BF0 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001BF4 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001BF6 E8301E0000          <1>     call setDTA ;Set the DTA
   250 00001BFB B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001C00 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001C05 CD21                <1>     int 21h
   253 00001C07 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001C09 F6056DE5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001C10 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001C12 31C0                <1>     xor eax, eax
   259 00001C14 31C9                <1>     xor ecx, ecx
   260 00001C16 FFC9                <1>     dec ecx
   261 00001C18 F2AE                <1>     repne scasb
   262 00001C1A 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001C1D EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001C1F 31C0                <1>     xor eax, eax
   268 00001C21 31C9                <1>     xor ecx, ecx
   269 00001C23 FFC9                <1>     dec ecx
   270 00001C25 F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001C27 8A05FCE3FFFF        <1>     mov al, byte [pathSep]
   273 00001C2D 31C9                <1>     xor ecx, ecx
   274 00001C2F FFC9                <1>     dec ecx
   275 00001C31 FD                  <1>     std ;Search backwards
   276 00001C32 F2AE                <1>     repne scasb
   277 00001C34 FC                  <1>     cld ;Search forwards again
   278 00001C35 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001C38 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001C3C 7503                <1>     jne .wcsp1
   281 00001C3E 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001C41 57                  <1>     push rdi
   285 00001C42 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001C44 7503                <1>     jne .wcsp2
   287 00001C46 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001C49 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001C4C 488D3D19EAFFFF      <1>     lea rdi, dirSrchFCB
   291 00001C53 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001C58 CD21                <1>     int 21h
   293 00001C5A 5F                  <1>     pop rdi
   294 00001C5B 31C0                <1>     xor eax, eax
   295 00001C5D 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001C5F 0FB60583E9FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001C66 E8350E0000          <1>     call volume.dirEP
   299 00001C6B 488D15F2EFFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001C72 B409                <1>     mov ah, 09h
   301 00001C74 CD21                <1>     int 21h
   302 00001C76 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001C79 488D156AE9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001C80 B409                <1>     mov ah, 09h
   305 00001C82 CD21                <1>     int 21h
   306 00001C84 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001C87 488D15C7ECFFFF      <1>     lea rdx, crlf2
   308 00001C8E B409                <1>     mov ah, 09h
   309 00001C90 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001C92 8A0591E3FFFF        <1>     mov al, byte [pathSep]
   313 00001C98 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001C9B 7403                <1>     je .root
   315 00001C9D 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001CA0 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001CA3 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001CA4 488D35C2E9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001CAB E8F61B0000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001CB0 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001CB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001CB6 E8701D0000          <1>     call setDTA
   326 00001CBB B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001CC0 488D1523E9FFFF      <1>     lea rdx, dirSrchDir
   328 00001CC7 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001CCC CD21                <1>     int 21h
   330 00001CCE 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001CD0 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001CD5 B44F                <1>     mov ah, 4Fh
   334 00001CD7 CD21                <1>     int 21h
   335 00001CD9 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001CDB F60504E9FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001CE2 740B                <1>     jz .dirNoEndNewLine
   339 00001CE4 488D1567ECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001CEB B409                <1>     mov ah, 09h
   341 00001CED CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001CEF 488D1520F2FFFF      <1>     lea rdx, fourSpc
   345 00001CF6 B409                <1>     mov ah, 09h
   346 00001CF8 CD21                <1>     int 21h
   347 00001CFA B409                <1>     mov ah, 09h ;Print four Spaces twice
   348 00001CFC CD21                <1>     int 21h
   349 00001CFE 0FB605E3E8FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   350 00001D05 E86E1C0000          <1>     call printDecimalWord
   351 00001D0A 488D158CEDFFFF      <1>     lea rdx, dirOk
   352 00001D11 B409                <1>     mov ah, 09h
   353 00001D13 CD21                <1>     int 21h
   354 00001D15 488D15FFF1FFFF      <1>     lea rdx, threeSpc
   355 00001D1C B409                <1>     mov ah, 09h
   356 00001D1E CD21                <1>     int 21h
   357 00001D20 B800360000          <1>     mov eax, 3600h ;Get disk info
   358 00001D25 8A15BEE8FFFF        <1>     mov dl, byte [dirDrv]
   359 00001D2B FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   360 00001D2D CD21                <1>     int 21h ;Get disk free space info
   361 00001D2F 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   362 00001D32 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   363 00001D35 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   364 00001D37 F7E1                <1>     mul ecx ;Get bytes per cluster
   365 00001D39 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   366                              <1>     ;rax now has the number of free bytes on the disk
   367 00001D3C E8371C0000          <1>     call printDecimalWord
   368 00001D41 488D155FEDFFFF      <1>     lea rdx, bytesOk
   369 00001D48 B409                <1>     mov ah, 09h
   370 00001D4A CD21                <1>     int 21h
   371                              <1>     return
    13                              <2> %%_ret:
    14 00001D4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> .dirPrintFileData:
   374                              <1> ;Use cmdFcb to build the file name with space
   375                              <1> ;Start by print the name (same for both cases)
   376                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   377 00001D4D F60529E4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   378                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D54 75(4C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   379 00001D56 488D3529E4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   380 00001D5D 488D3DF4E3FFFF      <1>     lea rdi, cmdFcb
   381 00001D64 E8CF1A0000          <1>     call asciiFilenameToFCB
   382 00001D69 488D15E8E3FFFF      <1>     lea rdx, cmdFcb
   383 00001D70 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   384 00001D75 BB01000000          <1>     mov ebx, 1  ;STDOUT
   385 00001D7A B440                <1>     mov ah, 40h ;Write handle
   386 00001D7C CD21                <1>     int 21h
   387 00001D7E 52                  <1>     push rdx
   388 00001D7F B220                <1>     mov dl, " "
   389 00001D81 B402                <1>     mov ah, 02h ;Print char
   390 00001D83 CD21                <1>     int 21h
   391 00001D85 5A                  <1>     pop rdx
   392 00001D86 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   393 00001D8D B903000000          <1>     mov ecx, 3  ;Print three chars
   394 00001D92 BB01000000          <1>     mov ebx, 1  ;STDOUT
   395 00001D97 B440                <1>     mov ah, 40h ;Write handle
   396 00001D99 CD21                <1>     int 21h
   397 00001D9B F60544E8FFFF01      <1>     test byte [dirFlags], dirWideType
   398 00001DA2 0F85A8000000        <1>     jnz .widePrint
   399                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   400                              <1>     ;Now check if a DIR
   401 00001DA8 F605CEE3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   402 00001DAF 7418                <1>     jz .dirPrintNotDir
   403 00001DB1 488D15FDECFFFF      <1>     lea rdx, dirLbl
   404 00001DB8 B409                <1>     mov ah, 09h
   405 00001DBA CD21                <1>     int 21h
   406 00001DBC 488D1558F1FFFF      <1>     lea rdx, threeSpc
   407 00001DC3 B409                <1>     mov ah, 09h
   408 00001DC5 CD21                <1>     int 21h
   409 00001DC7 EB4F                <1>     jmp short .dirPrintFileDT
   410                              <1> .dirPrintNotDir:
   411                              <1> ;Here we print the file size
   412 00001DC9 B220                <1>     mov dl, " "
   413 00001DCB B402                <1>     mov ah, 02h
   414 00001DCD CD21                <1>     int 21h
   415 00001DCF 8B05ADE3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   416 00001DD5 E80F1C0000          <1>     call getDecimalWord
   417 00001DDA 4889CB              <1>     mov rbx, rcx
   418 00001DDD 51                  <1>     push rcx
   419 00001DDE 480FCB              <1>     bswap rbx
   420 00001DE1 B908000000          <1>     mov ecx, 8
   421                              <1> .dirPrintFileSizePrep:
   422 00001DE6 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   423 00001DE8 7514                <1>     jne .dirPrintFileSize
   424 00001DEA B402                <1>     mov ah, 02h
   425 00001DEC B220                <1>     mov dl, " "
   426 00001DEE CD21                <1>     int 21h
   427 00001DF0 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   428 00001DF4 FFC9                <1>     dec ecx
   429 00001DF6 81F901000000        <1>     cmp ecx, 1
   430 00001DFC 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   431                              <1> .dirPrintFileSize:
   432 00001DFE 5B                  <1>     pop rbx
   433                              <1> .dirPrintFileSizeLoop:
   434 00001DFF 88DA                <1>     mov dl, bl
   435 00001E01 B402                <1>     mov ah, 02h
   436 00001E03 CD21                <1>     int 21h
   437 00001E05 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   438 00001E09 FFC9                <1>     dec ecx
   439 00001E0B 75F2                <1>     jnz .dirPrintFileSizeLoop
   440 00001E0D 488D150BF1FFFF      <1>     lea rdx, twoSpc
   441 00001E14 B409                <1>     mov ah, 09h
   442 00001E16 CD21                <1>     int 21h
   443                              <1> .dirPrintFileDT:
   444 00001E18 B220                <1>     mov dl, " "
   445 00001E1A B402                <1>     mov ah, 02h
   446 00001E1C CD21                <1>     int 21h
   447 00001E1E 0FB7055BE3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   448 00001E25 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   449 00001E27 E806150000          <1>     call printDate
   450 00001E2C 488D15ECF0FFFF      <1>     lea rdx, twoSpc
   451 00001E33 B409                <1>     mov ah, 09h
   452 00001E35 CD21                <1>     int 21h
   453 00001E37 0FB70540E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   454 00001E3E E811160000          <1>     call printTime
   455 00001E43 488D1508EBFFFF      <1>     lea rdx, crlf
   456 00001E4A B409                <1>     mov ah, 09h
   457 00001E4C CD21                <1>     int 21h
   458 00001E4E EB0B                <1>     jmp short .dirPrintNameExit
   459                              <1> .widePrint:
   460                              <1> ;If /W, print name space ext space space space space
   461 00001E50 488D15BFF0FFFF      <1>     lea rdx, fourSpc
   462 00001E57 B409                <1>     mov ah, 09h ;Print string
   463 00001E59 CD21                <1>     int 21h
   464                              <1> .dirPrintNameExit:
   465 00001E5B FE0587E7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   466 00001E61 FE0580E7FFFF        <1>     inc byte [dirLineCtr]
   467 00001E67 803D79E7FFFF17      <1>     cmp byte [dirLineCtr], 23
   468                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E6E 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E70 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   469 00001E71 488D1564ECFFFF      <1>     lea rdx, pauseMes
   470 00001E78 B409                <1>     mov ah, 09h
   471 00001E7A CD21                <1>     int 21h
   472 00001E7C B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   473 00001E7E CD21                <1>     int 21h
   474 00001E80 C60560E7FFFF00      <1>     mov byte [dirLineCtr], 0
   475 00001E87 488D15C4EAFFFF      <1>     lea rdx, crlf   ;Force new line
   476 00001E8E B409                <1>     mov ah, 09h
   477 00001E90 CD21                <1>     int 21h
   478                              <1>     return
    13                              <2> %%_ret:
    14 00001E92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   479                              <1> 
   480                              <1> chdir:
   481 00001E93 F60510E2FFFFFF      <1>     test byte [arg1Flg], -1
   482 00001E9A 754D                <1>     jnz .changeDir
   483                              <1>     ;Print CWD
   484                              <1> .printCWD:
   485 00001E9C E856170000          <1>     call putCWDInPrompt ;Exactly the same procedure
   486 00001EA1 E8D5160000          <1>     call printCRLF
   487                              <1>     return
    13                              <2> %%_ret:
    14 00001EA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   488                              <1> .printDiskCWD:
   489                              <1> ;Print CWD for a specified drive
   490 00001EA7 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   491 00001EAB 88D0                <1>     mov al, dl
   492 00001EAD 0440                <1>     add al, "@" ;Get the UC letter
   493 00001EAF B43A                <1>     mov ah, ":"
   494 00001EB1 488D3D2AE6FFFF      <1>     lea rdi, searchSpec
   495 00001EB8 66AB                <1>     stosw   ;Store X:, rdi+=2
   496 00001EBA 8A0569E1FFFF        <1>     mov al, byte [pathSep]
   497 00001EC0 AA                  <1>     stosb   ;Store pathSep, inc rdi
   498 00001EC1 B447                <1>     mov ah, 47h ;Get Current Working Directory
   499 00001EC3 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   500 00001EC6 CD21                <1>     int 21h
   501 00001EC8 E8E2180000          <1>     call strlen
   502 00001ECD 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   503 00001ED3 B440                <1>     mov ah, 40h ;Write to handle
   504 00001ED5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   505 00001EDA 488D1501E6FFFF      <1>     lea rdx, searchSpec
   506 00001EE1 CD21                <1>     int 21h
   507 00001EE3 E893160000          <1>     call printCRLF
   508                              <1>     return
    13                              <2> %%_ret:
    14 00001EE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> .changeDir:
   510 00001EE9 8A05BDE1FFFF        <1>     mov al, byte [arg1FCBret]
   511 00001EEF 3CFF                <1>     cmp al, -1 
   512 00001EF1 0F8491FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   513 00001EF7 E8431A0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   514 00001EFC 488D15DFE5FFFF      <1>     lea rdx, searchSpec
   515 00001F03 B43B                <1>     mov ah, 3Bh ;CHDIR
   516 00001F05 CD21                <1>     int 21h
   517 00001F07 0F82A8FAFFFF        <1>     jc badDirError
   518                              <1>     return
    13                              <2> %%_ret:
    14 00001F0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> mkdir:
   521 00001F0E F60595E1FFFFFF      <1>     test byte [arg1Flg], -1
   522 00001F15 0F8476FAFFFF        <1>     jz badArgError
   523 00001F1B F6058BE1FFFFFF      <1>     test byte [arg2Flg], -1
   524 00001F22 0F8569FAFFFF        <1>     jnz badArgError
   525                              <1>     ;We have exactly one argument
   526 00001F28 8A057EE1FFFF        <1>     mov al, byte [arg1FCBret]
   527 00001F2E 3CFF                <1>     cmp al, -1 
   528 00001F30 0F8452FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   529 00001F36 E8041A0000          <1>     call buildCommandPath
   530 00001F3B 488D15A0E5FFFF      <1>     lea rdx, searchSpec
   531 00001F42 B800390000          <1>     mov eax, 3900h  ;MKDIR
   532 00001F47 CD21                <1>     int 21h
   533                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F49 73(0D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   534                              <1> .badMake:   ;Else, bad make
   535 00001F4B 488D15BEECFFFF      <1>     lea rdx, badMD
   536 00001F52 E92B160000          <1>     jmp printString
   537                              <1> 
   538                              <1> rmdir:
   539 00001F57 F6054CE1FFFFFF      <1>     test byte [arg1Flg], -1
   540 00001F5E 0F842DFAFFFF        <1>     jz badArgError
   541 00001F64 F60542E1FFFFFF      <1>     test byte [arg2Flg], -1
   542 00001F6B 0F8520FAFFFF        <1>     jnz badArgError
   543                              <1>     ;We have exactly one argument
   544 00001F71 8A0535E1FFFF        <1>     mov al, byte [arg1FCBret]
   545 00001F77 3CFF                <1>     cmp al, -1 
   546 00001F79 0F8409FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   547 00001F7F E8BB190000          <1>     call buildCommandPath
   548 00001F84 488D1557E5FFFF      <1>     lea rdx, searchSpec
   549 00001F8B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   550 00001F90 CD21                <1>     int 21h
   551                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F92 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F94 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   552                              <1> .badRemove:   ;Else, bad make
   553 00001F95 488D1591ECFFFF      <1>     lea rdx, badRD
   554 00001F9C E9E1150000          <1>     jmp printString
   555                              <1> 
   556                              <1> copy:
   557 00001FA1 F60502E1FFFFFF      <1>     test byte [arg1Flg], -1
   558 00001FA8 0F84E3F9FFFF        <1>     jz badArgError
   559 00001FAE F605F8E0FFFFFF      <1>     test byte [arg2Flg], -1
   560 00001FB5 0F84D6F9FFFF        <1>     jz badArgError
   561 00001FBB 0FB605E9E0FFFF      <1>     movzx eax, byte [arg1Off]
   562 00001FC2 4C8B0546E0FFFF      <1>     mov r8, [pspPtr]
   563 00001FC9 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   564 00001FD0 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   565 00001FD3 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   566 00001FD6 488D3DCFE6FFFF      <1>     lea rdi, srcSpec
   567 00001FDD E81A190000          <1>     call cpDelimPathToBufz    
   568 00001FE2 0FB605C5E0FFFF      <1>     movzx eax, byte [arg2Off]
   569 00001FE9 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   570 00001FEC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   571 00001FEF 488D3D38E7FFFF      <1>     lea rdi, destSpec
   572 00001FF6 E801190000          <1>     call cpDelimPathToBufz   
   573                              <1> ;Before we open, we check if the two filenames are equal
   574                              <1> ; If so, crap out.
   575 00001FFB 488D35AAE6FFFF      <1>     lea rsi, srcSpec
   576 00002002 488D3D25E7FFFF      <1>     lea rdi, destSpec
   577 00002009 B81E120000          <1>     mov eax, 121Eh
   578 0000200E CD2F                <1>     int 2Fh
   579 00002010 0F84D3000000        <1>     jz .sameFilename
   580                              <1>     ;Open source with read permission
   581                              <1>     ;Open destination with write permission
   582 00002016 488D158FE6FFFF      <1>     lea rdx, srcSpec
   583 0000201D B8003D0000          <1>     mov eax, 3D00h  ;Read open
   584 00002022 CD21                <1>     int 21h
   585 00002024 0F8255F9FFFF        <1>     jc badParamError
   586 0000202A 6689059AE7FFFF      <1>     mov word [sourceHdl], ax
   587                              <1> 
   588 00002031 0FB7D8              <1>     movzx ebx, ax   ;For bx
   589 00002034 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   590 00002039 CD21                <1>     int 21h
   591 0000203B 6689158DE7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   592                              <1> 
   593 00002042 488D15E5E6FFFF      <1>     lea rdx, destSpec
   594 00002049 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   595 0000204E 31C9                <1>     xor ecx, ecx    ;No file attributes
   596 00002050 CD21                <1>     int 21h
   597 00002052 0F82B8000000        <1>     jc .badExit
   598 00002058 6689056EE7FFFF      <1>     mov word [destHdl], ax
   599 0000205F 31F6                <1>     xor esi, esi
   600 00002061 488D1569E7FFFF      <1>     lea rdx, copyBuffer
   601                              <1> .copyLoop:
   602 00002068 B980000000          <1>     mov ecx, 128
   603 0000206D 0FB71D57E7FFFF      <1>     movzx ebx, word [sourceHdl]
   604 00002074 B43F                <1>     mov ah, 3Fh ;Read
   605 00002076 CD21                <1>     int 21h
   606 00002078 0F8292000000        <1>     jc .badExit
   607 0000207E 85C0                <1>     test eax, eax
   608 00002080 743A                <1>     jz .okExit
   609 00002082 01C6                <1>     add esi, eax
   610 00002084 89C1                <1>     mov ecx, eax
   611 00002086 0FB71D40E7FFFF      <1>     movzx ebx, word [destHdl]
   612 0000208D B440                <1>     mov ah, 40h ;Write
   613 0000208F CD21                <1>     int 21h
   614 00002091 727D                <1>     jc .badExit
   615 00002093 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   616 00002098 74CE                <1>     je .copyLoop
   617                              <1>     ;If not char dev, exit
   618 0000209A 66F7052CE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   619 000020A3 7417                <1>     jz .okExit
   620                              <1>     ;Is handle in cooked or binary mode?
   621 000020A5 66F70521E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   622 000020AE 750C                <1>     jnz .okExit
   623                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   624 000020B0 09C0                <1>     or eax, eax ;Clear upper bits in eax
   625 000020B2 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   626 000020B7 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   627 000020BA 75AC                <1>     jne .copyLoop   ;Jump if not
   628                              <1> .okExit:
   629 000020BC E832000000          <1>     call .leaveCopyClose
   630 000020C1 488D158AE8FFFF      <1>     lea rdx, crlf
   631 000020C8 B409                <1>     mov ah, 09h
   632 000020CA CD21                <1>     int 21h
   633 000020CC 488D1543EEFFFF      <1>     lea rdx, fourSpc
   634 000020D3 B409                <1>     mov ah, 09h
   635 000020D5 CD21                <1>     int 21h
   636 000020D7 B402                <1>     mov ah, 02h
   637 000020D9 B231                <1>     mov dl, "1" ;1 File(s) copied
   638 000020DB CD21                <1>     int 21h
   639 000020DD 488D15A7E9FFFF      <1>     lea rdx, copyOk
   640 000020E4 B409                <1>     mov ah, 09h
   641 000020E6 CD21                <1>     int 21h
   642                              <1>     return
    13                              <2> %%_ret:
    14 000020E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .sameFilename:
   644 000020E9 E805000000          <1>     call .leaveCopyClose ;Close the handles
   645 000020EE E983F8FFFF          <1>     jmp noSelfCopyError
   646                              <1> .leaveCopyClose:
   647 000020F3 668B1DD1E6FFFF      <1>     mov bx, word [sourceHdl]
   648 000020FA B8003E0000          <1>     mov eax, 3E00h
   649 000020FF CD21                <1>     int 21h
   650 00002101 668B1DC5E6FFFF      <1>     mov bx, word [destHdl]
   651 00002108 B8003E0000          <1>     mov eax, 3E00h
   652 0000210D CD21                <1>     int 21h
   653                              <1>     return
    13                              <2> %%_ret:
    14 0000210F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   654                              <1> .badExit:
   655                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   656 00002110 668B1DB4E6FFFF      <1>     mov bx, word [sourceHdl]
   657 00002117 6681FBFFFF          <1>     cmp bx, -1
   658 0000211C 7407                <1>     je .skipSource
   659 0000211E B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   660 00002123 CD21                <1>     int 21h
   661                              <1> .skipSource:
   662 00002125 668B1DA1E6FFFF      <1>     mov bx, word [destHdl]
   663 0000212C 6681FBFFFF          <1>     cmp bx, -1
   664 00002131 0F8448F8FFFF        <1>     je badParamError
   665 00002137 B8003E0000          <1>     mov eax, 3E00h
   666 0000213C CD21                <1>     int 21h
   667 0000213E E93CF8FFFF          <1>     jmp badParamError
   668                              <1> 
   669                              <1> erase:
   670 00002143 F60560DFFFFFFF      <1>     test byte [arg1Flg], -1
   671 0000214A 0F8441F8FFFF        <1>     jz badArgError
   672 00002150 E8D6180000          <1>     call setDTA     ;Start by resetting the DTA
   673 00002155 E8E5170000          <1>     call buildCommandPath   ;Get the relative path to the file
   674                              <1> .dirLp:
   675 0000215A 488D3D81E3FFFF      <1>     lea rdi, searchSpec
   676 00002161 E81C170000          <1>     call findLastPathComponant
   677 00002166 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   678 00002169 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   679 0000216D B03F                <1>     mov al, "?"
   680                              <1>     ;Store question marks in the name field
   681 0000216F 57                  <1>     push rdi
   682 00002170 48FFC7              <1>     inc rdi ;Goto the first char
   683 00002173 B90B000000          <1>     mov ecx, 11
   684 00002178 F3AA                <1>     rep stosb
   685 0000217A 5F                  <1>     pop rdi
   686 0000217B 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   687 0000217E B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   688 00002183 CD21                <1>     int 21h
   689 00002185 3C01                <1>     cmp al, 1
   690 00002187 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   691                              <1>     ;Else, we now copy back the search pattern over the last componant!
   692                              <1>     ;No dirs to handle in here
   693 0000218D 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   694 00002191 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   695 00002194 E80D170000          <1>     call FCBToAsciiz    ;Null terminates for free
   696                              <1>     ;Count the number of ?'s, if 11, we print the message
   697 00002199 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   698 0000219D 31C9                <1>     xor ecx, ecx
   699                              <1> .wcScan:
   700 0000219F AC                  <1>     lodsb
   701 000021A0 3C3F                <1>     cmp al, "?"
   702 000021A2 752F                <1>     jne .endCount
   703 000021A4 FFC1                <1>     inc ecx
   704 000021A6 81F90B000000        <1>     cmp ecx, 11
   705 000021AC 75F1                <1>     jne .wcScan
   706                              <1> .ynmsg:
   707 000021AE 488D15FBE9FFFF      <1>     lea rdx, ynMes
   708 000021B5 E8C8130000          <1>     call printString
   709 000021BA B401                <1>     mov ah, 01h ;STDIN without Console Echo
   710 000021BC CD21                <1>     int 21h ;Get char in al
   711 000021BE E8F6150000          <1>     call ucChar ;Uppercase the char
   712 000021C3 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   713 000021C5 7407                <1>     je .endCount1
   714 000021C7 3C4E                <1>     cmp al, "N"
   715                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000021C9 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000021CB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   716 000021CC EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   717                              <1> .endCount1:
   718 000021CE E8A8130000          <1>     call printCRLF
   719                              <1> .endCount:
   720                              <1>     ;Now we copy our search template pathstring to delPath
   721 000021D3 488D3DD2E4FFFF      <1>     lea rdi, delPath
   722 000021DA 488D3501E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   723 000021E1 E8BF150000          <1>     call strcpy2         ;Copy the string over to delPath
   724                              <1> .findFile:
   725                              <1>     ;Now we find first/find next our way through the files
   726 000021E6 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   727 000021E9 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   728 000021EB B8004E0000          <1>     mov eax, 4E00h  ;Find first
   729 000021F0 CD21                <1>     int 21h
   730 000021F2 0F82B4F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   731                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   732 000021F8 E885160000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   733 000021FD 488D3582DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   734                              <1> .delNextFile:
   735                              <1> ;rsi and rdi dont move here
   736 00002204 E89C150000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   737 00002209 488D159CE4FFFF      <1>     lea rdx, delPath
   738 00002210 B800410000          <1>     mov eax, 4100h  ;Delete File 
   739 00002215 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   740 00002217 488D15C4E2FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   741 0000221E B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   742 00002223 CD21                <1>     int 21h
   743 00002225 73DD                <1>     jnc .delNextFile    
   744 00002227 F8                  <1>     clc ;Clear carry to indicate success
   745                              <1>     return
    13                              <2> %%_ret:
    14 00002228 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   746                              <1> .noWildcard:
   747                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   748                              <1>     ; a \*.*<NUL> over the null terminator
   749 00002229 488D15B2E2FFFF      <1>     lea rdx, searchSpec
   750 00002230 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   751 00002235 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   752 0000223A CD21                <1>     int 21h
   753 0000223C 0F826AF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   754 00002242 F60534DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   755 00002249 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   756                              <1>     ;Else, we are dealing with a dir
   757 0000224B 4889D7              <1>     mov rdi, rdx
   758 0000224E 31C9                <1>     xor ecx, ecx
   759 00002250 FFC9                <1>     dec ecx
   760 00002252 F2AE                <1>     repne scasb ;Go to the end of the line!
   761 00002254 48FFCF              <1>     dec rdi
   762 00002257 0FB605CBDDFFFF      <1>     movzx eax, byte [pathSep]
   763 0000225E AA                  <1>     stosb
   764 0000225F B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   765 00002264 AB                  <1>     stosd
   766 00002265 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   767                              <1> .delMain:   ;Call with rdx -> buffer!
   768 0000226A B800410000          <1>     mov eax, 4100h  ;Delete File 
   769 0000226F CD21                <1>     int 21h
   770                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002271 73(28)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   771 00002273 3C05                <1>     cmp al, errAccDen
   772 00002275 0F84F2F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   773 0000227B E91AF7FFFF          <1>     jmp badFileError
   774                              <1>     return
    13                              <2> %%_ret:
    14 00002280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> date:
   776 00002281 488D15ABE8FFFF      <1>     lea rdx, curDate
   777 00002288 B409                <1>     mov ah, 09h
   778 0000228A CD21                <1>     int 21h
   779 0000228C E81A140000          <1>     call printFmtDate
   780                              <1> 
   781 00002291 488D15ACE8FFFF      <1>     lea rdx, newDate
   782 00002298 B409                <1>     mov ah, 09h
   783 0000229A CD21                <1>     int 21h
   784 0000229C 488D15C0E8FFFF      <1>     lea rdx, ukDate
   785 000022A3 488D05ACE8FFFF      <1>     lea rax, usDate
   786 000022AA 488D1DBFE8FFFF      <1>     lea rbx, jpDate
   787 000022B1 803D7CDDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   788 000022B8 480F47D3            <1>     cmova rdx, rbx
   789 000022BC 480F42D0            <1>     cmovb rdx, rax
   790 000022C0 B409                <1>     mov ah, 09h
   791 000022C2 CD21                <1>     int 21h
   792                              <1> 
   793 000022C4 488D15E8DEFFFF      <1>     lea rdx, inBuffer
   794 000022CB C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   795 000022CE B40A                <1>     mov ah, 0Ah
   796 000022D0 CD21                <1>     int 21h
   797 000022D2 52                  <1>     push rdx
   798 000022D3 488D1578E6FFFF      <1>     lea rdx, crlf
   799 000022DA B409                <1>     mov ah, 09h
   800 000022DC CD21                <1>     int 21h
   801 000022DE 5A                  <1>     pop rdx
   802 000022DF 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   803                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022E3 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   804                              <1>     return
    13                              <2> %%_ret:
    14 000022E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> 
   806                              <1> time:
   807 000022E6 488D159FE8FFFF      <1>     lea rdx, curTime
   808 000022ED B409                <1>     mov ah, 09h
   809 000022EF CD21                <1>     int 21h
   810                              <1> 
   811 000022F1 E852130000          <1>     call printFmtTime
   812                              <1> 
   813 000022F6 488D15A0E8FFFF      <1>     lea rdx, newTime
   814 000022FD B409                <1>     mov ah, 09h
   815 000022FF CD21                <1>     int 21h
   816                              <1> 
   817 00002301 488D15ABDEFFFF      <1>     lea rdx, inBuffer
   818 00002308 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   819 0000230B B40A                <1>     mov ah, 0Ah
   820 0000230D CD21                <1>     int 21h
   821 0000230F 52                  <1>     push rdx
   822 00002310 488D153BE6FFFF      <1>     lea rdx, crlf
   823 00002317 B409                <1>     mov ah, 09h
   824 00002319 CD21                <1>     int 21h
   825 0000231B 5A                  <1>     pop rdx
   826 0000231C 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   827                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002320 74(E5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   828                              <1>     return
    13                              <2> %%_ret:
    14 00002322 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   829                              <1> ctty:
   830 00002323 F60580DDFFFFFF      <1>     test byte [arg1Flg], -1
   831 0000232A 0F8461F6FFFF        <1>     jz badArgError
   832 00002330 F60576DDFFFFFF      <1>     test byte [arg2Flg], -1
   833 00002337 0F8554F6FFFF        <1>     jnz badArgError
   834 0000233D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   835 00002344 0FB60560DDFFFF      <1>     movzx eax, byte [arg1Off]
   836 0000234B 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   837 0000234E 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   838 00002352 750F                <1>     jne .noDrive
   839 00002354 0FB60551DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   840 0000235B 3CFF                <1>     cmp al, -1
   841 0000235D 0F8425F6FFFF        <1>     je badDriveError
   842                              <1> .noDrive:
   843                              <1>     ;Now we open the provided file
   844 00002363 E8EF150000          <1>     call copyArgumentToSearchSpec
   845 00002368 488D1573E1FFFF      <1>     lea rdx, searchSpec
   846 0000236F B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   847 00002374 CD21                <1>     int 21h
   848 00002376 0F821EF6FFFF        <1>     jc badFileError
   849 0000237C 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   850 0000237F B800440000          <1>     mov eax, 4400h  ;Get device word
   851 00002384 CD21                <1>     int 21h
   852 00002386 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   853 00002389 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   854                              <1>     ;Now we set this handle to be STDIO
   855 0000238B 80CA03              <1>     or dl, 3    ;Set STDIO bits
   856 0000238E 30F6                <1>     xor dh, dh
   857 00002390 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   858 00002395 CD21                <1>     int 21h
   859                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   860 00002397 31C9                <1>     xor ecx, ecx    ;STDIN
   861 00002399 B446                <1>     mov ah, 46h
   862 0000239B CD21                <1>     int 21h
   863 0000239D FFC1                <1>     inc ecx         ;STDOUT
   864 0000239F B446                <1>     mov ah, 46h
   865 000023A1 CD21                <1>     int 21h
   866 000023A3 FFC1                <1>     inc ecx         ;STDERR
   867 000023A5 B446                <1>     mov ah, 46h
   868 000023A7 CD21                <1>     int 21h
   869 000023A9 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   870 000023AB CD21                <1>     int 21h
   871                              <1>     return
    13                              <2> %%_ret:
    14 000023AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   872                              <1> .badCharDev:
   873 000023AE 488D15F9E8FFFF      <1>     lea rdx, badDev
   874 000023B5 B409                <1>     mov ah, 09h
   875 000023B7 CD21                <1>     int 21h
   876 000023B9 B43E                <1>     mov ah, 3Eh ;Close opened handle
   877 000023BB CD21                <1>     int 21h
   878                              <1>     return
    13                              <2> %%_ret:
    14 000023BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> 
   880                              <1> cls:  
   881 000023BE B800440000          <1>     mov eax, 4400h  ;Get device info
   882 000023C3 BB01000000          <1>     mov ebx, 1      ;for handle 1
   883 000023C8 CD21                <1>     int 21h         ;in dx
   884 000023CA F7C280000000        <1>     test edx, devCharDev
   885 000023D0 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   886 000023D2 F7C210000000        <1>     test edx, charDevFastOut
   887 000023D8 743E                <1>     jz .doAnsi
   888                              <1>     ;Test if Int 29h uses Int 30h
   889                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   890                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   891 000023DA B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   892 000023DF CD21                <1>     int 21h
   893                              <1> .biosCheck:
   894 000023E1 66813BCD30          <1>     cmp word [rbx], 30CDh
   895 000023E6 740C                <1>     je .biosConfirmed
   896 000023E8 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   897 000023ED 7429                <1>     je .doAnsi
   898 000023EF 48FFC3              <1>     inc rbx
   899 000023F2 EBED                <1>     jmp short .biosCheck
   900                              <1> .biosConfirmed:
   901                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   902 000023F4 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   903 000023F6 31DB                <1>     xor ebx, ebx
   904 000023F8 CD30                <1>     int 30h
   905 000023FA B40F                <1>     mov ah, 0Fh ;Get screen mode
   906 000023FC CD30                <1>     int 30h
   907 000023FE 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   908 00002401 FECA                <1>     dec dl
   909 00002403 B619                <1>     mov dh, 25  ;Number of rows is standard
   910 00002405 31C0                <1>     xor eax, eax
   911 00002407 89C1                <1>     mov ecx, eax
   912 00002409 B707                <1>     mov bh, 7   ;Screen attributes
   913 0000240B B406                <1>     mov ah, 6   ;Scroll
   914 0000240D CD30                <1>     int 30h
   915 0000240F 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   916 00002411 B700                <1>     mov bh, 0   ;Page 0
   917 00002413 B402                <1>     mov ah, 2
   918 00002415 CD30                <1>     int 30h
   919                              <1>     return
    13                              <2> %%_ret:
    14 00002417 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   920                              <1> .doAnsi:
   921                              <1> ;4 chars in the ansi routine
   922                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   923                              <1> ; understand ANSI codes
   924 00002418 488D35F3EAFFFF      <1>     lea rsi, ansiCls
   925 0000241F B904000000          <1>     mov ecx, 4
   926 00002424 B406                <1>     mov ah, 06h ;Raw char output
   927                              <1> .ansiLp:
   928 00002426 AC                  <1>     lodsb   ;Get the char in 
   929 00002427 88C2                <1>     mov dl, al
   930 00002429 CD21                <1>     int 21h
   931 0000242B FFC9                <1>     dec ecx
   932 0000242D 75F7                <1>     jnz .ansiLp
   933                              <1>     return
    13                              <2> %%_ret:
    14 0000242F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   934                              <1> 
   935                              <1> break:
   936 00002430 F60573DCFFFFFF      <1>     test byte [arg1Flg], -1
   937 00002437 752D                <1>     jnz .argumentProvided
   938                              <1>     ;Here we just get the status of break
   939 00002439 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   940 0000243E CD21                <1>     int 21h
   941 00002440 88D3                <1>     mov bl, dl
   942 00002442 488D1507E9FFFF      <1>     lea rdx, breakIs
   943 00002449 B409                <1>     mov ah, 09h
   944 0000244B CD21                <1>     int 21h
   945 0000244D 488D15F7E8FFFF      <1>     lea rdx, onMes
   946 00002454 488D0DEAE8FFFF      <1>     lea rcx, offMes
   947 0000245B 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   948 0000245D 480F44D1            <1>     cmovz rdx, rcx
   949 00002461 B409                <1>     mov ah, 09h
   950 00002463 CD21                <1>     int 21h
   951                              <1>     return
    13                              <2> %%_ret:
    14 00002465 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   952                              <1> .argumentProvided:
   953 00002466 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   954 0000246A AD                  <1>     lodsd   ;Read the word
   955 0000246B 89C3                <1>     mov ebx, eax
   956 0000246D 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   957 00002472 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   958 00002475 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   959 0000247A 7416                <1>     je .maybeOn
   960 0000247C 663D4F46            <1>     cmp ax, "OF"
   961 00002480 7523                <1>     jne .badOnOff
   962 00002482 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   963 00002487 6681FB4620          <1>     cmp bx, "F "
   964 0000248C 7517                <1>     jne .badOnOff
   965                              <1>     ;Set off
   966 0000248E 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   967 00002490 EB0B                <1>     jmp short .setBreak
   968                              <1> .maybeOn:
   969 00002492 663D4F4E            <1>     cmp ax, "ON"
   970 00002496 750D                <1>     jne .badOnOff
   971                              <1>     ;Set on
   972 00002498 BA01000000          <1>     mov edx, 1
   973                              <1> .setBreak:
   974 0000249D B801330000          <1>     mov eax, 3301h  ;Set break
   975 000024A2 CD21                <1>     int 21h
   976                              <1>     return
    13                              <2> %%_ret:
    14 000024A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   977                              <1> .badOnOff:
   978 000024A5 488D1576EAFFFF      <1>     lea rdx, badOnOff
   979 000024AC B409                <1>     mov ah, 09h
   980 000024AE CD21                <1>     int 21h
   981                              <1>     return
    13                              <2> %%_ret:
    14 000024B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> 
   983                              <1> verify:
   984 000024B1 F605F2DBFFFFFF      <1>     test byte [arg1Flg], -1
   985 000024B8 752D                <1>     jnz .argumentProvided
   986                              <1>     ;Here we just get the status of break
   987 000024BA B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   988 000024BF CD21                <1>     int 21h
   989 000024C1 88C3                <1>     mov bl, al
   990 000024C3 488D1590E8FFFF      <1>     lea rdx, verifyIs
   991 000024CA B409                <1>     mov ah, 09h
   992 000024CC CD21                <1>     int 21h
   993 000024CE 488D1576E8FFFF      <1>     lea rdx, onMes
   994 000024D5 488D0D69E8FFFF      <1>     lea rcx, offMes
   995 000024DC 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   996 000024DE 480F44D1            <1>     cmovz rdx, rcx
   997 000024E2 B409                <1>     mov ah, 09h
   998 000024E4 CD21                <1>     int 21h
   999                              <1>     return
    13                              <2> %%_ret:
    14 000024E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1000                              <1> .argumentProvided:
  1001 000024E7 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1002 000024EB AD                  <1>     lodsd   ;Read the word
  1003 000024EC 89C3                <1>     mov ebx, eax
  1004 000024EE 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1005 000024F3 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1006 000024F6 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1007 000024FB 7416                <1>     je .maybeOn
  1008 000024FD 663D4F46            <1>     cmp ax, "OF"
  1009 00002501 751F                <1>     jne .badOnOff
  1010 00002503 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1011 00002508 6681FB4620          <1>     cmp bx, "F "
  1012 0000250D 7513                <1>     jne .badOnOff
  1013                              <1>     ;Set off
  1014 0000250F 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1015 00002511 EB0A                <1>     jmp short .setVerify
  1016                              <1> .maybeOn:
  1017 00002513 663D4F4E            <1>     cmp ax, "ON"
  1018 00002517 7509                <1>     jne .badOnOff
  1019                              <1>     ;Set on
  1020 00002519 31C0                <1>     xor eax, eax
  1021 0000251B FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1022                              <1> .setVerify:
  1023 0000251D B42E                <1>     mov ah, 2Eh  ;Set Verify
  1024 0000251F CD21                <1>     int 21h
  1025                              <1>     return
    13                              <2> %%_ret:
    14 00002521 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1026                              <1> .badOnOff:
  1027 00002522 488D15F9E9FFFF      <1>     lea rdx, badOnOff
  1028 00002529 B409                <1>     mov ah, 09h
  1029 0000252B CD21                <1>     int 21h
  1030                              <1>     return
    13                              <2> %%_ret:
    14 0000252D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1031                              <1> 
  1032                              <1> rename:
  1033 0000252E F60575DBFFFFFF      <1>     test byte [arg1Flg], -1
  1034 00002535 0F8456F4FFFF        <1>     jz badArgError
  1035 0000253B F6056BDBFFFFFF      <1>     test byte [arg2Flg], -1
  1036 00002542 0F8449F4FFFF        <1>     jz badArgError    
  1037                              <1>     ;Initialise the variables!
  1038 00002548 488D355DE1FFFF      <1>     lea rsi, srcSpec
  1039 0000254F 4889355AE2FFFF      <1>     mov qword [srcPtr], rsi
  1040 00002556 488D35D1E1FFFF      <1>     lea rsi, destSpec
  1041 0000255D 48893554E2FFFF      <1>     mov qword [destPtr], rsi
  1042                              <1>     ;Check the second path is just a filename!
  1043 00002564 0FB60543DBFFFF      <1>     movzx eax, byte [arg2Off]
  1044 0000256B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1045 00002572 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1046 00002575 488D3D66DFFFFF      <1>     lea rdi, searchSpec
  1047 0000257C 57                  <1>     push rdi
  1048 0000257D E87A130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1049 00002582 5F                  <1>     pop rdi
  1050 00002583 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1051 00002587 0F8404F4FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1052 0000258D 4889FE              <1>     mov rsi, rdi
  1053                              <1> .destScan:
  1054 00002590 AC                  <1>     lodsb   ;Get the char
  1055 00002591 3A0592DAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1056 00002597 0F84F4F3FFFF        <1>     je badArgError
  1057 0000259D 84C0                <1>     test al, al
  1058 0000259F 75EF                <1>     jnz .destScan
  1059                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1060 000025A1 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1061 000025A5 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1061 000025AE 3F                  <1>
  1062 000025AF B903000000          <1>     mov ecx, 3  ;24 bytes
  1063 000025B4 F348AB              <1>     rep stosq
  1064 000025B7 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1065 000025B8 488D3523DFFFFF      <1>     lea rsi, searchSpec
  1066 000025BF 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1067 000025C3 B80D290000          <1>     mov eax, 290Dh
  1068 000025C8 CD21                <1>     int 21h     
  1069 000025CA 50                  <1>     push rax    ;Save the WC signature
  1070 000025CB E86F130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1071 000025D0 488D3D0BDFFFFF      <1>     lea rdi, searchSpec
  1072 000025D7 E8A6120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1073 000025DC 4889FE              <1>     mov rsi, rdi
  1074 000025DF 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1075 000025E2 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1076 000025E6 B80D290000          <1>     mov eax, 290Dh
  1077 000025EB CD21                <1>     int 21h
  1078 000025ED 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1079 000025EE 88CC                <1>     mov ah, cl
  1080 000025F0 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1081 000025F3 0F84EC000000        <1>     jz .noWC
  1082 000025F9 488D35E2DEFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1083                              <1>     ;Now we check if we have a path to actually handle
  1084 00002600 4839F3              <1>     cmp rbx, rsi
  1085 00002603 7444                <1>     je .noPath
  1086 00002605 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1087 00002609 488D35D2DEFFFF      <1>     lea rsi, searchSpec
  1088 00002610 488D3D95E0FFFF      <1>     lea rdi, srcSpec
  1089 00002617 56                  <1>     push rsi
  1090 00002618 E879110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1091 0000261D 5E                  <1>     pop rsi
  1092 0000261E 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1093 00002621 8A0502DAFFFF        <1>     mov al, byte [pathSep]
  1094 00002627 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1095 00002628 48893D81E1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1096 0000262F 488D3DF8E0FFFF      <1>     lea rdi, destSpec
  1097 00002636 E85B110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1098 0000263B 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1099 0000263E AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1100 0000263F 48893D72E1FFFF      <1>     mov qword [destPtr], rdi
  1101 00002646 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1102                              <1> .noPath:
  1103                              <1>     ;Now we have where to copy the files to, we can start our work!
  1104 00002649 E8DD130000          <1>     call setDTA
  1105 0000264E 488D158DDEFFFF      <1>     lea rdx, searchSpec
  1106 00002655 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1107 00002657 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1108 0000265C CD21                <1>     int 21h
  1109 0000265E 0F823FF3FFFF        <1>     jc badDupFnf    ;If no file was found!
  1110                              <1> .wcLoop:
  1111                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1112 00002664 488D351BDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1113 0000266B 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1114 0000266F B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1115 00002674 CD21                <1>     int 21h 
  1116                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1117 00002676 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1118 0000267A 488D3D3FE1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1119 00002681 57                  <1>     push rdi
  1120 00002682 48A5                <1>     movsq
  1121 00002684 66A5                <1>     movsw
  1122 00002686 A4                  <1>     movsb
  1123 00002687 5F                  <1>     pop rdi
  1124 00002688 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1125 0000268C B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1126                              <1> .wcNameMake:
  1127 00002691 AC                  <1>     lodsb   ;Get the char from the source string
  1128 00002692 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1129 00002695 7502                <1>     jne .noStore    ;Dont store the char there
  1130 00002697 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1131                              <1> .noStore:
  1132 00002699 48FFC7              <1>     inc rdi ;Goto next char position
  1133 0000269C FFC9                <1>     dec ecx
  1134 0000269E 75F1                <1>     jnz .wcNameMake
  1135                              <1> ;renName now has the FCB name for the file we wish to make!
  1136                              <1> ;Now make the two paths!
  1137 000026A0 488D35DFDAFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1138 000026A7 488B3D02E1FFFF      <1>     mov rdi, qword [srcPtr]
  1139 000026AE E8E3100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1140 000026B3 488D3506E1FFFF      <1>     lea rsi, renName
  1141 000026BA 488B3DF7E0FFFF      <1>     mov rdi, qword [destPtr]
  1142 000026C1 E8E0110000          <1>     call FCBToAsciiz
  1143 000026C6 488D15DFDFFFFF      <1>     lea rdx, srcSpec
  1144 000026CD 488D3D5AE0FFFF      <1>     lea rdi, destSpec
  1145 000026D4 B800560000          <1>     mov eax, 5600h
  1146 000026D9 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1147 000026DB B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1148 000026E0 CD21                <1>     int 21h
  1149 000026E2 7380                <1>     jnc .wcLoop     ;And process it too!
  1150                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000026E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .noWC:
  1152 000026E5 E855120000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1153 000026EA 0FB605BDD9FFFF      <1>     movzx eax, byte [arg2Off]
  1154 000026F1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1155 000026F8 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1156 000026FB 488D3D2CE0FFFF      <1>     lea rdi, destSpec
  1157 00002702 57                  <1>     push rdi
  1158 00002703 E8F4110000          <1>     call cpDelimPathToBufz
  1159 00002708 5F                  <1>     pop rdi
  1160 00002709 488D15D2DDFFFF      <1>     lea rdx, searchSpec
  1161 00002710 B800560000          <1>     mov eax, 5600h
  1162 00002715 CD21                <1>     int 21h
  1163                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002717 73(E4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1164 00002719 E985F2FFFF          <1>     jmp badDupFnf   ;Always just return this
  1165                              <1> 
  1166                              <1> 
  1167                              <1> touch:
  1168                              <1> ;Temporarily used to create files
  1169 0000271E F60585D9FFFFFF      <1>     test byte [arg1Flg], -1
  1170 00002725 0F8466F2FFFF        <1>     jz badArgError
  1171 0000272B E80F120000          <1>     call buildCommandPath
  1172 00002730 488D15ABDDFFFF      <1>     lea rdx, searchSpec
  1173 00002737 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1174 0000273C 31C9                <1>     xor ecx, ecx
  1175 0000273E CD21                <1>     int 21h
  1176 00002740 721D                <1>     jc .touch1
  1177                              <1> .touchClose:
  1178 00002742 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1179 00002745 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1180 0000274A CD2F                <1>     int 2fh
  1181 0000274C 89C1                <1>     mov ecx, eax    ;Move the time here
  1182 0000274E 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1183 00002750 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1184 00002755 CD21                <1>     int 21h
  1185 00002757 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1186 0000275C CD21                <1>     int 21h
  1187                              <1>     return
    13                              <2> %%_ret:
    14 0000275E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1188                              <1> .touch1:
  1189 0000275F 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1190 00002761 7509                <1>     jne .touchError ;If not, this is a proper error!
  1191 00002763 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1192 00002768 CD21                <1>     int 21h
  1193 0000276A 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1194                              <1> .touchError:
  1195 0000276C 3C03                <1>     cmp al, errPnf
  1196 0000276E 0F841DF2FFFF        <1>     je badArgError
  1197 00002774 3C02                <1>     cmp al, errFnf
  1198 00002776 0F8430F2FFFF        <1>     je badFnf
  1199 0000277C E9ECF1FFFF          <1>     jmp badAccError
  1200                              <1>     
  1201                              <1> 
  1202                              <1> join:
  1203                              <1> ;Mock join command, to test join. Make an external command.
  1204                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1205 00002781 F605AF000000FF      <1>     test byte [.joinOn], -1
  1206 00002788 743D                <1>     jz .okJoin
  1207                              <1> .joindisable:
  1208 0000278A B800520000          <1>     mov eax, 5200h  
  1209 0000278F CD21                <1>     int 21h
  1210                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1211 00002791 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1212 00002796 CD2A                <1>     int 2Ah
  1213 00002798 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1214 0000279C 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1215 000027A0 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1216 000027A6 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1217 000027A9 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1218 000027AD FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1219 000027B0 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1220 000027B5 CD2A                <1>     int 2Ah
  1221 000027B7 C6057900000000      <1>     mov byte [.joinOn], 0
  1222 000027BE 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1223 000027C5 EB45                <1>     jmp short .joinExit
  1224                              <1> .okJoin:
  1225 000027C7 C60569000000FF      <1>     mov byte [.joinOn], -1
  1226 000027CE B800520000          <1>     mov eax, 5200h  
  1227 000027D3 CD21                <1>     int 21h
  1228 000027D5 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1229 000027D9 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1230                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1231 000027DD B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1232 000027E2 CD2A                <1>     int 2Ah
  1233 000027E4 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1234 000027EA 4889DF              <1>     mov rdi, rbx
  1235 000027ED 488D3544000000      <1>     lea rsi, .joinPath
  1236 000027F4 B90C000000          <1>     mov ecx, .joinPathL
  1237 000027F9 F3A4                <1>     rep movsb   ;Copy chars over
  1238 000027FB FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1239 000027FE B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1240 00002803 CD2A                <1>     int 2Ah
  1241 00002805 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1242                              <1> .joinExit:
  1243 0000280C B800090000          <1>     mov eax, 0900h
  1244 00002811 CD21                <1>     int 21h
  1245                              <1>     return
    13                              <2> %%_ret:
    14 00002813 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1246 00002814 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1246 0000281D 61626C65640D0A24    <1>
  1247 00002825 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1247 0000282E 7361626C65640D0A24  <1>
  1248 00002837 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1249 00002838 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1249 00002841 535400              <1>
  1250                              <1> .joinPathL  equ $ - .joinPath 
  1251                              <1> 
  1252                              <1> subst:
  1253                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1254                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1255 00002844 F605D3000000FF      <1>     test byte [.substOn], -1
  1256 0000284B 7443                <1>     jz .okSubst
  1257                              <1> .substdisable:
  1258 0000284D B800520000          <1>     mov eax, 5200h  
  1259 00002852 CD21                <1>     int 21h
  1260                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1261 00002854 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1262 00002859 CD2A                <1>     int 2Ah
  1263 0000285B 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1264 0000285F 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1265 00002866 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1266 0000286C C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1267 0000286F C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1268 00002873 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1269 00002879 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1270 0000287E CD2A                <1>     int 2Ah
  1271 00002880 C6059700000000      <1>     mov byte [.substOn], 0
  1272 00002887 488D157D000000      <1>     lea rdx, .substDisableMsg
  1273 0000288E EB61                <1>     jmp short .substExit
  1274                              <1> .okSubst:
  1275 00002890 C60587000000FF      <1>     mov byte [.substOn], -1
  1276 00002897 B800520000          <1>     mov eax, 5200h  
  1277 0000289C CD21                <1>     int 21h
  1278 0000289E B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1279 000028A3 CD2A                <1>     int 2Ah
  1280 000028A5 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1281 000028A9 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1282 000028B0 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1283 000028B4 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1284 000028BB 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1285 000028BF C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1286                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1287 000028C6 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1288 000028CC 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1289 000028D2 4889DF              <1>     mov rdi, rbx
  1290 000028D5 488D3543000000      <1>     lea rsi, .substPath
  1291 000028DC B90C000000          <1>     mov ecx, .substPathL
  1292 000028E1 F3A4                <1>     rep movsb   ;Copy chars over
  1293 000028E3 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1294 000028E8 CD2A                <1>     int 2Ah
  1295 000028EA 488D1508000000      <1>     lea rdx, .substEnableMsg
  1296                              <1> .substExit:
  1297 000028F1 B800090000          <1>     mov eax, 0900h
  1298 000028F6 CD21                <1>     int 21h
  1299                              <1>     return
    13                              <2> %%_ret:
    14 000028F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1300 000028F9 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1300 00002902 6E61626C65640D0A24  <1>
  1301 0000290B 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1301 00002914 697361626C65640D0A- <1>
  1301 0000291D 24                  <1>
  1302 0000291E 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1303 0000291F 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1303 00002928 535400              <1>
  1304                              <1> .substPathL  equ $ - .substPath 
  1305                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1306                              <1> truename:
  1307 0000292B F60578D7FFFFFF      <1>     test byte [arg1Flg], -1
  1308 00002932 0F8459F0FFFF        <1>     jz badArgError
  1309 00002938 E802100000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1310 0000293D 488D359EDBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1311 00002944 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1312 00002947 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1313 0000294C CD21                <1>     int 21h
  1314 0000294E 730D                <1>     jnc .writePath
  1315 00002950 3C02                <1>     cmp al, errFnf
  1316 00002952 0F8442F0FFFF        <1>     je badFileError
  1317 00002958 E922F0FFFF          <1>     jmp badParamError
  1318                              <1> .writePath:
  1319 0000295D 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1320 00002960 B9FFFFFFFF          <1>     mov ecx, -1
  1321 00002965 30C0                <1>     xor al, al
  1322 00002967 F2AE                <1>     repne scasb     ;Get the new len
  1323 00002969 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1324 0000296B FFC9                <1>     dec ecx
  1325 0000296D BB01000000          <1>     mov ebx, 01
  1326 00002972 B440                <1>     mov ah, 40h
  1327 00002974 CD21                <1>     int 21h
  1328 00002976 E8000C0000          <1>     call printCRLF
  1329                              <1>     return
    13                              <2> %%_ret:
    14 0000297B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1330                              <1> 
  1331                              <1> label:
  1332                              <1> ;Displays/Changes/Deletes the file label
  1333 0000297C 488D1508000000      <1>     lea rdx, .l1
  1334 00002983 B800090000          <1>     mov eax, 0900h
  1335 00002988 CD21                <1>     int 21h
  1336                              <1>     return
    13                              <2> %%_ret:
    14 0000298A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1337 0000298B 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1337 00002994 6E20756E696D706C65- <1>
  1337 0000299D 6D656E7465640D0A24  <1>
  1338                              <1> 
  1339                              <1> mklbl:
  1340                              <1>     ;lea rdx, .l1
  1341                              <1>     ;mov cx, 08h ;Make a label
  1342                              <1>     ;mov eax, 3C00h
  1343                              <1>     ;int 21h
  1344                              <1> 
  1345                              <1>     ;mov ebx, eax
  1346                              <1>     ;mov eax, 3E00h  ;Close the handle
  1347                              <1>     ;int 21h
  1348                              <1>     ;return
  1349                              <1> 
  1350                              <1> ;.l1: db "TESTLABEL",0
  1351 000029A6 488D1508000000      <1>     lea rdx, .l1
  1352 000029AD B800160000          <1>     mov eax, 1600h  ;Create FCB
  1353 000029B2 CD21                <1>     int 21h
  1354                              <1>     return
    13                              <2> %%_ret:
    14 000029B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .l1:
  1356                              <1>     istruc exFcb
  1357 000029B5 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1358 000029B6 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1359 000029BC 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1360 000029BD 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1361 000029C5 4C2020              <1>     at exFcb.fileext,   db "L  "
  1362 000029C8 00000000            <1>     at exFcb.curBlock,  dd 0
  1363 000029CC 00<rep 15h>         <1>     iend 
  1364                              <1> rmlbl:
  1365 000029E1 488D1508000000      <1>     lea rdx, .l1
  1366 000029E8 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1367 000029ED CD21                <1>     int 21h
  1368                              <1>     return
    13                              <2> %%_ret:
    14 000029EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1369                              <1> .l1:    ;FCB to volume label
  1370                              <1>     istruc exFcb
  1371 000029F0 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1372 000029F1 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1373 000029F7 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1374 000029F8 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1375 00002A00 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1376 00002A03 00000000            <1>     at exFcb.curBlock,  dd 0
  1377 00002A07 00<rep 15h>         <1>     iend 
  1378                              <1> 
  1379                              <1> rnlbl:
  1380 00002A1C 488D1508000000      <1>     lea rdx, .l1
  1381 00002A23 B800170000          <1>     mov eax, 1700h
  1382 00002A28 CD21                <1>     int 21h
  1383                              <1>     return
    13                              <2> %%_ret:
    14 00002A2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1384                              <1> .l1:
  1385                              <1>     istruc exRenFcb
  1386 00002A2B FF                  <1>     at exRenFcb.extSig,     db -1
  1387 00002A2C 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1388 00002A32 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1389 00002A33 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1390 00002A3B 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1391 00002A3E 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1391 00002A47 4C414245            <1>
  1392 00002A4B 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1393 00002A4E 00<rep 4h>          <1>     iend
  1394                              <1> volume:
  1395                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1396 00002A52 F60554D6FFFFFF      <1>     test byte [arg2Flg], -1
  1397 00002A59 0F8532EFFFFF        <1>     jnz badArgError
  1398 00002A5F F60544D6FFFFFF      <1>     test byte [arg1Flg], -1
  1399 00002A66 7507                <1>     jnz .notCurrentDrive
  1400 00002A68 E8240D0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1401 00002A6D EB31                <1>     jmp short .dirEP
  1402                              <1> .notCurrentDrive:
  1403 00002A6F E8CB0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1404 00002A74 488D3567DAFFFF      <1>     lea rsi, searchSpec
  1405 00002A7B E84B0D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1406 00002A80 66AD                <1>     lodsw                   ;Get this word
  1407 00002A82 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1408 00002A85 0F8506EFFFFF        <1>     jne badArgError
  1409 00002A8B 8A051BD6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1410 00002A91 A8FF                <1>     test al, -1
  1411 00002A93 0F85EFEEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1412 00002A99 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1413 00002A9E FFC8                <1>     dec eax ;Convert to 0 based number
  1414                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1415 00002AA0 E8860F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1416 00002AA5 488D15D0DBFFFF      <1>     lea rdx, volFcb
  1417 00002AAC FFC0                <1>     inc eax ;Get 1 based drive number
  1418 00002AAE 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1419 00002AB0 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1420 00002AB3 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1421 00002AB8 CD21                <1>     int 21h
  1422 00002ABA 50                  <1>     push rax
  1423                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1424 00002ABB 488D1590DEFFFF      <1>     lea rdx, crlf
  1425 00002AC2 B409                <1>     mov ah, 09h
  1426 00002AC4 CD21                <1>     int 21h
  1427 00002AC6 488D150AE1FFFF      <1>     lea rdx, volMes
  1428 00002ACD B409                <1>     mov ah, 09h
  1429 00002ACF CD21                <1>     int 21h
  1430 00002AD1 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1431 00002AD3 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1432 00002AD6 B402                <1>     mov ah, 02h
  1433 00002AD8 CD21                <1>     int 21h
  1434 00002ADA 58                  <1>     pop rax
  1435 00002ADB 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1436 00002ADD 7409                <1>     jz .volIDOk
  1437 00002ADF 488D1508E1FFFF      <1>     lea rdx, volNo
  1438 00002AE6 EB19                <1>     jmp short .volEndPrint
  1439                              <1> .volIDOk:
  1440 00002AE8 488D15FAE0FFFF      <1>     lea rdx, volOk
  1441 00002AEF B409                <1>     mov ah, 09h
  1442 00002AF1 CD21                <1>     int 21h
  1443 00002AF3 C60581D6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1444 00002AFA 488D156FD6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1445                              <1> .volEndPrint:
  1446 00002B01 B409                <1>     mov ah, 09h
  1447 00002B03 CD21                <1>     int 21h
  1448 00002B05 488D1546DEFFFF      <1>     lea rdx, crlf
  1449 00002B0C B409                <1>     mov ah, 09h
  1450 00002B0E CD21                <1>     int 21h
  1451                              <1>     return
    13                              <2> %%_ret:
    14 00002B10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1452                              <1> 
  1453                              <1> version:
  1454 00002B11 488D153ADEFFFF      <1>     lea rdx, crlf
  1455 00002B18 B409                <1>     mov ah, 09h
  1456 00002B1A CD21                <1>     int 21h
  1457 00002B1C 488D15A2E0FFFF      <1>     lea rdx, dosVer
  1458 00002B23 B409                <1>     mov ah, 09h
  1459 00002B25 CD21                <1>     int 21h
  1460 00002B27 E80C000000          <1>     call .printVersionNumber
  1461 00002B2C 488D151FDEFFFF      <1>     lea rdx, crlf
  1462 00002B33 B409                <1>     mov ah, 09h
  1463 00002B35 CD21                <1>     int 21h
  1464                              <1>     return
    13                              <2> %%_ret:
    14 00002B37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1465                              <1> .printVersionNumber:
  1466 00002B38 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1467 00002B3A CD21                <1>     int 21h
  1468 00002B3C 50                  <1>     push rax
  1469 00002B3D 0FB6C0              <1>     movzx eax, al
  1470 00002B40 E8330E0000          <1>     call printDecimalWord
  1471 00002B45 B22E                <1>     mov dl, "."
  1472 00002B47 B402                <1>     mov ah, 02h
  1473 00002B49 CD21                <1>     int 21h
  1474 00002B4B 58                  <1>     pop rax
  1475 00002B4C 0FB6C4              <1>     movzx eax, ah
  1476 00002B4F E8240E0000          <1>     call printDecimalWord
  1477                              <1>     return
    13                              <2> %%_ret:
    14 00002B54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1478                              <1> 
  1479                              <1> 
  1480                              <1> memory:
  1481 00002B55 488B1DC3D4FFFF      <1>     mov rbx, qword [sysVars]
  1482 00002B5C 4885DB              <1>     test rbx, rbx
  1483 00002B5F 7510                <1>     jnz .sysvarsOK
  1484 00002B61 488D1521E3FFFF      <1>     lea rdx, memBad0
  1485 00002B68 B409                <1>     mov ah, 09h
  1486 00002B6A CD21                <1>     int 21h
  1487 00002B6C E9AA0E0000          <1>     jmp freezePC.altEP
  1488                              <1> .sysvarsOK:
  1489                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1490                              <1>     ; and rcx to store Application memory
  1491 00002B71 31F6                <1>     xor esi, esi
  1492 00002B73 31FF                <1>     xor edi, edi
  1493 00002B75 31ED                <1>     xor ebp, ebp
  1494 00002B77 31C9                <1>     xor ecx, ecx
  1495 00002B79 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1496 00002B7D 488B1B              <1>     mov rbx, qword [rbx]
  1497                              <1> .memLp:
  1498 00002B80 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1499 00002B83 7409                <1>     je .validMCB
  1500 00002B85 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1501 00002B88 0F8501010000        <1>     jne .badMCBFound
  1502                              <1> .validMCB:
  1503 00002B8E 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1504 00002B91 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1505 00002B95 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1506 00002B9D 7505                <1>     jne .notDOS
  1507 00002B9F 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1508 00002BA2 EB21                <1>     jmp short .gotoNext
  1509                              <1> .notDOS:
  1510 00002BA4 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1511 00002BAC 7505                <1>     jne .notFree
  1512 00002BAE 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1513 00002BB1 EB12                <1>     jmp short .gotoNext
  1514                              <1> .notFree:
  1515 00002BB3 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1516 00002BBB 7505                <1>     jne .notHole
  1517 00002BBD 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1518 00002BC0 EB03                <1>     jmp short .gotoNext
  1519                              <1> .notHole:
  1520 00002BC2 4801C1              <1>     add rcx, rax    ;Add to Application count
  1521                              <1> .gotoNext:
  1522 00002BC5 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1523 00002BC8 7407                <1>     je .endOfWalk
  1524 00002BCA 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1525 00002BCF EBAF                <1>     jmp short .memLp
  1526                              <1> .endOfWalk:
  1527                              <1>     
  1528 00002BD1 488D1512E2FFFF      <1>     lea rdx, memDOS
  1529 00002BD8 B409                <1>     mov ah, 09h
  1530 00002BDA CD21                <1>     int 21h
  1531 00002BDC 4889F0              <1>     mov rax, rsi
  1532 00002BDF E89D000000          <1>     call .mcbPrintAmount
  1533 00002BE4 488D1597E2FFFF      <1>     lea rdx, memByte
  1534 00002BEB B409                <1>     mov ah, 09h
  1535 00002BED CD21                <1>     int 21h
  1536                              <1> 
  1537 00002BEF 4885ED              <1>     test rbp, rbp
  1538 00002BF2 741E                <1>     jz .skipHole
  1539 00002BF4 488D153BE2FFFF      <1>     lea rdx, memHole
  1540 00002BFB B409                <1>     mov ah, 09h
  1541 00002BFD CD21                <1>     int 21h
  1542 00002BFF 4889E8              <1>     mov rax, rbp
  1543 00002C02 E87A000000          <1>     call .mcbPrintAmount
  1544 00002C07 488D1574E2FFFF      <1>     lea rdx, memByte
  1545 00002C0E B409                <1>     mov ah, 09h
  1546 00002C10 CD21                <1>     int 21h
  1547                              <1> .skipHole:
  1548                              <1> 
  1549 00002C12 488D15F7E1FFFF      <1>     lea rdx, memApp
  1550 00002C19 B409                <1>     mov ah, 09h
  1551 00002C1B CD21                <1>     int 21h
  1552 00002C1D 4889C8              <1>     mov rax, rcx
  1553 00002C20 E85C000000          <1>     call .mcbPrintAmount
  1554 00002C25 488D1556E2FFFF      <1>     lea rdx, memByte
  1555 00002C2C B409                <1>     mov ah, 09h
  1556 00002C2E CD21                <1>     int 21h
  1557                              <1> 
  1558 00002C30 488D1525E2FFFF      <1>     lea rdx, memFree
  1559 00002C37 B409                <1>     mov ah, 09h
  1560 00002C39 CD21                <1>     int 21h
  1561 00002C3B 4889F8              <1>     mov rax, rdi
  1562 00002C3E E83E000000          <1>     call .mcbPrintAmount
  1563 00002C43 488D1538E2FFFF      <1>     lea rdx, memByte
  1564 00002C4A B409                <1>     mov ah, 09h
  1565 00002C4C CD21                <1>     int 21h
  1566                              <1> 
  1567 00002C4E 488D156FE1FFFF      <1>     lea rdx, memSys
  1568 00002C55 B409                <1>     mov ah, 09h
  1569 00002C57 CD21                <1>     int 21h
  1570 00002C59 4889F0              <1>     mov rax, rsi
  1571 00002C5C 4801F8              <1>     add rax, rdi
  1572 00002C5F 4801C8              <1>     add rax, rcx
  1573 00002C62 4801E8              <1>     add rax, rbp
  1574 00002C65 E817000000          <1>     call .mcbPrintAmount
  1575 00002C6A 488D1511E2FFFF      <1>     lea rdx, memByte
  1576 00002C71 B409                <1>     mov ah, 09h
  1577 00002C73 CD21                <1>     int 21h
  1578                              <1> 
  1579 00002C75 488D15D6DCFFFF      <1>     lea rdx, crlf
  1580 00002C7C B409                <1>     mov ah, 09h
  1581 00002C7E CD21                <1>     int 21h
  1582                              <1>     return
    13                              <2> %%_ret:
    14 00002C80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1583                              <1> 
  1584                              <1> .mcbPrintAmount:
  1585 00002C81 51                  <1>     push rcx
  1586 00002C82 56                  <1>     push rsi
  1587 00002C83 57                  <1>     push rdi
  1588 00002C84 55                  <1>     push rbp
  1589 00002C85 E8EE0C0000          <1>     call printDecimalWord
  1590 00002C8A 5D                  <1>     pop rbp
  1591 00002C8B 5F                  <1>     pop rdi
  1592 00002C8C 5E                  <1>     pop rsi
  1593 00002C8D 59                  <1>     pop rcx
  1594                              <1>     return
    13                              <2> %%_ret:
    14 00002C8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1595                              <1> .badMCBFound:
  1596 00002C8F 488D1533E2FFFF      <1>     lea rdx, memBad2
  1597 00002C96 B409                <1>     mov ah, 09h
  1598 00002C98 CD21                <1>     int 21h
  1599 00002C9A E97C0D0000          <1>     jmp freezePC.altEP
  1600                              <1> 
  1601                              <1> type:
  1602 00002C9F F60504D4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1603 00002CA6 0F84E5ECFFFF        <1>     jz badArgError
  1604 00002CAC F605FAD3FFFFFF      <1>     test byte [arg2Flg], -1
  1605 00002CB3 0F85D8ECFFFF        <1>     jnz badArgError         ;If this set, error
  1606 00002CB9 4C8B054FD3FFFF      <1>     mov r8, [pspPtr]
  1607 00002CC0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1608 00002CC7 0FB605DDD3FFFF      <1>     movzx eax, byte [arg1Off]
  1609 00002CCE 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1610 00002CD1 803E0D              <1>     cmp byte [rsi], CR
  1611 00002CD4 0F84B7ECFFFF        <1>     je badArgError
  1612 00002CDA 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1613 00002CDE 750F                <1>     jne .noDrive
  1614 00002CE0 0FB605C5D3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1615 00002CE7 3CFF                <1>     cmp al, -1
  1616 00002CE9 0F8499ECFFFF        <1>     je badDriveError
  1617                              <1> .noDrive:
  1618                              <1>     ;Now we open the provided file
  1619 00002CEF E84B0C0000          <1>     call buildCommandPath
  1620 00002CF4 488D15E7D7FFFF      <1>     lea rdx, searchSpec
  1621 00002CFB B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1622 00002D00 CD21                <1>     int 21h
  1623 00002D02 0F8292ECFFFF        <1>     jc badFileError
  1624 00002D08 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1625 00002D0F 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1626                              <1> .lp:
  1627 00002D12 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1628 00002D17 B43F                <1>     mov ah, 3Fh ;Read handle
  1629 00002D19 CD21                <1>     int 21h
  1630 00002D1B 89C1                <1>     mov ecx, eax
  1631 00002D1D 67E317              <1>     jecxz .exit
  1632 00002D20 53                  <1>     push rbx    ;Save the original in handle
  1633 00002D21 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1634 00002D26 B440                <1>     mov ah, 40h
  1635 00002D28 CD21                <1>     int 21h
  1636 00002D2A 5B                  <1>     pop rbx ;Get back the original read handle
  1637 00002D2B 720F                <1>     jc .exitBad
  1638 00002D2D 39C8                <1>     cmp eax, ecx
  1639 00002D2F 74E1                <1>     je .lp
  1640 00002D31 FFC9                <1>     dec ecx ;One less for a ^Z
  1641 00002D33 39C8                <1>     cmp eax, ecx
  1642 00002D35 7505                <1>     jne .exitBad
  1643                              <1> .exit:
  1644 00002D37 B43E                <1>     mov ah, 3Eh ;Close handle
  1645 00002D39 CD21                <1>     int 21h
  1646                              <1>     return
    13                              <2> %%_ret:
    14 00002D3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1647                              <1> .exitBad:
  1648                              <1>     ;If it is a char device, don't print an error
  1649 00002D3C B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1650 00002D41 BB01000000          <1>     mov ebx, 1
  1651 00002D46 CD21                <1>     int 21h
  1652 00002D48 F6C280              <1>     test dl, devCharDev
  1653                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D4B 75(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1654 00002D4D E9E4EBFFFF          <1>     jmp badDiskFull
  1655                              <1> 
  1656                              <1> exit:
  1657 00002D52 F605D2D2FFFFFF      <1>     test byte [permaSwitch], -1
  1658                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D59 75(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1659 00002D5B 488B05B5D2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1660 00002D62 483DFFFFFFFF        <1>     cmp rax, -1
  1661                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D68 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1662 00002D6A 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1663                              <1> 
  1664 00002D6E 488B15B7D2FFFF      <1>     mov rdx, qword [parentInt22]
  1665 00002D75 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1666 00002D79 B822250000          <1>     mov eax, 2522h
  1667 00002D7E CD21                <1>     int 21h
  1668                              <1> 
  1669 00002D80 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1670 00002D85 CD21                <1>     int 21h
  1671                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1672                              <1> 
  1673                              <1> launchChild:
  1674                              <1>     ;We execute an external command here.
  1675                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1676                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1677                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1678                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1679                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1680 00002D88 E89E0C0000          <1>     call setDTA         
  1681                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1682 00002D8D 488D3DA5D5FFFF      <1>     lea rdi, cmdPathSpec
  1683 00002D94 4889FE              <1>     mov rsi, rdi
  1684 00002D97 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1685 00002D9C CD2F                <1>     int 2fh
  1686 00002D9E E8DF0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1687 00002DA3 4889FE              <1>     mov rsi, rdi    ;Source here
  1688 00002DA6 488D3DABD3FFFF      <1>     lea rdi, cmdFcb
  1689 00002DAD B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1690 00002DB2 CD21                <1>     int 21h
  1691 00002DB4 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1692 00002DB6 0F8505ECFFFF        <1>     jnz badCmdError
  1693 00002DBC 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1694                              <1> .pathLoop:
  1695 00002DBF 488D359BD3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1696 00002DC6 488D3D76E1FFFF      <1>     lea rdi, extStr
  1697 00002DCD BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1698                              <1> .extLp:
  1699 00002DD2 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1700 00002DD3 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1701 00002DD8 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1702 00002DDA 5E                  <1>     pop rsi
  1703 00002DDB 85C9                <1>     test ecx, ecx
  1704 00002DDD 7455                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1705 00002DDF 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1706 00002DE2 FFCA                <1>     dec edx         ;Else one less extension type to check
  1707 00002DE4 75EC                <1>     jnz .extLp
  1708                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1709                              <1>     ;If not, error.
  1710 00002DE6 B903000000          <1>     mov ecx, 3
  1711 00002DEB 4889F7              <1>     mov rdi, rsi
  1712 00002DEE B020                <1>     mov al, SPC
  1713 00002DF0 F3AE                <1>     rep scasb   
  1714 00002DF2 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1715 00002DF4 0F85C7EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1716                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1717 00002DFA 488D3542E1FFFF      <1>     lea rsi, extStr
  1718 00002E01 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1719                              <1> .extSrchLp:
  1720 00002E06 488D3D54D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1721 00002E0D B903000000          <1>     mov ecx, 3
  1722 00002E12 F3A4                <1>     rep movsb   ;Copy the extension over!
  1723 00002E14 E892010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1724 00002E19 7324                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1725 00002E1B FFCB                <1>     dec ebx                 ;Decrement extension counter
  1726 00002E1D 75E7                <1>     jnz .extSrchLp
  1727                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1728                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1729                              <1> ; by setting the fcb extension back to all spaces.
  1730 00002E1F 488D3D3BD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1731 00002E26 B903000000          <1>     mov ecx, 3
  1732 00002E2B B020                <1>     mov al, SPC
  1733 00002E2D F3AA                <1>     rep stosb   ;Store back the empty extension!
  1734 00002E2F E9B9000000          <1>     jmp .pathHandle
  1735                              <1> .extFnd:
  1736                              <1> ;Here if the file had the right extension.
  1737 00002E34 E872010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1738 00002E39 0F82AE000000        <1>     jc .pathHandle
  1739                              <1> .extSrchFnd:
  1740                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1741                              <1> ; a BAT. If it is, separate handling!
  1742 00002E3F 803D1BD3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1743 00002E46 0F84F8030000        <1>     je batLaunch
  1744 00002E4C 488D1D40D3FFFF      <1>     lea rbx, launchBlock
  1745 00002E53 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1746 00002E57 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1747 00002E5A 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1748 00002E61 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1749 00002E65 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1750 00002E69 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1751 00002E6D 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1752 00002E71 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1753 00002E75 488D15BDD4FFFF      <1>     lea rdx, cmdPathSpec
  1754 00002E7C B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1755 00002E81 CD21                <1>     int 21h
  1756                              <1> ;If the program failed to start, verify why!
  1757 00002E83 B800590000          <1>     mov eax, 5900h      ;Get extended error
  1758 00002E88 31DB                <1>     xor ebx, ebx
  1759 00002E8A CD21                <1>     int 21h
  1760 00002E8C 6689057AD1FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1761 00002E93 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1762 00002E95 0F84D2EAFFFF        <1>     je badAccError
  1763 00002E9B 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1764 00002E9D 0F846D0B0000        <1>     je freezePC
  1765 00002EA3 E919EBFFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1766                              <1> .appRet:  ;Return point from a task
  1767 00002EA8 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
  1768 00002EAD CD21                <1>     int 21h
  1769 00002EAF 66890557D1FFFF      <1>     mov word [returnCode], ax
  1770                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
  1771 00002EB6 488D15EA0C0000      <1>     lea rdx, critErrorHandler
  1772 00002EBD 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
  1773 00002EC1 B824250000          <1>     mov eax, 2524h
  1774 00002EC6 CD21                <1>     int 21h
  1775 00002EC8 488D15730F0000      <1>     lea rdx, int23h
  1776 00002ECF 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
  1777 00002ED3 B823250000          <1>     mov eax, 2523h
  1778 00002ED8 CD21                <1>     int 21h
  1779 00002EDA 488D15C7FFFFFF      <1>     lea rdx, .appRet
  1780 00002EE1 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1781 00002EE5 B822250000          <1>     mov eax, 2522h
  1782 00002EEA CD21                <1>     int 21h
  1783                              <1>     return  ;Now return to main loop
    13                              <2> %%_ret:
    14 00002EEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1784                              <1> .pathHandle:        
  1785                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1786                              <1> ;al has error code!
  1787 00002EED 4885ED              <1>     test rbp, rbp
  1788 00002EF0 0F85A3000000        <1>     jnz .pathReentry
  1789                              <1> ;Now check if the command we recieved included an absolute path.
  1790                              <1> ;If so, we don't do path substitution and just fail at this point
  1791 00002EF6 488D353CD4FFFF      <1>     lea rsi, cmdPathSpec
  1792 00002EFD 66AD                <1>     lodsw   ;Get the first two chars
  1793 00002EFF 3A0524D1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1794 00002F05 0F84B6EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1795 00002F0B 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1796 00002F0D 7412                <1>     je .pathGetEnv
  1797 00002F0F 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1798 00002F12 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1799 00002F14 AC                  <1>     lodsb   ;Get the third char
  1800 00002F15 3A050ED1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1801 00002F1B 0F84A0EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1802                              <1> .pathGetEnv:
  1803                              <1> ;Now get a pointer to the environment and search for PATH=
  1804                              <1> ;We only take the final portion of the path and add it to each path componant
  1805                              <1> ;This agrees with DOS 3.3
  1806 00002F21 E83B0B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1807 00002F26 0F8495EAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1808                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1809                              <1>     ;Now we know we dont have to keep track of chars!!
  1810 00002F2C 488D3D34E0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1811 00002F33 E8830B0000          <1>     call searchForEnvVar
  1812 00002F38 0F8283EAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1813 00002F3E 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1814 00002F41 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1815                              <1> .pathRejoin:
  1816 00002F48 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1817 00002F4B 0F8470EAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1818 00002F51 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1819 00002F54 488D3D87D5FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1820                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1821                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1822                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1823                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  1824 00002F5B E886090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1825 00002F60 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1826 00002F63 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1827 00002F66 48FFCF              <1>     dec rdi ;Point to the null terminator
  1828 00002F69 8A05BAD0FFFF        <1>     mov al, byte [pathSep]
  1829 00002F6F 3847FF              <1>     cmp byte [rdi - 1], al
  1830 00002F72 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  1831 00002F74 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1832                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  1833 00002F75 488D35DDD1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1834 00002F7C E825090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1835 00002F81 488D355AD5FFFF      <1>     lea rsi, searchSpec 
  1836 00002F88 488D3DAAD3FFFF      <1>     lea rdi, cmdPathSpec
  1837 00002F8F E802080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1838 00002F94 E926FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1839                              <1> .pathReentry:
  1840 00002F99 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1841 00002F9D 0F841EEAFFFF        <1>     je badCmdError
  1842                              <1> ;Currently, because we dont swap drives, we wont print this message.
  1843                              <1> ;Not really a big deal...
  1844                              <1>     ;cmp al, errBadDrv
  1845                              <1>     ;jne .pathDrvOk
  1846                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  1847                              <1>     ;mov eax, 0900h
  1848                              <1>     ;int 21h
  1849                              <1> ;.pathDrvOk:
  1850 00002FA3 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1851 00002FA6 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1852 00002FA9 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1853                              <1> 
  1854                              <1> .prepAndSearch:
  1855                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1856                              <1> ;cmdPathSpec and null terminates. 
  1857                              <1> ;Input: cmdFcb name + ext setup. 
  1858                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1859                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1860 00002FAB 51                  <1>     push rcx
  1861 00002FAC 56                  <1>     push rsi
  1862 00002FAD 57                  <1>     push rdi
  1863 00002FAE 488D3D84D3FFFF      <1>     lea rdi, cmdPathSpec 
  1864 00002FB5 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1865 00002FB8 E8C5080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1866 00002FBD 488D3595D1FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1867 00002FC4 E8DD080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1868 00002FC9 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1869 00002FCE 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1870 00002FD0 CD21                <1>     int 21h
  1871 00002FD2 5F                  <1>     pop rdi
  1872 00002FD3 5E                  <1>     pop rsi
  1873 00002FD4 59                  <1>     pop rcx
  1874                              <1>     return
    13                              <2> %%_ret:
    14 00002FD5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1875                              <1> 
  1876                              <1> set:
  1877 00002FD6 F605CDD0FFFFFF      <1>     test byte [arg1Flg], -1
  1878 00002FDD 7539                <1>     jnz .editEnv
  1879                              <1>     ;Here we just print the environment.
  1880 00002FDF E87D0A0000          <1>     call checkEnvGoodAndGet 
  1881 00002FE4 0F847AE9FFFF        <1>     jz badEnvSpaceError
  1882                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1883 00002FEA 4889F7              <1>     mov rdi, rsi
  1884 00002FED 4889F2              <1>     mov rdx, rsi
  1885                              <1> .findLp:
  1886 00002FF0 B9FFFFFFFF          <1>     mov ecx, -1
  1887 00002FF5 31C0                <1>     xor eax, eax
  1888                              <1> .scanLp:
  1889 00002FF7 F2AE                <1>     repne scasb
  1890 00002FF9 75FC                <1>     jne .scanLp
  1891 00002FFB F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1892                              <1>     ;Else, we now print this environment variable and CRLF it
  1893                              <1>     ;rdx points to the start of the string aleady
  1894                              <1>     ;ecx has the bytes to print
  1895 00002FFD BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1896 00003002 B800400000          <1>     mov eax, 4000h  ;Print to handle
  1897 00003007 CD21                <1>     int 21h
  1898 00003009 E86D050000          <1>     call printCRLF
  1899 0000300E 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1900                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003011 74(D5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1901 00003013 4889FA              <1>     mov rdx, rdi   
  1902 00003016 EBD8                <1>     jmp short .findLp
  1903                              <1> .editEnv:
  1904 00003018 E8440A0000          <1>     call checkEnvGoodAndGet
  1905 0000301D 0F8441E9FFFF        <1>     jz badEnvSpaceError
  1906 00003023 0FB60581D0FFFF      <1>     movzx eax, byte [arg1Off]
  1907 0000302A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1908 00003031 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1909                              <1> .altEp:
  1910 00003034 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1911 00003037 B00D                <1>     mov al, CR              ;Search for the CR
  1912 00003039 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1913 00003041 89CB                <1>     mov ebx, ecx            ;Save this count 
  1914 00003043 53                  <1>     push rbx                ;Save this count on the stack too!
  1915 00003044 F2AE                <1>     repne scasb             ;Now get the length of this env string
  1916 00003046 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1917 00003048 66891D02D8FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1918 0000304F 59                  <1>     pop rcx                 ;Get the char count back!
  1919 00003050 89CB                <1>     mov ebx, ecx            
  1920 00003052 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1921 00003055 B03D                <1>     mov al, "="             ;Scan for an equals sign
  1922 00003057 F2AE                <1>     repne scasb
  1923 00003059 0F85FCE8FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1924 0000305F 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1925 00003061 66891DEBD7FFFF      <1>     mov word [envVarNamSz], bx
  1926 00003068 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1927 0000306B 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1928 0000306D 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1929 0000306E 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1930 00003071 E8450A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  1931 00003076 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1932 00003078 E86C0A0000          <1>     call envFree            ;Free the var in rsi
  1933                              <1> .editNewEnv:
  1934 0000307D E8A00A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1935 00003082 E8C00A0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1936 00003087 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1937 00003088 31C0                <1>     xor eax, eax            ;Prepare null length!
  1938 0000308A 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1939 00003090 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1940 00003093 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1941 00003095 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1942 00003097 663B0DB3D7FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1943 0000309E 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1944                              <1> .reallocTry:
  1945                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1946                              <1>     ; we proceed with the environment size.
  1947 000030A0 E8B70A0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1948 000030A5 7319                <1>     jnc .reallocOk
  1949 000030A7 0F84B7E8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1950                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1951                              <1>     ; partially the variable into the env. If so we do that. If the name
  1952                              <1>     ; cannot fit, we don't bother
  1953                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1954 000030AD 663B0D9FD7FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1955                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000030B4 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000030B6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1956 000030B7 E8A8E8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1957 000030BC FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1958 000030BE EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1959                              <1> .reallocOk:
  1960                              <1>     ;Here we have all the space to just copy the full path
  1961 000030C0 0FB70D8AD7FFFF      <1>     movzx ecx, word [envVarSz]
  1962                              <1> .nameCp:
  1963                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1964                              <1> ;Always enough memory for name= here
  1965 000030C7 AC                  <1>     lodsb
  1966 000030C8 E8EC060000          <1>     call ucChar
  1967 000030CD AA                  <1>     stosb
  1968 000030CE 66FFC9              <1>     dec cx      ;Always decrement this count
  1969 000030D1 3C3D                <1>     cmp al, "="
  1970 000030D3 75F2                <1>     jne .nameCp
  1971                              <1> .exitNameCp:
  1972 000030D5 AC                  <1>     lodsb
  1973 000030D6 3C0D                <1>     cmp al, CR
  1974 000030D8 7405                <1>     je .exitCp
  1975 000030DA AA                  <1>     stosb
  1976 000030DB FFC9                <1>     dec ecx
  1977 000030DD 75F6                <1>     jnz .exitNameCp
  1978                              <1> .exitCp:
  1979 000030DF 31C0                <1>     xor eax, eax
  1980 000030E1 66AB                <1>     stosw   ;Store the final null word
  1981                              <1>     return
    13                              <2> %%_ret:
    14 000030E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1982                              <1> .delEnvVar:
  1983                              <1>     ;rsi -> Start of the envvar name in user buffer
  1984 000030E4 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1985 000030E7 E8CF090000          <1>     call searchForEnvVar    ;Look for the environment variable
  1986 000030EC 7205                <1>     jc .delEnvVarSkip
  1987 000030EE E8F6090000          <1>     call envFree    ;Free the env var at rsi
  1988                              <1> .delEnvVarSkip:
  1989 000030F3 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  1990                              <1>     return
    13                              <2> %%_ret:
    14 000030F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1991                              <1> 
  1992                              <1> pathEdit:
  1993                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  1994                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  1995                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  1996                              <1> ; end there. Error with too many arguments error!
  1997                              <1> ;If after the equals sign there is nothing, we just print the path!
  1998                              <1> ;Gotta process the command line ourselves first
  1999 000030F5 E867090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2000 000030FA 0F8464E8FFFF        <1>     jz badEnvSpaceError
  2001                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2002 00003100 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2003 00003107 E8AD000000          <1>     call .skipPathDelimiters
  2004 0000310C 3C0D                <1>     cmp al, CR
  2005 0000310E 7466                <1>     je .printPath
  2006                              <1> ;Else use the set command to setup the path in the searchSpec.
  2007 00003110 56                  <1>     push rsi    ;Save the first char of the command line string
  2008 00003111 488D354FDEFFFF      <1>     lea rsi, pathEVar
  2009 00003118 488D3DC3D3FFFF      <1>     lea rdi, searchSpec
  2010 0000311F E872060000          <1>     call strcpy
  2011 00003124 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2012 00003127 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2013 00003128 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2014                              <1> .cpLp:
  2015 0000312A AC                  <1>     lodsb
  2016 0000312B 3C0D                <1>     cmp al, CR
  2017 0000312D 7411                <1>     je .cpLpExit
  2018 0000312F E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2019 00003134 740A                <1>     je .cpLpExit
  2020 00003136 E87E060000          <1>     call ucChar ;Uppercase the char
  2021 0000313B AA                  <1>     stosb       ;Store it
  2022 0000313C FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2023 0000313E EBEA                <1>     jmp short .cpLp
  2024                              <1> .cpLpExit:
  2025                              <1>     ;Remove trailing semicolons
  2026 00003140 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2027 00003144 7507                <1>     jne .cpLpNoIntervene
  2028 00003146 FFC9                <1>     dec ecx     ;Reduce the count by one
  2029 00003148 48FFCF              <1>     dec rdi     ;Go back a char
  2030 0000314B EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2031                              <1> .cpLpNoIntervene:
  2032 0000314D B00D                <1>     mov al, CR  ;Now we store the terminator!
  2033 0000314F AA                  <1>     stosb       ;Store it!
  2034 00003150 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2035 00003156 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2036 0000315D FFC1                <1>     inc ecx     ;Add the CR for copying over
  2037 0000315F 488D357CD3FFFF      <1>     lea rsi, searchSpec
  2038 00003166 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2039 0000316D 57                  <1>     push rdi
  2040 0000316E F3A4                <1>     rep movsb
  2041 00003170 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2042 00003171 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2043                              <1> .printPath:
  2044 00003176 488D3DEADDFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2045 0000317D E839090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2046 00003182 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2047 00003184 4889F7              <1>     mov rdi, rsi        
  2048 00003187 E823060000          <1>     call strlen         ;Get the length of the path in rdi
  2049 0000318C 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2050 00003192 7411                <1>     je .noPathPrnt      ;Print no path!
  2051 00003194 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2052 00003196 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2053 00003199 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2054 0000319E B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2055 000031A3 EB0C                <1>     jmp short .pathExit
  2056                              <1> .noPathPrnt:
  2057 000031A5 488D15C8DAFFFF      <1>     lea rdx, noPath
  2058 000031AC B800090000          <1>     mov eax, 0900h
  2059                              <1> .pathExit:
  2060 000031B1 CD21                <1>     int 21h
  2061 000031B3 E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2062                              <1>     return
    13                              <2> %%_ret:
    14 000031B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2063                              <1> .skipPathDelimiters:
  2064                              <1> ;Input: rsi -> Start of string to parse
  2065                              <1> ;Output: rsi -> First non-delimiter char of string
  2066                              <1> ;        al = First non delim char
  2067 000031B9 AC                  <1>     lodsb
  2068 000031BA E806000000          <1>     call .isALPathDelimiter
  2069 000031BF 74F8                <1>     je .skipPathDelimiters
  2070 000031C1 48FFCE              <1>     dec rsi
  2071                              <1>     return
    13                              <2> %%_ret:
    14 000031C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2072                              <1> .isALPathDelimiter:
  2073                              <1> ;Same as before without semicolon
  2074 000031C5 3C20                <1>     cmp al, SPC
  2075                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031C7 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2076 000031C9 3C09                <1>     cmp al, TAB
  2077                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031CB 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2078 000031CD 3C2C                <1>     cmp al, ","
  2079                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000031CF 74(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2080 000031D1 3C3D                <1>     cmp al, "="
  2081                              <1>     return
    13                              <2> %%_ret:
    14 000031D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2082                              <1> 
  2083                              <1> prompt:
  2084 000031D4 E888080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2085 000031D9 0F8485E7FFFF        <1>     jz badEnvSpaceError
  2086                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2087 000031DF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2088 000031E6 E8E0050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2089 000031EB 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2090 000031EE 742C                <1>     je .reset   ;Reset if so
  2091 000031F0 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2092 000031F1 488D3543DDFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2093 000031F8 488D3DE3D2FFFF      <1>     lea rdi, searchSpec
  2094 000031FF B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2095 00003204 F3A4                <1>     rep movsb
  2096 00003206 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2097 00003207 31C9                <1>     xor ecx, ecx    ;Get char count
  2098                              <1> .cp:    ;Now copy the user string over
  2099 00003209 AC                  <1>     lodsb
  2100 0000320A AA                  <1>     stosb 
  2101 0000320B 3C0D                <1>     cmp al, CR
  2102 0000320D 7404                <1>     je .cpOk
  2103 0000320F FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2104 00003211 EBF6                <1>     jmp short .cp
  2105                              <1> .cpOk:
  2106 00003213 488D35C8D2FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2107 0000321A EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2108                              <1> .reset:
  2109                              <1> ;Delete the environment variable!
  2110 0000321C 488D3518DDFFFF      <1>     lea rsi, promptEVar 
  2111 00003223 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2112                              <1> .goSet:
  2113 00003225 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2114 0000322B 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2115 00003232 FFC1                <1>     inc ecx     ;Include CR in copy
  2116 00003234 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2117 0000323B 57                  <1>     push rdi
  2118 0000323C F3A4                <1>     rep movsb
  2119 0000323E 5E                  <1>     pop rsi
  2120 0000323F E9F0FDFFFF          <1>     jmp set.altEp
  2121                              <1> 
  2122                              <1> batLaunch:
  2123                              <1> ;Preps and launches a batch file!
  2124 00003244 488D1505000000      <1>     lea rdx, .batMsg
  2125 0000324B E932030000          <1>     jmp printString
  2126 00003250 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2126 00003259 70726F636573736F72- <1>
  2126 00003262 206E6F7420696D706C- <1>
  2126 0000326B 656D656E7465640D0A- <1>
  2126 00003274 24                  <1>
  2127                              <1> 
  2128                              <1> echo:
  2129 00003275 F6052ECEFFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2130 0000327C 752A                <1>     jnz .argGiven
  2131 0000327E 488D15E0DAFFFF      <1>     lea rdx, echoIs
  2132 00003285 E8F8020000          <1>     call printString
  2133 0000328A 488D15BADAFFFF      <1>     lea rdx, onMes
  2134 00003291 488D0DADDAFFFF      <1>     lea rcx, offMes
  2135 00003298 F605FFCDFFFFFF      <1>     test byte [echoFlg], -1
  2136 0000329F 480F44D1            <1>     cmovz rdx, rcx
  2137 000032A3 E9DA020000          <1>     jmp printString
  2138                              <1> .argGiven:
  2139 000032A8 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2140 000032AF 0FB605F5CDFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2141 000032B6 4801C6              <1>     add rsi, rax
  2142 000032B9 AC                  <1>     lodsb   ;Get this char
  2143 000032BA 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2144 000032BD E8F7040000          <1>     call ucChar
  2145 000032C2 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2146 000032C4 755A                <1>     jne .directEcho
  2147 000032C6 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2148 000032C9 E8EB040000          <1>     call ucChar
  2149 000032CE 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2150 000032D0 751B                <1>     jne .checkOff
  2151 000032D2 56                  <1>     push rsi
  2152 000032D3 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2153 000032DA E8EC040000          <1>     call skipDelimiters
  2154 000032DF 803E0D              <1>     cmp byte [rsi], CR
  2155 000032E2 5E                  <1>     pop rsi
  2156 000032E3 753B                <1>     jne .directEcho ;If its not, just echo the string
  2157 000032E5 C605B2CDFFFFFF      <1>     mov byte [echoFlg], -1
  2158                              <1>     return
    13                              <2> %%_ret:
    14 000032EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2159                              <1> .checkOff:
  2160 000032ED 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2161 000032F0 E8C4040000          <1>     call ucChar
  2162 000032F5 3C46                <1>     cmp al, "F" ;Is it an F?
  2163 000032F7 7527                <1>     jne .directEcho ;No, just direct echo
  2164 000032F9 8A4602              <1>     mov al, byte [rsi + 2]
  2165 000032FC E8B8040000          <1>     call ucChar
  2166 00003301 3C46                <1>     cmp al, "F"
  2167 00003303 751B                <1>     jne .directEcho
  2168 00003305 56                  <1>     push rsi
  2169 00003306 4881C603000000      <1>     add rsi, 3
  2170 0000330D E8B9040000          <1>     call skipDelimiters
  2171 00003312 803E0D              <1>     cmp byte [rsi], CR
  2172 00003315 5E                  <1>     pop rsi
  2173 00003316 7508                <1>     jne .directEcho
  2174 00003318 C6057FCDFFFF00      <1>     mov byte [echoFlg], 0
  2175                              <1>     return
    13                              <2> %%_ret:
    14 0000331F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2176                              <1> .directEcho: 
  2177 00003320 AC                  <1>     lodsb
  2178 00003321 3C0D                <1>     cmp al, CR
  2179 00003323 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2180 00003329 88C2                <1>     mov dl, al
  2181 0000332B E8C2020000          <1>     call outChar
  2182 00003330 EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003332 53                  <1>     push rbx
    11 00003333 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003335 803DF8CCFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 0000333C 7240                <1>     jb .usDate
    14 0000333E 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003340 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003345 E8B0000000          <1>     call .printFirst
    18 0000334A 8A15EFCCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003350 B402                <1>     mov ah, 02h
    20 00003352 CD21                <1>     int 21h
    21                              <1> 
    22 00003354 89C8                <1>     mov eax, ecx
    23 00003356 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 0000335B C1E805              <1>     shr eax, 5
    25 0000335E E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003363 8A15D6CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003369 B402                <1>     mov ah, 02h
    29 0000336B CD21                <1>     int 21h
    30                              <1> 
    31 0000336D 89C8                <1>     mov eax, ecx
    32 0000336F 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003374 C1E809              <1>     shr eax, 9
    34 00003377 5B                  <1>     pop rbx ;Get the year signature back
    35 00003378 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 0000337D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 0000337E 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003383 C1E805              <1>     shr eax, 5
    41 00003386 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 0000338B 8A15AECCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003391 B402                <1>     mov ah, 02h
    45 00003393 CD21                <1>     int 21h
    46                              <1> 
    47 00003395 89C8                <1>     mov eax, ecx
    48 00003397 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 0000339C E875000000          <1>     call .printSecond
    50                              <1> 
    51 000033A1 8A1598CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 000033A7 B402                <1>     mov ah, 02h
    53 000033A9 CD21                <1>     int 21h
    54                              <1> 
    55 000033AB 89C8                <1>     mov eax, ecx
    56 000033AD 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 000033B2 C1E809              <1>     shr eax, 9
    58 000033B5 5B                  <1>     pop rbx ;Get the year signature back
    59 000033B6 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 000033BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 000033BC 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 000033C1 C1E809              <1>     shr eax, 9
    65 000033C4 5B                  <1>     pop rbx ;Get the year signature back
    66 000033C5 E85C000000          <1>     call .printYear
    67                              <1> 
    68 000033CA 8A156FCCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 000033D0 B402                <1>     mov ah, 02h
    70 000033D2 CD21                <1>     int 21h
    71                              <1> 
    72 000033D4 89C8                <1>     mov eax, ecx
    73 000033D6 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 000033DB C1E805              <1>     shr eax, 5
    75 000033DE E833000000          <1>     call .printSecond
    76                              <1> 
    77 000033E3 8A1556CCFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 000033E9 B402                <1>     mov ah, 02h
    79 000033EB CD21                <1>     int 21h
    80                              <1> 
    81 000033ED 89C8                <1>     mov eax, ecx
    82 000033EF 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 000033F4 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 000033F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 000033FA 51                  <1>     push rcx
    89 000033FB E8E9050000          <1>     call getDecimalWord
    90 00003400 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003402 7504                <1>     jnz .skipSpace
    92 00003404 88CD                <1>     mov ch, cl
    93 00003406 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003408 88CA                <1>     mov dl, cl
    96 0000340A B402                <1>     mov ah, 02h
    97 0000340C CD21                <1>     int 21h
    98 0000340E 88EA                <1>     mov dl, ch
    99 00003410 B402                <1>     mov ah, 02h
   100 00003412 CD21                <1>     int 21h
   101 00003414 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003415 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003416 51                  <1>     push rcx
   105 00003417 E8CD050000          <1>     call getDecimalWord
   106 0000341C 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 0000341E 75E8                <1>     jnz .skipSpace
   108 00003420 88CD                <1>     mov ch, cl
   109 00003422 B130                <1>     mov cl, "0"
   110 00003424 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003426 05BC070000          <1>     add eax, 1980
   113 0000342B 51                  <1>     push rcx
   114 0000342C 53                  <1>     push rbx
   115 0000342D E8B7050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003432 5B                  <1>     pop rbx
   117 00003433 84DB                <1>     test bl, bl
   118 00003435 740C                <1>     jz .twoDigitYear
   119 00003437 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003439 B402                <1>     mov ah, 02h
   121 0000343B CD21                <1>     int 21h
   122 0000343D 88EA                <1>     mov dl, ch  ;Print the second digit
   123 0000343F B402                <1>     mov ah, 02h
   124 00003441 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003443 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003446 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003448 B402                <1>     mov ah, 02h
   129 0000344A CD21                <1>     int 21h
   130 0000344C 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 0000344E B402                <1>     mov ah, 02h
   132 00003450 CD21                <1>     int 21h
   133 00003452 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003453 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003454 89C1                <1>     mov ecx, eax
   142 00003456 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 0000345B C1E80B              <1>     shr eax, 11
   144 0000345E 803DE0CBFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003465 750B                <1>     jne .ampm
   146 00003467 E85A000000          <1>     call .printHours
   147 0000346C E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003471 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003472 3D0C000000          <1>     cmp eax, 12
   151 00003477 7713                <1>     ja .pm
   152 00003479 7416                <1>     je .pm2
   153 0000347B E846000000          <1>     call .printHours
   154 00003480 E81D000000          <1>     call .printMinutes
   155 00003485 B261                <1>     mov dl, "a"
   156 00003487 B402                <1>     mov ah, 02h
   157 00003489 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 0000348B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 0000348C 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003491 E830000000          <1>     call .printHours
   163 00003496 E807000000          <1>     call .printMinutes
   164 0000349B B270                <1>     mov dl, "p"
   165 0000349D B402                <1>     mov ah, 02h
   166 0000349F CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 000034A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 000034A2 8A1599CBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 000034A8 B402                <1>     mov ah, 02h
   171 000034AA CD21                <1>     int 21h
   172                              <1> 
   173 000034AC 89C8                <1>     mov eax, ecx
   174 000034AE 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 000034B3 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 000034B6 51                  <1>     push rcx
   178 000034B7 E82D050000          <1>     call getDecimalWord
   179 000034BC 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 000034BE 7514                <1>     jnz .skipSpace
   181 000034C0 88CD                <1>     mov ch, cl
   182 000034C2 B130                <1>     mov cl, "0"
   183 000034C4 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 000034C6 51                  <1>     push rcx
   186 000034C7 E81D050000          <1>     call getDecimalWord
   187 000034CC 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 000034CE 7504                <1>     jnz .skipSpace
   189 000034D0 88CD                <1>     mov ch, cl
   190 000034D2 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 000034D4 88CA                <1>     mov dl, cl
   193 000034D6 B402                <1>     mov ah, 02h
   194 000034D8 CD21                <1>     int 21h
   195 000034DA 88EA                <1>     mov dl, ch
   196 000034DC B402                <1>     mov ah, 02h
   197 000034DE CD21                <1>     int 21h
   198 000034E0 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 000034E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 000034E2 F605B5CBFFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000034E9 74(E1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000034EB 488D3D49DAFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 000034F2 E8C4050000          <1>     call searchForEnvVar
   206 000034F7 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 000034F9 E8F9000000          <1>     call putCWDInPrompt
   209 000034FE E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003503 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003504 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 0000350B AC                  <1>     lodsb   ;Get the char
   216 0000350C 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000350E 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003510 3C24                <1>     cmp al, "$"
   219 00003512 7409                <1>     je .escapeChar
   220 00003514 88C2                <1>     mov dl, al
   221 00003516 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 0000351B EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 0000351D AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 0000351E E896020000          <1>     call ucChar ;Uppercase this char in al
   226 00003523 488D1D2A000000      <1>     lea rbx, .pTbl
   227 0000352A B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 0000352F 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00003531 740D                <1>     je .escapeFnd
   231 00003533 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 0000353A FFC9                <1>     dec ecx
   233 0000353C 75F1                <1>     jnz .escapeLp
   234 0000353E EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00003540 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 00003547 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000354B 4801D8              <1>     add rax, rbx                ;Add these
   239 0000354E 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 0000354F FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00003551 5E                  <1>     pop rsi
   242 00003552 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00003554 42                  <1>     db "B", 
   247 00003555 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 00003557 44                  <1>     db "D", 
   249 00003558 5701                <1>     dw printFmtDate - .pTbl        ;Current date
   250 0000355A 45                  <1>     db "E", 
   251 0000355B 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 0000355D 47                  <1>     db "G", 
   253 0000355E 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00003560 48                  <1>     db "H", 
   255 00003561 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00003563 4C                  <1>     db "L", 
   257 00003564 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 00003566 4E                  <1>     db "N", 
   259 00003567 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 00003569 50                  <1>     db "P", 
   261 0000356A A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 0000356C 51                  <1>     db "Q", 
   263 0000356D 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 0000356F 54                  <1>     db "T", 
   265 00003570 F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00003572 56                  <1>     db "V", 
   267 00003573 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00003575 5F                  <1>     db "_", 
   269 00003576 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 00003578 24                  <1>     db "$", 
   271 00003579 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 0000357B 488D15D0D3FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 00003582 B800090000          <1>     mov eax, 0900h  ;Print string
   278 00003587 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003589 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 0000358A 488D1534D6FFFF      <1>     lea rdx, dosVer
   283 00003591 B409                <1>     mov ah, 09h ;Print String
   284 00003593 CD21                <1>     int 21h
   285 00003595 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00003597 CD21                <1>     int 21h
   287 00003599 50                  <1>     push rax    ;Save minor version
   288 0000359A E89D010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 0000359F E8B5010000          <1>     call printPackedBCD ;Print al
   290 000035A4 B22E                <1>     mov dl, "."
   291 000035A6 B402                <1>     mov ah, 02h
   292 000035A8 CD21                <1>     int 21h
   293 000035AA 58                  <1>     pop rax
   294 000035AB 88E0                <1>     mov al, ah  ;Get the minor version low
   295 000035AD E88A010000          <1>     call hexToBCD
   296 000035B2 E8A2010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 000035B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 000035B8 B21B                <1>     mov dl, ESC
   300 000035BA EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 000035BC B224                <1>     mov dl, "$"
   304 000035BE EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 000035C0 B23D                <1>     mov dl, "="
   308 000035C2 EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 000035C4 B27C                <1>     mov dl, "|"
   312 000035C6 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 000035C8 B23E                <1>     mov dl, ">"
   316 000035CA EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 000035CC B23C                <1>     mov dl, "<"
   320 000035CE EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 000035D0 488D15E9D7FFFF      <1>     lea rdx, backSpace
   324 000035D7 B903000000          <1>     mov ecx, 3
   325 000035DC BB01000000          <1>     mov ebx, 1
   326 000035E1 B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 000035E6 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 000035E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 000035E9 E8A3010000          <1>     call getCurrentDrive
   332 000035EE 0441                <1>     add al, "A" ;Convert to letter
   333 000035F0 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 000035F2 B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 000035F4 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 000035F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 000035F7 E895010000          <1>     call getCurrentDrive
   340 000035FC 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 000035FE FEC2                <1>     inc dl
   342 00003600 0441                <1>     add al, "A" ;Convert to letter
   343 00003602 B43A                <1>     mov ah, ":"
   344 00003604 488D3D4FCAFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 0000360B 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 0000360D 8A0516CAFFFF        <1>     mov al, byte [pathSep]
   347 00003613 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00003614 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00003616 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00003619 CD21                <1>     int 21h
   351 0000361B 721F                <1>     jc .badDrive
   352 0000361D E88D010000          <1>     call strlen
   353 00003622 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 00003628 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 0000362D BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 00003632 488D1521CAFFFF      <1>     lea rdx, currDirStr
   358 00003639 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 0000363B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 0000363C 488D154AD6FFFF      <1>     lea rdx, badDrvMsg
   363 00003643 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 00003648 B42C                <1>     mov ah, 2Ch ;DOS get time
   367 0000364A CD21                <1>     int 21h
   368                              <1>     ;CH = hour (0-23)
   369                              <1> 	;CL = minutes (0-59)
   370                              <1> 	;DH = seconds (0-59)
   371                              <1> 	;DL = hundredths (0-99)
   372 0000364C 880D56D0FFFF        <1>     mov byte [td1], cl
   373 00003652 882D51D0FFFF        <1>     mov byte [td2], ch
   374 00003658 88154CD0FFFF        <1>     mov byte [td3], dl
   375 0000365E 883547D0FFFF        <1>     mov byte [td4], dh
   376 00003664 0FB6C5              <1>     movzx eax, ch
   377 00003667 E85AFEFFFF          <1>     call printTime.printHours
   378 0000366C 8A15CFC9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   379 00003672 B402                <1>     mov ah, 02h
   380 00003674 CD21                <1>     int 21h
   381 00003676 0FB6052BD0FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   382 0000367D E834FEFFFF          <1>     call printTime.printMinutesAlt
   383 00003682 8A15B9C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   384 00003688 B402                <1>     mov ah, 02h
   385 0000368A CD21                <1>     int 21h
   386 0000368C 0FB60518D0FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   387 00003693 E81EFEFFFF          <1>     call printTime.printMinutesAlt
   388 00003698 B22E                <1>     mov dl, "."
   389 0000369A B402                <1>     mov ah, 02h
   390 0000369C CD21                <1>     int 21h
   391 0000369E 0FB60505D0FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   392 000036A5 E80CFEFFFF          <1>     call printTime.printMinutesAlt
   393                              <1>     return
    13                              <2> %%_ret:
    14 000036AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   394                              <1> 
   395                              <1> printFmtDate:
   396                              <1> ;Outputs the formatted date
   397 000036AB B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   398 000036B0 CD21                <1>     int 21h
   399                              <1> 	;AL = day of the week (0=Sunday)
   400                              <1> 	;CX = year (1980-2099)
   401                              <1> 	;DH = month (1-12)
   402                              <1> 	;DL = day (1-31)
   403 000036B2 66890DEFCFFFFF      <1>     mov word [td1], cx
   404 000036B9 8815EBCFFFFF        <1>     mov byte [td3], dl
   405 000036BF 8835E6CFFFFF        <1>     mov byte [td4], dh
   406 000036C5 0FB6C0              <1>     movzx eax, al
   407 000036C8 89C3                <1>     mov ebx, eax
   408 000036CA D1E3                <1>     shl ebx, 1   ;Multiply by 2
   409 000036CC 01D8                <1>     add eax, ebx ;Make it 3 times 
   410 000036CE 488D153AD4FFFF      <1>     lea rdx, dayName
   411 000036D5 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   412 000036D9 B903000000          <1>     mov ecx, 3  ;Print three chars
   413 000036DE BB01000000          <1>     mov ebx, 1  ;STDOUT
   414 000036E3 B440                <1>     mov ah, 40h ;Write to handle
   415 000036E5 CD21                <1>     int 21h
   416 000036E7 B220                <1>     mov dl, " "
   417 000036E9 E804FFFFFF          <1>     call outChar
   418 000036EE E8FFFEFFFF          <1>     call outChar
   419                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   420                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   421                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   422 000036F3 0FB705AECFFFFF      <1>     movzx eax, word [td1]   ;Get this word
   423 000036FA C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   424 000036FD 0FB61DA7CFFFFF      <1>     movzx ebx, byte [td4]
   425 00003704 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   426 00003707 09D8                <1>     or eax, ebx ;Add this date to eax
   427 00003709 0FB61D9ACFFFFF      <1>     movzx ebx, byte [td3]
   428 00003710 09D8                <1>     or eax, ebx
   429 00003712 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   430 00003717 E816FCFFFF          <1>     call printDate
   431                              <1>     return
    13                              <2> %%_ret:
    14 0000371C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> BCDtoHex:
   434                              <1> ;Converts a BCD value to a Hex byte
   435                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   436 0000371D 51                  <1>     push rcx
   437 0000371E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   438 00003721 89C1                <1>     mov ecx, eax    ;Save al in ecx
   439 00003723 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   440 00003728 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   441 0000372E C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   442                              <1> .bth:
   443 00003731 050A000000          <1>     add eax, 10
   444 00003736 FFC9                <1>     dec ecx
   445 00003738 75F7                <1>     jnz .bth
   446 0000373A 59                  <1>     pop rcx
   447 0000373B C3                  <1>     ret
   448                              <1> 
   449                              <1> hexToBCD:
   450                              <1> ;Converts a Hex byte into two BCD digits
   451                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   452 0000373C 51                  <1>     push rcx
   453 0000373D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   454 00003740 31C9                <1>     xor ecx, ecx
   455                              <1> .htb0:
   456 00003742 3D0A000000          <1>     cmp eax, 10
   457 00003747 7209                <1>     jb .htb1
   458 00003749 2D0A000000          <1>     sub eax, 10
   459 0000374E FFC1                <1>     inc ecx
   460 00003750 EBF0                <1>     jmp short .htb0
   461                              <1> .htb1:
   462 00003752 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   463 00003755 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   464 00003757 59                  <1>     pop rcx
   465 00003758 C3                  <1>     ret
   466                              <1> 
   467                              <1> printPackedBCD:
   468                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   469                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   470                              <1> ;Preserves all registers
   471 00003759 50                  <1>     push rax
   472 0000375A 52                  <1>     push rdx
   473 0000375B 88C4                <1>     mov ah, al
   474 0000375D 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   475 0000375F 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   476 00003762 7508                <1>     jnz .upperNybble
   477 00003764 B220                <1>     mov dl, " "
   478 00003766 B402                <1>     mov ah, 02h
   479 00003768 CD21                <1>     int 21h
   480 0000376A EB0E                <1>     jmp short .lowerNybble
   481                              <1> .upperNybble:
   482 0000376C 50                  <1>     push rax
   483 0000376D C0EC04              <1>     shr ah, 4
   484 00003770 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   485 00003773 88E2                <1>     mov dl, ah
   486 00003775 B402                <1>     mov ah, 02h ;Print DL
   487 00003777 CD21                <1>     int 21h
   488 00003779 58                  <1>     pop rax
   489                              <1> .lowerNybble:
   490 0000377A 0430                <1>     add al, "0"
   491 0000377C 88C2                <1>     mov dl, al
   492 0000377E B402                <1>     mov ah, 02h ;Print DL
   493 00003780 CD21                <1>     int 21h
   494 00003782 5A                  <1>     pop rdx
   495 00003783 58                  <1>     pop rax
   496                              <1>     return
    13                              <2> %%_ret:
    14 00003784 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1> 
   498                              <1> setDrive:
   499                              <1> ;Input: dl = 0 based Drive number to set to
   500                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   501                              <1> ;AX trashed.
   502 00003785 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   503 00003787 CD21                <1>     int 21h 
   504 00003789 E803000000          <1>     call getCurrentDrive
   505 0000378E 38D0                <1>     cmp al, dl  ;Is this the same drive?
   506                              <1>     return
    13                              <2> %%_ret:
    14 00003790 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> getCurrentDrive:
   508                              <1> ;Returns the 0 based current drive in al
   509 00003791 B419                <1>     mov ah, 19h
   510 00003793 CD21                <1>     int 21h
   511                              <1>     return
    13                              <2> %%_ret:
    14 00003795 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> strcpy:
   514                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   515                              <1> ;rsi -> Source
   516                              <1> ;rdi -> Destination
   517 00003796 51                  <1>     push rcx
   518 00003797 57                  <1>     push rdi
   519 00003798 4889F7              <1>     mov rdi, rsi
   520 0000379B E80F000000          <1>     call strlen ;Get the length of the string in rsi
   521 000037A0 5F                  <1>     pop rdi
   522 000037A1 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   523 000037A3 59                  <1>     pop rcx
   524                              <1>     return
    13                              <2> %%_ret:
    14 000037A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> strcpy2:
   527                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   528                              <1> ;rsi -> Source
   529                              <1> ;rdi -> Destination
   530 000037A5 56                  <1>     push rsi
   531 000037A6 57                  <1>     push rdi
   532 000037A7 E8EAFFFFFF          <1>     call strcpy 
   533 000037AC 5F                  <1>     pop rdi
   534 000037AD 5E                  <1>     pop rsi
   535                              <1>     return
    13                              <2> %%_ret:
    14 000037AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> strlen:
   538                              <1> ;Gets the length of a ASCIIZ string
   539                              <1> ;Input: rdi = Source buffer
   540                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   541 000037AF 50                  <1>     push rax
   542 000037B0 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   543 000037B5 CD2F                <1>     int 2fh
   544 000037B7 58                  <1>     pop rax
   545                              <1>     return
    13                              <2> %%_ret:
    14 000037B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> ucChar:
   548                              <1> ;Input: al = Char to uppercase
   549                              <1> ;Output: al = Adjusted char 
   550 000037B9 53                  <1>     push rbx
   551 000037BA 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   552 000037BD 50                  <1>     push rax    ;Push the char twice on the stack
   553 000037BE 50                  <1>     push rax
   554 000037BF B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   555 000037C4 CD2F                <1>     int 2fh         ;Returns the processed char in al
   556 000037C6 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   557 000037C9 5B                  <1>     pop rbx
   558                              <1>     return
    13                              <2> %%_ret:
    14 000037CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> skipDelimiters:
   561                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   562                              <1> ; command delimiters but a subset thereof. 
   563                              <1> ;These are the same across all codepages.
   564                              <1> ;Input: rsi must point to the start of the data string
   565                              <1> ;Output: rsi points to the first non-delimiter char
   566 000037CB 50                  <1>     push rax
   567                              <1> .l1:
   568 000037CC AC                  <1>     lodsb
   569 000037CD E807000000          <1>     call isALdelimiter
   570 000037D2 74F8                <1>     jz .l1
   571                              <1> .exit:
   572 000037D4 58                  <1>     pop rax
   573 000037D5 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   574                              <1>     return
    13                              <2> %%_ret:
    14 000037D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   575                              <1> 
   576                              <1> isALdelimiter:
   577                              <1> ;Returns: ZF=NZ if al is not a command separator 
   578                              <1> ;         ZF=ZE if al is a command separator
   579 000037D9 3C20                <1>     cmp al, " "
   580                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037DB 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   581 000037DD 3C3B                <1>     cmp al, ";"
   582                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037DF 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   583 000037E1 3C3D                <1>     cmp al, "="
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037E3 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000037E5 3C2C                <1>     cmp al, ","
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000037E7 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000037E9 3C09                <1>     cmp al, TAB
   588                              <1>     return
    13                              <2> %%_ret:
    14 000037EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> clearCommandState:
   591                              <1> ;Clears the command state
   592 000037EC 488D3DB7C8FFFF      <1>     lea rdi, cmdStatePtr
   593 000037F3 B907000000          <1>     mov ecx, cmdStateL
   594 000037F8 31C0                <1>     xor eax, eax
   595 000037FA F3AA                <1>     rep stosb
   596                              <1>     return
    13                              <2> %%_ret:
    14 000037FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> clearCommandLineState:
   599                              <1> ;Clears the command line state after a 0Dh encountered
   600 000037FD 488D3D9BC8FFFF      <1>     lea rdi, cmdLineStatePtr
   601 00003804 B912000000          <1>     mov ecx, cmdLineStateL
   602 00003809 31C0                <1>     xor eax, eax
   603 0000380B F3AA                <1>     rep stosb
   604 0000380D C70589C8FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   604 00003816 FF                  <1>
   605 00003817 C70585C8FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   605 00003820 FF                  <1>
   606                              <1> ;Close all handles from 5->MAX
   607 00003821 0FB70DFFC7FFFF      <1>     movzx ecx, word [numHdls]
   608 00003828 BB05000000          <1>     mov ebx, 5
   609                              <1> .lp:
   610 0000382D B43E                <1>     mov ah, 3Eh ;File close
   611 0000382F CD21                <1>     int 21h
   612 00003831 FFC3                <1>     inc ebx ;Goto next file
   613 00003833 39CB                <1>     cmp ebx, ecx
   614 00003835 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   615                              <1>     return
    13                              <2> %%_ret:
    14 00003837 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   616                              <1> 
   617                              <1> asciiFilenameToFCB:
   618                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   619                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   620                              <1> ;Also doesn't check if chars are valid
   621                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   622                              <1> ;Name is space padded.
   623                              <1> ;Input: rsi = ASCII string buffer
   624                              <1> ;       rdi = FCB name buffer
   625                              <1> ;Output: al = Char that terminated the source string 
   626 00003838 53                  <1>     push rbx    
   627 00003839 57                  <1>     push rdi
   628 0000383A B90B000000          <1>     mov ecx, 11
   629 0000383F B020                <1>     mov al, " "
   630 00003841 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   631 00003843 5F                  <1>     pop rdi
   632 00003844 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   633                              <1>     ;Preprocess for Dir Searches
   634 00003847 803E2E              <1>     cmp byte [rsi], "."
   635 0000384A 7509                <1>     jne .processName
   636 0000384C A4                  <1>     movsb   ;Store the first dot
   637 0000384D 803E2E              <1>     cmp byte [rsi], "."
   638 00003850 752C                <1>     jne .exitBadChar
   639 00003852 A4                  <1>     movsb
   640 00003853 EB29                <1>     jmp short .exitBadChar
   641                              <1> .processName:
   642 00003855 AC                  <1>     lodsb   ;Get the char in al
   643 00003856 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   644 00003858 7426                <1>     jz .exit
   645 0000385A 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   646 0000385C 7407                <1>     je .extSpace
   647 0000385E 3C2E                <1>     cmp al, "."
   648 00003860 740C                <1>     je .ext
   649 00003862 AA                  <1>     stosb   ;Store the char
   650 00003863 EBF0                <1>     jmp short .processName
   651                              <1> .extSpace:
   652                              <1> ;Now we scan for a period in the name
   653 00003865 AC                  <1>     lodsb   ;Get a char and increase rsi
   654 00003866 84C0                <1>     test al, al
   655 00003868 7416                <1>     jz .exit
   656 0000386A 3C2E                <1>     cmp al, "."     ;If al is not a period...
   657 0000386C 75F7                <1>     jne .extSpace   ; keep searching
   658                              <1> .ext:
   659 0000386E 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   660                              <1> .processExt:
   661 00003872 AC                  <1>     lodsb
   662 00003873 84C0                <1>     test al, al
   663 00003875 7409                <1>     jz .exit
   664 00003877 3C20                <1>     cmp al, " "
   665 00003879 7405                <1>     je .exit
   666 0000387B AA                  <1>     stosb
   667 0000387C EBF4                <1>     jmp short .processExt
   668                              <1> .exitBadChar:
   669 0000387E 30C0                <1>     xor al, al  ;Return a null terminator
   670                              <1> .exit:
   671 00003880 5B                  <1>     pop rbx
   672                              <1>     return
    13                              <2> %%_ret:
    14 00003881 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   673                              <1> 
   674                              <1> findLastPathComponant:
   675                              <1> ;Finds the last path componant of an ASCIIZ path string
   676                              <1> ;Input: rdi -> Head of the path to find last componant on
   677                              <1> ;Output: rdi -> Start of the last componant
   678 00003882 50                  <1>     push rax
   679 00003883 51                  <1>     push rcx
   680 00003884 31C9                <1>     xor ecx, ecx
   681 00003886 FFC9                <1>     dec ecx
   682 00003888 31C0                <1>     xor eax, eax
   683 0000388A F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   684 0000388C F7D1                <1>     not ecx     ;This gets the count of chars  
   685 0000388E 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   686 00003891 8A0592C7FFFF        <1>     mov al, byte [pathSep]
   687 00003897 FD                  <1>     std
   688 00003898 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   689 0000389A FC                  <1>     cld
   690 0000389B 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   691 0000389D 48FFC7              <1>     inc rdi     ;Point at pathsep
   692                              <1> .exit:
   693 000038A0 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   694 000038A3 59                  <1>     pop rcx
   695 000038A4 58                  <1>     pop rax
   696                              <1>     return
    13                              <2> %%_ret:
    14 000038A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   697                              <1> 
   698                              <1> FCBToAsciiz:
   699                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   700                              <1> ;Name is space padded too
   701                              <1> ;Input: rsi = FCB name buffer
   702                              <1> ;       rdi = ASCIIZ string buffer
   703 000038A6 B908000000          <1>     mov ecx, 8
   704 000038AB F3A4                <1>     rep movsb   ;Move the name over
   705                              <1> .scanNameSpace:
   706 000038AD 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   707 000038B1 750D                <1>     jne .ext
   708 000038B3 48FFCF              <1>     dec rdi
   709 000038B6 FFC1                <1>     inc ecx
   710 000038B8 81F908000000        <1>     cmp ecx, 8
   711 000038BE 72ED                <1>     jb .scanNameSpace
   712                              <1> .ext:
   713 000038C0 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   714 000038C5 7506                <1>     jne .validExt
   715 000038C7 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   716 000038CB 7415                <1>     je .exit
   717                              <1> .validExt:
   718 000038CD B02E                <1>     mov al, "." ;We have a valid extension, store a period
   719 000038CF AA                  <1>     stosb
   720 000038D0 B903000000          <1>     mov ecx, 3
   721 000038D5 F3A4                <1>     rep movsb   ;Move the three extension chars over
   722                              <1> .scanExtSpace:
   723 000038D7 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   724 000038DB 7505                <1>     jne .exit
   725 000038DD 48FFCF              <1>     dec rdi
   726 000038E0 EBF5                <1>     jmp short .scanExtSpace
   727                              <1> .exit:
   728 000038E2 31C0                <1>     xor eax, eax
   729 000038E4 AA                  <1>     stosb   ;Store a null at the end
   730                              <1>     return
    13                              <2> %%_ret:
    14 000038E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   731                              <1> 
   732                              <1> cpDelimOrCtrlStringToBufz:
   733                              <1> ;Copy a delimited or control char terminated string to a buffer
   734                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   735                              <1> ;       rdi -> Buffer to store null terminated string in
   736                              <1> ;Output: rsi -> First char past string end
   737                              <1> ;       rdi -> One char past null terminator on string buffer
   738 000038E6 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   739                              <1> .lp:
   740 000038E9 AC                  <1>     lodsb
   741 000038EA 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   742 000038EC 760A                <1>     jbe .exit
   743 000038EE E8E6FEFFFF          <1>     call isALdelimiter
   744 000038F3 7403                <1>     je .exit
   745 000038F5 AA                  <1>     stosb
   746 000038F6 EBF1                <1>     jmp short .lp
   747                              <1> .exit:
   748 000038F8 31C0                <1>     xor eax, eax
   749 000038FA AA                  <1>     stosb   ;Store a null terminator
   750                              <1>     return
    13                              <2> %%_ret:
    14 000038FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   751                              <1> 
   752                              <1> 
   753                              <1> cpDelimPathToBufz:
   754                              <1> ;Copy a delimited path into buffer and null terminate.
   755                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   756                              <1> ;       rdi -> Buffer to store null terminated path in
   757                              <1> ;Output: rsi -> First char past pathname delimiter
   758                              <1> ;       rdi -> One char past null terminator on pathname buffer
   759 000038FC 53                  <1>     push rbx
   760 000038FD 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   761 00003900 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   762                              <1> .lp:
   763 00003903 AC                  <1>     lodsb   ;Get the char
   764 00003904 3C0D                <1>     cmp al, CR
   765 00003906 7412                <1>     je .gotRedirPath
   766 00003908 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   767 0000390D 740B                <1>     jz .gotRedirPath 
   768 0000390F 3A0515C7FFFF        <1>     cmp al, byte [switchChar]
   769 00003915 7403                <1>     je .gotRedirPath
   770 00003917 AA                  <1>     stosb   ;Store this char and loop next char
   771 00003918 EBE9                <1>     jmp short .lp
   772                              <1> .gotRedirPath:
   773 0000391A 50                  <1>     push rax    ;Save the char on stack
   774 0000391B 30C0                <1>     xor al, al  ;Get null terminator char
   775 0000391D 4829FB              <1>     sub rbx, rdi
   776 00003920 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   777 00003927 7412                <1>     je .notColon
   778 00003929 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   779 00003930 7409                <1>     je .notColon
   780 00003932 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   781 00003936 7503                <1>     jne .notColon
   782 00003938 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   783                              <1> .notColon:
   784 0000393B AA                  <1>     stosb   ;Store the null terminator for the redir path
   785 0000393C 58                  <1>     pop rax ;Get back the char in al
   786 0000393D 5B                  <1>     pop rbx
   787                              <1>     return
    13                              <2> %%_ret:
    14 0000393E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   788                              <1> 
   789                              <1> buildCommandPath:
   790                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   791 0000393F 0FB60565C7FFFF      <1>     movzx eax, byte [arg1Off]
   792 00003946 4C8B05C2C6FFFF      <1>     mov r8, [pspPtr]
   793 0000394D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   794 00003954 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   795                              <1> copyArgumentToSearchSpec:
   796                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   797                              <1> ; and null terminates
   798 00003957 488D3D84CBFFFF      <1>     lea rdi, searchSpec
   799 0000395E E899FFFFFF          <1>     call cpDelimPathToBufz
   800                              <1>     return
    13                              <2> %%_ret:
    14 00003963 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> 
   802                              <1> scanForWildcards:
   803                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   804                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   805 00003964 50                  <1>     push rax
   806 00003965 56                  <1>     push rsi
   807                              <1> .lp:
   808 00003966 AC                  <1>     lodsb
   809 00003967 3C3F                <1>     cmp al, "?"
   810 00003969 740A                <1>     je .exit
   811 0000396B 3C2A                <1>     cmp al, "*"
   812 0000396D 7406                <1>     je .exit
   813 0000396F 84C0                <1>     test al, al
   814 00003971 75F3                <1>     jnz .lp
   815 00003973 FEC0                <1>     inc al  ;This will clear the ZF
   816                              <1> .exit:
   817 00003975 5E                  <1>     pop rsi
   818 00003976 58                  <1>     pop rax
   819                              <1>     return
    13                              <2> %%_ret:
    14 00003977 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> 
   821                              <1> printDecimalWord:
   822                              <1> ;Takes qword in rax and print it's decimal representation
   823                              <1> ;Takes the qword in eax and prints its decimal representation
   824 00003978 31C9                <1>     xor ecx, ecx
   825 0000397A 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   826 0000397C 85C0                <1>     test eax, eax
   827 0000397E 750C                <1>     jnz .notZero
   828 00003980 B930000000          <1>     mov ecx, "0"
   829 00003985 BD01000000          <1>     mov ebp, 1  ;Print one digit
   830 0000398A EB3E                <1>     jmp short .dpfb2
   831                              <1> .notZero:
   832 0000398C 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   833 0000398E BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   834                              <1> .dpfb0:
   835 00003993 FFC5                <1>     inc ebp
   836 00003995 81FD08000000        <1>     cmp ebp, 8
   837 0000399B 7206                <1>     jb .dpfb00
   838 0000399D 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   839 000039A1 EB04                <1>     jmp short .dpfb01
   840                              <1> .dpfb00:
   841 000039A3 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   842                              <1> .dpfb01:
   843 000039A7 31D2                <1>     xor edx, edx
   844 000039A9 48F7F6              <1>     div rsi
   845 000039AC 80C230              <1>     add dl, '0'
   846 000039AF 80FA39              <1>     cmp dl, '9'
   847 000039B2 7603                <1>     jbe .dpfb1
   848 000039B4 80C207              <1>     add dl, 'A'-'0'-10
   849                              <1> .dpfb1:
   850 000039B7 81FD08000000        <1>     cmp ebp, 8
   851 000039BD 7204                <1>     jb .dpfb10
   852 000039BF 88D3                <1>     mov bl, dl ;Add the bottom bits
   853 000039C1 EB02                <1>     jmp short .dpfb11
   854                              <1> .dpfb10:
   855 000039C3 88D1                <1>     mov cl, dl    ;Save remainder byte
   856                              <1> .dpfb11:
   857 000039C5 4885C0              <1>     test rax, rax
   858 000039C8 75C9                <1>     jnz .dpfb0
   859                              <1> .dpfb2:
   860 000039CA 81FD08000000        <1>     cmp ebp, 8
   861 000039D0 7208                <1>     jb .dpfb20
   862 000039D2 88DA                <1>     mov dl, bl
   863 000039D4 48C1EB08            <1>     shr rbx, 8
   864 000039D8 EB06                <1>     jmp short .dpfb21
   865                              <1> .dpfb20:
   866 000039DA 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   867 000039DC 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   868                              <1> .dpfb21:
   869 000039E0 B402                <1>     mov ah, 02h
   870 000039E2 CD21                <1>     int 21h
   871 000039E4 FFCD                <1>     dec ebp
   872 000039E6 75E2                <1>     jnz .dpfb2
   873                              <1>     return
    13                              <2> %%_ret:
    14 000039E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   874                              <1> 
   875                              <1> getDecimalWord:
   876                              <1> ;Works on MAX A dword in eax
   877                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   878 000039E9 31C9                <1>     xor ecx, ecx
   879 000039EB 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   880 000039ED BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   881                              <1> .dpfb0:
   882 000039F2 FFC5                <1>     inc ebp
   883 000039F4 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   884 000039F8 31D2                <1>     xor edx, edx
   885 000039FA 48F7F3              <1>     div rbx
   886 000039FD 80C230              <1>     add dl, '0'
   887 00003A00 80FA39              <1>     cmp dl, '9'
   888 00003A03 7603                <1>     jbe .dpfb1
   889 00003A05 80C207              <1>     add dl, 'A'-'0'-10
   890                              <1> .dpfb1:
   891 00003A08 88D1                <1>     mov cl, dl    ;Save remainder byte
   892 00003A0A 4885C0              <1>     test rax, rax
   893 00003A0D 75E3                <1>     jnz .dpfb0
   894                              <1>     return
    13                              <2> %%_ret:
    14 00003A0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   895                              <1> 
   896                              <1> freezePC:
   897 00003A10 488D1598D4FFFF      <1>     lea rdx, memBad1
   898 00003A17 B409                <1>     mov ah, 09h
   899 00003A19 CD21                <1>     int 21h
   900                              <1> .altEP:
   901 00003A1B 488D15B6D4FFFF      <1>     lea rdx, memBad3
   902 00003A22 B409                <1>     mov ah, 09h
   903 00003A24 CD21                <1>     int 21h
   904                              <1> .lp:
   905 00003A26 F390                <1>     pause
   906 00003A28 F4                  <1>     hlt
   907 00003A29 EBFB                <1>     jmp short .lp
   908                              <1> 
   909                              <1> setDTA:
   910 00003A2B 50                  <1>     push rax
   911 00003A2C 52                  <1>     push rdx
   912 00003A2D 488D1534C7FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   913 00003A34 B8001A0000          <1>     mov eax, 1A00h
   914 00003A39 CD21                <1>     int 21h
   915 00003A3B 5A                  <1>     pop rdx
   916 00003A3C 58                  <1>     pop rax
   917                              <1>     return
    13                              <2> %%_ret:
    14 00003A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   918                              <1> 
   919                              <1> getDTA:
   920 00003A3E 488D1523C7FFFF      <1>     lea rdx, cmdFFBlock
   921                              <1>     return
    13                              <2> %%_ret:
    14 00003A45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   922                              <1> 
   923                              <1> ;-------------------------------
   924                              <1> ; Environment utility functions
   925                              <1> ;-------------------------------
   926                              <1> 
   927                              <1> cmpEnvVar:
   928                              <1> ;Checks that we have found the environment variable we are looking for.
   929                              <1> ;Input: rsi -> Environment var to verify the name of
   930                              <1> ;       rdi -> Environment var name to compare against
   931                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   932 00003A46 56                  <1>     push rsi
   933 00003A47 57                  <1>     push rdi
   934 00003A48 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   935                              <1> .lp:
   936 00003A4B AC                  <1>     lodsb               ;Pick up from user string
   937 00003A4C E868FDFFFF          <1>     call ucChar         ;Upper case it!
   938 00003A51 3807                <1>     cmp byte [rdi], al  
   939 00003A53 7509                <1>     jne .exit
   940 00003A55 3C3D                <1>     cmp al, "="         ;Are we at the end?
   941 00003A57 7405                <1>     je .exit
   942 00003A59 48FFC7              <1>     inc rdi
   943 00003A5C EBED                <1>     jmp short .lp
   944                              <1> .exit:
   945 00003A5E 5F                  <1>     pop rdi
   946 00003A5F 5E                  <1>     pop rsi
   947                              <1>     return
    13                              <2> %%_ret:
    14 00003A60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   948                              <1> 
   949                              <1> checkEnvGoodAndGet:
   950                              <1> ;Gets the env ptr and checks that it is double null terminated.
   951                              <1> ;Output:
   952                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   953                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   954                              <1> ;           rsi -> Environment pointer
   955 00003A61 50                  <1>     push rax
   956 00003A62 51                  <1>     push rcx
   957 00003A63 57                  <1>     push rdi
   958 00003A64 4150                <1>     push r8
   959 00003A66 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   960 00003A6A 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   961 00003A6D 741A                <1>     jz .badExit
   962 00003A6F 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   963 00003A72 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   964                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   965 00003A75 31C0                <1>     xor eax, eax
   966                              <1> .pathNulScan:
   967 00003A77 F2AE                <1>     repne scasb
   968 00003A79 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   969 00003A7B 740C                <1>     jz .badExit
   970 00003A7D 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   971 00003A7F 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   972 00003A81 31C0                <1>     xor eax, eax
   973 00003A83 FFC0                <1>     inc eax ;Clear the ZF
   974 00003A85 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   975                              <1> .badExit:
   976 00003A89 4158                <1>     pop r8
   977 00003A8B 5F                  <1>     pop rdi
   978 00003A8C 59                  <1>     pop rcx
   979 00003A8D 58                  <1>     pop rax
   980                              <1>     return
    13                              <2> %%_ret:
    14 00003A8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   981                              <1> 
   982                              <1> 
   983                              <1> findEnvSpace:
   984                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   985                              <1> ; free space in the pointer and a count of free space in the environment.
   986                              <1> ;If count is zero, pointer is not to be used.
   987                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   988 00003A8F 31C9                <1>     xor ecx, ecx
   989 00003A91 31C0                <1>     xor eax, eax    ;Clear eax too
   990 00003A93 51                  <1>     push rcx
   991 00003A94 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   992 00003A99 59                  <1>     pop rcx
   993                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003A9A 74(8E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   994 00003A9C 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   995 00003AA0 FFC9                <1>     dec ecx ;Make into a large counter
   996 00003AA2 4889F7              <1>     mov rdi, rsi    
   997                              <1> .endsearch:
   998 00003AA5 F2AE                <1>     repne scasb ;Scan
   999 00003AA7 803F00              <1>     cmp byte [rdi], 0
  1000 00003AAA 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1001                              <1>     ;Here we are at the end of the environment
  1002 00003AAC F7D9                <1>     neg ecx
  1003 00003AAE FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1004 00003AB0 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1005 00003AB3 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1006 00003AB6 29C8                <1>     sub eax, ecx
  1007 00003AB8 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1008                              <1>     return
    13                              <2> %%_ret:
    14 00003ABA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1009                              <1> 
  1010                              <1> searchForEnvVar:
  1011                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1012                              <1> ;Input: rdi -> Var name to look for.
  1013                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1014 00003ABB 57                  <1>     push rdi
  1015 00003ABC 51                  <1>     push rcx
  1016 00003ABD 52                  <1>     push rdx
  1017 00003ABE 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1018 00003AC2 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1019                              <1> .varLp:
  1020 00003AC5 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1021 00003AC8 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1022 00003ACD 7416                <1>     je .varFound
  1023 00003ACF 31C0                <1>     xor eax, eax        ;Search for a null
  1024 00003AD1 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1025 00003AD4 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1026 00003AD9 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1027 00003ADB 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1028 00003ADD 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1029 00003ADF 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1030 00003AE2 EBE1                <1>     jmp short .varLp    ;And scan again!
  1031                              <1> .varNotFound:
  1032 00003AE4 F9                  <1>     stc
  1033                              <1> .varFound:
  1034 00003AE5 59                  <1>     pop rcx
  1035 00003AE6 5A                  <1>     pop rdx
  1036 00003AE7 5F                  <1>     pop rdi
  1037                              <1>     return
    13                              <2> %%_ret:
    14 00003AE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> envFree:
  1040                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1041                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1042                              <1> ; free byte of the environment!
  1043                              <1> ;Input: rsi -> Variable to free.
  1044                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1045                              <1> ;        ecx = Number of free bytes in env
  1046 00003AE9 4889F7              <1>     mov rdi, rsi
  1047 00003AEC 31C0                <1>     xor eax, eax
  1048                              <1> .freeLp:
  1049 00003AEE 803F00              <1>     cmp byte [rdi], 0
  1050 00003AF1 7403                <1>     je .exitLp
  1051 00003AF3 AA                  <1>     stosb
  1052 00003AF4 EBF8                <1>     jmp short .freeLp
  1053                              <1> .exitLp:
  1054                              <1> ;rdi points to the terminating null of the var we just deleted
  1055                              <1> ;rsi points to the start of the free space
  1056 00003AF6 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1057 00003AF9 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1058 00003AFE 7504                <1>     jne .prepPullup
  1059 00003B00 31C0                <1>     xor eax, eax
  1060 00003B02 EB0E                <1>     jmp short .cleanEnv
  1061                              <1> .prepPullup:
  1062 00003B04 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1063                              <1> .pullUp:
  1064 00003B07 AC                  <1>     lodsb
  1065 00003B08 AA                  <1>     stosb
  1066 00003B09 84C0                <1>     test al, al ;Did we pick up a zero
  1067 00003B0B 75FA                <1>     jne .pullUp ;If not, keep copying
  1068 00003B0D 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1069 00003B10 75F5                <1>     jne .pullUp
  1070                              <1> ;We are at the end of the copy!
  1071                              <1> .cleanEnv:
  1072 00003B12 AA                  <1>     stosb   ;Store the famous second null
  1073 00003B13 48FFCF              <1>     dec rdi ;without incrementing it!!
  1074 00003B16 E807000000          <1>     call getFreeSpace
  1075 00003B1B 31C0                <1>     xor eax, eax
  1076 00003B1D 51                  <1>     push rcx
  1077 00003B1E F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1078 00003B20 59                  <1>     pop rcx
  1079                              <1>     return
    13                              <2> %%_ret:
    14 00003B21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1080                              <1> 
  1081                              <1> getFreeSpace:
  1082                              <1> ;Output: ecx = Number of free bytes in the environment block
  1083 00003B22 56                  <1>     push rsi
  1084 00003B23 57                  <1>     push rdi
  1085 00003B24 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1086 00003B29 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1087 00003B2D 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1088 00003B30 E805000000          <1>     call getEnvSize ;Get total block size
  1089 00003B35 29F9                <1>     sub ecx, edi    ;Get difference!
  1090 00003B37 5F                  <1>     pop rdi
  1091 00003B38 5E                  <1>     pop rsi
  1092                              <1>     return
    13                              <2> %%_ret:
    14 00003B39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1093                              <1> 
  1094                              <1> getEnvSize:
  1095                              <1> ;Gets the number of bytes in the environment allocation
  1096                              <1> ;Output: ecx = Number of bytes in the environment!
  1097 00003B3A 53                  <1>     push rbx
  1098 00003B3B 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1099 00003B3F 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1100 00003B42 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1101 00003B45 5B                  <1>     pop rbx
  1102                              <1>     return
    13                              <2> %%_ret:
    14 00003B46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1103                              <1> 
  1104                              <1> getPtrToEndOfEnv:
  1105                              <1> ;Gets ptr to end of the environment
  1106                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1107 00003B47 50                  <1>     push rax
  1108 00003B48 51                  <1>     push rcx
  1109 00003B49 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1110 00003B4D 31C0                <1>     xor eax, eax
  1111 00003B4F 31C9                <1>     xor ecx, ecx
  1112 00003B51 FFC9                <1>     dec ecx
  1113                              <1> .lp:
  1114 00003B53 F2AE                <1>     repne scasb
  1115 00003B55 3807                <1>     cmp byte [rdi], al
  1116 00003B57 75FA                <1>     jne .lp
  1117 00003B59 59                  <1>     pop rcx
  1118 00003B5A 58                  <1>     pop rax
  1119                              <1>     return
    13                              <2> %%_ret:
    14 00003B5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1120                              <1> 
  1121                              <1> growEnvBlock:
  1122                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1123                              <1> ; newly allocated 160 byte block of the environment.
  1124                              <1> ;Returns:   CF=NC - Environment grown ok!
  1125                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1126                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1127 00003B5C 50                  <1>     push rax
  1128 00003B5D 53                  <1>     push rbx
  1129 00003B5E 51                  <1>     push rcx
  1130 00003B5F 56                  <1>     push rsi
  1131 00003B60 57                  <1>     push rdi
  1132 00003B61 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1133 00003B66 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1134 00003B6B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1135 00003B6F 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1136 00003B72 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1137 00003B78 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1138 00003B7E 7321                <1>     jae .tooLarge
  1139                              <1>     ;Here ZF must be NZ.
  1140 00003B80 4150                <1>     push r8
  1141 00003B82 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1142 00003B86 B8004A0000          <1>     mov eax, 4A00h
  1143 00003B8B CD21                <1>     int 21h
  1144 00003B8D 4158                <1>     pop r8
  1145 00003B8F 720A                <1>     jc .exit
  1146                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1147                              <1>     ; so we add 160 zeros to the count of bytes
  1148 00003B91 81C1A0000000        <1>     add ecx, 0A0h
  1149 00003B97 31C0                <1>     xor eax, eax
  1150 00003B99 F3AA                <1>     rep stosb
  1151                              <1> .exit:
  1152 00003B9B 5F                  <1>     pop rdi
  1153 00003B9C 5E                  <1>     pop rsi
  1154 00003B9D 59                  <1>     pop rcx
  1155 00003B9E 5B                  <1>     pop rbx
  1156 00003B9F 58                  <1>     pop rax
  1157                              <1>     return
    13                              <2> %%_ret:
    14 00003BA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1158                              <1> .tooLarge:
  1159 00003BA1 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1160 00003BA4 F9                  <1>     stc             ;Set CF
  1161 00003BA5 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003BA7 53                  <1>     push rbx
    25 00003BA8 51                  <1>     push rcx
    26 00003BA9 52                  <1>     push rdx
    27 00003BAA 57                  <1>     push rdi
    28 00003BAB 56                  <1>     push rsi
    29 00003BAC FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003BAD 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003BB0 488D159BCDFFFF      <1>     lea rdx, crlf
    33 00003BB7 E8C6F9FFFF          <1>     call printString
    34                              <1> 
    35 00003BBC 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003BC2 B90C000000          <1>     mov ecx, 0Ch
    37 00003BC7 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003BC9 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003BCC 480FB7FF            <1>     movzx rdi, di
    40 00003BD0 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003BD3 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003BD7 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003BDA 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003BDD 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003BE4 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003BE8 E895F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003BED 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003BF4 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003BFB F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003BFE 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003C02 E87BF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003C07 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003C0A 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003C10 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003C17 E866F9FFFF          <1>     call printString
    59 00003C1C 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003C1E 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003C21 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003C23 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003C25 E851F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003C2A 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003C31 E84CF9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003C36 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003C39 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003C3B 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003C42 E83BF9FFFF          <1>     call printString
    76 00003C47 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003C4E E82FF9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003C53 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003C56 7418                <1>     jz .userFail
    81 00003C58 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003C5F E81EF9FFFF          <1>     call printString
    83 00003C64 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003C6B E812F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003C70 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003C73 7418                <1>     jz .userMsgEnd
    88 00003C75 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003C7C E801F9FFFF          <1>     call printString
    90 00003C81 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003C88 E8F5F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003C8D 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003C94 E8E9F8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003C99 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003C9B 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003CA2 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003CA4 CD21                <1>     int 21h ;Get char in al
   100 00003CA6 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003CA8 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003CAA 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003CAC AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003CAD 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003CAF FFC1                <1>     inc ecx
   107 00003CB1 81F904000000        <1>     cmp ecx, 4
   108 00003CB7 75F3                <1>     jne .uip1
   109 00003CB9 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003CBE E8B8F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003CC3 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003CC5 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003CC7 7427                <1>     je .cehExit
   116 00003CC9 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003CCB 740F                <1>     je .viIgnore
   118 00003CCD 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003CCF 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003CD1 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003CD4 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003CDA EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003CDC F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003CDF 0F8440FFFFFF        <1>     jz .userInput
   127 00003CE5 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003CE7 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003CEA 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003CF0 5E                  <1>     pop rsi
   133 00003CF1 5F                  <1>     pop rdi
   134 00003CF2 5A                  <1>     pop rdx
   135 00003CF3 59                  <1>     pop rcx
   136 00003CF4 5B                  <1>     pop rbx
   137 00003CF5 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003CF7 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003CFC 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003D03 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003D04 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003D06 B402                <1>     mov ah, 02h
   145 00003D08 CD21                <1>     int 21h ;Print char
   146 00003D0A E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003D0C E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003D11 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003D1A 746563742024202020  <1>
   151 00003D23 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003D2C 6E6974202420202020  <1>
   152 00003D35 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003D3E 202420202020202020  <1>
   153 00003D47 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003D50 6F6D6D616E64202420  <1>
   154 00003D59 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003D62 202020202020202020  <1>
   155 00003D6B 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003D74 737420242020202020  <1>
   156 00003D7D 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003D86 202020202020202020  <1>
   157 00003D8F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003D98 656469612024202020  <1>
   158 00003DA1 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003DAA 7420466F756E642024  <1>
   159 00003DB3 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003DBC 706572202420202020  <1>
   160 00003DC5 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003DCE 6C7420242020202020  <1>
   161 00003DD7 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003DE0 742024202020202020  <1>
   162 00003DE9 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003DF2 61696C757265202420  <1>
   163                              <1> 
   164 00003DFB 64726976652024      <1> .drive      db "drive $"
   165 00003E02 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003E0B 64696E672024        <1>
   166 00003E11 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003E1A 74696E672024        <1>
   167 00003E20 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003E26 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003E2D 526574727924        <1> .retrymsg   db "Retry$"
   170 00003E33 4661696C24          <1> .failmsg    db "Fail$"
   171 00003E38 2C2024              <1> .betweenMsg db ", $"
   172 00003E3B 3F2024              <1> .endMsg     db "? $"
   173 00003E3E 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003E42 F605E2C1FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003E49 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003E4B 50                  <1>     push rax
   180 00003E4C 53                  <1>     push rbx
   181 00003E4D 488B05C3C1FFFF      <1>     mov rax, qword [realParent]
   182 00003E54 488B1DB4C1FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003E5B 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003E5F 5B                  <1>     pop rbx
   185 00003E60 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003E61 F9                  <1>     stc     ;Set CF to kill the task
   188 00003E62 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(A73B0000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(423E0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(A82E0000)    <1>     lea rdx, launchChild.appRet
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(34000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(580F0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(02190000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(500F0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(52090000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(E6220000)        <1>     call time
    90 0000011A E8(81220000)        <1>     call date
    91 0000011F 488D15(52090000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(B9370000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(653E0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(382B0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(6E0F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

