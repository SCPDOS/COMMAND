     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17 0000009D 00                  <1> inCritical  db 0    ;Up if processing a command.
    18 0000009E FF                  <1> echoFlg     db -1   ;Global Echo flag, starts up!
    19 0000009F FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    20                              <1> 
    21                              <1> cmdLineStatePtr:
    22 000000A1 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    23 000000A2 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    24 000000A4 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000AA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    34 000000AC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    35 000000AD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    36 000000AE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    37                              <1> 
    38 000000AF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    39 000000B0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    40 000000B1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    41                              <1> 
    42 000000B2 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    43                              <1> cmdStateL equ $ - cmdStatePtr
    44                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    45                              <1> 
    46                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    47 000000B3 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    48 000000B4 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    49 000000BC 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    49 000000C5 000000000000000000- <1>
    49 000000CE 000000000000000000- <1>
    49 000000D7 000000000000000000- <1>
    49 000000E0 000000000000000000- <1>
    49 000000E9 000000000000000000- <1>
    49 000000F2 000000000000000000- <1>
    49 000000FB 000000000000000000- <1>
    49 00000104 00000000000000      <1>
    50 0000010B 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    50 00000114 000000000000000000- <1>
    50 0000011D 000000000000000000- <1>
    50 00000126 000000000000000000- <1>
    50 0000012F 000000000000000000- <1>
    50 00000138 000000000000000000- <1>
    50 00000141 000000000000000000- <1>
    50 0000014A 000000000000000000- <1>
    50 00000153 00000000000000      <1>
    51                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    52                              <1> 
    53                              <1> ;Structs and strings
    54                              <1> 
    55 0000015A 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    55 00000163 00000000000000      <1>
    56 0000016A 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    56 00000173 000000000000000000- <1>
    56 0000017C 000000000000000000- <1>
    56 00000185 000000000000000000- <1>
    56 0000018E 00000000000000      <1>
    57                              <1> 
    58 00000195 000000000000000000- <1> launchBlock db execProg_size dup (0)
    58 0000019E 000000000000000000- <1>
    58 000001A7 000000000000000000- <1>
    58 000001B0 0000000000          <1>
    59                              <1> 
    60 000001B5 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    60 000001BE 000000000000000000- <1>
    60 000001C7 000000000000000000- <1>
    60 000001D0 000000000000000000- <1>
    60 000001D9 000000000000000000- <1>
    60 000001E2 000000000000000000- <1>
    60 000001EB 000000000000000000- <1>
    60 000001F4 000000000000000000- <1>
    60 000001FD 000000000000000000- <1>
    60 00000206 000000000000000000- <1>
    60 0000020F 000000000000000000- <1>
    60 00000218 000000000000000000- <1>
    60 00000221 000000000000000000- <1>
    60 0000022A 000000000000000000- <1>
    60 00000233 00000000            <1>
    61                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    62 00000237 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    62 00000240 000000000000000000- <1>
    62 00000249 000000000000000000- <1>
    62 00000252 000000000000000000- <1>
    62 0000025B 000000000000000000- <1>
    62 00000264 000000000000000000- <1>
    62 0000026D 000000000000000000- <1>
    62 00000276 000000000000000000- <1>
    62 0000027F 000000000000000000- <1>
    62 00000288 000000000000000000- <1>
    62 00000291 000000000000000000- <1>
    62 0000029A 000000000000000000- <1>
    62 000002A3 000000000000000000- <1>
    62 000002AC 000000000000000000- <1>
    62 000002B5 00000000            <1>
    63 000002B9 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    63 000002C2 000000000000000000- <1>
    63 000002CB 000000000000000000- <1>
    63 000002D4 000000000000000000- <1>
    63 000002DD 000000000000000000- <1>
    63 000002E6 000000000000000000- <1>
    63 000002EF 000000000000000000- <1>
    63 000002F8 000000000000000000- <1>
    63 00000301 000000000000000000- <1>
    63 0000030A 000000000000000000- <1>
    63 00000313 000000000000000000- <1>
    63 0000031C 000000000000000000- <1>
    63 00000325 000000000000000000- <1>
    63 0000032E 000000000000000000- <1>
    63 00000337 00000000            <1>
    64 0000033B 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    64 00000344 000000000000000000- <1>
    64 0000034D 000000000000000000- <1>
    64 00000356 000000000000000000- <1>
    64 0000035F 000000000000000000- <1>
    64 00000368 000000000000000000- <1>
    64 00000371 000000000000000000- <1>
    64 0000037A 000000000000000000- <1>
    64 00000383 00000000000000      <1>
    65 0000038A 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    65 00000393 0000000000          <1>
    66                              <1> 
    67 00000398 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    67 000003A1 000000000000000000- <1>
    67 000003AA 000000000000000000- <1>
    67 000003B3 000000000000000000- <1>
    67 000003BC 000000000000000000- <1>
    67 000003C5 000000000000000000- <1>
    67 000003CE 000000000000000000- <1>
    67 000003D7 000000000000000000- <1>
    67 000003E0 00000000000000      <1>
    68 000003E7 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    68 000003F0 000000000000000000- <1>
    68 000003F9 000000000000000000- <1>
    68 00000402 000000000000000000- <1>
    68 0000040B 000000000000000000- <1>
    68 00000414 000000000000000000- <1>
    68 0000041D 000000000000000000- <1>
    68 00000426 000000000000000000- <1>
    68 0000042F 00000000000000      <1>
    69                              <1> 
    70                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    71 00000436 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    71 0000043F 000000000000000000- <1>
    71 00000448 000000000000000000- <1>
    71 00000451 000000000000000000- <1>
    71 0000045A 000000000000000000- <1>
    71 00000463 000000000000000000- <1>
    71 0000046C 000000000000000000- <1>
    71 00000475 000000000000000000- <1>
    71 0000047E 00000000000000      <1>
    72 00000485 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    72 0000048E 000000000000000000- <1>
    72 00000497 000000000000000000- <1>
    72 000004A0 000000000000000000- <1>
    72 000004A9 000000000000000000- <1>
    72 000004B2 000000000000000000- <1>
    72 000004BB 000000000000000000- <1>
    72 000004C4 000000000000000000- <1>
    72 000004CD 00000000000000      <1>
    73                              <1> 
    74 000004D4 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    75 000004DC 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    76                              <1> 
    77                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    78                              <1> ; a really long invalid DOS path for PATH to work properly.
    79 000004E4 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    79 000004ED 000000000000000000- <1>
    79 000004F6 000000000000000000- <1>
    79 000004FF 000000000000000000- <1>
    79 00000508 000000000000000000- <1>
    79 00000511 000000000000000000- <1>
    79 0000051A 000000000000000000- <1>
    79 00000523 000000000000000000- <1>
    79 0000052C 000000000000000000- <1>
    79 00000535 000000000000000000- <1>
    79 0000053E 000000000000000000- <1>
    79 00000547 000000000000000000- <1>
    79 00000550 000000000000000000- <1>
    79 00000559 000000000000000000- <1>
    79 00000562 000000000000000000- <1>
    79 0000056B 000000000000000000- <1>
    79 00000574 000000000000000000- <1>
    79 0000057D 000000000000000000- <1>
    79 00000586 000000000000000000- <1>
    79 0000058F 000000000000000000- <1>
    79 00000598 000000000000000000- <1>
    79 000005A1 000000000000000000- <1>
    79 000005AA 000000000000000000- <1>
    79 000005B3 000000000000000000- <1>
    79 000005BC 000000000000000000- <1>
    79 000005C5 000000000000000000- <1>
    79 000005CE 000000000000000000- <1>
    79 000005D7 000000000000000000- <1>
    79 000005E0 0000000000000000    <1>
    80                              <1> 
    81                              <1> ;Internal Function vars
    82                              <1> ;Dir Vars
    83 000005E8 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    84                              <1> ;                                   Bit[1] set => /P or /p specified
    85                              <1> ;                                   Bit[2] set => A file/path specified
    86 000005E9 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    87 000005EA 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
    88 000005EE 00                  <1> dirDrv      db 0    ;0 based drive number to use
    89 000005EF 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    89 000005F8 000000000000000000- <1>
    89 00000601 000000000000000000- <1>
    89 0000060A 000000000000000000- <1>
    89 00000613 000000000000000000- <1>
    89 0000061C 000000000000000000- <1>
    89 00000625 000000000000000000- <1>
    89 0000062E 000000000000000000- <1>
    89 00000637 000000000000000000- <1>
    89 00000640 000000000000000000- <1>
    89 00000649 000000000000000000- <1>
    89 00000652 000000000000000000- <1>
    89 0000065B 000000000000000000- <1>
    89 00000664 000000000000000000- <1>
    89 0000066D 00000000            <1>
    90 00000671 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    90 0000067A 3F3F3F3F3F3F3F      <1>
    91                              <1> dirWideType equ 1
    92                              <1> dirPageType equ 2
    93                              <1> dirFileType equ 4
    94                              <1> ;Volume Vars
    95                              <1> volFcb:
    96                              <1>     istruc exFcb
    97 00000681 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    98 00000682 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    99 00000688 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   100 00000689 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   101 00000691 3F3F3F              <1>     at exFcb.fileext,   db "???"
   102 00000694 00000000            <1>     at exFcb.curBlock,  dd 0
   103 00000698 00<rep 15h>         <1>     iend 
   104                              <1> 
   105                              <1> ;Time/Date vars
   106 000006AD 00                  <1> td1 db 0    ;Minutes/Year
   107 000006AE 00                  <1> td2 db 0    ;Hours/Zero
   108 000006AF 00                  <1> td3 db 0    ;Hundredths/Day
   109 000006B0 00                  <1> td4 db 0    ;Seconds/Month
   110                              <1> 
   111                              <1> ;Rename/Copy/Delete Buffers
   112                              <1> delPath:
   113 000006B1 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   113 000006BA 000000000000000000- <1>
   113 000006C3 000000000000000000- <1>
   113 000006CC 000000000000000000- <1>
   113 000006D5 000000000000000000- <1>
   113 000006DE 000000000000000000- <1>
   113 000006E7 000000000000000000- <1>
   113 000006F0 000000000000000000- <1>
   113 000006F9 000000000000000000- <1>
   113 00000702 000000000000000000- <1>
   113 0000070B 000000000000000000- <1>
   113 00000714 000000000000000000- <1>
   113 0000071D 000000000000000000- <1>
   113 00000726 000000000000000000- <1>
   113 0000072F 00000000            <1>
   114 00000733 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   114 0000073C 000000000000000000- <1>
   114 00000745 000000000000000000- <1>
   114 0000074E 000000000000000000- <1>
   114 00000757 000000000000000000- <1>
   114 00000760 000000000000000000- <1>
   114 00000769 000000000000000000- <1>
   114 00000772 000000000000000000- <1>
   114 0000077B 000000000000000000- <1>
   114 00000784 000000000000000000- <1>
   114 0000078D 000000000000000000- <1>
   114 00000796 000000000000000000- <1>
   114 0000079F 000000000000000000- <1>
   114 000007A8 000000000000000000- <1>
   114 000007B1 00000000            <1>
   115 000007B5 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   116 000007BD 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   117 000007C5 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   117 000007CE 2020                <1>
   118                              <1> ;Copy vars
   119 000007D0 FFFF                <1> sourceHdl   dw -1
   120 000007D2 FFFF                <1> destHdl     dw -1
   121 000007D4 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   122 000007D6 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time, if we cant alloc
   122 000007DF 000000000000000000- <1>
   122 000007E8 000000000000000000- <1>
   122 000007F1 000000000000000000- <1>
   122 000007FA 000000000000000000- <1>
   122 00000803 000000000000000000- <1>
   122 0000080C 000000000000000000- <1>
   122 00000815 000000000000000000- <1>
   122 0000081E 000000000000000000- <1>
   122 00000827 000000000000000000- <1>
   122 00000830 000000000000000000- <1>
   122 00000839 000000000000000000- <1>
   122 00000842 000000000000000000- <1>
   122 0000084B 000000000000000000- <1>
   122 00000854 0000                <1>
   123 00000856 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   124 0000085E 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   125 00000860 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   126 00000864 00                  <1> bCpFlg      db 0    ;Copy state flag
   127                              <1> 
   128                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file. Else, binary
   129                              <1> ascDes      equ 2   ;Set if ascii write to file. Else, binary.
   130                              <1> wcSrc       equ 4   ;Set if wc's in source pattern. Display source file names.
   131                              <1> mod1Cpy     equ 8   ;Set if we are copying files to new disk with same names
   132                              <1> mod2Cpy     equ 10h ;Set if we are copying files with new names
   133                              <1> mod3Cpy     equ 20h ;Set if we are concatenating files to a single destination
   134                              <1> 
   135                              <1> ;Environment manipulation vars
   136 00000865 0000                <1> envVarSz        dw 0    ;Env var size
   137 00000867 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000869 03444952            <1>     db 3, "DIR"
     8 0000086D 411B                <1>     dw dir - startLbl
     9                              <1> 
    10 0000086F 024344              <1>     db 2, "CD"
    11 00000872 2520                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000874 054348444952        <1>     db 5, "CHDIR"
    14 0000087A 2520                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000087C 024D44              <1>     db 2, "MD"
    17 0000087F A020                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000881 054D4B444952        <1>     db 5, "MKDIR"
    20 00000887 A020                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000889 025244              <1>     db 2, "RD"
    23 0000088C E920                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000088E 05524D444952        <1>     db 5, "RMDIR"
    26 00000894 E920                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000896 0344454C            <1>     db 3, "DEL"
    29 0000089A D222                <1>     dw erase - startLbl
    30                              <1> 
    31 0000089C 054552415345        <1>     db 5, "ERASE"
    32 000008A2 D222                <1>     dw erase - startLbl
    33                              <1> 
    34 000008A4 0444415445          <1>     db 4, "DATE"
    35 000008A9 1524                <1>     dw date - startLbl
    36                              <1> 
    37 000008AB 0454494D45          <1>     db 4, "TIME"
    38 000008B0 C325                <1>     dw time - startLbl
    39                              <1> 
    40 000008B2 04434F5059          <1>     db 4, "COPY"
    41 000008B7 3321                <1>     dw copy - startLbl
    42                              <1> 
    43 000008B9 0443545459          <1>     db 4, "CTTY"
    44 000008BE EC26                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008C0 03434C53            <1>     db 3, "CLS"
    47 000008C4 8727                <1>     dw cls - startLbl
    48                              <1> 
    49 000008C6 05425245414B        <1>     db 5, "BREAK"
    50 000008CC F927                <1>     dw break - startLbl
    51                              <1> 
    52 000008CE 06564552494659      <1>     db 6, "VERIFY"
    53 000008D5 7A28                <1>     dw verify - startLbl
    54                              <1> 
    55 000008D7 0652454E414D45      <1>     db 6, "RENAME"
    56 000008DE F728                <1>     dw rename - startLbl
    57                              <1> 
    58 000008E0 0352454E            <1>     db 3, "REN"
    59 000008E4 F728                <1>     dw rename - startLbl
    60                              <1>     
    61 000008E6 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008EF F42C                <1>     dw truename - startLbl
    63                              <1> 
    64 000008F1 03564552            <1>     db 3, "VER"
    65 000008F5 DA2E                <1>     dw version - startLbl
    66                              <1> 
    67 000008F7 03564F4C            <1>     db 3, "VOL"
    68 000008FB 1B2E                <1>     dw volume - startLbl
    69                              <1> 
    70 000008FD 034D454D            <1>     db 3, "MEM"
    71 00000901 1E2F                <1>     dw memory - startLbl
    72                              <1> 
    73 00000903 0445584954          <1>     db 4, "EXIT"
    74 00000908 1B31                <1>     dw exit - startLbl
    75                              <1> 
    76 0000090A 0454595045          <1>     db 4, "TYPE"
    77 0000090F 6830                <1>     dw type - startLbl
    78                              <1> 
    79 00000911 054C4142454C        <1>     db 5, "LABEL"
    80 00000917 452D                <1>     dw label - startLbl
    81                              <1> 
    82 00000919 0450415448          <1>     db 4, "PATH"
    83 0000091E 7234                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000920 03534554            <1>     db 3, "SET"
    86 00000924 5333                <1>     dw set - startLbl
    87                              <1> 
    88 00000926 0650524F4D5054      <1>     db 6, "PROMPT"
    89 0000092D 5135                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 0000092F 054D4B4C424C        <1>     db 5, "MKLBL"
    92 00000935 6F2D                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000937 05524D4C424C        <1>     db 5, "RMLBL"
    95 0000093D AA2D                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 0000093F 05524E4C424C        <1>     db 5, "RNLBL"
    98 00000945 E52D                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000947 05544F554348        <1>     db 5, "TOUCH"
   101 0000094D E72A                <1>     dw touch - startLbl
   102                              <1> 
   103 0000094F 044A4F494E          <1>     db 4, "JOIN"
   104 00000954 4A2B                <1>     dw join - startLbl
   105                              <1> 
   106 00000956 055355425354        <1>     db 5, "SUBST"
   107 0000095C 0D2C                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109                              <1> 
   110 0000095E 044543484F          <1>     db 4, "ECHO"
   111 00000963 F235                <1>     dw echo - startLbl
   112 00000965 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000966 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000969 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000096E 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000977 696C65206D69737369- <1>
     4 00000980 6E670D0A24          <1>
     5 00000985 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000098E 6469736B2077697468- <1>
     5 00000997 206261746368206669- <1>
     5 000009A0 6C65                <1>
     6 000009A2 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000009AB 737320616E79206B65- <1>
     6 000009B4 79207768656E207265- <1>
     6 000009BD 6164790D0A24        <1>
     7 000009C3 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009CC 6E64206F722066696C- <1>
     7 000009D5 65206E616D650D0A24  <1>
     8 000009DE 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009E7 2066696C65206E616D- <1>
     8 000009F0 65206F7220          <1>
     9 000009F5 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009FE 666F756E640D0A24    <1>
    10 00000A06 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    10 00000A0F 656E74206469736B20- <1>
    10 00000A18 73706163650D0A24    <1>
    11 00000A20 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A29 7669726F6E6D656E74- <1>
    11 00000A32 2073706163650D0A24  <1>
    12 00000A3B 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A44 74696F6E206572726F- <1>
    12 00000A4D 720D0A24            <1>
    13 00000A51 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A5A 6F7420626520636F70- <1>
    13 00000A63 696564206F6E746F20- <1>
    13 00000A6C 697473656C660D0A24  <1>
    14 00000A75 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A7E 662064657374696E61- <1>
    14 00000A87 74696F6E206C6F7374- <1>
    14 00000A90 206265666F72652063- <1>
    14 00000A99 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A9F 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000AA8 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000AB1 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000ABA 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000ABB 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AC4 65650D0A24          <1>
    21 00000AC9 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AD2 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000ADB 726976652073706563- <1>
    23 00000AE4 696669636174696F6E- <1>
    23 00000AED 0D0A24              <1>
    24 00000AF0 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000AF9 6B6579207768656E20- <1>
    24 00000B02 7265616479202E202E- <1>
    24 00000B0B 202E2024            <1>
    25 00000B0F 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000B18 6172616D657465720D- <1>
    25 00000B21 0A24                <1>
    26                              <1> 
    27 00000B23 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B2C 576564546875467269- <1>
    27 00000B35 536174              <1>
    28 00000B38 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B41 206461746524        <1>
    29 00000B47 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B50 6174652069732024    <1>
    30 00000B58 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B61 657720646174652024  <1>
    31 00000B6A 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B73 293A2024            <1>
    32 00000B77 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B80 293A2024            <1>
    33 00000B84 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B8D 293A2024            <1>
    34 00000B91 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B9A 2074696D6524        <1>
    35 00000BA0 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000BA9 696D652069732024    <1>
    36 00000BB1 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000BBA 65772074696D653A20- <1>
    36 00000BC3 24                  <1>
    37                              <1> 
    38 00000BC4 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BCD 7572652028592F4E29- <1>
    38 00000BD6 3F2024              <1>
    39                              <1> 
    40 00000BD9 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BE2 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BEB 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BF4 6E2064726976652024  <1>
    43 00000BFD 2069732024          <1> volOk   db " is $"
    44 00000C02 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000C0B 6162656C24          <1>
    45                              <1> 
    46 00000C10 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000C19 69726563746F72790D- <1>
    46 00000C22 0A24                <1>
    47 00000C24 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C2D 206372656174652064- <1>
    47 00000C36 69726563746F72790D- <1>
    47 00000C3F 0A24                <1>
    48 00000C41 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C4A 6174682C206E6F7420- <1>
    48 00000C53 6469726563746F7279- <1>
    48 00000C5C 2C0D0A              <1>
    49 00000C5F 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C68 6F7279206E6F742065- <1>
    49 00000C71 6D7074790D0A24      <1>
    50 00000C78 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C81 79206F66202024      <1>
    51 00000C88 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C91 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C9A 6E6965640D0A24      <1>
    53 00000CA1 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000CAA 72697665206973206E- <1>
    53 00000CB3 6F206C6F6E67657220- <1>
    53 00000CBC 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CC2 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CCB 65766963650D0A24    <1>
    56 00000CD3 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CDC 20666F756E640D0A24  <1>
    57 00000CE5 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CEE 726F720D0A24        <1>
    58 00000CF4 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CFD 6F74206265206E6573- <1>
    58 00000D06 7465640D0A24        <1>
    59 00000D0C 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000D15 6174652066696C6520- <1>
    59 00000D1E 6572726F7220647572- <1>
    59 00000D27 696E6720706970650D- <1>
    59 00000D30 0A24                <1>
    60 00000D32 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D3B 2062696E6172792072- <1>
    60 00000D44 656164732066726F6D- <1>
    60 00000D4D 206120646576696365- <1>
    60 00000D56 0D0A24              <1>
    61 00000D59 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D5F 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D64 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D6D 24                  <1>
    64 00000D6E 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D77 2024                <1>
    65 00000D79 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D82 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D8B 617468206F72206669- <1>
    66 00000D94 6C65206E616D650D0A- <1>
    66 00000D9D 24                  <1>
    67 00000D9E 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000DA7 756D626572206F6620- <1>
    67 00000DB0 706172616D65746572- <1>
    67 00000DB9 730D0A24            <1>
    68 00000DBD 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DC6 74696E6720746F2064- <1>
    68 00000DCF 6576696365          <1>
    69 00000DD4 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DD8 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DE1 20202020202020546F- <1>
    71 00000DEA 74616C207379737465- <1>
    71 00000DF3 6D206D656D6F72793A- <1>
    71 00000DFC 2024                <1>
    72 00000DFE 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000E07 20202020202020204D- <1>
    72 00000E10 656D6F727920757365- <1>
    72 00000E19 6420627920444F533A- <1>
    72 00000E22 2024                <1>
    73 00000E24 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E2D 656D6F727920757365- <1>
    73 00000E36 64206279206170706C- <1>
    73 00000E3F 69636174696F6E733A- <1>
    73 00000E48 2024                <1>
    74 00000E4A 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E53 656D6F727920726573- <1>
    74 00000E5C 657276656420627920- <1>
    74 00000E65 68617264776172653A- <1>
    74 00000E6E 2024                <1>
    75 00000E70 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E79 202020202020202020- <1>
    75 00000E82 2020202020204D656D- <1>
    75 00000E8B 6F727920667265653A- <1>
    75 00000E94 2024                <1>
    76 00000E96 20627974657324      <1> memByte db " bytes$"
    77 00000E9D 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000EA6 6F7420417373657274- <1>
    77 00000EAF 61696E20444F532045- <1>
    77 00000EB8 6E74727920506F696E- <1>
    77 00000EC1 7424                <1>
    78 00000EC3 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000ECC 416C6C6F636174696F- <1>
    78 00000ED5 6E204572726F7224    <1>
    79 00000EDD 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EE6 4572726F7224        <1>
    80 00000EEC 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000EF5 68616C74656424      <1>
    81                              <1> 
    82 00000EFC 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000F05 206372656174652070- <1>
    82 00000F0E 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000F13 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000F1C 6F6E206572726F720D- <1>
    84 00000F25 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F26 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F2A 2020202024          <1> fourSpc  db "    $"
    89 00000F2F 20202024            <1> threeSpc db "   $"
    90 00000F33 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F36 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F3F 696679204F4E206F72- <1>
    92 00000F48 204F46460D0A24      <1>
    93                              <1> 
    94 00000F4F 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F57 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F60 434F4E00            <1> conName db "CON",0    
    99                              <1>   
   100                              <1> ;Int 24h strings
   101                              <1> errorMsgTable: ;Each table entry is 18 chars long
   102 00000F64 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   102 00000F6D 746563742024202020  <1>
   103 00000F76 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   103 00000F7F 6E6974202420202020  <1>
   104 00000F88 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   104 00000F91 202420202020202020  <1>
   105 00000F9A 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   105 00000FA3 6F6D6D616E64202420  <1>
   106 00000FAC 446174612024202020- <1>             db "Data $            "       ;Error 4
   106 00000FB5 202020202020202020  <1>
   107 00000FBE 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   107 00000FC7 737420242020202020  <1>
   108 00000FD0 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   108 00000FD9 202020202020202020  <1>
   109 00000FE2 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   109 00000FEB 656469612024202020  <1>
   110 00000FF4 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   110 00000FFD 7420466F756E642024  <1>
   111 00001006 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   111 0000100F 706572202420202020  <1>
   112 00001018 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   112 00001021 6C7420242020202020  <1>
   113 0000102A 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   113 00001033 742024202020202020  <1>
   114 0000103C 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   114 00001045 61696C757265202420  <1>
   115                              <1> 
   116 0000104E 64726976652024      <1> drvMsg     db "drive $"
   117 00001055 6572726F7220726561- <1> readMsg    db "error reading $"
   117 0000105E 64696E672024        <1>
   118 00001064 6572726F7220777269- <1> writeMsg   db "error writing $"
   118 0000106D 74696E672024        <1>
   119 00001073 41626F727424        <1> abortMsg   db "Abort$" 
   120 00001079 49676E6F726524      <1> ignoreMsg  db "Ignore$"
   121 00001080 526574727924        <1> retryMsg   db "Retry$"
   122 00001086 4661696C24          <1> failMsg    db "Fail$"
   123 0000108B 2C2024              <1> betweenMsg db ", $"
   124 0000108E 3F2024              <1> endMsg     db "? $"
   125 00001091 49524146            <1> i24Resp    db "IRAF"   ;Abort Retry Ignore Fail
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00001095 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 0000109D 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 000010A6 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 000010AC 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 000010B3 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 000010B6 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 000010BA C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 000010BD B44A                <1>     mov ah, 4Ah ;Realloc
     9 000010BF 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 000010C2 CD21                <1>     int 21h
    11                              <1> commandMain:
    12 000010C4 488B253AEFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    13 000010CB FC                  <1>     cld ;Ensure stringops are done the right way
    14 000010CC C605E2F0FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    15 000010D3 C6055DF1FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    16 000010DA C605D8F1FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    17                              <1> .inputMain:         ;Only reset once per line!
    18 000010E1 E812280000          <1>     call printCRLF  ;Command complete, indicate with new line!
    19 000010E6 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    20 000010EB CD21                <1>     int 21h
    21 000010ED B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    22 000010F2 BA01000000          <1>     mov edx, 1      ;Start new print job
    23 000010F7 CD21                <1>     int 21h
    24                              <1> .inputGetAgain:
    25 000010F9 E8632A0000          <1>     call clearCommandLineState  ;Cleans all handles 5->MAX
    26 000010FE F605AEEFFFFFFF      <1>     test byte [batFlag], -1 ;If batch on, get the next line to execute
    27 00001105 0F8523090000        <1>     jnz batNextLine
    28                              <1> .inputGetCmdlineAgain:
    29 0000110B E84F270000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    30 00001110 488D159EF0FFFF      <1>     lea rdx, inBuffer
    31 00001117 B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    32 0000111C CD21                <1>     int 21h
    33 0000111E E8D5270000          <1>     call printCRLF  ;Note we have accepted input
    34                              <1> ;First check we had something typed in of length greater than 0
    35 00001123 803D8CF0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    36 0000112A 74DF                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    37                              <1>     ;Copy over the input text
    38 0000112C 488D3582F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    39                              <1> .batCopy:               ;Jump here to copy the batch input line 
    40 00001133 488D3DFDF0FFFF      <1>     lea rdi, cpyBuffer
    41 0000113A B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    42 0000113F F3A4                <1>     rep movsb
    43 00001141 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    44                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    45 00001146 488D356EF1FFFF      <1>     lea rsi, cmdBuffer + 2
    46 0000114D E8DD290000          <1>     call skipDelimiters
    47 00001152 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    48 00001155 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    49 00001157 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    50 0000115A 0F84CF030000        <1>     je hardSynErr
    51                              <1> .pipeLoop:
    52 00001160 4C8B05A8EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    53 00001167 E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    54                              <1>     ;ZF here indicates if we are at the end of the command or nots
    55 0000116C E80A070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    56 00001171 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    57 00001176 E845020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    58                              <1> .okRet:                     ;Normal return point for processing
    59 0000117B E800050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    60 00001180 F6051AEFFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    61 00001187 0F8454FFFFFF        <1>     jz .inputMain
    62                              <1>     ;Now we pull the commandline forwards. 
    63 0000118D E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    64 00001192 488D3D22F1FFFF      <1>     lea rdi, cmdBuffer + 2
    65 00001199 4889F1              <1>     mov rcx, rsi
    66 0000119C 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    67 0000119F 280D15F1FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    68 000011A5 8A0D0FF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    69 000011AB FFC1                <1>     inc ecx     ;One more for the terminating char
    70 000011AD F3A4                <1>     rep movsb   ;Move the chars over    
    71 000011AF E89C290000          <1>     call clearCommandState  ;Else, clear the command state and start again
    72 000011B4 EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    73                              <1> 
    74                              <1> makeCmdBuffer:
    75                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    76                              <1> ; copy buffer. Called only once in a cycle.
    77                              <1> ;Throughout: CL has char count, CH has quote count
    78 000011B6 488D357CF0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    79 000011BD 31C9                <1>     xor ecx, ecx
    80 000011BF 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    81                              <1> .countQuotes:
    82 000011C2 AC                  <1>     lodsb
    83 000011C3 3C22                <1>     cmp al, '"'
    84 000011C5 7507                <1>     jne .notQuoteToCount
    85 000011C7 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
    86 000011C9 E9F4FFFFFF          <1>     jmp .countQuotes
    87                              <1> .notQuoteToCount:
    88 000011CE 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
    89 000011D0 75F0                <1>     jne .countQuotes
    90 000011D2 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
    91 000011D5 488D3DDFF0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
    92                              <1> .getChar:
    93 000011DC AC                  <1>     lodsb           ;Get char in buffer, advance rsi
    94 000011DD 3C22                <1>     cmp al, '"'     ;Is char a quote?
    95 000011DF 750E                <1>     jne .notQuote
    96 000011E1 FECD                <1>     dec ch          ;We have a quote, now decrement
    97 000011E3 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
    98                              <1> .searchForClosingQuote:
    99                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   100 000011E5 AA                  <1>     stosb   ;Store char and inc rdi
   101 000011E6 FEC1                <1>     inc cl
   102 000011E8 AC                  <1>     lodsb   ;Get next char
   103 000011E9 3C22                <1>     cmp al, '"'
   104 000011EB 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   105 000011ED FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   106                              <1> .notQuote:
   107 000011EF E826060000          <1>     call peelRedir      ;Intervene redir if needed
   108 000011F4 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   109 000011F6 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   110 000011F8 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   111                              <1> .pipeHandle:
   112                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   113 000011FA 0F842F030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   114                              <1> .notRedir:
   115 00001200 AA                  <1>     stosb       ;Store char and advance rdi
   116 00001201 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   117 00001203 7404                <1>     je .exit
   118 00001205 FEC1                <1>     inc cl      ;Increment char count
   119 00001207 EBD3                <1>     jmp short .getChar    ;If not, get next char
   120                              <1> .exit:
   121 00001209 880DABF0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   122                              <1>     return
    13                              <2> %%_ret:
    14 0000120F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> makeCmdString:
   125                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   126                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   127                              <1> ; Copies into the psp.
   128                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   129 00001210 488D35A4F0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   130 00001217 31C9                <1>     xor ecx, ecx
   131 00001219 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   132                              <1> .countQuotes:
   133 0000121C AC                  <1>     lodsb
   134 0000121D 3C22                <1>     cmp al, '"'
   135 0000121F 7507                <1>     jne .notQuoteToCount
   136 00001221 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   137 00001223 E9F4FFFFFF          <1>     jmp .countQuotes
   138                              <1> .notQuoteToCount:
   139 00001228 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   140 0000122A 75F0                <1>     jne .countQuotes
   141 0000122C 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   142 0000122F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   143                              <1> .getChar:
   144 00001236 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   145 00001237 3C22                <1>     cmp al, '"'     ;Is char a quote?
   146 00001239 750E                <1>     jne .notQuote
   147 0000123B FECD                <1>     dec ch          ;We have a quote, now decrement
   148 0000123D 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   149                              <1> .searchForClosingQuote:
   150                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   151 0000123F AA                  <1>     stosb   ;Store char and inc rdi
   152 00001240 FEC1                <1>     inc cl
   153 00001242 AC                  <1>     lodsb   ;Get next char
   154 00001243 3C22                <1>     cmp al, '"'
   155 00001245 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   156 00001247 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   157                              <1> .notQuote:
   158 00001249 3C7C                <1>     cmp al, "|"
   159 0000124B 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   160 0000124D B00D                <1>     mov al, CR          ;Store the pipe char
   161 0000124F 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   162                              <1> .notPipe:
   163 00001252 AA                  <1>     stosb       ;Store char and advance rdi
   164 00001253 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   165 00001255 7404                <1>     je .exit
   166 00001257 FEC1                <1>     inc cl      ;Increment char count
   167 00001259 EBDB                <1>     jmp short .getChar    ;If not, get next char
   168                              <1> .exit:
   169 0000125B 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   170 0000125E 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   171 00001265 803E0D              <1>     cmp byte [rsi], CR  
   172                              <1>     return
    13                              <2> %%_ret:
    14 00001268 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> analyseCmdline:
   175                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   176                              <1> ; processes the command name into the FCB.  
   177 00001269 C6051AF1FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   178                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   179 00001270 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   180 00001277 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   181 0000127A 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   182 0000127E 8A05A6EDFFFF        <1>     mov al, byte [switchChar]
   183 00001284 F2AE                <1>     repne scasb                     ;Scan for the switch char
   184 00001286 7506                <1>     jne .noSwitchFnd
   185 00001288 F61524EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   186                              <1> .noSwitchFnd:
   187 0000128E E89C280000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   188 00001293 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   189                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001296 74(68)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   190 00001298 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   191                              <1> .plp:
   192 0000129B 488D3DB8EEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   193 000012A2 B801290000          <1>     mov eax, 2901h
   194 000012A7 CD21                <1>     int 21h
   195 000012A9 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   196 000012AB 0F8402010000        <1>     je .exitBadDrv
   197                              <1> .trailingDotLp:
   198                              <1> ;Reverse along trailing dots!
   199 000012B1 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   200 000012B5 7505                <1>     jne .noTrailingDots
   201 000012B7 48FFCE              <1>     dec rsi
   202 000012BA EBF5                <1>     jmp short .trailingDotLp
   203                              <1> .noTrailingDots:
   204 000012BC 8A0567EDFFFF        <1>     mov al, byte [pathSep]  
   205 000012C2 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   206 000012C4 7525                <1>     jne .notPs
   207 000012C6 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   208 000012C9 AC                  <1>     lodsb   ;Get this char
   209 000012CA 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   210 000012CD 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   211 000012CF 7217                <1>     jb .delimfnd    ;Also a delimiter
   212 000012D1 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   213 000012D3 7413                <1>     je .delimfnd
   214 000012D5 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   215 000012D7 740F                <1>     je .delimfnd
   216 000012D9 3C2E                <1>     cmp al, byte "."
   217 000012DB 740B                <1>     je .delimfnd
   218 000012DD 3C22                <1>     cmp al, byte '"'
   219 000012DF 7407                <1>     je .delimfnd
   220 000012E1 E857280000          <1>     call isALdelimiter  ;Is this a delim char?
   221 000012E6 75B3                <1>     jne .plp            ;If not, we loop again
   222                              <1> .delimfnd:
   223 000012E8 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   224                              <1> .notPs:
   225                              <1> ;Now we have reached the end of the command, rsi points to the first char
   226                              <1> ; after the command, whether a delimiter or not.
   227 000012EB 4889F1              <1>     mov rcx, rsi
   228 000012EE 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   229 000012F1 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   230 000012F4 488D3D40F0FFFF      <1>     lea rdi, cmdPathSpec
   231 000012FB F3A4                <1>     rep movsb
   232 000012FD 30C0                <1>     xor al, al
   233 000012FF AA                  <1>     stosb   ;Store a terminating null
   234 00001300 4887DE              <1>     xchg rbx, rsi
   235                              <1> ;Now we build FCBs for the arguments!
   236 00001303 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   237 0000130A E893000000          <1>     call .skipAndCheckCR
   238 0000130F 745B                <1>     je .setupCmdVars
   239 00001311 C60594EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   240 00001318 4889F0              <1>     mov rax, rsi
   241 0000131B 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   242 0000131E 880589EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   243 00001324 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   244 00001328 B801290000          <1>     mov eax, 2901h
   245 0000132D CD21                <1>     int 21h
   246 0000132F 880579EDFFFF        <1>     mov byte [arg1FCBret], al
   247                              <1> .skipArg:
   248 00001335 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   249 00001336 3C0D                <1>     cmp al, CR
   250 00001338 7432                <1>     je .setupCmdVars
   251 0000133A E8FE270000          <1>     call isALdelimiter
   252 0000133F 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   253 00001341 E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   254 00001346 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   255 00001348 C60560EDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   256 0000134F 4889F0              <1>     mov rax, rsi            
   257 00001352 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   258 00001355 880555EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   259 0000135B 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   260 0000135F B801290000          <1>     mov eax, 2901h
   261 00001364 CD21                <1>     int 21h
   262 00001366 880545EDFFFF        <1>     mov byte [arg2FCBret], al
   263                              <1> .setupCmdVars:
   264                              <1> ;Before returning, we copy the command name to cmdName 
   265 0000136C 488D3DC8EFFFFF      <1>     lea rdi, cmdPathSpec
   266 00001373 E86E280000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   267 00001378 E896270000          <1>     call strlen ;Get the length of the final path componant
   268 0000137D 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   269 00001383 7726                <1>     ja .exitBad     ;Return error
   270 00001385 4889FE              <1>     mov rsi, rdi
   271 00001388 488D3DFBEFFFFF      <1>     lea rdi, cmdName
   272 0000138F FFC9                <1>     dec ecx ;Minus the terminating null
   273 00001391 880F                <1>     mov byte [rdi], cl ;Store the length here
   274 00001393 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   275                              <1> .cpCmdName:
   276 00001396 AC                  <1>     lodsb
   277 00001397 E881270000          <1>     call ucChar ;Uppercase the char
   278 0000139C AA                  <1>     stosb
   279 0000139D FFC9                <1>     dec ecx
   280 0000139F 75F5                <1>     jnz .cpCmdName
   281                              <1>     return
    13                              <2> %%_ret:
    14 000013A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> .skipAndCheckCR:
   283                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   284 000013A2 E888270000          <1>     call skipDelimiters ;Go to the next char in the input line
   285 000013A7 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   286                              <1>     return
    13                              <2> %%_ret:
    14 000013AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> .exitBad:
   288 000013AB C605D8EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   289                              <1>     return
    13                              <2> %%_ret:
    14 000013B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> .exitBadDrv:
   291 000013B3 C605D0EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   292 000013BA E840070000          <1>     call badDriveError
   293                              <1>     return
    13                              <2> %%_ret:
    14 000013BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> doCommandLine:
   296                              <1>     ;The following check accounts for the end of a piped command
   297 000013C0 803DC3EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   298 000013C7 0F8462010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   299 000013CD 803DB6EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   300 000013D4 0F845E070000        <1>     je badCmdError
   301 000013DA 803DA9EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   302                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013E1 74(BF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   303 000013E3 488D3551EFFFFF      <1>     lea rsi, cmdPathSpec
   304 000013EA 0FB71D4AEFFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   305 000013F1 80FF3A              <1>     cmp bh, ":"
   306 000013F4 7520                <1>     jne .noDriveSpecified
   307 000013F6 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   308 000013F8 E820270000          <1>     call ucChar     ;Uppercase al
   309 000013FD 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   310                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   311 000013FF 803D84EFFFFF02      <1>     cmp byte [cmdName], 2
   312 00001406 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   313 00001408 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   314 0000140A E8DA260000          <1>     call setDrive
   315                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000140F 74(BF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   316 00001411 E9E9060000          <1>     jmp badDriveError
   317                              <1> .noDriveSpecified:
   318                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   319 00001416 488D1D9CEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   320 0000141D 488D3566EFFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   321 00001424 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   322 00001429 BAFFFF0000          <1>     mov edx, 0FFFFh
   323 0000142E B5FF                <1>     mov ch, -1
   324 00001430 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   325 00001432 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   326 00001437 BAFFFF0000          <1>     mov edx, 0FFFFh
   327 0000143C 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   328 0000143E CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   329                              <1>             ;        al = 0  if the command should be executed as usual
   330 00001440 84C0                <1>     test al, al
   331 00001442 7444                <1>     jz .executeInternal
   332                              <1>     ;Here we execute externally and return to the prompt
   333                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   334 00001444 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   335 0000144B 488D3538EFFFFF      <1>     lea rsi, cmdName        
   336 00001452 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   337 00001457 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000145C B5FF                <1>     mov ch, -1
   339 0000145E CD2F                <1>     int 2Fh
   340 00001460 803D23EFFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   341                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001467 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001469 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   342                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   343                              <1>     ; is an external command that is in the CD or in the PATH.
   344                              <1>     ;Should not be used for this purpose but it is here...
   345 0000146A E875050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   346 0000146F 488D3514EFFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   347 00001476 AC                  <1>     lodsb                   ;Get the name length
   348 00001477 0FB6C8              <1>     movzx ecx, al
   349 0000147A 488D3DBAEEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   350 00001481 F3A4                <1>     rep movsb   
   351 00001483 31C0                <1>     xor eax, eax
   352 00001485 AA                  <1>     stosb   ;Store null terminator
   353 00001486 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   354                              <1> .executeInternal:
   355 00001488 E857050000          <1>     call pullCommandline    ;Now pull the tail down
   356 0000148D 488D3DA7EEFFFF      <1>     lea rdi, cmdPathSpec
   357 00001494 E87A260000          <1>     call strlen ;Get the length of the input command
   358 00001499 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   359 0000149B 380DE9EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   360 000014A1 0F85AA1C0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   361                              <1> .executeInternal2:
   362                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   363 000014A7 488D1DBBF3FFFF      <1>     lea rbx, functionTable
   364                              <1> .nextEntry:
   365 000014AE 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   366 000014B1 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   367 000014B4 0F84971C0000        <1>     je launchChild      ;If so, check externally now
   368 000014BA 380DCAEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   369 000014C0 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   370                              <1>     ;Here they have the same length so lets see if the name is the same
   371 000014C2 56                  <1>     push rsi
   372                              <1>     ;ecx has the length to compare
   373 000014C3 51                  <1>     push rcx
   374 000014C4 488D7301            <1>     lea rsi, qword [rbx + 1]
   375 000014C8 488D3DBCEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   376 000014CF F3A6                <1>     rep cmpsb   ;Check the strings are equal
   377 000014D1 59                  <1>     pop rcx
   378 000014D2 5E                  <1>     pop rsi
   379 000014D3 751E                <1>     jne .gotoNextEntry
   380                              <1>     ;Here it was found both strings are equal
   381 000014D5 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   382 000014DA 480FB71F            <1>     movzx rbx, word [rdi]
   383 000014DE 488D3D1BEBFFFF      <1>     lea rdi, startLbl
   384 000014E5 4801FB              <1>     add rbx, rdi
   385 000014E8 C6051EEBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   386 000014EF FFD3                <1>     call rbx        ;Call the internal function!
   387 000014F1 EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   388                              <1> .gotoNextEntry:
   389 000014F3 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   390 000014FA 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   391 000014FD EBAF                <1>     jmp short .nextEntry
   392                              <1> 
   393                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   394                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   395                              <1> ;Can depend on RSP here if the rsp ptr in the psp was not mangled (i.e. in an
   396                              <1> ; abort or CTRL+C call).
   397 000014FF 488B25FFEAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   398 00001506 E8CA280000          <1>     call resetIDTentries
   399 0000150B B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   400 00001510 CD21                <1>     int 21h
   401 00001512 668905F4EAFFFF      <1>     mov word [returnCode], ax
   402 00001519 84E4                <1>     test ah, ah     ;Regular exit
   403 0000151B 0F845AFCFFFF        <1>     jz commandMain.okRet
   404 00001521 80FC03              <1>     cmp ah, 3       ;TSR exit
   405 00001524 0F8451FCFFFF        <1>     je commandMain.okRet
   406                              <1>     ;Here we ask if we want to stop any batch processing, ret to 2Eh etc.
   407                              <1>     ;For now, just clean redirs
   408 0000152A E930000000          <1>     jmp redirPipeFailureCommon.noPrint  ;Jumps to commandMain
   409                              <1>     ;cmp ah, 1       ;Was this Ctrl^C?
   410                              <1>     ;je commandMain
   411                              <1>     ;jmp commandMain  ;If we aborted, fully reset!
   412                              <1> 
   413                              <1> hardSynErr:
   414                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   415 0000152F E89E050000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   416 00001534 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   417                              <1> redirFailure:
   418 00001539 488D15D3F9FFFF      <1>     lea rdx, redirErrMsg
   419 00001540 B913000000          <1>     mov ecx, redirErrMsgL
   420 00001545 EB0C                <1>     jmp short redirPipeFailureCommon
   421                              <1> pipeFailure:
   422 00001547 488D15AEF9FFFF      <1>     lea rdx, pipeErrMsg
   423 0000154E B917000000          <1>     mov ecx, pipeErrMsgL
   424                              <1> redirPipeFailureCommon:
   425                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   426                              <1> ;This routine tries to close whatever handles are not -1 and delete
   427                              <1> ; pipe files if the pipe count is not 0.
   428                              <1> ;It resets all variables and jumps to reset the stack!
   429 00001553 B800400000          <1>     mov eax, 4000h  ;Write handle
   430 00001558 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   431 0000155D CD21                <1>     int 21h
   432                              <1> .noPrint:
   433 0000155F 0FB70542EBFFFF      <1>     movzx eax, word [redirSTDIN]
   434 00001566 0FB71535EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   435 0000156D 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   436 0000156F E8D1000000          <1>     call .closeAndReplace
   437 00001574 0FB7052FEBFFFF      <1>     movzx eax, word [redirSTDOUT]
   438 0000157B 0FB71522EBFFFF      <1>     movzx edx, word [pipeSTDOUT]
   439 00001582 FFC3                <1>     inc ebx         ;Select STDOUT for closing
   440 00001584 E8BC000000          <1>     call .closeAndReplace
   441 00001589 66C70514EBFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   442 00001592 0FB71D0FEBFFFF      <1>     movzx ebx, word [redirSTDIN]
   443 00001599 E896000000          <1>     call .closeHandle
   444                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   445 0000159E 66C70501EBFFFFFFFF  <1>     mov word [redirSTDIN], -1
   446 000015A7 0FB71DFCEAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   447 000015AE E881000000          <1>     call .closeHandle
   448 000015B3 66C705EEEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   449 000015BC 0FB71DDFEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   450 000015C3 E86C000000          <1>     call .closeHandle
   451 000015C8 66C705D1EAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   452 000015D1 0FB71DCCEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   453 000015D8 E857000000          <1>     call .closeHandle
   454 000015DD 66C705BEEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   455 000015E6 C605B4EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   456 000015ED 488D1542EEFFFF      <1>     lea rdx, qword [pipe1Filespec]
   457 000015F4 803A00              <1>     cmp byte [rdx], 0
   458 000015F7 7407                <1>     jz .checkOld
   459 000015F9 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   460 000015FE CD21                <1>     int 21h
   461                              <1> .checkOld:
   462 00001600 488D157EEEFFFF      <1>     lea rdx, qword [pipe2Filespec]
   463 00001607 803A00              <1>     cmp byte [rdx],0
   464 0000160A 7407                <1>     jz .pipeNamesComplete
   465 0000160C B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   466 00001611 CD21                <1>     int 21h
   467                              <1> .pipeNamesComplete:
   468 00001613 31C0                <1>     xor eax, eax
   469                              <1>     ;Invalidate the pointers and the paths too
   470 00001615 488905B8EEFFFF      <1>     mov qword [newPipe], rax
   471 0000161C 488905B9EEFFFF      <1>     mov qword [oldPipe], rax
   472 00001623 89050DEEFFFF        <1>     mov dword [pipe1Filespec], eax
   473 00001629 890556EEFFFF        <1>     mov dword [pipe2Filespec], eax
   474                              <1> 
   475 0000162F E990FAFFFF          <1>     jmp commandMain ;Retake input from the command line
   476                              <1> .closeHandle:
   477 00001634 81FBFFFFFFFF        <1>     cmp ebx, -1
   478                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000163A 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000163C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   479 0000163D B8003E0000          <1>     mov eax, 3E00h
   480 00001642 CD21                <1>     int 21h
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> .closeAndReplace:
   483                              <1> ;Input: ax = one possible handle, dx = second possible handle
   484                              <1> ;       bx = handle to close and copy ax/dx into
   485                              <1> ;Output: Handle intervened on. bx preserved
   486 00001645 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   487 00001648 09D0                <1>     or eax, edx     ;Form packed
   488 0000164A 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   489                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000164F 74(44)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   490 00001651 E8DEFFFFFF          <1>     call .closeHandle
   491 00001656 663DFFFF            <1>     cmp ax, -1      
   492 0000165A 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   493 0000165E 53                  <1>     push rbx
   494 0000165F 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   495 00001662 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   496 00001667 CD21                <1>     int 21h
   497 00001669 5B                  <1>     pop rbx
   498                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000166A 73(44)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499                              <1>     ;Else we now try to force con to open!
   500 0000166C E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   501 00001671 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   502 00001676 488D15E3F8FFFF      <1>     lea rdx, conName
   503 0000167D CD21                <1>     int 21h
   504                              <1>     return
    13                              <2> %%_ret:
    14 0000167F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> advanceRedir:
   507                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   508                              <1> ;Close stdin redir then stdout redir. 
   509 00001680 F6051FEAFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   510 00001687 0F8585000000        <1>     jnz .redirIn
   511 0000168D F6050DEAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   512 00001694 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   513 0000169A 0FBF0501EAFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   514 000016A1 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   515 000016A6 0F84EB000000        <1>     je .pipeOut              
   516                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   517 000016AC 0FB71DEFE9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   518 000016B3 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   519 000016B5 B800460000          <1>     mov eax, 4600h
   520 000016BA CD21                <1>     int 21h
   521 000016BC 0F8285FEFFFF        <1>     jc pipeFailure
   522 000016C2 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   523 000016C7 CD21                <1>     int 21h
   524 000016C9 0F8278FEFFFF        <1>     jc pipeFailure
   525 000016CF 488B1506EEFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   526 000016D6 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   527 000016DB CD21                <1>     int 21h
   528 000016DD 0F8264FEFFFF        <1>     jc pipeFailure
   529 000016E3 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   530 000016E6 66C705B3E9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   531                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   532                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   533                              <1>     ;Else exit!
   534 000016EF 0FBF05AEE9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   535 000016F6 3DFFFFFFFF          <1>     cmp eax, -1
   536 000016FB 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   537 00001701 C60599E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   538 00001708 F60598E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   539 0000170F 753D                <1>     jnz .redirOut               ;Go for it if so!
   540                              <1>     return
    13                              <2> %%_ret:
    14 00001711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> .redirIn:
   542                              <1> ;Here we clean redirIn
   543 00001712 0FB71D8FE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   544 00001719 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   545 0000171B B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   546 00001720 CD21                <1>     int 21h
   547 00001722 0F8211FEFFFF        <1>     jc redirFailure
   548 00001728 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   549 0000172D CD21                <1>     int 21h
   550 0000172F 0F8204FEFFFF        <1>     jc redirFailure
   551 00001735 66C7056AE9FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   552 0000173E C60561E9FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   553 00001745 F60555E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   554 0000174C 7549                <1>     jnz .pipeOut
   555                              <1> .redirOut:
   556 0000174E F60552E9FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   557                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001755 74(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   558                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   559 00001757 F60543E9FFFFFF      <1>     test byte [pipeFlag], -1
   560 0000175E 7537                <1>     jnz short .pipeOut
   561 00001760 0FB71D43E9FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   562 00001767 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   563 0000176C B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   564 00001771 CD21                <1>     int 21h
   565 00001773 0F82C0FDFFFF        <1>     jc redirFailure
   566 00001779 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   567 0000177E CD21                <1>     int 21h
   568 00001780 0F82B3FDFFFF        <1>     jc redirFailure
   569 00001786 66C7051BE9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   570 0000178F C60511E9FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   571                              <1>     return
    13                              <2> %%_ret:
    14 00001796 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> .pipeOut:
   573                              <1> ;Duplicate STDIN to save across pipe
   574 00001797 0FBF0506E9FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   575 0000179E 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   576                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017A3 74(96)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   577 000017A5 B800450000          <1>     mov eax, 4500h
   578 000017AA 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   579 000017AC CD21                <1>     int 21h
   580 000017AE 0F8293FDFFFF        <1>     jc pipeFailure
   581 000017B4 668905E7E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   582                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   583 000017BB B800460000          <1>     mov eax, 4600h
   584 000017C0 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   585 000017C2 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   586 000017C4 CD21                <1>     int 21h
   587 000017C6 0F827BFDFFFF        <1>     jc pipeFailure
   588                              <1> ;Now return the original stdout to stdout
   589 000017CC 89D9                <1>     mov ecx, ebx
   590 000017CE 0FB71DCFE8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   591 000017D5 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   592 000017DA CD21                <1>     int 21h
   593 000017DC 0F8265FDFFFF        <1>     jc pipeFailure
   594                              <1> ;Now close the DUP'ed STDOUT
   595 000017E2 B8003E0000          <1>     mov eax, 3E00h
   596 000017E7 CD21                <1>     int 21h
   597 000017E9 0F8258FDFFFF        <1>     jc pipeFailure
   598                              <1> ;Finally unwind STDIN to the beginning of the file
   599 000017EF B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   600 000017F4 31DB                <1>     xor ebx, ebx    ;STDIN handle
   601 000017F6 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   602 000017F8 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   603 000017FA CD21                <1>     int 21h
   604 000017FC 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   605 00001802 488B15CBECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   606 00001809 488915CCECFFFF      <1>     mov qword [oldPipe], rdx
   607 00001810 66C7058BE8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   608                              <1>     return
    13                              <2> %%_ret:
    14 00001819 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> 
   611                              <1> peelRedir:
   612                              <1> ;Checks and sets up redir as appropriate
   613                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   614                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   615                              <1> ;Output: ZF=NZ => No redir
   616                              <1> ;        ZF=ZY => Redir
   617                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   618                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   619 0000181A 51                  <1>     push rcx
   620 0000181B 57                  <1>     push rdi
   621 0000181C 3C3C                <1>     cmp al, "<"
   622 0000181E 740C                <1>     je .inputRedir
   623 00001820 3C3E                <1>     cmp al, ">"
   624 00001822 7427                <1>     je .outputRedir
   625 00001824 3C7C                <1>     cmp al, "|"
   626 00001826 7441                <1>     je .pipeSetup
   627 00001828 F8                  <1>     clc
   628                              <1> .redirExit:
   629 00001829 5F                  <1>     pop rdi
   630 0000182A 59                  <1>     pop rcx
   631                              <1>     return
    13                              <2> %%_ret:
    14 0000182B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   632                              <1> .inputRedir:
   633 0000182C C60573E8FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   634 00001833 488D3D5EEBFFFF      <1>     lea rdi, rdrInFilespec
   635                              <1> .redirCommon:
   636 0000183A E8F0220000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   637 0000183F E81C240000          <1>     call cpDelimPathToBufz
   638 00001844 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   639 00001847 30C0                <1>     xor al, al  ;Clear the ZF flag
   640 00001849 EBDE                <1>     jmp short .redirExit
   641                              <1> .outputRedir:
   642 0000184B C60555E8FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   643 00001852 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   644 00001855 7509                <1>     jne .notDouble
   645 00001857 FE054AE8FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   646 0000185D 48FFC6              <1>     inc rsi ;Go past it too
   647                              <1> .notDouble:
   648 00001860 488D3D80EBFFFF      <1>     lea rdi, rdrOutFilespec
   649 00001867 EBD1                <1>     jmp short .redirCommon
   650                              <1> .pipeSetup:
   651 00001869 56                  <1>     push rsi    ;Save rsi pointing to char past |
   652 0000186A E8C0220000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   653 0000186F 803E7C              <1>     cmp byte [rsi], "|" 
   654 00001872 7403                <1>     je .badFnd
   655 00001874 803E0D              <1>     cmp byte [rsi], CR
   656                              <1> .badFnd:
   657 00001877 5E                  <1>     pop rsi
   658 00001878 F9                  <1>     stc
   659 00001879 EBAE                <1>     jmp short .redirExit
   660                              <1> 
   661                              <1> setupRedirandPipes:
   662                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   663                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   664 0000187B 0F8484000000        <1>     jz .redirIn
   665 00001881 488D15AEEBFFFF      <1>     lea rdx, pipe1Filespec
   666 00001888 803A00              <1>     cmp byte [rdx], 0
   667 0000188B 7410                <1>     jz .pathFound
   668 0000188D 488D15F1EBFFFF      <1>     lea rdx, pipe2Filespec
   669 00001894 803A00              <1>     cmp byte [rdx], 0
   670 00001897 0F85AAFCFFFF        <1>     jnz pipeFailure
   671                              <1> .pathFound:
   672 0000189D 48891530ECFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   673 000018A4 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   674 000018A9 BB01000000          <1>     mov ebx, 1
   675 000018AE CD21                <1>     int 21h
   676 000018B0 0F8291FCFFFF        <1>     jc pipeFailure
   677 000018B6 668905E7E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   678 000018BD E833220000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   679 000018C2 0441                <1>     add al, "A"
   680 000018C4 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   681 000018C9 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   682 000018CB 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   683 000018CD 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   684 000018CF B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   685 000018D4 CD21                <1>     int 21h
   686 000018D6 0F826BFCFFFF        <1>     jc pipeFailure
   687                              <1>     ;AX has the handle for this file now, this will become STDOUT
   688                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   689 000018DC 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   690 000018DF B901000000          <1>     mov ecx, 1
   691 000018E4 B800460000          <1>     mov eax, 4600h
   692 000018E9 CD21                <1>     int 21h
   693 000018EB 0F8256FCFFFF        <1>     jc pipeFailure
   694 000018F1 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   695 000018F6 CD21                <1>     int 21h
   696 000018F8 0F8249FCFFFF        <1>     jc pipeFailure
   697 000018FE C6059CE7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   698                              <1> .redirIn:
   699                              <1> ;Now check if any other redir needs to be setup
   700                              <1> ;Checks and sets up redir as appropriate.
   701                              <1>     ;Setup the redir here for STDIN
   702 00001905 F6059AE7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   703 0000190C 7449                <1>     jz .redirOut
   704 0000190E 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   705 00001910 B800450000          <1>     mov eax, 4500h
   706 00001915 CD21                <1>     int 21h
   707 00001917 0F821CFCFFFF        <1>     jc redirFailure
   708 0000191D 66890584E7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   709 00001924 488D156DEAFFFF      <1>     lea rdx, rdrInFilespec
   710 0000192B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   711 00001930 CD21                <1>     int 21h
   712 00001932 0F8201FCFFFF        <1>     jc redirFailure
   713 00001938 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   714 0000193A 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   715 0000193D B800460000          <1>     mov eax, 4600h
   716 00001942 CD21                <1>     int 21h
   717 00001944 0F82EFFBFFFF        <1>     jc redirFailure
   718 0000194A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   719 0000194F CD21                <1>     int 21h
   720 00001951 0F82E2FBFFFF        <1>     jc redirFailure
   721                              <1> .redirOut:
   722 00001957 F60549E7FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   723                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000195E 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001960 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   724 00001961 803D3CE7FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   725                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001968 75(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   726                              <1>     ;Else setup the redir here for STDOUT
   727 0000196A BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   728 0000196F B800450000          <1>     mov eax, 4500h
   729 00001974 CD21                <1>     int 21h
   730 00001976 0F82BDFBFFFF        <1>     jc redirFailure
   731 0000197C 66890527E7FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   732 00001983 488D155DEAFFFF      <1>     lea rdx, rdrOutFilespec
   733 0000198A B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   734 0000198F CD21                <1>     int 21h
   735 00001991 730F                <1>     jnc .fileExists
   736 00001993 B8003C0000          <1>     mov eax, 3C00h
   737 00001998 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   738 0000199A CD21                <1>     int 21h
   739 0000199C 0F8297FBFFFF        <1>     jc redirFailure
   740                              <1> .fileExists:
   741 000019A2 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   742 000019A7 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   743 000019AA B800460000          <1>     mov eax, 4600h  ;DUP2
   744 000019AF CD21                <1>     int 21h
   745 000019B1 0F8282FBFFFF        <1>     jc redirFailure
   746 000019B7 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   747 000019BC CD21                <1>     int 21h
   748 000019BE 0F8275FBFFFF        <1>     jc redirFailure
   749 000019C4 803DDCE6FFFF01      <1>     cmp byte [redirOut], 1
   750                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019CB 74(60)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   751                              <1>     ;Here we move the file pointer to the end of the file
   752 000019CD 31D2                <1>     xor edx, edx    ;Low order 32 bits
   753 000019CF 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   754 000019D1 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   755 000019D6 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   756 000019DB CD21                <1>     int 21h
   757 000019DD 0F8256FBFFFF        <1>     jc redirFailure
   758                              <1>     return
    13                              <2> %%_ret:
    14 000019E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   759                              <1> 
   760                              <1> 
   761                              <1> pullCommandline:
   762                              <1> ;This command pulls the command tail down, removing the whole launch command
   763 000019E4 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   764                              <1> ;Skip leading separators
   765                              <1> .pctSkipLeading:
   766 000019EB AC                  <1>     lodsb   ;Get first char
   767 000019EC E84C210000          <1>     call isALdelimiter
   768 000019F1 74F8                <1>     je .pctSkipLeading
   769 000019F3 48FFCE              <1>     dec rsi
   770                              <1>     ;rsi points to the start of the command
   771 000019F6 488D3D3EE9FFFF      <1>     lea rdi, cmdPathSpec
   772 000019FD E811210000          <1>     call strlen ;Get the length of the command
   773 00001A02 FFC9                <1>     dec ecx ;Minus the terminating null
   774 00001A04 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   775 00001A07 280DA0E6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   776 00001A0D 280D9DE6FFFF        <1>     sub byte [arg2Off], cl
   777 00001A13 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   778 00001A15 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   779                              <1> .pctPullChars:
   780 00001A1C AC                  <1>     lodsb
   781 00001A1D AA                  <1>     stosb
   782 00001A1E 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   783 00001A20 7404                <1>     je .pctExit
   784 00001A22 FFC1                <1>     inc ecx     ;Increment count
   785 00001A24 EBF6                <1>     jmp short .pctPullChars 
   786                              <1> .pctExit:
   787 00001A26 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   788                              <1>     return
    13                              <2> %%_ret:
    14 00001A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> batNextLine:
   791                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   792 00001A2E 488D1513000000      <1>     lea rdx, .l1
   793 00001A35 B800090000          <1>     mov eax, 0900h
   794 00001A3A CD21                <1>     int 21h
   795 00001A3C C60570E6FFFF00      <1>     mov byte [batFlag], 0
   796 00001A43 E97CF6FFFF          <1>     jmp commandMain
   797 00001A48 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   797 00001A51 652E2E2E2077616974- <1>
   797 00001A5A 2C20776861743F2048- <1>
   797 00001A63 6F772064696420796F- <1>
   797 00001A6C 7520646F2074686174- <1>
   797 00001A75 3F0D0A24            <1>
   798                              <1> 
   799                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   800                              <1> ;Input: rsi points to the count byte of a command line
   801 00001A79 4150                <1>     push r8
   802 00001A7B 4151                <1>     push r9
   803 00001A7D B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   804 00001A7F CD21                <1>     int 21h
   805 00001A81 52                  <1>     push rdx    ;Save on the stack
   806 00001A82 488D1D77E4FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   807 00001A89 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   808 00001A8B CD21                <1>     int 21h
   809 00001A8D 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   810 00001A90 4989D9              <1>     mov r9, rbx
   811 00001A93 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   812 00001A9A B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   813 00001A9F F348A5              <1>     rep movsq   ;Copy command line over
   814                              <1>     ;call doCommandLine
   815 00001AA2 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   816 00001AA3 B450                <1>     mov ah, 50h ;Set Current PSP
   817 00001AA5 CD21                <1>     int 21h
   818 00001AA7 4159                <1>     pop r9
   819 00001AA9 4158                <1>     pop r8
   820 00001AAB 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001AAD 488D1552EFFFFF      <1>     lea rdx, noSpace
    10 00001AB4 488D0D51F2FFFF      <1>     lea rcx, pipeErr
    11 00001ABB F605DFE5FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001AC2 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001AC4 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001AC8 E866000000          <1>     call badCmn     ;Print the string
    15 00001ACD E98DFAFFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badSyntaxError:
    17 00001AD2 488D150CF2FFFF      <1>     lea rdx, syntaxErr
    18 00001AD9 EB58                <1>     jmp short badCmn
    19                              <1> badEnvSpaceError:
    20 00001ADB 488D153EEFFFFF      <1>     lea rdx, noEnvSpace
    21 00001AE2 EB4F                <1>     jmp short badCmn
    22                              <1> badAccError:
    23 00001AE4 488D15A6F1FFFF      <1>     lea rdx, accDenMsg
    24 00001AEB EB46                <1>     jmp short badCmn
    25                              <1> noSelfCopyError:
    26 00001AED 488D155DEFFFFF      <1>     lea rdx, noSelfCopy
    27 00001AF4 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001AF6 488D1512F0FFFF      <1>     lea rdx, badParm
    30 00001AFD EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001AFF 488D15CCEFFFFF      <1>     lea rdx, badDrv
    33 00001B06 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001B08 488D158FF2FFFF      <1>     lea rdx, badArgs
    36 00001B0F EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001B11 488D156AF2FFFF      <1>     lea rdx, badSpec
    39 00001B18 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001B1A 488D15BDEEFFFF      <1>     lea rdx, dupName
    43 00001B21 EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001B23 488D15CBEEFFFF      <1>     lea rdx, fnfMsg
    46 00001B2A EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001B2C 488D15DDF0FFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001B33 E9C71D0000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001B38 488D1584EEFFFF      <1>     lea rdx, badCmd
    53 00001B3F EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001B41 C605A0EAFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001B48 C6059AEAFFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001B4F C70591EAFFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001B58 00                  <1>
    59 00001B59 C6058FEAFFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001B60 66C7057BE9FFFF0000  <1>     mov word [searchSpec], 0
    61 00001B69 488D3D01EBFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001B70 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001B73 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001B7C 3F                  <1>
    64 00001B7D 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001B81 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001B88 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001B8F 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001B92 E8981F0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001B97 AC                  <1>     lodsb   ;Get this char
    72 00001B98 3C0D                <1>     cmp al, CR
    73 00001B9A 744D                <1>     je .scanDone
    74 00001B9C 3A0588E4FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001BA2 7524                <1>     jne .notSwitch
    76 00001BA4 AC                  <1>     lodsb   ;Get the next char
    77 00001BA5 E8731F0000          <1>     call ucChar
    78 00001BAA 3C57                <1>     cmp al, "W"
    79 00001BAC 7509                <1>     jne .notWide
    80 00001BAE 800D33EAFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001BB5 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001BB7 3C50                <1>     cmp al, "P"
    84 00001BB9 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001BBF 800D22EAFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001BC6 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001BC8 F60519EAFFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001BCF 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001BD5 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001BD8 E8DE200000          <1>     call copyArgumentToSearchSpec   
    93 00001BDD 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001BE0 800D01EAFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001BE7 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001BE9 F605F8E9FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001BF0 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001BF2 488D35EBE8FFFF      <1>     lea rsi, searchSpec
   101 00001BF9 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001BFD 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001BFF 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001C04 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001C08 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001C0D CD21                <1>     int 21h
   108 00001C0F 3CFF                <1>     cmp al, -1
   109 00001C11 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001C17 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001C1C 84C0                <1>     test al, al
   113 00001C1E 740A                <1>     jz .currentDrv
   114 00001C20 FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001C22 8805C6E9FFFF        <1>     mov byte [dirDrv], al
   116 00001C28 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001C2A E8C61E0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001C2F 8805B9E9FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001C35 488D35A8E8FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001C3C 488D3DACE9FFFF      <1>     lea rdi, dirSrchDir
   124 00001C43 0FB605A4E9FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00001C4A 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00001C4C 0441                <1>     add al, "A" ;Turn into a letter
   127 00001C4E B43A                <1>     mov ah, ":"
   128 00001C50 66AB                <1>     stosw   ;Store X: into the search path
   129 00001C52 B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00001C57 CD2F                <1>     int 2fh
   131 00001C59 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00001C5B 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 00001C61 8A05C2E3FFFF        <1>     mov al, byte [pathSep]
   135 00001C67 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00001C69 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00001C6B AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00001C6C FEC2                <1>     inc dl  ;Increment by 1
   139 00001C6E 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 00001C71 B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00001C76 CD21                <1>     int 21h
   142 00001C78 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00001C7B 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 00001C7D 3807                <1>     cmp byte [rdi], al
   149 00001C7F 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 00001C81 48FFC7              <1>     inc rdi
   151 00001C84 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00001C86 8A059DE3FFFF        <1>     mov al, byte [pathSep]
   154 00001C8C 3806                <1>     cmp byte [rsi], al
   155 00001C8E 7412                <1>     je .copyPathLoop
   156 00001C90 B43A                <1>     mov ah, ":"
   157 00001C92 86C4                <1>     xchg al, ah
   158 00001C94 663947FE            <1>     cmp word [rdi - 2], ax
   159 00001C98 7408                <1>     je .copyPathLoop
   160 00001C9A 88E0                <1>     mov al, ah
   161 00001C9C 3847FF              <1>     cmp byte [rdi - 1], al
   162 00001C9F 7401                <1>     je .copyPathLoop
   163 00001CA1 AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 00001CA2 AC                  <1>     lodsb
   166 00001CA3 3A0580E3FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00001CA9 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00001CAB 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 00001CAD 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 00001CAF 48FFC6              <1>     inc rsi
   172 00001CB2 EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00001CB4 3C2E                <1>     cmp al, "."
   175 00001CB6 7407                <1>     je .dots
   176                              <1> .store:
   177 00001CB8 AA                  <1>     stosb
   178 00001CB9 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00001CBB 7472                <1>     jz .exitPathCopy
   180 00001CBD EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 00001CBF 8A2564E3FFFF        <1>     mov ah, byte [pathSep]
   188 00001CC5 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00001CC8 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00001CCA 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00001CCC 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 00001CCF 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 00001CD1 3A2552E3FFFF        <1>     cmp ah, byte [pathSep]
   195 00001CD7 7406                <1>     je .skipThisPathsep
   196 00001CD9 84E4                <1>     test ah, ah
   197 00001CDB 74C5                <1>     jz .copyPathLoop
   198 00001CDD EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 00001CDF 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 00001CE2 EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 00001CE4 48FFC6              <1>     inc rsi ;Move past the second dot
   206 00001CE7 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 00001CE9 3A253AE3FFFF        <1>     cmp ah, byte [pathSep]
   208 00001CEF 7408                <1>     je .tdOk
   209 00001CF1 84E4                <1>     test ah, ah
   210 00001CF3 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 00001CF9 8A052AE3FFFF        <1>     mov al, byte byte [pathSep]
   213 00001CFF 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 00001D03 0F84EDFDFFFF        <1>     je badParamError
   215 00001D09 4881EF02000000      <1>     sub rdi, 2
   216 00001D10 31C9                <1>     xor ecx, ecx
   217 00001D12 FFC9                <1>     dec ecx
   218 00001D14 FD                  <1>     std
   219 00001D15 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 00001D17 FC                  <1>     cld
   221 00001D18 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 00001D1F 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 00001D21 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 00001D27 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 00001D2A E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 00001D2F 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 00001D36 8A05EDE2FFFF        <1>     mov al, byte [pathSep]
   230 00001D3C B43A                <1>     mov ah, ":"
   231 00001D3E 86C4                <1>     xchg al, ah
   232 00001D40 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00001D44 7409                <1>     je .skipOverwrite
   234 00001D46 88E0                <1>     mov al, ah
   235 00001D48 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00001D4A 7503                <1>     jne .skipOverwrite
   237 00001D4C C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 00001D4F 488D3599E8FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00001D56 4889F7              <1>     mov rdi, rsi
   241 00001D59 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 00001D5E CD2F                <1>     int 2fh
   243 00001D60 E8631F0000          <1>     call scanForWildcards
   244 00001D65 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00001D67 4889F2              <1>     mov rdx, rsi
   246 00001D6A 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 00001D6E 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 00001D70 E845200000          <1>     call setDTA ;Set the DTA
   250 00001D75 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00001D7A B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 00001D7F CD21                <1>     int 21h
   253 00001D81 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00001D83 F605F5E3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00001D8A 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00001D8C 31C0                <1>     xor eax, eax
   259 00001D8E 31C9                <1>     xor ecx, ecx
   260 00001D90 FFC9                <1>     dec ecx
   261 00001D92 F2AE                <1>     repne scasb
   262 00001D94 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00001D97 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00001D99 31C0                <1>     xor eax, eax
   268 00001D9B 31C9                <1>     xor ecx, ecx
   269 00001D9D FFC9                <1>     dec ecx
   270 00001D9F F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 00001DA1 8A0582E2FFFF        <1>     mov al, byte [pathSep]
   273 00001DA7 31C9                <1>     xor ecx, ecx
   274 00001DA9 FFC9                <1>     dec ecx
   275 00001DAB FD                  <1>     std ;Search backwards
   276 00001DAC F2AE                <1>     repne scasb
   277 00001DAE FC                  <1>     cld ;Search forwards again
   278 00001DAF 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 00001DB2 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00001DB6 7503                <1>     jne .wcsp1
   281 00001DB8 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00001DBB 57                  <1>     push rdi
   285 00001DBC 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 00001DBE 7503                <1>     jne .wcsp2
   287 00001DC0 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00001DC3 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00001DC6 488D3DA4E8FFFF      <1>     lea rdi, dirSrchFCB
   291 00001DCD B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 00001DD2 CD21                <1>     int 21h
   293 00001DD4 5F                  <1>     pop rdi
   294 00001DD5 31C0                <1>     xor eax, eax
   295 00001DD7 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00001DD9 0FB6050EE8FFFF      <1>     movzx eax, byte [dirDrv] 
   298 00001DE0 E884100000          <1>     call volume.dirEP
   299 00001DE5 488D158CEEFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 00001DEC B409                <1>     mov ah, 09h
   301 00001DEE CD21                <1>     int 21h
   302 00001DF0 C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 00001DF3 488D15F5E7FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 00001DFA B409                <1>     mov ah, 09h
   305 00001DFC CD21                <1>     int 21h
   306 00001DFE C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 00001E01 488D1561EBFFFF      <1>     lea rdx, crlf2
   308 00001E08 B409                <1>     mov ah, 09h
   309 00001E0A CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 00001E0C 8A0517E2FFFF        <1>     mov al, byte [pathSep]
   313 00001E12 3847FF              <1>     cmp byte [rdi - 1], al
   314 00001E15 7403                <1>     je .root
   315 00001E17 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 00001E1A 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 00001E1D AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 00001E1E 488D354DE8FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 00001E25 E8E01D0000          <1>     call FCBToAsciiz    ;Terminates for free
   321 00001E2A E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 00001E2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 00001E30 E8851F0000          <1>     call setDTA
   326 00001E35 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 00001E3A 488D15AEE7FFFF      <1>     lea rdx, dirSrchDir
   328 00001E41 B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00001E46 CD21                <1>     int 21h
   330 00001E48 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00001E4A E890000000          <1>     call .dirPrintFileData  ;Print the file information
   333 00001E4F B44F                <1>     mov ah, 4Fh
   334 00001E51 CD21                <1>     int 21h
   335 00001E53 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00001E55 F6058CE7FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00001E5C 740B                <1>     jz .dirNoEndNewLine
   339 00001E5E 488D1501EBFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00001E65 B409                <1>     mov ah, 09h
   341 00001E67 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00001E69 F70577E7FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 00001E72 FF                  <1>
   345 00001E73 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00001E75 488D1579EBFFFF      <1>     lea rdx, fnfMsg
   348 00001E7C E87E1A0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 00001E81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 00001E82 488D15A1F0FFFF      <1>     lea rdx, fourSpc
   352 00001E89 B409                <1>     mov ah, 09h
   353 00001E8B CD21                <1>     int 21h
   354 00001E8D B409                <1>     mov ah, 09h ;Print four Spaces twice
   355 00001E8F CD21                <1>     int 21h
   356 00001E91 8B0553E7FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   357 00001E97 E8401E0000          <1>     call printDecimalWord
   358 00001E9C 488D150EECFFFF      <1>     lea rdx, dirOk
   359 00001EA3 B409                <1>     mov ah, 09h
   360 00001EA5 CD21                <1>     int 21h
   361 00001EA7 488D1581F0FFFF      <1>     lea rdx, threeSpc
   362 00001EAE B409                <1>     mov ah, 09h
   363 00001EB0 CD21                <1>     int 21h
   364 00001EB2 B800360000          <1>     mov eax, 3600h ;Get disk info
   365 00001EB7 8A1531E7FFFF        <1>     mov dl, byte [dirDrv]
   366 00001EBD FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   367 00001EBF CD21                <1>     int 21h ;Get disk free space info
   368 00001EC1 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   369 00001EC4 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   370 00001EC7 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   371 00001EC9 F7E1                <1>     mul ecx ;Get bytes per cluster
   372 00001ECB 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   373                              <1>     ;rax now has the number of free bytes on the disk
   374 00001ECE E8091E0000          <1>     call printDecimalWord
   375 00001ED3 488D15E1EBFFFF      <1>     lea rdx, bytesOk
   376 00001EDA B409                <1>     mov ah, 09h
   377 00001EDC CD21                <1>     int 21h
   378                              <1>     return
    13                              <2> %%_ret:
    14 00001EDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> .dirPrintFileData:
   381                              <1> ;Use cmdFcb to build the file name with space
   382                              <1> ;Start by print the name (same for both cases)
   383                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   384 00001EDF F60599E2FFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   385                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001EE6 75(DE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   386 00001EE8 488D3599E2FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   387 00001EEF 488D3D64E2FFFF      <1>     lea rdi, cmdFcb
   388 00001EF6 E8A11C0000          <1>     call asciiFilenameToFCB
   389 00001EFB 488D1558E2FFFF      <1>     lea rdx, cmdFcb
   390 00001F02 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   391 00001F07 BB01000000          <1>     mov ebx, 1  ;STDOUT
   392 00001F0C B440                <1>     mov ah, 40h ;Write handle
   393 00001F0E CD21                <1>     int 21h
   394 00001F10 52                  <1>     push rdx
   395 00001F11 B220                <1>     mov dl, " "
   396 00001F13 B402                <1>     mov ah, 02h ;Print char
   397 00001F15 CD21                <1>     int 21h
   398 00001F17 5A                  <1>     pop rdx
   399 00001F18 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   400 00001F1F B903000000          <1>     mov ecx, 3  ;Print three chars
   401 00001F24 BB01000000          <1>     mov ebx, 1  ;STDOUT
   402 00001F29 B440                <1>     mov ah, 40h ;Write handle
   403 00001F2B CD21                <1>     int 21h
   404 00001F2D F605B4E6FFFF01      <1>     test byte [dirFlags], dirWideType
   405 00001F34 0F85A8000000        <1>     jnz .widePrint
   406                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   407                              <1>     ;Now check if a DIR
   408 00001F3A F6053EE2FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   409 00001F41 7418                <1>     jz .dirPrintNotDir
   410 00001F43 488D157FEBFFFF      <1>     lea rdx, dirLbl
   411 00001F4A B409                <1>     mov ah, 09h
   412 00001F4C CD21                <1>     int 21h
   413 00001F4E 488D15DAEFFFFF      <1>     lea rdx, threeSpc
   414 00001F55 B409                <1>     mov ah, 09h
   415 00001F57 CD21                <1>     int 21h
   416 00001F59 EB4F                <1>     jmp short .dirPrintFileDT
   417                              <1> .dirPrintNotDir:
   418                              <1> ;Here we print the file size
   419 00001F5B B220                <1>     mov dl, " "
   420 00001F5D B402                <1>     mov ah, 02h
   421 00001F5F CD21                <1>     int 21h
   422 00001F61 8B051DE2FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   423 00001F67 E8E11D0000          <1>     call getDecimalWord
   424 00001F6C 4889CB              <1>     mov rbx, rcx
   425 00001F6F 51                  <1>     push rcx
   426 00001F70 480FCB              <1>     bswap rbx
   427 00001F73 B908000000          <1>     mov ecx, 8
   428                              <1> .dirPrintFileSizePrep:
   429 00001F78 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   430 00001F7A 7514                <1>     jne .dirPrintFileSize
   431 00001F7C B402                <1>     mov ah, 02h
   432 00001F7E B220                <1>     mov dl, " "
   433 00001F80 CD21                <1>     int 21h
   434 00001F82 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   435 00001F86 FFC9                <1>     dec ecx
   436 00001F88 81F901000000        <1>     cmp ecx, 1
   437 00001F8E 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   438                              <1> .dirPrintFileSize:
   439 00001F90 5B                  <1>     pop rbx
   440                              <1> .dirPrintFileSizeLoop:
   441 00001F91 88DA                <1>     mov dl, bl
   442 00001F93 B402                <1>     mov ah, 02h
   443 00001F95 CD21                <1>     int 21h
   444 00001F97 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   445 00001F9B FFC9                <1>     dec ecx
   446 00001F9D 75F2                <1>     jnz .dirPrintFileSizeLoop
   447 00001F9F 488D158DEFFFFF      <1>     lea rdx, twoSpc
   448 00001FA6 B409                <1>     mov ah, 09h
   449 00001FA8 CD21                <1>     int 21h
   450                              <1> .dirPrintFileDT:
   451 00001FAA B220                <1>     mov dl, " "
   452 00001FAC B402                <1>     mov ah, 02h
   453 00001FAE CD21                <1>     int 21h
   454 00001FB0 0FB705CBE1FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   455 00001FB7 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   456 00001FB9 E8F1160000          <1>     call printDate
   457 00001FBE 488D156EEFFFFF      <1>     lea rdx, twoSpc
   458 00001FC5 B409                <1>     mov ah, 09h
   459 00001FC7 CD21                <1>     int 21h
   460 00001FC9 0FB705B0E1FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   461 00001FD0 E8FC170000          <1>     call printTime
   462 00001FD5 488D158AE9FFFF      <1>     lea rdx, crlf
   463 00001FDC B409                <1>     mov ah, 09h
   464 00001FDE CD21                <1>     int 21h
   465 00001FE0 EB0B                <1>     jmp short .dirPrintNameExit
   466                              <1> .widePrint:
   467                              <1> ;If /W, print name space ext space space space space
   468 00001FE2 488D1541EFFFFF      <1>     lea rdx, fourSpc
   469 00001FE9 B409                <1>     mov ah, 09h ;Print string
   470 00001FEB CD21                <1>     int 21h
   471                              <1> .dirPrintNameExit:
   472 00001FED FF05F7E5FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   473 00001FF3 FE05F0E5FFFF        <1>     inc byte [dirLineCtr]
   474 00001FF9 803DE9E5FFFF17      <1>     cmp byte [dirLineCtr], 23
   475                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002000 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002002 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   476 00002003 488D15E6EAFFFF      <1>     lea rdx, pauseMes
   477 0000200A B409                <1>     mov ah, 09h
   478 0000200C CD21                <1>     int 21h
   479 0000200E B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   480 00002010 CD21                <1>     int 21h
   481 00002012 C605D0E5FFFF00      <1>     mov byte [dirLineCtr], 0
   482 00002019 488D1546E9FFFF      <1>     lea rdx, crlf   ;Force new line
   483 00002020 B409                <1>     mov ah, 09h
   484 00002022 CD21                <1>     int 21h
   485                              <1>     return
    13                              <2> %%_ret:
    14 00002024 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> chdir:
   488 00002025 F60580E0FFFFFF      <1>     test byte [arg1Flg], -1
   489 0000202C 754D                <1>     jnz .changeDir
   490                              <1>     ;Print CWD
   491                              <1> .printCWD:
   492 0000202E E841190000          <1>     call putCWDInPrompt ;Exactly the same procedure
   493 00002033 E8C0180000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 00002038 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .printDiskCWD:
   496                              <1> ;Print CWD for a specified drive
   497 00002039 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   498 0000203D 88D0                <1>     mov al, dl
   499 0000203F 0440                <1>     add al, "@" ;Get the UC letter
   500 00002041 B43A                <1>     mov ah, ":"
   501 00002043 488D3D9AE4FFFF      <1>     lea rdi, searchSpec
   502 0000204A 66AB                <1>     stosw   ;Store X:, rdi+=2
   503 0000204C 8A05D7DFFFFF        <1>     mov al, byte [pathSep]
   504 00002052 AA                  <1>     stosb   ;Store pathSep, inc rdi
   505 00002053 B447                <1>     mov ah, 47h ;Get Current Working Directory
   506 00002055 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   507 00002058 CD21                <1>     int 21h
   508 0000205A E8B41A0000          <1>     call strlen
   509 0000205F 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   510 00002065 B440                <1>     mov ah, 40h ;Write to handle
   511 00002067 BB01000000          <1>     mov ebx, 1  ;STDOUT
   512 0000206C 488D1571E4FFFF      <1>     lea rdx, searchSpec
   513 00002073 CD21                <1>     int 21h
   514 00002075 E87E180000          <1>     call printCRLF
   515                              <1>     return
    13                              <2> %%_ret:
    14 0000207A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   516                              <1> .changeDir:
   517 0000207B 8A052DE0FFFF        <1>     mov al, byte [arg1FCBret]
   518 00002081 3CFF                <1>     cmp al, -1 
   519 00002083 0F8476FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   520 00002089 E8151C0000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   521 0000208E 488D154FE4FFFF      <1>     lea rdx, searchSpec
   522 00002095 B43B                <1>     mov ah, 3Bh ;CHDIR
   523 00002097 CD21                <1>     int 21h
   524 00002099 0F828DFAFFFF        <1>     jc badDirError
   525                              <1>     return
    13                              <2> %%_ret:
    14 0000209F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   526                              <1> 
   527                              <1> mkdir:
   528 000020A0 F60505E0FFFFFF      <1>     test byte [arg1Flg], -1
   529 000020A7 0F845BFAFFFF        <1>     jz badArgError
   530 000020AD F605FBDFFFFFFF      <1>     test byte [arg2Flg], -1
   531 000020B4 0F854EFAFFFF        <1>     jnz badArgError
   532                              <1>     ;We have exactly one argument
   533 000020BA 8A05EEDFFFFF        <1>     mov al, byte [arg1FCBret]
   534 000020C0 3CFF                <1>     cmp al, -1 
   535 000020C2 0F8437FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   536 000020C8 E8D61B0000          <1>     call buildCommandPath
   537 000020CD 488D1510E4FFFF      <1>     lea rdx, searchSpec
   538 000020D4 B800390000          <1>     mov eax, 3900h  ;MKDIR
   539 000020D9 CD21                <1>     int 21h
   540                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000020DB 73(9F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   541                              <1> .badMake:   ;Else, bad make
   542 000020DD 488D1540EBFFFF      <1>     lea rdx, badMD
   543 000020E4 E916180000          <1>     jmp printString
   544                              <1> 
   545                              <1> rmdir:
   546 000020E9 F605BCDFFFFFFF      <1>     test byte [arg1Flg], -1
   547 000020F0 0F8412FAFFFF        <1>     jz badArgError
   548 000020F6 F605B2DFFFFFFF      <1>     test byte [arg2Flg], -1
   549 000020FD 0F8505FAFFFF        <1>     jnz badArgError
   550                              <1>     ;We have exactly one argument
   551 00002103 8A05A5DFFFFF        <1>     mov al, byte [arg1FCBret]
   552 00002109 3CFF                <1>     cmp al, -1 
   553 0000210B 0F84EEF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   554 00002111 E88D1B0000          <1>     call buildCommandPath
   555 00002116 488D15C7E3FFFF      <1>     lea rdx, searchSpec
   556 0000211D B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   557 00002122 CD21                <1>     int 21h
   558                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002124 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002126 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   559                              <1> .badRemove:   ;Else, bad make
   560 00002127 488D1513EBFFFF      <1>     lea rdx, badRD
   561 0000212E E9CC170000          <1>     jmp printString
   562                              <1> 
   563                              <1> ;copy:
   564                              <1> ;    mov word [sourceHdl], -1
   565                              <1> ;    mov word [destHdl], -1
   566                              <1> ;    mov word [srcHdlInfo], -1
   567                              <1> ;    mov byte [bCpFlg], 0
   568                              <1> ;    mov qword [cpBufPtr], 0         ;If this is ever null, error!
   569                              <1> ;    mov word [wCpBufSz], 0          
   570                              <1> ;    mov dword [dCpCnt], 0
   571                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   572                              <1> ;If we cant get a disk buffer, use searchspec as an input buffer! 
   573                              <1> ;   (Can copy 256 chars at once)
   574                              <1> ;    mov eax, 5200h
   575                              <1> ;    int 21h ;Get in rbx ptr to sysvars
   576                              <1> ;    movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   577                              <1> ;    mov ebx, ecx
   578                              <1> ;    shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   579                              <1> ;    mov eax, 4800h
   580                              <1> ;    int 21h
   581                              <1> ;    jnc .bufOk
   582                              <1> ;    lea rax, searchSpec
   583                              <1> ;    mov ecx, 256
   584                              <1> ;.bufOk:
   585                              <1> ;    mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   586                              <1> ;    mov word [wCpBufSz], cx     ;Save buffer size
   587                              <1> 
   588                              <1> ;    lea rsi, qword [r8 + cmdLine]
   589                              <1> ;    mov rdi, rsi                    ;Start scanning chars here
   590                              <1> ;    movzx ecx, byte [rdi - 1]       ;Get the count byte
   591                              <1> ;    mov al, "+"                     ;Are we concatenating?
   592                              <1> ;    repne scasb
   593                              <1> ;    jne .noCat
   594                              <1> ;    or byte [bCpFlg], catCpy        ;We are concatenating 
   595                              <1> ;.noCat:
   596                              <1> ;Now we search for the destination name. This is done by searching for a 
   597                              <1> ; delimiter that is followed by a non-+ and non-switchchar
   598                              <1> ;
   599                              <1> ;.cpErr:
   600                              <1> ;    push r8
   601                              <1> ;    mov r8, qword [cpBufPtr]
   602                              <1> ;    mov eax, 4900h
   603                              <1> ;    int 21h
   604                              <1> ;    pop r8
   605                              <1> ;    jc freezePC ;Bad ptr or bad mcb. Bad ptr shouldnt happen, badMCB big error
   606                              <1> ;    ;Other cleanup here
   607                              <1> ;    return
   608                              <1> copy:
   609 00002133 F60572DFFFFFFF      <1>     test byte [arg1Flg], -1
   610 0000213A 0F84C8F9FFFF        <1>     jz badArgError
   611 00002140 F60568DFFFFFFF      <1>     test byte [arg2Flg], -1
   612 00002147 0F84BBF9FFFF        <1>     jz badArgError
   613 0000214D 0FB60559DFFFFF      <1>     movzx eax, byte [arg1Off]
   614 00002154 4C8B05B4DEFFFF      <1>     mov r8, [pspPtr]
   615 0000215B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   616 00002162 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   617 00002165 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   618 00002168 488D3D42E5FFFF      <1>     lea rdi, srcSpec
   619 0000216F E8EC1A0000          <1>     call cpDelimPathToBufz    
   620 00002174 0FB60535DFFFFF      <1>     movzx eax, byte [arg2Off]
   621 0000217B 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   622 0000217E 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   623 00002181 488D3DABE5FFFF      <1>     lea rdi, destSpec
   624 00002188 E8D31A0000          <1>     call cpDelimPathToBufz   
   625                              <1> ;Before we open, we check if the two filenames are equal
   626                              <1> ; If so, crap out.
   627 0000218D 488D351DE5FFFF      <1>     lea rsi, srcSpec
   628 00002194 488D3D98E5FFFF      <1>     lea rdi, destSpec
   629 0000219B B81E120000          <1>     mov eax, 121Eh
   630 000021A0 CD2F                <1>     int 2Fh
   631 000021A2 0F84D0000000        <1>     jz .sameFilename
   632                              <1>     ;Open source with read permission
   633                              <1>     ;Open destination with write permission
   634 000021A8 488D1502E5FFFF      <1>     lea rdx, srcSpec
   635 000021AF B8003D0000          <1>     mov eax, 3D00h  ;Read open
   636 000021B4 CD21                <1>     int 21h
   637 000021B6 0F823AF9FFFF        <1>     jc badParamError
   638 000021BC 6689050DE6FFFF      <1>     mov word [sourceHdl], ax
   639                              <1> 
   640 000021C3 0FB7D8              <1>     movzx ebx, ax   ;For bx
   641 000021C6 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   642 000021CB CD21                <1>     int 21h
   643 000021CD 66891500E6FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   644                              <1> 
   645 000021D4 488D1558E5FFFF      <1>     lea rdx, destSpec
   646 000021DB B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   647 000021E0 31C9                <1>     xor ecx, ecx    ;No file attributes
   648 000021E2 CD21                <1>     int 21h
   649 000021E4 0F82B5000000        <1>     jc .badExit
   650 000021EA 668905E1E5FFFF      <1>     mov word [destHdl], ax
   651 000021F1 31F6                <1>     xor esi, esi
   652 000021F3 488D15DCE5FFFF      <1>     lea rdx, copyBuffer
   653                              <1> .copyLoop:
   654 000021FA B980000000          <1>     mov ecx, 128
   655 000021FF 0FB71DCAE5FFFF      <1>     movzx ebx, word [sourceHdl]
   656 00002206 B43F                <1>     mov ah, 3Fh ;Read
   657 00002208 CD21                <1>     int 21h
   658 0000220A 0F828F000000        <1>     jc .badExit
   659 00002210 85C0                <1>     test eax, eax
   660 00002212 7437                <1>     jz .okExit
   661 00002214 01C6                <1>     add esi, eax
   662 00002216 89C1                <1>     mov ecx, eax
   663 00002218 0FB71DB3E5FFFF      <1>     movzx ebx, word [destHdl]
   664 0000221F B440                <1>     mov ah, 40h ;Write
   665 00002221 CD21                <1>     int 21h
   666 00002223 727A                <1>     jc .badExit
   667 00002225 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   668 0000222A 74CE                <1>     je .copyLoop
   669                              <1>     ;If not char dev, exit
   670 0000222C 66F7059FE5FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   671 00002235 7414                <1>     jz .okExit
   672                              <1>     ;Is handle in cooked or binary mode?
   673 00002237 66F70594E5FFFF2000  <1>     test word [srcHdlInfo], 20h
   674 00002240 7509                <1>     jnz .okExit
   675                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   676 00002242 09C0                <1>     or eax, eax ;Clear upper bits in eax
   677 00002244 807C02FD1A          <1>     cmp byte [rdx + rax - 3], EOF ;Was char before CRLF a EOF?
   678 00002249 75AF                <1>     jne .copyLoop   ;Jump if not
   679                              <1> .okExit:
   680 0000224B E832000000          <1>     call .leaveCopyClose
   681 00002250 488D150FE7FFFF      <1>     lea rdx, crlf
   682 00002257 B409                <1>     mov ah, 09h
   683 00002259 CD21                <1>     int 21h
   684 0000225B 488D15C8ECFFFF      <1>     lea rdx, fourSpc
   685 00002262 B409                <1>     mov ah, 09h
   686 00002264 CD21                <1>     int 21h
   687 00002266 B402                <1>     mov ah, 02h
   688 00002268 B231                <1>     mov dl, "1" ;1 File(s) copied
   689 0000226A CD21                <1>     int 21h
   690 0000226C 488D152CE8FFFF      <1>     lea rdx, copyOk
   691 00002273 B409                <1>     mov ah, 09h
   692 00002275 CD21                <1>     int 21h
   693                              <1>     return
    13                              <2> %%_ret:
    14 00002277 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> .sameFilename:
   695 00002278 E805000000          <1>     call .leaveCopyClose ;Close the handles
   696 0000227D E96BF8FFFF          <1>     jmp noSelfCopyError
   697                              <1> .leaveCopyClose:
   698 00002282 668B1D47E5FFFF      <1>     mov bx, word [sourceHdl]
   699 00002289 B8003E0000          <1>     mov eax, 3E00h
   700 0000228E CD21                <1>     int 21h
   701 00002290 668B1D3BE5FFFF      <1>     mov bx, word [destHdl]
   702 00002297 B8003E0000          <1>     mov eax, 3E00h
   703 0000229C CD21                <1>     int 21h
   704                              <1>     return
    13                              <2> %%_ret:
    14 0000229E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   705                              <1> .badExit:
   706                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   707 0000229F 668B1D2AE5FFFF      <1>     mov bx, word [sourceHdl]
   708 000022A6 6681FBFFFF          <1>     cmp bx, -1
   709 000022AB 7407                <1>     je .skipSource
   710 000022AD B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   711 000022B2 CD21                <1>     int 21h
   712                              <1> .skipSource:
   713 000022B4 668B1D17E5FFFF      <1>     mov bx, word [destHdl]
   714 000022BB 6681FBFFFF          <1>     cmp bx, -1
   715 000022C0 0F8430F8FFFF        <1>     je badParamError
   716 000022C6 B8003E0000          <1>     mov eax, 3E00h
   717 000022CB CD21                <1>     int 21h
   718 000022CD E924F8FFFF          <1>     jmp badParamError
   719                              <1> 
   720                              <1> erase:
   721 000022D2 F605D3DDFFFFFF      <1>     test byte [arg1Flg], -1
   722 000022D9 0F8429F8FFFF        <1>     jz badArgError
   723 000022DF E8D61A0000          <1>     call setDTA     ;Start by resetting the DTA
   724 000022E4 E8BA190000          <1>     call buildCommandPath   ;Get the relative path to the file
   725                              <1> .dirLp:
   726 000022E9 488D3DF4E1FFFF      <1>     lea rdi, searchSpec
   727 000022F0 E8F1180000          <1>     call findLastPathComponant
   728 000022F5 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   729 000022F8 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   730 000022FC B03F                <1>     mov al, "?"
   731                              <1>     ;Store question marks in the name field
   732 000022FE 57                  <1>     push rdi
   733 000022FF 48FFC7              <1>     inc rdi ;Goto the first char
   734 00002302 B90B000000          <1>     mov ecx, 11
   735 00002307 F3AA                <1>     rep stosb
   736 00002309 5F                  <1>     pop rdi
   737 0000230A 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   738 0000230D B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   739 00002312 CD21                <1>     int 21h
   740 00002314 3C01                <1>     cmp al, 1
   741 00002316 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   742                              <1>     ;Else, we now copy back the search pattern over the last componant!
   743                              <1>     ;No dirs to handle in here
   744 0000231C 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   745 00002320 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   746 00002323 E8E2180000          <1>     call FCBToAsciiz    ;Null terminates for free
   747                              <1>     ;Count the number of ?'s, if 11, we print the message
   748 00002328 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   749 0000232C 31C9                <1>     xor ecx, ecx
   750                              <1> .wcScan:
   751 0000232E AC                  <1>     lodsb
   752 0000232F 3C3F                <1>     cmp al, "?"
   753 00002331 7534                <1>     jne .endCount
   754 00002333 FFC1                <1>     inc ecx
   755 00002335 81F90B000000        <1>     cmp ecx, 11
   756 0000233B 75F1                <1>     jne .wcScan
   757                              <1> .ynmsg:
   758 0000233D 488D1580E8FFFF      <1>     lea rdx, ynMes
   759 00002344 E8B6150000          <1>     call printString
   760 00002349 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   761 0000234B CD21                <1>     int 21h ;Get char in al
   762 0000234D E8CB170000          <1>     call ucChar ;Uppercase the char
   763 00002352 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   764 00002354 740C                <1>     je .endCount1
   765 00002356 3C4E                <1>     cmp al, "N"
   766                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002358 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000235A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 0000235B E898150000          <1>     call printCRLF      ;Else, tell me what you want!!!
   768 00002360 EBDB                <1>     jmp short .ynmsg    
   769                              <1> .endCount1:
   770 00002362 E891150000          <1>     call printCRLF
   771                              <1> .endCount:
   772                              <1>     ;Now we copy our search template pathstring to delPath
   773 00002367 488D3D43E3FFFF      <1>     lea rdi, delPath
   774 0000236E 488D356FE1FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   775 00002375 E88F170000          <1>     call strcpy2         ;Copy the string over to delPath
   776                              <1> .findFile:
   777                              <1>     ;Now we find first/find next our way through the files
   778 0000237A 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   779 0000237D 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   780 0000237F B8004E0000          <1>     mov eax, 4E00h  ;Find first
   781 00002384 CD21                <1>     int 21h
   782 00002386 0F8297F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   783                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   784 0000238C E855180000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   785 00002391 488D35F0DDFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   786                              <1> .delNextFile:
   787                              <1> ;rsi and rdi dont move here
   788 00002398 E86C170000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   789 0000239D 488D150DE3FFFF      <1>     lea rdx, delPath
   790 000023A4 B800410000          <1>     mov eax, 4100h  ;Delete File 
   791 000023A9 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   792 000023AB 488D1532E1FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   793 000023B2 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   794 000023B7 CD21                <1>     int 21h
   795 000023B9 73DD                <1>     jnc .delNextFile    
   796 000023BB F8                  <1>     clc ;Clear carry to indicate success
   797                              <1>     return
    13                              <2> %%_ret:
    14 000023BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .noWildcard:
   799                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   800                              <1>     ; a \*.*<NUL> over the null terminator
   801 000023BD 488D1520E1FFFF      <1>     lea rdx, searchSpec
   802 000023C4 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   803 000023C9 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   804 000023CE CD21                <1>     int 21h
   805 000023D0 0F824DF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   806 000023D6 F605A2DDFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   807 000023DD 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   808                              <1>     ;Else, we are dealing with a dir
   809 000023DF 4889D7              <1>     mov rdi, rdx
   810 000023E2 31C9                <1>     xor ecx, ecx
   811 000023E4 FFC9                <1>     dec ecx
   812 000023E6 F2AE                <1>     repne scasb ;Go to the end of the line!
   813 000023E8 48FFCF              <1>     dec rdi
   814 000023EB 0FB60537DCFFFF      <1>     movzx eax, byte [pathSep]
   815 000023F2 AA                  <1>     stosb
   816 000023F3 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   817 000023F8 AB                  <1>     stosd
   818 000023F9 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   819                              <1> .delMain:   ;Call with rdx -> buffer!
   820 000023FE B800410000          <1>     mov eax, 4100h  ;Delete File 
   821 00002403 CD21                <1>     int 21h
   822                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002405 73(BC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   823 00002407 3C05                <1>     cmp al, errAccDen
   824 00002409 0F84D5F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   825 0000240F E9FDF6FFFF          <1>     jmp badFileError
   826                              <1>     return
    13                              <2> %%_ret:
    14 00002414 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   827                              <1> 
   828                              <1> date:
   829 00002415 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   830 0000241C E80E170000          <1>     call skipDelimiters
   831 00002421 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   832 00002424 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
   833                              <1>     ;Else, we do interactive mode!
   834 00002426 488D151AE7FFFF      <1>     lea rdx, curDate
   835 0000242D B409                <1>     mov ah, 09h
   836 0000242F CD21                <1>     int 21h
   837 00002431 E8F8150000          <1>     call printFmtDate
   838                              <1> .noCur:
   839 00002436 488D151BE7FFFF      <1>     lea rdx, newDate
   840 0000243D B409                <1>     mov ah, 09h
   841 0000243F CD21                <1>     int 21h
   842 00002441 488D152FE7FFFF      <1>     lea rdx, ukDate
   843 00002448 488D051BE7FFFF      <1>     lea rax, usDate
   844 0000244F 488D1D2EE7FFFF      <1>     lea rbx, jpDate
   845 00002456 803DD7DBFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   846 0000245D 480F47D3            <1>     cmova rdx, rbx
   847 00002461 480F42D0            <1>     cmovb rdx, rax
   848 00002465 B409                <1>     mov ah, 09h
   849 00002467 CD21                <1>     int 21h
   850                              <1> 
   851 00002469 488D15C7DDFFFF      <1>     lea rdx, cpyBuffer
   852 00002470 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   853 00002473 B40A                <1>     mov ah, 0Ah
   854 00002475 CD21                <1>     int 21h
   855 00002477 52                  <1>     push rdx
   856 00002478 E87B140000          <1>     call printCRLF
   857 0000247D 5A                  <1>     pop rdx
   858 0000247E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   859                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002482 74(14)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   860                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
   861 00002484 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   862                              <1> .goDate:
   863 00002488 31C0                <1>     xor eax, eax    
   864 0000248A 803DA3DBFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   865 00002491 727B                <1>     jb .us
   866 00002493 0F87B7000000        <1>     ja .jpn
   867                              <1>     ;Here for UK style dates
   868 00002499 E8D6180000          <1>     call getByte
   869 0000249E 725D                <1>     jc .badDate
   870 000024A0 880509E2FFFF        <1>     mov byte [td3], al  ;Store the day
   871 000024A6 E80C010000          <1>     call .validSep
   872 000024AB 7550                <1>     jne .badDate
   873 000024AD E8C2180000          <1>     call getByte
   874 000024B2 7249                <1>     jc .badDate
   875 000024B4 8805F6E1FFFF        <1>     mov byte [td4], al  ;Store month
   876 000024BA E8F8000000          <1>     call .validSep
   877 000024BF 753C                <1>     jne .badDate
   878 000024C1 E8BA180000          <1>     call getNum
   879 000024C6 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
   880 000024CB 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   881 000024D0 732B                <1>     jae .badDate
   882 000024D2 668905D4E1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   883                              <1> .writeDate:
   884 000024D9 E851160000          <1>     call skipDelimiters
   885 000024DE 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
   886 000024E1 751A                <1>     jne .badDate
   887 000024E3 0FB70DC3E1FFFF      <1>     movzx ecx, word [td1]   ;Get the year
   888 000024EA 668B15BEE1FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
   889 000024F1 B8002B0000          <1>     mov eax, 2B00h
   890 000024F6 CD21                <1>     int 21h
   891 000024F8 84C0                <1>     test al, al
   892                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000024FA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000024FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   893                              <1> .badDate:
   894 000024FD 488D1534E6FFFF      <1>     lea rdx, badDate
   895 00002504 E8F6130000          <1>     call printString
   896 00002509 E928FFFFFF          <1>     jmp date.noCur
   897                              <1> .us:
   898 0000250E E861180000          <1>     call getByte
   899 00002513 72E8                <1>     jc .badDate
   900 00002515 880595E1FFFF        <1>     mov byte [td4], al  ;Store the month
   901 0000251B E897000000          <1>     call .validSep
   902 00002520 75DB                <1>     jne .badDate
   903 00002522 E84D180000          <1>     call getByte
   904 00002527 72D4                <1>     jc .badDate
   905 00002529 880580E1FFFF        <1>     mov byte [td3], al  ;Store day
   906 0000252F E883000000          <1>     call .validSep
   907 00002534 75C7                <1>     jne .badDate
   908 00002536 E845180000          <1>     call getNum
   909 0000253B E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
   910 00002540 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   911 00002545 73B6                <1>     jae .badDate
   912 00002547 6689055FE1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   913                              <1> .writeHop:
   914 0000254E EB89                <1>     jmp short .writeDate
   915                              <1> .jpn:
   916 00002550 E82B180000          <1>     call getNum
   917 00002555 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
   918 0000255A 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
   919 0000255F 739C                <1>     jae .badDate
   920 00002561 66890545E1FFFF      <1>     mov word [td1], ax  ;Store the word directly
   921 00002568 E84A000000          <1>     call .validSep
   922 0000256D 758E                <1>     jne .badDate
   923 0000256F E800180000          <1>     call getByte
   924 00002574 7287                <1>     jc .badDate
   925 00002576 880533E1FFFF        <1>     mov byte [td3], al  ;Store the day
   926 0000257C E836000000          <1>     call .validSep
   927 00002581 0F8576FFFFFF        <1>     jne .badDate
   928 00002587 E8E8170000          <1>     call getByte
   929 0000258C 0F826BFFFFFF        <1>     jc .badDate
   930 00002592 880518E1FFFF        <1>     mov byte [td4], al  ;Store month
   931 00002598 EBB4                <1>     jmp short .writeHop
   932                              <1> .doYear:
   933 0000259A 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
   934                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000259F 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000025A1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   935                              <1> ;If the user specifies 80-99 it means 1980-1999
   936                              <1> ;If the user specifies 00-79 it means 2000-2079
   937 000025A2 BBD0070000          <1>     mov ebx, 2000
   938 000025A7 B96C070000          <1>     mov ecx, 1900
   939 000025AC 3D50000000          <1>     cmp eax, 80     
   940 000025B1 0F42CB              <1>     cmovb ecx, ebx
   941 000025B4 01C8                <1>     add eax, ecx
   942                              <1>     return
    13                              <2> %%_ret:
    14 000025B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   943                              <1> .validSep:
   944 000025B7 AC                  <1>     lodsb           ;Get the char and return
   945 000025B8 3C2E                <1>     cmp al, "."
   946                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025BA 74(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   947 000025BC 3C2F                <1>     cmp al, "/"
   948                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000025BE 74(B6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   949 000025C0 3C2D                <1>     cmp al, "-"
   950                              <1>     return
    13                              <2> %%_ret:
    14 000025C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   951                              <1> 
   952                              <1> time:
   953 000025C3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   954 000025CA E860150000          <1>     call skipDelimiters
   955 000025CF 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
   956 000025D2 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
   957 000025D4 488D15C5E5FFFF      <1>     lea rdx, curTime
   958 000025DB B409                <1>     mov ah, 09h
   959 000025DD CD21                <1>     int 21h
   960 000025DF E8E1130000          <1>     call printFmtTime
   961                              <1> .noCur:
   962 000025E4 488D15C6E5FFFF      <1>     lea rdx, newTime
   963 000025EB B409                <1>     mov ah, 09h
   964 000025ED CD21                <1>     int 21h
   965                              <1> 
   966 000025EF 488D15BFDBFFFF      <1>     lea rdx, inBuffer
   967 000025F6 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   968 000025F9 B40A                <1>     mov ah, 0Ah
   969 000025FB CD21                <1>     int 21h
   970 000025FD 52                  <1>     push rdx
   971 000025FE 488D1561E3FFFF      <1>     lea rdx, crlf
   972 00002605 B409                <1>     mov ah, 09h
   973 00002607 CD21                <1>     int 21h
   974 00002609 5A                  <1>     pop rdx
   975 0000260A 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   976                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000260E 74(C2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   977 00002610 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
   978                              <1> .goTime:
   979 00002614 C7058FE0FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
   979 0000261D 00                  <1>
   980 0000261E 31C0                <1>     xor eax, eax   
   981 00002620 E84F170000          <1>     call getByte
   982 00002625 0F8294000000        <1>     jc .badTime         ;Get the number in eax
   983 0000262B 88057DE0FFFF        <1>     mov byte [td2], al  ;Save hours
   984 00002631 E89A000000          <1>     call .validsep
   985 00002636 0F8583000000        <1>     jne .badTime
   986 0000263C E833170000          <1>     call getByte
   987 00002641 727C                <1>     jc .badTime
   988 00002643 880564E0FFFF        <1>     mov byte [td1], al  ;Save minutes
   989 00002649 E882000000          <1>     call .validsep
   990 0000264E 740F                <1>     je .goSec
   991 00002650 48FFCE              <1>     dec rsi ;Go back a char
   992 00002653 E8D7140000          <1>     call skipDelimiters ;Skip any delimiters
   993 00002658 803E0D              <1>     cmp byte [rsi], CR
   994 0000265B 743E                <1>     je .setTime
   995 0000265D EB60                <1>     jmp short .badTime
   996                              <1> .goSec:
   997 0000265F E878000000          <1>     call .checkNum
   998 00002664 7259                <1>     jc .badTime
   999 00002666 E809170000          <1>     call getByte
  1000 0000266B 7252                <1>     jc .badTime
  1001 0000266D 88053DE0FFFF        <1>     mov byte [td4], al  ;Save seconds
  1002 00002673 AC                  <1>     lodsb       ;Move rsi forwards
  1003 00002674 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1004 00002676 740F                <1>     je .goMsec
  1005 00002678 48FFCE              <1>     dec rsi ;Go back a char
  1006 0000267B E8AF140000          <1>     call skipDelimiters ;Skip any delimiters
  1007 00002680 803E0D              <1>     cmp byte [rsi], CR
  1008 00002683 7416                <1>     je .setTime
  1009 00002685 EB38                <1>     jmp short .badTime
  1010                              <1> .goMsec:
  1011 00002687 E850000000          <1>     call .checkNum
  1012 0000268C 7231                <1>     jc .badTime
  1013 0000268E E8E1160000          <1>     call getByte
  1014 00002693 722A                <1>     jc .badTime
  1015 00002695 880514E0FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1016                              <1> .setTime:
  1017 0000269B E88F140000          <1>     call skipDelimiters
  1018 000026A0 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1019 000026A3 751A                <1>     jne .badTime
  1020 000026A5 0FB70D01E0FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1021 000026AC 0FB715FCDFFFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1022 000026B3 B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1023 000026B8 CD21                <1>     int 21h
  1024 000026BA A8FF                <1>     test al, -1
  1025                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000026BC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000026BE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1026                              <1> .badTime:
  1027 000026BF 488D15CBE4FFFF      <1>     lea rdx, badTime
  1028 000026C6 E834120000          <1>     call printString
  1029 000026CB E914FFFFFF          <1>     jmp time.noCur
  1030                              <1> .validsep:
  1031 000026D0 AC                  <1>     lodsb
  1032 000026D1 3A056AD9FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1033                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026D7 74(BE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1034 000026D9 3C2E                <1>     cmp al, "."
  1035                              <1>     return
    13                              <2> %%_ret:
    14 000026DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1036                              <1> .checkNum:
  1037 000026DC AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1038 000026DD 48FFCE              <1>     dec rsi
  1039 000026E0 3C30                <1>     cmp al, "0"
  1040 000026E2 7206                <1>     jb .cnbad
  1041 000026E4 3C39                <1>     cmp al, "9"
  1042 000026E6 7702                <1>     ja .cnbad
  1043 000026E8 F8                  <1>     clc
  1044                              <1>     return
    13                              <2> %%_ret:
    14 000026E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1045                              <1> .cnbad:
  1046 000026EA F9                  <1>     stc
  1047                              <1>     return
    13                              <2> %%_ret:
    14 000026EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1048                              <1> ctty:
  1049 000026EC F605B9D9FFFFFF      <1>     test byte [arg1Flg], -1
  1050 000026F3 0F840FF4FFFF        <1>     jz badArgError
  1051 000026F9 F605AFD9FFFFFF      <1>     test byte [arg2Flg], -1
  1052 00002700 0F8502F4FFFF        <1>     jnz badArgError
  1053 00002706 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1054 0000270D 0FB60599D9FFFF      <1>     movzx eax, byte [arg1Off]
  1055 00002714 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1056 00002717 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1057 0000271B 750F                <1>     jne .noDrive
  1058 0000271D 0FB6058AD9FFFF      <1>     movzx eax, byte [arg1FCBret]
  1059 00002724 3CFF                <1>     cmp al, -1
  1060 00002726 0F84D3F3FFFF        <1>     je badDriveError
  1061                              <1> .noDrive:
  1062                              <1>     ;Now we open the provided file
  1063 0000272C E88A150000          <1>     call copyArgumentToSearchSpec
  1064 00002731 488D15ACDDFFFF      <1>     lea rdx, searchSpec
  1065 00002738 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1066 0000273D CD21                <1>     int 21h
  1067 0000273F 0F82CCF3FFFF        <1>     jc badFileError
  1068 00002745 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1069 00002748 B800440000          <1>     mov eax, 4400h  ;Get device word
  1070 0000274D CD21                <1>     int 21h
  1071 0000274F F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1072 00002752 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1073                              <1>     ;Now we set this handle to be STDIO
  1074 00002754 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1075 00002757 30F6                <1>     xor dh, dh
  1076 00002759 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1077 0000275E CD21                <1>     int 21h
  1078                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1079 00002760 31C9                <1>     xor ecx, ecx    ;STDIN
  1080 00002762 B446                <1>     mov ah, 46h
  1081 00002764 CD21                <1>     int 21h
  1082 00002766 FFC1                <1>     inc ecx         ;STDOUT
  1083 00002768 B446                <1>     mov ah, 46h
  1084 0000276A CD21                <1>     int 21h
  1085 0000276C FFC1                <1>     inc ecx         ;STDERR
  1086 0000276E B446                <1>     mov ah, 46h
  1087 00002770 CD21                <1>     int 21h
  1088 00002772 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
  1089 00002774 CD21                <1>     int 21h
  1090                              <1>     return
    13                              <2> %%_ret:
    14 00002776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1091                              <1> .badCharDev:
  1092 00002777 488D1544E5FFFF      <1>     lea rdx, badDev
  1093 0000277E B409                <1>     mov ah, 09h
  1094 00002780 CD21                <1>     int 21h
  1095 00002782 B43E                <1>     mov ah, 3Eh ;Close opened handle
  1096 00002784 CD21                <1>     int 21h
  1097                              <1>     return
    13                              <2> %%_ret:
    14 00002786 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1098                              <1> 
  1099                              <1> cls:  
  1100 00002787 B800440000          <1>     mov eax, 4400h  ;Get device info
  1101 0000278C BB01000000          <1>     mov ebx, 1      ;for handle 1
  1102 00002791 CD21                <1>     int 21h         ;in dx
  1103 00002793 F7C280000000        <1>     test edx, devCharDev
  1104 00002799 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1105 0000279B F7C210000000        <1>     test edx, charDevFastOut
  1106 000027A1 743E                <1>     jz .doAnsi
  1107                              <1>     ;Test if Int 29h uses Int 30h
  1108                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1109                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1110 000027A3 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1111 000027A8 CD21                <1>     int 21h
  1112                              <1> .biosCheck:
  1113 000027AA 66813BCD30          <1>     cmp word [rbx], 30CDh
  1114 000027AF 740C                <1>     je .biosConfirmed
  1115 000027B1 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1116 000027B6 7429                <1>     je .doAnsi
  1117 000027B8 48FFC3              <1>     inc rbx
  1118 000027BB EBED                <1>     jmp short .biosCheck
  1119                              <1> .biosConfirmed:
  1120                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1121 000027BD B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1122 000027BF 31DB                <1>     xor ebx, ebx
  1123 000027C1 CD30                <1>     int 30h
  1124 000027C3 B40F                <1>     mov ah, 0Fh ;Get screen mode
  1125 000027C5 CD30                <1>     int 30h
  1126 000027C7 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1127 000027CA FECA                <1>     dec dl
  1128 000027CC B619                <1>     mov dh, 25  ;Number of rows is standard
  1129 000027CE 31C0                <1>     xor eax, eax
  1130 000027D0 89C1                <1>     mov ecx, eax
  1131 000027D2 B707                <1>     mov bh, 7   ;Screen attributes
  1132 000027D4 B406                <1>     mov ah, 6   ;Scroll
  1133 000027D6 CD30                <1>     int 30h
  1134 000027D8 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1135 000027DA B700                <1>     mov bh, 0   ;Page 0
  1136 000027DC B402                <1>     mov ah, 2
  1137 000027DE CD30                <1>     int 30h
  1138                              <1>     return
    13                              <2> %%_ret:
    14 000027E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1139                              <1> .doAnsi:
  1140                              <1> ;4 chars in the ansi routine
  1141                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1142                              <1> ; understand ANSI codes
  1143 000027E1 488D353EE7FFFF      <1>     lea rsi, ansiCls
  1144 000027E8 B904000000          <1>     mov ecx, 4
  1145 000027ED B406                <1>     mov ah, 06h ;Raw char output
  1146                              <1> .ansiLp:
  1147 000027EF AC                  <1>     lodsb   ;Get the char in 
  1148 000027F0 88C2                <1>     mov dl, al
  1149 000027F2 CD21                <1>     int 21h
  1150 000027F4 FFC9                <1>     dec ecx
  1151 000027F6 75F7                <1>     jnz .ansiLp
  1152                              <1>     return
    13                              <2> %%_ret:
    14 000027F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1153                              <1> 
  1154                              <1> break:
  1155 000027F9 F605ACD8FFFFFF      <1>     test byte [arg1Flg], -1
  1156 00002800 752D                <1>     jnz .argumentProvided
  1157                              <1>     ;Here we just get the status of break
  1158 00002802 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1159 00002807 CD21                <1>     int 21h
  1160 00002809 88D3                <1>     mov bl, dl
  1161 0000280B 488D1552E5FFFF      <1>     lea rdx, breakIs
  1162 00002812 B409                <1>     mov ah, 09h
  1163 00002814 CD21                <1>     int 21h
  1164 00002816 488D1542E5FFFF      <1>     lea rdx, onMes
  1165 0000281D 488D0D35E5FFFF      <1>     lea rcx, offMes
  1166 00002824 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1167 00002826 480F44D1            <1>     cmovz rdx, rcx
  1168 0000282A B409                <1>     mov ah, 09h
  1169 0000282C CD21                <1>     int 21h
  1170                              <1>     return
    13                              <2> %%_ret:
    14 0000282E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1171                              <1> .argumentProvided:
  1172 0000282F 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1173 00002833 AD                  <1>     lodsd   ;Read the word
  1174 00002834 89C3                <1>     mov ebx, eax
  1175 00002836 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1176 0000283B C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1177 0000283E 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1178 00002843 7416                <1>     je .maybeOn
  1179 00002845 663D4F46            <1>     cmp ax, "OF"
  1180 00002849 7523                <1>     jne .badOnOff
  1181 0000284B 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1182 00002850 6681FB4620          <1>     cmp bx, "F "
  1183 00002855 7517                <1>     jne .badOnOff
  1184                              <1>     ;Set off
  1185 00002857 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1186 00002859 EB0B                <1>     jmp short .setBreak
  1187                              <1> .maybeOn:
  1188 0000285B 663D4F4E            <1>     cmp ax, "ON"
  1189 0000285F 750D                <1>     jne .badOnOff
  1190                              <1>     ;Set on
  1191 00002861 BA01000000          <1>     mov edx, 1
  1192                              <1> .setBreak:
  1193 00002866 B801330000          <1>     mov eax, 3301h  ;Set break
  1194 0000286B CD21                <1>     int 21h
  1195                              <1>     return
    13                              <2> %%_ret:
    14 0000286D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1196                              <1> .badOnOff:
  1197 0000286E 488D15C1E6FFFF      <1>     lea rdx, badOnOff
  1198 00002875 B409                <1>     mov ah, 09h
  1199 00002877 CD21                <1>     int 21h
  1200                              <1>     return
    13                              <2> %%_ret:
    14 00002879 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1201                              <1> 
  1202                              <1> verify:
  1203 0000287A F6052BD8FFFFFF      <1>     test byte [arg1Flg], -1
  1204 00002881 752D                <1>     jnz .argumentProvided
  1205                              <1>     ;Here we just get the status of break
  1206 00002883 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1207 00002888 CD21                <1>     int 21h
  1208 0000288A 88C3                <1>     mov bl, al
  1209 0000288C 488D15DBE4FFFF      <1>     lea rdx, verifyIs
  1210 00002893 B409                <1>     mov ah, 09h
  1211 00002895 CD21                <1>     int 21h
  1212 00002897 488D15C1E4FFFF      <1>     lea rdx, onMes
  1213 0000289E 488D0DB4E4FFFF      <1>     lea rcx, offMes
  1214 000028A5 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1215 000028A7 480F44D1            <1>     cmovz rdx, rcx
  1216 000028AB B409                <1>     mov ah, 09h
  1217 000028AD CD21                <1>     int 21h
  1218                              <1>     return
    13                              <2> %%_ret:
    14 000028AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1219                              <1> .argumentProvided:
  1220 000028B0 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1221 000028B4 AD                  <1>     lodsd   ;Read the word
  1222 000028B5 89C3                <1>     mov ebx, eax
  1223 000028B7 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1224 000028BC C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1225 000028BF 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1226 000028C4 7416                <1>     je .maybeOn
  1227 000028C6 663D4F46            <1>     cmp ax, "OF"
  1228 000028CA 751F                <1>     jne .badOnOff
  1229 000028CC 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1230 000028D1 6681FB4620          <1>     cmp bx, "F "
  1231 000028D6 7513                <1>     jne .badOnOff
  1232                              <1>     ;Set off
  1233 000028D8 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1234 000028DA EB0A                <1>     jmp short .setVerify
  1235                              <1> .maybeOn:
  1236 000028DC 663D4F4E            <1>     cmp ax, "ON"
  1237 000028E0 7509                <1>     jne .badOnOff
  1238                              <1>     ;Set on
  1239 000028E2 31C0                <1>     xor eax, eax
  1240 000028E4 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1241                              <1> .setVerify:
  1242 000028E6 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1243 000028E8 CD21                <1>     int 21h
  1244                              <1>     return
    13                              <2> %%_ret:
    14 000028EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245                              <1> .badOnOff:
  1246 000028EB 488D1544E6FFFF      <1>     lea rdx, badOnOff
  1247 000028F2 B409                <1>     mov ah, 09h
  1248 000028F4 CD21                <1>     int 21h
  1249                              <1>     return
    13                              <2> %%_ret:
    14 000028F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1250                              <1> 
  1251                              <1> rename:
  1252 000028F7 F605AED7FFFFFF      <1>     test byte [arg1Flg], -1
  1253 000028FE 0F8404F2FFFF        <1>     jz badArgError
  1254 00002904 F605A4D7FFFFFF      <1>     test byte [arg2Flg], -1
  1255 0000290B 0F84F7F1FFFF        <1>     jz badArgError    
  1256                              <1>     ;Initialise the variables!
  1257 00002911 488D3599DDFFFF      <1>     lea rsi, srcSpec
  1258 00002918 48893596DEFFFF      <1>     mov qword [srcPtr], rsi
  1259 0000291F 488D350DDEFFFF      <1>     lea rsi, destSpec
  1260 00002926 48893590DEFFFF      <1>     mov qword [destPtr], rsi
  1261                              <1>     ;Check the second path is just a filename!
  1262 0000292D 0FB6057CD7FFFF      <1>     movzx eax, byte [arg2Off]
  1263 00002934 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1264 0000293B 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1265 0000293E 488D3D9FDBFFFF      <1>     lea rdi, searchSpec
  1266 00002945 57                  <1>     push rdi
  1267 00002946 E815130000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1268 0000294B 5F                  <1>     pop rdi
  1269 0000294C 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1270 00002950 0F84B2F1FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1271 00002956 4889FE              <1>     mov rsi, rdi
  1272                              <1> .destScan:
  1273 00002959 AC                  <1>     lodsb   ;Get the char
  1274 0000295A 3A05C9D6FFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1275 00002960 0F84A2F1FFFF        <1>     je badArgError
  1276 00002966 84C0                <1>     test al, al
  1277 00002968 75EF                <1>     jnz .destScan
  1278                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1279 0000296A 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1280 0000296E 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1280 00002977 3F                  <1>
  1281 00002978 B903000000          <1>     mov ecx, 3  ;24 bytes
  1282 0000297D F348AB              <1>     rep stosq
  1283 00002980 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1284 00002981 488D355CDBFFFF      <1>     lea rsi, searchSpec
  1285 00002988 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1286 0000298C B80D290000          <1>     mov eax, 290Dh
  1287 00002991 CD21                <1>     int 21h     
  1288 00002993 50                  <1>     push rax    ;Save the WC signature
  1289 00002994 E80A130000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1290 00002999 488D3D44DBFFFF      <1>     lea rdi, searchSpec
  1291 000029A0 E841120000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1292 000029A5 4889FE              <1>     mov rsi, rdi
  1293 000029A8 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1294 000029AB 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1295 000029AF B80D290000          <1>     mov eax, 290Dh
  1296 000029B4 CD21                <1>     int 21h
  1297 000029B6 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1298 000029B7 88CC                <1>     mov ah, cl
  1299 000029B9 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1300 000029BC 0F84EC000000        <1>     jz .noWC
  1301 000029C2 488D351BDBFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1302                              <1>     ;Now we check if we have a path to actually handle
  1303 000029C9 4839F3              <1>     cmp rbx, rsi
  1304 000029CC 7444                <1>     je .noPath
  1305 000029CE C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1306 000029D2 488D350BDBFFFF      <1>     lea rsi, searchSpec
  1307 000029D9 488D3DD1DCFFFF      <1>     lea rdi, srcSpec
  1308 000029E0 56                  <1>     push rsi
  1309 000029E1 E814110000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1310 000029E6 5E                  <1>     pop rsi
  1311 000029E7 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1312 000029EA 8A0539D6FFFF        <1>     mov al, byte [pathSep]
  1313 000029F0 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1314 000029F1 48893DBDDDFFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1315 000029F8 488D3D34DDFFFF      <1>     lea rdi, destSpec
  1316 000029FF E8F6100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1317 00002A04 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1318 00002A07 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1319 00002A08 48893DAEDDFFFF      <1>     mov qword [destPtr], rdi
  1320 00002A0F 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1321                              <1> .noPath:
  1322                              <1>     ;Now we have where to copy the files to, we can start our work!
  1323 00002A12 E8A3130000          <1>     call setDTA
  1324 00002A17 488D15C6DAFFFF      <1>     lea rdx, searchSpec
  1325 00002A1E 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1326 00002A20 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1327 00002A25 CD21                <1>     int 21h
  1328 00002A27 0F82EDF0FFFF        <1>     jc badDupFnf    ;If no file was found!
  1329                              <1> .wcLoop:
  1330                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1331 00002A2D 488D3554D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1332 00002A34 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1333 00002A38 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1334 00002A3D CD21                <1>     int 21h 
  1335                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1336 00002A3F 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1337 00002A43 488D3D7BDDFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1338 00002A4A 57                  <1>     push rdi
  1339 00002A4B 48A5                <1>     movsq
  1340 00002A4D 66A5                <1>     movsw
  1341 00002A4F A4                  <1>     movsb
  1342 00002A50 5F                  <1>     pop rdi
  1343 00002A51 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1344 00002A55 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1345                              <1> .wcNameMake:
  1346 00002A5A AC                  <1>     lodsb   ;Get the char from the source string
  1347 00002A5B 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1348 00002A5E 7502                <1>     jne .noStore    ;Dont store the char there
  1349 00002A60 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1350                              <1> .noStore:
  1351 00002A62 48FFC7              <1>     inc rdi ;Goto next char position
  1352 00002A65 FFC9                <1>     dec ecx
  1353 00002A67 75F1                <1>     jnz .wcNameMake
  1354                              <1> ;renName now has the FCB name for the file we wish to make!
  1355                              <1> ;Now make the two paths!
  1356 00002A69 488D3518D7FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1357 00002A70 488B3D3EDDFFFF      <1>     mov rdi, qword [srcPtr]
  1358 00002A77 E87E100000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1359 00002A7C 488D3542DDFFFF      <1>     lea rsi, renName
  1360 00002A83 488B3D33DDFFFF      <1>     mov rdi, qword [destPtr]
  1361 00002A8A E87B110000          <1>     call FCBToAsciiz
  1362 00002A8F 488D151BDCFFFF      <1>     lea rdx, srcSpec
  1363 00002A96 488D3D96DCFFFF      <1>     lea rdi, destSpec
  1364 00002A9D B800560000          <1>     mov eax, 5600h
  1365 00002AA2 CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1366 00002AA4 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1367 00002AA9 CD21                <1>     int 21h
  1368 00002AAB 7380                <1>     jnc .wcLoop     ;And process it too!
  1369                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002AAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1370                              <1> .noWC:
  1371 00002AAE E8F0110000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1372 00002AB3 0FB605F6D5FFFF      <1>     movzx eax, byte [arg2Off]
  1373 00002ABA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1374 00002AC1 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1375 00002AC4 488D3D68DCFFFF      <1>     lea rdi, destSpec
  1376 00002ACB 57                  <1>     push rdi
  1377 00002ACC E88F110000          <1>     call cpDelimPathToBufz
  1378 00002AD1 5F                  <1>     pop rdi
  1379 00002AD2 488D150BDAFFFF      <1>     lea rdx, searchSpec
  1380 00002AD9 B800560000          <1>     mov eax, 5600h
  1381 00002ADE CD21                <1>     int 21h
  1382                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AE0 73(AD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1383 00002AE2 E933F0FFFF          <1>     jmp badDupFnf   ;Always just return this
  1384                              <1> 
  1385                              <1> 
  1386                              <1> touch:
  1387                              <1> ;Temporarily used to create files
  1388 00002AE7 F605BED5FFFFFF      <1>     test byte [arg1Flg], -1
  1389 00002AEE 0F8414F0FFFF        <1>     jz badArgError
  1390 00002AF4 E8AA110000          <1>     call buildCommandPath
  1391 00002AF9 488D15E4D9FFFF      <1>     lea rdx, searchSpec
  1392 00002B00 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1393 00002B05 31C9                <1>     xor ecx, ecx
  1394 00002B07 CD21                <1>     int 21h
  1395 00002B09 721D                <1>     jc .touch1
  1396                              <1> .touchClose:
  1397 00002B0B 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1398 00002B0E B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1399 00002B13 CD2F                <1>     int 2fh
  1400 00002B15 89C1                <1>     mov ecx, eax    ;Move the time here
  1401 00002B17 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1402 00002B19 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1403 00002B1E CD21                <1>     int 21h
  1404 00002B20 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1405 00002B25 CD21                <1>     int 21h
  1406                              <1>     return
    13                              <2> %%_ret:
    14 00002B27 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1407                              <1> .touch1:
  1408 00002B28 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1409 00002B2A 7509                <1>     jne .touchError ;If not, this is a proper error!
  1410 00002B2C B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1411 00002B31 CD21                <1>     int 21h
  1412 00002B33 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1413                              <1> .touchError:
  1414 00002B35 3C03                <1>     cmp al, errPnf
  1415 00002B37 0F84CBEFFFFF        <1>     je badArgError
  1416 00002B3D 3C02                <1>     cmp al, errFnf
  1417 00002B3F 0F84DEEFFFFF        <1>     je badFnf
  1418 00002B45 E99AEFFFFF          <1>     jmp badAccError
  1419                              <1>     
  1420                              <1> 
  1421                              <1> join:
  1422                              <1> ;Mock join command, to test join. Make an external command.
  1423                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1424 00002B4A F605AF000000FF      <1>     test byte [.joinOn], -1
  1425 00002B51 743D                <1>     jz .okJoin
  1426                              <1> .joindisable:
  1427 00002B53 B800520000          <1>     mov eax, 5200h  
  1428 00002B58 CD21                <1>     int 21h
  1429                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1430 00002B5A B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1431 00002B5F CD2A                <1>     int 2Ah
  1432 00002B61 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1433 00002B65 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1434 00002B69 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1435 00002B6F C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1436 00002B72 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1437 00002B76 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1438 00002B79 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1439 00002B7E CD2A                <1>     int 2Ah
  1440 00002B80 C6057900000000      <1>     mov byte [.joinOn], 0
  1441 00002B87 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1442 00002B8E EB45                <1>     jmp short .joinExit
  1443                              <1> .okJoin:
  1444 00002B90 C60569000000FF      <1>     mov byte [.joinOn], -1
  1445 00002B97 B800520000          <1>     mov eax, 5200h  
  1446 00002B9C CD21                <1>     int 21h
  1447 00002B9E 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1448 00002BA2 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1449                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1450 00002BA6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1451 00002BAB CD2A                <1>     int 2Ah
  1452 00002BAD 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1453 00002BB3 4889DF              <1>     mov rdi, rbx
  1454 00002BB6 488D3544000000      <1>     lea rsi, .joinPath
  1455 00002BBD B90C000000          <1>     mov ecx, .joinPathL
  1456 00002BC2 F3A4                <1>     rep movsb   ;Copy chars over
  1457 00002BC4 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1458 00002BC7 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1459 00002BCC CD2A                <1>     int 2Ah
  1460 00002BCE 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1461                              <1> .joinExit:
  1462 00002BD5 B800090000          <1>     mov eax, 0900h
  1463 00002BDA CD21                <1>     int 21h
  1464                              <1>     return
    13                              <2> %%_ret:
    14 00002BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1465 00002BDD 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1465 00002BE6 61626C65640D0A24    <1>
  1466 00002BEE 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1466 00002BF7 7361626C65640D0A24  <1>
  1467 00002C00 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1468 00002C01 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1468 00002C0A 535400              <1>
  1469                              <1> .joinPathL  equ $ - .joinPath 
  1470                              <1> 
  1471                              <1> subst:
  1472                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1473                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1474 00002C0D F605D3000000FF      <1>     test byte [.substOn], -1
  1475 00002C14 7443                <1>     jz .okSubst
  1476                              <1> .substdisable:
  1477 00002C16 B800520000          <1>     mov eax, 5200h  
  1478 00002C1B CD21                <1>     int 21h
  1479                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1480 00002C1D B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1481 00002C22 CD2A                <1>     int 2Ah
  1482 00002C24 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1483 00002C28 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1484 00002C2F 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1485 00002C35 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1486 00002C38 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1487 00002C3C 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1488 00002C42 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1489 00002C47 CD2A                <1>     int 2Ah
  1490 00002C49 C6059700000000      <1>     mov byte [.substOn], 0
  1491 00002C50 488D157D000000      <1>     lea rdx, .substDisableMsg
  1492 00002C57 EB61                <1>     jmp short .substExit
  1493                              <1> .okSubst:
  1494 00002C59 C60587000000FF      <1>     mov byte [.substOn], -1
  1495 00002C60 B800520000          <1>     mov eax, 5200h  
  1496 00002C65 CD21                <1>     int 21h
  1497 00002C67 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1498 00002C6C CD2A                <1>     int 2Ah
  1499 00002C6E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1500 00002C72 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1501 00002C79 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1502 00002C7D 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1503 00002C84 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1504 00002C88 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1505                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1506 00002C8F 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1507 00002C95 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1508 00002C9B 4889DF              <1>     mov rdi, rbx
  1509 00002C9E 488D3543000000      <1>     lea rsi, .substPath
  1510 00002CA5 B90C000000          <1>     mov ecx, .substPathL
  1511 00002CAA F3A4                <1>     rep movsb   ;Copy chars over
  1512 00002CAC B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1513 00002CB1 CD2A                <1>     int 2Ah
  1514 00002CB3 488D1508000000      <1>     lea rdx, .substEnableMsg
  1515                              <1> .substExit:
  1516 00002CBA B800090000          <1>     mov eax, 0900h
  1517 00002CBF CD21                <1>     int 21h
  1518                              <1>     return
    13                              <2> %%_ret:
    14 00002CC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1519 00002CC2 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1519 00002CCB 6E61626C65640D0A24  <1>
  1520 00002CD4 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1520 00002CDD 697361626C65640D0A- <1>
  1520 00002CE6 24                  <1>
  1521 00002CE7 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1522 00002CE8 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1522 00002CF1 535400              <1>
  1523                              <1> .substPathL  equ $ - .substPath 
  1524                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1525                              <1> truename:
  1526 00002CF4 F605B1D3FFFFFF      <1>     test byte [arg1Flg], -1
  1527 00002CFB 0F8407EEFFFF        <1>     jz badArgError
  1528 00002D01 E89D0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1529 00002D06 488D35D7D7FFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1530 00002D0D 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1531 00002D10 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1532 00002D15 CD21                <1>     int 21h
  1533 00002D17 730D                <1>     jnc .writePath
  1534 00002D19 3C02                <1>     cmp al, errFnf
  1535 00002D1B 0F84F0EDFFFF        <1>     je badFileError
  1536 00002D21 E9D0EDFFFF          <1>     jmp badParamError
  1537                              <1> .writePath:
  1538 00002D26 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1539 00002D29 B9FFFFFFFF          <1>     mov ecx, -1
  1540 00002D2E 30C0                <1>     xor al, al
  1541 00002D30 F2AE                <1>     repne scasb     ;Get the new len
  1542 00002D32 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1543 00002D34 FFC9                <1>     dec ecx
  1544 00002D36 BB01000000          <1>     mov ebx, 01
  1545 00002D3B B440                <1>     mov ah, 40h
  1546 00002D3D CD21                <1>     int 21h
  1547 00002D3F E8B40B0000          <1>     call printCRLF
  1548                              <1>     return
    13                              <2> %%_ret:
    14 00002D44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1549                              <1> 
  1550                              <1> label:
  1551                              <1> ;Displays/Changes/Deletes the file label
  1552 00002D45 488D1508000000      <1>     lea rdx, .l1
  1553 00002D4C B800090000          <1>     mov eax, 0900h
  1554 00002D51 CD21                <1>     int 21h
  1555                              <1>     return
    13                              <2> %%_ret:
    14 00002D53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1556 00002D54 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1556 00002D5D 6E20756E696D706C65- <1>
  1556 00002D66 6D656E7465640D0A24  <1>
  1557                              <1> 
  1558                              <1> mklbl:
  1559                              <1>     ;lea rdx, .l1
  1560                              <1>     ;mov cx, 08h ;Make a label
  1561                              <1>     ;mov eax, 3C00h
  1562                              <1>     ;int 21h
  1563                              <1> 
  1564                              <1>     ;mov ebx, eax
  1565                              <1>     ;mov eax, 3E00h  ;Close the handle
  1566                              <1>     ;int 21h
  1567                              <1>     ;return
  1568                              <1> 
  1569                              <1> ;.l1: db "TESTLABEL",0
  1570 00002D6F 488D1508000000      <1>     lea rdx, .l1
  1571 00002D76 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1572 00002D7B CD21                <1>     int 21h
  1573                              <1>     return
    13                              <2> %%_ret:
    14 00002D7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1574                              <1> .l1:
  1575                              <1>     istruc exFcb
  1576 00002D7E FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1577 00002D7F 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1578 00002D85 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1579 00002D86 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1580 00002D8E 4C2020              <1>     at exFcb.fileext,   db "L  "
  1581 00002D91 00000000            <1>     at exFcb.curBlock,  dd 0
  1582 00002D95 00<rep 15h>         <1>     iend 
  1583                              <1> rmlbl:
  1584 00002DAA 488D1508000000      <1>     lea rdx, .l1
  1585 00002DB1 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1586 00002DB6 CD21                <1>     int 21h
  1587                              <1>     return
    13                              <2> %%_ret:
    14 00002DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1588                              <1> .l1:    ;FCB to volume label
  1589                              <1>     istruc exFcb
  1590 00002DB9 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1591 00002DBA 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1592 00002DC0 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1593 00002DC1 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1594 00002DC9 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1595 00002DCC 00000000            <1>     at exFcb.curBlock,  dd 0
  1596 00002DD0 00<rep 15h>         <1>     iend 
  1597                              <1> 
  1598                              <1> rnlbl:
  1599 00002DE5 488D1508000000      <1>     lea rdx, .l1
  1600 00002DEC B800170000          <1>     mov eax, 1700h
  1601 00002DF1 CD21                <1>     int 21h
  1602                              <1>     return
    13                              <2> %%_ret:
    14 00002DF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1603                              <1> .l1:
  1604                              <1>     istruc exRenFcb
  1605 00002DF4 FF                  <1>     at exRenFcb.extSig,     db -1
  1606 00002DF5 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1607 00002DFB 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1608 00002DFC 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1609 00002E04 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1610 00002E07 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1610 00002E10 4C414245            <1>
  1611 00002E14 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1612 00002E17 00<rep 4h>          <1>     iend
  1613                              <1> volume:
  1614                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1615 00002E1B F6058DD2FFFFFF      <1>     test byte [arg2Flg], -1
  1616 00002E22 0F85E0ECFFFF        <1>     jnz badArgError
  1617 00002E28 F6057DD2FFFFFF      <1>     test byte [arg1Flg], -1
  1618 00002E2F 7507                <1>     jnz .notCurrentDrive
  1619 00002E31 E8BF0C0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1620 00002E36 EB31                <1>     jmp short .dirEP
  1621                              <1> .notCurrentDrive:
  1622 00002E38 E8660E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1623 00002E3D 488D35A0D6FFFF      <1>     lea rsi, searchSpec
  1624 00002E44 E8E60C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1625 00002E49 66AD                <1>     lodsw                   ;Get this word
  1626 00002E4B 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1627 00002E4E 0F85B4ECFFFF        <1>     jne badArgError
  1628 00002E54 8A0554D2FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1629 00002E5A A8FF                <1>     test al, -1
  1630 00002E5C 0F859DECFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1631 00002E62 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1632 00002E67 FFC8                <1>     dec eax ;Convert to 0 based number
  1633                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1634 00002E69 E84C0F0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1635 00002E6E 488D150CD8FFFF      <1>     lea rdx, volFcb
  1636 00002E75 FFC0                <1>     inc eax ;Get 1 based drive number
  1637 00002E77 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1638 00002E79 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1639 00002E7C B800110000          <1>     mov eax, 1100h ;Find first FCB
  1640 00002E81 CD21                <1>     int 21h
  1641 00002E83 50                  <1>     push rax
  1642                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1643 00002E84 488D15DBDAFFFF      <1>     lea rdx, crlf
  1644 00002E8B B409                <1>     mov ah, 09h
  1645 00002E8D CD21                <1>     int 21h
  1646 00002E8F 488D1555DDFFFF      <1>     lea rdx, volMes
  1647 00002E96 B409                <1>     mov ah, 09h
  1648 00002E98 CD21                <1>     int 21h
  1649 00002E9A 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1650 00002E9C 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1651 00002E9F B402                <1>     mov ah, 02h
  1652 00002EA1 CD21                <1>     int 21h
  1653 00002EA3 58                  <1>     pop rax
  1654 00002EA4 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1655 00002EA6 7409                <1>     jz .volIDOk
  1656 00002EA8 488D1553DDFFFF      <1>     lea rdx, volNo
  1657 00002EAF EB19                <1>     jmp short .volEndPrint
  1658                              <1> .volIDOk:
  1659 00002EB1 488D1545DDFFFF      <1>     lea rdx, volOk
  1660 00002EB8 B409                <1>     mov ah, 09h
  1661 00002EBA CD21                <1>     int 21h
  1662 00002EBC C605BAD2FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1663 00002EC3 488D15A8D2FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1664                              <1> .volEndPrint:
  1665 00002ECA B409                <1>     mov ah, 09h
  1666 00002ECC CD21                <1>     int 21h
  1667 00002ECE 488D1591DAFFFF      <1>     lea rdx, crlf
  1668 00002ED5 B409                <1>     mov ah, 09h
  1669 00002ED7 CD21                <1>     int 21h
  1670                              <1>     return
    13                              <2> %%_ret:
    14 00002ED9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1671                              <1> 
  1672                              <1> version:
  1673 00002EDA 488D1585DAFFFF      <1>     lea rdx, crlf
  1674 00002EE1 B409                <1>     mov ah, 09h
  1675 00002EE3 CD21                <1>     int 21h
  1676 00002EE5 488D15EDDCFFFF      <1>     lea rdx, dosVer
  1677 00002EEC B409                <1>     mov ah, 09h
  1678 00002EEE CD21                <1>     int 21h
  1679 00002EF0 E80C000000          <1>     call .printVersionNumber
  1680 00002EF5 488D156ADAFFFF      <1>     lea rdx, crlf
  1681 00002EFC B409                <1>     mov ah, 09h
  1682 00002EFE CD21                <1>     int 21h
  1683                              <1>     return
    13                              <2> %%_ret:
    14 00002F00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1684                              <1> .printVersionNumber:
  1685 00002F01 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1686 00002F03 CD21                <1>     int 21h
  1687 00002F05 50                  <1>     push rax
  1688 00002F06 0FB6C0              <1>     movzx eax, al
  1689 00002F09 E8CE0D0000          <1>     call printDecimalWord
  1690 00002F0E B22E                <1>     mov dl, "."
  1691 00002F10 B402                <1>     mov ah, 02h
  1692 00002F12 CD21                <1>     int 21h
  1693 00002F14 58                  <1>     pop rax
  1694 00002F15 0FB6C4              <1>     movzx eax, ah
  1695 00002F18 E8BF0D0000          <1>     call printDecimalWord
  1696                              <1>     return
    13                              <2> %%_ret:
    14 00002F1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> 
  1699                              <1> memory:
  1700 00002F1E 488B1DFAD0FFFF      <1>     mov rbx, qword [sysVars]
  1701 00002F25 4885DB              <1>     test rbx, rbx
  1702 00002F28 7510                <1>     jnz .sysvarsOK
  1703 00002F2A 488D156CDFFFFF      <1>     lea rdx, memBad0
  1704 00002F31 B409                <1>     mov ah, 09h
  1705 00002F33 CD21                <1>     int 21h
  1706 00002F35 E9700E0000          <1>     jmp freezePC.altEP
  1707                              <1> .sysvarsOK:
  1708                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1709                              <1>     ; and rcx to store Application memory
  1710 00002F3A 31F6                <1>     xor esi, esi
  1711 00002F3C 31FF                <1>     xor edi, edi
  1712 00002F3E 31ED                <1>     xor ebp, ebp
  1713 00002F40 31C9                <1>     xor ecx, ecx
  1714 00002F42 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1715 00002F46 488B1B              <1>     mov rbx, qword [rbx]
  1716                              <1> .memLp:
  1717 00002F49 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1718 00002F4C 7409                <1>     je .validMCB
  1719 00002F4E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1720 00002F51 0F8501010000        <1>     jne .badMCBFound
  1721                              <1> .validMCB:
  1722 00002F57 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1723 00002F5A 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1724 00002F5E 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1725 00002F66 7505                <1>     jne .notDOS
  1726 00002F68 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1727 00002F6B EB21                <1>     jmp short .gotoNext
  1728                              <1> .notDOS:
  1729 00002F6D 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1730 00002F75 7505                <1>     jne .notFree
  1731 00002F77 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1732 00002F7A EB12                <1>     jmp short .gotoNext
  1733                              <1> .notFree:
  1734 00002F7C 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1735 00002F84 7505                <1>     jne .notHole
  1736 00002F86 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1737 00002F89 EB03                <1>     jmp short .gotoNext
  1738                              <1> .notHole:
  1739 00002F8B 4801C1              <1>     add rcx, rax    ;Add to Application count
  1740                              <1> .gotoNext:
  1741 00002F8E 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1742 00002F91 7407                <1>     je .endOfWalk
  1743 00002F93 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1744 00002F98 EBAF                <1>     jmp short .memLp
  1745                              <1> .endOfWalk:
  1746                              <1>     
  1747 00002F9A 488D155DDEFFFF      <1>     lea rdx, memDOS
  1748 00002FA1 B409                <1>     mov ah, 09h
  1749 00002FA3 CD21                <1>     int 21h
  1750 00002FA5 4889F0              <1>     mov rax, rsi
  1751 00002FA8 E89D000000          <1>     call .mcbPrintAmount
  1752 00002FAD 488D15E2DEFFFF      <1>     lea rdx, memByte
  1753 00002FB4 B409                <1>     mov ah, 09h
  1754 00002FB6 CD21                <1>     int 21h
  1755                              <1> 
  1756 00002FB8 4885ED              <1>     test rbp, rbp
  1757 00002FBB 741E                <1>     jz .skipHole
  1758 00002FBD 488D1586DEFFFF      <1>     lea rdx, memHole
  1759 00002FC4 B409                <1>     mov ah, 09h
  1760 00002FC6 CD21                <1>     int 21h
  1761 00002FC8 4889E8              <1>     mov rax, rbp
  1762 00002FCB E87A000000          <1>     call .mcbPrintAmount
  1763 00002FD0 488D15BFDEFFFF      <1>     lea rdx, memByte
  1764 00002FD7 B409                <1>     mov ah, 09h
  1765 00002FD9 CD21                <1>     int 21h
  1766                              <1> .skipHole:
  1767                              <1> 
  1768 00002FDB 488D1542DEFFFF      <1>     lea rdx, memApp
  1769 00002FE2 B409                <1>     mov ah, 09h
  1770 00002FE4 CD21                <1>     int 21h
  1771 00002FE6 4889C8              <1>     mov rax, rcx
  1772 00002FE9 E85C000000          <1>     call .mcbPrintAmount
  1773 00002FEE 488D15A1DEFFFF      <1>     lea rdx, memByte
  1774 00002FF5 B409                <1>     mov ah, 09h
  1775 00002FF7 CD21                <1>     int 21h
  1776                              <1> 
  1777 00002FF9 488D1570DEFFFF      <1>     lea rdx, memFree
  1778 00003000 B409                <1>     mov ah, 09h
  1779 00003002 CD21                <1>     int 21h
  1780 00003004 4889F8              <1>     mov rax, rdi
  1781 00003007 E83E000000          <1>     call .mcbPrintAmount
  1782 0000300C 488D1583DEFFFF      <1>     lea rdx, memByte
  1783 00003013 B409                <1>     mov ah, 09h
  1784 00003015 CD21                <1>     int 21h
  1785                              <1> 
  1786 00003017 488D15BADDFFFF      <1>     lea rdx, memSys
  1787 0000301E B409                <1>     mov ah, 09h
  1788 00003020 CD21                <1>     int 21h
  1789 00003022 4889F0              <1>     mov rax, rsi
  1790 00003025 4801F8              <1>     add rax, rdi
  1791 00003028 4801C8              <1>     add rax, rcx
  1792 0000302B 4801E8              <1>     add rax, rbp
  1793 0000302E E817000000          <1>     call .mcbPrintAmount
  1794 00003033 488D155CDEFFFF      <1>     lea rdx, memByte
  1795 0000303A B409                <1>     mov ah, 09h
  1796 0000303C CD21                <1>     int 21h
  1797                              <1> 
  1798 0000303E 488D1521D9FFFF      <1>     lea rdx, crlf
  1799 00003045 B409                <1>     mov ah, 09h
  1800 00003047 CD21                <1>     int 21h
  1801                              <1>     return
    13                              <2> %%_ret:
    14 00003049 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1802                              <1> 
  1803                              <1> .mcbPrintAmount:
  1804 0000304A 51                  <1>     push rcx
  1805 0000304B 56                  <1>     push rsi
  1806 0000304C 57                  <1>     push rdi
  1807 0000304D 55                  <1>     push rbp
  1808 0000304E E8890C0000          <1>     call printDecimalWord
  1809 00003053 5D                  <1>     pop rbp
  1810 00003054 5F                  <1>     pop rdi
  1811 00003055 5E                  <1>     pop rsi
  1812 00003056 59                  <1>     pop rcx
  1813                              <1>     return
    13                              <2> %%_ret:
    14 00003057 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1814                              <1> .badMCBFound:
  1815 00003058 488D157EDEFFFF      <1>     lea rdx, memBad2
  1816 0000305F B409                <1>     mov ah, 09h
  1817 00003061 CD21                <1>     int 21h
  1818 00003063 E9420D0000          <1>     jmp freezePC.altEP
  1819                              <1> 
  1820                              <1> type:
  1821 00003068 F6053DD0FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1822 0000306F 0F8493EAFFFF        <1>     jz badArgError
  1823 00003075 F60533D0FFFFFF      <1>     test byte [arg2Flg], -1
  1824 0000307C 0F8586EAFFFF        <1>     jnz badArgError         ;If this set, error
  1825 00003082 4C8B0586CFFFFF      <1>     mov r8, [pspPtr]
  1826 00003089 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1827 00003090 0FB60516D0FFFF      <1>     movzx eax, byte [arg1Off]
  1828 00003097 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1829 0000309A 803E0D              <1>     cmp byte [rsi], CR
  1830 0000309D 0F8465EAFFFF        <1>     je badArgError
  1831 000030A3 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1832 000030A7 750F                <1>     jne .noDrive
  1833 000030A9 0FB605FECFFFFF      <1>     movzx eax, byte [arg1FCBret]
  1834 000030B0 3CFF                <1>     cmp al, -1
  1835 000030B2 0F8447EAFFFF        <1>     je badDriveError
  1836                              <1> .noDrive:
  1837                              <1>     ;Now we open the provided file
  1838 000030B8 E8E60B0000          <1>     call buildCommandPath
  1839 000030BD 488D1520D4FFFF      <1>     lea rdx, searchSpec
  1840 000030C4 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1841 000030C9 CD21                <1>     int 21h
  1842 000030CB 0F8240EAFFFF        <1>     jc badFileError
  1843 000030D1 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1844 000030D8 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1845                              <1> .lp:
  1846 000030DB B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1847 000030E0 B43F                <1>     mov ah, 3Fh ;Read handle
  1848 000030E2 CD21                <1>     int 21h
  1849 000030E4 89C1                <1>     mov ecx, eax
  1850 000030E6 67E317              <1>     jecxz .exit
  1851 000030E9 53                  <1>     push rbx    ;Save the original in handle
  1852 000030EA BB01000000          <1>     mov ebx, 1  ;STDOUT
  1853 000030EF B440                <1>     mov ah, 40h
  1854 000030F1 CD21                <1>     int 21h
  1855 000030F3 5B                  <1>     pop rbx ;Get back the original read handle
  1856 000030F4 720F                <1>     jc .exitBad
  1857 000030F6 39C8                <1>     cmp eax, ecx
  1858 000030F8 74E1                <1>     je .lp
  1859 000030FA FFC9                <1>     dec ecx ;One less for a ^Z
  1860 000030FC 39C8                <1>     cmp eax, ecx
  1861 000030FE 7505                <1>     jne .exitBad
  1862                              <1> .exit:
  1863 00003100 B43E                <1>     mov ah, 3Eh ;Close handle
  1864 00003102 CD21                <1>     int 21h
  1865                              <1>     return
    13                              <2> %%_ret:
    14 00003104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1866                              <1> .exitBad:
  1867                              <1>     ;If it is a char device, don't print an error
  1868 00003105 B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  1869 0000310A BB01000000          <1>     mov ebx, 1
  1870 0000310F CD21                <1>     int 21h
  1871 00003111 F6C280              <1>     test dl, devCharDev
  1872                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003114 75(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1873 00003116 E992E9FFFF          <1>     jmp badDiskFull
  1874                              <1> 
  1875                              <1> exit:
  1876 0000311B F60509CFFFFFFF      <1>     test byte [permaSwitch], -1
  1877                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003122 75(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1878 00003124 488B05ECCEFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1879 0000312B 483DFFFFFFFF        <1>     cmp rax, -1
  1880                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003131 74(04)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1881 00003133 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1882                              <1> 
  1883 00003137 488B15EECEFFFF      <1>     mov rdx, qword [parentInt22]
  1884 0000313E 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1885 00003142 B822250000          <1>     mov eax, 2522h
  1886 00003147 CD21                <1>     int 21h
  1887                              <1> 
  1888 00003149 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1889 0000314E CD21                <1>     int 21h
  1890                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1891                              <1> 
  1892                              <1> launchChild:
  1893                              <1>     ;We execute an external command here.
  1894                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1895                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1896                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1897                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1898                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1899 00003151 E8640C0000          <1>     call setDTA         
  1900                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1901 00003156 488D3DDED1FFFF      <1>     lea rdi, cmdPathSpec
  1902 0000315D 4889FE              <1>     mov rsi, rdi
  1903 00003160 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1904 00003165 CD2F                <1>     int 2fh
  1905 00003167 E87A0A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1906 0000316C 4889FE              <1>     mov rsi, rdi    ;Source here
  1907 0000316F 488D3DE4CFFFFF      <1>     lea rdi, cmdFcb
  1908 00003176 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1909 0000317B CD21                <1>     int 21h
  1910 0000317D 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1911 0000317F 0F85B3E9FFFF        <1>     jnz badCmdError
  1912 00003185 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1913                              <1> .pathLoop:
  1914 00003188 488D35D4CFFFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1915 0000318F 488D3DC1DDFFFF      <1>     lea rdi, extStr
  1916 00003196 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1917                              <1> .extLp:
  1918 0000319B 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1919 0000319C B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1920 000031A1 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1921 000031A3 5E                  <1>     pop rsi
  1922 000031A4 85C9                <1>     test ecx, ecx
  1923 000031A6 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1924 000031A8 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1925 000031AB FFCA                <1>     dec edx         ;Else one less extension type to check
  1926 000031AD 75EC                <1>     jnz .extLp
  1927                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1928                              <1>     ;If not, error.
  1929 000031AF B903000000          <1>     mov ecx, 3
  1930 000031B4 4889F7              <1>     mov rdi, rsi
  1931 000031B7 B020                <1>     mov al, SPC
  1932 000031B9 F3AE                <1>     rep scasb   
  1933 000031BB 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1934 000031BD 0F8575E9FFFF        <1>     jnz badCmdError    ;If not, error!
  1935                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1936 000031C3 488D358DDDFFFF      <1>     lea rsi, extStr
  1937 000031CA BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1938                              <1> .extSrchLp:
  1939 000031CF 488D3D8DCFFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1940 000031D6 B903000000          <1>     mov ecx, 3
  1941 000031DB F3A4                <1>     rep movsb   ;Copy the extension over!
  1942 000031DD E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1943 000031E2 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1944 000031E4 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1945 000031E6 75E7                <1>     jnz .extSrchLp
  1946                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1947                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1948                              <1> ; by setting the fcb extension back to all spaces.
  1949 000031E8 488D3D74CFFFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1950 000031EF B903000000          <1>     mov ecx, 3
  1951 000031F4 B020                <1>     mov al, SPC
  1952 000031F6 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1953 000031F8 EB70                <1>     jmp short .pathHandle
  1954                              <1> .extFnd:
  1955                              <1> ;Here if the file had the right extension.
  1956 000031FA E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1957 000031FF 7269                <1>     jc .pathHandle
  1958                              <1> .extSrchFnd:
  1959                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1960                              <1> ; a BAT. If it is, separate handling!
  1961 00003201 803D5BCFFFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1962 00003208 0F84B3030000        <1>     je batLaunch
  1963 0000320E 488D1D80CFFFFF      <1>     lea rbx, launchBlock
  1964 00003215 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1965 00003219 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1966 0000321C 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1967 00003223 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1968 00003227 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1969 0000322B 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1970 0000322F 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1971 00003233 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1972 00003237 488D15FDD0FFFF      <1>     lea rdx, cmdPathSpec
  1973 0000323E B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1974 00003243 CD21                <1>     int 21h
  1975                              <1> ;If the program failed to start, verify why!
  1976 00003245 B800590000          <1>     mov eax, 5900h      ;Get extended error
  1977 0000324A 31DB                <1>     xor ebx, ebx
  1978 0000324C CD21                <1>     int 21h
  1979 0000324E 668905B8CDFFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  1980 00003255 3C05                <1>     cmp al, errAccDen   ;Access denied?
  1981 00003257 0F8487E8FFFF        <1>     je badAccError
  1982 0000325D 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  1983 0000325F 0F843A0B0000        <1>     je freezePC
  1984 00003265 E9CEE8FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  1985                              <1> .pathHandle:        
  1986                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1987                              <1> ;al has error code!
  1988 0000326A 4885ED              <1>     test rbp, rbp
  1989 0000326D 0F85A3000000        <1>     jnz .pathReentry
  1990                              <1> ;Now check if the command we recieved included an absolute path.
  1991                              <1> ;If so, we don't do path substitution and just fail at this point
  1992 00003273 488D35C1D0FFFF      <1>     lea rsi, cmdPathSpec
  1993 0000327A 66AD                <1>     lodsw   ;Get the first two chars
  1994 0000327C 3A05A7CDFFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1995 00003282 0F84B0E8FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1996 00003288 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1997 0000328A 7412                <1>     je .pathGetEnv
  1998 0000328C 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1999 0000328F 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2000 00003291 AC                  <1>     lodsb   ;Get the third char
  2001 00003292 3A0591CDFFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2002 00003298 0F849AE8FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2003                              <1> .pathGetEnv:
  2004                              <1> ;Now get a pointer to the environment and search for PATH=
  2005                              <1> ;We only take the final portion of the path and add it to each path componant
  2006                              <1> ;This agrees with DOS 3.3
  2007 0000329E E8840B0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2008 000032A3 0F848FE8FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2009                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2010                              <1>     ;Now we know we dont have to keep track of chars!!
  2011 000032A9 488D3DFCDDFFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2012 000032B0 E8CC0B0000          <1>     call searchForEnvVar
  2013 000032B5 0F827DE8FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2014 000032BB 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2015 000032BE 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2016                              <1> .pathRejoin:
  2017 000032C5 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2018 000032C8 0F846AE8FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2019 000032CE 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2020 000032D1 488D3D0CD2FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2021                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2022                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2023                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2024                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2025 000032D8 E86D090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2026 000032DD 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2027 000032E0 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2028 000032E3 48FFCF              <1>     dec rdi ;Point to the null terminator
  2029 000032E6 8A053DCDFFFF        <1>     mov al, byte [pathSep]
  2030 000032EC 3847FF              <1>     cmp byte [rdi - 1], al
  2031 000032EF 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2032 000032F1 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2033                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2034 000032F2 488D3562CEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2035 000032F9 E80C090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2036 000032FE 488D35DFD1FFFF      <1>     lea rsi, searchSpec 
  2037 00003305 488D3D2FD0FFFF      <1>     lea rdi, cmdPathSpec
  2038 0000330C E8E9070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2039 00003311 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2040                              <1> .pathReentry:
  2041 00003316 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2042 0000331A 0F8418E8FFFF        <1>     je badCmdError
  2043                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2044                              <1> ;Not really a big deal...
  2045                              <1>     ;cmp al, errBadDrv
  2046                              <1>     ;jne .pathDrvOk
  2047                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2048                              <1>     ;mov eax, 0900h
  2049                              <1>     ;int 21h
  2050                              <1> ;.pathDrvOk:
  2051 00003320 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2052 00003323 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2053 00003326 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2054                              <1> 
  2055                              <1> .prepAndSearch:
  2056                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2057                              <1> ;cmdPathSpec and null terminates. 
  2058                              <1> ;Input: cmdFcb name + ext setup. 
  2059                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2060                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2061 00003328 51                  <1>     push rcx
  2062 00003329 56                  <1>     push rsi
  2063 0000332A 57                  <1>     push rdi
  2064 0000332B 488D3D09D0FFFF      <1>     lea rdi, cmdPathSpec 
  2065 00003332 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2066 00003335 E8AC080000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2067 0000333A 488D351ACEFFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2068 00003341 E8C4080000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2069 00003346 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2070 0000334B 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2071 0000334D CD21                <1>     int 21h
  2072 0000334F 5F                  <1>     pop rdi
  2073 00003350 5E                  <1>     pop rsi
  2074 00003351 59                  <1>     pop rcx
  2075                              <1>     return
    13                              <2> %%_ret:
    14 00003352 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2076                              <1> 
  2077                              <1> set:
  2078 00003353 F60552CDFFFFFF      <1>     test byte [arg1Flg], -1
  2079 0000335A 7539                <1>     jnz .editEnv
  2080                              <1>     ;Here we just print the environment.
  2081 0000335C E8C60A0000          <1>     call checkEnvGoodAndGet 
  2082 00003361 0F8474E7FFFF        <1>     jz badEnvSpaceError
  2083                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2084 00003367 4889F7              <1>     mov rdi, rsi
  2085 0000336A 4889F2              <1>     mov rdx, rsi
  2086                              <1> .findLp:
  2087 0000336D B9FFFFFFFF          <1>     mov ecx, -1
  2088 00003372 31C0                <1>     xor eax, eax
  2089                              <1> .scanLp:
  2090 00003374 F2AE                <1>     repne scasb
  2091 00003376 75FC                <1>     jne .scanLp
  2092 00003378 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2093                              <1>     ;Else, we now print this environment variable and CRLF it
  2094                              <1>     ;rdx points to the start of the string aleady
  2095                              <1>     ;ecx has the bytes to print
  2096 0000337A BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2097 0000337F B800400000          <1>     mov eax, 4000h  ;Print to handle
  2098 00003384 CD21                <1>     int 21h
  2099 00003386 E86D050000          <1>     call printCRLF
  2100 0000338B 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2101                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000338E 74(52)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2102 00003390 4889FA              <1>     mov rdx, rdi   
  2103 00003393 EBD8                <1>     jmp short .findLp
  2104                              <1> .editEnv:
  2105 00003395 E88D0A0000          <1>     call checkEnvGoodAndGet
  2106 0000339A 0F843BE7FFFF        <1>     jz badEnvSpaceError
  2107 000033A0 0FB60506CDFFFF      <1>     movzx eax, byte [arg1Off]
  2108 000033A7 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2109 000033AE 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2110                              <1> .altEp:
  2111 000033B1 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2112 000033B4 B00D                <1>     mov al, CR              ;Search for the CR
  2113 000033B6 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2114 000033BE 89CB                <1>     mov ebx, ecx            ;Save this count 
  2115 000033C0 53                  <1>     push rbx                ;Save this count on the stack too!
  2116 000033C1 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2117 000033C3 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2118 000033C5 66891D99D4FFFF      <1>     mov word [envVarSz], bx ;Store the count
  2119 000033CC 59                  <1>     pop rcx                 ;Get the char count back!
  2120 000033CD 89CB                <1>     mov ebx, ecx            
  2121 000033CF 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2122 000033D2 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2123 000033D4 F2AE                <1>     repne scasb
  2124 000033D6 0F85F6E6FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2125 000033DC 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2126 000033DE 66891D82D4FFFF      <1>     mov word [envVarNamSz], bx
  2127 000033E5 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2128 000033E8 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2129 000033EA 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2130 000033EB 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2131 000033EE E88E0A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2132 000033F3 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2133 000033F5 E8B50A0000          <1>     call envFree            ;Free the var in rsi
  2134                              <1> .editNewEnv:
  2135 000033FA E8E90A0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2136 000033FF E8090B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2137 00003404 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2138 00003405 31C0                <1>     xor eax, eax            ;Prepare null length!
  2139 00003407 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2140 0000340D 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2141 00003410 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2142 00003412 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2143 00003414 663B0D4AD4FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2144 0000341B 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2145                              <1> .reallocTry:
  2146                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2147                              <1>     ; we proceed with the environment size.
  2148 0000341D E8000B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2149 00003422 7319                <1>     jnc .reallocOk
  2150 00003424 0F84B1E6FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2151                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2152                              <1>     ; partially the variable into the env. If so we do that. If the name
  2153                              <1>     ; cannot fit, we don't bother
  2154                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2155 0000342A 663B0D36D4FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2156                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003431 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003433 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2157 00003434 E8A2E6FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2158 00003439 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2159 0000343B EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2160                              <1> .reallocOk:
  2161                              <1>     ;Here we have all the space to just copy the full path
  2162 0000343D 0FB70D21D4FFFF      <1>     movzx ecx, word [envVarSz]
  2163                              <1> .nameCp:
  2164                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2165                              <1> ;Always enough memory for name= here
  2166 00003444 AC                  <1>     lodsb
  2167 00003445 E8D3060000          <1>     call ucChar
  2168 0000344A AA                  <1>     stosb
  2169 0000344B 66FFC9              <1>     dec cx      ;Always decrement this count
  2170 0000344E 3C3D                <1>     cmp al, "="
  2171 00003450 75F2                <1>     jne .nameCp
  2172                              <1> .exitNameCp:
  2173 00003452 AC                  <1>     lodsb
  2174 00003453 3C0D                <1>     cmp al, CR
  2175 00003455 7405                <1>     je .exitCp
  2176 00003457 AA                  <1>     stosb
  2177 00003458 FFC9                <1>     dec ecx
  2178 0000345A 75F6                <1>     jnz .exitNameCp
  2179                              <1> .exitCp:
  2180 0000345C 31C0                <1>     xor eax, eax
  2181 0000345E 66AB                <1>     stosw   ;Store the final null word
  2182                              <1>     return
    13                              <2> %%_ret:
    14 00003460 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2183                              <1> .delEnvVar:
  2184                              <1>     ;rsi -> Start of the envvar name in user buffer
  2185 00003461 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2186 00003464 E8180A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2187 00003469 7205                <1>     jc .delEnvVarSkip
  2188 0000346B E83F0A0000          <1>     call envFree    ;Free the env var at rsi
  2189                              <1> .delEnvVarSkip:
  2190 00003470 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2191                              <1>     return
    13                              <2> %%_ret:
    14 00003471 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2192                              <1> 
  2193                              <1> pathEdit:
  2194                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2195                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2196                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2197                              <1> ; end there. Error with too many arguments error!
  2198                              <1> ;If after the equals sign there is nothing, we just print the path!
  2199                              <1> ;Gotta process the command line ourselves first
  2200 00003472 E8B0090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2201 00003477 0F845EE6FFFF        <1>     jz badEnvSpaceError
  2202                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2203 0000347D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2204 00003484 E8AD000000          <1>     call .skipPathDelimiters
  2205 00003489 3C0D                <1>     cmp al, CR
  2206 0000348B 7466                <1>     je .printPath
  2207                              <1> ;Else use the set command to setup the path in the searchSpec.
  2208 0000348D 56                  <1>     push rsi    ;Save the first char of the command line string
  2209 0000348E 488D3517DCFFFF      <1>     lea rsi, pathEVar
  2210 00003495 488D3D48D0FFFF      <1>     lea rdi, searchSpec
  2211 0000349C E859060000          <1>     call strcpy
  2212 000034A1 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2213 000034A4 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2214 000034A5 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2215                              <1> .cpLp:
  2216 000034A7 AC                  <1>     lodsb
  2217 000034A8 3C0D                <1>     cmp al, CR
  2218 000034AA 7411                <1>     je .cpLpExit
  2219 000034AC E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2220 000034B1 740A                <1>     je .cpLpExit
  2221 000034B3 E865060000          <1>     call ucChar ;Uppercase the char
  2222 000034B8 AA                  <1>     stosb       ;Store it
  2223 000034B9 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2224 000034BB EBEA                <1>     jmp short .cpLp
  2225                              <1> .cpLpExit:
  2226                              <1>     ;Remove trailing semicolons
  2227 000034BD 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2228 000034C1 7507                <1>     jne .cpLpNoIntervene
  2229 000034C3 FFC9                <1>     dec ecx     ;Reduce the count by one
  2230 000034C5 48FFCF              <1>     dec rdi     ;Go back a char
  2231 000034C8 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2232                              <1> .cpLpNoIntervene:
  2233 000034CA B00D                <1>     mov al, CR  ;Now we store the terminator!
  2234 000034CC AA                  <1>     stosb       ;Store it!
  2235 000034CD 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2236 000034D3 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2237 000034DA FFC1                <1>     inc ecx     ;Add the CR for copying over
  2238 000034DC 488D3501D0FFFF      <1>     lea rsi, searchSpec
  2239 000034E3 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2240 000034EA 57                  <1>     push rdi
  2241 000034EB F3A4                <1>     rep movsb
  2242 000034ED 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2243 000034EE E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2244                              <1> .printPath:
  2245 000034F3 488D3DB2DBFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2246 000034FA E882090000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2247 000034FF 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2248 00003501 4889F7              <1>     mov rdi, rsi        
  2249 00003504 E80A060000          <1>     call strlen         ;Get the length of the path in rdi
  2250 00003509 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2251 0000350F 7411                <1>     je .noPathPrnt      ;Print no path!
  2252 00003511 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2253 00003513 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2254 00003516 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2255 0000351B B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2256 00003520 EB0C                <1>     jmp short .pathExit
  2257                              <1> .noPathPrnt:
  2258 00003522 488D155FD7FFFF      <1>     lea rdx, noPath
  2259 00003529 B800090000          <1>     mov eax, 0900h
  2260                              <1> .pathExit:
  2261 0000352E CD21                <1>     int 21h
  2262 00003530 E8C3030000          <1>     call printCRLF      ;Print a crlf at the end
  2263                              <1>     return
    13                              <2> %%_ret:
    14 00003535 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2264                              <1> .skipPathDelimiters:
  2265                              <1> ;Input: rsi -> Start of string to parse
  2266                              <1> ;Output: rsi -> First non-delimiter char of string
  2267                              <1> ;        al = First non delim char
  2268 00003536 AC                  <1>     lodsb
  2269 00003537 E806000000          <1>     call .isALPathDelimiter
  2270 0000353C 74F8                <1>     je .skipPathDelimiters
  2271 0000353E 48FFCE              <1>     dec rsi
  2272                              <1>     return
    13                              <2> %%_ret:
    14 00003541 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2273                              <1> .isALPathDelimiter:
  2274                              <1> ;Same as before without semicolon
  2275 00003542 3C20                <1>     cmp al, SPC
  2276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003544 74(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2277 00003546 3C09                <1>     cmp al, TAB
  2278                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003548 74(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2279 0000354A 3C2C                <1>     cmp al, ","
  2280                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000354C 74(41)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2281 0000354E 3C3D                <1>     cmp al, "="
  2282                              <1>     return
    13                              <2> %%_ret:
    14 00003550 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2283                              <1> 
  2284                              <1> prompt:
  2285 00003551 E8D1080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2286 00003556 0F847FE5FFFF        <1>     jz badEnvSpaceError
  2287                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2288 0000355C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2289 00003563 E8C7050000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2290 00003568 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2291 0000356B 742C                <1>     je .reset   ;Reset if so
  2292 0000356D 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2293 0000356E 488D35DAD9FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2294 00003575 488D3D68CFFFFF      <1>     lea rdi, searchSpec
  2295 0000357C B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2296 00003581 F3A4                <1>     rep movsb
  2297 00003583 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2298 00003584 31C9                <1>     xor ecx, ecx    ;Get char count
  2299                              <1> .cp:    ;Now copy the user string over
  2300 00003586 AC                  <1>     lodsb
  2301 00003587 AA                  <1>     stosb 
  2302 00003588 3C0D                <1>     cmp al, CR
  2303 0000358A 7404                <1>     je .cpOk
  2304 0000358C FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2305 0000358E EBF6                <1>     jmp short .cp
  2306                              <1> .cpOk:
  2307 00003590 488D354DCFFFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2308 00003597 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2309                              <1> .reset:
  2310                              <1> ;Delete the environment variable!
  2311 00003599 488D35AFD9FFFF      <1>     lea rsi, promptEVar 
  2312 000035A0 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2313                              <1> .goSet:
  2314 000035A2 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2315 000035A8 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2316 000035AF FFC1                <1>     inc ecx     ;Include CR in copy
  2317 000035B1 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2318 000035B8 57                  <1>     push rdi
  2319 000035B9 F3A4                <1>     rep movsb
  2320 000035BB 5E                  <1>     pop rsi
  2321 000035BC E9F0FDFFFF          <1>     jmp set.altEp
  2322                              <1> 
  2323                              <1> batLaunch:
  2324                              <1> ;Preps and launches a batch file!
  2325 000035C1 488D1505000000      <1>     lea rdx, .batMsg
  2326 000035C8 E932030000          <1>     jmp printString
  2327 000035CD 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  2327 000035D6 70726F636573736F72- <1>
  2327 000035DF 206E6F7420696D706C- <1>
  2327 000035E8 656D656E7465640D0A- <1>
  2327 000035F1 24                  <1>
  2328                              <1> 
  2329                              <1> echo:
  2330 000035F2 F605B3CAFFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2331 000035F9 752A                <1>     jnz .argGiven
  2332 000035FB 488D1577D7FFFF      <1>     lea rdx, echoIs
  2333 00003602 E8F8020000          <1>     call printString
  2334 00003607 488D1551D7FFFF      <1>     lea rdx, onMes
  2335 0000360E 488D0D44D7FFFF      <1>     lea rcx, offMes
  2336 00003615 F60582CAFFFFFF      <1>     test byte [echoFlg], -1
  2337 0000361C 480F44D1            <1>     cmovz rdx, rcx
  2338 00003620 E9DA020000          <1>     jmp printString
  2339                              <1> .argGiven:
  2340 00003625 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2341 0000362C 0FB6057ACAFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2342 00003633 4801C6              <1>     add rsi, rax
  2343 00003636 AC                  <1>     lodsb   ;Get this char
  2344 00003637 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2345 0000363A E8DE040000          <1>     call ucChar
  2346 0000363F 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2347 00003641 755A                <1>     jne .directEcho
  2348 00003643 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2349 00003646 E8D2040000          <1>     call ucChar
  2350 0000364B 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2351 0000364D 751B                <1>     jne .checkOff
  2352 0000364F 56                  <1>     push rsi
  2353 00003650 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2354 00003657 E8D3040000          <1>     call skipDelimiters
  2355 0000365C 803E0D              <1>     cmp byte [rsi], CR
  2356 0000365F 5E                  <1>     pop rsi
  2357 00003660 753B                <1>     jne .directEcho ;If its not, just echo the string
  2358 00003662 C60535CAFFFFFF      <1>     mov byte [echoFlg], -1
  2359                              <1>     return
    13                              <2> %%_ret:
    14 00003669 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2360                              <1> .checkOff:
  2361 0000366A 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2362 0000366D E8AB040000          <1>     call ucChar
  2363 00003672 3C46                <1>     cmp al, "F" ;Is it an F?
  2364 00003674 7527                <1>     jne .directEcho ;No, just direct echo
  2365 00003676 8A4602              <1>     mov al, byte [rsi + 2]
  2366 00003679 E89F040000          <1>     call ucChar
  2367 0000367E 3C46                <1>     cmp al, "F"
  2368 00003680 751B                <1>     jne .directEcho
  2369 00003682 56                  <1>     push rsi
  2370 00003683 4881C603000000      <1>     add rsi, 3
  2371 0000368A E8A0040000          <1>     call skipDelimiters
  2372 0000368F 803E0D              <1>     cmp byte [rsi], CR
  2373 00003692 5E                  <1>     pop rsi
  2374 00003693 7508                <1>     jne .directEcho
  2375 00003695 C60502CAFFFF00      <1>     mov byte [echoFlg], 0
  2376                              <1>     return
    13                              <2> %%_ret:
    14 0000369C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2377                              <1> .directEcho: 
  2378 0000369D AC                  <1>     lodsb
  2379 0000369E 3C0D                <1>     cmp al, CR
  2380 000036A0 0F8452020000        <1>     je printCRLF    ;Prints a crlf and returns
  2381 000036A6 88C2                <1>     mov dl, al
  2382 000036A8 E8C2020000          <1>     call outChar
  2383 000036AD EBEE                <1>     jmp short .directEcho
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000036AF 53                  <1>     push rbx
    11 000036B0 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000036B2 803D7BC9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 000036B9 7240                <1>     jb .usDate
    14 000036BB 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 000036BD 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 000036C2 E8B0000000          <1>     call .printFirst
    18 000036C7 8A1572C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 000036CD B402                <1>     mov ah, 02h
    20 000036CF CD21                <1>     int 21h
    21                              <1> 
    22 000036D1 89C8                <1>     mov eax, ecx
    23 000036D3 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 000036D8 C1E805              <1>     shr eax, 5
    25 000036DB E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 000036E0 8A1559C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 000036E6 B402                <1>     mov ah, 02h
    29 000036E8 CD21                <1>     int 21h
    30                              <1> 
    31 000036EA 89C8                <1>     mov eax, ecx
    32 000036EC 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 000036F1 C1E809              <1>     shr eax, 9
    34 000036F4 5B                  <1>     pop rbx ;Get the year signature back
    35 000036F5 E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 000036FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 000036FB 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003700 C1E805              <1>     shr eax, 5
    41 00003703 E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003708 8A1531C9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 0000370E B402                <1>     mov ah, 02h
    45 00003710 CD21                <1>     int 21h
    46                              <1> 
    47 00003712 89C8                <1>     mov eax, ecx
    48 00003714 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003719 E875000000          <1>     call .printSecond
    50                              <1> 
    51 0000371E 8A151BC9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003724 B402                <1>     mov ah, 02h
    53 00003726 CD21                <1>     int 21h
    54                              <1> 
    55 00003728 89C8                <1>     mov eax, ecx
    56 0000372A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 0000372F C1E809              <1>     shr eax, 9
    58 00003732 5B                  <1>     pop rbx ;Get the year signature back
    59 00003733 E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003738 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003739 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 0000373E C1E809              <1>     shr eax, 9
    65 00003741 5B                  <1>     pop rbx ;Get the year signature back
    66 00003742 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003747 8A15F2C8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 0000374D B402                <1>     mov ah, 02h
    70 0000374F CD21                <1>     int 21h
    71                              <1> 
    72 00003751 89C8                <1>     mov eax, ecx
    73 00003753 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003758 C1E805              <1>     shr eax, 5
    75 0000375B E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003760 8A15D9C8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003766 B402                <1>     mov ah, 02h
    79 00003768 CD21                <1>     int 21h
    80                              <1> 
    81 0000376A 89C8                <1>     mov eax, ecx
    82 0000376C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003771 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003776 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003777 51                  <1>     push rcx
    89 00003778 E8D0050000          <1>     call getDecimalWord
    90 0000377D 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 0000377F 7504                <1>     jnz .skipSpace
    92 00003781 88CD                <1>     mov ch, cl
    93 00003783 B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003785 88CA                <1>     mov dl, cl
    96 00003787 B402                <1>     mov ah, 02h
    97 00003789 CD21                <1>     int 21h
    98 0000378B 88EA                <1>     mov dl, ch
    99 0000378D B402                <1>     mov ah, 02h
   100 0000378F CD21                <1>     int 21h
   101 00003791 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003793 51                  <1>     push rcx
   105 00003794 E8B4050000          <1>     call getDecimalWord
   106 00003799 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 0000379B 75E8                <1>     jnz .skipSpace
   108 0000379D 88CD                <1>     mov ch, cl
   109 0000379F B130                <1>     mov cl, "0"
   110 000037A1 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000037A3 05BC070000          <1>     add eax, 1980
   113 000037A8 51                  <1>     push rcx
   114 000037A9 53                  <1>     push rbx
   115 000037AA E89E050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000037AF 5B                  <1>     pop rbx
   117 000037B0 84DB                <1>     test bl, bl
   118 000037B2 740C                <1>     jz .twoDigitYear
   119 000037B4 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000037B6 B402                <1>     mov ah, 02h
   121 000037B8 CD21                <1>     int 21h
   122 000037BA 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000037BC B402                <1>     mov ah, 02h
   124 000037BE CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000037C0 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000037C3 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000037C5 B402                <1>     mov ah, 02h
   129 000037C7 CD21                <1>     int 21h
   130 000037C9 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 000037CB B402                <1>     mov ah, 02h
   132 000037CD CD21                <1>     int 21h
   133 000037CF 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 000037D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 000037D1 89C1                <1>     mov ecx, eax
   142 000037D3 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 000037D8 C1E80B              <1>     shr eax, 11
   144 000037DB 803D63C8FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 000037E2 750B                <1>     jne .ampm
   146 000037E4 E85A000000          <1>     call .printHours
   147 000037E9 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 000037EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 000037EF 3D0C000000          <1>     cmp eax, 12
   151 000037F4 7713                <1>     ja .pm
   152 000037F6 7416                <1>     je .pm2
   153 000037F8 E846000000          <1>     call .printHours
   154 000037FD E81D000000          <1>     call .printMinutes
   155 00003802 B261                <1>     mov dl, "a"
   156 00003804 B402                <1>     mov ah, 02h
   157 00003806 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003808 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003809 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 0000380E E830000000          <1>     call .printHours
   163 00003813 E807000000          <1>     call .printMinutes
   164 00003818 B270                <1>     mov dl, "p"
   165 0000381A B402                <1>     mov ah, 02h
   166 0000381C CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 0000381E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 0000381F 8A151CC8FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003825 B402                <1>     mov ah, 02h
   171 00003827 CD21                <1>     int 21h
   172                              <1> 
   173 00003829 89C8                <1>     mov eax, ecx
   174 0000382B 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003830 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003833 51                  <1>     push rcx
   178 00003834 E814050000          <1>     call getDecimalWord
   179 00003839 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 0000383B 7514                <1>     jnz .skipSpace
   181 0000383D 88CD                <1>     mov ch, cl
   182 0000383F B130                <1>     mov cl, "0"
   183 00003841 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003843 51                  <1>     push rcx
   186 00003844 E804050000          <1>     call getDecimalWord
   187 00003849 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 0000384B 7504                <1>     jnz .skipSpace
   189 0000384D 88CD                <1>     mov ch, cl
   190 0000384F B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003851 88CA                <1>     mov dl, cl
   193 00003853 B402                <1>     mov ah, 02h
   194 00003855 CD21                <1>     int 21h
   195 00003857 88EA                <1>     mov dl, ch
   196 00003859 B402                <1>     mov ah, 02h
   197 0000385B CD21                <1>     int 21h
   198 0000385D 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 0000385E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 0000385F F60538C8FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003866 74(5E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003868 488D3DE0D6FFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 0000386F E80D060000          <1>     call searchForEnvVar
   206 00003874 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003876 E8F9000000          <1>     call putCWDInPrompt
   209 0000387B E8C5000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003880 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003881 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003888 AC                  <1>     lodsb   ;Get the char
   216 00003889 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000388B 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 0000388D 3C24                <1>     cmp al, "$"
   219 0000388F 7409                <1>     je .escapeChar
   220 00003891 88C2                <1>     mov dl, al
   221 00003893 E8D7000000          <1>     call outChar    ;Prints the char in dl
   222 00003898 EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 0000389A AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 0000389B E87D020000          <1>     call ucChar ;Uppercase this char in al
   226 000038A0 488D1D2A000000      <1>     lea rbx, .pTbl
   227 000038A7 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 000038AC 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 000038AE 740D                <1>     je .escapeFnd
   231 000038B0 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 000038B7 FFC9                <1>     dec ecx
   233 000038B9 75F1                <1>     jnz .escapeLp
   234 000038BB EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 000038BD 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 000038C4 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 000038C8 4801D8              <1>     add rax, rbx                ;Add these
   239 000038CB 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 000038CC FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 000038CE 5E                  <1>     pop rsi
   242 000038CF EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 000038D1 42                  <1>     db "B", 
   247 000038D2 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 000038D4 44                  <1>     db "D", 
   249 000038D5 5D01                <1>     dw printFmtDate - .pTbl        ;Current date
   250 000038D7 45                  <1>     db "E", 
   251 000038D8 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 000038DA 47                  <1>     db "G", 
   253 000038DB 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 000038DD 48                  <1>     db "H", 
   255 000038DE 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 000038E0 4C                  <1>     db "L", 
   257 000038E1 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 000038E3 4E                  <1>     db "N", 
   259 000038E4 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 000038E6 50                  <1>     db "P", 
   261 000038E7 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 000038E9 51                  <1>     db "Q", 
   263 000038EA 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 000038EC 54                  <1>     db "T", 
   265 000038ED F400                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 000038EF 56                  <1>     db "V", 
   267 000038F0 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 000038F2 5F                  <1>     db "_", 
   269 000038F3 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 000038F5 24                  <1>     db "$", 
   271 000038F6 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLF:
   275 000038F8 488D1567D0FFFF      <1>     lea rdx, crlf
   276                              <1> printString:
   277 000038FF B800090000          <1>     mov eax, 0900h  ;Print string
   278 00003904 CD21                <1>     int 21h
   279                              <1>     return
    13                              <2> %%_ret:
    14 00003906 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   280                              <1> 
   281                              <1> putVersionInPrompt:
   282 00003907 488D15CBD2FFFF      <1>     lea rdx, dosVer
   283 0000390E B409                <1>     mov ah, 09h ;Print String
   284 00003910 CD21                <1>     int 21h
   285 00003912 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   286 00003914 CD21                <1>     int 21h
   287 00003916 50                  <1>     push rax    ;Save minor version
   288 00003917 E884010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   289 0000391C E89C010000          <1>     call printPackedBCD ;Print al
   290 00003921 B22E                <1>     mov dl, "."
   291 00003923 B402                <1>     mov ah, 02h
   292 00003925 CD21                <1>     int 21h
   293 00003927 58                  <1>     pop rax
   294 00003928 88E0                <1>     mov al, ah  ;Get the minor version low
   295 0000392A E871010000          <1>     call hexToBCD
   296 0000392F E889010000          <1>     call printPackedBCD
   297                              <1>     return
    13                              <2> %%_ret:
    14 00003934 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   298                              <1> putEscInPrompt:
   299 00003935 B21B                <1>     mov dl, ESC
   300 00003937 EB36                <1>     jmp short outChar
   301                              <1> 
   302                              <1> putMoneyInPrompt:
   303 00003939 B224                <1>     mov dl, "$"
   304 0000393B EB32                <1>     jmp short outChar
   305                              <1> 
   306                              <1> putEquInPrompt:
   307 0000393D B23D                <1>     mov dl, "="
   308 0000393F EB2E                <1>     jmp short outChar
   309                              <1> 
   310                              <1> putPipeInPrompt:
   311 00003941 B27C                <1>     mov dl, "|"
   312 00003943 EB2A                <1>     jmp short outChar
   313                              <1> 
   314                              <1> putGTinPrompt:
   315 00003945 B23E                <1>     mov dl, ">"
   316 00003947 EB26                <1>     jmp short outChar
   317                              <1> 
   318                              <1> putLTinPrompt:
   319 00003949 B23C                <1>     mov dl, "<"
   320 0000394B EB22                <1>     jmp short outChar
   321                              <1> 
   322                              <1> putBSPinPrompt:
   323 0000394D 488D1580D4FFFF      <1>     lea rdx, backSpace
   324 00003954 B903000000          <1>     mov ecx, 3
   325 00003959 BB01000000          <1>     mov ebx, 1
   326 0000395E B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   327 00003963 CD21                <1>     int 21h
   328                              <1>     return
    13                              <2> %%_ret:
    14 00003965 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> putDriveInPrompt:
   331 00003966 E88A010000          <1>     call getCurrentDrive
   332 0000396B 0441                <1>     add al, "A" ;Convert to letter
   333 0000396D 88C2                <1>     mov dl, al
   334                              <1> outChar:
   335 0000396F B402                <1>     mov ah, 02h ;Echo to STDOUT
   336 00003971 CD21                <1>     int 21h
   337                              <1>     return
    13                              <2> %%_ret:
    14 00003973 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   338                              <1> putCWDInPrompt:
   339 00003974 E87C010000          <1>     call getCurrentDrive
   340 00003979 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   341 0000397B FEC2                <1>     inc dl
   342 0000397D 0441                <1>     add al, "A" ;Convert to letter
   343 0000397F B43A                <1>     mov ah, ":"
   344 00003981 488D3DD2C6FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   345 00003988 66AB                <1>     stosw   ;Store X:, rdi+=2
   346 0000398A 8A0599C6FFFF        <1>     mov al, byte [pathSep]
   347 00003990 AA                  <1>     stosb   ;Store pathSep, inc rdi
   348 00003991 B447                <1>     mov ah, 47h ;Get Current Working Directory
   349 00003993 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   350 00003996 CD21                <1>     int 21h
   351 00003998 721F                <1>     jc .badDrive
   352 0000399A E874010000          <1>     call strlen
   353 0000399F 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   354                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   355 000039A5 B800400000          <1>     mov eax, 4000h ;Write to handle
   356 000039AA BB01000000          <1>     mov ebx, 1  ;STDOUT
   357 000039AF 488D15A4C6FFFF      <1>     lea rdx, currDirStr
   358 000039B6 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 000039B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> .badDrive:
   361                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   362 000039B9 488D15E1D2FFFF      <1>     lea rdx, badDrvMsg
   363 000039C0 E93AFFFFFF          <1>     jmp printString
   364                              <1> printFmtTime:
   365                              <1> ;Outputs the formatted time
   366 000039C5 E847000000          <1>     call getTime
   367 000039CA 0FB6C5              <1>     movzx eax, ch
   368 000039CD E871FEFFFF          <1>     call printTime.printHours
   369 000039D2 8A1569C6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   370 000039D8 B402                <1>     mov ah, 02h
   371 000039DA CD21                <1>     int 21h
   372 000039DC 0FB605CACCFFFF      <1>     movzx eax, byte [td1]   ;Minutes
   373 000039E3 E84BFEFFFF          <1>     call printTime.printMinutesAlt
   374 000039E8 8A1553C6FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   375 000039EE B402                <1>     mov ah, 02h
   376 000039F0 CD21                <1>     int 21h
   377 000039F2 0FB605B7CCFFFF      <1>     movzx eax, byte [td4]   ;Seconds
   378 000039F9 E835FEFFFF          <1>     call printTime.printMinutesAlt
   379 000039FE B22E                <1>     mov dl, "."
   380 00003A00 B402                <1>     mov ah, 02h
   381 00003A02 CD21                <1>     int 21h
   382 00003A04 0FB605A4CCFFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   383 00003A0B E823FEFFFF          <1>     call printTime.printMinutesAlt
   384                              <1>     return
    13                              <2> %%_ret:
    14 00003A10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> getTime:
   386 00003A11 B42C                <1>     mov ah, 2Ch ;DOS get time
   387 00003A13 CD21                <1>     int 21h
   388                              <1>     ;CH = hour (0-23)
   389                              <1> 	;CL = minutes (0-59)
   390                              <1> 	;DH = seconds (0-59)
   391                              <1> 	;DL = hundredths (0-99)
   392 00003A15 880D92CCFFFF        <1>     mov byte [td1], cl
   393 00003A1B 882D8DCCFFFF        <1>     mov byte [td2], ch
   394 00003A21 881588CCFFFF        <1>     mov byte [td3], dl
   395 00003A27 883583CCFFFF        <1>     mov byte [td4], dh
   396                              <1>     return
    13                              <2> %%_ret:
    14 00003A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   397                              <1> 
   398                              <1> printFmtDate:
   399                              <1> ;Outputs the formatted date
   400 00003A2E B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   401 00003A33 CD21                <1>     int 21h
   402                              <1> 	;AL = day of the week (0=Sunday)
   403                              <1> 	;CX = year (1980-2099)
   404                              <1> 	;DH = month (1-12)
   405                              <1> 	;DL = day (1-31)
   406 00003A35 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   407 00003A3A 66890D6CCCFFFF      <1>     mov word [td1], cx
   408 00003A41 881568CCFFFF        <1>     mov byte [td3], dl
   409 00003A47 883563CCFFFF        <1>     mov byte [td4], dh
   410 00003A4D 0FB6C0              <1>     movzx eax, al
   411 00003A50 89C3                <1>     mov ebx, eax
   412 00003A52 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   413 00003A54 01D8                <1>     add eax, ebx ;Make it 3 times 
   414 00003A56 488D15C6D0FFFF      <1>     lea rdx, dayName
   415 00003A5D 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   416 00003A61 B903000000          <1>     mov ecx, 3  ;Print three chars
   417 00003A66 BB01000000          <1>     mov ebx, 1  ;STDOUT
   418 00003A6B B440                <1>     mov ah, 40h ;Write to handle
   419 00003A6D CD21                <1>     int 21h
   420 00003A6F B220                <1>     mov dl, " "
   421 00003A71 E8F9FEFFFF          <1>     call outChar
   422                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   423                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   424                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   425 00003A76 0FB70530CCFFFF      <1>     movzx eax, word [td1]   ;Get this word
   426 00003A7D C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   427 00003A80 0FB61D29CCFFFF      <1>     movzx ebx, byte [td4]
   428 00003A87 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   429 00003A8A 09D8                <1>     or eax, ebx ;Add this date to eax
   430 00003A8C 0FB61D1CCCFFFF      <1>     movzx ebx, byte [td3]
   431 00003A93 09D8                <1>     or eax, ebx
   432 00003A95 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   433 00003A9A E810FCFFFF          <1>     call printDate
   434                              <1>     return
    13                              <2> %%_ret:
    14 00003A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> 
   437                              <1> hexToBCD:
   438                              <1> ;Converts a Hex byte into two BCD digits
   439                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   440 00003AA0 51                  <1>     push rcx
   441 00003AA1 0FB6C0              <1>     movzx eax, al   ;Zero extend
   442 00003AA4 31C9                <1>     xor ecx, ecx
   443                              <1> .htb0:
   444 00003AA6 3D0A000000          <1>     cmp eax, 10
   445 00003AAB 7209                <1>     jb .htb1
   446 00003AAD 2D0A000000          <1>     sub eax, 10
   447 00003AB2 FFC1                <1>     inc ecx
   448 00003AB4 EBF0                <1>     jmp short .htb0
   449                              <1> .htb1:
   450 00003AB6 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   451 00003AB9 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   452 00003ABB 59                  <1>     pop rcx
   453 00003ABC C3                  <1>     ret
   454                              <1> 
   455                              <1> printPackedBCD:
   456                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   457                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   458                              <1> ;Preserves all registers
   459 00003ABD 50                  <1>     push rax
   460 00003ABE 52                  <1>     push rdx
   461 00003ABF 88C4                <1>     mov ah, al
   462 00003AC1 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   463 00003AC3 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   464 00003AC6 7508                <1>     jnz .upperNybble
   465 00003AC8 B220                <1>     mov dl, " "
   466 00003ACA B402                <1>     mov ah, 02h
   467 00003ACC CD21                <1>     int 21h
   468 00003ACE EB0E                <1>     jmp short .lowerNybble
   469                              <1> .upperNybble:
   470 00003AD0 50                  <1>     push rax
   471 00003AD1 C0EC04              <1>     shr ah, 4
   472 00003AD4 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   473 00003AD7 88E2                <1>     mov dl, ah
   474 00003AD9 B402                <1>     mov ah, 02h ;Print DL
   475 00003ADB CD21                <1>     int 21h
   476 00003ADD 58                  <1>     pop rax
   477                              <1> .lowerNybble:
   478 00003ADE 0430                <1>     add al, "0"
   479 00003AE0 88C2                <1>     mov dl, al
   480 00003AE2 B402                <1>     mov ah, 02h ;Print DL
   481 00003AE4 CD21                <1>     int 21h
   482 00003AE6 5A                  <1>     pop rdx
   483 00003AE7 58                  <1>     pop rax
   484                              <1>     return
    13                              <2> %%_ret:
    14 00003AE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> setDrive:
   487                              <1> ;Input: dl = 0 based Drive number to set to
   488                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   489                              <1> ;AX trashed.
   490 00003AE9 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   491 00003AEB CD21                <1>     int 21h 
   492 00003AED E803000000          <1>     call getCurrentDrive
   493 00003AF2 38D0                <1>     cmp al, dl  ;Is this the same drive?
   494                              <1>     return
    13                              <2> %%_ret:
    14 00003AF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> getCurrentDrive:
   496                              <1> ;Returns the 0 based current drive in al
   497 00003AF5 B419                <1>     mov ah, 19h
   498 00003AF7 CD21                <1>     int 21h
   499                              <1>     return
    13                              <2> %%_ret:
    14 00003AF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> strcpy:
   502                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   503                              <1> ;rsi -> Source
   504                              <1> ;rdi -> Destination
   505 00003AFA 51                  <1>     push rcx
   506 00003AFB 57                  <1>     push rdi
   507 00003AFC 4889F7              <1>     mov rdi, rsi
   508 00003AFF E80F000000          <1>     call strlen ;Get the length of the string in rsi
   509 00003B04 5F                  <1>     pop rdi
   510 00003B05 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   511 00003B07 59                  <1>     pop rcx
   512                              <1>     return
    13                              <2> %%_ret:
    14 00003B08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> strcpy2:
   515                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   516                              <1> ;rsi -> Source
   517                              <1> ;rdi -> Destination
   518 00003B09 56                  <1>     push rsi
   519 00003B0A 57                  <1>     push rdi
   520 00003B0B E8EAFFFFFF          <1>     call strcpy 
   521 00003B10 5F                  <1>     pop rdi
   522 00003B11 5E                  <1>     pop rsi
   523                              <1>     return
    13                              <2> %%_ret:
    14 00003B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strlen:
   526                              <1> ;Gets the length of a ASCIIZ string
   527                              <1> ;Input: rdi = Source buffer
   528                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   529 00003B13 50                  <1>     push rax
   530 00003B14 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   531 00003B19 CD2F                <1>     int 2fh
   532 00003B1B 58                  <1>     pop rax
   533                              <1>     return
    13                              <2> %%_ret:
    14 00003B1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   534                              <1> 
   535                              <1> ucChar:
   536                              <1> ;Input: al = Char to uppercase
   537                              <1> ;Output: al = Adjusted char 
   538 00003B1D 53                  <1>     push rbx
   539 00003B1E 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   540 00003B21 50                  <1>     push rax    ;Push the char twice on the stack
   541 00003B22 50                  <1>     push rax
   542 00003B23 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   543 00003B28 CD2F                <1>     int 2fh         ;Returns the processed char in al
   544 00003B2A 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   545 00003B2D 5B                  <1>     pop rbx
   546                              <1>     return
    13                              <2> %%_ret:
    14 00003B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> skipDelimiters:
   549                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   550                              <1> ; command delimiters but a subset thereof. 
   551                              <1> ;These are the same across all codepages.
   552                              <1> ;Input: rsi must point to the start of the data string
   553                              <1> ;Output: rsi points to the first non-delimiter char
   554 00003B2F 50                  <1>     push rax
   555                              <1> .l1:
   556 00003B30 AC                  <1>     lodsb
   557 00003B31 E807000000          <1>     call isALdelimiter
   558 00003B36 74F8                <1>     jz .l1
   559                              <1> .exit:
   560 00003B38 58                  <1>     pop rax
   561 00003B39 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   562                              <1>     return
    13                              <2> %%_ret:
    14 00003B3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> isALdelimiter:
   565                              <1> ;Returns: ZF=NZ if al is not a command separator 
   566                              <1> ;         ZF=ZE if al is a command separator
   567 00003B3D 3C20                <1>     cmp al, " "
   568                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B3F 74(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   569 00003B41 3C3B                <1>     cmp al, ";"
   570                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B43 74(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   571 00003B45 3C3D                <1>     cmp al, "="
   572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B47 74(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   573 00003B49 3C2C                <1>     cmp al, ","
   574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003B4B 74(3C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   575 00003B4D 3C09                <1>     cmp al, TAB
   576                              <1>     return
    13                              <2> %%_ret:
    14 00003B4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> clearCommandState:
   579                              <1> ;Clears the command state
   580 00003B50 488D3D55C5FFFF      <1>     lea rdi, cmdStatePtr
   581 00003B57 B907000000          <1>     mov ecx, cmdStateL
   582 00003B5C 31C0                <1>     xor eax, eax
   583 00003B5E F3AA                <1>     rep stosb
   584                              <1>     return
    13                              <2> %%_ret:
    14 00003B60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> clearCommandLineState:
   587                              <1> ;Clears the command line state after a 0Dh encountered
   588 00003B61 488D3D39C5FFFF      <1>     lea rdi, cmdLineStatePtr
   589 00003B68 B912000000          <1>     mov ecx, cmdLineStateL
   590 00003B6D 31C0                <1>     xor eax, eax
   591 00003B6F F3AA                <1>     rep stosb
   592 00003B71 C70527C5FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   592 00003B7A FF                  <1>
   593 00003B7B C70523C5FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   593 00003B84 FF                  <1>
   594                              <1> ;Close all handles from 5->MAX
   595 00003B85 0FB70D9BC4FFFF      <1>     movzx ecx, word [numHdls]
   596 00003B8C BB05000000          <1>     mov ebx, 5
   597                              <1> .lp:
   598 00003B91 B43E                <1>     mov ah, 3Eh ;File close
   599 00003B93 CD21                <1>     int 21h
   600 00003B95 FFC3                <1>     inc ebx ;Goto next file
   601 00003B97 39CB                <1>     cmp ebx, ecx
   602 00003B99 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   603                              <1>     return
    13                              <2> %%_ret:
    14 00003B9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> 
   605                              <1> asciiFilenameToFCB:
   606                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   607                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   608                              <1> ;Also doesn't check if chars are valid
   609                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   610                              <1> ;Name is space padded.
   611                              <1> ;Input: rsi = ASCII string buffer
   612                              <1> ;       rdi = FCB name buffer
   613                              <1> ;Output: al = Char that terminated the source string 
   614 00003B9C 53                  <1>     push rbx    
   615 00003B9D 57                  <1>     push rdi
   616 00003B9E B90B000000          <1>     mov ecx, 11
   617 00003BA3 B020                <1>     mov al, " "
   618 00003BA5 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   619 00003BA7 5F                  <1>     pop rdi
   620 00003BA8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   621                              <1>     ;Preprocess for Dir Searches
   622 00003BAB 803E2E              <1>     cmp byte [rsi], "."
   623 00003BAE 7509                <1>     jne .processName
   624 00003BB0 A4                  <1>     movsb   ;Store the first dot
   625 00003BB1 803E2E              <1>     cmp byte [rsi], "."
   626 00003BB4 752C                <1>     jne .exitBadChar
   627 00003BB6 A4                  <1>     movsb
   628 00003BB7 EB29                <1>     jmp short .exitBadChar
   629                              <1> .processName:
   630 00003BB9 AC                  <1>     lodsb   ;Get the char in al
   631 00003BBA 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   632 00003BBC 7426                <1>     jz .exit
   633 00003BBE 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   634 00003BC0 7407                <1>     je .extSpace
   635 00003BC2 3C2E                <1>     cmp al, "."
   636 00003BC4 740C                <1>     je .ext
   637 00003BC6 AA                  <1>     stosb   ;Store the char
   638 00003BC7 EBF0                <1>     jmp short .processName
   639                              <1> .extSpace:
   640                              <1> ;Now we scan for a period in the name
   641 00003BC9 AC                  <1>     lodsb   ;Get a char and increase rsi
   642 00003BCA 84C0                <1>     test al, al
   643 00003BCC 7416                <1>     jz .exit
   644 00003BCE 3C2E                <1>     cmp al, "."     ;If al is not a period...
   645 00003BD0 75F7                <1>     jne .extSpace   ; keep searching
   646                              <1> .ext:
   647 00003BD2 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   648                              <1> .processExt:
   649 00003BD6 AC                  <1>     lodsb
   650 00003BD7 84C0                <1>     test al, al
   651 00003BD9 7409                <1>     jz .exit
   652 00003BDB 3C20                <1>     cmp al, " "
   653 00003BDD 7405                <1>     je .exit
   654 00003BDF AA                  <1>     stosb
   655 00003BE0 EBF4                <1>     jmp short .processExt
   656                              <1> .exitBadChar:
   657 00003BE2 30C0                <1>     xor al, al  ;Return a null terminator
   658                              <1> .exit:
   659 00003BE4 5B                  <1>     pop rbx
   660                              <1>     return
    13                              <2> %%_ret:
    14 00003BE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> 
   662                              <1> findLastPathComponant:
   663                              <1> ;Finds the last path componant of an ASCIIZ path string
   664                              <1> ;Input: rdi -> Head of the path to find last componant on
   665                              <1> ;Output: rdi -> Start of the last componant
   666 00003BE6 50                  <1>     push rax
   667 00003BE7 51                  <1>     push rcx
   668 00003BE8 31C9                <1>     xor ecx, ecx
   669 00003BEA FFC9                <1>     dec ecx
   670 00003BEC 31C0                <1>     xor eax, eax
   671 00003BEE F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   672 00003BF0 F7D1                <1>     not ecx     ;This gets the count of chars  
   673 00003BF2 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   674 00003BF5 8A052EC4FFFF        <1>     mov al, byte [pathSep]
   675 00003BFB FD                  <1>     std
   676 00003BFC F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   677 00003BFE FC                  <1>     cld
   678 00003BFF 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   679 00003C01 48FFC7              <1>     inc rdi     ;Point at pathsep
   680                              <1> .exit:
   681 00003C04 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   682 00003C07 59                  <1>     pop rcx
   683 00003C08 58                  <1>     pop rax
   684                              <1>     return
    13                              <2> %%_ret:
    14 00003C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   685                              <1> 
   686                              <1> FCBToAsciiz:
   687                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   688                              <1> ;Name is space padded too
   689                              <1> ;Input: rsi = FCB name buffer
   690                              <1> ;       rdi = ASCIIZ string buffer
   691 00003C0A B908000000          <1>     mov ecx, 8
   692 00003C0F F3A4                <1>     rep movsb   ;Move the name over
   693                              <1> .scanNameSpace:
   694 00003C11 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   695 00003C15 750D                <1>     jne .ext
   696 00003C17 48FFCF              <1>     dec rdi
   697 00003C1A FFC1                <1>     inc ecx
   698 00003C1C 81F908000000        <1>     cmp ecx, 8
   699 00003C22 72ED                <1>     jb .scanNameSpace
   700                              <1> .ext:
   701 00003C24 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   702 00003C29 7506                <1>     jne .validExt
   703 00003C2B 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   704 00003C2F 7415                <1>     je .exit
   705                              <1> .validExt:
   706 00003C31 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   707 00003C33 AA                  <1>     stosb
   708 00003C34 B903000000          <1>     mov ecx, 3
   709 00003C39 F3A4                <1>     rep movsb   ;Move the three extension chars over
   710                              <1> .scanExtSpace:
   711 00003C3B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   712 00003C3F 7505                <1>     jne .exit
   713 00003C41 48FFCF              <1>     dec rdi
   714 00003C44 EBF5                <1>     jmp short .scanExtSpace
   715                              <1> .exit:
   716 00003C46 31C0                <1>     xor eax, eax
   717 00003C48 AA                  <1>     stosb   ;Store a null at the end
   718                              <1>     return
    13                              <2> %%_ret:
    14 00003C49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   719                              <1> 
   720                              <1> cpDelimOrCtrlStringToBufz:
   721                              <1> ;Copy a delimited or control char terminated string to a buffer
   722                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   723                              <1> ;       rdi -> Buffer to store null terminated string in
   724                              <1> ;Output: rsi -> First char past string end
   725                              <1> ;       rdi -> One char past null terminator on string buffer
   726 00003C4A C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   727                              <1> .lp:
   728 00003C4D AC                  <1>     lodsb
   729 00003C4E 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   730 00003C50 760A                <1>     jbe .exit
   731 00003C52 E8E6FEFFFF          <1>     call isALdelimiter
   732 00003C57 7403                <1>     je .exit
   733 00003C59 AA                  <1>     stosb
   734 00003C5A EBF1                <1>     jmp short .lp
   735                              <1> .exit:
   736 00003C5C 31C0                <1>     xor eax, eax
   737 00003C5E AA                  <1>     stosb   ;Store a null terminator
   738                              <1>     return
    13                              <2> %%_ret:
    14 00003C5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   739                              <1> 
   740                              <1> 
   741                              <1> cpDelimPathToBufz:
   742                              <1> ;Copy a delimited path into buffer and null terminate.
   743                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   744                              <1> ;       rdi -> Buffer to store null terminated path in
   745                              <1> ;Output: rsi -> First char past pathname delimiter
   746                              <1> ;       rdi -> One char past null terminator on pathname buffer
   747 00003C60 53                  <1>     push rbx
   748 00003C61 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   749 00003C64 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   750                              <1> .lp:
   751 00003C67 AC                  <1>     lodsb   ;Get the char
   752 00003C68 3C0D                <1>     cmp al, CR
   753 00003C6A 7412                <1>     je .gotRedirPath
   754 00003C6C E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   755 00003C71 740B                <1>     jz .gotRedirPath 
   756 00003C73 3A05B1C3FFFF        <1>     cmp al, byte [switchChar]
   757 00003C79 7403                <1>     je .gotRedirPath
   758 00003C7B AA                  <1>     stosb   ;Store this char and loop next char
   759 00003C7C EBE9                <1>     jmp short .lp
   760                              <1> .gotRedirPath:
   761 00003C7E 50                  <1>     push rax    ;Save the char on stack
   762 00003C7F 30C0                <1>     xor al, al  ;Get null terminator char
   763 00003C81 4829FB              <1>     sub rbx, rdi
   764 00003C84 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   765 00003C8B 7412                <1>     je .notColon
   766 00003C8D 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   767 00003C94 7409                <1>     je .notColon
   768 00003C96 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   769 00003C9A 7503                <1>     jne .notColon
   770 00003C9C 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   771                              <1> .notColon:
   772 00003C9F AA                  <1>     stosb   ;Store the null terminator for the redir path
   773 00003CA0 58                  <1>     pop rax ;Get back the char in al
   774 00003CA1 5B                  <1>     pop rbx
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003CA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> buildCommandPath:
   778                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   779 00003CA3 0FB60503C4FFFF      <1>     movzx eax, byte [arg1Off]
   780 00003CAA 4C8B055EC3FFFF      <1>     mov r8, [pspPtr]
   781 00003CB1 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   782 00003CB8 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   783                              <1> copyArgumentToSearchSpec:
   784                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   785                              <1> ; and null terminates
   786 00003CBB 488D3D22C8FFFF      <1>     lea rdi, searchSpec
   787 00003CC2 E899FFFFFF          <1>     call cpDelimPathToBufz
   788                              <1>     return
    13                              <2> %%_ret:
    14 00003CC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> scanForWildcards:
   791                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   792                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   793 00003CC8 50                  <1>     push rax
   794 00003CC9 56                  <1>     push rsi
   795                              <1> .lp:
   796 00003CCA AC                  <1>     lodsb
   797 00003CCB 3C3F                <1>     cmp al, "?"
   798 00003CCD 740A                <1>     je .exit
   799 00003CCF 3C2A                <1>     cmp al, "*"
   800 00003CD1 7406                <1>     je .exit
   801 00003CD3 84C0                <1>     test al, al
   802 00003CD5 75F3                <1>     jnz .lp
   803 00003CD7 FEC0                <1>     inc al  ;This will clear the ZF
   804                              <1> .exit:
   805 00003CD9 5E                  <1>     pop rsi
   806 00003CDA 58                  <1>     pop rax
   807                              <1>     return
    13                              <2> %%_ret:
    14 00003CDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> 
   809                              <1> printDecimalWord:
   810                              <1> ;Takes qword in rax and print it's decimal representation
   811                              <1> ;Takes the qword in eax and prints its decimal representation
   812 00003CDC 31C9                <1>     xor ecx, ecx
   813 00003CDE 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   814 00003CE0 85C0                <1>     test eax, eax
   815 00003CE2 750C                <1>     jnz .notZero
   816 00003CE4 B930000000          <1>     mov ecx, "0"
   817 00003CE9 BD01000000          <1>     mov ebp, 1  ;Print one digit
   818 00003CEE EB3E                <1>     jmp short .dpfb2
   819                              <1> .notZero:
   820 00003CF0 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   821 00003CF2 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   822                              <1> .dpfb0:
   823 00003CF7 FFC5                <1>     inc ebp
   824 00003CF9 81FD08000000        <1>     cmp ebp, 8
   825 00003CFF 7206                <1>     jb .dpfb00
   826 00003D01 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   827 00003D05 EB04                <1>     jmp short .dpfb01
   828                              <1> .dpfb00:
   829 00003D07 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   830                              <1> .dpfb01:
   831 00003D0B 31D2                <1>     xor edx, edx
   832 00003D0D 48F7F6              <1>     div rsi
   833 00003D10 80C230              <1>     add dl, '0'
   834 00003D13 80FA39              <1>     cmp dl, '9'
   835 00003D16 7603                <1>     jbe .dpfb1
   836 00003D18 80C207              <1>     add dl, 'A'-'0'-10
   837                              <1> .dpfb1:
   838 00003D1B 81FD08000000        <1>     cmp ebp, 8
   839 00003D21 7204                <1>     jb .dpfb10
   840 00003D23 88D3                <1>     mov bl, dl ;Add the bottom bits
   841 00003D25 EB02                <1>     jmp short .dpfb11
   842                              <1> .dpfb10:
   843 00003D27 88D1                <1>     mov cl, dl    ;Save remainder byte
   844                              <1> .dpfb11:
   845 00003D29 4885C0              <1>     test rax, rax
   846 00003D2C 75C9                <1>     jnz .dpfb0
   847                              <1> .dpfb2:
   848 00003D2E 81FD08000000        <1>     cmp ebp, 8
   849 00003D34 7208                <1>     jb .dpfb20
   850 00003D36 88DA                <1>     mov dl, bl
   851 00003D38 48C1EB08            <1>     shr rbx, 8
   852 00003D3C EB06                <1>     jmp short .dpfb21
   853                              <1> .dpfb20:
   854 00003D3E 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   855 00003D40 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   856                              <1> .dpfb21:
   857 00003D44 B402                <1>     mov ah, 02h
   858 00003D46 CD21                <1>     int 21h
   859 00003D48 FFCD                <1>     dec ebp
   860 00003D4A 75E2                <1>     jnz .dpfb2
   861                              <1>     return
    13                              <2> %%_ret:
    14 00003D4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   862                              <1> 
   863                              <1> getDecimalWord:
   864                              <1> ;Works on MAX A dword in eax
   865                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   866 00003D4D 31C9                <1>     xor ecx, ecx
   867 00003D4F 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   868 00003D51 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   869                              <1> .dpfb0:
   870 00003D56 FFC5                <1>     inc ebp
   871 00003D58 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   872 00003D5C 31D2                <1>     xor edx, edx
   873 00003D5E 48F7F3              <1>     div rbx
   874 00003D61 80C230              <1>     add dl, '0'
   875 00003D64 80FA39              <1>     cmp dl, '9'
   876 00003D67 7603                <1>     jbe .dpfb1
   877 00003D69 80C207              <1>     add dl, 'A'-'0'-10
   878                              <1> .dpfb1:
   879 00003D6C 88D1                <1>     mov cl, dl    ;Save remainder byte
   880 00003D6E 4885C0              <1>     test rax, rax
   881 00003D71 75E3                <1>     jnz .dpfb0
   882                              <1>     return
    13                              <2> %%_ret:
    14 00003D73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   883                              <1> getByte:
   884                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   885 00003D74 E807000000          <1>     call getNum
   886 00003D79 3D00010000          <1>     cmp eax, 100h
   887 00003D7E F5                  <1>     cmc
   888                              <1>     return
    13                              <2> %%_ret:
    14 00003D7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   889                              <1> getNum:
   890                              <1> ;Gets a number from a command line.
   891                              <1> ;Input: rsi -> String to get number from
   892                              <1> ;Output: rsi -> Char which terminated the accumulation
   893                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   894 00003D80 51                  <1>     push rcx
   895 00003D81 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   896                              <1> .lp:
   897 00003D83 AC                  <1>     lodsb
   898 00003D84 3C30                <1>     cmp al, "0"
   899 00003D86 7210                <1>     jb .exit
   900 00003D88 3C39                <1>     cmp al, "9"
   901 00003D8A 770C                <1>     ja .exit
   902 00003D8C 2C30                <1>     sub al, "0"                     ;Convert to binary 
   903 00003D8E 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   904 00003D92 D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   905 00003D94 01C1                <1>     add ecx, eax
   906 00003D96 EBEB                <1>     jmp short .lp   ;Get next digit
   907                              <1> .exit:
   908 00003D98 89C8                <1>     mov eax, ecx
   909 00003D9A 59                  <1>     pop rcx
   910 00003D9B 48FFCE              <1>     dec rsi
   911                              <1>     return
    13                              <2> %%_ret:
    14 00003D9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   912                              <1> 
   913                              <1> 
   914                              <1> freezePC:
   915 00003D9F 488D151DD1FFFF      <1>     lea rdx, memBad1
   916 00003DA6 B409                <1>     mov ah, 09h
   917 00003DA8 CD21                <1>     int 21h
   918                              <1> .altEP:
   919 00003DAA 488D153BD1FFFF      <1>     lea rdx, memBad3
   920 00003DB1 B409                <1>     mov ah, 09h
   921 00003DB3 CD21                <1>     int 21h
   922                              <1> .lp:
   923 00003DB5 F390                <1>     pause
   924 00003DB7 F4                  <1>     hlt
   925 00003DB8 EBFB                <1>     jmp short .lp
   926                              <1> 
   927                              <1> setDTA:
   928 00003DBA 50                  <1>     push rax
   929 00003DBB 52                  <1>     push rdx
   930 00003DBC 488D15A7C3FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   931 00003DC3 B8001A0000          <1>     mov eax, 1A00h
   932 00003DC8 CD21                <1>     int 21h
   933 00003DCA 5A                  <1>     pop rdx
   934 00003DCB 58                  <1>     pop rax
   935                              <1>     return
    13                              <2> %%_ret:
    14 00003DCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   936                              <1> 
   937                              <1> getDTA:
   938 00003DCD 488D1596C3FFFF      <1>     lea rdx, cmdFFBlock
   939                              <1>     return
    13                              <2> %%_ret:
    14 00003DD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   940                              <1> 
   941                              <1> resetIDTentries:
   942                              <1> ;Resets the IDT entries
   943 00003DD5 488D1591010000      <1>     lea rdx, critErrorHandler
   944 00003DDC 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
   945 00003DE0 B824250000          <1>     mov eax, 2524h
   946 00003DE5 CD21                <1>     int 21h
   947 00003DE7 488D15F6020000      <1>     lea rdx, int23h
   948 00003DEE 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
   949 00003DF2 B823250000          <1>     mov eax, 2523h
   950 00003DF7 CD21                <1>     int 21h
   951 00003DF9 488D15FFD6FFFF      <1>     lea rdx, appRet
   952 00003E00 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
   953 00003E04 B822250000          <1>     mov eax, 2522h
   954 00003E09 CD21                <1>     int 21h
   955                              <1>     return
    13                              <2> %%_ret:
    14 00003E0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   956                              <1> 
   957                              <1> ;-------------------------------
   958                              <1> ; Environment utility functions
   959                              <1> ;-------------------------------
   960                              <1> 
   961                              <1> cmpEnvVar:
   962                              <1> ;Checks that we have found the environment variable we are looking for.
   963                              <1> ;Input: rsi -> Environment var to verify the name of
   964                              <1> ;       rdi -> Environment var name to compare against
   965                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   966 00003E0C 56                  <1>     push rsi
   967 00003E0D 57                  <1>     push rdi
   968 00003E0E 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   969                              <1> .lp:
   970 00003E11 AC                  <1>     lodsb               ;Pick up from user string
   971 00003E12 E806FDFFFF          <1>     call ucChar         ;Upper case it!
   972 00003E17 3807                <1>     cmp byte [rdi], al  
   973 00003E19 7509                <1>     jne .exit
   974 00003E1B 3C3D                <1>     cmp al, "="         ;Are we at the end?
   975 00003E1D 7405                <1>     je .exit
   976 00003E1F 48FFC7              <1>     inc rdi
   977 00003E22 EBED                <1>     jmp short .lp
   978                              <1> .exit:
   979 00003E24 5F                  <1>     pop rdi
   980 00003E25 5E                  <1>     pop rsi
   981                              <1>     return
    13                              <2> %%_ret:
    14 00003E26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> 
   983                              <1> checkEnvGoodAndGet:
   984                              <1> ;Gets the env ptr and checks that it is double null terminated.
   985                              <1> ;Output:
   986                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   987                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   988                              <1> ;           rsi -> Environment pointer
   989 00003E27 50                  <1>     push rax
   990 00003E28 51                  <1>     push rcx
   991 00003E29 57                  <1>     push rdi
   992 00003E2A 4150                <1>     push r8
   993 00003E2C 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   994 00003E30 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   995 00003E33 741A                <1>     jz .badExit
   996 00003E35 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   997 00003E38 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   998                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   999 00003E3B 31C0                <1>     xor eax, eax
  1000                              <1> .pathNulScan:
  1001 00003E3D F2AE                <1>     repne scasb
  1002 00003E3F 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1003 00003E41 740C                <1>     jz .badExit
  1004 00003E43 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1005 00003E45 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1006 00003E47 31C0                <1>     xor eax, eax
  1007 00003E49 FFC0                <1>     inc eax ;Clear the ZF
  1008 00003E4B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1009                              <1> .badExit:
  1010 00003E4F 4158                <1>     pop r8
  1011 00003E51 5F                  <1>     pop rdi
  1012 00003E52 59                  <1>     pop rcx
  1013 00003E53 58                  <1>     pop rax
  1014                              <1>     return
    13                              <2> %%_ret:
    14 00003E54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1015                              <1> 
  1016                              <1> 
  1017                              <1> findEnvSpace:
  1018                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1019                              <1> ; free space in the pointer and a count of free space in the environment.
  1020                              <1> ;If count is zero, pointer is not to be used.
  1021                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1022 00003E55 31C9                <1>     xor ecx, ecx
  1023 00003E57 31C0                <1>     xor eax, eax    ;Clear eax too
  1024 00003E59 51                  <1>     push rcx
  1025 00003E5A E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1026 00003E5F 59                  <1>     pop rcx
  1027                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003E60 74(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1028 00003E62 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1029 00003E66 FFC9                <1>     dec ecx ;Make into a large counter
  1030 00003E68 4889F7              <1>     mov rdi, rsi    
  1031                              <1> .endsearch:
  1032 00003E6B F2AE                <1>     repne scasb ;Scan
  1033 00003E6D 803F00              <1>     cmp byte [rdi], 0
  1034 00003E70 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1035                              <1>     ;Here we are at the end of the environment
  1036 00003E72 F7D9                <1>     neg ecx
  1037 00003E74 FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1038 00003E76 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1039 00003E79 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1040 00003E7C 29C8                <1>     sub eax, ecx
  1041 00003E7E 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1042                              <1>     return
    13                              <2> %%_ret:
    14 00003E80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1043                              <1> 
  1044                              <1> searchForEnvVar:
  1045                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1046                              <1> ;Input: rdi -> Var name to look for.
  1047                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1048 00003E81 57                  <1>     push rdi
  1049 00003E82 51                  <1>     push rcx
  1050 00003E83 52                  <1>     push rdx
  1051 00003E84 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1052 00003E88 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1053                              <1> .varLp:
  1054 00003E8B 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1055 00003E8E E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1056 00003E93 7416                <1>     je .varFound
  1057 00003E95 31C0                <1>     xor eax, eax        ;Search for a null
  1058 00003E97 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1059 00003E9A B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1060 00003E9F F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1061 00003EA1 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1062 00003EA3 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1063 00003EA5 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1064 00003EA8 EBE1                <1>     jmp short .varLp    ;And scan again!
  1065                              <1> .varNotFound:
  1066 00003EAA F9                  <1>     stc
  1067                              <1> .varFound:
  1068 00003EAB 59                  <1>     pop rcx
  1069 00003EAC 5A                  <1>     pop rdx
  1070 00003EAD 5F                  <1>     pop rdi
  1071                              <1>     return
    13                              <2> %%_ret:
    14 00003EAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1072                              <1> 
  1073                              <1> envFree:
  1074                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1075                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1076                              <1> ; free byte of the environment!
  1077                              <1> ;Input: rsi -> Variable to free.
  1078                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1079                              <1> ;        ecx = Number of free bytes in env
  1080 00003EAF 4889F7              <1>     mov rdi, rsi
  1081 00003EB2 31C0                <1>     xor eax, eax
  1082                              <1> .freeLp:
  1083 00003EB4 803F00              <1>     cmp byte [rdi], 0
  1084 00003EB7 7403                <1>     je .exitLp
  1085 00003EB9 AA                  <1>     stosb
  1086 00003EBA EBF8                <1>     jmp short .freeLp
  1087                              <1> .exitLp:
  1088                              <1> ;rdi points to the terminating null of the var we just deleted
  1089                              <1> ;rsi points to the start of the free space
  1090 00003EBC 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1091 00003EBF 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1092 00003EC4 7504                <1>     jne .prepPullup
  1093 00003EC6 31C0                <1>     xor eax, eax
  1094 00003EC8 EB0E                <1>     jmp short .cleanEnv
  1095                              <1> .prepPullup:
  1096 00003ECA 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1097                              <1> .pullUp:
  1098 00003ECD AC                  <1>     lodsb
  1099 00003ECE AA                  <1>     stosb
  1100 00003ECF 84C0                <1>     test al, al ;Did we pick up a zero
  1101 00003ED1 75FA                <1>     jne .pullUp ;If not, keep copying
  1102 00003ED3 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1103 00003ED6 75F5                <1>     jne .pullUp
  1104                              <1> ;We are at the end of the copy!
  1105                              <1> .cleanEnv:
  1106 00003ED8 AA                  <1>     stosb   ;Store the famous second null
  1107 00003ED9 48FFCF              <1>     dec rdi ;without incrementing it!!
  1108 00003EDC E807000000          <1>     call getFreeSpace
  1109 00003EE1 31C0                <1>     xor eax, eax
  1110 00003EE3 51                  <1>     push rcx
  1111 00003EE4 F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1112 00003EE6 59                  <1>     pop rcx
  1113                              <1>     return
    13                              <2> %%_ret:
    14 00003EE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> getFreeSpace:
  1116                              <1> ;Output: ecx = Number of free bytes in the environment block
  1117 00003EE8 56                  <1>     push rsi
  1118 00003EE9 57                  <1>     push rdi
  1119 00003EEA E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1120 00003EEF 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1121 00003EF3 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1122 00003EF6 E805000000          <1>     call getEnvSize ;Get total block size
  1123 00003EFB 29F9                <1>     sub ecx, edi    ;Get difference!
  1124 00003EFD 5F                  <1>     pop rdi
  1125 00003EFE 5E                  <1>     pop rsi
  1126                              <1>     return
    13                              <2> %%_ret:
    14 00003EFF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1127                              <1> 
  1128                              <1> getEnvSize:
  1129                              <1> ;Gets the number of bytes in the environment allocation
  1130                              <1> ;Output: ecx = Number of bytes in the environment!
  1131 00003F00 53                  <1>     push rbx
  1132 00003F01 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1133 00003F05 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1134 00003F08 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1135 00003F0B 5B                  <1>     pop rbx
  1136                              <1>     return
    13                              <2> %%_ret:
    14 00003F0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1137                              <1> 
  1138                              <1> getPtrToEndOfEnv:
  1139                              <1> ;Gets ptr to end of the environment
  1140                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1141 00003F0D 50                  <1>     push rax
  1142 00003F0E 51                  <1>     push rcx
  1143 00003F0F 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1144 00003F13 31C0                <1>     xor eax, eax
  1145 00003F15 31C9                <1>     xor ecx, ecx
  1146 00003F17 FFC9                <1>     dec ecx
  1147                              <1> .lp:
  1148 00003F19 F2AE                <1>     repne scasb
  1149 00003F1B 3807                <1>     cmp byte [rdi], al
  1150 00003F1D 75FA                <1>     jne .lp
  1151 00003F1F 59                  <1>     pop rcx
  1152 00003F20 58                  <1>     pop rax
  1153                              <1>     return
    13                              <2> %%_ret:
    14 00003F21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1154                              <1> 
  1155                              <1> growEnvBlock:
  1156                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1157                              <1> ; newly allocated 160 byte block of the environment.
  1158                              <1> ;Returns:   CF=NC - Environment grown ok!
  1159                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1160                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1161 00003F22 50                  <1>     push rax
  1162 00003F23 53                  <1>     push rbx
  1163 00003F24 51                  <1>     push rcx
  1164 00003F25 56                  <1>     push rsi
  1165 00003F26 57                  <1>     push rdi
  1166 00003F27 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1167 00003F2C E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1168 00003F31 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1169 00003F35 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1170 00003F38 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1171 00003F3E 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1172 00003F44 7321                <1>     jae .tooLarge
  1173                              <1>     ;Here ZF must be NZ.
  1174 00003F46 4150                <1>     push r8
  1175 00003F48 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1176 00003F4C B8004A0000          <1>     mov eax, 4A00h
  1177 00003F51 CD21                <1>     int 21h
  1178 00003F53 4158                <1>     pop r8
  1179 00003F55 720A                <1>     jc .exit
  1180                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1181                              <1>     ; so we add 160 zeros to the count of bytes
  1182 00003F57 81C1A0000000        <1>     add ecx, 0A0h
  1183 00003F5D 31C0                <1>     xor eax, eax
  1184 00003F5F F3AA                <1>     rep stosb
  1185                              <1> .exit:
  1186 00003F61 5F                  <1>     pop rdi
  1187 00003F62 5E                  <1>     pop rsi
  1188 00003F63 59                  <1>     pop rcx
  1189 00003F64 5B                  <1>     pop rbx
  1190 00003F65 58                  <1>     pop rax
  1191                              <1>     return
    13                              <2> %%_ret:
    14 00003F66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1192                              <1> .tooLarge:
  1193 00003F67 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1194 00003F6A F9                  <1>     stc             ;Set CF
  1195 00003F6B EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003F6D 53                  <1>     push rbx
    25 00003F6E 51                  <1>     push rcx
    26 00003F6F 52                  <1>     push rdx
    27 00003F70 57                  <1>     push rdi
    28 00003F71 56                  <1>     push rsi
    29 00003F72 E8A0010000          <1>     call errSwapHdls
    30 00003F77 FC                  <1>     cld         ;Make String ops go forward
    31 00003F78 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003F7B 488D15E4C9FFFF      <1>     lea rdx, crlf
    33 00003F82 E878F9FFFF          <1>     call printString
    34                              <1> 
    35 00003F87 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003F8D B90C000000          <1>     mov ecx, 0Ch
    37 00003F92 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003F94 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003F97 480FB7FF            <1>     movzx rdi, di
    40 00003F9B 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003F9E 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003FA2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003FA5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003FA8 488D15B5CFFFFF      <1>     lea rdx, errorMsgTable
    45 00003FAF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003FB3 E847F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003FB8 488D1596D0FFFF      <1>     lea rdx, readMsg
    49 00003FBF 488D3D9ED0FFFF      <1>     lea rdi, writeMsg
    50 00003FC6 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003FC9 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003FCD E82DF9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003FD2 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003FD5 0F85EF000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003FDB 488D156CD0FFFF      <1>     lea rdx, drvMsg ;Drive message
    58 00003FE2 E818F9FFFF          <1>     call printString
    59 00003FE7 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003FE9 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003FEC B402                <1>     mov ah, 02h ;Print char in dl
    62 00003FEE CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003FF0 E803F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003FF5 488D1577D0FFFF      <1>     lea rdx, abortMsg
    70 00003FFC E8FEF8FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00004001 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00004004 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00004006 488D157ED0FFFF      <1>     lea rdx, betweenMsg
    75 0000400D E8EDF8FFFF          <1>     call printString
    76 00004012 488D1567D0FFFF      <1>     lea rdx, retryMsg
    77 00004019 E8E1F8FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 0000401E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00004021 7418                <1>     jz .userFail
    81 00004023 488D1561D0FFFF      <1>     lea rdx, betweenMsg
    82 0000402A E8D0F8FFFF          <1>     call printString
    83 0000402F 488D1543D0FFFF      <1>     lea rdx, ignoreMsg
    84 00004036 E8C4F8FFFF          <1>     call printString
    85                              <1> .userFail:
    86 0000403B F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 0000403E 7418                <1>     jz .userMsgEnd
    88 00004040 488D1544D0FFFF      <1>     lea rdx, betweenMsg
    89 00004047 E8B3F8FFFF          <1>     call printString
    90 0000404C 488D1533D0FFFF      <1>     lea rdx, failMsg
    91 00004053 E8A7F8FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00004058 488D152FD0FFFF      <1>     lea rdx, endMsg
    94 0000405F E89BF8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00004064 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00004066 488D3D24D0FFFF      <1>     lea rdi, i24Resp ;Go to start of string
    98 0000406D B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
    99 00004072 CD21                <1>     int 21h ;Get char in al
   100 00004074 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00004076 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00004078 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 0000407A AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 0000407B 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 0000407D FFC1                <1>     inc ecx
   107 0000407F 81F904000000        <1>     cmp ecx, 4
   108 00004085 75F3                <1>     jne .uip1
   109 00004087 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 0000408C E867F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00004091 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00004093 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00004095 7427                <1>     je .cehExit
   116 00004097 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00004099 740F                <1>     je .viIgnore
   118 0000409B 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 0000409D 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 0000409F F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 000040A2 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 000040A8 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 000040AA F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 000040AD 0F843DFFFFFF        <1>     jz .userInput
   127 000040B3 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 000040B5 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 000040B8 0F8432FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 000040BE E871000000          <1>     call errRetHdls
   133 000040C3 5E                  <1>     pop rsi
   134 000040C4 5F                  <1>     pop rdi
   135 000040C5 5A                  <1>     pop rdx
   136 000040C6 59                  <1>     pop rcx
   137 000040C7 5B                  <1>     pop rbx
   138 000040C8 48CF                <1>     iretq
   139                              <1> .charError:
   140 000040CA B908000000          <1>     mov ecx, 8  ;8 chars in device name
   141 000040CF 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   142                              <1> .ce1:
   143 000040D6 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   144 000040D7 88C2                <1>     mov dl, al  ;Move char into dl
   145 000040D9 B402                <1>     mov ah, 02h
   146 000040DB CD21                <1>     int 21h ;Print char
   147 000040DD E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   148 000040DF E90CFFFFFF          <1>     jmp .userInput
   149                              <1> 
   150                              <1> 
   151                              <1> int23h:
   152 000040E4 F60540BFFFFFFF      <1>     test byte [permaSwitch], -1
   153 000040EB 7516                <1>     jnz .noJug   ;If this is non-zero, just exit as normal
   154                              <1>     ;Else, we juggle parent PSP's
   155 000040ED 50                  <1>     push rax
   156 000040EE 53                  <1>     push rbx
   157 000040EF 488B0521BFFFFF      <1>     mov rax, qword [realParent]
   158 000040F6 488B1D12BFFFFF      <1>     mov rbx, qword [pspPtr]
   159 000040FD 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   160 00004101 5B                  <1>     pop rbx
   161 00004102 58                  <1>     pop rax
   162                              <1> .noJug:
   163 00004103 66813D93BFFFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
   164 0000410C 7405                <1>     je .exit
   165 0000410E E821000000          <1>     call errRetHdls 
   166                              <1> .exit:
   167 00004113 F9                  <1>     stc     ;Set CF to kill the task
   168 00004114 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
   169                              <1> 
   170                              <1> errSwapHdls:
   171                              <1> ;Swaps STDIO to STDERR
   172                              <1> ;Start by tmporarily moving the stderr handler into stdio
   173                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   174 00004117 50                  <1>     push rax
   175 00004118 53                  <1>     push rbx
   176 00004119 E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   177 0000411E 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   178 00004121 66890577BFFFFF      <1>     mov word [errHdls], ax      ;Save em
   179 00004128 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   180 0000412C 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   181 0000412E 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   182 00004131 5B                  <1>     pop rbx
   183 00004132 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00004133 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> 
   186                              <1> errRetHdls:
   187                              <1> ;Returns STDIO from STDERR.
   188 00004134 50                  <1>     push rax
   189 00004135 53                  <1>     push rbx
   190 00004136 E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   191 0000413B 0FB7055DBFFFFF      <1>     movzx eax, word [errHdls]
   192 00004142 66C70554BFFFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   193 0000414B 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   194 0000414E 5B                  <1>     pop rbx
   195 0000414F 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 00004150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getJftPtr:
   199                              <1> ;Preserves all registers except rbx.
   200                              <1> ;Output: rbx -> JFT of current task
   201 00004151 50                  <1>     push rax        ;Save rax
   202 00004152 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   203 00004157 CD21                <1>     int 21h
   204 00004159 58                  <1>     pop rax
   205 0000415A 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   206 00004160 7605                <1>     jbe .pspJftExit
   207 00004162 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   208                              <1>     return
    13                              <2> %%_ret:
    14 00004166 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> .pspJftExit:
   210 00004167 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   211                              <1>     return
    13                              <2> %%_ret:
    14 0000416B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15D7010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21 00000036 E8(D53D0000)        <1>     call resetIDTentries
    22                              <1> ;Get a pointer to DOS Sysvars
    23 0000003B B452                <1>     mov ah, 52h ;Get sysvars
    24 0000003D CD21                <1>     int 21h
    25 0000003F 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    26                              <1> ;Call for simple internationalisation data
    27 00000046 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    28 0000004B CD21                <1>     int 21h
    29 0000004D 3CFF                <1>     cmp al, -1
    30 0000004F 7412                <1>     je .skipSwitch
    31 00000051 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    32 00000057 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    33 0000005A 7507                <1>     jne .skipSwitch
    34 0000005C C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    35                              <1> .skipSwitch:
    36 00000063 B800380000          <1>     mov eax, 3800h  ;Get current country data
    37 00000068 488D15(34000000)    <1>     lea rdx, ctryData
    38 0000006F CD21                <1>     int 21h ;Write the data to the internal country table
    39                              <1> ;Now determine if this is the master copy of COMMAND.COM
    40                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    41 00000071 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    42 00000076 CD21                <1>     int 21h
    43 00000078 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    44 0000007B B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    45 00000080 CD21                <1>     int 21h
    46 00000082 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    47 00000085 7574                <1>     jne .skipMaster
    48                              <1> ;Ok so we are master command.com
    49                              <1> ;Now make myself the real parent
    50 00000087 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    51 0000008E 4C8905(17000000)    <1>     mov qword [realParent], r8
    52                              <1> ;Set current Drive in COMSPEC
    53 00000095 B800190000          <1>     mov eax, 1900h ;Get current Drive
    54 0000009A CD21                <1>     int 21h
    55 0000009C 0441                <1>     add al, "A"
    56 0000009E 8805(9D100000)      <1>     mov byte [comspecEvar.cspec], al
    57                              <1> ;Set Int 2Eh up
    58 000000A4 488D15(791A0000)    <1>     lea rdx, int2Eh
    59 000000AB B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    60 000000B0 CD21                <1>     int 21h
    61                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    62                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    63 000000B2 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    64 000000B7 B800480000          <1>     mov eax, 4800h
    65 000000BC CD21                <1>     int 21h
    66 000000BE 0F824FFFFFFF        <1>     jc .exitBad
    67                              <1> ;Set master environment as mine
    68 000000C4 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    69 000000C8 488D35(95100000)    <1>     lea rsi, masterEnv
    70 000000CF 4889C7              <1>     mov rdi, rax
    71 000000D2 B91E000000          <1>     mov ecx, menv_len
    72 000000D7 F3A4                <1>     rep movsb   ;Copy the chars over!
    73                              <1> 
    74 000000D9 488D15(66090000)    <1>     lea rdx, crlf
    75 000000E0 B409                <1>     mov ah, 09h
    76 000000E2 CD21                <1>     int 21h
    77 000000E4 E8(C3250000)        <1>     call time
    78 000000E9 E8(15240000)        <1>     call date
    79 000000EE 488D15(66090000)    <1>     lea rdx, crlf
    80 000000F5 B409                <1>     mov ah, 09h
    81 000000F7 CD21                <1>     int 21h
    82 000000F9 EB2E                <1>     jmp short .printInit
    83                              <1> .skipMaster:    
    84                              <1> ;We now search for the master environment!!
    85                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    86                              <1>     ; parent. This is the previous master command interpreter! This means
    87                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
    88                              <1>     ; then set our environment ptr in the PSP to the master environment.
    89 000000FB 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    90 00000102 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    91 0000010A 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
    92 00000111 F2AE                <1>     repne scasb
    93 00000113 67E313              <1>     jecxz .printInit
    94 00000116 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    95 00000119 E8(1D3B0000)        <1>     call ucChar
    96 0000011E 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    97 00000120 7507                <1>     jne .printInit
    98 00000122 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    99                              <1> .printInit:
   100 00000129 488D1D(6C410000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   101                              <1> ;Finish by printing INIT string.
   102 00000130 53                  <1>     push rbx
   103 00000131 488D153A000000      <1>     lea rdx, initString
   104 00000138 B409                <1>     mov ah, 09h
   105 0000013A CD21                <1>     int 21h ;Print init string
   106 0000013C E8(012F0000)        <1>     call version.printVersionNumber
   107 00000141 488D1560000000      <1>     lea rdx, initString2
   108 00000148 B409                <1>     mov ah, 09h
   109 0000014A CD21                <1>     int 21h ;Print init string
   110 0000014C 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 0000014D 4881C340060000      <1>     add rbx, stackSize
   113 00000154 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 0000015B 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 0000015F 48C1E304            <1>     shl rbx, 4
   116 00000163 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 00000166 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 0000016D E9(B3100000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000172 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 0000017B 66696320436F6D7075- <1>
   121 00000184 746572205265736561- <1>
   121 0000018D 726368285229205343- <1>
   121 00000196 502F444F5328522920- <1>
   121 0000019F 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001A8 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001B1 202020284329436F70- <1>
   123 000001BA 797269676874205363- <1>
   123 000001C3 69656E746966696320- <1>
   123 000001CC 436F6D707574657220- <1>
   123 000001D5 526573656172636820- <1>
   123 000001DE 323032342E0D0A24    <1>
   124 000001E6 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 000001EF 20444F532076657273- <1>
   124 000001F8 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+5+2 passes

