     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29                              <1> ;Next two bytes, if set to -1, flags error
    30 000000B4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000B8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000BE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000BF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C0 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000C9 00000000000000      <1>
    50 000000D0 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000D9 000000000000000000- <1>
    50 000000E2 000000000000000000- <1>
    50 000000EB 000000000000000000- <1>
    50 000000F4 00000000000000      <1>
    51                              <1> 
    52 000000FB 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000104 000000000000000000- <1>
    52 0000010D 000000000000000000- <1>
    52 00000116 0000000000          <1>
    53 0000011B 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000124 000000000000000000- <1>
    53 0000012D 000000000000000000- <1>
    53 00000136 000000000000000000- <1>
    53 0000013F 000000000000000000- <1>
    53 00000148 000000000000000000- <1>
    53 00000151 000000000000000000- <1>
    53 0000015A 000000000000000000- <1>
    53 00000163 000000000000000000- <1>
    53 0000016C 000000000000000000- <1>
    53 00000175 000000000000000000- <1>
    53 0000017E 000000000000000000- <1>
    53 00000187 000000000000000000- <1>
    53 00000190 000000000000000000- <1>
    53 00000199 00000000            <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 00000000            <1>
    56 0000021F 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000228 000000000000000000- <1>
    56 00000231 000000000000000000- <1>
    56 0000023A 000000000000000000- <1>
    56 00000243 000000000000000000- <1>
    56 0000024C 000000000000000000- <1>
    56 00000255 000000000000000000- <1>
    56 0000025E 000000000000000000- <1>
    56 00000267 000000000000000000- <1>
    56 00000270 000000000000000000- <1>
    56 00000279 000000000000000000- <1>
    56 00000282 000000000000000000- <1>
    56 0000028B 000000000000000000- <1>
    56 00000294 000000000000000000- <1>
    56 0000029D 00000000            <1>
    57 000002A1 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002AA 000000000000000000- <1>
    57 000002B3 000000000000000000- <1>
    57 000002BC 000000000000000000- <1>
    57 000002C5 000000000000000000- <1>
    57 000002CE 000000000000000000- <1>
    57 000002D7 000000000000000000- <1>
    57 000002E0 000000000000000000- <1>
    57 000002E9 00000000000000      <1>
    58                              <1> 
    59 000002F0 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F9 0000                <1>
    60 000002FB 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000304 00000000            <1>
    61 00000308 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 00000311 0000000000          <1>
    62                              <1> 
    63 00000316 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031F 000000000000000000- <1>
    63 00000328 000000000000000000- <1>
    63 00000331 000000000000000000- <1>
    63 0000033A 000000000000000000- <1>
    63 00000343 000000000000000000- <1>
    63 0000034C 000000000000000000- <1>
    63 00000355 000000000000000000- <1>
    63 0000035E 00000000000000      <1>
    64 00000365 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036E 000000000000000000- <1>
    64 00000377 000000000000000000- <1>
    64 00000380 000000000000000000- <1>
    64 00000389 000000000000000000- <1>
    64 00000392 000000000000000000- <1>
    64 0000039B 000000000000000000- <1>
    64 000003A4 000000000000000000- <1>
    64 000003AD 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B4 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003BD 000000000000000000- <1>
    67 000003C6 000000000000000000- <1>
    67 000003CF 000000000000000000- <1>
    67 000003D8 000000000000000000- <1>
    67 000003E1 000000000000000000- <1>
    67 000003EA 000000000000000000- <1>
    67 000003F3 000000000000000000- <1>
    67 000003FC 00000000000000      <1>
    68 00000403 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000040C 000000000000000000- <1>
    68 00000415 000000000000000000- <1>
    68 0000041E 000000000000000000- <1>
    68 00000427 000000000000000000- <1>
    68 00000430 000000000000000000- <1>
    68 00000439 000000000000000000- <1>
    68 00000442 000000000000000000- <1>
    68 0000044B 00000000000000      <1>
    69                              <1> 
    70 00000452 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 0000045A 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 00000462 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 0000046B 000000000000000000- <1>
    73 00000474 000000000000000000- <1>
    73 0000047D 000000000000000000- <1>
    73 00000486 000000000000000000- <1>
    73 0000048F 000000000000000000- <1>
    73 00000498 000000000000000000- <1>
    73 000004A1 000000000000000000- <1>
    73 000004AA 000000000000000000- <1>
    73 000004B3 000000000000000000- <1>
    73 000004BC 000000000000000000- <1>
    73 000004C5 000000000000000000- <1>
    73 000004CE 000000000000000000- <1>
    73 000004D7 000000000000000000- <1>
    73 000004E0 00000000            <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004E4 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81                              <1> ;                                   Bit[2] set => A file/path specified
    82 000004E5 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    83 000004E6 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    84 000004E7 00                  <1> dirDrv      db 0    ;0 based drive number to use
    85 000004E8 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    85 000004F1 000000000000000000- <1>
    85 000004FA 000000000000000000- <1>
    85 00000503 000000000000000000- <1>
    85 0000050C 000000000000000000- <1>
    85 00000515 000000000000000000- <1>
    85 0000051E 000000000000000000- <1>
    85 00000527 000000000000000000- <1>
    85 00000530 000000000000000000- <1>
    85 00000539 000000000000000000- <1>
    85 00000542 000000000000000000- <1>
    85 0000054B 000000000000000000- <1>
    85 00000554 000000000000000000- <1>
    85 0000055D 000000000000000000- <1>
    85 00000566 00000000            <1>
    86 0000056A 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    86 00000573 3F3F3F3F3F3F3F      <1>
    87                              <1> dirWideType equ 1
    88                              <1> dirPageType equ 2
    89                              <1> dirFileType equ 4
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 0000057A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 0000057B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 00000581 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 00000582 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 0000058A 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 0000058D 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000591 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 000005A6 00                  <1> td1 db 0    ;Minutes/Year
   103 000005A7 00                  <1> td2 db 0    ;Hours/Zero
   104 000005A8 00                  <1> td3 db 0    ;Hundredths/Day
   105 000005A9 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy/Delete Buffers
   108                              <1> delPath:
   109 000005AA 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   109 000005B3 000000000000000000- <1>
   109 000005BC 000000000000000000- <1>
   109 000005C5 000000000000000000- <1>
   109 000005CE 000000000000000000- <1>
   109 000005D7 000000000000000000- <1>
   109 000005E0 000000000000000000- <1>
   109 000005E9 000000000000000000- <1>
   109 000005F2 000000000000000000- <1>
   109 000005FB 000000000000000000- <1>
   109 00000604 000000000000000000- <1>
   109 0000060D 000000000000000000- <1>
   109 00000616 000000000000000000- <1>
   109 0000061F 000000000000000000- <1>
   109 00000628 00000000            <1>
   110 0000062C 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   110 00000635 000000000000000000- <1>
   110 0000063E 000000000000000000- <1>
   110 00000647 000000000000000000- <1>
   110 00000650 000000000000000000- <1>
   110 00000659 000000000000000000- <1>
   110 00000662 000000000000000000- <1>
   110 0000066B 000000000000000000- <1>
   110 00000674 000000000000000000- <1>
   110 0000067D 000000000000000000- <1>
   110 00000686 000000000000000000- <1>
   110 0000068F 000000000000000000- <1>
   110 00000698 000000000000000000- <1>
   110 000006A1 000000000000000000- <1>
   110 000006AA 00000000            <1>
   111 000006AE 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   112 000006B6 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   113 000006BE 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   113 000006C7 2020                <1>
   114                              <1> ;Copy Handles
   115 000006C9 FFFF                <1> sourceHdl   dw -1
   116 000006CB FFFF                <1> destHdl     dw -1
   117 000006CD 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   118                              <1> 
   119 000006CF 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   119 000006D8 000000000000000000- <1>
   119 000006E1 000000000000000000- <1>
   119 000006EA 000000000000000000- <1>
   119 000006F3 000000000000000000- <1>
   119 000006FC 000000000000000000- <1>
   119 00000705 000000000000000000- <1>
   119 0000070E 000000000000000000- <1>
   119 00000717 000000000000000000- <1>
   119 00000720 000000000000000000- <1>
   119 00000729 000000000000000000- <1>
   119 00000732 000000000000000000- <1>
   119 0000073B 000000000000000000- <1>
   119 00000744 000000000000000000- <1>
   119 0000074D 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000074F 03444952            <1>     db 3, "DIR"
     8 00000753 3517                <1>     dw dir - startLbl
     9                              <1> 
    10 00000755 024344              <1>     db 2, "CD"
    11 00000758 0A1C                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000075A 054348444952        <1>     db 5, "CHDIR"
    14 00000760 0A1C                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000762 024D44              <1>     db 2, "MD"
    17 00000765 851C                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000767 054D4B444952        <1>     db 5, "MKDIR"
    20 0000076D 851C                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000076F 025244              <1>     db 2, "RD"
    23 00000772 D11C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000774 05524D444952        <1>     db 5, "RMDIR"
    26 0000077A D11C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000077C 0344454C            <1>     db 3, "DEL"
    29 00000780 BF1E                <1>     dw erase - startLbl
    30                              <1> 
    31 00000782 054552415345        <1>     db 5, "ERASE"
    32 00000788 BF1E                <1>     dw erase - startLbl
    33                              <1> 
    34 0000078A 0444415445          <1>     db 4, "DATE"
    35 0000078F FD1F                <1>     dw date - startLbl
    36                              <1> 
    37 00000791 0454494D45          <1>     db 4, "TIME"
    38 00000796 C620                <1>     dw time - startLbl
    39                              <1> 
    40 00000798 04434F5059          <1>     db 4, "COPY"
    41 0000079D 1D1D                <1>     dw copy - startLbl
    42                              <1> 
    43 0000079F 0443545459          <1>     db 4, "CTTY"
    44 000007A4 6121                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007A6 03434C53            <1>     db 3, "CLS"
    47 000007AA FC21                <1>     dw cls - startLbl
    48                              <1> 
    49 000007AC 05425245414B        <1>     db 5, "BREAK"
    50 000007B2 6E22                <1>     dw break - startLbl
    51                              <1> 
    52 000007B4 06564552494659      <1>     db 6, "VERIFY"
    53 000007BB EF22                <1>     dw verify - startLbl
    54                              <1> 
    55 000007BD 0652454E414D45      <1>     db 6, "RENAME"
    56 000007C4 6C23                <1>     dw rename - startLbl
    57                              <1> 
    58 000007C6 0352454E            <1>     db 3, "REN"
    59 000007CA 6C23                <1>     dw rename - startLbl
    60                              <1>     
    61 000007CC 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000007D5 7027                <1>     dw truename - startLbl
    63                              <1> 
    64 000007D7 03564552            <1>     db 3, "VER"
    65 000007DB 5629                <1>     dw version - startLbl
    66                              <1> 
    67 000007DD 03564F4C            <1>     db 3, "VOL"
    68 000007E1 9728                <1>     dw volume - startLbl
    69                              <1> 
    70 000007E3 034D454D            <1>     db 3, "MEM"
    71 000007E7 9A29                <1>     dw memory - startLbl
    72                              <1> 
    73 000007E9 0445584954          <1>     db 4, "EXIT"
    74 000007EE 832B                <1>     dw exit - startLbl
    75                              <1> 
    76 000007F0 0454595045          <1>     db 4, "TYPE"
    77 000007F5 E42A                <1>     dw type - startLbl
    78                              <1> 
    79 000007F7 054C4142454C        <1>     db 5, "LABEL"
    80 000007FD C127                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 000007FF 054D4B4C424C        <1>     db 5, "MKLBL"
    84 00000805 EB27                <1>     dw mklbl - startLbl
    85                              <1> 
    86 00000807 05524D4C424C        <1>     db 5, "RMLBL"
    87 0000080D 2628                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 0000080F 05524E4C424C        <1>     db 5, "RNLBL"
    90 00000815 6128                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 00000817 05544F554348        <1>     db 5, "TOUCH"
    93 0000081D 6325                <1>     dw touch - startLbl
    94                              <1> 
    95 0000081F 044A4F494E          <1>     db 4, "JOIN"
    96 00000824 C625                <1>     dw join - startLbl
    97                              <1> 
    98 00000826 055355425354        <1>     db 5, "SUBST"
    99 0000082C 8926                <1>     dw subst - startLbl
   100                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   101 0000082E FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000082F 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000832 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000837 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000840 696C65206D69737369- <1>
     4 00000849 6E670D0A24          <1>
     5 0000084E 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000857 6469736B2077697468- <1>
     5 00000860 206261746368206669- <1>
     5 00000869 6C65                <1>
     6 0000086B 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000874 737320616E79206B65- <1>
     6 0000087D 79207768656E207265- <1>
     6 00000886 6164790D0A24        <1>
     7 0000088C 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000895 6E64206F722066696C- <1>
     7 0000089E 65206E616D650D0A24  <1>
     8 000008A7 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000008B0 2066696C65206E616D- <1>
     8 000008B9 65206F7220          <1>
     9 000008BE 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008C7 666F756E640D0A24    <1>
    10 000008CF 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008D8 656E74206469736B20- <1>
    10 000008E1 73706163650D0A24    <1>
    11 000008E9 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 000008F2 7669726F6E6D656E74- <1>
    11 000008FB 2073706163650D0A24  <1>
    12 00000904 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000090D 74696F6E206572726F- <1>
    12 00000916 720D0A24            <1>
    13 0000091A 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000923 6F7420626520636F70- <1>
    13 0000092C 696564206F6E746F20- <1>
    13 00000935 697473656C660D0A24  <1>
    14 0000093E 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000947 662064657374696E61- <1>
    14 00000950 74696F6E206C6F7374- <1>
    14 00000959 206265666F72652063- <1>
    14 00000962 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000968 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000971 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 0000097A 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000983 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000984 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000098D 65650D0A24          <1>
    21 00000992 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 0000099B 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009A4 726976652073706563- <1>
    23 000009AD 696669636174696F6E- <1>
    23 000009B6 0D0A24              <1>
    24 000009B9 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009C2 6B6579207768656E20- <1>
    24 000009CB 7265616479202E202E- <1>
    24 000009D4 202E2024            <1>
    25 000009D8 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009E1 6172616D657465720D- <1>
    25 000009EA 0A24                <1>
    26                              <1> 
    27 000009EC 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 000009F5 576564546875467269- <1>
    27 000009FE 536174              <1>
    28 00000A01 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A0A 206461746524        <1>
    29 00000A10 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A19 6174652069732024    <1>
    30 00000A21 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A2A 657720646174652024  <1>
    31 00000A33 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A3C 293A2024            <1>
    32 00000A40 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A49 293A2024            <1>
    33 00000A4D 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A56 293A2024            <1>
    34 00000A5A 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A63 2074696D6524        <1>
    35 00000A69 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A72 696D652069732024    <1>
    36 00000A7A 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A83 65772074696D653A20- <1>
    36 00000A8C 24                  <1>
    37                              <1> 
    38 00000A8D 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A96 7572652028592F4E29- <1>
    38 00000A9F 3F2024              <1>
    39                              <1> 
    40 00000AA2 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000AAB 56657273696F6E2024  <1>
    41                              <1> 
    42 00000AB4 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000ABD 6E2064726976652024  <1>
    43 00000AC6 2069732024          <1> volOk   db " is $"
    44 00000ACB 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000AD4 6162656C24          <1>
    45                              <1> 
    46 00000AD9 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000AE2 69726563746F72790D- <1>
    46 00000AEB 0A24                <1>
    47 00000AED 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000AF6 206372656174652064- <1>
    47 00000AFF 69726563746F72790D- <1>
    47 00000B08 0A24                <1>
    48 00000B0A 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B13 6174682C206E6F7420- <1>
    48 00000B1C 6469726563746F7279- <1>
    48 00000B25 2C0D0A              <1>
    49 00000B28 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B31 6F7279206E6F742065- <1>
    49 00000B3A 6D7074790D0A24      <1>
    50 00000B41 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B4A 79206F66202024      <1>
    51 00000B51 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B5A 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000B63 6E6965640D0A24      <1>
    53 00000B6A 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000B73 72697665206973206E- <1>
    53 00000B7C 6F206C6F6E67657220- <1>
    53 00000B85 76616C696424        <1>
    54 00000B8B 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000B94 7269766520696E2073- <1>
    54 00000B9D 656172636820706174- <1>
    54 00000BA6 680D0A24            <1>
    55 00000BAA 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000BB3 65766963650D0A24    <1>
    56 00000BBB 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000BC4 20666F756E640D0A24  <1>
    57 00000BCD 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000BD6 726F720D0A24        <1>
    58 00000BDC 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000BE5 6F74206265206E6573- <1>
    58 00000BEE 7465640D0A24        <1>
    59 00000BF4 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000BFD 6174652066696C6520- <1>
    59 00000C06 6572726F7220647572- <1>
    59 00000C0F 696E6720706970650D- <1>
    59 00000C18 0A24                <1>
    60 00000C1A 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000C23 2062696E6172792072- <1>
    60 00000C2C 656164732066726F6D- <1>
    60 00000C35 206120646576696365- <1>
    60 00000C3E 0D0A24              <1>
    61 00000C41 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000C47 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000C4C 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000C55 24                  <1>
    64 00000C56 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000C5F 2024                <1>
    65 00000C61 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000C6A 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000C73 617468206F72206669- <1>
    66 00000C7C 6C65206E616D650D0A- <1>
    66 00000C85 24                  <1>
    67 00000C86 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000C8F 756D626572206F6620- <1>
    67 00000C98 706172616D65746572- <1>
    67 00000CA1 730D0A24            <1>
    68 00000CA5 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000CAE 74696E6720746F2064- <1>
    68 00000CB7 6576696365          <1>
    69 00000CBC 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000CC0 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000CC9 20202020202020546F- <1>
    71 00000CD2 74616C207379737465- <1>
    71 00000CDB 6D206D656D6F72793A- <1>
    71 00000CE4 2024                <1>
    72 00000CE6 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000CEF 20202020202020204D- <1>
    72 00000CF8 656D6F727920757365- <1>
    72 00000D01 6420627920444F533A- <1>
    72 00000D0A 2024                <1>
    73 00000D0C 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000D15 656D6F727920757365- <1>
    73 00000D1E 64206279206170706C- <1>
    73 00000D27 69636174696F6E733A- <1>
    73 00000D30 2024                <1>
    74 00000D32 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000D3B 656D6F727920726573- <1>
    74 00000D44 657276656420627920- <1>
    74 00000D4D 68617264776172653A- <1>
    74 00000D56 2024                <1>
    75 00000D58 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000D61 202020202020202020- <1>
    75 00000D6A 2020202020204D656D- <1>
    75 00000D73 6F727920667265653A- <1>
    75 00000D7C 2024                <1>
    76 00000D7E 20627974657324      <1> memByte db " bytes$"
    77 00000D85 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000D8E 6F7420417373657274- <1>
    77 00000D97 61696E20444F532045- <1>
    77 00000DA0 6E74727920506F696E- <1>
    77 00000DA9 7424                <1>
    78 00000DAB 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000DB4 416C6C6F636174696F- <1>
    78 00000DBD 6E204572726F7224    <1>
    79 00000DC5 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000DCE 4572726F7224        <1>
    80 00000DD4 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000DDD 68616C74656424      <1>
    81                              <1> 
    82 00000DE4 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000DED 206372656174652070- <1>
    82 00000DF6 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000DFB 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000E04 6F6E206572726F720D- <1>
    84 00000E0D 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000E0E 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000E12 2020202024          <1> fourSpc  db "    $"
    89 00000E17 20202024            <1> threeSpc db "   $"
    90 00000E1B 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000E1E 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000E27 696679204F4E206F72- <1>
    92 00000E30 204F46460D0A24      <1>
    93 00000E37 504154483D          <1> pathEVar db "PATH="
    94 00000E3C 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95                              <1> 
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000E43 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E47 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E4A 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E4E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E51 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E53 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E56 CD21                <1>     int 21h
    11 00000E58 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E5A B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E5F CD21                <1>     int 21h
    15 00000E61 668905A5F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E68 488D156F240000      <1>     lea rdx, critErrorHandler
    18 00000E6F 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E73 B824250000          <1>     mov eax, 2524h
    20 00000E78 CD21                <1>     int 21h
    21 00000E7A 488D15F8260000      <1>     lea rdx, int23h
    22 00000E81 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E85 B823250000          <1>     mov eax, 2523h
    24 00000E8A CD21                <1>     int 21h
    25 00000E8C 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E93 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E97 B822250000          <1>     mov eax, 2522h
    28 00000E9C CD21                <1>     int 21h
    29 00000E9E F6050AF2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EA5 0F858C000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EAB E8BF040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EB0 0FB70D70F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EB7 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EBC B43E                <1>     mov ah, 3Eh ;File close
    37 00000EBE CD21                <1>     int 21h
    38 00000EC0 FFC3                <1>     inc ebx ;Goto next file
    39 00000EC2 39CB                <1>     cmp ebx, ecx
    40 00000EC4 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline. First check if batch mode is active, then fall.
    43                              <1> ;=========================
    44                              <1> ;   BATCH HANDLING HERE
    45                              <1> ;=========================
    46 00000EC6 488B2538F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    47 00000ECD FC                  <1>     cld ;Ensure stringops are done the right way
    48 00000ECE C605C8F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    49                              <1> .inputMain:
    50 00000ED5 E8701E0000          <1>     call printCRLF
    51                              <1> .inputMain2:
    52 00000EDA E8D1210000          <1>     call clearCommandLineState
    53 00000EDF E89A210000          <1>     call printPrompt
    54                              <1> 
    55 00000EE4 B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000EE9 CD21                <1>     int 21h
    57 00000EEB B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000EF0 BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000EF5 CD21                <1>     int 21h
    60 00000EF7 488D159FF2FFFF      <1>     lea rdx, inBuffer
    61 00000EFE B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000F03 CD21                <1>     int 21h
    63 00000F05 E8401E0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    66 00000F0A 803D8DF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    67 00000F11 74C7                <1>     je .inputMain2
    68                              <1>     ;Copy over the input text
    69 00000F13 488D3583F2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    70 00000F1A 488D3DFEF2FFFF      <1>     lea rdi, cmdBuffer
    71 00000F21 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000F26 F3A4                <1>     rep movsb
    73                              <1> .pipeLoop:
    74 00000F28 E846000000          <1>     call preProcessBuffer
    75 00000F2D E8BC000000          <1>     call analyseCmdline
    76 00000F32 E8B3010000          <1>     call doCommandLine
    77                              <1> .pipeProceed:
    78 00000F37 E833040000          <1>     call cleanUpRedir
    79 00000F3C 488B0564F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    80 00000F43 48890555F1FFFF      <1>     mov qword [cmdStartPtr], rax
    81 00000F4A F6055EF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    82 00000F51 7482                <1>     jz .inputMain
    83 00000F53 80380D              <1>     cmp byte [rax], CR  ;Are we done?
    84 00000F56 0F8479FFFFFF        <1>     je .inputMain
    85 00000F5C E834210000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 00000F61 EBC5                <1>     jmp short .pipeLoop
    87                              <1> .dfltErrExit:
    88 00000F63 488D1522F9FFFF      <1>     lea rdx, badCmd
    89 00000F6A B409                <1>     mov ah, 09h
    90 00000F6C CD21                <1>     int 21h
    91 00000F6E E962FFFFFF          <1>     jmp .inputMain
    92                              <1> 
    93                              <1> preProcessBuffer:
    94                              <1> ;Start by preprocessing the path, escape quotes and handle redirections.
    95                              <1> ;Each normal char gets copied over to psp.dta + 1 except for those special chars.
    96                              <1> ;Places the count of chars save CR in byte 0 of psp.dta.
    97                              <1> ;Places the ptr to the first byte past pipe or CR in cmdEndPtr
    98                              <1> ;Throughout: CL has char count, CH has number of quotes.
    99 00000F73 31C9                <1>     xor ecx, ecx
   100 00000F75 4C8B0593F0FFFF      <1>     mov r8, qword [pspPtr]  ;Ensure we have our pspPtr pointing to the right place
   101 00000F7C 488B351CF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
   102 00000F83 4885F6              <1>     test rsi, rsi
   103 00000F86 7507                <1>     jnz .notNewCmd
   104 00000F88 488D3592F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto command buffer + 2
   105                              <1> .notNewCmd:
   106 00000F8F 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   107                              <1> .countQuotes:
   108 00000F92 AC                  <1>     lodsb
   109 00000F93 3C22                <1>     cmp al, '"'
   110 00000F95 7507                <1>     jne .notQuoteToCount
   111 00000F97 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   112 00000F99 E9F4FFFFFF          <1>     jmp .countQuotes
   113                              <1> .notQuoteToCount:
   114 00000F9E 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   115 00000FA0 75F0                <1>     jne .countQuotes
   116 00000FA2 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   117 00000FA5 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We store this nicely formatted string in psp
   118                              <1> .getChar:
   119 00000FAC AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   120 00000FAD 3C22                <1>     cmp al, '"'     ;Is char a quote?
   121 00000FAF 750E                <1>     jne .notQuote
   122 00000FB1 FECD                <1>     dec ch          ;We have a quote, now decrement
   123 00000FB3 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   124                              <1> .searchForClosingQuote:
   125                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   126 00000FB5 AA                  <1>     stosb   ;Store char and inc rdi
   127 00000FB6 FEC1                <1>     inc cl
   128 00000FB8 AC                  <1>     lodsb   ;Get next char
   129 00000FB9 3C22                <1>     cmp al, '"'
   130 00000FBB 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   131 00000FBD FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   132                              <1> .notQuote:
   133 00000FBF 51                  <1>     push rcx    ;Save counts, if anything goes wrong, stack is jiggled properly
   134 00000FC0 E81A050000          <1>     call checkAndSetupRedir ;Intervene redir
   135 00000FC5 59                  <1>     pop rcx
   136 00000FC6 7509                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   137 00000FC8 7202                <1>     jc .pipeHandle      ;Store a CR in the buffer if a pipe
   138 00000FCA EBE0                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   139                              <1> .pipeHandle:
   140 00000FCC B00D                <1>     mov al, CR  ;Now store a Carriage return 
   141 00000FCE 48FFC6              <1>     inc rsi ;Ensure we remain one char past the pipe
   142                              <1> .notRedir:
   143 00000FD1 AA                  <1>     stosb       ;Store char and advance rdi
   144 00000FD2 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   145 00000FD4 7404                <1>     je .exit
   146 00000FD6 FEC1                <1>     inc cl      ;Increment char count
   147 00000FD8 EBD2                <1>     jmp short .getChar    ;If not, get next char
   148                              <1> .exit:
   149 00000FDA 48FFCE              <1>     dec rsi ;move rsi to point back to terminator or one past | 
   150 00000FDD 488935C3F0FFFF      <1>     mov qword [cmdEndPtr], rsi  ;Store rsi pointing to the first char past CR or |
   151 00000FE4 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   152 00000FEB 880F                <1>     mov byte [rdi], cl  ;Store the count of chars in the psp buffer
   153                              <1>     return
    13                              <2> %%_ret:
    14 00000FED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> analyseCmdline:
   156                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   157                              <1> ; processes the command name into the FCB.  
   158 00000FEE 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   159 00000FF5 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   160 00000FF8 E860200000          <1>     call skipDelimiters     ;Skip any preceeding separators
   161 00000FFD 488D3D9DF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   162 00001004 E88B210000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   163 00001009 48FFCE              <1>     dec rsi ;Point it back to the delim char
   164 0000100C E8D0000000          <1>     call .skipAndCheckCR
   165 00001011 7439                <1>     je .exit
   166 00001013 C605A0F0FFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   167 0000101A 4889F0              <1>     mov rax, rsi
   168 0000101D 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   169 00001020 880595F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   170                              <1> .skipArg:
   171 00001026 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   172 00001027 3C0D                <1>     cmp al, CR
   173 00001029 7421                <1>     je .exit
   174 0000102B E83B200000          <1>     call isALdelimiter
   175 00001030 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   176 00001032 E8AA000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   177 00001037 7413                <1>     je .exit            ;If ZF set, this we encountered a CR
   178 00001039 C6057DF0FFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   179 00001040 4889F0              <1>     mov rax, rsi            
   180 00001043 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   181 00001046 880572F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   182                              <1> .exit:
   183                              <1> ;Before returning, we copy the command name to cmdName and make it useful
   184 0000104C 488D3D4EF2FFFF      <1>     lea rdi, cmdPathSpec
   185 00001053 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   186 00001056 30C0                <1>     xor al, al  ;Search for the terminating null
   187 00001058 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   188 0000105D F2AE                <1>     repne scasb
   189 0000105F 48FFCF              <1>     dec rdi ;Go to the last char in the command
   190 00001062 4889FE              <1>     mov rsi, rdi
   191 00001065 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   192                              <1> .keepSearching:
   193 00001066 AC                  <1>     lodsb
   194 00001067 3A05BEEFFFFF        <1>     cmp al, byte [pathSep]
   195 0000106D 740B                <1>     je .cmdStartFnd
   196 0000106F 4839DE              <1>     cmp rsi, rbx
   197 00001072 75F2                <1>     jne .keepSearching
   198 00001074 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   199 00001077 48FFCE              <1>     dec rsi
   200                              <1> .cmdStartFnd:
   201 0000107A 48FFC6              <1>     inc rsi
   202 0000107D 48FFC6              <1>     inc rsi ;Go past the pathsep
   203 00001080 FC                  <1>     cld ;Go the sane way again
   204 00001081 488D3D81F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   205 00001088 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   206 00001089 B90E000000          <1>     mov ecx, cmdNameL
   207 0000108E 30C0                <1>     xor al, al
   208 00001090 F3AA                <1>     rep stosb
   209 00001092 5F                  <1>     pop rdi
   210 00001093 31C9                <1>     xor ecx, ecx
   211 00001095 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   212                              <1> .cmdGetChar:
   213 00001096 AC                  <1>     lodsb
   214 00001097 84C0                <1>     test al, al ;Did we find the terminating null?
   215 00001099 7414                <1>     jz .nameLenFnd
   216 0000109B 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   217 0000109D 7410                <1>     je .nameLenFnd
   218 0000109F E8A71F0000          <1>     call ucChar ;Else uppercase char
   219 000010A4 AA                  <1>     stosb   ;and store it
   220 000010A5 FFC1                <1>     inc ecx
   221 000010A7 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   222 000010AD 72E7                <1>     jb .cmdGetChar
   223                              <1> .nameLenFnd:
   224 000010AF 880D53F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   225                              <1>     ;Now finally, create a FCB filespec
   226 000010B5 488D3D34F2FFFF      <1>     lea rdi, fcbCmdSpec
   227 000010BC 57                  <1>     push rdi
   228 000010BD B90B000000          <1>     mov ecx, fcbNameL
   229 000010C2 B020                <1>     mov al, " " ;Fill with spaces
   230 000010C4 F3AA                <1>     rep stosb
   231 000010C6 5F                  <1>     pop rdi
   232 000010C7 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   233 000010C8 E808200000          <1>     call asciiToFCB
   234 000010CD 488D351CF2FFFF      <1>     lea rsi, fcbCmdSpec
   235 000010D4 488D3D20F2FFFF      <1>     lea rdi, cmdSpec
   236 000010DB E874200000          <1>     call FCBToAsciiz
   237                              <1>     return
    13                              <2> %%_ret:
    14 000010E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> .skipAndCheckCR:
   239                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   240 000010E1 E8771F0000          <1>     call skipDelimiters ;Go to the next char in the input line
   241 000010E6 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   242                              <1>     return
    13                              <2> %%_ret:
    14 000010E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   243                              <1> 
   244                              <1> doCommandLine:
   245 000010EA 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   246                              <1>     ;The following check accounts for the end of a piped command
   247 000010F1 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   248                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010F4 74(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249 000010F6 488D3DC3EFFFFF      <1>     lea rdi, cmdFcb
   250 000010FD B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   251 00001102 CD21                <1>     int 21h
   252 00001104 410FB79881000000    <1>     movzx ebx, word [r8 + cmdLine]    ;Get the drive specifier
   253 0000110C 80FF3A              <1>     cmp bh, ":"
   254 0000110F 7529                <1>     jne .noDriveSpecified
   255 00001111 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   256 00001113 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   257 00001116 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   258 00001119 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   259 0000111B 7410                <1>     je .badDrive
   260                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   261 0000111D 803DE4F1FFFF02      <1>     cmp byte [cmdName], 2
   262 00001124 7514                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   263 00001126 E8EC1E0000          <1>     call setDrive
   264                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000112B 74(E9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   265                              <1> .badDrive:
   266 0000112D 488D1567F8FFFF      <1>     lea rdx, badDrv
   267 00001134 B409                <1>     mov ah, 09h
   268 00001136 CD21                <1>     int 21h
   269 00001138 F9                  <1>     stc
   270                              <1>     return
    13                              <2> %%_ret:
    14 00001139 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   271                              <1> .noDriveSpecified:
   272                              <1> ;Now we set the two FCB's in the command line
   273 0000113A F60579EFFFFFFF      <1>     test byte [arg1Flg], -1
   274 00001141 744D                <1>     jz .fcbArgsDone
   275 00001143 0FB60571EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   276 0000114A 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   277 00001151 4801C6              <1>     add rsi, rax    ;Point to first argument
   278 00001154 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   279 00001158 B801290000          <1>     mov eax, 2901h
   280 0000115D CD21                <1>     int 21h
   281 0000115F 880557EFFFFF        <1>     mov byte [arg1FCBret], al
   282 00001165 F60551EFFFFFFF      <1>     test byte [arg2Flg], -1
   283 0000116C 7422                <1>     jz .fcbArgsDone
   284 0000116E 0FB60549EFFFFF      <1>     movzx eax, byte [arg2Off]
   285 00001175 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   286 0000117C 4801C6              <1>     add rsi, rax    ;Point to first argument
   287 0000117F 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   288 00001183 B801290000          <1>     mov eax, 2901h
   289 00001188 CD21                <1>     int 21h
   290 0000118A 88052FEFFFFF        <1>     mov byte [arg2FCBret], al
   291                              <1> .fcbArgsDone:
   292 00001190 498D9881000000      <1>     lea rbx, [r8 + cmdLine]
   293 00001197 488D356AF1FFFF      <1>     lea rsi, cmdName
   294 0000119E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   295 000011A3 BAFFFF0000          <1>     mov edx, 0FFFFh
   296 000011A8 B5FF                <1>     mov ch, -1
   297 000011AA CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   298 000011AC B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   299 000011B1 BAFFFF0000          <1>     mov edx, 0FFFFh
   300 000011B6 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   301 000011B8 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   302                              <1>             ;        al = 0  if the command should be executed as usual
   303 000011BA 84C0                <1>     test al, al
   304 000011BC 741D                <1>     jz .executeInternal
   305                              <1>     ;Here we execute externally and return to the prompt
   306                              <1>     ; as if it was an internal execution
   307 000011BE 488D35D8EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   308 000011C5 488D1DF4EEFFFF      <1>     lea rbx, cmdFcb
   309 000011CC B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   310 000011D1 BAFFFF0000          <1>     mov edx, 0FFFFh
   311 000011D6 B5FF                <1>     mov ch, -1
   312 000011D8 CD2F                <1>     int 2Fh 
   313                              <1>     return
    13                              <2> %%_ret:
    14 000011DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> .executeInternal:
   315                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   316                              <1> ;rsi points after the command terminator in the command tail
   317 000011DB 488D1D6DF5FFFF      <1>     lea rbx, functionTable
   318                              <1> .nextEntry:
   319 000011E2 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   320 000011E5 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   321 000011E8 0F84CB190000        <1>     je launchChild      ;If so, check externally now
   322 000011EE 380D14F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   323 000011F4 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   324                              <1>     ;Here they have the same length so lets see if the name is the same
   325 000011F6 56                  <1>     push rsi
   326                              <1>     ;ecx has the length to compare
   327 000011F7 51                  <1>     push rcx
   328 000011F8 488D7301            <1>     lea rsi, qword [rbx + 1]
   329 000011FC 488D3D06F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   330 00001203 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   331 00001205 59                  <1>     pop rcx
   332 00001206 5E                  <1>     pop rsi
   333 00001207 751F                <1>     jne .gotoNextEntry
   334                              <1>     ;Here it was found both strings are equal
   335 00001209 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   336 0000120E 480FB71F            <1>     movzx rbx, word [rdi]
   337 00001212 488D3DE7EDFFFF      <1>     lea rdi, startLbl
   338 00001219 4801FB              <1>     add rbx, rdi
   339 0000121C FFD3                <1>     call rbx    ;Call this function...
   340                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000121E 72(DA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   341 00001220 C605E6EDFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   342                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001227 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   343                              <1> .gotoNextEntry:
   344 00001228 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   345 0000122F 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   346 00001232 EBAE                <1>     jmp short .nextEntry
   347                              <1> .dfltErrExit:
   348 00001234 488D1551F6FFFF      <1>     lea rdx, badCmd
   349 0000123B B409                <1>     mov ah, 09h
   350 0000123D CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 0000123F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> 
   354                              <1> checkExtensionExec:
   355                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   356                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   357                              <1> ;         If ZF=ZE and CF=CY => Batch file
   358 00001240 8B0583EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   359 00001246 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   360 0000124B 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   361 00001250 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   362 00001255 3D434F4D20          <1>     cmp eax, "COM "
   363                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000125A 74(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   364 0000125C 3D45584520          <1>     cmp eax, "EXE "
   365                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001261 74(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   366 00001263 3D42415420          <1>     cmp eax, "BAT "
   367                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001268 75(3F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   368 0000126A F9                  <1>     stc
   369                              <1>     return
    13                              <2> %%_ret:
    14 0000126B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   370                              <1> 
   371                              <1> redirFailure:
   372 0000126C 488D1588FBFFFF      <1>     lea rdx, redirErrMsg
   373 00001273 B913000000          <1>     mov ecx, redirErrMsgL
   374 00001278 EB0C                <1>     jmp short redirPipeFailureCommon
   375                              <1> pipeFailure:
   376 0000127A 488D1563FBFFFF      <1>     lea rdx, pipeErrMsg
   377 00001281 B917000000          <1>     mov ecx, pipeErrMsgL
   378                              <1> redirPipeFailureCommon:
   379                              <1> ;This routine is called if any problems happen during 
   380                              <1> ;This routine tries to close whatever handles are not -1 and delete
   381                              <1> ; pipe files if the pipe count is not 0
   382                              <1> ;It resets all variables and proceeds.
   383 00001286 B800400000          <1>     mov eax, 4000h  ;Write handle
   384 0000128B BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   385 00001290 CD21                <1>     int 21h
   386 00001292 31DB                <1>     xor ebx, ebx    ;Select STDIN
   387 00001294 E8C6000000          <1>     call .closeHandle
   388 00001299 FFC3                <1>     inc ebx         ;Select STDOUT
   389 0000129B E8BF000000          <1>     call .closeHandle
   390 000012A0 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   391 000012A5 488D1597FBFFFF      <1>     lea rdx, conName
   392 000012AC CD21                <1>     int 21h
   393 000012AE 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   394 000012B0 B800450000          <1>     mov eax, 4500h  ;DUP
   395 000012B5 CD21                <1>     int 21h
   396 000012B7 66C705F4EDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   397 000012C0 0FB71DEFEDFFFF      <1>     movzx ebx, word [redirSTDIN]
   398 000012C7 E893000000          <1>     call .closeHandle
   399                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   400 000012CC 66C705E1EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   401 000012D5 0FB71DDCEDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   402 000012DC E87E000000          <1>     call .closeHandle
   403 000012E1 66C705CEEDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   404 000012EA 0FB71DBFEDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   405 000012F1 E869000000          <1>     call .closeHandle
   406 000012F6 66C705B1EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   407 000012FF 0FB71DACEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   408 00001306 E854000000          <1>     call .closeHandle
   409 0000130B 66C7059EEDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   410 00001314 C60594EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   411 0000131B 488D1592F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   412 00001322 803A00              <1>     cmp byte [rdx], 0
   413 00001325 7407                <1>     jz .checkOld
   414 00001327 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   415 0000132C CD21                <1>     int 21h
   416                              <1> .checkOld:
   417 0000132E 488D15CEF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   418 00001335 803A00              <1>     cmp byte [rdx],0
   419 00001338 7407                <1>     jz .pipeNamesComplete
   420 0000133A B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   421 0000133F CD21                <1>     int 21h
   422                              <1> .pipeNamesComplete:
   423 00001341 31C0                <1>     xor eax, eax
   424                              <1>     ;Invalidate the pointers and the paths too
   425 00001343 48890508F1FFFF      <1>     mov qword [newPipe], rax
   426 0000134A 48890509F1FFFF      <1>     mov qword [oldPipe], rax
   427 00001351 89055DF0FFFF        <1>     mov dword [pipe1Filespec], eax
   428 00001357 8905A6F0FFFF        <1>     mov dword [pipe2Filespec], eax
   429 0000135D F9                  <1>     stc
   430                              <1>     return
    13                              <2> %%_ret:
    14 0000135E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> .closeHandle:
   432 0000135F 81FBFFFFFFFF        <1>     cmp ebx, -1
   433                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001365 74(5E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   434 00001367 B8003E0000          <1>     mov eax, 3E00h
   435 0000136C CD21                <1>     int 21h
   436                              <1>     return
    13                              <2> %%_ret:
    14 0000136E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> cleanUpRedir:
   439                              <1> ;Cleans up the redir stuff after we are done.
   440 0000136F 0FB7053AEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   441 00001376 0FB71D35EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   442 0000137D C1E310              <1>     shl ebx, 10h
   443 00001380 09D8                <1>     or eax, ebx
   444 00001382 3DFFFFFFFF          <1>     cmp eax, -1
   445 00001387 750C                <1>     jne .pipe
   446 00001389 C6051FEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   447 00001390 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   448                              <1> .pipe:
   449                              <1> ;Pipe processing here
   450                              <1> ;We handle stdin, closing the redir if it is and deleting
   451                              <1> ; the redir file.
   452                              <1> ;Then we handle stdout, moving the redir to stdin.
   453 00001395 66813D12EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   454 0000139E 7443                <1>     je .pipeNostdin
   455                              <1>     ;We close the handle first and delete the file.
   456 000013A0 0FB71D09EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   457 000013A7 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   458 000013A9 B800460000          <1>     mov eax, 4600h
   459 000013AE CD21                <1>     int 21h
   460 000013B0 0F82C4FEFFFF        <1>     jc pipeFailure
   461 000013B6 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   462 000013BB CD21                <1>     int 21h
   463 000013BD 0F82B7FEFFFF        <1>     jc pipeFailure
   464 000013C3 488B1590F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   465 000013CA B800410000          <1>     mov eax, 4100h  ;Delete the file!
   466 000013CF CD21                <1>     int 21h
   467 000013D1 0F82A3FEFFFF        <1>     jc pipeFailure
   468 000013D7 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   469 000013DA 66C705CDECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   470                              <1> .pipeNostdin:
   471 000013E3 66813DC6ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   472 000013EC 7474                <1>     je .redirInClear
   473                              <1> ;Duplicate STDIN to save across pipe
   474 000013EE B800450000          <1>     mov eax, 4500h
   475 000013F3 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   476 000013F5 CD21                <1>     int 21h
   477 000013F7 0F827DFEFFFF        <1>     jc pipeFailure
   478 000013FD 668905ACECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   479                              <1> 
   480                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   481 00001404 B800460000          <1>     mov eax, 4600h
   482 00001409 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   483 0000140B FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   484 0000140D CD21                <1>     int 21h
   485 0000140F 0F8265FEFFFF        <1>     jc pipeFailure
   486                              <1> 
   487                              <1> ;Now return the original stdout to stdout
   488 00001415 89D9                <1>     mov ecx, ebx
   489 00001417 0FB71D94ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   490 0000141E B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   491 00001423 CD21                <1>     int 21h
   492 00001425 0F824FFEFFFF        <1>     jc pipeFailure
   493                              <1> 
   494                              <1> ;Now close the DUP'ed STDOUT
   495 0000142B B8003E0000          <1>     mov eax, 3E00h
   496 00001430 CD21                <1>     int 21h
   497 00001432 0F8242FEFFFF        <1>     jc pipeFailure
   498                              <1> 
   499                              <1> ;Finally unwind STDIN to the beginning of the file
   500 00001438 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   501 0000143D 31DB                <1>     xor ebx, ebx    ;STDIN handle
   502 0000143F 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   503 00001441 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   504 00001443 CD21                <1>     int 21h
   505 00001445 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   506                              <1> 
   507 0000144B 488B1500F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   508 00001452 48891501F0FFFF      <1>     mov qword [oldPipe], rdx
   509 00001459 66C70550ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   510                              <1> .redirInClear:
   511                              <1> ;Check redir in
   512 00001462 F6054BECFFFFFF      <1>     test byte [redirIn], -1
   513 00001469 7433                <1>     jz .redirOutClear
   514                              <1> 
   515 0000146B 0FB71D44ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   516 00001472 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   517 00001474 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   518 00001479 CD21                <1>     int 21h
   519 0000147B 0F82EBFDFFFF        <1>     jc redirFailure
   520 00001481 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   521 00001486 CD21                <1>     int 21h
   522 00001488 0F82DEFDFFFF        <1>     jc redirFailure
   523 0000148E 66C7051FECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   524 00001497 C60516ECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   525                              <1> .redirOutClear:
   526                              <1> ;Now check Redir Out
   527 0000149E F60510ECFFFFFF      <1>     test byte [redirOut], -1
   528                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014A5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014A7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   529                              <1> 
   530 000014A8 0FB71D09ECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   531 000014AF B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   532 000014B4 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   533 000014B9 CD21                <1>     int 21h
   534 000014BB 0F82ABFDFFFF        <1>     jc redirFailure
   535 000014C1 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   536 000014C6 CD21                <1>     int 21h
   537 000014C8 0F829EFDFFFF        <1>     jc redirFailure
   538 000014CE 66C705E1EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   539 000014D7 C605D7EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   540                              <1>     return
    13                              <2> %%_ret:
    14 000014DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> checkAndSetupRedir:
   543                              <1> ;Checks and sets up redir as appropriate
   544                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   545                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   546                              <1> ;Output: ZF=NZ => No redir
   547                              <1> ;        ZF=ZY => Redir
   548                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   549                              <1> ;CF=CY if pipe set or an embedded CR found. rsi points to first char past it!
   550 000014DF 57                  <1>     push rdi
   551 000014E0 3C3C                <1>     cmp al, "<"
   552 000014E2 740F                <1>     je .inputRedir
   553 000014E4 3C3E                <1>     cmp al, ">"
   554 000014E6 7473                <1>     je .outputRedir
   555 000014E8 3C7C                <1>     cmp al, "|"
   556 000014EA 0F841B010000        <1>     je .pipeSetup
   557 000014F0 F8                  <1>     clc
   558                              <1> .redirExit:
   559 000014F1 5F                  <1>     pop rdi
   560                              <1>     return
    13                              <2> %%_ret:
    14 000014F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   561                              <1> .inputRedir:
   562 000014F3 C605BAEBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   563 000014FA 488D3D15EEFFFF      <1>     lea rdi, rdrInFilespec
   564 00001501 E8571B0000          <1>     call skipDelimiters ;Skip spaces between < and the filespec
   565 00001506 E8891C0000          <1>     call cpDelimPathToBufz
   566 0000150B 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   567                              <1>     ;Setup the redir here for STDIN
   568 0000150E 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   569 00001510 B800450000          <1>     mov eax, 4500h
   570 00001515 CD21                <1>     int 21h
   571 00001517 0F827A010000        <1>     jc .redirError
   572 0000151D 66890592EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   573 00001524 488D15EBEDFFFF      <1>     lea rdx, rdrInFilespec
   574 0000152B B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   575 00001530 CD21                <1>     int 21h
   576 00001532 0F825F010000        <1>     jc .redirError
   577 00001538 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   578 0000153A 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   579 0000153D B800460000          <1>     mov eax, 4600h
   580 00001542 CD21                <1>     int 21h
   581 00001544 0F824D010000        <1>     jc .redirError
   582 0000154A B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   583 0000154F CD21                <1>     int 21h
   584 00001551 0F8240010000        <1>     jc .redirError
   585 00001557 30C0                <1>     xor al, al
   586 00001559 EB96                <1>     jmp short .redirExit
   587                              <1> .outputRedir:
   588 0000155B C60553EBFFFF01      <1>     mov byte [redirOut], 1
   589 00001562 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   590 00001565 7509                <1>     jne .notDouble
   591 00001567 FE0548EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   592 0000156D 48FFC6              <1>     inc rsi ;Go past it too
   593                              <1> .notDouble:
   594 00001570 488D3DEEEDFFFF      <1>     lea rdi, rdrOutFilespec
   595 00001577 E8E11A0000          <1>     call skipDelimiters
   596 0000157C E8131C0000          <1>     call cpDelimPathToBufz
   597 00001581 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char as 
   598                              <1>     ;Setup the redir here for STDOUT
   599 00001584 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   600 00001589 B800450000          <1>     mov eax, 4500h
   601 0000158E CD21                <1>     int 21h
   602 00001590 0F8201010000        <1>     jc .redirError
   603 00001596 6689051BEBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   604 0000159D 488D15C1EDFFFF      <1>     lea rdx, rdrOutFilespec
   605 000015A4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   606 000015A9 CD21                <1>     int 21h
   607 000015AB 730F                <1>     jnc .fileExists
   608 000015AD B8003C0000          <1>     mov eax, 3C00h
   609 000015B2 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   610 000015B4 CD21                <1>     int 21h
   611 000015B6 0F82DB000000        <1>     jc .redirError
   612                              <1> .fileExists:
   613 000015BC B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   614 000015C1 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   615 000015C4 B800460000          <1>     mov eax, 4600h  ;DUP2
   616 000015C9 CD21                <1>     int 21h
   617 000015CB 0F82C6000000        <1>     jc .redirError
   618 000015D1 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   619 000015D6 CD21                <1>     int 21h
   620 000015D8 0F82B9000000        <1>     jc .redirError
   621 000015DE 803DD0EAFFFF01      <1>     cmp byte [redirOut], 1
   622 000015E5 7416                <1>     je .dontAppend
   623                              <1>     ;Here we move the file pointer to the end of the file
   624 000015E7 31D2                <1>     xor edx, edx    ;Low order 32 bits
   625 000015E9 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   626 000015EB BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   627 000015F0 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   628 000015F5 CD21                <1>     int 21h
   629 000015F7 0F829A000000        <1>     jc .redirError
   630                              <1> .dontAppend:
   631 000015FD C605B1EAFFFFFF      <1>     mov byte [redirOut], -1
   632 00001604 30C0                <1>     xor al, al
   633 00001606 E9E6FEFFFF          <1>     jmp .redirExit
   634                              <1> .pipeSetup:
   635                              <1> ;We only need to setup STDOUT redirection to the pipe file
   636 0000160B 56                  <1>     push rsi    ;Save rsi pointing to char past |
   637 0000160C E84C1A0000          <1>     call skipDelimiters ;Check if this is a double ||
   638 00001611 803E7C              <1>     cmp byte [rsi], "|" 
   639 00001614 5E                  <1>     pop rsi
   640 00001615 7475                <1>     je .pipeError
   641 00001617 488D1596EDFFFF      <1>     lea rdx, pipe1Filespec
   642 0000161E 803A00              <1>     cmp byte [rdx], 0
   643 00001621 740C                <1>     jz .pathFound
   644 00001623 488D15D9EDFFFF      <1>     lea rdx, pipe2Filespec
   645 0000162A 803A00              <1>     cmp byte [rdx], 0
   646 0000162D 755D                <1>     jnz .pipeError
   647                              <1> .pathFound:
   648 0000162F 4889151CEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   649 00001636 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   650 0000163B BB01000000          <1>     mov ebx, 1
   651 00001640 CD21                <1>     int 21h
   652 00001642 7248                <1>     jc .pipeError
   653 00001644 66890567EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   654 0000164B E8D3190000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   655 00001650 0441                <1>     add al, "A"
   656 00001652 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   657 00001657 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   658 00001659 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   659 0000165B 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   660 0000165D B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   661 00001662 CD21                <1>     int 21h
   662 00001664 7226                <1>     jc .pipeError
   663                              <1>     ;AX has the handle for this file now, this will become STDOUT
   664                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   665 00001666 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   666 00001669 B901000000          <1>     mov ecx, 1
   667 0000166E B800460000          <1>     mov eax, 4600h
   668 00001673 CD21                <1>     int 21h
   669 00001675 7215                <1>     jc .pipeError
   670 00001677 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   671 0000167C CD21                <1>     int 21h
   672 0000167E 720C                <1>     jc .pipeError
   673 00001680 C60528EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   674 00001687 30C0                <1>     xor al, al  ;Set ZF
   675 00001689 F9                  <1>     stc         ;But also CF to indicate pipe!
   676 0000168A 5F                  <1>     pop rdi
   677                              <1>     return
    13                              <2> %%_ret:
    14 0000168B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   678                              <1> .pipeError:
   679 0000168C 5F                  <1>     pop rdi 
   680 0000168D E8E8FBFFFF          <1>     call pipeFailure
   681 00001692 E92FF8FFFF          <1>     jmp commandMain ;Fully reset the state if a pipe failure occurs.
   682                              <1> .redirError:
   683 00001697 5F                  <1>     pop rdi 
   684 00001698 E8CFFBFFFF          <1>     call redirFailure
   685 0000169D E924F8FFFF          <1>     jmp commandMain ;Fully reset the state if a redir failure occurs.
   686                              <1> 
   687                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   688                              <1> ;Input: rsi points to the count byte of a command line
   689 000016A2 4150                <1>     push r8
   690 000016A4 4151                <1>     push r9
   691 000016A6 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   692 000016A8 CD21                <1>     int 21h
   693 000016AA 52                  <1>     push rdx    ;Save on the stack
   694 000016AB 488D1D4EE8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   695 000016B2 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   696 000016B4 CD21                <1>     int 21h
   697 000016B6 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   698 000016B9 4989D9              <1>     mov r9, rbx
   699 000016BC 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   700 000016C3 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   701 000016C8 F348A5              <1>     rep movsq   ;Copy command line over
   702                              <1>     ;call doCommandLine
   703 000016CB 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   704 000016CC B450                <1>     mov ah, 50h ;Set Current PSP
   705 000016CE CD21                <1>     int 21h
   706 000016D0 4159                <1>     pop r9
   707 000016D2 4158                <1>     pop r8
   708 000016D4 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badAccError:
     7 000016D6 488D157DF4FFFF      <1>     lea rdx, accDenMsg
     8 000016DD EB46                <1>     jmp short badCmn
     9                              <1> noSelfCopyError:
    10 000016DF 488D1534F2FFFF      <1>     lea rdx, noSelfCopy
    11 000016E6 EB3D                <1>     jmp short badCmn
    12                              <1> badParamError:
    13 000016E8 488D15E9F2FFFF      <1>     lea rdx, badParm
    14 000016EF EB34                <1>     jmp short badCmn
    15                              <1> badDriveError:
    16 000016F1 488D15A3F2FFFF      <1>     lea rdx, badDrv
    17 000016F8 EB2B                <1>     jmp short badCmn
    18                              <1> badArgError:
    19 000016FA 488D1585F5FFFF      <1>     lea rdx, badArgs
    20 00001701 EB22                <1>     jmp short badCmn
    21                              <1> badFileError:
    22 00001703 488D1560F5FFFF      <1>     lea rdx, badSpec
    23 0000170A EB19                <1>     jmp short badCmn
    24                              <1> badDupFnf:
    25                              <1> ;Hybrid error message
    26 0000170C 488D1594F1FFFF      <1>     lea rdx, dupName
    27 00001713 EB10                <1>     jmp short badCmn
    28                              <1> badFnf:
    29 00001715 488D15A2F1FFFF      <1>     lea rdx, fnfMsg
    30 0000171C EB07                <1>     jmp short badCmn
    31                              <1> badDirError:
    32 0000171E 488D15B4F3FFFF      <1>     lea rdx, badDir
    33                              <1> badCmn:
    34 00001725 C605E1E8FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35 0000172C B800090000          <1>     mov eax, 0900h
    36 00001731 CD21                <1>     int 21h
    37 00001733 F9                  <1>     stc ;Return with CY => Error occured
    38                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 00001734 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> dir:
    41                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    42 00001735 C605A8EDFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    43 0000173C C605A2EDFFFF00      <1>     mov byte [dirLineCtr], 0
    44 00001743 C6059CEDFFFF00      <1>     mov byte [dirFileCtr], 0
    45 0000174A C60597EDFFFF00      <1>     mov byte [dirSrchDir], 0
    46 00001751 66C70508EDFFFF0000  <1>     mov word [searchSpec], 0
    47 0000175A 488D3D09EEFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    48 00001761 C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    49 00001764 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    49 0000176D 3F                  <1>
    50 0000176E 48894701            <1>     mov qword [rdi + fcb.filename], rax
    51 00001772 C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    52                              <1>     ;Start by scanning for the switches
    53 00001779 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    54 00001780 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    55 00001783 E8D5180000          <1>     call skipDelimiters ;Skip leading delimiters
    56 00001788 4881C603000000      <1>     add rsi, 3  ;Go past the DIR
    57                              <1> .scanNew:
    58 0000178F E8C9180000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    59 00001794 AC                  <1>     lodsb   ;Get this char
    60 00001795 3C0D                <1>     cmp al, CR
    61 00001797 744D                <1>     je .scanDone
    62 00001799 3A058DE8FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    63 0000179F 7524                <1>     jne .notSwitch
    64 000017A1 AC                  <1>     lodsb   ;Get the next char
    65 000017A2 E8A4180000          <1>     call ucChar
    66 000017A7 3C57                <1>     cmp al, "W"
    67 000017A9 7509                <1>     jne .notWide
    68 000017AB 800D32EDFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    69 000017B2 EBDB                <1>     jmp short .scanNew
    70                              <1> .notWide:
    71 000017B4 3C50                <1>     cmp al, "P"
    72 000017B6 0F852CFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    73 000017BC 800D21EDFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    74 000017C3 EBCA                <1>     jmp short .scanNew
    75                              <1> .notSwitch:
    76 000017C5 F60518EDFFFF04      <1>     test byte [dirFlags], dirFileType
    77 000017CC 0F8516FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    78                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    79 000017D2 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    80 000017D5 E8151A0000          <1>     call copyArgumentToSearchSpec   
    81 000017DA 48FFCE              <1>     dec rsi ;Point back to the terminator char
    82 000017DD 800D00EDFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    83 000017E4 EBA9                <1>     jmp short .scanNew
    84                              <1> .scanDone:
    85 000017E6 F605F7ECFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    86 000017ED 7438                <1>     jz .currentDrv
    87                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    88 000017EF 488D356CECFFFF      <1>     lea rsi, searchSpec
    89 000017F6 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    90 000017FA 752B                <1>     jne .currentDrv
    91                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    92 000017FC 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    93 00001801 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    94 00001805 B801290000          <1>     mov eax, 2901h   ;Parse filename
    95 0000180A CD21                <1>     int 21h
    96 0000180C 3CFF                <1>     cmp al, -1
    97 0000180E 0F84DDFEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
    98                              <1>     ;Else the drive in the fcb is valid
    99 00001814 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   100 00001819 84C0                <1>     test al, al
   101 0000181B 740A                <1>     jz .currentDrv
   102 0000181D FEC8                <1>     dec al  ;Convert to 0 based drive number
   103 0000181F 8805C2ECFFFF        <1>     mov byte [dirDrv], al
   104 00001825 EB0B                <1>     jmp short .dirPrintVol
   105                              <1> .currentDrv:
   106 00001827 E8F7170000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   107 0000182C 8805B5ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   108                              <1> .dirPrintVol:
   109 00001832 488D3529ECFFFF      <1>     lea rsi, searchSpec
   110                              <1> ;Now construct the path on dirSrchDir.
   111 00001839 488D3DA8ECFFFF      <1>     lea rdi, dirSrchDir
   112 00001840 0FB605A0ECFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   113 00001847 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   114 00001849 0441                <1>     add al, "A" ;Turn into a letter
   115 0000184B B43A                <1>     mov ah, ":"
   116 0000184D 66AB                <1>     stosw   ;Store X: into the search path
   117 0000184F B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   118 00001854 CD2F                <1>     int 2fh
   119 00001856 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   120 00001858 0F8493FEFFFF        <1>     je badDriveError
   121                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   122 0000185E 8A05C7E7FFFF        <1>     mov al, byte [pathSep]
   123 00001864 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   124 00001866 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   125 00001868 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   126 00001869 FEC2                <1>     inc dl  ;Increment by 1
   127 0000186B 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   128 0000186E B800470000          <1>     mov eax, 4700h  ;Print current working directory
   129 00001873 CD21                <1>     int 21h
   130 00001875 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   131                              <1>     ;rsi points to the first char in the provided path.
   132                              <1>     ;rdi points to the first char of the cwd.
   133 00001878 31C0                <1>     xor eax, eax
   134                              <1> .goToEndOfCwd:
   135                              <1> ;Move to the end of the string, could use repne?
   136 0000187A 3807                <1>     cmp byte [rdi], al
   137 0000187C 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   138 0000187E 48FFC7              <1>     inc rdi
   139 00001881 EBF7                <1>     jmp short .goToEndOfCwd
   140                              <1> .prepCopy:
   141 00001883 8A05A2E7FFFF        <1>     mov al, byte [pathSep]
   142 00001889 3806                <1>     cmp byte [rsi], al
   143 0000188B 7412                <1>     je .copyPathLoop
   144 0000188D B43A                <1>     mov ah, ":"
   145 0000188F 86C4                <1>     xchg al, ah
   146 00001891 663947FE            <1>     cmp word [rdi - 2], ax
   147 00001895 7408                <1>     je .copyPathLoop
   148 00001897 88E0                <1>     mov al, ah
   149 00001899 3847FF              <1>     cmp byte [rdi - 1], al
   150 0000189C 7401                <1>     je .copyPathLoop
   151 0000189E AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   152                              <1> .copyPathLoop:
   153 0000189F AC                  <1>     lodsb
   154 000018A0 3A0585E7FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   155 000018A6 7509                <1>     jne .checkDot  ;If not, store it
   156                              <1> .lpPathseps:
   157 000018A8 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   158 000018AA 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   159 000018AC 48FFC6              <1>     inc rsi
   160 000018AF EBF7                <1>     jmp short .lpPathseps
   161                              <1> .checkDot:
   162 000018B1 3C2E                <1>     cmp al, "."
   163 000018B3 7407                <1>     je .dots
   164                              <1> .store:
   165 000018B5 AA                  <1>     stosb
   166 000018B6 84C0                <1>     test al, al ;Was the char we just copied a null?
   167 000018B8 7472                <1>     jz .exitPathCopy
   168 000018BA EBE3                <1>     jmp short .copyPathLoop
   169                              <1> .dots:
   170                              <1>     ;Here handle dot and dot dot
   171                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   172                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   173                              <1>     ; by 1. If it is null, go to top of loop.
   174                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   175 000018BC 8A2569E7FFFF        <1>     mov ah, byte [pathSep]
   176 000018C2 3867FF              <1>     cmp byte [rdi - 1], ah  
   177 000018C5 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   178 000018C7 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   179 000018C9 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   180 000018CC 7413                <1>     je .twoDot
   181                              <1>     ;This is only a "current dir" when next char is pathsep or null
   182 000018CE 3A2557E7FFFF        <1>     cmp ah, byte [pathSep]
   183 000018D4 7406                <1>     je .skipThisPathsep
   184 000018D6 84E4                <1>     test ah, ah
   185 000018D8 74C5                <1>     jz .copyPathLoop
   186 000018DA EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   187                              <1> .skipThisPathsep:
   188                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   189 000018DC 48FFC6              <1>     inc rsi ;Point to the pathsep
   190 000018DF EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   191                              <1> .twoDot:
   192                              <1>     ;Woohoo, this works!
   193 000018E1 48FFC6              <1>     inc rsi ;Move past the second dot
   194 000018E4 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   195 000018E6 3A253FE7FFFF        <1>     cmp ah, byte [pathSep]
   196 000018EC 7408                <1>     je .tdOk
   197 000018EE 84E4                <1>     test ah, ah
   198 000018F0 0F85F2FDFFFF        <1>     jne badParamError
   199                              <1> .tdOk:
   200 000018F6 8A052FE7FFFF        <1>     mov al, byte byte [pathSep]
   201 000018FC 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   202 00001900 0F84E2FDFFFF        <1>     je badParamError
   203 00001906 4881EF02000000      <1>     sub rdi, 2
   204 0000190D 31C9                <1>     xor ecx, ecx
   205 0000190F FFC9                <1>     dec ecx
   206 00001911 FD                  <1>     std
   207 00001912 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   208 00001914 FC                  <1>     cld
   209 00001915 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   210 0000191C 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   211 0000191E 0F847BFFFFFF        <1>     jz .copyPathLoop
   212 00001924 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   213 00001927 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   214                              <1> .exitPathCopy:
   215                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   216 0000192C 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   217 00001933 8A05F2E6FFFF        <1>     mov al, byte [pathSep]
   218 00001939 B43A                <1>     mov ah, ":"
   219 0000193B 86C4                <1>     xchg al, ah
   220 0000193D 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   221 00001941 7409                <1>     je .skipOverwrite
   222 00001943 88E0                <1>     mov al, ah
   223 00001945 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   224 00001947 7503                <1>     jne .skipOverwrite
   225 00001949 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   226                              <1> .skipOverwrite:
   227 0000194C 488D3595EBFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   228 00001953 4889F7              <1>     mov rdi, rsi
   229 00001956 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   230 0000195B CD2F                <1>     int 2fh
   231 0000195D E89A180000          <1>     call scanForWildcards
   232 00001962 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   233 00001964 4889F2              <1>     mov rdx, rsi
   234 00001967 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   235 0000196B 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   236                              <1> .notNull:
   237 0000196D E851190000          <1>     call setDTA ;Set the DTA
   238 00001972 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   239 00001977 B8004E0000          <1>     mov eax, 4E00h ;Find first
   240 0000197C CD21                <1>     int 21h
   241 0000197E 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   242                              <1> ;Now we have searched for the file, is a directory?
   243 00001980 F6055EE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   244 00001987 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   245                              <1>     ;Here we are searching IN a directory. Default search pattern!
   246 00001989 31C0                <1>     xor eax, eax
   247 0000198B 31C9                <1>     xor ecx, ecx
   248 0000198D FFC9                <1>     dec ecx
   249 0000198F F2AE                <1>     repne scasb
   250 00001991 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   251 00001994 EB40                <1>     jmp short .wcDefaultSearch
   252                              <1> .wcSearchPattern:
   253                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   254                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   255 00001996 31C0                <1>     xor eax, eax
   256 00001998 31C9                <1>     xor ecx, ecx
   257 0000199A FFC9                <1>     dec ecx
   258 0000199C F2AE                <1>     repne scasb ;Scan forwards
   259                              <1>     ;Here rdi points past the null at the end
   260 0000199E 8A0587E6FFFF        <1>     mov al, byte [pathSep]
   261 000019A4 31C9                <1>     xor ecx, ecx
   262 000019A6 FFC9                <1>     dec ecx
   263 000019A8 FD                  <1>     std ;Search backwards
   264 000019A9 F2AE                <1>     repne scasb
   265 000019AB FC                  <1>     cld ;Search forwards again
   266 000019AC 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   267 000019AF 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   268 000019B3 7503                <1>     jne .wcsp1
   269 000019B5 48FFC7              <1>     inc rdi ;Go one char forwards
   270                              <1> .wcsp1:
   271                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   272 000019B8 57                  <1>     push rdi
   273 000019B9 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   274 000019BB 7503                <1>     jne .wcsp2
   275 000019BD 48FFC7              <1>     inc rdi
   276                              <1> .wcsp2:
   277 000019C0 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   278 000019C3 488D3DA0EBFFFF      <1>     lea rdi, dirSrchFCB
   279 000019CA B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   280 000019CF CD21                <1>     int 21h
   281 000019D1 5F                  <1>     pop rdi
   282 000019D2 31C0                <1>     xor eax, eax
   283 000019D4 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   284                              <1> .wcDefaultSearch:
   285 000019D6 0FB6050AEBFFFF      <1>     movzx eax, byte [dirDrv] 
   286 000019DD E8030F0000          <1>     call volume.dirEP
   287 000019E2 488D1558F1FFFF      <1>     lea rdx, dirMain    ;Print message intro
   288 000019E9 B409                <1>     mov ah, 09h
   289 000019EB CD21                <1>     int 21h
   290 000019ED C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   291 000019F0 488D15F1EAFFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   292 000019F7 B409                <1>     mov ah, 09h
   293 000019F9 CD21                <1>     int 21h
   294 000019FB C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   295 000019FE 488D152DEEFFFF      <1>     lea rdx, crlf2
   296 00001A05 B409                <1>     mov ah, 09h
   297 00001A07 CD21                <1>     int 21h
   298                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   299                              <1> ;rdi points to the terminating null
   300 00001A09 8A051CE6FFFF        <1>     mov al, byte [pathSep]
   301 00001A0F 3847FF              <1>     cmp byte [rdi - 1], al
   302 00001A12 7403                <1>     je .root
   303 00001A14 48FFC7              <1>     inc rdi
   304                              <1> .root:
   305 00001A17 48FFCF              <1>     dec rdi ;Point back to the pathsep
   306 00001A1A AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   307 00001A1B 488D3549EBFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   308 00001A22 E82D170000          <1>     call FCBToAsciiz    ;Terminates for free
   309 00001A27 E801000000          <1>     call .searchForFile
   310                              <1>     return
    13                              <2> %%_ret:
    14 00001A2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   311                              <1> 
   312                              <1> .searchForFile:
   313 00001A2D E891180000          <1>     call setDTA
   314 00001A32 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   315 00001A37 488D15AAEAFFFF      <1>     lea rdx, dirSrchDir
   316 00001A3E B8004E0000          <1>     mov eax, 4E00h ;Find first
   317 00001A43 CD21                <1>     int 21h
   318 00001A45 720B                <1>     jc .dirNoMoreFiles
   319                              <1> .findNext:
   320 00001A47 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   321 00001A4C B44F                <1>     mov ah, 4Fh
   322 00001A4E CD21                <1>     int 21h
   323 00001A50 73F5                <1>     jnc .findNext 
   324                              <1> .dirNoMoreFiles:
   325 00001A52 F6058BEAFFFF01      <1>     test byte [dirFlags], dirWideType
   326 00001A59 740B                <1>     jz .dirNoEndNewLine
   327 00001A5B 488D15CDEDFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   328 00001A62 B409                <1>     mov ah, 09h
   329 00001A64 CD21                <1>     int 21h
   330                              <1> .dirNoEndNewLine:
   331                              <1>     ;Now we print the number of files and the number of bytes on the disk
   332 00001A66 488D15A5F3FFFF      <1>     lea rdx, fourSpc
   333 00001A6D B409                <1>     mov ah, 09h
   334 00001A6F CD21                <1>     int 21h
   335 00001A71 B409                <1>     mov ah, 09h ;Print four Spaces twice
   336 00001A73 CD21                <1>     int 21h
   337 00001A75 0FB6056AEAFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   338 00001A7C E88F170000          <1>     call printDecimalWord
   339 00001A81 488D15F2EEFFFF      <1>     lea rdx, dirOk
   340 00001A88 B409                <1>     mov ah, 09h
   341 00001A8A CD21                <1>     int 21h
   342 00001A8C 488D1584F3FFFF      <1>     lea rdx, threeSpc
   343 00001A93 B409                <1>     mov ah, 09h
   344 00001A95 CD21                <1>     int 21h
   345 00001A97 B800360000          <1>     mov eax, 3600h ;Get disk info
   346 00001A9C 8A1545EAFFFF        <1>     mov dl, byte [dirDrv]
   347 00001AA2 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   348 00001AA4 CD21                <1>     int 21h ;Get disk free space info
   349 00001AA6 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   350 00001AA9 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   351 00001AAC 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   352 00001AAE F7E1                <1>     mul ecx ;Get bytes per cluster
   353 00001AB0 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   354                              <1>     ;rax now has the number of free bytes on the disk
   355 00001AB3 E858170000          <1>     call printDecimalWord
   356 00001AB8 488D15C5EEFFFF      <1>     lea rdx, bytesOk
   357 00001ABF B409                <1>     mov ah, 09h
   358 00001AC1 CD21                <1>     int 21h
   359                              <1>     return
    13                              <2> %%_ret:
    14 00001AC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> .dirPrintFileData:
   362                              <1> ;Use fcbCmdSpec to build the file name with space
   363                              <1> ;Start by print the name (same for both cases)
   364                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   365 00001AC4 F6051AE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   366                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001ACB 75(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   367 00001ACD 488D351AE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   368 00001AD4 488D3D15E8FFFF      <1>     lea rdi, fcbCmdSpec
   369 00001ADB E806160000          <1>     call asciiFilenameToFCB
   370 00001AE0 488D1509E8FFFF      <1>     lea rdx, fcbCmdSpec
   371 00001AE7 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   372 00001AEC BB01000000          <1>     mov ebx, 1  ;STDOUT
   373 00001AF1 B440                <1>     mov ah, 40h ;Write handle
   374 00001AF3 CD21                <1>     int 21h
   375 00001AF5 52                  <1>     push rdx
   376 00001AF6 B220                <1>     mov dl, " "
   377 00001AF8 B402                <1>     mov ah, 02h ;Print char
   378 00001AFA CD21                <1>     int 21h
   379 00001AFC 5A                  <1>     pop rdx
   380 00001AFD 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   381 00001B04 B903000000          <1>     mov ecx, 3  ;Print three chars
   382 00001B09 BB01000000          <1>     mov ebx, 1  ;STDOUT
   383 00001B0E B440                <1>     mov ah, 40h ;Write handle
   384 00001B10 CD21                <1>     int 21h
   385 00001B12 F605CBE9FFFF01      <1>     test byte [dirFlags], dirWideType
   386 00001B19 0F85A8000000        <1>     jnz .widePrint
   387                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   388                              <1>     ;Now check if a DIR
   389 00001B1F F605BFE5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   390 00001B26 7418                <1>     jz .dirPrintNotDir
   391 00001B28 488D1563EEFFFF      <1>     lea rdx, dirLbl
   392 00001B2F B409                <1>     mov ah, 09h
   393 00001B31 CD21                <1>     int 21h
   394 00001B33 488D15DDF2FFFF      <1>     lea rdx, threeSpc
   395 00001B3A B409                <1>     mov ah, 09h
   396 00001B3C CD21                <1>     int 21h
   397 00001B3E EB4F                <1>     jmp short .dirPrintFileDT
   398                              <1> .dirPrintNotDir:
   399                              <1> ;Here we print the file size
   400 00001B40 B220                <1>     mov dl, " "
   401 00001B42 B402                <1>     mov ah, 02h
   402 00001B44 CD21                <1>     int 21h
   403 00001B46 8B059EE5FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   404 00001B4C E830170000          <1>     call getDecimalWord
   405 00001B51 4889CB              <1>     mov rbx, rcx
   406 00001B54 51                  <1>     push rcx
   407 00001B55 480FCB              <1>     bswap rbx
   408 00001B58 B908000000          <1>     mov ecx, 8
   409                              <1> .dirPrintFileSizePrep:
   410 00001B5D 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   411 00001B5F 7514                <1>     jne .dirPrintFileSize
   412 00001B61 B402                <1>     mov ah, 02h
   413 00001B63 B220                <1>     mov dl, " "
   414 00001B65 CD21                <1>     int 21h
   415 00001B67 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   416 00001B6B FFC9                <1>     dec ecx
   417 00001B6D 81F901000000        <1>     cmp ecx, 1
   418 00001B73 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   419                              <1> .dirPrintFileSize:
   420 00001B75 5B                  <1>     pop rbx
   421                              <1> .dirPrintFileSizeLoop:
   422 00001B76 88DA                <1>     mov dl, bl
   423 00001B78 B402                <1>     mov ah, 02h
   424 00001B7A CD21                <1>     int 21h
   425 00001B7C 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   426 00001B80 FFC9                <1>     dec ecx
   427 00001B82 75F2                <1>     jnz .dirPrintFileSizeLoop
   428 00001B84 488D1590F2FFFF      <1>     lea rdx, twoSpc
   429 00001B8B B409                <1>     mov ah, 09h
   430 00001B8D CD21                <1>     int 21h
   431                              <1> .dirPrintFileDT:
   432 00001B8F B220                <1>     mov dl, " "
   433 00001B91 B402                <1>     mov ah, 02h
   434 00001B93 CD21                <1>     int 21h
   435 00001B95 0FB7054CE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   436 00001B9C 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   437 00001B9E E8B6110000          <1>     call printDate
   438 00001BA3 488D1571F2FFFF      <1>     lea rdx, twoSpc
   439 00001BAA B409                <1>     mov ah, 09h
   440 00001BAC CD21                <1>     int 21h
   441 00001BAE 0FB70531E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   442 00001BB5 E8C1120000          <1>     call printTime
   443 00001BBA 488D156EECFFFF      <1>     lea rdx, crlf
   444 00001BC1 B409                <1>     mov ah, 09h
   445 00001BC3 CD21                <1>     int 21h
   446 00001BC5 EB0B                <1>     jmp short .dirPrintNameExit
   447                              <1> .widePrint:
   448                              <1> ;If /W, print name space ext space space space space
   449 00001BC7 488D1544F2FFFF      <1>     lea rdx, fourSpc
   450 00001BCE B409                <1>     mov ah, 09h ;Print string
   451 00001BD0 CD21                <1>     int 21h
   452                              <1> .dirPrintNameExit:
   453 00001BD2 FE050EE9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   454 00001BD8 FE0507E9FFFF        <1>     inc byte [dirLineCtr]
   455 00001BDE 803D00E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   456                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001BE5 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001BE7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   457 00001BE8 488D15CAEDFFFF      <1>     lea rdx, pauseMes
   458 00001BEF B409                <1>     mov ah, 09h
   459 00001BF1 CD21                <1>     int 21h
   460 00001BF3 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   461 00001BF5 CD21                <1>     int 21h
   462 00001BF7 C605E7E8FFFF00      <1>     mov byte [dirLineCtr], 0
   463 00001BFE 488D152AECFFFF      <1>     lea rdx, crlf   ;Force new line
   464 00001C05 B409                <1>     mov ah, 09h
   465 00001C07 CD21                <1>     int 21h
   466                              <1>     return
    13                              <2> %%_ret:
    14 00001C09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> 
   468                              <1> chdir:
   469 00001C0A F605A9E4FFFFFF      <1>     test byte [arg1Flg], -1
   470 00001C11 754D                <1>     jnz .changeDir
   471                              <1>     ;Print CWD
   472                              <1> .printCWD:
   473 00001C13 E845130000          <1>     call putCWDInPrompt ;Exactly the same procedure
   474 00001C18 E82D110000          <1>     call printCRLF
   475                              <1>     return
    13                              <2> %%_ret:
    14 00001C1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> .printDiskCWD:
   477                              <1> ;Print CWD for a specified drive
   478 00001C1E 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   479 00001C22 88D0                <1>     mov al, dl
   480 00001C24 0440                <1>     add al, "@" ;Get the UC letter
   481 00001C26 B43A                <1>     mov ah, ":"
   482 00001C28 488D3D33E8FFFF      <1>     lea rdi, searchSpec
   483 00001C2F 66AB                <1>     stosw   ;Store X:, rdi+=2
   484 00001C31 8A05F4E3FFFF        <1>     mov al, byte [pathSep]
   485 00001C37 AA                  <1>     stosb   ;Store pathSep, inc rdi
   486 00001C38 B447                <1>     mov ah, 47h ;Get Current Working Directory
   487 00001C3A 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   488 00001C3D CD21                <1>     int 21h
   489 00001C3F E8FD130000          <1>     call strlen
   490 00001C44 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   491 00001C4A B440                <1>     mov ah, 40h ;Write to handle
   492 00001C4C BB01000000          <1>     mov ebx, 1  ;STDOUT
   493 00001C51 488D150AE8FFFF      <1>     lea rdx, searchSpec
   494 00001C58 CD21                <1>     int 21h
   495 00001C5A E8EB100000          <1>     call printCRLF
   496                              <1>     return
    13                              <2> %%_ret:
    14 00001C5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1> .changeDir:
   498 00001C60 8A0556E4FFFF        <1>     mov al, byte [arg1FCBret]
   499 00001C66 3CFF                <1>     cmp al, -1 
   500 00001C68 0F8483FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   501 00001C6E E864150000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   502 00001C73 488D15E8E7FFFF      <1>     lea rdx, searchSpec
   503 00001C7A B43B                <1>     mov ah, 3Bh ;CHDIR
   504 00001C7C CD21                <1>     int 21h
   505 00001C7E 0F829AFAFFFF        <1>     jc badDirError
   506                              <1>     return
    13                              <2> %%_ret:
    14 00001C84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> 
   508                              <1> mkdir:
   509 00001C85 F6052EE4FFFFFF      <1>     test byte [arg1Flg], -1
   510 00001C8C 0F8468FAFFFF        <1>     jz badArgError
   511 00001C92 F60524E4FFFFFF      <1>     test byte [arg2Flg], -1
   512 00001C99 0F855BFAFFFF        <1>     jnz badArgError
   513                              <1>     ;We have exactly one argument
   514 00001C9F 8A0517E4FFFF        <1>     mov al, byte [arg1FCBret]
   515 00001CA5 3CFF                <1>     cmp al, -1 
   516 00001CA7 0F8444FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   517 00001CAD E825150000          <1>     call buildCommandPath
   518 00001CB2 488D15A9E7FFFF      <1>     lea rdx, searchSpec
   519 00001CB9 B800390000          <1>     mov eax, 3900h  ;MKDIR
   520 00001CBE CD21                <1>     int 21h
   521                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001CC0 73(84)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   522                              <1> .badMake:   ;Else, bad make
   523 00001CC2 488D1524EEFFFF      <1>     lea rdx, badMD
   524 00001CC9 B800090000          <1>     mov eax, 0900h
   525 00001CCE CD21                <1>     int 21h
   526                              <1>     return
    13                              <2> %%_ret:
    14 00001CD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> rmdir:
   529 00001CD1 F605E2E3FFFFFF      <1>     test byte [arg1Flg], -1
   530 00001CD8 0F841CFAFFFF        <1>     jz badArgError
   531 00001CDE F605D8E3FFFFFF      <1>     test byte [arg2Flg], -1
   532 00001CE5 0F850FFAFFFF        <1>     jnz badArgError
   533                              <1>     ;We have exactly one argument
   534 00001CEB 8A05CBE3FFFF        <1>     mov al, byte [arg1FCBret]
   535 00001CF1 3CFF                <1>     cmp al, -1 
   536 00001CF3 0F84F8F9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   537 00001CF9 E8D9140000          <1>     call buildCommandPath
   538 00001CFE 488D155DE7FFFF      <1>     lea rdx, searchSpec
   539 00001D05 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   540 00001D0A CD21                <1>     int 21h
   541                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D0C 73(D0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   542                              <1> .badRemove:   ;Else, bad make
   543 00001D0E 488D15F5EDFFFF      <1>     lea rdx, badRD
   544 00001D15 B800090000          <1>     mov eax, 0900h
   545 00001D1A CD21                <1>     int 21h
   546                              <1>     return
    13                              <2> %%_ret:
    14 00001D1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> copy:
   549 00001D1D F60596E3FFFFFF      <1>     test byte [arg1Flg], -1
   550 00001D24 0F84D0F9FFFF        <1>     jz badArgError
   551 00001D2A F6058CE3FFFFFF      <1>     test byte [arg2Flg], -1
   552 00001D31 0F84C3F9FFFF        <1>     jz badArgError
   553 00001D37 0FB6057DE3FFFF      <1>     movzx eax, byte [arg1Off]
   554 00001D3E 4C8B05CAE2FFFF      <1>     mov r8, [pspPtr]
   555 00001D45 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   556 00001D4C 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   557 00001D4F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   558 00001D52 488D3D51E8FFFF      <1>     lea rdi, srcSpec
   559 00001D59 E836140000          <1>     call cpDelimPathToBufz    
   560 00001D5E 0FB60559E3FFFF      <1>     movzx eax, byte [arg2Off]
   561 00001D65 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   562 00001D68 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   563 00001D6B 488D3DBAE8FFFF      <1>     lea rdi, destSpec
   564 00001D72 E81D140000          <1>     call cpDelimPathToBufz   
   565                              <1> ;Before we open, we check if the two filenames are equal
   566                              <1> ; If so, crap out.
   567 00001D77 488D352CE8FFFF      <1>     lea rsi, srcSpec
   568 00001D7E 488D3DA7E8FFFF      <1>     lea rdi, destSpec
   569 00001D85 B81E120000          <1>     mov eax, 121Eh
   570 00001D8A CD2F                <1>     int 2Fh
   571 00001D8C 0F84D3000000        <1>     jz .sameFilename
   572                              <1>     ;Open source with read permission
   573                              <1>     ;Open destination with write permission
   574 00001D92 488D1511E8FFFF      <1>     lea rdx, srcSpec
   575 00001D99 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   576 00001D9E CD21                <1>     int 21h
   577 00001DA0 0F8242F9FFFF        <1>     jc badParamError
   578 00001DA6 6689051CE9FFFF      <1>     mov word [sourceHdl], ax
   579                              <1> 
   580 00001DAD 0FB7D8              <1>     movzx ebx, ax   ;For bx
   581 00001DB0 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   582 00001DB5 CD21                <1>     int 21h
   583 00001DB7 6689150FE9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   584                              <1> 
   585 00001DBE 488D1567E8FFFF      <1>     lea rdx, destSpec
   586 00001DC5 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   587 00001DCA 31C9                <1>     xor ecx, ecx    ;No file attributes
   588 00001DCC CD21                <1>     int 21h
   589 00001DCE 0F82B8000000        <1>     jc .badExit
   590 00001DD4 668905F0E8FFFF      <1>     mov word [destHdl], ax
   591 00001DDB 31F6                <1>     xor esi, esi
   592 00001DDD 488D15EBE8FFFF      <1>     lea rdx, copyBuffer
   593                              <1> .copyLoop:
   594 00001DE4 B980000000          <1>     mov ecx, 128
   595 00001DE9 0FB71DD9E8FFFF      <1>     movzx ebx, word [sourceHdl]
   596 00001DF0 B43F                <1>     mov ah, 3Fh ;Read
   597 00001DF2 CD21                <1>     int 21h
   598 00001DF4 0F8292000000        <1>     jc .badExit
   599 00001DFA 85C0                <1>     test eax, eax
   600 00001DFC 743A                <1>     jz .okExit
   601 00001DFE 01C6                <1>     add esi, eax
   602 00001E00 89C1                <1>     mov ecx, eax
   603 00001E02 0FB71DC2E8FFFF      <1>     movzx ebx, word [destHdl]
   604 00001E09 B440                <1>     mov ah, 40h ;Write
   605 00001E0B CD21                <1>     int 21h
   606 00001E0D 727D                <1>     jc .badExit
   607 00001E0F 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   608 00001E14 74CE                <1>     je .copyLoop
   609                              <1>     ;If not char dev, exit
   610 00001E16 66F705AEE8FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   611 00001E1F 7417                <1>     jz .okExit
   612                              <1>     ;Is handle in cooked or binary mode?
   613 00001E21 66F705A3E8FFFF2000  <1>     test word [srcHdlInfo], 20h
   614 00001E2A 750C                <1>     jnz .okExit
   615                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   616 00001E2C 09C0                <1>     or eax, eax ;Clear upper bits in eax
   617 00001E2E 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   618 00001E33 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   619 00001E36 75AC                <1>     jne .copyLoop   ;Jump if not
   620                              <1> .okExit:
   621 00001E38 E832000000          <1>     call .leaveCopyClose
   622 00001E3D 488D15EBE9FFFF      <1>     lea rdx, crlf
   623 00001E44 B409                <1>     mov ah, 09h
   624 00001E46 CD21                <1>     int 21h
   625 00001E48 488D15C3EFFFFF      <1>     lea rdx, fourSpc
   626 00001E4F B409                <1>     mov ah, 09h
   627 00001E51 CD21                <1>     int 21h
   628 00001E53 B402                <1>     mov ah, 02h
   629 00001E55 B231                <1>     mov dl, "1" ;1 File(s) copied
   630 00001E57 CD21                <1>     int 21h
   631 00001E59 488D1508EBFFFF      <1>     lea rdx, copyOk
   632 00001E60 B409                <1>     mov ah, 09h
   633 00001E62 CD21                <1>     int 21h
   634                              <1>     return
    13                              <2> %%_ret:
    14 00001E64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   635                              <1> .sameFilename:
   636 00001E65 E805000000          <1>     call .leaveCopyClose ;Close the handles
   637 00001E6A E970F8FFFF          <1>     jmp noSelfCopyError
   638                              <1> .leaveCopyClose:
   639 00001E6F 668B1D53E8FFFF      <1>     mov bx, word [sourceHdl]
   640 00001E76 B8003E0000          <1>     mov eax, 3E00h
   641 00001E7B CD21                <1>     int 21h
   642 00001E7D 668B1D47E8FFFF      <1>     mov bx, word [destHdl]
   643 00001E84 B8003E0000          <1>     mov eax, 3E00h
   644 00001E89 CD21                <1>     int 21h
   645                              <1>     return
    13                              <2> %%_ret:
    14 00001E8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> .badExit:
   647                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   648 00001E8C 668B1D36E8FFFF      <1>     mov bx, word [sourceHdl]
   649 00001E93 6681FBFFFF          <1>     cmp bx, -1
   650 00001E98 7407                <1>     je .skipSource
   651 00001E9A B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   652 00001E9F CD21                <1>     int 21h
   653                              <1> .skipSource:
   654 00001EA1 668B1D23E8FFFF      <1>     mov bx, word [destHdl]
   655 00001EA8 6681FBFFFF          <1>     cmp bx, -1
   656 00001EAD 0F8435F8FFFF        <1>     je badParamError
   657 00001EB3 B8003E0000          <1>     mov eax, 3E00h
   658 00001EB8 CD21                <1>     int 21h
   659 00001EBA E929F8FFFF          <1>     jmp badParamError
   660                              <1> 
   661                              <1> erase:
   662 00001EBF F605F4E1FFFFFF      <1>     test byte [arg1Flg], -1
   663 00001EC6 0F842EF8FFFF        <1>     jz badArgError
   664 00001ECC E8F2130000          <1>     call setDTA     ;Start by resetting the DTA
   665 00001ED1 E801130000          <1>     call buildCommandPath   ;Get the relative path to the file
   666                              <1> .dirLp:
   667 00001ED6 488D3D85E5FFFF      <1>     lea rdi, searchSpec
   668 00001EDD E84E120000          <1>     call findLastPathComponant
   669 00001EE2 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   670 00001EE5 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   671 00001EE9 B03F                <1>     mov al, "?"
   672                              <1>     ;Store question marks in the name field
   673 00001EEB 57                  <1>     push rdi
   674 00001EEC 48FFC7              <1>     inc rdi ;Goto the first char
   675 00001EEF B90B000000          <1>     mov ecx, 11
   676 00001EF4 F3AA                <1>     rep stosb
   677 00001EF6 5F                  <1>     pop rdi
   678 00001EF7 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   679 00001EFA B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   680 00001EFF CD21                <1>     int 21h
   681 00001F01 3C01                <1>     cmp al, 1
   682 00001F03 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   683                              <1>     ;Else, we now copy back the search pattern over the last componant!
   684                              <1>     ;No dirs to handle in here
   685 00001F09 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   686 00001F0D 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   687 00001F10 E83F120000          <1>     call FCBToAsciiz    ;Null terminates for free
   688                              <1>     ;Count the number of ?'s, if 11, we print the message
   689 00001F15 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   690 00001F19 31C9                <1>     xor ecx, ecx
   691                              <1> .wcScan:
   692 00001F1B AC                  <1>     lodsb
   693 00001F1C 3C3F                <1>     cmp al, "?"
   694 00001F1E 752F                <1>     jne .endCount
   695 00001F20 FFC1                <1>     inc ecx
   696 00001F22 81F90B000000        <1>     cmp ecx, 11
   697 00001F28 75F1                <1>     jne .wcScan
   698                              <1> .ynmsg:
   699 00001F2A 488D155CEBFFFF      <1>     lea rdx, ynMes
   700 00001F31 E81B0E0000          <1>     call printString
   701 00001F36 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   702 00001F38 CD21                <1>     int 21h ;Get char in al
   703 00001F3A E80C110000          <1>     call ucChar ;Uppercase the char
   704 00001F3F 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   705 00001F41 7407                <1>     je .endCount1
   706 00001F43 3C4E                <1>     cmp al, "N"
   707                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F45 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F47 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   708 00001F48 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   709                              <1> .endCount1:
   710 00001F4A E8FB0D0000          <1>     call printCRLF
   711                              <1> .endCount:
   712                              <1>     ;Now we copy our search template pathstring to delPath
   713 00001F4F 488D3D54E6FFFF      <1>     lea rdi, delPath
   714 00001F56 488D3505E5FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   715 00001F5D E8D5100000          <1>     call strcpy2         ;Copy the string over to delPath
   716                              <1> .findFile:
   717                              <1>     ;Now we find first/find next our way through the files
   718 00001F62 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   719 00001F65 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   720 00001F67 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   721 00001F6C CD21                <1>     int 21h
   722 00001F6E 0F82A1F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   723                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   724 00001F74 E8B7110000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   725 00001F79 488D356EE1FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   726                              <1> .delNextFile:
   727                              <1> ;rsi and rdi dont move here
   728 00001F80 E8B2100000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   729 00001F85 488D151EE6FFFF      <1>     lea rdx, delPath
   730 00001F8C B800410000          <1>     mov eax, 4100h  ;Delete File 
   731 00001F91 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   732 00001F93 488D15C8E4FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   733 00001F9A B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   734 00001F9F CD21                <1>     int 21h
   735 00001FA1 73DD                <1>     jnc .delNextFile    
   736 00001FA3 F8                  <1>     clc ;Clear carry to indicate success
   737                              <1>     return
    13                              <2> %%_ret:
    14 00001FA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   738                              <1> .noWildcard:
   739                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   740                              <1>     ; a \*.*<NUL> over the null terminator
   741 00001FA5 488D15B6E4FFFF      <1>     lea rdx, searchSpec
   742 00001FAC B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   743 00001FB1 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   744 00001FB6 CD21                <1>     int 21h
   745 00001FB8 0F8257F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   746 00001FBE F60520E1FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   747 00001FC5 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   748                              <1>     ;Else, we are dealing with a dir
   749 00001FC7 4889D7              <1>     mov rdi, rdx
   750 00001FCA 31C9                <1>     xor ecx, ecx
   751 00001FCC FFC9                <1>     dec ecx
   752 00001FCE F2AE                <1>     repne scasb ;Go to the end of the line!
   753 00001FD0 48FFCF              <1>     dec rdi
   754 00001FD3 0FB60551E0FFFF      <1>     movzx eax, byte [pathSep]
   755 00001FDA AA                  <1>     stosb
   756 00001FDB B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   757 00001FE0 AB                  <1>     stosd
   758 00001FE1 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   759                              <1> .delMain:   ;Call with rdx -> buffer!
   760 00001FE6 B800410000          <1>     mov eax, 4100h  ;Delete File 
   761 00001FEB CD21                <1>     int 21h
   762                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001FED 73(A4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   763 00001FEF 3C05                <1>     cmp al, errAccDen
   764 00001FF1 0F84DFF6FFFF        <1>     je badAccError ;If the file is RO, fail!
   765 00001FF7 E907F7FFFF          <1>     jmp badFileError
   766                              <1>     return
    13                              <2> %%_ret:
    14 00001FFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   767                              <1> date:
   768 00001FFD 488D150CEAFFFF      <1>     lea rdx, curDate
   769 00002004 B409                <1>     mov ah, 09h
   770 00002006 CD21                <1>     int 21h
   771 00002008 B42A                <1>     mov ah, 2Ah ;DOS get date
   772 0000200A CD21                <1>     int 21h
   773                              <1> 	;AL = day of the week (0=Sunday)
   774                              <1> 	;CX = year (1980-2099)
   775                              <1> 	;DH = month (1-12)
   776                              <1> 	;DL = day (1-31)
   777 0000200C 66890D93E5FFFF      <1>     mov word [td1], cx
   778 00002013 88158FE5FFFF        <1>     mov byte [td3], dl
   779 00002019 88358AE5FFFF        <1>     mov byte [td4], dh
   780 0000201F 0FB6C0              <1>     movzx eax, al
   781 00002022 89C3                <1>     mov ebx, eax
   782 00002024 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   783 00002026 01D8                <1>     add eax, ebx ;Make it 3 times 
   784 00002028 488D15BDE9FFFF      <1>     lea rdx, dayName
   785 0000202F 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   786 00002033 B903000000          <1>     mov ecx, 3  ;Print three chars
   787 00002038 BB01000000          <1>     mov ebx, 1  ;STDOUT
   788 0000203D B440                <1>     mov ah, 40h ;Write to handle
   789 0000203F CD21                <1>     int 21h
   790 00002041 B220                <1>     mov dl, " "
   791 00002043 B402                <1>     mov ah, 02h
   792 00002045 CD21                <1>     int 21h
   793                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   794                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   795                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   796 00002047 0FB70558E5FFFF      <1>     movzx eax, word [td1]   ;Get this word
   797 0000204E C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   798 00002051 0FB61D51E5FFFF      <1>     movzx ebx, byte [td4]
   799 00002058 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   800 0000205B 09D8                <1>     or eax, ebx ;Add this date to eax
   801 0000205D 0FB61D44E5FFFF      <1>     movzx ebx, byte [td3]
   802 00002064 09D8                <1>     or eax, ebx
   803 00002066 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   804 0000206B E8E90C0000          <1>     call printDate
   805                              <1> 
   806 00002070 488D15AAE9FFFF      <1>     lea rdx, newDate
   807 00002077 B409                <1>     mov ah, 09h
   808 00002079 CD21                <1>     int 21h
   809 0000207B 488D15BEE9FFFF      <1>     lea rdx, ukDate
   810 00002082 488D05AAE9FFFF      <1>     lea rax, usDate
   811 00002089 488D1DBDE9FFFF      <1>     lea rbx, jpDate
   812 00002090 803D9FDFFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   813 00002097 480F47D3            <1>     cmova rdx, rbx
   814 0000209B 480F42D0            <1>     cmovb rdx, rax
   815 0000209F B409                <1>     mov ah, 09h
   816 000020A1 CD21                <1>     int 21h
   817                              <1> 
   818 000020A3 488D15F3E0FFFF      <1>     lea rdx, inBuffer
   819 000020AA C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   820 000020AD B40A                <1>     mov ah, 0Ah
   821 000020AF CD21                <1>     int 21h
   822 000020B1 52                  <1>     push rdx
   823 000020B2 488D1576E7FFFF      <1>     lea rdx, crlf
   824 000020B9 B409                <1>     mov ah, 09h
   825 000020BB CD21                <1>     int 21h
   826 000020BD 5A                  <1>     pop rdx
   827 000020BE 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   828                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020C2 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020C4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   829                              <1>     return
    13                              <2> %%_ret:
    14 000020C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   830                              <1> 
   831                              <1> time:
   832 000020C6 488D159CE9FFFF      <1>     lea rdx, curTime
   833 000020CD B409                <1>     mov ah, 09h
   834 000020CF CD21                <1>     int 21h
   835 000020D1 B42C                <1>     mov ah, 2Ch ;DOS get time
   836 000020D3 CD21                <1>     int 21h
   837                              <1>     ;CH = hour (0-23)
   838                              <1> 	;CL = minutes (0-59)
   839                              <1> 	;DH = seconds (0-59)
   840                              <1> 	;DL = hundredths (0-99)
   841 000020D5 880DCBE4FFFF        <1>     mov byte [td1], cl
   842 000020DB 882DC6E4FFFF        <1>     mov byte [td2], ch
   843 000020E1 8815C1E4FFFF        <1>     mov byte [td3], dl
   844 000020E7 8835BCE4FFFF        <1>     mov byte [td4], dh
   845 000020ED 0FB6C5              <1>     movzx eax, ch
   846 000020F0 E8F80D0000          <1>     call printTime.printHours
   847                              <1> 
   848 000020F5 8A1548DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   849 000020FB B402                <1>     mov ah, 02h
   850 000020FD CD21                <1>     int 21h
   851                              <1> 
   852 000020FF 0FB605A0E4FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   853 00002106 E8D20D0000          <1>     call printTime.printMinutesAlt
   854                              <1> 
   855 0000210B 8A1532DFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   856 00002111 B402                <1>     mov ah, 02h
   857 00002113 CD21                <1>     int 21h
   858                              <1> 
   859 00002115 0FB6058DE4FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   860 0000211C E8BC0D0000          <1>     call printTime.printMinutesAlt
   861                              <1> 
   862 00002121 B22E                <1>     mov dl, "."
   863 00002123 B402                <1>     mov ah, 02h
   864 00002125 CD21                <1>     int 21h
   865                              <1> 
   866 00002127 0FB6057AE4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   867 0000212E E8AA0D0000          <1>     call printTime.printMinutesAlt
   868                              <1> 
   869 00002133 488D1540E9FFFF      <1>     lea rdx, newTime
   870 0000213A B409                <1>     mov ah, 09h
   871 0000213C CD21                <1>     int 21h
   872                              <1> 
   873 0000213E 488D1558E0FFFF      <1>     lea rdx, inBuffer
   874 00002145 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   875 00002148 B40A                <1>     mov ah, 0Ah
   876 0000214A CD21                <1>     int 21h
   877 0000214C 52                  <1>     push rdx
   878 0000214D 488D15DBE6FFFF      <1>     lea rdx, crlf
   879 00002154 B409                <1>     mov ah, 09h
   880 00002156 CD21                <1>     int 21h
   881 00002158 5A                  <1>     pop rdx
   882 00002159 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   883                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000215D 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000215F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   884                              <1>     return
    13                              <2> %%_ret:
    14 00002160 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> ctty:
   886 00002161 F60552DFFFFFFF      <1>     test byte [arg1Flg], -1
   887 00002168 0F848CF5FFFF        <1>     jz badArgError
   888 0000216E F60548DFFFFFFF      <1>     test byte [arg2Flg], -1
   889 00002175 0F857FF5FFFF        <1>     jnz badArgError
   890 0000217B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   891 00002182 0FB60532DFFFFF      <1>     movzx eax, byte [arg1Off]
   892 00002189 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   893 0000218C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   894 00002190 750F                <1>     jne .noDrive
   895 00002192 0FB60523DFFFFF      <1>     movzx eax, byte [arg1FCBret]
   896 00002199 3CFF                <1>     cmp al, -1
   897 0000219B 0F8450F5FFFF        <1>     je badDriveError
   898                              <1> .noDrive:
   899                              <1>     ;Now we open the provided file
   900 000021A1 E849100000          <1>     call copyArgumentToSearchSpec
   901 000021A6 488D15B5E2FFFF      <1>     lea rdx, searchSpec
   902 000021AD B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   903 000021B2 CD21                <1>     int 21h
   904 000021B4 0F8249F5FFFF        <1>     jc badFileError
   905 000021BA 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   906 000021BD B800440000          <1>     mov eax, 4400h  ;Get device word
   907 000021C2 CD21                <1>     int 21h
   908 000021C4 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   909 000021C7 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   910                              <1>     ;Now we set this handle to be STDIO
   911 000021C9 80CA03              <1>     or dl, 3    ;Set STDIO bits
   912 000021CC 30F6                <1>     xor dh, dh
   913 000021CE B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   914 000021D3 CD21                <1>     int 21h
   915                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   916 000021D5 31C9                <1>     xor ecx, ecx    ;STDIN
   917 000021D7 B446                <1>     mov ah, 46h
   918 000021D9 CD21                <1>     int 21h
   919 000021DB FFC1                <1>     inc ecx         ;STDOUT
   920 000021DD B446                <1>     mov ah, 46h
   921 000021DF CD21                <1>     int 21h
   922 000021E1 FFC1                <1>     inc ecx         ;STDERR
   923 000021E3 B446                <1>     mov ah, 46h
   924 000021E5 CD21                <1>     int 21h
   925 000021E7 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   926 000021E9 CD21                <1>     int 21h
   927                              <1>     return
    13                              <2> %%_ret:
    14 000021EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   928                              <1> .badCharDev:
   929 000021EC 488D15B7E9FFFF      <1>     lea rdx, badDev
   930 000021F3 B409                <1>     mov ah, 09h
   931 000021F5 CD21                <1>     int 21h
   932 000021F7 B43E                <1>     mov ah, 3Eh ;Close opened handle
   933 000021F9 CD21                <1>     int 21h
   934                              <1>     return
    13                              <2> %%_ret:
    14 000021FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> 
   936                              <1> cls:  
   937 000021FC B800440000          <1>     mov eax, 4400h  ;Get device info
   938 00002201 BB01000000          <1>     mov ebx, 1      ;for handle 1
   939 00002206 CD21                <1>     int 21h         ;in dx
   940 00002208 F7C280000000        <1>     test edx, devCharDev
   941 0000220E 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   942 00002210 F7C210000000        <1>     test edx, charDevFastOut
   943 00002216 743E                <1>     jz .doAnsi
   944                              <1>     ;Test if Int 29h uses Int 30h
   945                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   946                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   947 00002218 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   948 0000221D CD21                <1>     int 21h
   949                              <1> .biosCheck:
   950 0000221F 66813BCD30          <1>     cmp word [rbx], 30CDh
   951 00002224 740C                <1>     je .biosConfirmed
   952 00002226 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   953 0000222B 7429                <1>     je .doAnsi
   954 0000222D 48FFC3              <1>     inc rbx
   955 00002230 EBED                <1>     jmp short .biosCheck
   956                              <1> .biosConfirmed:
   957                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   958 00002232 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   959 00002234 31DB                <1>     xor ebx, ebx
   960 00002236 CD30                <1>     int 30h
   961 00002238 B40F                <1>     mov ah, 0Fh ;Get screen mode
   962 0000223A CD30                <1>     int 30h
   963 0000223C 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   964 0000223F FECA                <1>     dec dl
   965 00002241 B619                <1>     mov dh, 25  ;Number of rows is standard
   966 00002243 31C0                <1>     xor eax, eax
   967 00002245 89C1                <1>     mov ecx, eax
   968 00002247 B707                <1>     mov bh, 7   ;Screen attributes
   969 00002249 B406                <1>     mov ah, 6   ;Scroll
   970 0000224B CD30                <1>     int 30h
   971 0000224D 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   972 0000224F B700                <1>     mov bh, 0   ;Page 0
   973 00002251 B402                <1>     mov ah, 2
   974 00002253 CD30                <1>     int 30h
   975                              <1>     return
    13                              <2> %%_ret:
    14 00002255 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   976                              <1> .doAnsi:
   977                              <1> ;4 chars in the ansi routine
   978                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   979                              <1> ; understand ANSI codes
   980 00002256 488D35B1EBFFFF      <1>     lea rsi, ansiCls
   981 0000225D B904000000          <1>     mov ecx, 4
   982 00002262 B406                <1>     mov ah, 06h ;Raw char output
   983                              <1> .ansiLp:
   984 00002264 AC                  <1>     lodsb   ;Get the char in 
   985 00002265 88C2                <1>     mov dl, al
   986 00002267 CD21                <1>     int 21h
   987 00002269 FFC9                <1>     dec ecx
   988 0000226B 75F7                <1>     jnz .ansiLp
   989                              <1>     return
    13                              <2> %%_ret:
    14 0000226D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   990                              <1> 
   991                              <1> break:
   992 0000226E F60545DEFFFFFF      <1>     test byte [arg1Flg], -1
   993 00002275 752D                <1>     jnz .argumentProvided
   994                              <1>     ;Here we just get the status of break
   995 00002277 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   996 0000227C CD21                <1>     int 21h
   997 0000227E 88D3                <1>     mov bl, dl
   998 00002280 488D15C5E9FFFF      <1>     lea rdx, breakIs
   999 00002287 B409                <1>     mov ah, 09h
  1000 00002289 CD21                <1>     int 21h
  1001 0000228B 488D15B5E9FFFF      <1>     lea rdx, onMes
  1002 00002292 488D0DA8E9FFFF      <1>     lea rcx, offMes
  1003 00002299 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1004 0000229B 480F44D1            <1>     cmovz rdx, rcx
  1005 0000229F B409                <1>     mov ah, 09h
  1006 000022A1 CD21                <1>     int 21h
  1007                              <1>     return
    13                              <2> %%_ret:
    14 000022A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1008                              <1> .argumentProvided:
  1009 000022A4 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1010 000022A8 AD                  <1>     lodsd   ;Read the word
  1011 000022A9 89C3                <1>     mov ebx, eax
  1012 000022AB 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1013 000022B0 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1014 000022B3 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1015 000022B8 7416                <1>     je .maybeOn
  1016 000022BA 663D4F46            <1>     cmp ax, "OF"
  1017 000022BE 7523                <1>     jne .badOnOff
  1018 000022C0 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1019 000022C5 6681FB4620          <1>     cmp bx, "F "
  1020 000022CA 7517                <1>     jne .badOnOff
  1021                              <1>     ;Set off
  1022 000022CC 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1023 000022CE EB0B                <1>     jmp short .setBreak
  1024                              <1> .maybeOn:
  1025 000022D0 663D4F4E            <1>     cmp ax, "ON"
  1026 000022D4 750D                <1>     jne .badOnOff
  1027                              <1>     ;Set on
  1028 000022D6 BA01000000          <1>     mov edx, 1
  1029                              <1> .setBreak:
  1030 000022DB B801330000          <1>     mov eax, 3301h  ;Set break
  1031 000022E0 CD21                <1>     int 21h
  1032                              <1>     return
    13                              <2> %%_ret:
    14 000022E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1033                              <1> .badOnOff:
  1034 000022E3 488D1534EBFFFF      <1>     lea rdx, badOnOff
  1035 000022EA B409                <1>     mov ah, 09h
  1036 000022EC CD21                <1>     int 21h
  1037                              <1>     return
    13                              <2> %%_ret:
    14 000022EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> verify:
  1040 000022EF F605C4DDFFFFFF      <1>     test byte [arg1Flg], -1
  1041 000022F6 752D                <1>     jnz .argumentProvided
  1042                              <1>     ;Here we just get the status of break
  1043 000022F8 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1044 000022FD CD21                <1>     int 21h
  1045 000022FF 88C3                <1>     mov bl, al
  1046 00002301 488D154EE9FFFF      <1>     lea rdx, verifyIs
  1047 00002308 B409                <1>     mov ah, 09h
  1048 0000230A CD21                <1>     int 21h
  1049 0000230C 488D1534E9FFFF      <1>     lea rdx, onMes
  1050 00002313 488D0D27E9FFFF      <1>     lea rcx, offMes
  1051 0000231A 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1052 0000231C 480F44D1            <1>     cmovz rdx, rcx
  1053 00002320 B409                <1>     mov ah, 09h
  1054 00002322 CD21                <1>     int 21h
  1055                              <1>     return
    13                              <2> %%_ret:
    14 00002324 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1056                              <1> .argumentProvided:
  1057 00002325 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1058 00002329 AD                  <1>     lodsd   ;Read the word
  1059 0000232A 89C3                <1>     mov ebx, eax
  1060 0000232C 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1061 00002331 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1062 00002334 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1063 00002339 7416                <1>     je .maybeOn
  1064 0000233B 663D4F46            <1>     cmp ax, "OF"
  1065 0000233F 751F                <1>     jne .badOnOff
  1066 00002341 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1067 00002346 6681FB4620          <1>     cmp bx, "F "
  1068 0000234B 7513                <1>     jne .badOnOff
  1069                              <1>     ;Set off
  1070 0000234D 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1071 0000234F EB0A                <1>     jmp short .setVerify
  1072                              <1> .maybeOn:
  1073 00002351 663D4F4E            <1>     cmp ax, "ON"
  1074 00002355 7509                <1>     jne .badOnOff
  1075                              <1>     ;Set on
  1076 00002357 31C0                <1>     xor eax, eax
  1077 00002359 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1078                              <1> .setVerify:
  1079 0000235B B42E                <1>     mov ah, 2Eh  ;Set Verify
  1080 0000235D CD21                <1>     int 21h
  1081                              <1>     return
    13                              <2> %%_ret:
    14 0000235F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1082                              <1> .badOnOff:
  1083 00002360 488D15B7EAFFFF      <1>     lea rdx, badOnOff
  1084 00002367 B409                <1>     mov ah, 09h
  1085 00002369 CD21                <1>     int 21h
  1086                              <1>     return
    13                              <2> %%_ret:
    14 0000236B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1087                              <1> 
  1088                              <1> rename:
  1089 0000236C F60547DDFFFFFF      <1>     test byte [arg1Flg], -1
  1090 00002373 0F8481F3FFFF        <1>     jz badArgError
  1091 00002379 F6053DDDFFFFFF      <1>     test byte [arg2Flg], -1
  1092 00002380 0F8474F3FFFF        <1>     jz badArgError    
  1093                              <1>     ;Initialise the variables!
  1094 00002386 488D351DE2FFFF      <1>     lea rsi, srcSpec
  1095 0000238D 4889351AE3FFFF      <1>     mov qword [srcPtr], rsi
  1096 00002394 488D3591E2FFFF      <1>     lea rsi, destSpec
  1097 0000239B 48893514E3FFFF      <1>     mov qword [destPtr], rsi
  1098                              <1>     ;Check the second path is just a filename!
  1099 000023A2 0FB60515DDFFFF      <1>     movzx eax, byte [arg2Off]
  1100 000023A9 4C8B055FDCFFFF      <1>     mov r8, qword [pspPtr]
  1101 000023B0 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1102 000023B7 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1103 000023BA 488D3DA1E0FFFF      <1>     lea rdi, searchSpec
  1104 000023C1 57                  <1>     push rdi
  1105 000023C2 E8CD0D0000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1106 000023C7 5F                  <1>     pop rdi
  1107 000023C8 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1108 000023CC 0F8428F3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1109 000023D2 4889FE              <1>     mov rsi, rdi
  1110                              <1> .destScan:
  1111 000023D5 AC                  <1>     lodsb   ;Get the char
  1112 000023D6 3A054FDCFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1113 000023DC 0F8418F3FFFF        <1>     je badArgError
  1114 000023E2 84C0                <1>     test al, al
  1115 000023E4 75EF                <1>     jnz .destScan
  1116                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1117 000023E6 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1118 000023EA 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1118 000023F3 3F                  <1>
  1119 000023F4 B903000000          <1>     mov ecx, 3  ;24 bytes
  1120 000023F9 F348AB              <1>     rep stosq
  1121 000023FC AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1122 000023FD 488D355EE0FFFF      <1>     lea rsi, searchSpec
  1123 00002404 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1124 00002408 B80D290000          <1>     mov eax, 290Dh
  1125 0000240D CD21                <1>     int 21h     
  1126 0000240F 50                  <1>     push rax    ;Save the WC signature
  1127 00002410 E8C20D0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1128 00002415 488D3D46E0FFFF      <1>     lea rdi, searchSpec
  1129 0000241C E80F0D0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1130 00002421 4889FE              <1>     mov rsi, rdi
  1131 00002424 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1132 00002427 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1133 0000242B B80D290000          <1>     mov eax, 290Dh
  1134 00002430 CD21                <1>     int 21h
  1135 00002432 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1136 00002433 88CC                <1>     mov ah, cl
  1137 00002435 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1138 00002438 0F84EC000000        <1>     jz .noWC
  1139 0000243E 488D351DE0FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1140                              <1>     ;Now we check if we have a path to actually handle
  1141 00002445 4839F3              <1>     cmp rbx, rsi
  1142 00002448 7444                <1>     je .noPath
  1143 0000244A C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1144 0000244E 488D350DE0FFFF      <1>     lea rsi, searchSpec
  1145 00002455 488D3D4EE1FFFF      <1>     lea rdi, srcSpec
  1146 0000245C 56                  <1>     push rsi
  1147 0000245D E8C60B0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1148 00002462 5E                  <1>     pop rsi
  1149 00002463 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1150 00002466 8A05BFDBFFFF        <1>     mov al, byte [pathSep]
  1151 0000246C AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1152 0000246D 48893D3AE2FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1153 00002474 488D3DB1E1FFFF      <1>     lea rdi, destSpec
  1154 0000247B E8A80B0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1155 00002480 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1156 00002483 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1157 00002484 48893D2BE2FFFF      <1>     mov qword [destPtr], rdi
  1158 0000248B 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1159                              <1> .noPath:
  1160                              <1>     ;Now we have where to copy the files to, we can start our work!
  1161 0000248E E8300E0000          <1>     call setDTA
  1162 00002493 488D15C8DFFFFF      <1>     lea rdx, searchSpec
  1163 0000249A 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1164 0000249C B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1165 000024A1 CD21                <1>     int 21h
  1166 000024A3 0F8263F2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1167                              <1> .wcLoop:
  1168                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1169 000024A9 488D353EDCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1170 000024B0 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1171 000024B4 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1172 000024B9 CD21                <1>     int 21h 
  1173                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1174 000024BB 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1175 000024BF 488D3DF8E1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1176 000024C6 57                  <1>     push rdi
  1177 000024C7 48A5                <1>     movsq
  1178 000024C9 66A5                <1>     movsw
  1179 000024CB A4                  <1>     movsb
  1180 000024CC 5F                  <1>     pop rdi
  1181 000024CD 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1182 000024D1 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1183                              <1> .wcNameMake:
  1184 000024D6 AC                  <1>     lodsb   ;Get the char from the source string
  1185 000024D7 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1186 000024DA 7502                <1>     jne .noStore    ;Dont store the char there
  1187 000024DC 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1188                              <1> .noStore:
  1189 000024DE 48FFC7              <1>     inc rdi ;Goto next char position
  1190 000024E1 FFC9                <1>     dec ecx
  1191 000024E3 75F1                <1>     jnz .wcNameMake
  1192                              <1> ;renName now has the FCB name for the file we wish to make!
  1193                              <1> ;Now make the two paths!
  1194 000024E5 488D3502DCFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1195 000024EC 488B3DBBE1FFFF      <1>     mov rdi, qword [srcPtr]
  1196 000024F3 E8300B0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1197 000024F8 488D35BFE1FFFF      <1>     lea rsi, renName
  1198 000024FF 488B3DB0E1FFFF      <1>     mov rdi, qword [destPtr]
  1199 00002506 E8490C0000          <1>     call FCBToAsciiz
  1200 0000250B 488D1598E0FFFF      <1>     lea rdx, srcSpec
  1201 00002512 488D3D13E1FFFF      <1>     lea rdi, destSpec
  1202 00002519 B800560000          <1>     mov eax, 5600h
  1203 0000251E CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1204 00002520 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1205 00002525 CD21                <1>     int 21h
  1206 00002527 7380                <1>     jnc .wcLoop     ;And process it too!
  1207                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00002529 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .noWC:
  1209 0000252A E8A80C0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1210 0000252F 0FB60588DBFFFF      <1>     movzx eax, byte [arg2Off]
  1211 00002536 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1212 0000253D 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1213 00002540 488D3DE5E0FFFF      <1>     lea rdi, destSpec
  1214 00002547 57                  <1>     push rdi
  1215 00002548 E8470C0000          <1>     call cpDelimPathToBufz
  1216 0000254D 5F                  <1>     pop rdi
  1217 0000254E 488D150DDFFFFF      <1>     lea rdx, searchSpec
  1218 00002555 B800560000          <1>     mov eax, 5600h
  1219 0000255A CD21                <1>     int 21h
  1220                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000255C 73(29)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1221 0000255E E9A9F1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1222                              <1> 
  1223                              <1> 
  1224                              <1> touch:
  1225                              <1> ;Temporarily used to create files
  1226 00002563 F60550DBFFFFFF      <1>     test byte [arg1Flg], -1
  1227 0000256A 0F848AF1FFFF        <1>     jz badArgError
  1228 00002570 E8620C0000          <1>     call buildCommandPath
  1229 00002575 488D15E6DEFFFF      <1>     lea rdx, searchSpec
  1230 0000257C B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1231 00002581 31C9                <1>     xor ecx, ecx
  1232 00002583 CD21                <1>     int 21h
  1233 00002585 721D                <1>     jc .touch1
  1234                              <1> .touchClose:
  1235 00002587 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1236 0000258A B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1237 0000258F CD2F                <1>     int 2fh
  1238 00002591 89C1                <1>     mov ecx, eax    ;Move the time here
  1239 00002593 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1240 00002595 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1241 0000259A CD21                <1>     int 21h
  1242 0000259C B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1243 000025A1 CD21                <1>     int 21h
  1244                              <1>     return
    13                              <2> %%_ret:
    14 000025A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245                              <1> .touch1:
  1246 000025A4 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1247 000025A6 7509                <1>     jne .touchError ;If not, this is a proper error!
  1248 000025A8 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1249 000025AD CD21                <1>     int 21h
  1250 000025AF 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1251                              <1> .touchError:
  1252 000025B1 3C03                <1>     cmp al, errPnf
  1253 000025B3 0F8441F1FFFF        <1>     je badArgError
  1254 000025B9 3C02                <1>     cmp al, errFnf
  1255 000025BB 0F8454F1FFFF        <1>     je badFnf
  1256 000025C1 E910F1FFFF          <1>     jmp badAccError
  1257                              <1>     
  1258                              <1> 
  1259                              <1> join:
  1260                              <1> ;Mock join command, to test join. Make an external command.
  1261                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1262 000025C6 F605AF000000FF      <1>     test byte [.joinOn], -1
  1263 000025CD 743D                <1>     jz .okJoin
  1264                              <1> .joindisable:
  1265 000025CF B800520000          <1>     mov eax, 5200h  
  1266 000025D4 CD21                <1>     int 21h
  1267                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1268 000025D6 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1269 000025DB CD2A                <1>     int 2Ah
  1270 000025DD 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1271 000025E1 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1272 000025E5 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1273 000025EB C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1274 000025EE C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1275 000025F2 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1276 000025F5 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1277 000025FA CD2A                <1>     int 2Ah
  1278 000025FC C6057900000000      <1>     mov byte [.joinOn], 0
  1279 00002603 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1280 0000260A EB45                <1>     jmp short .joinExit
  1281                              <1> .okJoin:
  1282 0000260C C60569000000FF      <1>     mov byte [.joinOn], -1
  1283 00002613 B800520000          <1>     mov eax, 5200h  
  1284 00002618 CD21                <1>     int 21h
  1285 0000261A 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1286 0000261E 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1287                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1288 00002622 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1289 00002627 CD2A                <1>     int 2Ah
  1290 00002629 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1291 0000262F 4889DF              <1>     mov rdi, rbx
  1292 00002632 488D3544000000      <1>     lea rsi, .joinPath
  1293 00002639 B90C000000          <1>     mov ecx, .joinPathL
  1294 0000263E F3A4                <1>     rep movsb   ;Copy chars over
  1295 00002640 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1296 00002643 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1297 00002648 CD2A                <1>     int 2Ah
  1298 0000264A 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1299                              <1> .joinExit:
  1300 00002651 B800090000          <1>     mov eax, 0900h
  1301 00002656 CD21                <1>     int 21h
  1302                              <1>     return
    13                              <2> %%_ret:
    14 00002658 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1303 00002659 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1303 00002662 61626C65640D0A24    <1>
  1304 0000266A 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1304 00002673 7361626C65640D0A24  <1>
  1305 0000267C 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1306 0000267D 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1306 00002686 535400              <1>
  1307                              <1> .joinPathL  equ $ - .joinPath 
  1308                              <1> 
  1309                              <1> subst:
  1310                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1311                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1312 00002689 F605D3000000FF      <1>     test byte [.substOn], -1
  1313 00002690 7443                <1>     jz .okSubst
  1314                              <1> .substdisable:
  1315 00002692 B800520000          <1>     mov eax, 5200h  
  1316 00002697 CD21                <1>     int 21h
  1317                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1318 00002699 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1319 0000269E CD2A                <1>     int 2Ah
  1320 000026A0 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1321 000026A4 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1322 000026AB 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1323 000026B1 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1324 000026B4 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1325 000026B8 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1326 000026BE B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1327 000026C3 CD2A                <1>     int 2Ah
  1328 000026C5 C6059700000000      <1>     mov byte [.substOn], 0
  1329 000026CC 488D157D000000      <1>     lea rdx, .substDisableMsg
  1330 000026D3 EB61                <1>     jmp short .substExit
  1331                              <1> .okSubst:
  1332 000026D5 C60587000000FF      <1>     mov byte [.substOn], -1
  1333 000026DC B800520000          <1>     mov eax, 5200h  
  1334 000026E1 CD21                <1>     int 21h
  1335 000026E3 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1336 000026E8 CD2A                <1>     int 2Ah
  1337 000026EA 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1338 000026EE 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1339 000026F5 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1340 000026F9 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1341 00002700 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1342 00002704 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1343                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1344 0000270B 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1345 00002711 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1346 00002717 4889DF              <1>     mov rdi, rbx
  1347 0000271A 488D3543000000      <1>     lea rsi, .substPath
  1348 00002721 B90C000000          <1>     mov ecx, .substPathL
  1349 00002726 F3A4                <1>     rep movsb   ;Copy chars over
  1350 00002728 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1351 0000272D CD2A                <1>     int 2Ah
  1352 0000272F 488D1508000000      <1>     lea rdx, .substEnableMsg
  1353                              <1> .substExit:
  1354 00002736 B800090000          <1>     mov eax, 0900h
  1355 0000273B CD21                <1>     int 21h
  1356                              <1>     return
    13                              <2> %%_ret:
    14 0000273D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1357 0000273E 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1357 00002747 6E61626C65640D0A24  <1>
  1358 00002750 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1358 00002759 697361626C65640D0A- <1>
  1358 00002762 24                  <1>
  1359 00002763 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1360 00002764 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1360 0000276D 535400              <1>
  1361                              <1> .substPathL  equ $ - .substPath 
  1362                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1363                              <1> truename:
  1364 00002770 F60543D9FFFFFF      <1>     test byte [arg1Flg], -1
  1365 00002777 0F847DEFFFFF        <1>     jz badArgError
  1366 0000277D E8550A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1367 00002782 488D35D9DCFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1368 00002789 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1369 0000278C B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1370 00002791 CD21                <1>     int 21h
  1371 00002793 730D                <1>     jnc .writePath
  1372 00002795 3C02                <1>     cmp al, errFnf
  1373 00002797 0F8466EFFFFF        <1>     je badFileError
  1374 0000279D E946EFFFFF          <1>     jmp badParamError
  1375                              <1> .writePath:
  1376 000027A2 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1377 000027A5 B9FFFFFFFF          <1>     mov ecx, -1
  1378 000027AA 30C0                <1>     xor al, al
  1379 000027AC F2AE                <1>     repne scasb     ;Get the new len
  1380 000027AE F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1381 000027B0 FFC9                <1>     dec ecx
  1382 000027B2 BB01000000          <1>     mov ebx, 01
  1383 000027B7 B440                <1>     mov ah, 40h
  1384 000027B9 CD21                <1>     int 21h
  1385 000027BB E88A050000          <1>     call printCRLF
  1386                              <1>     return
    13                              <2> %%_ret:
    14 000027C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> 
  1388                              <1> label:
  1389                              <1> ;Displays/Changes/Deletes the file label
  1390 000027C1 488D1508000000      <1>     lea rdx, .l1
  1391 000027C8 B800090000          <1>     mov eax, 0900h
  1392 000027CD CD21                <1>     int 21h
  1393                              <1>     return
    13                              <2> %%_ret:
    14 000027CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394 000027D0 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1394 000027D9 6E20756E696D706C65- <1>
  1394 000027E2 6D656E7465640D0A24  <1>
  1395                              <1> 
  1396                              <1> mklbl:
  1397                              <1>     ;lea rdx, .l1
  1398                              <1>     ;mov cx, 08h ;Make a label
  1399                              <1>     ;mov eax, 3C00h
  1400                              <1>     ;int 21h
  1401                              <1> 
  1402                              <1>     ;mov ebx, eax
  1403                              <1>     ;mov eax, 3E00h  ;Close the handle
  1404                              <1>     ;int 21h
  1405                              <1>     ;return
  1406                              <1> 
  1407                              <1> ;.l1: db "TESTLABEL",0
  1408 000027EB 488D1508000000      <1>     lea rdx, .l1
  1409 000027F2 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1410 000027F7 CD21                <1>     int 21h
  1411                              <1>     return
    13                              <2> %%_ret:
    14 000027F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1412                              <1> .l1:
  1413                              <1>     istruc exFcb
  1414 000027FA FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1415 000027FB 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1416 00002801 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1417 00002802 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1418 0000280A 4C2020              <1>     at exFcb.fileext,   db "L  "
  1419 0000280D 00000000            <1>     at exFcb.curBlock,  dd 0
  1420 00002811 00<rep 15h>         <1>     iend 
  1421                              <1> rmlbl:
  1422 00002826 488D1508000000      <1>     lea rdx, .l1
  1423 0000282D B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1424 00002832 CD21                <1>     int 21h
  1425                              <1>     return
    13                              <2> %%_ret:
    14 00002834 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1426                              <1> .l1:    ;FCB to volume label
  1427                              <1>     istruc exFcb
  1428 00002835 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1429 00002836 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1430 0000283C 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1431 0000283D 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1432 00002845 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1433 00002848 00000000            <1>     at exFcb.curBlock,  dd 0
  1434 0000284C 00<rep 15h>         <1>     iend 
  1435                              <1> 
  1436                              <1> rnlbl:
  1437 00002861 488D1508000000      <1>     lea rdx, .l1
  1438 00002868 B800170000          <1>     mov eax, 1700h
  1439 0000286D CD21                <1>     int 21h
  1440                              <1>     return
    13                              <2> %%_ret:
    14 0000286F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1441                              <1> .l1:
  1442                              <1>     istruc exRenFcb
  1443 00002870 FF                  <1>     at exRenFcb.extSig,     db -1
  1444 00002871 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1445 00002877 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1446 00002878 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1447 00002880 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1448 00002883 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1448 0000288C 4C414245            <1>
  1449 00002890 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1450 00002893 00<rep 4h>          <1>     iend
  1451                              <1> volume:
  1452                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1453 00002897 F6051FD8FFFFFF      <1>     test byte [arg2Flg], -1
  1454 0000289E 0F8556EEFFFF        <1>     jnz badArgError
  1455 000028A4 F6050FD8FFFFFF      <1>     test byte [arg1Flg], -1
  1456 000028AB 7507                <1>     jnz .notCurrentDrive
  1457 000028AD E871070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1458 000028B2 EB31                <1>     jmp short .dirEP
  1459                              <1> .notCurrentDrive:
  1460 000028B4 E81E090000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1461 000028B9 488D35A2DBFFFF      <1>     lea rsi, searchSpec
  1462 000028C0 E898070000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1463 000028C5 66AD                <1>     lodsw                   ;Get this word
  1464 000028C7 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1465 000028CA 0F852AEEFFFF        <1>     jne badArgError
  1466 000028D0 8A05E6D7FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1467 000028D6 A8FF                <1>     test al, -1
  1468 000028D8 0F8513EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1469 000028DE 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1470 000028E3 FFC8                <1>     dec eax ;Convert to 0 based number
  1471                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1472 000028E5 E8D9090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1473 000028EA 488D1589DCFFFF      <1>     lea rdx, volFcb
  1474 000028F1 FFC0                <1>     inc eax ;Get 1 based drive number
  1475 000028F3 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1476 000028F5 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1477 000028F8 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1478 000028FD CD21                <1>     int 21h
  1479 000028FF 50                  <1>     push rax
  1480                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1481 00002900 488D1528DFFFFF      <1>     lea rdx, crlf
  1482 00002907 B409                <1>     mov ah, 09h
  1483 00002909 CD21                <1>     int 21h
  1484 0000290B 488D15A2E1FFFF      <1>     lea rdx, volMes
  1485 00002912 B409                <1>     mov ah, 09h
  1486 00002914 CD21                <1>     int 21h
  1487 00002916 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1488 00002918 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1489 0000291B B402                <1>     mov ah, 02h
  1490 0000291D CD21                <1>     int 21h
  1491 0000291F 58                  <1>     pop rax
  1492 00002920 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1493 00002922 7409                <1>     jz .volIDOk
  1494 00002924 488D15A0E1FFFF      <1>     lea rdx, volNo
  1495 0000292B EB19                <1>     jmp short .volEndPrint
  1496                              <1> .volIDOk:
  1497 0000292D 488D1592E1FFFF      <1>     lea rdx, volOk
  1498 00002934 B409                <1>     mov ah, 09h
  1499 00002936 CD21                <1>     int 21h
  1500 00002938 C605A4D7FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1501 0000293F 488D1592D7FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1502                              <1> .volEndPrint:
  1503 00002946 B409                <1>     mov ah, 09h
  1504 00002948 CD21                <1>     int 21h
  1505 0000294A 488D15DEDEFFFF      <1>     lea rdx, crlf
  1506 00002951 B409                <1>     mov ah, 09h
  1507 00002953 CD21                <1>     int 21h
  1508                              <1>     return
    13                              <2> %%_ret:
    14 00002955 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1509                              <1> 
  1510                              <1> version:
  1511 00002956 488D15D2DEFFFF      <1>     lea rdx, crlf
  1512 0000295D B409                <1>     mov ah, 09h
  1513 0000295F CD21                <1>     int 21h
  1514 00002961 488D153AE1FFFF      <1>     lea rdx, dosVer
  1515 00002968 B409                <1>     mov ah, 09h
  1516 0000296A CD21                <1>     int 21h
  1517 0000296C E80C000000          <1>     call .printVersionNumber
  1518 00002971 488D15B7DEFFFF      <1>     lea rdx, crlf
  1519 00002978 B409                <1>     mov ah, 09h
  1520 0000297A CD21                <1>     int 21h
  1521                              <1>     return
    13                              <2> %%_ret:
    14 0000297C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1522                              <1> .printVersionNumber:
  1523 0000297D B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1524 0000297F CD21                <1>     int 21h
  1525 00002981 50                  <1>     push rax
  1526 00002982 0FB6C0              <1>     movzx eax, al
  1527 00002985 E886080000          <1>     call printDecimalWord
  1528 0000298A B22E                <1>     mov dl, "."
  1529 0000298C B402                <1>     mov ah, 02h
  1530 0000298E CD21                <1>     int 21h
  1531 00002990 58                  <1>     pop rax
  1532 00002991 0FB6C4              <1>     movzx eax, ah
  1533 00002994 E877080000          <1>     call printDecimalWord
  1534                              <1>     return
    13                              <2> %%_ret:
    14 00002999 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1535                              <1> 
  1536                              <1> 
  1537                              <1> memory:
  1538 0000299A 488B1D7ED6FFFF      <1>     mov rbx, qword [sysVars]
  1539 000029A1 4885DB              <1>     test rbx, rbx
  1540 000029A4 7510                <1>     jnz .sysvarsOK
  1541 000029A6 488D15D8E3FFFF      <1>     lea rdx, memBad0
  1542 000029AD B409                <1>     mov ah, 09h
  1543 000029AF CD21                <1>     int 21h
  1544 000029B1 E9FD080000          <1>     jmp freezePC.altEP
  1545                              <1> .sysvarsOK:
  1546                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1547                              <1>     ; and rcx to store Application memory
  1548 000029B6 31F6                <1>     xor esi, esi
  1549 000029B8 31FF                <1>     xor edi, edi
  1550 000029BA 31ED                <1>     xor ebp, ebp
  1551 000029BC 31C9                <1>     xor ecx, ecx
  1552 000029BE 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1553 000029C2 488B1B              <1>     mov rbx, qword [rbx]
  1554                              <1> .memLp:
  1555 000029C5 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1556 000029C8 7409                <1>     je .validMCB
  1557 000029CA 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1558 000029CD 0F8501010000        <1>     jne .badMCBFound
  1559                              <1> .validMCB:
  1560 000029D3 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1561 000029D6 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1562 000029DA 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1563 000029E2 7505                <1>     jne .notDOS
  1564 000029E4 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1565 000029E7 EB21                <1>     jmp short .gotoNext
  1566                              <1> .notDOS:
  1567 000029E9 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1568 000029F1 7505                <1>     jne .notFree
  1569 000029F3 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1570 000029F6 EB12                <1>     jmp short .gotoNext
  1571                              <1> .notFree:
  1572 000029F8 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1573 00002A00 7505                <1>     jne .notHole
  1574 00002A02 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1575 00002A05 EB03                <1>     jmp short .gotoNext
  1576                              <1> .notHole:
  1577 00002A07 4801C1              <1>     add rcx, rax    ;Add to Application count
  1578                              <1> .gotoNext:
  1579 00002A0A 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1580 00002A0D 7407                <1>     je .endOfWalk
  1581 00002A0F 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1582 00002A14 EBAF                <1>     jmp short .memLp
  1583                              <1> .endOfWalk:
  1584                              <1>     
  1585 00002A16 488D15C9E2FFFF      <1>     lea rdx, memDOS
  1586 00002A1D B409                <1>     mov ah, 09h
  1587 00002A1F CD21                <1>     int 21h
  1588 00002A21 4889F0              <1>     mov rax, rsi
  1589 00002A24 E89D000000          <1>     call .mcbPrintAmount
  1590 00002A29 488D154EE3FFFF      <1>     lea rdx, memByte
  1591 00002A30 B409                <1>     mov ah, 09h
  1592 00002A32 CD21                <1>     int 21h
  1593                              <1> 
  1594 00002A34 4885ED              <1>     test rbp, rbp
  1595 00002A37 741E                <1>     jz .skipHole
  1596 00002A39 488D15F2E2FFFF      <1>     lea rdx, memHole
  1597 00002A40 B409                <1>     mov ah, 09h
  1598 00002A42 CD21                <1>     int 21h
  1599 00002A44 4889E8              <1>     mov rax, rbp
  1600 00002A47 E87A000000          <1>     call .mcbPrintAmount
  1601 00002A4C 488D152BE3FFFF      <1>     lea rdx, memByte
  1602 00002A53 B409                <1>     mov ah, 09h
  1603 00002A55 CD21                <1>     int 21h
  1604                              <1> .skipHole:
  1605                              <1> 
  1606 00002A57 488D15AEE2FFFF      <1>     lea rdx, memApp
  1607 00002A5E B409                <1>     mov ah, 09h
  1608 00002A60 CD21                <1>     int 21h
  1609 00002A62 4889C8              <1>     mov rax, rcx
  1610 00002A65 E85C000000          <1>     call .mcbPrintAmount
  1611 00002A6A 488D150DE3FFFF      <1>     lea rdx, memByte
  1612 00002A71 B409                <1>     mov ah, 09h
  1613 00002A73 CD21                <1>     int 21h
  1614                              <1> 
  1615 00002A75 488D15DCE2FFFF      <1>     lea rdx, memFree
  1616 00002A7C B409                <1>     mov ah, 09h
  1617 00002A7E CD21                <1>     int 21h
  1618 00002A80 4889F8              <1>     mov rax, rdi
  1619 00002A83 E83E000000          <1>     call .mcbPrintAmount
  1620 00002A88 488D15EFE2FFFF      <1>     lea rdx, memByte
  1621 00002A8F B409                <1>     mov ah, 09h
  1622 00002A91 CD21                <1>     int 21h
  1623                              <1> 
  1624 00002A93 488D1526E2FFFF      <1>     lea rdx, memSys
  1625 00002A9A B409                <1>     mov ah, 09h
  1626 00002A9C CD21                <1>     int 21h
  1627 00002A9E 4889F0              <1>     mov rax, rsi
  1628 00002AA1 4801F8              <1>     add rax, rdi
  1629 00002AA4 4801C8              <1>     add rax, rcx
  1630 00002AA7 4801E8              <1>     add rax, rbp
  1631 00002AAA E817000000          <1>     call .mcbPrintAmount
  1632 00002AAF 488D15C8E2FFFF      <1>     lea rdx, memByte
  1633 00002AB6 B409                <1>     mov ah, 09h
  1634 00002AB8 CD21                <1>     int 21h
  1635                              <1> 
  1636 00002ABA 488D156EDDFFFF      <1>     lea rdx, crlf
  1637 00002AC1 B409                <1>     mov ah, 09h
  1638 00002AC3 CD21                <1>     int 21h
  1639                              <1>     return
    13                              <2> %%_ret:
    14 00002AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1640                              <1> 
  1641                              <1> .mcbPrintAmount:
  1642 00002AC6 51                  <1>     push rcx
  1643 00002AC7 56                  <1>     push rsi
  1644 00002AC8 57                  <1>     push rdi
  1645 00002AC9 55                  <1>     push rbp
  1646 00002ACA E841070000          <1>     call printDecimalWord
  1647 00002ACF 5D                  <1>     pop rbp
  1648 00002AD0 5F                  <1>     pop rdi
  1649 00002AD1 5E                  <1>     pop rsi
  1650 00002AD2 59                  <1>     pop rcx
  1651                              <1>     return
    13                              <2> %%_ret:
    14 00002AD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1652                              <1> .badMCBFound:
  1653 00002AD4 488D15EAE2FFFF      <1>     lea rdx, memBad2
  1654 00002ADB B409                <1>     mov ah, 09h
  1655 00002ADD CD21                <1>     int 21h
  1656 00002ADF E9CF070000          <1>     jmp freezePC.altEP
  1657                              <1> 
  1658                              <1> type:
  1659 00002AE4 F605CFD5FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1660 00002AEB 0F8409ECFFFF        <1>     jz badArgError
  1661 00002AF1 F605C5D5FFFFFF      <1>     test byte [arg2Flg], -1
  1662 00002AF8 0F85FCEBFFFF        <1>     jnz badArgError         ;If this set, error
  1663 00002AFE 4C8B050AD5FFFF      <1>     mov r8, [pspPtr]
  1664 00002B05 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1665 00002B0C 0FB605A8D5FFFF      <1>     movzx eax, byte [arg1Off]
  1666 00002B13 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1667 00002B16 803E0D              <1>     cmp byte [rsi], CR
  1668 00002B19 0F84DBEBFFFF        <1>     je badArgError
  1669 00002B1F 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1670 00002B23 750F                <1>     jne .noDrive
  1671 00002B25 0FB60590D5FFFF      <1>     movzx eax, byte [arg1FCBret]
  1672 00002B2C 3CFF                <1>     cmp al, -1
  1673 00002B2E 0F84BDEBFFFF        <1>     je badDriveError
  1674                              <1> .noDrive:
  1675                              <1>     ;Now we open the provided file
  1676 00002B34 E89E060000          <1>     call buildCommandPath
  1677 00002B39 488D1522D9FFFF      <1>     lea rdx, searchSpec
  1678 00002B40 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1679 00002B45 CD21                <1>     int 21h
  1680 00002B47 0F82B6EBFFFF        <1>     jc badFileError
  1681 00002B4D 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1682 00002B54 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1683                              <1> .lp:
  1684 00002B57 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1685 00002B5C B43F                <1>     mov ah, 3Fh ;Read handle
  1686 00002B5E CD21                <1>     int 21h
  1687 00002B60 89C1                <1>     mov ecx, eax
  1688 00002B62 67E317              <1>     jecxz .exit
  1689 00002B65 53                  <1>     push rbx    ;Save the original in handle
  1690 00002B66 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1691 00002B6B B440                <1>     mov ah, 40h
  1692 00002B6D CD21                <1>     int 21h
  1693 00002B6F 5B                  <1>     pop rbx ;Get back the original read handle
  1694 00002B70 720F                <1>     jc .exitBad
  1695 00002B72 39C8                <1>     cmp eax, ecx
  1696 00002B74 74E1                <1>     je .lp
  1697 00002B76 FFC9                <1>     dec ecx ;One less for a ^Z
  1698 00002B78 39C8                <1>     cmp eax, ecx
  1699 00002B7A 7505                <1>     jne .exitBad
  1700                              <1> .exit:
  1701 00002B7C B43E                <1>     mov ah, 3Eh ;Close handle
  1702 00002B7E CD21                <1>     int 21h
  1703                              <1>     return
    13                              <2> %%_ret:
    14 00002B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1704                              <1> .exitBad:
  1705                              <1>     ;Print a disk error message... use a table to build the message but for
  1706                              <1>     ; now, just exit
  1707                              <1>     ;If it is a char device, don't print a error
  1708 00002B81 EBF9                <1>     jmp short .exit
  1709                              <1> 
  1710                              <1> exit:
  1711 00002B83 F605A3D4FFFFFF      <1>     test byte [permaSwitch], -1
  1712                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B8A 75(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1713 00002B8C 488B0584D4FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1714 00002B93 483DFFFFFFFF        <1>     cmp rax, -1
  1715                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002B99 74(80)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1716 00002B9B 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1717                              <1> 
  1718 00002B9F 488B1588D4FFFF      <1>     mov rdx, qword [parentInt22]
  1719 00002BA6 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1720 00002BAA B822250000          <1>     mov eax, 2522h
  1721 00002BAF CD21                <1>     int 21h
  1722                              <1> 
  1723 00002BB1 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1724 00002BB6 CD21                <1>     int 21h
  1725                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002BB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1726                              <1> 
  1727                              <1> launchChild:
  1728                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1729                              <1> ;Here we must search the CWD or all path componants before failing
  1730                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1731 00002BB9 E805070000          <1>     call setDTA
  1732                              <1> 
  1733 00002BBE 8B0505D5FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1734 00002BC4 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1735 00002BC9 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1736 00002BCE 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1737 00002BD3 741D                <1>     je .noExt
  1738 00002BD5 E866E6FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1739 00002BDA 0F855E010000        <1>     jnz .dfltErrExit
  1740                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1741 00002BE0 0F8258010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1742                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1743                              <1>     ;So it is a com or exe that we are searching for for now
  1744 00002BE6 488D3DB4D6FFFF      <1>     lea rdi, cmdPathSpec
  1745 00002BED 4889FA              <1>     mov rdx, rdi
  1746 00002BF0 EB24                <1>     jmp short .search
  1747                              <1> .noExt:
  1748                              <1>     ;If the filename has no extension, append a .*
  1749                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1750 00002BF2 31DB                <1>     xor ebx, ebx
  1751 00002BF4 488D3DA6D6FFFF      <1>     lea rdi, cmdPathSpec
  1752 00002BFB 4889FA              <1>     mov rdx, rdi
  1753 00002BFE 31C0                <1>     xor eax, eax
  1754 00002C00 B9FFFFFFFF          <1>     mov ecx, -1
  1755 00002C05 F2AE                <1>     repne scasb
  1756 00002C07 48FFCF              <1>     dec rdi ;Point to the terminating null
  1757 00002C0A 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1758 00002C0D 66B82E2A            <1>     mov ax, ".*"
  1759 00002C11 66AB                <1>     stosw
  1760 00002C13 30C0                <1>     xor al, al  ;Store terminating null
  1761 00002C15 AA                  <1>     stosb
  1762                              <1> .search:
  1763 00002C16 B906000000          <1>     mov ecx, dirIncFiles    ;Normal, RO, Hidden and System files
  1764 00002C1B B8004E0000          <1>     mov eax, 4E00h ;Find First File
  1765 00002C20 CD21                <1>     int 21h
  1766 00002C22 0F8216010000        <1>     jc .dfltErrExit
  1767 00002C28 E8C4000000          <1>     call .noExtCheckExt
  1768                              <1> .moreSearch:
  1769 00002C2D B44F                <1>     mov ah, 4Fh
  1770 00002C2F CD21                <1>     int 21h
  1771 00002C31 7207                <1>     jc .noMoreFiles
  1772 00002C33 E8B9000000          <1>     call .noExtCheckExt
  1773 00002C38 EBF3                <1>     jmp short .moreSearch
  1774                              <1> .noMoreFiles:
  1775 00002C3A 85DB                <1>     test ebx, ebx
  1776 00002C3C 0F84FC000000        <1>     jz .dfltErrExit
  1777                              <1> ;So we have a valid executable
  1778 00002C42 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1779 00002C45 F7C301000000        <1>     test ebx, 1
  1780 00002C4B 7407                <1>     jz .launchexebat
  1781 00002C4D B82E434F4D          <1>     mov eax, ".COM"
  1782 00002C52 EB14                <1>     jmp short .buildTail
  1783                              <1> .launchexebat:
  1784 00002C54 F7C302000000        <1>     test ebx, 2
  1785 00002C5A 7407                <1>     jz .launchbat
  1786 00002C5C B82E455845          <1>     mov eax, ".EXE"
  1787 00002C61 EB05                <1>     jmp short .buildTail
  1788                              <1> .launchbat:
  1789                              <1> ;Temporary For BAT
  1790 00002C63 E9D6000000          <1>     jmp .dfltErrExit
  1791                              <1> .buildTail:
  1792 00002C68 AB                  <1>     stosd
  1793 00002C69 31C0                <1>     xor eax, eax
  1794 00002C6B AA                  <1>     stosb   ;Store the terminating null
  1795                              <1> ;Now we build the cmdtail properly
  1796 00002C6C 488D3DA8D4FFFF      <1>     lea rdi, cmdTail
  1797 00002C73 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1798 00002C76 B910000000          <1>     mov ecx, 128/8
  1799 00002C7B F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1800 00002C7E 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1801 00002C82 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1802 00002C89 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1803 00002C8A 88C4                <1>     mov ah, al  ;Move the number into ah
  1804 00002C8C 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1805                              <1>     ;Skip the parsed command name
  1806                              <1> .passName:
  1807 00002C8E AC                  <1>     lodsb   ;Get the char in al
  1808 00002C8F FEC5                <1>     inc ch
  1809 00002C91 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1810 00002C94 741D                <1>     je short .finishBuildingTailNoCR
  1811 00002C96 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1812 00002C98 7418                <1>     je short .finishBuildingTail
  1813 00002C9A 3C20                <1>     cmp al, SPC
  1814 00002C9C 75F0                <1>     jne short .passName
  1815                              <1>     ;Now we copy the name 
  1816 00002C9E E8BA030000          <1>     call skipDelimiters ;Start by skipping spaces (there are no embedded tabs)
  1817                              <1>     ;rsi points to the first non-space char
  1818                              <1> .copyTail:
  1819 00002CA3 AC                  <1>     lodsb
  1820 00002CA4 3C0D                <1>     cmp al, CR
  1821 00002CA6 740A                <1>     je short .finishBuildingTail
  1822 00002CA8 AA                  <1>     stosb
  1823 00002CA9 FEC1                <1>     inc cl
  1824 00002CAB 80F97F              <1>     cmp cl, 127 ;Exit condition
  1825 00002CAE 75F3                <1>     jne .copyTail
  1826 00002CB0 EB01                <1>     jmp short .finishBuildingTailNoCR
  1827                              <1> .finishBuildingTail:
  1828 00002CB2 AA                  <1>     stosb   ;Store the CR
  1829                              <1> .finishBuildingTailNoCR:
  1830 00002CB3 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1831                              <1> .launch:
  1832 00002CB5 488D1D3FD4FFFF      <1>     lea rbx, launchBlock
  1833 00002CBC 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1834 00002CC0 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1835 00002CC3 488D0551D4FFFF      <1>     lea rax, cmdTail
  1836 00002CCA 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1837 00002CCE 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1838 00002CD2 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1839 00002CD6 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1840 00002CDA 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1841 00002CDE 488D15BCD5FFFF      <1>     lea rdx, cmdPathSpec
  1842 00002CE5 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1843 00002CEA CD21                <1>     int 21h
  1844 00002CEC E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1845                              <1> .noExtCheckExt:
  1846 00002CF1 488D35F6D3FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1847 00002CF8 488D3DF1D5FFFF      <1>     lea rdi, fcbCmdSpec
  1848 00002CFF E8E2030000          <1>     call asciiFilenameToFCB
  1849 00002D04 8B05EED5FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1850 00002D0A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1851 00002D0F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1852 00002D14 3D434F4D20          <1>     cmp eax, "COM "
  1853 00002D19 7507                <1>     jne .neceexe
  1854 00002D1B 81CB01000000        <1>     or ebx, 1
  1855                              <1>     return
    13                              <2> %%_ret:
    14 00002D21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1856                              <1> .neceexe:
  1857 00002D22 3D45584520          <1>     cmp eax, "EXE "
  1858 00002D27 7507                <1>     jne .necebat
  1859 00002D29 81CB02000000        <1>     or ebx, 2
  1860                              <1>     return
    13                              <2> %%_ret:
    14 00002D2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1861                              <1> .necebat:
  1862 00002D30 3D42415420          <1>     cmp eax, "BAT "
  1863                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D35 75(2F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1864 00002D37 81CB04000000        <1>     or ebx, 4
  1865                              <1>     return
    13                              <2> %%_ret:
    14 00002D3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1866                              <1> 
  1867                              <1> .dfltErrExit:
  1868 00002D3E 488D1547DBFFFF      <1>     lea rdx, badCmd
  1869 00002D45 B409                <1>     mov ah, 09h
  1870 00002D47 CD21                <1>     int 21h
  1871                              <1>     return
    13                              <2> %%_ret:
    14 00002D49 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002D4A 488D15DEDAFFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002D51 B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002D56 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002D58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002D59 53                  <1>     push rbx
    17 00002D5A 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002D5C 803DD3D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002D63 7240                <1>     jb .usDate
    20 00002D65 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002D67 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002D6C E8B0000000          <1>     call .printFirst
    24 00002D71 8A15CAD2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002D77 B402                <1>     mov ah, 02h
    26 00002D79 CD21                <1>     int 21h
    27                              <1> 
    28 00002D7B 89C8                <1>     mov eax, ecx
    29 00002D7D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002D82 C1E805              <1>     shr eax, 5
    31 00002D85 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002D8A 8A15B1D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002D90 B402                <1>     mov ah, 02h
    35 00002D92 CD21                <1>     int 21h
    36                              <1> 
    37 00002D94 89C8                <1>     mov eax, ecx
    38 00002D96 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00002D9B C1E809              <1>     shr eax, 9
    40 00002D9E 5B                  <1>     pop rbx ;Get the year signature back
    41 00002D9F E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00002DA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00002DA5 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00002DAA C1E805              <1>     shr eax, 5
    47 00002DAD E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00002DB2 8A1589D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00002DB8 B402                <1>     mov ah, 02h
    51 00002DBA CD21                <1>     int 21h
    52                              <1> 
    53 00002DBC 89C8                <1>     mov eax, ecx
    54 00002DBE 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00002DC3 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00002DC8 8A1573D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 00002DCE B402                <1>     mov ah, 02h
    59 00002DD0 CD21                <1>     int 21h
    60                              <1> 
    61 00002DD2 89C8                <1>     mov eax, ecx
    62 00002DD4 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00002DD9 C1E809              <1>     shr eax, 9
    64 00002DDC 5B                  <1>     pop rbx ;Get the year signature back
    65 00002DDD E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00002DE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00002DE3 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00002DE8 C1E809              <1>     shr eax, 9
    71 00002DEB 5B                  <1>     pop rbx ;Get the year signature back
    72 00002DEC E85C000000          <1>     call .printYear
    73                              <1> 
    74 00002DF1 8A154AD2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00002DF7 B402                <1>     mov ah, 02h
    76 00002DF9 CD21                <1>     int 21h
    77                              <1> 
    78 00002DFB 89C8                <1>     mov eax, ecx
    79 00002DFD 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00002E02 C1E805              <1>     shr eax, 5
    81 00002E05 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00002E0A 8A1531D2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 00002E10 B402                <1>     mov ah, 02h
    85 00002E12 CD21                <1>     int 21h
    86                              <1> 
    87 00002E14 89C8                <1>     mov eax, ecx
    88 00002E16 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00002E1B E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 00002E20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 00002E21 51                  <1>     push rcx
    95 00002E22 E85A040000          <1>     call getDecimalWord
    96 00002E27 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00002E29 7504                <1>     jnz .skipSpace
    98 00002E2B 88CD                <1>     mov ch, cl
    99 00002E2D B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 00002E2F 88CA                <1>     mov dl, cl
   102 00002E31 B402                <1>     mov ah, 02h
   103 00002E33 CD21                <1>     int 21h
   104 00002E35 88EA                <1>     mov dl, ch
   105 00002E37 B402                <1>     mov ah, 02h
   106 00002E39 CD21                <1>     int 21h
   107 00002E3B 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 00002E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 00002E3D 51                  <1>     push rcx
   111 00002E3E E83E040000          <1>     call getDecimalWord
   112 00002E43 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 00002E45 75E8                <1>     jnz .skipSpace
   114 00002E47 88CD                <1>     mov ch, cl
   115 00002E49 B130                <1>     mov cl, "0"
   116 00002E4B EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 00002E4D 05BC070000          <1>     add eax, 1980
   119 00002E52 51                  <1>     push rcx
   120 00002E53 53                  <1>     push rbx
   121 00002E54 E828040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 00002E59 5B                  <1>     pop rbx
   123 00002E5A 84DB                <1>     test bl, bl
   124 00002E5C 740C                <1>     jz .twoDigitYear
   125 00002E5E 88CA                <1>     mov dl, cl  ;Print the first digit
   126 00002E60 B402                <1>     mov ah, 02h
   127 00002E62 CD21                <1>     int 21h
   128 00002E64 88EA                <1>     mov dl, ch  ;Print the second digit
   129 00002E66 B402                <1>     mov ah, 02h
   130 00002E68 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 00002E6A C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 00002E6D 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 00002E6F B402                <1>     mov ah, 02h
   135 00002E71 CD21                <1>     int 21h
   136 00002E73 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 00002E75 B402                <1>     mov ah, 02h
   138 00002E77 CD21                <1>     int 21h
   139 00002E79 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002E7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 00002E7B 89C1                <1>     mov ecx, eax
   148 00002E7D 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 00002E82 C1E80B              <1>     shr eax, 11
   150 00002E85 803DBBD1FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 00002E8C 750B                <1>     jne .ampm
   152 00002E8E E85A000000          <1>     call .printHours
   153 00002E93 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00002E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00002E99 3D0C000000          <1>     cmp eax, 12
   157 00002E9E 7713                <1>     ja .pm
   158 00002EA0 7416                <1>     je .pm2
   159 00002EA2 E846000000          <1>     call .printHours
   160 00002EA7 E81D000000          <1>     call .printMinutes
   161 00002EAC B261                <1>     mov dl, "a"
   162 00002EAE B402                <1>     mov ah, 02h
   163 00002EB0 CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00002EB3 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00002EB8 E830000000          <1>     call .printHours
   169 00002EBD E807000000          <1>     call .printMinutes
   170 00002EC2 B270                <1>     mov dl, "p"
   171 00002EC4 B402                <1>     mov ah, 02h
   172 00002EC6 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00002EC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00002EC9 8A1574D1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 00002ECF B402                <1>     mov ah, 02h
   177 00002ED1 CD21                <1>     int 21h
   178                              <1> 
   179 00002ED3 89C8                <1>     mov eax, ecx
   180 00002ED5 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00002EDA C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 00002EDD 51                  <1>     push rcx
   184 00002EDE E89E030000          <1>     call getDecimalWord
   185 00002EE3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00002EE5 7514                <1>     jnz .skipSpace
   187 00002EE7 88CD                <1>     mov ch, cl
   188 00002EE9 B130                <1>     mov cl, "0"
   189 00002EEB EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 00002EED 51                  <1>     push rcx
   192 00002EEE E88E030000          <1>     call getDecimalWord
   193 00002EF3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00002EF5 7504                <1>     jnz .skipSpace
   195 00002EF7 88CD                <1>     mov ch, cl
   196 00002EF9 B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00002EFB 88CA                <1>     mov dl, cl
   199 00002EFD B402                <1>     mov ah, 02h
   200 00002EFF CD21                <1>     int 21h
   201 00002F01 88EA                <1>     mov dl, ch
   202 00002F03 B402                <1>     mov ah, 02h
   203 00002F05 CD21                <1>     int 21h
   204 00002F07 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00002F08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00002F09 488D1592DBFFFF      <1>     lea rdx, dosVer
   210 00002F10 B409                <1>     mov ah, 09h ;Print String
   211 00002F12 CD21                <1>     int 21h
   212 00002F14 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00002F16 CD21                <1>     int 21h
   214 00002F18 50                  <1>     push rax    ;Save minor version
   215 00002F19 E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 00002F1E E8C8000000          <1>     call printPackedBCD ;Print al
   217 00002F23 B22E                <1>     mov dl, "."
   218 00002F25 B402                <1>     mov ah, 02h
   219 00002F27 CD21                <1>     int 21h
   220 00002F29 58                  <1>     pop rax
   221 00002F2A 88E0                <1>     mov al, ah  ;Get the minor version low
   222 00002F2C E89D000000          <1>     call hexToBCD
   223 00002F31 E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 00002F36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 00002F37 B21B                <1>     mov dl, ESC
   227 00002F39 EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 00002F3B B224                <1>     mov dl, "$"
   231 00002F3D EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 00002F3F B23D                <1>     mov dl, "="
   235 00002F41 EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 00002F43 B27C                <1>     mov dl, "|"
   239 00002F45 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 00002F47 B23E                <1>     mov dl, ">"
   243 00002F49 EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 00002F4B B23C                <1>     mov dl, "<"
   247 00002F4D EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 00002F4F E8CF000000          <1>     call getCurrentDrive
   251 00002F54 0441                <1>     add al, "A" ;Convert to letter
   252 00002F56 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 00002F58 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 00002F5A CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 00002F5C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 00002F5D E8C1000000          <1>     call getCurrentDrive
   259 00002F62 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 00002F64 FEC2                <1>     inc dl
   261 00002F66 0441                <1>     add al, "A" ;Convert to letter
   262 00002F68 B43A                <1>     mov ah, ":"
   263 00002F6A 488D3DEBD0FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 00002F71 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 00002F73 8A05B2D0FFFF        <1>     mov al, byte [pathSep]
   266 00002F79 AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 00002F7A B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 00002F7C 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 00002F7F CD21                <1>     int 21h
   270 00002F81 721F                <1>     jc .badDrive
   271 00002F83 E8B9000000          <1>     call strlen
   272 00002F88 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 00002F8E B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00002F93 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00002F98 488D15BDD0FFFF      <1>     lea rdx, currDirStr
   277 00002F9F CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 00002FA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00002FA2 488D15C1DBFFFF      <1>     lea rdx, badDrvMsg
   282 00002FA9 E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 00002FAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 00002FAF 51                  <1>     push rcx
   289 00002FB0 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00002FB3 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00002FB5 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 00002FBA 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 00002FC0 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00002FC3 050A000000          <1>     add eax, 10
   296 00002FC8 FFC9                <1>     dec ecx
   297 00002FCA 75F7                <1>     jnz .bth
   298 00002FCC 59                  <1>     pop rcx
   299 00002FCD C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 00002FCE 51                  <1>     push rcx
   305 00002FCF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00002FD2 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00002FD4 3D0A000000          <1>     cmp eax, 10
   309 00002FD9 7209                <1>     jb .htb1
   310 00002FDB 2D0A000000          <1>     sub eax, 10
   311 00002FE0 FFC1                <1>     inc ecx
   312 00002FE2 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00002FE4 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00002FE7 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 00002FE9 59                  <1>     pop rcx
   317 00002FEA C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 00002FEB 50                  <1>     push rax
   324 00002FEC 52                  <1>     push rdx
   325 00002FED 88C4                <1>     mov ah, al
   326 00002FEF 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 00002FF1 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00002FF4 7508                <1>     jnz .upperNybble
   329 00002FF6 B220                <1>     mov dl, " "
   330 00002FF8 B402                <1>     mov ah, 02h
   331 00002FFA CD21                <1>     int 21h
   332 00002FFC EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 00002FFE 50                  <1>     push rax
   335 00002FFF C0EC04              <1>     shr ah, 4
   336 00003002 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00003005 88E2                <1>     mov dl, ah
   338 00003007 B402                <1>     mov ah, 02h ;Print DL
   339 00003009 CD21                <1>     int 21h
   340 0000300B 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 0000300C 0430                <1>     add al, "0"
   343 0000300E 88C2                <1>     mov dl, al
   344 00003010 B402                <1>     mov ah, 02h ;Print DL
   345 00003012 CD21                <1>     int 21h
   346 00003014 5A                  <1>     pop rdx
   347 00003015 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00003016 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00003017 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 00003019 CD21                <1>     int 21h 
   356 0000301B E803000000          <1>     call getCurrentDrive
   357 00003020 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00003022 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00003023 B419                <1>     mov ah, 19h
   362 00003025 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00003027 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 00003028 51                  <1>     push rcx
   370 00003029 57                  <1>     push rdi
   371 0000302A 4889F7              <1>     mov rdi, rsi
   372 0000302D E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 00003032 5F                  <1>     pop rdi
   374 00003033 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 00003035 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 00003036 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 00003037 56                  <1>     push rsi
   383 00003038 57                  <1>     push rdi
   384 00003039 E8EAFFFFFF          <1>     call strcpy 
   385 0000303E 5F                  <1>     pop rdi
   386 0000303F 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 00003040 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 00003041 50                  <1>     push rax
   394 00003042 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 00003047 CD2F                <1>     int 2fh
   396 00003049 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 0000304A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 0000304B 53                  <1>     push rbx
   403 0000304C 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 0000304F 50                  <1>     push rax    ;Push the char twice on the stack
   405 00003050 50                  <1>     push rax
   406 00003051 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 00003056 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 00003058 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 0000305B 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 0000305C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 0000305D 50                  <1>     push rax
   419                              <1> .l1:
   420 0000305E AC                  <1>     lodsb
   421 0000305F E807000000          <1>     call isALdelimiter
   422 00003064 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 00003066 58                  <1>     pop rax
   425 00003067 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 0000306A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 0000306B 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000306D 74(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 0000306F 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003071 74(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 00003073 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003075 74(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 00003077 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003079 74(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 0000307B 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 0000307D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 0000307E 66813DA2CFFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 00003087 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 00003089 E8CFFEFFFF          <1>     call putCWDInPrompt
   447 0000308E E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 00003093 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 00003094 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 00003095 488D3D18D0FFFF      <1>     lea rdi, cmdStatePtr
   455 0000309C B90C000000          <1>     mov ecx, cmdStateL
   456 000030A1 31C0                <1>     xor eax, eax
   457 000030A3 F3AA                <1>     rep stosb
   458 000030A5 C70507D0FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   458 000030AE FF                  <1>
   459                              <1>     return
    13                              <2> %%_ret:
    14 000030AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> clearCommandLineState:
   462                              <1> ;Clears the command line state after a 0Dh encountered
   463 000030B0 488D3DE8CFFFFF      <1>     lea rdi, cmdLineStatePtr
   464 000030B7 B921000000          <1>     mov ecx, cmdLineStateL
   465 000030BC 31C0                <1>     xor eax, eax
   466 000030BE F3AA                <1>     rep stosb
   467 000030C0 C705E6CFFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   467 000030C9 FF                  <1>
   468 000030CA C705E2CFFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   468 000030D3 FF                  <1>
   469                              <1>     return
    13                              <2> %%_ret:
    14 000030D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> asciiToFCB:
   472                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   473                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   474                              <1> ;Also doesn't check if chars are valid
   475                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   476                              <1> ;Name is space padded.
   477                              <1> ;Input: rsi = ASCII string buffer
   478                              <1> ;       rdi = FCB name buffer
   479                              <1> ;Output: al = Char that terminated the source string 
   480 000030D5 53                  <1>     push rbx    
   481 000030D6 57                  <1>     push rdi
   482 000030D7 B90B000000          <1>     mov ecx, 11
   483 000030DC B020                <1>     mov al, " "
   484 000030DE F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   485 000030E0 5F                  <1>     pop rdi
   486 000030E1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   487 000030E4 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   488                              <1> asciiFilenameToFCB:
   489                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   490                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   491                              <1> ;Also doesn't check if chars are valid
   492                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   493                              <1> ;Name is space padded.
   494                              <1> ;Input: rsi = ASCII string buffer
   495                              <1> ;       rdi = FCB name buffer
   496                              <1> ;Output: al = Char that terminated the source string 
   497 000030E6 53                  <1>     push rbx    
   498 000030E7 57                  <1>     push rdi
   499 000030E8 B90B000000          <1>     mov ecx, 11
   500 000030ED B020                <1>     mov al, " "
   501 000030EF F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   502 000030F1 5F                  <1>     pop rdi
   503 000030F2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   504                              <1>     ;Preprocess for Dir Searches
   505 000030F5 803E2E              <1>     cmp byte [rsi], "."
   506 000030F8 7509                <1>     jne .processName
   507 000030FA A4                  <1>     movsb   ;Store the first dot
   508 000030FB 803E2E              <1>     cmp byte [rsi], "."
   509 000030FE 752C                <1>     jne .exitBadChar
   510 00003100 A4                  <1>     movsb
   511 00003101 EB29                <1>     jmp short .exitBadChar
   512                              <1> .processName:
   513 00003103 AC                  <1>     lodsb   ;Get the char in al
   514 00003104 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   515 00003106 7426                <1>     jz .exit
   516 00003108 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   517 0000310A 7407                <1>     je .extSpace
   518 0000310C 3C2E                <1>     cmp al, "."
   519 0000310E 740C                <1>     je .ext
   520 00003110 AA                  <1>     stosb   ;Store the char
   521 00003111 EBF0                <1>     jmp short .processName
   522                              <1> .extSpace:
   523                              <1> ;Now we scan for a period in the name
   524 00003113 AC                  <1>     lodsb   ;Get a char and increase rsi
   525 00003114 84C0                <1>     test al, al
   526 00003116 7416                <1>     jz .exit
   527 00003118 3C2E                <1>     cmp al, "."     ;If al is not a period...
   528 0000311A 75F7                <1>     jne .extSpace   ; keep searching
   529                              <1> .ext:
   530 0000311C 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   531                              <1> .processExt:
   532 00003120 AC                  <1>     lodsb
   533 00003121 84C0                <1>     test al, al
   534 00003123 7409                <1>     jz .exit
   535 00003125 3C20                <1>     cmp al, " "
   536 00003127 7405                <1>     je .exit
   537 00003129 AA                  <1>     stosb
   538 0000312A EBF4                <1>     jmp short .processExt
   539                              <1> .exitBadChar:
   540 0000312C 30C0                <1>     xor al, al  ;Return a null terminator
   541                              <1> .exit:
   542 0000312E 5B                  <1>     pop rbx
   543                              <1>     return
    13                              <2> %%_ret:
    14 0000312F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> findLastPathComponant:
   546                              <1> ;Finds the last path componant of an ASCIIZ path string
   547                              <1> ;Input: rdi -> Head of the path to find last componant on
   548                              <1> ;Output: rdi -> Start of the last componant
   549 00003130 50                  <1>     push rax
   550 00003131 51                  <1>     push rcx
   551 00003132 31C9                <1>     xor ecx, ecx
   552 00003134 FFC9                <1>     dec ecx
   553 00003136 31C0                <1>     xor eax, eax
   554 00003138 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   555 0000313A F7D1                <1>     not ecx     ;This gets the count of chars  
   556 0000313C 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   557 0000313F 8A05E6CEFFFF        <1>     mov al, byte [pathSep]
   558 00003145 FD                  <1>     std
   559 00003146 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   560 00003148 FC                  <1>     cld
   561 00003149 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   562 0000314B 48FFC7              <1>     inc rdi     ;Point at pathsep
   563                              <1> .exit:
   564 0000314E 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   565 00003151 59                  <1>     pop rcx
   566 00003152 58                  <1>     pop rax
   567                              <1>     return
    13                              <2> %%_ret:
    14 00003153 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> FCBToAsciiz:
   570                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   571                              <1> ;Name is space padded too
   572                              <1> ;Input: rsi = FCB name buffer
   573                              <1> ;       rdi = ASCIIZ string buffer
   574 00003154 B908000000          <1>     mov ecx, 8
   575 00003159 F3A4                <1>     rep movsb   ;Move the name over
   576                              <1> .scanNameSpace:
   577 0000315B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   578 0000315F 750D                <1>     jne .ext
   579 00003161 48FFCF              <1>     dec rdi
   580 00003164 FFC1                <1>     inc ecx
   581 00003166 81F908000000        <1>     cmp ecx, 8
   582 0000316C 72ED                <1>     jb .scanNameSpace
   583                              <1> .ext:
   584 0000316E 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   585 00003173 7506                <1>     jne .validExt
   586 00003175 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   587 00003179 7415                <1>     je .exit
   588                              <1> .validExt:
   589 0000317B B02E                <1>     mov al, "." ;We have a valid extension, store a period
   590 0000317D AA                  <1>     stosb
   591 0000317E B903000000          <1>     mov ecx, 3
   592 00003183 F3A4                <1>     rep movsb   ;Move the three extension chars over
   593                              <1> .scanExtSpace:
   594 00003185 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   595 00003189 7505                <1>     jne .exit
   596 0000318B 48FFCF              <1>     dec rdi
   597 0000318E EBF5                <1>     jmp short .scanExtSpace
   598                              <1> .exit:
   599 00003190 31C0                <1>     xor eax, eax
   600 00003192 AA                  <1>     stosb   ;Store a null at the end
   601                              <1>     return
    13                              <2> %%_ret:
    14 00003193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1>     
   603                              <1> cpDelimPathToBufz:
   604                              <1> ;Copy a delimited path into buffer and null terminate.
   605                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   606                              <1> ;       rdi -> Buffer to store null terminated path in
   607                              <1> ;Output: rsi -> First char past pathname delimiter
   608                              <1> ;       rdi -> One char past null terminator on pathname buffer
   609 00003194 53                  <1>     push rbx
   610 00003195 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   611 00003198 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   612                              <1> .lp:
   613 0000319B AC                  <1>     lodsb   ;Get the char
   614 0000319C 3C0D                <1>     cmp al, CR
   615 0000319E 7412                <1>     je .gotRedirPath
   616 000031A0 E8C6FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   617 000031A5 740B                <1>     jz .gotRedirPath 
   618 000031A7 3A057FCEFFFF        <1>     cmp al, byte [switchChar]
   619 000031AD 7403                <1>     je .gotRedirPath
   620 000031AF AA                  <1>     stosb   ;Store this char and loop next char
   621 000031B0 EBE9                <1>     jmp short .lp
   622                              <1> .gotRedirPath:
   623 000031B2 50                  <1>     push rax    ;Save the char on stack
   624 000031B3 30C0                <1>     xor al, al  ;Get null terminator char
   625 000031B5 4829FB              <1>     sub rbx, rdi
   626 000031B8 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   627 000031BF 7412                <1>     je .notColon
   628 000031C1 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   629 000031C8 7409                <1>     je .notColon
   630 000031CA 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   631 000031CE 7503                <1>     jne .notColon
   632 000031D0 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   633                              <1> .notColon:
   634 000031D3 AA                  <1>     stosb   ;Store the null terminator for the redir path
   635 000031D4 58                  <1>     pop rax ;Get back the char in al
   636 000031D5 5B                  <1>     pop rbx
   637                              <1>     return
    13                              <2> %%_ret:
    14 000031D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   638                              <1> 
   639                              <1> buildCommandPath:
   640                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   641 000031D7 0FB605DDCEFFFF      <1>     movzx eax, byte [arg1Off]
   642 000031DE 4C8B052ACEFFFF      <1>     mov r8, [pspPtr]
   643 000031E5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   644 000031EC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   645                              <1> copyArgumentToSearchSpec:
   646                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   647                              <1> ; and null terminates
   648 000031EF 488D3D6CD2FFFF      <1>     lea rdi, searchSpec
   649 000031F6 E899FFFFFF          <1>     call cpDelimPathToBufz
   650                              <1>     return
    13                              <2> %%_ret:
    14 000031FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   651                              <1> 
   652                              <1> scanForWildcards:
   653                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   654                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   655 000031FC 50                  <1>     push rax
   656 000031FD 56                  <1>     push rsi
   657                              <1> .lp:
   658 000031FE AC                  <1>     lodsb
   659 000031FF 3C3F                <1>     cmp al, "?"
   660 00003201 740A                <1>     je .exit
   661 00003203 3C2A                <1>     cmp al, "*"
   662 00003205 7406                <1>     je .exit
   663 00003207 84C0                <1>     test al, al
   664 00003209 75F3                <1>     jnz .lp
   665 0000320B FEC0                <1>     inc al  ;This will clear the ZF
   666                              <1> .exit:
   667 0000320D 5E                  <1>     pop rsi
   668 0000320E 58                  <1>     pop rax
   669                              <1>     return
    13                              <2> %%_ret:
    14 0000320F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   670                              <1> 
   671                              <1> printDecimalWord:
   672                              <1> ;Takes qword in rax and print it's decimal representation
   673                              <1> ;Takes the qword in eax and prints its decimal representation
   674 00003210 31C9                <1>     xor ecx, ecx
   675 00003212 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   676 00003214 85C0                <1>     test eax, eax
   677 00003216 750C                <1>     jnz .notZero
   678 00003218 B930000000          <1>     mov ecx, "0"
   679 0000321D BD01000000          <1>     mov ebp, 1  ;Print one digit
   680 00003222 EB3E                <1>     jmp short .dpfb2
   681                              <1> .notZero:
   682 00003224 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   683 00003226 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   684                              <1> .dpfb0:
   685 0000322B FFC5                <1>     inc ebp
   686 0000322D 81FD08000000        <1>     cmp ebp, 8
   687 00003233 7206                <1>     jb .dpfb00
   688 00003235 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   689 00003239 EB04                <1>     jmp short .dpfb01
   690                              <1> .dpfb00:
   691 0000323B 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   692                              <1> .dpfb01:
   693 0000323F 31D2                <1>     xor edx, edx
   694 00003241 48F7F6              <1>     div rsi
   695 00003244 80C230              <1>     add dl, '0'
   696 00003247 80FA39              <1>     cmp dl, '9'
   697 0000324A 7603                <1>     jbe .dpfb1
   698 0000324C 80C207              <1>     add dl, 'A'-'0'-10
   699                              <1> .dpfb1:
   700 0000324F 81FD08000000        <1>     cmp ebp, 8
   701 00003255 7204                <1>     jb .dpfb10
   702 00003257 88D3                <1>     mov bl, dl ;Add the bottom bits
   703 00003259 EB02                <1>     jmp short .dpfb11
   704                              <1> .dpfb10:
   705 0000325B 88D1                <1>     mov cl, dl    ;Save remainder byte
   706                              <1> .dpfb11:
   707 0000325D 4885C0              <1>     test rax, rax
   708 00003260 75C9                <1>     jnz .dpfb0
   709                              <1> .dpfb2:
   710 00003262 81FD08000000        <1>     cmp ebp, 8
   711 00003268 7208                <1>     jb .dpfb20
   712 0000326A 88DA                <1>     mov dl, bl
   713 0000326C 48C1EB08            <1>     shr rbx, 8
   714 00003270 EB06                <1>     jmp short .dpfb21
   715                              <1> .dpfb20:
   716 00003272 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   717 00003274 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   718                              <1> .dpfb21:
   719 00003278 B402                <1>     mov ah, 02h
   720 0000327A CD21                <1>     int 21h
   721 0000327C FFCD                <1>     dec ebp
   722 0000327E 75E2                <1>     jnz .dpfb2
   723                              <1>     return
    13                              <2> %%_ret:
    14 00003280 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   724                              <1> 
   725                              <1> getDecimalWord:
   726                              <1> ;Works on MAX A dword in eax
   727                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   728 00003281 31C9                <1>     xor ecx, ecx
   729 00003283 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   730 00003285 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   731                              <1> .dpfb0:
   732 0000328A FFC5                <1>     inc ebp
   733 0000328C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   734 00003290 31D2                <1>     xor edx, edx
   735 00003292 48F7F3              <1>     div rbx
   736 00003295 80C230              <1>     add dl, '0'
   737 00003298 80FA39              <1>     cmp dl, '9'
   738 0000329B 7603                <1>     jbe .dpfb1
   739 0000329D 80C207              <1>     add dl, 'A'-'0'-10
   740                              <1> .dpfb1:
   741 000032A0 88D1                <1>     mov cl, dl    ;Save remainder byte
   742 000032A2 4885C0              <1>     test rax, rax
   743 000032A5 75E3                <1>     jnz .dpfb0
   744                              <1>     return
    13                              <2> %%_ret:
    14 000032A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   745                              <1> 
   746                              <1> freezePC:
   747 000032A8 488D15FCDAFFFF      <1>     lea rdx, memBad1
   748 000032AF B409                <1>     mov ah, 09h
   749 000032B1 CD21                <1>     int 21h
   750                              <1> .altEP:
   751 000032B3 488D151ADBFFFF      <1>     lea rdx, memBad3
   752 000032BA B409                <1>     mov ah, 09h
   753 000032BC CD21                <1>     int 21h
   754                              <1> .lp:
   755 000032BE F390                <1>     pause
   756 000032C0 F4                  <1>     hlt
   757 000032C1 EBFB                <1>     jmp short .lp
   758                              <1> 
   759                              <1> setDTA:
   760 000032C3 50                  <1>     push rax
   761 000032C4 52                  <1>     push rdx
   762 000032C5 488D1504CEFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   763 000032CC B8001A0000          <1>     mov eax, 1A00h
   764 000032D1 CD21                <1>     int 21h
   765 000032D3 5A                  <1>     pop rdx
   766 000032D4 58                  <1>     pop rax
   767                              <1>     return
    13                              <2> %%_ret:
    14 000032D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   768                              <1> 
   769                              <1> getDTA:
   770 000032D6 488D15F3CDFFFF      <1>     lea rdx, cmdFFBlock
   771                              <1>     return
    13                              <2> %%_ret:
    14 000032DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 000032DE 53                  <1>     push rbx
    25 000032DF 51                  <1>     push rcx
    26 000032E0 52                  <1>     push rdx
    27 000032E1 57                  <1>     push rdi
    28 000032E2 56                  <1>     push rsi
    29 000032E3 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 000032E4 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000032E7 488D1541D5FFFF      <1>     lea rdx, crlf
    33 000032EE E85EFAFFFF          <1>     call printString
    34                              <1> 
    35 000032F3 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 000032F9 B90C000000          <1>     mov ecx, 0Ch
    37 000032FE 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003300 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003303 480FB7FF            <1>     movzx rdi, di
    40 00003307 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 0000330A 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 0000330E 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003311 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003314 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 0000331B 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 0000331F E82DFAFFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003324 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 0000332B 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003332 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003335 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003339 E813FAFFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 0000333E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003341 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003347 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 0000334E E8FEF9FFFF          <1>     call printString
    59 00003353 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003355 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003358 B402                <1>     mov ah, 02h ;Print char in dl
    62 0000335A CD21                <1>     int 21h
    63                              <1> .userInput:
    64 0000335C E8E9F9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003361 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003368 E8E4F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 0000336D F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003370 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003372 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003379 E8D3F9FFFF          <1>     call printString
    76 0000337E 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003385 E8C7F9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 0000338A F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 0000338D 7418                <1>     jz .userFail
    81 0000338F 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003396 E8B6F9FFFF          <1>     call printString
    83 0000339B 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 000033A2 E8AAF9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 000033A7 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 000033AA 7418                <1>     jz .userMsgEnd
    88 000033AC 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 000033B3 E899F9FFFF          <1>     call printString
    90 000033B8 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 000033BF E88DF9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 000033C4 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 000033CB E881F9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 000033D0 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 000033D2 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 000033D9 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 000033DB CD21                <1>     int 21h ;Get char in al
   100 000033DD 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 000033DF 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 000033E1 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 000033E3 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 000033E4 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 000033E6 FFC1                <1>     inc ecx
   107 000033E8 81F904000000        <1>     cmp ecx, 4
   108 000033EE 75F3                <1>     jne .uip1
   109 000033F0 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 000033F5 E850F9FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 000033FA 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 000033FC 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 000033FE 7427                <1>     je .cehExit
   116 00003400 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003402 740F                <1>     je .viIgnore
   118 00003404 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003406 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003408 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 0000340B 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003411 EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003413 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003416 0F8440FFFFFF        <1>     jz .userInput
   127 0000341C EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 0000341E F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003421 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003427 5E                  <1>     pop rsi
   133 00003428 5F                  <1>     pop rdi
   134 00003429 5A                  <1>     pop rdx
   135 0000342A 59                  <1>     pop rcx
   136 0000342B 5B                  <1>     pop rbx
   137 0000342C 48CF                <1>     iretq
   138                              <1> .charError:
   139 0000342E B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003433 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 0000343A AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 0000343B 88C2                <1>     mov dl, al  ;Move char into dl
   144 0000343D B402                <1>     mov ah, 02h
   145 0000343F CD21                <1>     int 21h ;Print char
   146 00003441 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003443 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003448 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003451 746563742024202020  <1>
   151 0000345A 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003463 6E6974202420202020  <1>
   152 0000346C 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003475 202420202020202020  <1>
   153 0000347E 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003487 6F6D6D616E64202420  <1>
   154 00003490 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003499 202020202020202020  <1>
   155 000034A2 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 000034AB 737420242020202020  <1>
   156 000034B4 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 000034BD 202020202020202020  <1>
   157 000034C6 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 000034CF 656469612024202020  <1>
   158 000034D8 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 000034E1 7420466F756E642024  <1>
   159 000034EA 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 000034F3 706572202420202020  <1>
   160 000034FC 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003505 6C7420242020202020  <1>
   161 0000350E 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003517 742024202020202020  <1>
   162 00003520 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003529 61696C757265202420  <1>
   163                              <1> 
   164 00003532 64726976652024      <1> .drive      db "drive $"
   165 00003539 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003542 64696E672024        <1>
   166 00003548 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003551 74696E672024        <1>
   167 00003557 41626F727424        <1> .abortmsg   db "Abort$" 
   168 0000355D 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003564 526574727924        <1> .retrymsg   db "Retry$"
   170 0000356A 4661696C24          <1> .failmsg    db "Fail$"
   171 0000356F 2C2024              <1> .betweenMsg db ", $"
   172 00003572 3F2024              <1> .endMsg     db "? $"
   173 00003575 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003579 F605ADCAFFFFFF      <1>     test byte [permaSwitch], -1
   177 00003580 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003582 50                  <1>     push rax
   180 00003583 53                  <1>     push rbx
   181 00003584 488B058CCAFFFF      <1>     mov rax, qword [realParent]
   182 0000358B 488B1D7DCAFFFF      <1>     mov rbx, qword [pspPtr]
   183 00003592 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003596 5B                  <1>     pop rbx
   185 00003597 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003598 F9                  <1>     stc     ;Set CF to kill the task
   188 00003599 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 0000359C 504154483D00        <1>     db "PATH=",0
     5 000035A2 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000035AA 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 000035B3 442E434F4D00        <1>
     8 000035B9 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 000035C2 202020202020202020- <1>
     8 000035CB 202020202020202020- <1>
     8 000035D4 202020202020202020- <1>
     8 000035DD 202020202020202020- <1>
     8 000035E6 202020202020202020- <1>
     8 000035EF 202020202020202020- <1>
     8 000035F8 202020202020202020- <1>
     8 00003601 202020202020202020- <1>
     8 0000360A 202020202020202020- <1>
     8 00003613 202020202020202020- <1>
     8 0000361C 202020202020202020- <1>
     8 00003625 202020202020202020- <1>
     8 0000362E 202020202020202020- <1>
     8 00003637 202020202020202020- <1>
     8 00003640 20                  <1>
     9 00003641 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(DE320000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(79350000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(5A0E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(9C350000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(AA350000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(A2160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(2F080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(C6200000)        <1>     call time
    81 000000FB E8(FD1F0000)        <1>     call date
    82 00000100 488D15(2F080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(43360000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(9C350000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(7D290000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(470E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

