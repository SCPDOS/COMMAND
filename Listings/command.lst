     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    22 000000A0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    23 000000A2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    24                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    25                              <1> ;These variables are valid for a SINGLE command in a command line
    26                              <1> ;Next two bytes, if set to -1, flags error
    27 000000A4 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    28 000000A5 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    29                              <1> ;                    If 2, we are redirecting output to a file, by appending
    30 000000A6 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    31 000000A8 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    32                              <1> 
    33 000000AA 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    34 000000AB 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    35 000000AC 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    36                              <1> 
    37 000000AD 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    38 000000AE 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    39 000000AF 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    40                              <1> 
    41                              <1> cmdStateL equ $ - cmdStatePtr
    42                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    43                              <1> 
    44                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    45 000000B0 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    46 000000B1 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    47 000000B9 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    47 000000C2 000000000000000000- <1>
    47 000000CB 000000000000000000- <1>
    47 000000D4 000000000000000000- <1>
    47 000000DD 000000000000000000- <1>
    47 000000E6 000000000000000000- <1>
    47 000000EF 000000000000000000- <1>
    47 000000F8 000000000000000000- <1>
    47 00000101 00000000000000      <1>
    48 00000108 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    48 00000111 000000000000000000- <1>
    48 0000011A 000000000000000000- <1>
    48 00000123 000000000000000000- <1>
    48 0000012C 000000000000000000- <1>
    48 00000135 000000000000000000- <1>
    48 0000013E 000000000000000000- <1>
    48 00000147 000000000000000000- <1>
    48 00000150 00000000000000      <1>
    49                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    50                              <1> 
    51                              <1> ;Structs and strings
    52                              <1> 
    53 00000157 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    53 00000160 00000000000000      <1>
    54 00000167 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    54 00000170 000000000000000000- <1>
    54 00000179 000000000000000000- <1>
    54 00000182 000000000000000000- <1>
    54 0000018B 00000000000000      <1>
    55                              <1> 
    56 00000192 000000000000000000- <1> launchBlock db execProg_size dup (0)
    56 0000019B 000000000000000000- <1>
    56 000001A4 000000000000000000- <1>
    56 000001AD 0000000000          <1>
    57                              <1> 
    58 000001B2 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    58 000001BB 000000000000000000- <1>
    58 000001C4 000000000000000000- <1>
    58 000001CD 000000000000000000- <1>
    58 000001D6 000000000000000000- <1>
    58 000001DF 000000000000000000- <1>
    58 000001E8 000000000000000000- <1>
    58 000001F1 000000000000000000- <1>
    58 000001FA 000000000000000000- <1>
    58 00000203 000000000000000000- <1>
    58 0000020C 000000000000000000- <1>
    58 00000215 000000000000000000- <1>
    58 0000021E 000000000000000000- <1>
    58 00000227 000000000000000000- <1>
    58 00000230 00000000            <1>
    59                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    60 00000234 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    60 0000023D 000000000000000000- <1>
    60 00000246 000000000000000000- <1>
    60 0000024F 000000000000000000- <1>
    60 00000258 000000000000000000- <1>
    60 00000261 000000000000000000- <1>
    60 0000026A 000000000000000000- <1>
    60 00000273 000000000000000000- <1>
    60 0000027C 000000000000000000- <1>
    60 00000285 000000000000000000- <1>
    60 0000028E 000000000000000000- <1>
    60 00000297 000000000000000000- <1>
    60 000002A0 000000000000000000- <1>
    60 000002A9 000000000000000000- <1>
    60 000002B2 00000000            <1>
    61 000002B6 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    61 000002BF 000000000000000000- <1>
    61 000002C8 000000000000000000- <1>
    61 000002D1 000000000000000000- <1>
    61 000002DA 000000000000000000- <1>
    61 000002E3 000000000000000000- <1>
    61 000002EC 000000000000000000- <1>
    61 000002F5 000000000000000000- <1>
    61 000002FE 000000000000000000- <1>
    61 00000307 000000000000000000- <1>
    61 00000310 000000000000000000- <1>
    61 00000319 000000000000000000- <1>
    61 00000322 000000000000000000- <1>
    61 0000032B 000000000000000000- <1>
    61 00000334 00000000            <1>
    62 00000338 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    62 00000341 000000000000000000- <1>
    62 0000034A 000000000000000000- <1>
    62 00000353 000000000000000000- <1>
    62 0000035C 000000000000000000- <1>
    62 00000365 000000000000000000- <1>
    62 0000036E 000000000000000000- <1>
    62 00000377 000000000000000000- <1>
    62 00000380 00000000000000      <1>
    63 00000387 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    63 00000390 0000000000          <1>
    64                              <1> 
    65 00000395 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    65 0000039E 000000000000000000- <1>
    65 000003A7 000000000000000000- <1>
    65 000003B0 000000000000000000- <1>
    65 000003B9 000000000000000000- <1>
    65 000003C2 000000000000000000- <1>
    65 000003CB 000000000000000000- <1>
    65 000003D4 000000000000000000- <1>
    65 000003DD 00000000000000      <1>
    66 000003E4 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    66 000003ED 000000000000000000- <1>
    66 000003F6 000000000000000000- <1>
    66 000003FF 000000000000000000- <1>
    66 00000408 000000000000000000- <1>
    66 00000411 000000000000000000- <1>
    66 0000041A 000000000000000000- <1>
    66 00000423 000000000000000000- <1>
    66 0000042C 00000000000000      <1>
    67                              <1> 
    68                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    69 00000433 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    69 0000043C 000000000000000000- <1>
    69 00000445 000000000000000000- <1>
    69 0000044E 000000000000000000- <1>
    69 00000457 000000000000000000- <1>
    69 00000460 000000000000000000- <1>
    69 00000469 000000000000000000- <1>
    69 00000472 000000000000000000- <1>
    69 0000047B 00000000000000      <1>
    70 00000482 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    70 0000048B 000000000000000000- <1>
    70 00000494 000000000000000000- <1>
    70 0000049D 000000000000000000- <1>
    70 000004A6 000000000000000000- <1>
    70 000004AF 000000000000000000- <1>
    70 000004B8 000000000000000000- <1>
    70 000004C1 000000000000000000- <1>
    70 000004CA 00000000000000      <1>
    71                              <1> 
    72 000004D1 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    73 000004D9 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    74                              <1> 
    75 000004E1 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Main scratch buffer for forming paths!
    75 000004EA 000000000000000000- <1>
    75 000004F3 000000000000000000- <1>
    75 000004FC 000000000000000000- <1>
    75 00000505 000000000000000000- <1>
    75 0000050E 000000000000000000- <1>
    75 00000517 000000000000000000- <1>
    75 00000520 000000000000000000- <1>
    75 00000529 000000000000000000- <1>
    75 00000532 000000000000000000- <1>
    75 0000053B 000000000000000000- <1>
    75 00000544 000000000000000000- <1>
    75 0000054D 000000000000000000- <1>
    75 00000556 000000000000000000- <1>
    75 0000055F 00000000            <1>
    76                              <1> ;The above is slightly larger than is needed/supported by DOS to allow for 
    77                              <1> ; users overtyping
    78                              <1> 
    79                              <1> ;Internal Function vars
    80                              <1> ;Dir Vars
    81 00000563 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    82                              <1> ;                                   Bit[1] set => /P or /p specified
    83                              <1> ;                                   Bit[2] set => A file/path specified
    84 00000564 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    85 00000565 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    86 00000566 00                  <1> dirDrv      db 0    ;0 based drive number to use
    87 00000567 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    87 00000570 000000000000000000- <1>
    87 00000579 000000000000000000- <1>
    87 00000582 000000000000000000- <1>
    87 0000058B 000000000000000000- <1>
    87 00000594 000000000000000000- <1>
    87 0000059D 000000000000000000- <1>
    87 000005A6 000000000000000000- <1>
    87 000005AF 000000000000000000- <1>
    87 000005B8 000000000000000000- <1>
    87 000005C1 000000000000000000- <1>
    87 000005CA 000000000000000000- <1>
    87 000005D3 000000000000000000- <1>
    87 000005DC 000000000000000000- <1>
    87 000005E5 00000000            <1>
    88 000005E9 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    88 000005F2 3F3F3F3F3F3F3F      <1>
    89                              <1> dirWideType equ 1
    90                              <1> dirPageType equ 2
    91                              <1> dirFileType equ 4
    92                              <1> ;Volume Vars
    93                              <1> volFcb:
    94                              <1>     istruc exFcb
    95 000005F9 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    96 000005FA 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    97 00000600 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    98 00000601 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    99 00000609 3F3F3F              <1>     at exFcb.fileext,   db "???"
   100 0000060C 00000000            <1>     at exFcb.curBlock,  dd 0
   101 00000610 00<rep 15h>         <1>     iend 
   102                              <1> 
   103                              <1> ;Time/Date vars
   104 00000625 00                  <1> td1 db 0    ;Minutes/Year
   105 00000626 00                  <1> td2 db 0    ;Hours/Zero
   106 00000627 00                  <1> td3 db 0    ;Hundredths/Day
   107 00000628 00                  <1> td4 db 0    ;Seconds/Month
   108                              <1> 
   109                              <1> ;Rename/Copy/Delete Buffers
   110                              <1> delPath:
   111 00000629 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   111 00000632 000000000000000000- <1>
   111 0000063B 000000000000000000- <1>
   111 00000644 000000000000000000- <1>
   111 0000064D 000000000000000000- <1>
   111 00000656 000000000000000000- <1>
   111 0000065F 000000000000000000- <1>
   111 00000668 000000000000000000- <1>
   111 00000671 000000000000000000- <1>
   111 0000067A 000000000000000000- <1>
   111 00000683 000000000000000000- <1>
   111 0000068C 000000000000000000- <1>
   111 00000695 000000000000000000- <1>
   111 0000069E 000000000000000000- <1>
   111 000006A7 00000000            <1>
   112 000006AB 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   112 000006B4 000000000000000000- <1>
   112 000006BD 000000000000000000- <1>
   112 000006C6 000000000000000000- <1>
   112 000006CF 000000000000000000- <1>
   112 000006D8 000000000000000000- <1>
   112 000006E1 000000000000000000- <1>
   112 000006EA 000000000000000000- <1>
   112 000006F3 000000000000000000- <1>
   112 000006FC 000000000000000000- <1>
   112 00000705 000000000000000000- <1>
   112 0000070E 000000000000000000- <1>
   112 00000717 000000000000000000- <1>
   112 00000720 000000000000000000- <1>
   112 00000729 00000000            <1>
   113 0000072D 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   114 00000735 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   115 0000073D 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   115 00000746 2020                <1>
   116                              <1> ;Copy Handles
   117 00000748 FFFF                <1> sourceHdl   dw -1
   118 0000074A FFFF                <1> destHdl     dw -1
   119 0000074C 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   120                              <1> 
   121 0000074E 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   121 00000757 000000000000000000- <1>
   121 00000760 000000000000000000- <1>
   121 00000769 000000000000000000- <1>
   121 00000772 000000000000000000- <1>
   121 0000077B 000000000000000000- <1>
   121 00000784 000000000000000000- <1>
   121 0000078D 000000000000000000- <1>
   121 00000796 000000000000000000- <1>
   121 0000079F 000000000000000000- <1>
   121 000007A8 000000000000000000- <1>
   121 000007B1 000000000000000000- <1>
   121 000007BA 000000000000000000- <1>
   121 000007C3 000000000000000000- <1>
   121 000007CC 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007CE 03444952            <1>     db 3, "DIR"
     8 000007D2 CE18                <1>     dw dir - startLbl
     9                              <1> 
    10 000007D4 024344              <1>     db 2, "CD"
    11 000007D7 971D                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007D9 054348444952        <1>     db 5, "CHDIR"
    14 000007DF 971D                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007E1 024D44              <1>     db 2, "MD"
    17 000007E4 121E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007E6 054D4B444952        <1>     db 5, "MKDIR"
    20 000007EC 121E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007EE 025244              <1>     db 2, "RD"
    23 000007F1 5E1E                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007F3 05524D444952        <1>     db 5, "RMDIR"
    26 000007F9 5E1E                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007FB 0344454C            <1>     db 3, "DEL"
    29 000007FF 4C20                <1>     dw erase - startLbl
    30                              <1> 
    31 00000801 054552415345        <1>     db 5, "ERASE"
    32 00000807 4C20                <1>     dw erase - startLbl
    33                              <1> 
    34 00000809 0444415445          <1>     db 4, "DATE"
    35 0000080E 8D21                <1>     dw date - startLbl
    36                              <1> 
    37 00000810 0454494D45          <1>     db 4, "TIME"
    38 00000815 5622                <1>     dw time - startLbl
    39                              <1> 
    40 00000817 04434F5059          <1>     db 4, "COPY"
    41 0000081C AA1E                <1>     dw copy - startLbl
    42                              <1> 
    43 0000081E 0443545459          <1>     db 4, "CTTY"
    44 00000823 F122                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000825 03434C53            <1>     db 3, "CLS"
    47 00000829 8C23                <1>     dw cls - startLbl
    48                              <1> 
    49 0000082B 05425245414B        <1>     db 5, "BREAK"
    50 00000831 FE23                <1>     dw break - startLbl
    51                              <1> 
    52 00000833 06564552494659      <1>     db 6, "VERIFY"
    53 0000083A 7F24                <1>     dw verify - startLbl
    54                              <1> 
    55 0000083C 0652454E414D45      <1>     db 6, "RENAME"
    56 00000843 FC24                <1>     dw rename - startLbl
    57                              <1> 
    58 00000845 0352454E            <1>     db 3, "REN"
    59 00000849 FC24                <1>     dw rename - startLbl
    60                              <1>     
    61 0000084B 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000854 0029                <1>     dw truename - startLbl
    63                              <1> 
    64 00000856 03564552            <1>     db 3, "VER"
    65 0000085A E62A                <1>     dw version - startLbl
    66                              <1> 
    67 0000085C 03564F4C            <1>     db 3, "VOL"
    68 00000860 272A                <1>     dw volume - startLbl
    69                              <1> 
    70 00000862 034D454D            <1>     db 3, "MEM"
    71 00000866 2A2B                <1>     dw memory - startLbl
    72                              <1> 
    73 00000868 0445584954          <1>     db 4, "EXIT"
    74 0000086D 132D                <1>     dw exit - startLbl
    75                              <1> 
    76 0000086F 0454595045          <1>     db 4, "TYPE"
    77 00000874 742C                <1>     dw type - startLbl
    78                              <1> 
    79 00000876 054C4142454C        <1>     db 5, "LABEL"
    80 0000087C 5129                <1>     dw label - startLbl
    81                              <1> 
    82 0000087E 0450415448          <1>     db 4, "PATH"
    83 00000883 862F                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000885 03534554            <1>     db 3, "SET"
    86 00000889 612F                <1>     dw set - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 0000088B 054D4B4C424C        <1>     db 5, "MKLBL"
    89 00000891 7B29                <1>     dw mklbl - startLbl
    90                              <1> 
    91 00000893 05524D4C424C        <1>     db 5, "RMLBL"
    92 00000899 B629                <1>     dw rmlbl - startLbl
    93                              <1> 
    94 0000089B 05524E4C424C        <1>     db 5, "RNLBL"
    95 000008A1 F129                <1>     dw rnlbl - startLbl
    96                              <1> 
    97 000008A3 05544F554348        <1>     db 5, "TOUCH"
    98 000008A9 F326                <1>     dw touch - startLbl
    99                              <1> 
   100 000008AB 044A4F494E          <1>     db 4, "JOIN"
   101 000008B0 5627                <1>     dw join - startLbl
   102                              <1> 
   103 000008B2 055355425354        <1>     db 5, "SUBST"
   104 000008B8 1928                <1>     dw subst - startLbl
   105                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   106 000008BA FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000008BB 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000008BE 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000008C3 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000008CC 696C65206D69737369- <1>
     4 000008D5 6E670D0A24          <1>
     5 000008DA 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008E3 6469736B2077697468- <1>
     5 000008EC 206261746368206669- <1>
     5 000008F5 6C65                <1>
     6 000008F7 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000900 737320616E79206B65- <1>
     6 00000909 79207768656E207265- <1>
     6 00000912 6164790D0A24        <1>
     7 00000918 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000921 6E64206F722066696C- <1>
     7 0000092A 65206E616D650D0A24  <1>
     8 00000933 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 0000093C 2066696C65206E616D- <1>
     8 00000945 65206F7220          <1>
     9 0000094A 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000953 666F756E640D0A24    <1>
    10 0000095B 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 00000964 656E74206469736B20- <1>
    10 0000096D 73706163650D0A24    <1>
    11 00000975 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 0000097E 7669726F6E6D656E74- <1>
    11 00000987 2073706163650D0A24  <1>
    12 00000990 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000999 74696F6E206572726F- <1>
    12 000009A2 720D0A24            <1>
    13 000009A6 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000009AF 6F7420626520636F70- <1>
    13 000009B8 696564206F6E746F20- <1>
    13 000009C1 697473656C660D0A24  <1>
    14 000009CA 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000009D3 662064657374696E61- <1>
    14 000009DC 74696F6E206C6F7374- <1>
    14 000009E5 206265666F72652063- <1>
    14 000009EE 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000009F4 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000009FD 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A06 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000A0F 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000A10 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000A19 65650D0A24          <1>
    21 00000A1E 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000A27 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000A30 726976652073706563- <1>
    23 00000A39 696669636174696F6E- <1>
    23 00000A42 0D0A24              <1>
    24 00000A45 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000A4E 6B6579207768656E20- <1>
    24 00000A57 7265616479202E202E- <1>
    24 00000A60 202E2024            <1>
    25 00000A64 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000A6D 6172616D657465720D- <1>
    25 00000A76 0A24                <1>
    26                              <1> 
    27 00000A78 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A81 576564546875467269- <1>
    27 00000A8A 536174              <1>
    28 00000A8D 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A96 206461746524        <1>
    29 00000A9C 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000AA5 6174652069732024    <1>
    30 00000AAD 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000AB6 657720646174652024  <1>
    31 00000ABF 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000AC8 293A2024            <1>
    32 00000ACC 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000AD5 293A2024            <1>
    33 00000AD9 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000AE2 293A2024            <1>
    34 00000AE6 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000AEF 2074696D6524        <1>
    35 00000AF5 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000AFE 696D652069732024    <1>
    36 00000B06 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000B0F 65772074696D653A20- <1>
    36 00000B18 24                  <1>
    37                              <1> 
    38 00000B19 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000B22 7572652028592F4E29- <1>
    38 00000B2B 3F2024              <1>
    39                              <1> 
    40 00000B2E 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000B37 56657273696F6E2024  <1>
    41                              <1> 
    42 00000B40 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000B49 6E2064726976652024  <1>
    43 00000B52 2069732024          <1> volOk   db " is $"
    44 00000B57 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000B60 6162656C24          <1>
    45                              <1> 
    46 00000B65 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B6E 69726563746F72790D- <1>
    46 00000B77 0A24                <1>
    47 00000B79 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B82 206372656174652064- <1>
    47 00000B8B 69726563746F72790D- <1>
    47 00000B94 0A24                <1>
    48 00000B96 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B9F 6174682C206E6F7420- <1>
    48 00000BA8 6469726563746F7279- <1>
    48 00000BB1 2C0D0A              <1>
    49 00000BB4 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000BBD 6F7279206E6F742065- <1>
    49 00000BC6 6D7074790D0A24      <1>
    50 00000BCD 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000BD6 79206F66202024      <1>
    51 00000BDD 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000BE6 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000BEF 6E6965640D0A24      <1>
    53 00000BF6 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000BFF 72697665206973206E- <1>
    53 00000C08 6F206C6F6E67657220- <1>
    53 00000C11 76616C696424        <1>
    54 00000C17 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    54 00000C20 7269766520696E2073- <1>
    54 00000C29 656172636820706174- <1>
    54 00000C32 680D0A24            <1>
    55 00000C36 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000C3F 65766963650D0A24    <1>
    56 00000C47 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000C50 20666F756E640D0A24  <1>
    57 00000C59 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000C62 726F720D0A24        <1>
    58 00000C68 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000C71 6F74206265206E6573- <1>
    58 00000C7A 7465640D0A24        <1>
    59 00000C80 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000C89 6174652066696C6520- <1>
    59 00000C92 6572726F7220647572- <1>
    59 00000C9B 696E6720706970650D- <1>
    59 00000CA4 0A24                <1>
    60 00000CA6 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000CAF 2062696E6172792072- <1>
    60 00000CB8 656164732066726F6D- <1>
    60 00000CC1 206120646576696365- <1>
    60 00000CCA 0D0A24              <1>
    61 00000CCD 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000CD3 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000CD8 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000CE1 24                  <1>
    64 00000CE2 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000CEB 2024                <1>
    65 00000CED 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000CF6 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000CFF 617468206F72206669- <1>
    66 00000D08 6C65206E616D650D0A- <1>
    66 00000D11 24                  <1>
    67 00000D12 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D1B 756D626572206F6620- <1>
    67 00000D24 706172616D65746572- <1>
    67 00000D2D 730D0A24            <1>
    68 00000D31 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000D3A 74696E6720746F2064- <1>
    68 00000D43 6576696365          <1>
    69 00000D48 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000D4C 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000D55 20202020202020546F- <1>
    71 00000D5E 74616C207379737465- <1>
    71 00000D67 6D206D656D6F72793A- <1>
    71 00000D70 2024                <1>
    72 00000D72 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000D7B 20202020202020204D- <1>
    72 00000D84 656D6F727920757365- <1>
    72 00000D8D 6420627920444F533A- <1>
    72 00000D96 2024                <1>
    73 00000D98 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000DA1 656D6F727920757365- <1>
    73 00000DAA 64206279206170706C- <1>
    73 00000DB3 69636174696F6E733A- <1>
    73 00000DBC 2024                <1>
    74 00000DBE 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000DC7 656D6F727920726573- <1>
    74 00000DD0 657276656420627920- <1>
    74 00000DD9 68617264776172653A- <1>
    74 00000DE2 2024                <1>
    75 00000DE4 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000DED 202020202020202020- <1>
    75 00000DF6 2020202020204D656D- <1>
    75 00000DFF 6F727920667265653A- <1>
    75 00000E08 2024                <1>
    76 00000E0A 20627974657324      <1> memByte db " bytes$"
    77 00000E11 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E1A 6F7420417373657274- <1>
    77 00000E23 61696E20444F532045- <1>
    77 00000E2C 6E74727920506F696E- <1>
    77 00000E35 7424                <1>
    78 00000E37 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000E40 416C6C6F636174696F- <1>
    78 00000E49 6E204572726F7224    <1>
    79 00000E51 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000E5A 4572726F7224        <1>
    80 00000E60 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000E69 68616C74656424      <1>
    81                              <1> 
    82 00000E70 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000E79 206372656174652070- <1>
    82 00000E82 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000E87 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000E90 6F6E206572726F720D- <1>
    84 00000E99 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000E9A 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000E9E 2020202024          <1> fourSpc  db "    $"
    89 00000EA3 20202024            <1> threeSpc db "   $"
    90 00000EA7 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000EAA 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000EB3 696679204F4E206F72- <1>
    92 00000EBC 204F46460D0A24      <1>
    93                              <1> 
    94 00000EC3 50524F4D50543D      <1> promptEVar  db "PROMPT="
    95 00000ECA 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000ED3 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000ED7 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000EDF 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000EE8 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000EEE 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000EF5 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000EF8 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000EFC C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000EFF B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F01 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F04 CD21                <1>     int 21h
    11 00000F06 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000F08 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000F0D CD21                <1>     int 21h
    15 00000F0F 668905F7F0FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000F16 488D157E260000      <1>     lea rdx, critErrorHandler
    18 00000F1D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000F21 B824250000          <1>     mov eax, 2524h
    20 00000F26 CD21                <1>     int 21h
    21 00000F28 488D1507290000      <1>     lea rdx, int23h
    22 00000F2F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000F33 B823250000          <1>     mov eax, 2523h
    24 00000F38 CD21                <1>     int 21h
    25 00000F3A 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000F41 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000F45 B822250000          <1>     mov eax, 2522h
    28 00000F4A CD21                <1>     int 21h
    29 00000F4C F6054CF1FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000F53 0F85B8000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000F59 E8E0040000          <1>     call advanceRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000F5E 0FB70DC2F0FFFF      <1>     movzx ecx, word [numHdls]
    34 00000F65 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000F6A B43E                <1>     mov ah, 3Eh ;File close
    37 00000F6C CD21                <1>     int 21h
    38 00000F6E FFC3                <1>     inc ebx ;Goto next file
    39 00000F70 39CB                <1>     cmp ebx, ecx
    40 00000F72 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42 00000F74 488B258AF0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    43 00000F7B FC                  <1>     cld ;Ensure stringops are done the right way
    44 00000F7C C6052FF2FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    45 00000F83 C605AAF2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    46 00000F8A C60525F3FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    47                              <1> .inputMain:
    48 00000F91 E822200000          <1>     call printCRLF
    49                              <1> .inputMain2:
    50 00000F96 F60513F1FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, go here
    51 00000F9D 0F8544080000        <1>     jnz batNextLine
    52 00000FA3 E876230000          <1>     call clearCommandLineState
    53 00000FA8 E83F230000          <1>     call printPrompt
    54                              <1> 
    55 00000FAD B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00000FB2 CD21                <1>     int 21h
    57 00000FB4 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00000FB9 BA01000000          <1>     mov edx, 1      ;Start new print job
    59 00000FBE CD21                <1>     int 21h
    60 00000FC0 488D15EBF1FFFF      <1>     lea rdx, inBuffer
    61 00000FC7 B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 00000FCC CD21                <1>     int 21h
    63 00000FCE E8E51F0000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65 00000FD3 803DD9F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    66 00000FDA 74BA                <1>     je .inputMain2
    67                              <1>     ;Copy over the input text
    68 00000FDC 488D35CFF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    69                              <1> .copyPoint: ;Copy over commandline here
    70 00000FE3 488D3D4AF2FFFF      <1>     lea rdi, cpyBuffer
    71 00000FEA B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 00000FEF F3A4                <1>     rep movsb
    73 00000FF1 E85C000000          <1>     call makeCmdBuffer   ;Preprocess the redir, make cmd buffer
    74                              <1> .pipeLoop:
    75 00000FF6 4C8B0512F0FFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    76 00000FFD E8AA000000          <1>     call makeCmdString      ;Now make the command string in the psp
    77 00001002 E82D060000          <1>     call setupRedirandPipes ;Setup pipes and redir if appropriate
    78 00001007 E8F9000000          <1>     call analyseCmdline
    79 0000100C E8A0010000          <1>     call doCommandLine  ;This analyses and does the command line!
    80                              <1> .pipeProceed:
    81 00001011 E828040000          <1>     call advanceRedir
    82 00001016 F60582F0FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    83 0000101D 0F846EFFFFFF        <1>     jz .inputMain
    84                              <1>     ;Now we pull the commandline forwards. 
    85 00001023 E884000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    86 00001028 0F8463FFFFFF        <1>     jz .inputMain       ;We are pointing to a CR, no pipe!
    87 0000102E 488D3D83F2FFFF      <1>     lea rdi, cmdBuffer + 2
    88 00001035 4889F1              <1>     mov rcx, rsi
    89 00001038 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    90 0000103B 280D76F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And rease from the count
    91 00001041 8A0D70F2FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    92 00001047 FFC1                <1>     inc ecx     ;One more for the terminating char
    93 00001049 F3A4                <1>     rep movsb   ;Move the chars over    
    94 0000104B E8B3220000          <1>     call clearCommandState  ;Else, clear the command state and start again
    95 00001050 EBA4                <1>     jmp short .pipeLoop
    96                              <1> 
    97                              <1> makeCmdBuffer:
    98                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    99                              <1> ; copy buffer. Called only once in a cycle.
   100                              <1> ;Throughout: CL has char count, CH has quote count
   101 00001052 488D35DDF1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
   102 00001059 31C9                <1>     xor ecx, ecx
   103 0000105B 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   104                              <1> .countQuotes:
   105 0000105E AC                  <1>     lodsb
   106 0000105F 3C22                <1>     cmp al, '"'
   107 00001061 7507                <1>     jne .notQuoteToCount
   108 00001063 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   109 00001065 E9F4FFFFFF          <1>     jmp .countQuotes
   110                              <1> .notQuoteToCount:
   111 0000106A 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   112 0000106C 75F0                <1>     jne .countQuotes
   113 0000106E 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   114 00001071 488D3D40F2FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   115                              <1> .getChar:
   116 00001078 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   117 00001079 3C22                <1>     cmp al, '"'     ;Is char a quote?
   118 0000107B 750E                <1>     jne .notQuote
   119 0000107D FECD                <1>     dec ch          ;We have a quote, now decrement
   120 0000107F 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   121                              <1> .searchForClosingQuote:
   122                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   123 00001081 AA                  <1>     stosb   ;Store char and inc rdi
   124 00001082 FEC1                <1>     inc cl
   125 00001084 AC                  <1>     lodsb   ;Get next char
   126 00001085 3C22                <1>     cmp al, '"'
   127 00001087 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   128 00001089 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   129                              <1> .notQuote:
   130 0000108B E848050000          <1>     call peelRedir      ;Intervene redir if needed
   131 00001090 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   132 00001092 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   133 00001094 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   134                              <1> .pipeHandle:
   135                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   136 00001096 0F84A9020000        <1>     jz pipeFailure ;We had double pipe symbol, reset!
   137                              <1> .notRedir:
   138 0000109C AA                  <1>     stosb       ;Store char and advance rdi
   139 0000109D 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   140 0000109F 7404                <1>     je .exit
   141 000010A1 FEC1                <1>     inc cl      ;Increment char count
   142 000010A3 EBD3                <1>     jmp short .getChar    ;If not, get next char
   143                              <1> .exit:
   144 000010A5 880D0CF2FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   145                              <1>     return
    13                              <2> %%_ret:
    14 000010AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> makeCmdString:
   148                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   149                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   150                              <1> ; Copies into the psp.
   151                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   152 000010AC 488D3505F2FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   153 000010B3 31C9                <1>     xor ecx, ecx
   154 000010B5 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   155                              <1> .countQuotes:
   156 000010B8 AC                  <1>     lodsb
   157 000010B9 3C22                <1>     cmp al, '"'
   158 000010BB 7507                <1>     jne .notQuoteToCount
   159 000010BD FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   160 000010BF E9F4FFFFFF          <1>     jmp .countQuotes
   161                              <1> .notQuoteToCount:
   162 000010C4 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   163 000010C6 75F0                <1>     jne .countQuotes
   164 000010C8 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   165 000010CB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   166                              <1> .getChar:
   167 000010D2 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   168 000010D3 3C22                <1>     cmp al, '"'     ;Is char a quote?
   169 000010D5 750E                <1>     jne .notQuote
   170 000010D7 FECD                <1>     dec ch          ;We have a quote, now decrement
   171 000010D9 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   172                              <1> .searchForClosingQuote:
   173                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   174 000010DB AA                  <1>     stosb   ;Store char and inc rdi
   175 000010DC FEC1                <1>     inc cl
   176 000010DE AC                  <1>     lodsb   ;Get next char
   177 000010DF 3C22                <1>     cmp al, '"'
   178 000010E1 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   179 000010E3 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   180                              <1> .notQuote:
   181 000010E5 3C7C                <1>     cmp al, "|"
   182 000010E7 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   183 000010E9 B00D                <1>     mov al, CR          ;Store the pipe char
   184 000010EB 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   185                              <1> .notPipe:
   186 000010EE AA                  <1>     stosb       ;Store char and advance rdi
   187 000010EF 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   188 000010F1 7404                <1>     je .exit
   189 000010F3 FEC1                <1>     inc cl      ;Increment char count
   190 000010F5 EBDB                <1>     jmp short .getChar    ;If not, get next char
   191                              <1> .exit:
   192 000010F7 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   193 000010FA 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   194 00001101 803E0D              <1>     cmp byte [rsi], CR  
   195                              <1>     return
    13                              <2> %%_ret:
    14 00001104 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> analyseCmdline:
   198                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   199                              <1> ; processes the command name into the FCB.  
   200 00001105 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   201 0000110C 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   202 0000110F E8B7210000          <1>     call skipDelimiters     ;Skip any preceeding separators
   203 00001114 488D3D1DF2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   204 0000111B E8E7220000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   205 00001120 48FFCE              <1>     dec rsi ;Point it back to the delim char
   206 00001123 E880000000          <1>     call .skipAndCheckCR
   207 00001128 7439                <1>     je .setupCmdVars
   208                              <1>     ;breakpoint
   209 0000112A C60579EFFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   210 00001131 4889F0              <1>     mov rax, rsi
   211 00001134 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   212 00001137 88056EEFFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   213                              <1> .skipArg:
   214 0000113D AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   215 0000113E 3C0D                <1>     cmp al, CR
   216 00001140 7421                <1>     je .setupCmdVars
   217 00001142 E892210000          <1>     call isALdelimiter
   218 00001147 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   219 00001149 E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   220 0000114E 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   221 00001150 C60556EFFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   222 00001157 4889F0              <1>     mov rax, rsi            
   223 0000115A 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   224 0000115D 88054BEFFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   225                              <1> .setupCmdVars:
   226                              <1> ;Before returning, we copy the command name to cmdName 
   227 00001163 C6051DF2FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   228 0000116A 488D3DC7F1FFFF      <1>     lea rdi, cmdPathSpec
   229 00001171 E817220000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   230 00001176 E834210000          <1>     call strlen ;Get the length of the final path componant
   231 0000117B 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   232 00001181 771D                <1>     ja .exitBad     ;Return error
   233 00001183 4889FE              <1>     mov rsi, rdi
   234 00001186 488D3DFAF1FFFF      <1>     lea rdi, cmdName
   235 0000118D FFC9                <1>     dec ecx ;Minus the terminating null
   236 0000118F 880F                <1>     mov byte [rdi], cl ;Store the length here
   237 00001191 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   238                              <1> .cpCmdName:
   239 00001194 AC                  <1>     lodsb
   240 00001195 E81F210000          <1>     call ucChar ;Uppercase the char
   241 0000119A AA                  <1>     stosb
   242 0000119B FFC9                <1>     dec ecx
   243 0000119D 75F5                <1>     jnz .cpCmdName
   244                              <1>     return
    13                              <2> %%_ret:
    14 0000119F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> .exitBad:
   246 000011A0 C605E0F1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   247                              <1>     return
    13                              <2> %%_ret:
    14 000011A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   248                              <1> .skipAndCheckCR:
   249                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   250 000011A8 E81E210000          <1>     call skipDelimiters ;Go to the next char in the input line
   251 000011AD 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   252                              <1>     return
    13                              <2> %%_ret:
    14 000011B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> doCommandLine:
   255 000011B1 488D3580F1FFFF      <1>     lea rsi, cmdPathSpec
   256                              <1>     ;The following check accounts for the end of a piped command
   257 000011B8 803DC8F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   258                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011BF 74(B0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   259 000011C1 803DBFF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   260 000011C8 0F84F7060000        <1>     je badCmdError
   261 000011CE 488D3D82EFFFFF      <1>     lea rdi, cmdFcb
   262 000011D5 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   263 000011DA CD21                <1>     int 21h
   264 000011DC 0FB71D55F1FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   265 000011E3 80FF3A              <1>     cmp bh, ":"
   266 000011E6 752D                <1>     jne .noDriveSpecified
   267 000011E8 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   268 000011EA E8CA200000          <1>     call ucChar     ;Uppercase al
   269 000011EF 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   270 000011F1 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   271 000011F4 7412                <1>     je .badDrive
   272                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   273 000011F6 803D8AF1FFFF02      <1>     cmp byte [cmdName], 2
   274 000011FD 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   275 000011FF 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   276 00001201 E87F200000          <1>     call setDrive
   277                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001206 74(B0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   278                              <1> .badDrive:
   279 00001208 488D1518F8FFFF      <1>     lea rdx, badDrv
   280 0000120F B409                <1>     mov ah, 09h
   281 00001211 CD21                <1>     int 21h
   282 00001213 F9                  <1>     stc
   283                              <1>     return
    13                              <2> %%_ret:
    14 00001214 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> .noDriveSpecified:
   285                              <1> ;Now we set the two FCB's in the command line
   286 00001215 F6058EEEFFFFFF      <1>     test byte [arg1Flg], -1
   287 0000121C 744D                <1>     jz .fcbArgsDone
   288 0000121E 0FB60586EEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   289 00001225 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   290 0000122C 4801C6              <1>     add rsi, rax    ;Point to first argument
   291 0000122F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   292 00001233 B801290000          <1>     mov eax, 2901h
   293 00001238 CD21                <1>     int 21h
   294 0000123A 88056CEEFFFF        <1>     mov byte [arg1FCBret], al
   295 00001240 F60566EEFFFFFF      <1>     test byte [arg2Flg], -1
   296 00001247 7422                <1>     jz .fcbArgsDone
   297 00001249 0FB6055EEEFFFF      <1>     movzx eax, byte [arg2Off]
   298 00001250 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   299 00001257 4801C6              <1>     add rsi, rax    ;Point to first argument
   300 0000125A 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   301 0000125E B801290000          <1>     mov eax, 2901h
   302 00001263 CD21                <1>     int 21h
   303 00001265 880544EEFFFF        <1>     mov byte [arg2FCBret], al
   304                              <1> .fcbArgsDone:
   305 0000126B 488D1D44F0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   306 00001272 488D350EF1FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   307 00001279 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   308 0000127E BAFFFF0000          <1>     mov edx, 0FFFFh
   309 00001283 B5FF                <1>     mov ch, -1
   310 00001285 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   311 00001287 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   312 0000128C BAFFFF0000          <1>     mov edx, 0FFFFh
   313 00001291 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   314 00001293 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   315                              <1>             ;        al = 0  if the command should be executed as usual
   316 00001295 84C0                <1>     test al, al
   317 00001297 7426                <1>     jz .executeInternal
   318                              <1>     ;Here we execute externally and return to the prompt
   319                              <1>     ; as if it was an internal execution
   320 00001299 488D1D16F0FFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   321 000012A0 488D35E0F0FFFF      <1>     lea rsi, cmdName        
   322 000012A7 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   323 000012AC BAFFFF0000          <1>     mov edx, 0FFFFh
   324 000012B1 B5FF                <1>     mov ch, -1
   325 000012B3 CD2F                <1>     int 2Fh
   326 000012B5 803DCBF0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   327                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000012BC 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000012BE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   328                              <1>     ;Else, we restart the command from scratch.
   329                              <1> .executeInternal:
   330                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   331                              <1> ;If not, then its immediately an external program!
   332 000012BF E8D9040000          <1>     call pullCommandline    ;Now pull the tail down
   333 000012C4 488D3D6DF0FFFF      <1>     lea rdi, cmdPathSpec
   334 000012CB E8DF1F0000          <1>     call strlen ;Get the length of the input command
   335 000012D0 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   336 000012D2 380DAFF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   337 000012D8 0F856B1A0000        <1>     jne launchChild     ;If not, a path was specified, exit!
   338                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   339 000012DE 488D1DE9F4FFFF      <1>     lea rbx, functionTable
   340                              <1> .nextEntry:
   341 000012E5 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   342 000012E8 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   343 000012EB 0F84581A0000        <1>     je launchChild      ;If so, check externally now
   344 000012F1 380D90F0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   345 000012F7 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   346                              <1>     ;Here they have the same length so lets see if the name is the same
   347 000012F9 56                  <1>     push rsi
   348                              <1>     ;ecx has the length to compare
   349 000012FA 51                  <1>     push rcx
   350 000012FB 488D7301            <1>     lea rsi, qword [rbx + 1]
   351 000012FF 488D3D82F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   352 00001306 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   353 00001308 59                  <1>     pop rcx
   354 00001309 5E                  <1>     pop rsi
   355 0000130A 751F                <1>     jne .gotoNextEntry
   356                              <1>     ;Here it was found both strings are equal
   357 0000130C 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   358 00001311 480FB71F            <1>     movzx rbx, word [rdi]
   359 00001315 488D3DE4ECFFFF      <1>     lea rdi, startLbl
   360 0000131C 4801FB              <1>     add rbx, rdi
   361 0000131F FFD3                <1>     call rbx    ;Call this function...
   362                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001321 72(BE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   363 00001323 C605E3ECFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   364                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000132A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   365                              <1> .gotoNextEntry:
   366 0000132B 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   367 00001332 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   368 00001335 EBAE                <1>     jmp short .nextEntry
   369                              <1> 
   370                              <1> redirFailure:
   371 00001337 488D1549FBFFFF      <1>     lea rdx, redirErrMsg
   372 0000133E B913000000          <1>     mov ecx, redirErrMsgL
   373 00001343 EB0C                <1>     jmp short redirPipeFailureCommon
   374                              <1> pipeFailure:
   375 00001345 488D1524FBFFFF      <1>     lea rdx, pipeErrMsg
   376 0000134C B917000000          <1>     mov ecx, pipeErrMsgL
   377                              <1> redirPipeFailureCommon:
   378                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   379                              <1> ;This routine tries to close whatever handles are not -1 and delete
   380                              <1> ; pipe files if the pipe count is not 0.
   381                              <1> ;It resets all variables and jumps to reset the stack!
   382 00001351 B800400000          <1>     mov eax, 4000h  ;Write handle
   383 00001356 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   384 0000135B CD21                <1>     int 21h
   385 0000135D 31DB                <1>     xor ebx, ebx    ;Select STDIN
   386 0000135F E8C9000000          <1>     call .closeHandle
   387 00001364 FFC3                <1>     inc ebx         ;Select STDOUT
   388 00001366 E8C2000000          <1>     call .closeHandle
   389 0000136B B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   390 00001370 488D155CFBFFFF      <1>     lea rdx, conName
   391 00001377 CD21                <1>     int 21h
   392 00001379 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   393 0000137B B800450000          <1>     mov eax, 4500h  ;DUP
   394 00001380 CD21                <1>     int 21h
   395 00001382 66C70519EDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   396 0000138B 0FB71D14EDFFFF      <1>     movzx ebx, word [redirSTDIN]
   397 00001392 E896000000          <1>     call .closeHandle
   398                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   399 00001397 66C70506EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   400 000013A0 0FB71D01EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   401 000013A7 E881000000          <1>     call .closeHandle
   402 000013AC 66C705F3ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   403 000013B5 0FB71DE4ECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   404 000013BC E86C000000          <1>     call .closeHandle
   405 000013C1 66C705D6ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   406 000013CA 0FB71DD1ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   407 000013D1 E857000000          <1>     call .closeHandle
   408 000013D6 66C705C3ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   409 000013DF C605B9ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   410 000013E6 488D1546F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   411 000013ED 803A00              <1>     cmp byte [rdx], 0
   412 000013F0 7407                <1>     jz .checkOld
   413 000013F2 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   414 000013F7 CD21                <1>     int 21h
   415                              <1> .checkOld:
   416 000013F9 488D1582F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   417 00001400 803A00              <1>     cmp byte [rdx],0
   418 00001403 7407                <1>     jz .pipeNamesComplete
   419 00001405 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   420 0000140A CD21                <1>     int 21h
   421                              <1> .pipeNamesComplete:
   422 0000140C 31C0                <1>     xor eax, eax
   423                              <1>     ;Invalidate the pointers and the paths too
   424 0000140E 488905BCF0FFFF      <1>     mov qword [newPipe], rax
   425 00001415 488905BDF0FFFF      <1>     mov qword [oldPipe], rax
   426 0000141C 890511F0FFFF        <1>     mov dword [pipe1Filespec], eax
   427 00001422 89055AF0FFFF        <1>     mov dword [pipe2Filespec], eax
   428                              <1> 
   429 00001428 E947FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   430                              <1> .closeHandle:
   431 0000142D 81FBFFFFFFFF        <1>     cmp ebx, -1
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001433 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001435 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 00001436 B8003E0000          <1>     mov eax, 3E00h
   434 0000143B CD21                <1>     int 21h
   435                              <1>     return
    13                              <2> %%_ret:
    14 0000143D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> advanceRedir:
   438                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   439                              <1> ;Close stdin redir then stdout redir. 
   440 0000143E F6055FECFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   441 00001445 0F8585000000        <1>     jnz .redirIn
   442 0000144B F6054DECFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   443 00001452 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   444 00001458 0FBF0541ECFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   445 0000145F 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   446 00001464 0F84EB000000        <1>     je .pipeOut              
   447                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   448 0000146A 0FB71D2FECFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   449 00001471 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   450 00001473 B800460000          <1>     mov eax, 4600h
   451 00001478 CD21                <1>     int 21h
   452 0000147A 0F82C5FEFFFF        <1>     jc pipeFailure
   453 00001480 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   454 00001485 CD21                <1>     int 21h
   455 00001487 0F82B8FEFFFF        <1>     jc pipeFailure
   456 0000148D 488B1545F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   457 00001494 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   458 00001499 CD21                <1>     int 21h
   459 0000149B 0F82A4FEFFFF        <1>     jc pipeFailure
   460 000014A1 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   461 000014A4 66C705F3EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   462                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   463                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   464                              <1>     ;Else exit!
   465 000014AD 0FBF05EEEBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   466 000014B4 3DFFFFFFFF          <1>     cmp eax, -1
   467 000014B9 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   468 000014BF C605D9EBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   469 000014C6 F605D8EBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   470 000014CD 753D                <1>     jnz .redirOut               ;Go for it if so!
   471                              <1>     return
    13                              <2> %%_ret:
    14 000014CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> .redirIn:
   473                              <1> ;Here we clean redirIn
   474 000014D0 0FB71DCFEBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   475 000014D7 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   476 000014D9 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   477 000014DE CD21                <1>     int 21h
   478 000014E0 0F8251FEFFFF        <1>     jc redirFailure
   479 000014E6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   480 000014EB CD21                <1>     int 21h
   481 000014ED 0F8244FEFFFF        <1>     jc redirFailure
   482 000014F3 66C705AAEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   483 000014FC C605A1EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   484 00001503 F60595EBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   485 0000150A 7549                <1>     jnz .pipeOut
   486                              <1> .redirOut:
   487 0000150C F60592EBFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   488                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001513 74(CF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   489                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   490 00001515 F60583EBFFFFFF      <1>     test byte [pipeFlag], -1
   491 0000151C 7537                <1>     jnz short .pipeOut
   492 0000151E 0FB71D83EBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   493 00001525 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   494 0000152A B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   495 0000152F CD21                <1>     int 21h
   496 00001531 0F8200FEFFFF        <1>     jc redirFailure
   497 00001537 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   498 0000153C CD21                <1>     int 21h
   499 0000153E 0F82F3FDFFFF        <1>     jc redirFailure
   500 00001544 66C7055BEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   501 0000154D C60551EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   502                              <1>     return
    13                              <2> %%_ret:
    14 00001554 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .pipeOut:
   504                              <1> ;Duplicate STDIN to save across pipe
   505 00001555 0FBF0546EBFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   506 0000155C 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   507                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001561 74(54)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   508 00001563 B800450000          <1>     mov eax, 4500h
   509 00001568 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   510 0000156A CD21                <1>     int 21h
   511 0000156C 0F82D3FDFFFF        <1>     jc pipeFailure
   512 00001572 66890527EBFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   513                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   514 00001579 B800460000          <1>     mov eax, 4600h
   515 0000157E 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   516 00001580 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   517 00001582 CD21                <1>     int 21h
   518 00001584 0F82BBFDFFFF        <1>     jc pipeFailure
   519                              <1> ;Now return the original stdout to stdout
   520 0000158A 89D9                <1>     mov ecx, ebx
   521 0000158C 0FB71D0FEBFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   522 00001593 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   523 00001598 CD21                <1>     int 21h
   524 0000159A 0F82A5FDFFFF        <1>     jc pipeFailure
   525                              <1> ;Now close the DUP'ed STDOUT
   526 000015A0 B8003E0000          <1>     mov eax, 3E00h
   527 000015A5 CD21                <1>     int 21h
   528 000015A7 0F8298FDFFFF        <1>     jc pipeFailure
   529                              <1> ;Finally unwind STDIN to the beginning of the file
   530 000015AD B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   531 000015B2 31DB                <1>     xor ebx, ebx    ;STDIN handle
   532 000015B4 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   533 000015B6 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   534 000015B8 CD21                <1>     int 21h
   535 000015BA 0F8285FDFFFF        <1>     jc pipeFailure  ;This should never happen
   536 000015C0 488B150AEFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   537 000015C7 4889150BEFFFFF      <1>     mov qword [oldPipe], rdx
   538 000015CE 66C705CBEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   539                              <1>     return
    13                              <2> %%_ret:
    14 000015D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> 
   542                              <1> peelRedir:
   543                              <1> ;Checks and sets up redir as appropriate
   544                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   545                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   546                              <1> ;Output: ZF=NZ => No redir
   547                              <1> ;        ZF=ZY => Redir
   548                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   549                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   550 000015D8 51                  <1>     push rcx
   551 000015D9 57                  <1>     push rdi
   552 000015DA 3C3C                <1>     cmp al, "<"
   553 000015DC 740C                <1>     je .inputRedir
   554 000015DE 3C3E                <1>     cmp al, ">"
   555 000015E0 7427                <1>     je .outputRedir
   556 000015E2 3C7C                <1>     cmp al, "|"
   557 000015E4 7441                <1>     je .pipeSetup
   558 000015E6 F8                  <1>     clc
   559                              <1> .redirExit:
   560 000015E7 5F                  <1>     pop rdi
   561 000015E8 59                  <1>     pop rcx
   562                              <1>     return
    13                              <2> %%_ret:
    14 000015E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> .inputRedir:
   564 000015EA C605B3EAFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   565 000015F1 488D3D9DEDFFFF      <1>     lea rdi, rdrInFilespec
   566                              <1> .redirCommon:
   567 000015F8 E8CE1C0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   568 000015FD E8051E0000          <1>     call cpDelimPathToBufz
   569 00001602 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   570 00001605 30C0                <1>     xor al, al  ;Clear the ZF flag
   571 00001607 EBDE                <1>     jmp short .redirExit
   572                              <1> .outputRedir:
   573 00001609 C60595EAFFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   574 00001610 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   575 00001613 7509                <1>     jne .notDouble
   576 00001615 FE058AEAFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   577 0000161B 48FFC6              <1>     inc rsi ;Go past it too
   578                              <1> .notDouble:
   579 0000161E 488D3DBFEDFFFF      <1>     lea rdi, rdrOutFilespec
   580 00001625 EBD1                <1>     jmp short .redirCommon
   581                              <1> .pipeSetup:
   582 00001627 56                  <1>     push rsi    ;Save rsi pointing to char past |
   583 00001628 E89E1C0000          <1>     call skipDelimiters ;Check if this is a double ||
   584 0000162D 803E7C              <1>     cmp byte [rsi], "|" 
   585 00001630 5E                  <1>     pop rsi
   586 00001631 F9                  <1>     stc
   587 00001632 EBB3                <1>     jmp short .redirExit
   588                              <1> 
   589                              <1> setupRedirandPipes:
   590                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   591                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   592 00001634 0F8484000000        <1>     jz .redirIn
   593 0000163A 488D15F2EDFFFF      <1>     lea rdx, pipe1Filespec
   594 00001641 803A00              <1>     cmp byte [rdx], 0
   595 00001644 7410                <1>     jz .pathFound
   596 00001646 488D1535EEFFFF      <1>     lea rdx, pipe2Filespec
   597 0000164D 803A00              <1>     cmp byte [rdx], 0
   598 00001650 0F85EFFCFFFF        <1>     jnz pipeFailure
   599                              <1> .pathFound:
   600 00001656 48891574EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   601 0000165D B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   602 00001662 BB01000000          <1>     mov ebx, 1
   603 00001667 CD21                <1>     int 21h
   604 00001669 0F82D6FCFFFF        <1>     jc pipeFailure
   605 0000166F 6689052CEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   606 00001676 E8161C0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   607 0000167B 0441                <1>     add al, "A"
   608 0000167D BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   609 00001682 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   610 00001684 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   611 00001686 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   612 00001688 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   613 0000168D CD21                <1>     int 21h
   614 0000168F 0F82B0FCFFFF        <1>     jc pipeFailure
   615                              <1>     ;AX has the handle for this file now, this will become STDOUT
   616                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   617 00001695 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   618 00001698 B901000000          <1>     mov ecx, 1
   619 0000169D B800460000          <1>     mov eax, 4600h
   620 000016A2 CD21                <1>     int 21h
   621 000016A4 0F829BFCFFFF        <1>     jc pipeFailure
   622 000016AA B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   623 000016AF CD21                <1>     int 21h
   624 000016B1 0F828EFCFFFF        <1>     jc pipeFailure
   625 000016B7 C605E1E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   626                              <1> .redirIn:
   627                              <1> ;Now check if any other redir needs to be setup
   628                              <1> ;Checks and sets up redir as appropriate.
   629                              <1>     ;Setup the redir here for STDIN
   630 000016BE F605DFE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   631 000016C5 7449                <1>     jz .redirOut
   632 000016C7 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   633 000016C9 B800450000          <1>     mov eax, 4500h
   634 000016CE CD21                <1>     int 21h
   635 000016D0 0F8261FCFFFF        <1>     jc redirFailure
   636 000016D6 668905C9E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   637 000016DD 488D15B1ECFFFF      <1>     lea rdx, rdrInFilespec
   638 000016E4 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   639 000016E9 CD21                <1>     int 21h
   640 000016EB 0F8246FCFFFF        <1>     jc redirFailure
   641 000016F1 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   642 000016F3 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   643 000016F6 B800460000          <1>     mov eax, 4600h
   644 000016FB CD21                <1>     int 21h
   645 000016FD 0F8234FCFFFF        <1>     jc redirFailure
   646 00001703 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   647 00001708 CD21                <1>     int 21h
   648 0000170A 0F8227FCFFFF        <1>     jc redirFailure
   649                              <1> .redirOut:
   650 00001710 F60588E9FFFFFF      <1>     test byte [pipeFlag], -1    ;If pipe is active, pause setting redir out
   651                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001717 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001719 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   652 0000171A F60584E9FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   653                              <1>     retz                        ;Exit if not
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001721 74(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   654                              <1>     ;Else setup the redir here for STDOUT
   655 00001723 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   656 00001728 B800450000          <1>     mov eax, 4500h
   657 0000172D CD21                <1>     int 21h
   658 0000172F 0F8202FCFFFF        <1>     jc redirFailure
   659 00001735 6689056CE9FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   660 0000173C 488D15A1ECFFFF      <1>     lea rdx, rdrOutFilespec
   661 00001743 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   662 00001748 CD21                <1>     int 21h
   663 0000174A 730F                <1>     jnc .fileExists
   664 0000174C B8003C0000          <1>     mov eax, 3C00h
   665 00001751 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   666 00001753 CD21                <1>     int 21h
   667 00001755 0F82DCFBFFFF        <1>     jc redirFailure
   668                              <1> .fileExists:
   669 0000175B B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   670 00001760 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   671 00001763 B800460000          <1>     mov eax, 4600h  ;DUP2
   672 00001768 CD21                <1>     int 21h
   673 0000176A 0F82C7FBFFFF        <1>     jc redirFailure
   674 00001770 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   675 00001775 CD21                <1>     int 21h
   676 00001777 0F82BAFBFFFF        <1>     jc redirFailure
   677 0000177D 803D21E9FFFF01      <1>     cmp byte [redirOut], 1
   678                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001784 74(19)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   679                              <1>     ;Here we move the file pointer to the end of the file
   680 00001786 31D2                <1>     xor edx, edx    ;Low order 32 bits
   681 00001788 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   682 0000178A BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   683 0000178F B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   684 00001794 CD21                <1>     int 21h
   685 00001796 0F829BFBFFFF        <1>     jc redirFailure
   686                              <1>     return
    13                              <2> %%_ret:
    14 0000179C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   687                              <1> 
   688                              <1> 
   689                              <1> pullCommandline:
   690                              <1> ;This command pulls the command tail down, removing the whole launch command
   691 0000179D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
   692                              <1> ;Skip leading separators
   693                              <1> .pctSkipLeading:
   694 000017A4 AC                  <1>     lodsb   ;Get first char
   695 000017A5 E82F1B0000          <1>     call isALdelimiter
   696 000017AA 74F8                <1>     je .pctSkipLeading
   697 000017AC 48FFCE              <1>     dec rsi
   698                              <1>     ;rsi points to the start of the command
   699 000017AF 488D3D82EBFFFF      <1>     lea rdi, cmdPathSpec
   700 000017B6 E8F41A0000          <1>     call strlen ;Get the length of the command
   701 000017BB FFC9                <1>     dec ecx ;Minus the terminating null
   702                              <1>     ;breakpoint
   703 000017BD 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   704 000017C0 280DE5E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   705 000017C6 280DE2E8FFFF        <1>     sub byte [arg2Off], cl
   706 000017CC 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   707 000017CE 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   708                              <1> .pctPullChars:
   709 000017D5 AC                  <1>     lodsb
   710 000017D6 AA                  <1>     stosb
   711 000017D7 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   712 000017D9 7404                <1>     je .pctExit
   713 000017DB FFC1                <1>     inc ecx     ;Increment count
   714 000017DD EBF6                <1>     jmp short .pctPullChars 
   715                              <1> .pctExit:
   716 000017DF 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   717                              <1>     return
    13                              <2> %%_ret:
    14 000017E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   718                              <1> 
   719                              <1> batNextLine:
   720                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   721 000017E7 488D1513000000      <1>     lea rdx, .l1
   722 000017EE B800090000          <1>     mov eax, 0900h
   723 000017F3 CD21                <1>     int 21h
   724 000017F5 C605B4E8FFFF00      <1>     mov byte [batFlag], 0
   725 000017FC E973F7FFFF          <1>     jmp commandMain
   726 00001801 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   726 0000180A 652E2E2E2077616974- <1>
   726 00001813 2C20776861743F2048- <1>
   726 0000181C 6F772064696420796F- <1>
   726 00001825 7520646F2074686174- <1>
   726 0000182E 3F0D0A24            <1>
   727                              <1> 
   728                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   729                              <1> ;Input: rsi points to the count byte of a command line
   730 00001832 4150                <1>     push r8
   731 00001834 4151                <1>     push r9
   732 00001836 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   733 00001838 CD21                <1>     int 21h
   734 0000183A 52                  <1>     push rdx    ;Save on the stack
   735 0000183B 488D1DBEE6FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   736 00001842 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   737 00001844 CD21                <1>     int 21h
   738 00001846 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   739 00001849 4989D9              <1>     mov r9, rbx
   740 0000184C 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   741 00001853 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   742 00001858 F348A5              <1>     rep movsq   ;Copy command line over
   743                              <1>     ;call doCommandLine
   744 0000185B 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   745 0000185C B450                <1>     mov ah, 50h ;Set Current PSP
   746 0000185E CD21                <1>     int 21h
   747 00001860 4159                <1>     pop r9
   748 00001862 4158                <1>     pop r8
   749 00001864 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badAccError:
     7 00001866 488D1579F3FFFF      <1>     lea rdx, accDenMsg
     8 0000186D EB46                <1>     jmp short badCmn
     9                              <1> noSelfCopyError:
    10 0000186F 488D1530F1FFFF      <1>     lea rdx, noSelfCopy
    11 00001876 EB3D                <1>     jmp short badCmn
    12                              <1> badParamError:
    13 00001878 488D15E5F1FFFF      <1>     lea rdx, badParm
    14 0000187F EB34                <1>     jmp short badCmn
    15                              <1> badDriveError:
    16 00001881 488D159FF1FFFF      <1>     lea rdx, badDrv
    17 00001888 EB2B                <1>     jmp short badCmn
    18                              <1> badArgError:
    19 0000188A 488D1581F4FFFF      <1>     lea rdx, badArgs
    20 00001891 EB22                <1>     jmp short badCmn
    21                              <1> badFileError:
    22 00001893 488D155CF4FFFF      <1>     lea rdx, badSpec
    23 0000189A EB19                <1>     jmp short badCmn
    24                              <1> badDupFnf:
    25                              <1> ;Hybrid error message
    26 0000189C 488D1590F0FFFF      <1>     lea rdx, dupName
    27 000018A3 EB10                <1>     jmp short badCmn
    28                              <1> badFnf:
    29 000018A5 488D159EF0FFFF      <1>     lea rdx, fnfMsg
    30 000018AC EB07                <1>     jmp short badCmn
    31                              <1> badDirError:
    32 000018AE 488D15B0F2FFFF      <1>     lea rdx, badDir
    33                              <1> badCmn:
    34 000018B5 C60551E7FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    35 000018BC B800090000          <1>     mov eax, 0900h
    36 000018C1 CD21                <1>     int 21h
    37 000018C3 F9                  <1>     stc ;Return with CY => Error occured
    38                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 000018C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> badCmdError:
    40 000018C5 488D154CF0FFFF      <1>     lea rdx, badCmd
    41 000018CC EBE7                <1>     jmp short badCmn
    42                              <1> dir:
    43                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    44 000018CE C6058EECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    45 000018D5 C60588ECFFFF00      <1>     mov byte [dirLineCtr], 0
    46 000018DC C60582ECFFFF00      <1>     mov byte [dirFileCtr], 0
    47 000018E3 C6057DECFFFF00      <1>     mov byte [dirSrchDir], 0
    48 000018EA 66C705EEEBFFFF0000  <1>     mov word [searchSpec], 0
    49 000018F3 488D3DEFECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    50 000018FA C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    51 000018FD 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    51 00001906 3F                  <1>
    52 00001907 48894701            <1>     mov qword [rdi + fcb.filename], rax
    53 0000190B C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    54                              <1>     ;Start by scanning for the switches
    55 00001912 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    56 00001919 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    57                              <1>     ;call skipDelimiters ;Skip leading delimiters
    58                              <1>     ;add rsi, 3  ;Go past the DIR
    59                              <1> .scanNew:
    60 0000191C E8AA190000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    61 00001921 AC                  <1>     lodsb   ;Get this char
    62 00001922 3C0D                <1>     cmp al, CR
    63 00001924 744D                <1>     je .scanDone
    64 00001926 3A0500E7FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    65 0000192C 7524                <1>     jne .notSwitch
    66 0000192E AC                  <1>     lodsb   ;Get the next char
    67 0000192F E885190000          <1>     call ucChar
    68 00001934 3C57                <1>     cmp al, "W"
    69 00001936 7509                <1>     jne .notWide
    70 00001938 800D24ECFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    71 0000193F EBDB                <1>     jmp short .scanNew
    72                              <1> .notWide:
    73 00001941 3C50                <1>     cmp al, "P"
    74 00001943 0F852FFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    75 00001949 800D13ECFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    76 00001950 EBCA                <1>     jmp short .scanNew
    77                              <1> .notSwitch:
    78 00001952 F6050AECFFFF04      <1>     test byte [dirFlags], dirFileType
    79 00001959 0F8519FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    80                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    81 0000195F 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    82 00001962 E8FB1A0000          <1>     call copyArgumentToSearchSpec   
    83 00001967 48FFCE              <1>     dec rsi ;Point back to the terminator char
    84 0000196A 800DF2EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    85 00001971 EBA9                <1>     jmp short .scanNew
    86                              <1> .scanDone:
    87 00001973 F605E9EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    88 0000197A 7438                <1>     jz .currentDrv
    89                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    90 0000197C 488D355EEBFFFF      <1>     lea rsi, searchSpec
    91 00001983 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    92 00001987 752B                <1>     jne .currentDrv
    93                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    94 00001989 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    95 0000198E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
    96 00001992 B801290000          <1>     mov eax, 2901h   ;Parse filename
    97 00001997 CD21                <1>     int 21h
    98 00001999 3CFF                <1>     cmp al, -1
    99 0000199B 0F84E0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   100                              <1>     ;Else the drive in the fcb is valid
   101 000019A1 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   102 000019A6 84C0                <1>     test al, al
   103 000019A8 740A                <1>     jz .currentDrv
   104 000019AA FEC8                <1>     dec al  ;Convert to 0 based drive number
   105 000019AC 8805B4EBFFFF        <1>     mov byte [dirDrv], al
   106 000019B2 EB0B                <1>     jmp short .dirPrintVol
   107                              <1> .currentDrv:
   108 000019B4 E8D8180000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   109 000019B9 8805A7EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   110                              <1> .dirPrintVol:
   111 000019BF 488D351BEBFFFF      <1>     lea rsi, searchSpec
   112                              <1> ;Now construct the path on dirSrchDir.
   113 000019C6 488D3D9AEBFFFF      <1>     lea rdi, dirSrchDir
   114 000019CD 0FB60592EBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   115 000019D4 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   116 000019D6 0441                <1>     add al, "A" ;Turn into a letter
   117 000019D8 B43A                <1>     mov ah, ":"
   118 000019DA 66AB                <1>     stosw   ;Store X: into the search path
   119 000019DC B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   120 000019E1 CD2F                <1>     int 2fh
   121 000019E3 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   122 000019E5 0F8496FEFFFF        <1>     je badDriveError
   123                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   124 000019EB 8A053AE6FFFF        <1>     mov al, byte [pathSep]
   125 000019F1 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   126 000019F3 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   127 000019F5 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   128 000019F6 FEC2                <1>     inc dl  ;Increment by 1
   129 000019F8 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   130 000019FB B800470000          <1>     mov eax, 4700h  ;Print current working directory
   131 00001A00 CD21                <1>     int 21h
   132 00001A02 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   133                              <1>     ;rsi points to the first char in the provided path.
   134                              <1>     ;rdi points to the first char of the cwd.
   135 00001A05 31C0                <1>     xor eax, eax
   136                              <1> .goToEndOfCwd:
   137                              <1> ;Move to the end of the string, could use repne?
   138 00001A07 3807                <1>     cmp byte [rdi], al
   139 00001A09 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   140 00001A0B 48FFC7              <1>     inc rdi
   141 00001A0E EBF7                <1>     jmp short .goToEndOfCwd
   142                              <1> .prepCopy:
   143 00001A10 8A0515E6FFFF        <1>     mov al, byte [pathSep]
   144 00001A16 3806                <1>     cmp byte [rsi], al
   145 00001A18 7412                <1>     je .copyPathLoop
   146 00001A1A B43A                <1>     mov ah, ":"
   147 00001A1C 86C4                <1>     xchg al, ah
   148 00001A1E 663947FE            <1>     cmp word [rdi - 2], ax
   149 00001A22 7408                <1>     je .copyPathLoop
   150 00001A24 88E0                <1>     mov al, ah
   151 00001A26 3847FF              <1>     cmp byte [rdi - 1], al
   152 00001A29 7401                <1>     je .copyPathLoop
   153 00001A2B AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   154                              <1> .copyPathLoop:
   155 00001A2C AC                  <1>     lodsb
   156 00001A2D 3A05F8E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   157 00001A33 7509                <1>     jne .checkDot  ;If not, store it
   158                              <1> .lpPathseps:
   159 00001A35 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   160 00001A37 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   161 00001A39 48FFC6              <1>     inc rsi
   162 00001A3C EBF7                <1>     jmp short .lpPathseps
   163                              <1> .checkDot:
   164 00001A3E 3C2E                <1>     cmp al, "."
   165 00001A40 7407                <1>     je .dots
   166                              <1> .store:
   167 00001A42 AA                  <1>     stosb
   168 00001A43 84C0                <1>     test al, al ;Was the char we just copied a null?
   169 00001A45 7472                <1>     jz .exitPathCopy
   170 00001A47 EBE3                <1>     jmp short .copyPathLoop
   171                              <1> .dots:
   172                              <1>     ;Here handle dot and dot dot
   173                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   174                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   175                              <1>     ; by 1. If it is null, go to top of loop.
   176                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   177 00001A49 8A25DCE5FFFF        <1>     mov ah, byte [pathSep]
   178 00001A4F 3867FF              <1>     cmp byte [rdi - 1], ah  
   179 00001A52 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   180 00001A54 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   181 00001A56 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   182 00001A59 7413                <1>     je .twoDot
   183                              <1>     ;This is only a "current dir" when next char is pathsep or null
   184 00001A5B 3A25CAE5FFFF        <1>     cmp ah, byte [pathSep]
   185 00001A61 7406                <1>     je .skipThisPathsep
   186 00001A63 84E4                <1>     test ah, ah
   187 00001A65 74C5                <1>     jz .copyPathLoop
   188 00001A67 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   189                              <1> .skipThisPathsep:
   190                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   191 00001A69 48FFC6              <1>     inc rsi ;Point to the pathsep
   192 00001A6C EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   193                              <1> .twoDot:
   194                              <1>     ;Woohoo, this works!
   195 00001A6E 48FFC6              <1>     inc rsi ;Move past the second dot
   196 00001A71 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   197 00001A73 3A25B2E5FFFF        <1>     cmp ah, byte [pathSep]
   198 00001A79 7408                <1>     je .tdOk
   199 00001A7B 84E4                <1>     test ah, ah
   200 00001A7D 0F85F5FDFFFF        <1>     jne badParamError
   201                              <1> .tdOk:
   202 00001A83 8A05A2E5FFFF        <1>     mov al, byte byte [pathSep]
   203 00001A89 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   204 00001A8D 0F84E5FDFFFF        <1>     je badParamError
   205 00001A93 4881EF02000000      <1>     sub rdi, 2
   206 00001A9A 31C9                <1>     xor ecx, ecx
   207 00001A9C FFC9                <1>     dec ecx
   208 00001A9E FD                  <1>     std
   209 00001A9F F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   210 00001AA1 FC                  <1>     cld
   211 00001AA2 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   212 00001AA9 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   213 00001AAB 0F847BFFFFFF        <1>     jz .copyPathLoop
   214 00001AB1 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   215 00001AB4 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   216                              <1> .exitPathCopy:
   217                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   218 00001AB9 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   219 00001AC0 8A0565E5FFFF        <1>     mov al, byte [pathSep]
   220 00001AC6 B43A                <1>     mov ah, ":"
   221 00001AC8 86C4                <1>     xchg al, ah
   222 00001ACA 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   223 00001ACE 7409                <1>     je .skipOverwrite
   224 00001AD0 88E0                <1>     mov al, ah
   225 00001AD2 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   226 00001AD4 7503                <1>     jne .skipOverwrite
   227 00001AD6 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   228                              <1> .skipOverwrite:
   229 00001AD9 488D3587EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   230 00001AE0 4889F7              <1>     mov rdi, rsi
   231 00001AE3 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   232 00001AE8 CD2F                <1>     int 2fh
   233 00001AEA E880190000          <1>     call scanForWildcards
   234 00001AEF 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   235 00001AF1 4889F2              <1>     mov rdx, rsi
   236 00001AF4 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   237 00001AF8 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   238                              <1> .notNull:
   239 00001AFA E8371A0000          <1>     call setDTA ;Set the DTA
   240 00001AFF B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   241 00001B04 B8004E0000          <1>     mov eax, 4E00h ;Find first
   242 00001B09 CD21                <1>     int 21h
   243 00001B0B 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   244                              <1> ;Now we have searched for the file, is a directory?
   245 00001B0D F60568E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   246 00001B14 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   247                              <1>     ;Here we are searching IN a directory. Default search pattern!
   248 00001B16 31C0                <1>     xor eax, eax
   249 00001B18 31C9                <1>     xor ecx, ecx
   250 00001B1A FFC9                <1>     dec ecx
   251 00001B1C F2AE                <1>     repne scasb
   252 00001B1E 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   253 00001B21 EB40                <1>     jmp short .wcDefaultSearch
   254                              <1> .wcSearchPattern:
   255                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   256                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   257 00001B23 31C0                <1>     xor eax, eax
   258 00001B25 31C9                <1>     xor ecx, ecx
   259 00001B27 FFC9                <1>     dec ecx
   260 00001B29 F2AE                <1>     repne scasb ;Scan forwards
   261                              <1>     ;Here rdi points past the null at the end
   262 00001B2B 8A05FAE4FFFF        <1>     mov al, byte [pathSep]
   263 00001B31 31C9                <1>     xor ecx, ecx
   264 00001B33 FFC9                <1>     dec ecx
   265 00001B35 FD                  <1>     std ;Search backwards
   266 00001B36 F2AE                <1>     repne scasb
   267 00001B38 FC                  <1>     cld ;Search forwards again
   268 00001B39 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   269 00001B3C 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   270 00001B40 7503                <1>     jne .wcsp1
   271 00001B42 48FFC7              <1>     inc rdi ;Go one char forwards
   272                              <1> .wcsp1:
   273                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   274 00001B45 57                  <1>     push rdi
   275 00001B46 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   276 00001B48 7503                <1>     jne .wcsp2
   277 00001B4A 48FFC7              <1>     inc rdi
   278                              <1> .wcsp2:
   279 00001B4D 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   280 00001B50 488D3D92EAFFFF      <1>     lea rdi, dirSrchFCB
   281 00001B57 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   282 00001B5C CD21                <1>     int 21h
   283 00001B5E 5F                  <1>     pop rdi
   284 00001B5F 31C0                <1>     xor eax, eax
   285 00001B61 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   286                              <1> .wcDefaultSearch:
   287 00001B63 0FB605FCE9FFFF      <1>     movzx eax, byte [dirDrv] 
   288 00001B6A E8060F0000          <1>     call volume.dirEP
   289 00001B6F 488D1557F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   290 00001B76 B409                <1>     mov ah, 09h
   291 00001B78 CD21                <1>     int 21h
   292 00001B7A C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   293 00001B7D 488D15E3E9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   294 00001B84 B409                <1>     mov ah, 09h
   295 00001B86 CD21                <1>     int 21h
   296 00001B88 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   297 00001B8B 488D152CEDFFFF      <1>     lea rdx, crlf2
   298 00001B92 B409                <1>     mov ah, 09h
   299 00001B94 CD21                <1>     int 21h
   300                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   301                              <1> ;rdi points to the terminating null
   302 00001B96 8A058FE4FFFF        <1>     mov al, byte [pathSep]
   303 00001B9C 3847FF              <1>     cmp byte [rdi - 1], al
   304 00001B9F 7403                <1>     je .root
   305 00001BA1 48FFC7              <1>     inc rdi
   306                              <1> .root:
   307 00001BA4 48FFCF              <1>     dec rdi ;Point back to the pathsep
   308 00001BA7 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   309 00001BA8 488D353BEAFFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   310 00001BAF E8FD170000          <1>     call FCBToAsciiz    ;Terminates for free
   311 00001BB4 E801000000          <1>     call .searchForFile
   312                              <1>     return
    13                              <2> %%_ret:
    14 00001BB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> .searchForFile:
   315 00001BBA E877190000          <1>     call setDTA
   316 00001BBF B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   317 00001BC4 488D159CE9FFFF      <1>     lea rdx, dirSrchDir
   318 00001BCB B8004E0000          <1>     mov eax, 4E00h ;Find first
   319 00001BD0 CD21                <1>     int 21h
   320 00001BD2 720B                <1>     jc .dirNoMoreFiles
   321                              <1> .findNext:
   322 00001BD4 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   323 00001BD9 B44F                <1>     mov ah, 4Fh
   324 00001BDB CD21                <1>     int 21h
   325 00001BDD 73F5                <1>     jnc .findNext 
   326                              <1> .dirNoMoreFiles:
   327 00001BDF F6057DE9FFFF01      <1>     test byte [dirFlags], dirWideType
   328 00001BE6 740B                <1>     jz .dirNoEndNewLine
   329 00001BE8 488D15CCECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   330 00001BEF B409                <1>     mov ah, 09h
   331 00001BF1 CD21                <1>     int 21h
   332                              <1> .dirNoEndNewLine:
   333                              <1>     ;Now we print the number of files and the number of bytes on the disk
   334 00001BF3 488D15A4F2FFFF      <1>     lea rdx, fourSpc
   335 00001BFA B409                <1>     mov ah, 09h
   336 00001BFC CD21                <1>     int 21h
   337 00001BFE B409                <1>     mov ah, 09h ;Print four Spaces twice
   338 00001C00 CD21                <1>     int 21h
   339 00001C02 0FB6055CE9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   340 00001C09 E875180000          <1>     call printDecimalWord
   341 00001C0E 488D15F1EDFFFF      <1>     lea rdx, dirOk
   342 00001C15 B409                <1>     mov ah, 09h
   343 00001C17 CD21                <1>     int 21h
   344 00001C19 488D1583F2FFFF      <1>     lea rdx, threeSpc
   345 00001C20 B409                <1>     mov ah, 09h
   346 00001C22 CD21                <1>     int 21h
   347 00001C24 B800360000          <1>     mov eax, 3600h ;Get disk info
   348 00001C29 8A1537E9FFFF        <1>     mov dl, byte [dirDrv]
   349 00001C2F FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   350 00001C31 CD21                <1>     int 21h ;Get disk free space info
   351 00001C33 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   352 00001C36 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   353 00001C39 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   354 00001C3B F7E1                <1>     mul ecx ;Get bytes per cluster
   355 00001C3D 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   356                              <1>     ;rax now has the number of free bytes on the disk
   357 00001C40 E83E180000          <1>     call printDecimalWord
   358 00001C45 488D15C4EDFFFF      <1>     lea rdx, bytesOk
   359 00001C4C B409                <1>     mov ah, 09h
   360 00001C4E CD21                <1>     int 21h
   361                              <1>     return
    13                              <2> %%_ret:
    14 00001C50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> .dirPrintFileData:
   364                              <1> ;Use cmdFcb to build the file name with space
   365                              <1> ;Start by print the name (same for both cases)
   366                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   367 00001C51 F60524E5FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   368                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C58 75(50)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   369 00001C5A 488D3524E5FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   370 00001C61 488D3DEFE4FFFF      <1>     lea rdi, cmdFcb
   371 00001C68 E8D6160000          <1>     call asciiFilenameToFCB
   372 00001C6D 488D15E3E4FFFF      <1>     lea rdx, cmdFcb
   373 00001C74 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   374 00001C79 BB01000000          <1>     mov ebx, 1  ;STDOUT
   375 00001C7E B440                <1>     mov ah, 40h ;Write handle
   376 00001C80 CD21                <1>     int 21h
   377 00001C82 52                  <1>     push rdx
   378 00001C83 B220                <1>     mov dl, " "
   379 00001C85 B402                <1>     mov ah, 02h ;Print char
   380 00001C87 CD21                <1>     int 21h
   381 00001C89 5A                  <1>     pop rdx
   382 00001C8A 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   383 00001C91 B903000000          <1>     mov ecx, 3  ;Print three chars
   384 00001C96 BB01000000          <1>     mov ebx, 1  ;STDOUT
   385 00001C9B B440                <1>     mov ah, 40h ;Write handle
   386 00001C9D CD21                <1>     int 21h
   387 00001C9F F605BDE8FFFF01      <1>     test byte [dirFlags], dirWideType
   388 00001CA6 0F85A8000000        <1>     jnz .widePrint
   389                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   390                              <1>     ;Now check if a DIR
   391 00001CAC F605C9E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   392 00001CB3 7418                <1>     jz .dirPrintNotDir
   393 00001CB5 488D1562EDFFFF      <1>     lea rdx, dirLbl
   394 00001CBC B409                <1>     mov ah, 09h
   395 00001CBE CD21                <1>     int 21h
   396 00001CC0 488D15DCF1FFFF      <1>     lea rdx, threeSpc
   397 00001CC7 B409                <1>     mov ah, 09h
   398 00001CC9 CD21                <1>     int 21h
   399 00001CCB EB4F                <1>     jmp short .dirPrintFileDT
   400                              <1> .dirPrintNotDir:
   401                              <1> ;Here we print the file size
   402 00001CCD B220                <1>     mov dl, " "
   403 00001CCF B402                <1>     mov ah, 02h
   404 00001CD1 CD21                <1>     int 21h
   405 00001CD3 8B05A8E4FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   406 00001CD9 E816180000          <1>     call getDecimalWord
   407 00001CDE 4889CB              <1>     mov rbx, rcx
   408 00001CE1 51                  <1>     push rcx
   409 00001CE2 480FCB              <1>     bswap rbx
   410 00001CE5 B908000000          <1>     mov ecx, 8
   411                              <1> .dirPrintFileSizePrep:
   412 00001CEA 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   413 00001CEC 7514                <1>     jne .dirPrintFileSize
   414 00001CEE B402                <1>     mov ah, 02h
   415 00001CF0 B220                <1>     mov dl, " "
   416 00001CF2 CD21                <1>     int 21h
   417 00001CF4 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   418 00001CF8 FFC9                <1>     dec ecx
   419 00001CFA 81F901000000        <1>     cmp ecx, 1
   420 00001D00 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   421                              <1> .dirPrintFileSize:
   422 00001D02 5B                  <1>     pop rbx
   423                              <1> .dirPrintFileSizeLoop:
   424 00001D03 88DA                <1>     mov dl, bl
   425 00001D05 B402                <1>     mov ah, 02h
   426 00001D07 CD21                <1>     int 21h
   427 00001D09 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   428 00001D0D FFC9                <1>     dec ecx
   429 00001D0F 75F2                <1>     jnz .dirPrintFileSizeLoop
   430 00001D11 488D158FF1FFFF      <1>     lea rdx, twoSpc
   431 00001D18 B409                <1>     mov ah, 09h
   432 00001D1A CD21                <1>     int 21h
   433                              <1> .dirPrintFileDT:
   434 00001D1C B220                <1>     mov dl, " "
   435 00001D1E B402                <1>     mov ah, 02h
   436 00001D20 CD21                <1>     int 21h
   437 00001D22 0FB70556E4FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   438 00001D29 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   439 00001D2B E897120000          <1>     call printDate
   440 00001D30 488D1570F1FFFF      <1>     lea rdx, twoSpc
   441 00001D37 B409                <1>     mov ah, 09h
   442 00001D39 CD21                <1>     int 21h
   443 00001D3B 0FB7053BE4FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   444 00001D42 E8A2130000          <1>     call printTime
   445 00001D47 488D156DEBFFFF      <1>     lea rdx, crlf
   446 00001D4E B409                <1>     mov ah, 09h
   447 00001D50 CD21                <1>     int 21h
   448 00001D52 EB0B                <1>     jmp short .dirPrintNameExit
   449                              <1> .widePrint:
   450                              <1> ;If /W, print name space ext space space space space
   451 00001D54 488D1543F1FFFF      <1>     lea rdx, fourSpc
   452 00001D5B B409                <1>     mov ah, 09h ;Print string
   453 00001D5D CD21                <1>     int 21h
   454                              <1> .dirPrintNameExit:
   455 00001D5F FE0500E8FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   456 00001D65 FE05F9E7FFFF        <1>     inc byte [dirLineCtr]
   457 00001D6B 803DF2E7FFFF17      <1>     cmp byte [dirLineCtr], 23
   458                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001D72 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001D74 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   459 00001D75 488D15C9ECFFFF      <1>     lea rdx, pauseMes
   460 00001D7C B409                <1>     mov ah, 09h
   461 00001D7E CD21                <1>     int 21h
   462 00001D80 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   463 00001D82 CD21                <1>     int 21h
   464 00001D84 C605D9E7FFFF00      <1>     mov byte [dirLineCtr], 0
   465 00001D8B 488D1529EBFFFF      <1>     lea rdx, crlf   ;Force new line
   466 00001D92 B409                <1>     mov ah, 09h
   467 00001D94 CD21                <1>     int 21h
   468                              <1>     return
    13                              <2> %%_ret:
    14 00001D96 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> 
   470                              <1> chdir:
   471 00001D97 F6050CE3FFFFFF      <1>     test byte [arg1Flg], -1
   472 00001D9E 754D                <1>     jnz .changeDir
   473                              <1>     ;Print CWD
   474                              <1> .printCWD:
   475 00001DA0 E826140000          <1>     call putCWDInPrompt ;Exactly the same procedure
   476 00001DA5 E80E120000          <1>     call printCRLF
   477                              <1>     return
    13                              <2> %%_ret:
    14 00001DAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .printDiskCWD:
   479                              <1> ;Print CWD for a specified drive
   480 00001DAB 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   481 00001DAF 88D0                <1>     mov al, dl
   482 00001DB1 0440                <1>     add al, "@" ;Get the UC letter
   483 00001DB3 B43A                <1>     mov ah, ":"
   484 00001DB5 488D3D25E7FFFF      <1>     lea rdi, searchSpec
   485 00001DBC 66AB                <1>     stosw   ;Store X:, rdi+=2
   486 00001DBE 8A0567E2FFFF        <1>     mov al, byte [pathSep]
   487 00001DC4 AA                  <1>     stosb   ;Store pathSep, inc rdi
   488 00001DC5 B447                <1>     mov ah, 47h ;Get Current Working Directory
   489 00001DC7 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   490 00001DCA CD21                <1>     int 21h
   491 00001DCC E8DE140000          <1>     call strlen
   492 00001DD1 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   493 00001DD7 B440                <1>     mov ah, 40h ;Write to handle
   494 00001DD9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   495 00001DDE 488D15FCE6FFFF      <1>     lea rdx, searchSpec
   496 00001DE5 CD21                <1>     int 21h
   497 00001DE7 E8CC110000          <1>     call printCRLF
   498                              <1>     return
    13                              <2> %%_ret:
    14 00001DEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> .changeDir:
   500 00001DED 8A05B9E2FFFF        <1>     mov al, byte [arg1FCBret]
   501 00001DF3 3CFF                <1>     cmp al, -1 
   502 00001DF5 0F8486FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   503 00001DFB E84A160000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   504 00001E00 488D15DAE6FFFF      <1>     lea rdx, searchSpec
   505 00001E07 B43B                <1>     mov ah, 3Bh ;CHDIR
   506 00001E09 CD21                <1>     int 21h
   507 00001E0B 0F829DFAFFFF        <1>     jc badDirError
   508                              <1>     return
    13                              <2> %%_ret:
    14 00001E11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   509                              <1> 
   510                              <1> mkdir:
   511 00001E12 F60591E2FFFFFF      <1>     test byte [arg1Flg], -1
   512 00001E19 0F846BFAFFFF        <1>     jz badArgError
   513 00001E1F F60587E2FFFFFF      <1>     test byte [arg2Flg], -1
   514 00001E26 0F855EFAFFFF        <1>     jnz badArgError
   515                              <1>     ;We have exactly one argument
   516 00001E2C 8A057AE2FFFF        <1>     mov al, byte [arg1FCBret]
   517 00001E32 3CFF                <1>     cmp al, -1 
   518 00001E34 0F8447FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   519 00001E3A E80B160000          <1>     call buildCommandPath
   520 00001E3F 488D159BE6FFFF      <1>     lea rdx, searchSpec
   521 00001E46 B800390000          <1>     mov eax, 3900h  ;MKDIR
   522 00001E4B CD21                <1>     int 21h
   523                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E4D 73(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   524                              <1> .badMake:   ;Else, bad make
   525 00001E4F 488D1523EDFFFF      <1>     lea rdx, badMD
   526 00001E56 B800090000          <1>     mov eax, 0900h
   527 00001E5B CD21                <1>     int 21h
   528                              <1>     return
    13                              <2> %%_ret:
    14 00001E5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   529                              <1> 
   530                              <1> rmdir:
   531 00001E5E F60545E2FFFFFF      <1>     test byte [arg1Flg], -1
   532 00001E65 0F841FFAFFFF        <1>     jz badArgError
   533 00001E6B F6053BE2FFFFFF      <1>     test byte [arg2Flg], -1
   534 00001E72 0F8512FAFFFF        <1>     jnz badArgError
   535                              <1>     ;We have exactly one argument
   536 00001E78 8A052EE2FFFF        <1>     mov al, byte [arg1FCBret]
   537 00001E7E 3CFF                <1>     cmp al, -1 
   538 00001E80 0F84FBF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   539 00001E86 E8BF150000          <1>     call buildCommandPath
   540 00001E8B 488D154FE6FFFF      <1>     lea rdx, searchSpec
   541 00001E92 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   542 00001E97 CD21                <1>     int 21h
   543                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E99 73(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   544                              <1> .badRemove:   ;Else, bad make
   545 00001E9B 488D15F4ECFFFF      <1>     lea rdx, badRD
   546 00001EA2 B800090000          <1>     mov eax, 0900h
   547 00001EA7 CD21                <1>     int 21h
   548                              <1>     return
    13                              <2> %%_ret:
    14 00001EA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   549                              <1> 
   550                              <1> copy:
   551 00001EAA F605F9E1FFFFFF      <1>     test byte [arg1Flg], -1
   552 00001EB1 0F84D3F9FFFF        <1>     jz badArgError
   553 00001EB7 F605EFE1FFFFFF      <1>     test byte [arg2Flg], -1
   554 00001EBE 0F84C6F9FFFF        <1>     jz badArgError
   555 00001EC4 0FB605E0E1FFFF      <1>     movzx eax, byte [arg1Off]
   556 00001ECB 4C8B053DE1FFFF      <1>     mov r8, [pspPtr]
   557 00001ED2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   558 00001ED9 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   559 00001EDC 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   560 00001EDF 488D3D43E7FFFF      <1>     lea rdi, srcSpec
   561 00001EE6 E81C150000          <1>     call cpDelimPathToBufz    
   562 00001EEB 0FB605BCE1FFFF      <1>     movzx eax, byte [arg2Off]
   563 00001EF2 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   564 00001EF5 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   565 00001EF8 488D3DACE7FFFF      <1>     lea rdi, destSpec
   566 00001EFF E803150000          <1>     call cpDelimPathToBufz   
   567                              <1> ;Before we open, we check if the two filenames are equal
   568                              <1> ; If so, crap out.
   569 00001F04 488D351EE7FFFF      <1>     lea rsi, srcSpec
   570 00001F0B 488D3D99E7FFFF      <1>     lea rdi, destSpec
   571 00001F12 B81E120000          <1>     mov eax, 121Eh
   572 00001F17 CD2F                <1>     int 2Fh
   573 00001F19 0F84D3000000        <1>     jz .sameFilename
   574                              <1>     ;Open source with read permission
   575                              <1>     ;Open destination with write permission
   576 00001F1F 488D1503E7FFFF      <1>     lea rdx, srcSpec
   577 00001F26 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   578 00001F2B CD21                <1>     int 21h
   579 00001F2D 0F8245F9FFFF        <1>     jc badParamError
   580 00001F33 6689050EE8FFFF      <1>     mov word [sourceHdl], ax
   581                              <1> 
   582 00001F3A 0FB7D8              <1>     movzx ebx, ax   ;For bx
   583 00001F3D B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   584 00001F42 CD21                <1>     int 21h
   585 00001F44 66891501E8FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   586                              <1> 
   587 00001F4B 488D1559E7FFFF      <1>     lea rdx, destSpec
   588 00001F52 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   589 00001F57 31C9                <1>     xor ecx, ecx    ;No file attributes
   590 00001F59 CD21                <1>     int 21h
   591 00001F5B 0F82B8000000        <1>     jc .badExit
   592 00001F61 668905E2E7FFFF      <1>     mov word [destHdl], ax
   593 00001F68 31F6                <1>     xor esi, esi
   594 00001F6A 488D15DDE7FFFF      <1>     lea rdx, copyBuffer
   595                              <1> .copyLoop:
   596 00001F71 B980000000          <1>     mov ecx, 128
   597 00001F76 0FB71DCBE7FFFF      <1>     movzx ebx, word [sourceHdl]
   598 00001F7D B43F                <1>     mov ah, 3Fh ;Read
   599 00001F7F CD21                <1>     int 21h
   600 00001F81 0F8292000000        <1>     jc .badExit
   601 00001F87 85C0                <1>     test eax, eax
   602 00001F89 743A                <1>     jz .okExit
   603 00001F8B 01C6                <1>     add esi, eax
   604 00001F8D 89C1                <1>     mov ecx, eax
   605 00001F8F 0FB71DB4E7FFFF      <1>     movzx ebx, word [destHdl]
   606 00001F96 B440                <1>     mov ah, 40h ;Write
   607 00001F98 CD21                <1>     int 21h
   608 00001F9A 727D                <1>     jc .badExit
   609 00001F9C 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   610 00001FA1 74CE                <1>     je .copyLoop
   611                              <1>     ;If not char dev, exit
   612 00001FA3 66F705A0E7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   613 00001FAC 7417                <1>     jz .okExit
   614                              <1>     ;Is handle in cooked or binary mode?
   615 00001FAE 66F70595E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   616 00001FB7 750C                <1>     jnz .okExit
   617                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   618 00001FB9 09C0                <1>     or eax, eax ;Clear upper bits in eax
   619 00001FBB 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   620 00001FC0 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   621 00001FC3 75AC                <1>     jne .copyLoop   ;Jump if not
   622                              <1> .okExit:
   623 00001FC5 E832000000          <1>     call .leaveCopyClose
   624 00001FCA 488D15EAE8FFFF      <1>     lea rdx, crlf
   625 00001FD1 B409                <1>     mov ah, 09h
   626 00001FD3 CD21                <1>     int 21h
   627 00001FD5 488D15C2EEFFFF      <1>     lea rdx, fourSpc
   628 00001FDC B409                <1>     mov ah, 09h
   629 00001FDE CD21                <1>     int 21h
   630 00001FE0 B402                <1>     mov ah, 02h
   631 00001FE2 B231                <1>     mov dl, "1" ;1 File(s) copied
   632 00001FE4 CD21                <1>     int 21h
   633 00001FE6 488D1507EAFFFF      <1>     lea rdx, copyOk
   634 00001FED B409                <1>     mov ah, 09h
   635 00001FEF CD21                <1>     int 21h
   636                              <1>     return
    13                              <2> %%_ret:
    14 00001FF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   637                              <1> .sameFilename:
   638 00001FF2 E805000000          <1>     call .leaveCopyClose ;Close the handles
   639 00001FF7 E973F8FFFF          <1>     jmp noSelfCopyError
   640                              <1> .leaveCopyClose:
   641 00001FFC 668B1D45E7FFFF      <1>     mov bx, word [sourceHdl]
   642 00002003 B8003E0000          <1>     mov eax, 3E00h
   643 00002008 CD21                <1>     int 21h
   644 0000200A 668B1D39E7FFFF      <1>     mov bx, word [destHdl]
   645 00002011 B8003E0000          <1>     mov eax, 3E00h
   646 00002016 CD21                <1>     int 21h
   647                              <1>     return
    13                              <2> %%_ret:
    14 00002018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   648                              <1> .badExit:
   649                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   650 00002019 668B1D28E7FFFF      <1>     mov bx, word [sourceHdl]
   651 00002020 6681FBFFFF          <1>     cmp bx, -1
   652 00002025 7407                <1>     je .skipSource
   653 00002027 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   654 0000202C CD21                <1>     int 21h
   655                              <1> .skipSource:
   656 0000202E 668B1D15E7FFFF      <1>     mov bx, word [destHdl]
   657 00002035 6681FBFFFF          <1>     cmp bx, -1
   658 0000203A 0F8438F8FFFF        <1>     je badParamError
   659 00002040 B8003E0000          <1>     mov eax, 3E00h
   660 00002045 CD21                <1>     int 21h
   661 00002047 E92CF8FFFF          <1>     jmp badParamError
   662                              <1> 
   663                              <1> erase:
   664                              <1>     breakpoint
    81 0000204C 6687DB              <2> xchg bx, bx
   665 0000204F F60554E0FFFFFF      <1>     test byte [arg1Flg], -1
   666 00002056 0F842EF8FFFF        <1>     jz badArgError
   667 0000205C E8D5140000          <1>     call setDTA     ;Start by resetting the DTA
   668 00002061 E8E4130000          <1>     call buildCommandPath   ;Get the relative path to the file
   669                              <1> .dirLp:
   670 00002066 488D3D74E4FFFF      <1>     lea rdi, searchSpec
   671 0000206D E81B130000          <1>     call findLastPathComponant
   672 00002072 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   673 00002075 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   674 00002079 B03F                <1>     mov al, "?"
   675                              <1>     ;Store question marks in the name field
   676 0000207B 57                  <1>     push rdi
   677 0000207C 48FFC7              <1>     inc rdi ;Goto the first char
   678 0000207F B90B000000          <1>     mov ecx, 11
   679 00002084 F3AA                <1>     rep stosb
   680 00002086 5F                  <1>     pop rdi
   681 00002087 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   682 0000208A B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   683 0000208F CD21                <1>     int 21h
   684 00002091 3C01                <1>     cmp al, 1
   685 00002093 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   686                              <1>     ;Else, we now copy back the search pattern over the last componant!
   687                              <1>     ;No dirs to handle in here
   688 00002099 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   689 0000209D 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   690 000020A0 E80C130000          <1>     call FCBToAsciiz    ;Null terminates for free
   691                              <1>     ;Count the number of ?'s, if 11, we print the message
   692 000020A5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   693 000020A9 31C9                <1>     xor ecx, ecx
   694                              <1> .wcScan:
   695 000020AB AC                  <1>     lodsb
   696 000020AC 3C3F                <1>     cmp al, "?"
   697 000020AE 752F                <1>     jne .endCount
   698 000020B0 FFC1                <1>     inc ecx
   699 000020B2 81F90B000000        <1>     cmp ecx, 11
   700 000020B8 75F1                <1>     jne .wcScan
   701                              <1> .ynmsg:
   702 000020BA 488D1558EAFFFF      <1>     lea rdx, ynMes
   703 000020C1 E8F90E0000          <1>     call printString
   704 000020C6 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   705 000020C8 CD21                <1>     int 21h ;Get char in al
   706 000020CA E8EA110000          <1>     call ucChar ;Uppercase the char
   707 000020CF 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   708 000020D1 7407                <1>     je .endCount1
   709 000020D3 3C4E                <1>     cmp al, "N"
   710                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000020D5 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000020D7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   711 000020D8 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   712                              <1> .endCount1:
   713 000020DA E8D90E0000          <1>     call printCRLF
   714                              <1> .endCount:
   715                              <1>     ;Now we copy our search template pathstring to delPath
   716 000020DF 488D3D43E5FFFF      <1>     lea rdi, delPath
   717 000020E6 488D35F4E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   718 000020ED E8B3110000          <1>     call strcpy2         ;Copy the string over to delPath
   719                              <1> .findFile:
   720                              <1>     ;Now we find first/find next our way through the files
   721 000020F2 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   722 000020F5 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   723 000020F7 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   724 000020FC CD21                <1>     int 21h
   725 000020FE 0F82A1F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   726                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   727 00002104 E884120000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   728 00002109 488D3575E0FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   729                              <1> .delNextFile:
   730                              <1> ;rsi and rdi dont move here
   731 00002110 E890110000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   732 00002115 488D150DE5FFFF      <1>     lea rdx, delPath
   733 0000211C B800410000          <1>     mov eax, 4100h  ;Delete File 
   734 00002121 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   735 00002123 488D15B7E3FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   736 0000212A B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   737 0000212F CD21                <1>     int 21h
   738 00002131 73DD                <1>     jnc .delNextFile    
   739 00002133 F8                  <1>     clc ;Clear carry to indicate success
   740                              <1>     return
    13                              <2> %%_ret:
    14 00002134 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   741                              <1> .noWildcard:
   742                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   743                              <1>     ; a \*.*<NUL> over the null terminator
   744 00002135 488D15A5E3FFFF      <1>     lea rdx, searchSpec
   745 0000213C B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   746 00002141 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   747 00002146 CD21                <1>     int 21h
   748 00002148 0F8257F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   749 0000214E F60527E0FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   750 00002155 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   751                              <1>     ;Else, we are dealing with a dir
   752 00002157 4889D7              <1>     mov rdi, rdx
   753 0000215A 31C9                <1>     xor ecx, ecx
   754 0000215C FFC9                <1>     dec ecx
   755 0000215E F2AE                <1>     repne scasb ;Go to the end of the line!
   756 00002160 48FFCF              <1>     dec rdi
   757 00002163 0FB605C1DEFFFF      <1>     movzx eax, byte [pathSep]
   758 0000216A AA                  <1>     stosb
   759 0000216B B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   760 00002170 AB                  <1>     stosd
   761 00002171 E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   762                              <1> .delMain:   ;Call with rdx -> buffer!
   763 00002176 B800410000          <1>     mov eax, 4100h  ;Delete File 
   764 0000217B CD21                <1>     int 21h
   765                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000217D 73(34)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   766 0000217F 3C05                <1>     cmp al, errAccDen
   767 00002181 0F84DFF6FFFF        <1>     je badAccError ;If the file is RO, fail!
   768 00002187 E907F7FFFF          <1>     jmp badFileError
   769                              <1>     return
    13                              <2> %%_ret:
    14 0000218C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   770                              <1> date:
   771 0000218D 488D1508E9FFFF      <1>     lea rdx, curDate
   772 00002194 B409                <1>     mov ah, 09h
   773 00002196 CD21                <1>     int 21h
   774 00002198 B42A                <1>     mov ah, 2Ah ;DOS get date
   775 0000219A CD21                <1>     int 21h
   776                              <1> 	;AL = day of the week (0=Sunday)
   777                              <1> 	;CX = year (1980-2099)
   778                              <1> 	;DH = month (1-12)
   779                              <1> 	;DL = day (1-31)
   780 0000219C 66890D82E4FFFF      <1>     mov word [td1], cx
   781 000021A3 88157EE4FFFF        <1>     mov byte [td3], dl
   782 000021A9 883579E4FFFF        <1>     mov byte [td4], dh
   783 000021AF 0FB6C0              <1>     movzx eax, al
   784 000021B2 89C3                <1>     mov ebx, eax
   785 000021B4 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   786 000021B6 01D8                <1>     add eax, ebx ;Make it 3 times 
   787 000021B8 488D15B9E8FFFF      <1>     lea rdx, dayName
   788 000021BF 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   789 000021C3 B903000000          <1>     mov ecx, 3  ;Print three chars
   790 000021C8 BB01000000          <1>     mov ebx, 1  ;STDOUT
   791 000021CD B440                <1>     mov ah, 40h ;Write to handle
   792 000021CF CD21                <1>     int 21h
   793 000021D1 B220                <1>     mov dl, " "
   794 000021D3 B402                <1>     mov ah, 02h
   795 000021D5 CD21                <1>     int 21h
   796                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   797                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   798                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   799 000021D7 0FB70547E4FFFF      <1>     movzx eax, word [td1]   ;Get this word
   800 000021DE C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   801 000021E1 0FB61D40E4FFFF      <1>     movzx ebx, byte [td4]
   802 000021E8 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   803 000021EB 09D8                <1>     or eax, ebx ;Add this date to eax
   804 000021ED 0FB61D33E4FFFF      <1>     movzx ebx, byte [td3]
   805 000021F4 09D8                <1>     or eax, ebx
   806 000021F6 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   807 000021FB E8C70D0000          <1>     call printDate
   808                              <1> 
   809 00002200 488D15A6E8FFFF      <1>     lea rdx, newDate
   810 00002207 B409                <1>     mov ah, 09h
   811 00002209 CD21                <1>     int 21h
   812 0000220B 488D15BAE8FFFF      <1>     lea rdx, ukDate
   813 00002212 488D05A6E8FFFF      <1>     lea rax, usDate
   814 00002219 488D1DB9E8FFFF      <1>     lea rbx, jpDate
   815 00002220 803D0FDEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   816 00002227 480F47D3            <1>     cmova rdx, rbx
   817 0000222B 480F42D0            <1>     cmovb rdx, rax
   818 0000222F B409                <1>     mov ah, 09h
   819 00002231 CD21                <1>     int 21h
   820                              <1> 
   821 00002233 488D1578DFFFFF      <1>     lea rdx, inBuffer
   822 0000223A C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   823 0000223D B40A                <1>     mov ah, 0Ah
   824 0000223F CD21                <1>     int 21h
   825 00002241 52                  <1>     push rdx
   826 00002242 488D1572E6FFFF      <1>     lea rdx, crlf
   827 00002249 B409                <1>     mov ah, 09h
   828 0000224B CD21                <1>     int 21h
   829 0000224D 5A                  <1>     pop rdx
   830 0000224E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   831                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002252 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002254 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   832                              <1>     return
    13                              <2> %%_ret:
    14 00002255 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   833                              <1> 
   834                              <1> time:
   835 00002256 488D1598E8FFFF      <1>     lea rdx, curTime
   836 0000225D B409                <1>     mov ah, 09h
   837 0000225F CD21                <1>     int 21h
   838 00002261 B42C                <1>     mov ah, 2Ch ;DOS get time
   839 00002263 CD21                <1>     int 21h
   840                              <1>     ;CH = hour (0-23)
   841                              <1> 	;CL = minutes (0-59)
   842                              <1> 	;DH = seconds (0-59)
   843                              <1> 	;DL = hundredths (0-99)
   844 00002265 880DBAE3FFFF        <1>     mov byte [td1], cl
   845 0000226B 882DB5E3FFFF        <1>     mov byte [td2], ch
   846 00002271 8815B0E3FFFF        <1>     mov byte [td3], dl
   847 00002277 8835ABE3FFFF        <1>     mov byte [td4], dh
   848 0000227D 0FB6C5              <1>     movzx eax, ch
   849 00002280 E8D60E0000          <1>     call printTime.printHours
   850                              <1> 
   851 00002285 8A15B8DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   852 0000228B B402                <1>     mov ah, 02h
   853 0000228D CD21                <1>     int 21h
   854                              <1> 
   855 0000228F 0FB6058FE3FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   856 00002296 E8B00E0000          <1>     call printTime.printMinutesAlt
   857                              <1> 
   858 0000229B 8A15A2DDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   859 000022A1 B402                <1>     mov ah, 02h
   860 000022A3 CD21                <1>     int 21h
   861                              <1> 
   862 000022A5 0FB6057CE3FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   863 000022AC E89A0E0000          <1>     call printTime.printMinutesAlt
   864                              <1> 
   865 000022B1 B22E                <1>     mov dl, "."
   866 000022B3 B402                <1>     mov ah, 02h
   867 000022B5 CD21                <1>     int 21h
   868                              <1> 
   869 000022B7 0FB60569E3FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   870 000022BE E8880E0000          <1>     call printTime.printMinutesAlt
   871                              <1> 
   872 000022C3 488D153CE8FFFF      <1>     lea rdx, newTime
   873 000022CA B409                <1>     mov ah, 09h
   874 000022CC CD21                <1>     int 21h
   875                              <1> 
   876 000022CE 488D15DDDEFFFF      <1>     lea rdx, inBuffer
   877 000022D5 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   878 000022D8 B40A                <1>     mov ah, 0Ah
   879 000022DA CD21                <1>     int 21h
   880 000022DC 52                  <1>     push rdx
   881 000022DD 488D15D7E5FFFF      <1>     lea rdx, crlf
   882 000022E4 B409                <1>     mov ah, 09h
   883 000022E6 CD21                <1>     int 21h
   884 000022E8 5A                  <1>     pop rdx
   885 000022E9 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   886                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022ED 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022EF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   887                              <1>     return
    13                              <2> %%_ret:
    14 000022F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   888                              <1> ctty:
   889 000022F1 F605B2DDFFFFFF      <1>     test byte [arg1Flg], -1
   890 000022F8 0F848CF5FFFF        <1>     jz badArgError
   891 000022FE F605A8DDFFFFFF      <1>     test byte [arg2Flg], -1
   892 00002305 0F857FF5FFFF        <1>     jnz badArgError
   893 0000230B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   894 00002312 0FB60592DDFFFF      <1>     movzx eax, byte [arg1Off]
   895 00002319 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   896 0000231C 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   897 00002320 750F                <1>     jne .noDrive
   898 00002322 0FB60583DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   899 00002329 3CFF                <1>     cmp al, -1
   900 0000232B 0F8450F5FFFF        <1>     je badDriveError
   901                              <1> .noDrive:
   902                              <1>     ;Now we open the provided file
   903 00002331 E82C110000          <1>     call copyArgumentToSearchSpec
   904 00002336 488D15A4E1FFFF      <1>     lea rdx, searchSpec
   905 0000233D B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   906 00002342 CD21                <1>     int 21h
   907 00002344 0F8249F5FFFF        <1>     jc badFileError
   908 0000234A 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   909 0000234D B800440000          <1>     mov eax, 4400h  ;Get device word
   910 00002352 CD21                <1>     int 21h
   911 00002354 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   912 00002357 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   913                              <1>     ;Now we set this handle to be STDIO
   914 00002359 80CA03              <1>     or dl, 3    ;Set STDIO bits
   915 0000235C 30F6                <1>     xor dh, dh
   916 0000235E B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   917 00002363 CD21                <1>     int 21h
   918                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   919 00002365 31C9                <1>     xor ecx, ecx    ;STDIN
   920 00002367 B446                <1>     mov ah, 46h
   921 00002369 CD21                <1>     int 21h
   922 0000236B FFC1                <1>     inc ecx         ;STDOUT
   923 0000236D B446                <1>     mov ah, 46h
   924 0000236F CD21                <1>     int 21h
   925 00002371 FFC1                <1>     inc ecx         ;STDERR
   926 00002373 B446                <1>     mov ah, 46h
   927 00002375 CD21                <1>     int 21h
   928 00002377 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   929 00002379 CD21                <1>     int 21h
   930                              <1>     return
    13                              <2> %%_ret:
    14 0000237B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   931                              <1> .badCharDev:
   932 0000237C 488D15B3E8FFFF      <1>     lea rdx, badDev
   933 00002383 B409                <1>     mov ah, 09h
   934 00002385 CD21                <1>     int 21h
   935 00002387 B43E                <1>     mov ah, 3Eh ;Close opened handle
   936 00002389 CD21                <1>     int 21h
   937                              <1>     return
    13                              <2> %%_ret:
    14 0000238B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   938                              <1> 
   939                              <1> cls:  
   940 0000238C B800440000          <1>     mov eax, 4400h  ;Get device info
   941 00002391 BB01000000          <1>     mov ebx, 1      ;for handle 1
   942 00002396 CD21                <1>     int 21h         ;in dx
   943 00002398 F7C280000000        <1>     test edx, devCharDev
   944 0000239E 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   945 000023A0 F7C210000000        <1>     test edx, charDevFastOut
   946 000023A6 743E                <1>     jz .doAnsi
   947                              <1>     ;Test if Int 29h uses Int 30h
   948                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   949                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   950 000023A8 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   951 000023AD CD21                <1>     int 21h
   952                              <1> .biosCheck:
   953 000023AF 66813BCD30          <1>     cmp word [rbx], 30CDh
   954 000023B4 740C                <1>     je .biosConfirmed
   955 000023B6 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   956 000023BB 7429                <1>     je .doAnsi
   957 000023BD 48FFC3              <1>     inc rbx
   958 000023C0 EBED                <1>     jmp short .biosCheck
   959                              <1> .biosConfirmed:
   960                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   961 000023C2 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   962 000023C4 31DB                <1>     xor ebx, ebx
   963 000023C6 CD30                <1>     int 30h
   964 000023C8 B40F                <1>     mov ah, 0Fh ;Get screen mode
   965 000023CA CD30                <1>     int 30h
   966 000023CC 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   967 000023CF FECA                <1>     dec dl
   968 000023D1 B619                <1>     mov dh, 25  ;Number of rows is standard
   969 000023D3 31C0                <1>     xor eax, eax
   970 000023D5 89C1                <1>     mov ecx, eax
   971 000023D7 B707                <1>     mov bh, 7   ;Screen attributes
   972 000023D9 B406                <1>     mov ah, 6   ;Scroll
   973 000023DB CD30                <1>     int 30h
   974 000023DD 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   975 000023DF B700                <1>     mov bh, 0   ;Page 0
   976 000023E1 B402                <1>     mov ah, 2
   977 000023E3 CD30                <1>     int 30h
   978                              <1>     return
    13                              <2> %%_ret:
    14 000023E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   979                              <1> .doAnsi:
   980                              <1> ;4 chars in the ansi routine
   981                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   982                              <1> ; understand ANSI codes
   983 000023E6 488D35ADEAFFFF      <1>     lea rsi, ansiCls
   984 000023ED B904000000          <1>     mov ecx, 4
   985 000023F2 B406                <1>     mov ah, 06h ;Raw char output
   986                              <1> .ansiLp:
   987 000023F4 AC                  <1>     lodsb   ;Get the char in 
   988 000023F5 88C2                <1>     mov dl, al
   989 000023F7 CD21                <1>     int 21h
   990 000023F9 FFC9                <1>     dec ecx
   991 000023FB 75F7                <1>     jnz .ansiLp
   992                              <1>     return
    13                              <2> %%_ret:
    14 000023FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   993                              <1> 
   994                              <1> break:
   995 000023FE F605A5DCFFFFFF      <1>     test byte [arg1Flg], -1
   996 00002405 752D                <1>     jnz .argumentProvided
   997                              <1>     ;Here we just get the status of break
   998 00002407 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   999 0000240C CD21                <1>     int 21h
  1000 0000240E 88D3                <1>     mov bl, dl
  1001 00002410 488D15C1E8FFFF      <1>     lea rdx, breakIs
  1002 00002417 B409                <1>     mov ah, 09h
  1003 00002419 CD21                <1>     int 21h
  1004 0000241B 488D15B1E8FFFF      <1>     lea rdx, onMes
  1005 00002422 488D0DA4E8FFFF      <1>     lea rcx, offMes
  1006 00002429 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1007 0000242B 480F44D1            <1>     cmovz rdx, rcx
  1008 0000242F B409                <1>     mov ah, 09h
  1009 00002431 CD21                <1>     int 21h
  1010                              <1>     return
    13                              <2> %%_ret:
    14 00002433 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1011                              <1> .argumentProvided:
  1012 00002434 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1013 00002438 AD                  <1>     lodsd   ;Read the word
  1014 00002439 89C3                <1>     mov ebx, eax
  1015 0000243B 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1016 00002440 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1017 00002443 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1018 00002448 7416                <1>     je .maybeOn
  1019 0000244A 663D4F46            <1>     cmp ax, "OF"
  1020 0000244E 7523                <1>     jne .badOnOff
  1021 00002450 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1022 00002455 6681FB4620          <1>     cmp bx, "F "
  1023 0000245A 7517                <1>     jne .badOnOff
  1024                              <1>     ;Set off
  1025 0000245C 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1026 0000245E EB0B                <1>     jmp short .setBreak
  1027                              <1> .maybeOn:
  1028 00002460 663D4F4E            <1>     cmp ax, "ON"
  1029 00002464 750D                <1>     jne .badOnOff
  1030                              <1>     ;Set on
  1031 00002466 BA01000000          <1>     mov edx, 1
  1032                              <1> .setBreak:
  1033 0000246B B801330000          <1>     mov eax, 3301h  ;Set break
  1034 00002470 CD21                <1>     int 21h
  1035                              <1>     return
    13                              <2> %%_ret:
    14 00002472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1036                              <1> .badOnOff:
  1037 00002473 488D1530EAFFFF      <1>     lea rdx, badOnOff
  1038 0000247A B409                <1>     mov ah, 09h
  1039 0000247C CD21                <1>     int 21h
  1040                              <1>     return
    13                              <2> %%_ret:
    14 0000247E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1041                              <1> 
  1042                              <1> verify:
  1043 0000247F F60524DCFFFFFF      <1>     test byte [arg1Flg], -1
  1044 00002486 752D                <1>     jnz .argumentProvided
  1045                              <1>     ;Here we just get the status of break
  1046 00002488 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1047 0000248D CD21                <1>     int 21h
  1048 0000248F 88C3                <1>     mov bl, al
  1049 00002491 488D154AE8FFFF      <1>     lea rdx, verifyIs
  1050 00002498 B409                <1>     mov ah, 09h
  1051 0000249A CD21                <1>     int 21h
  1052 0000249C 488D1530E8FFFF      <1>     lea rdx, onMes
  1053 000024A3 488D0D23E8FFFF      <1>     lea rcx, offMes
  1054 000024AA 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1055 000024AC 480F44D1            <1>     cmovz rdx, rcx
  1056 000024B0 B409                <1>     mov ah, 09h
  1057 000024B2 CD21                <1>     int 21h
  1058                              <1>     return
    13                              <2> %%_ret:
    14 000024B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1059                              <1> .argumentProvided:
  1060 000024B5 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1061 000024B9 AD                  <1>     lodsd   ;Read the word
  1062 000024BA 89C3                <1>     mov ebx, eax
  1063 000024BC 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1064 000024C1 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1065 000024C4 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1066 000024C9 7416                <1>     je .maybeOn
  1067 000024CB 663D4F46            <1>     cmp ax, "OF"
  1068 000024CF 751F                <1>     jne .badOnOff
  1069 000024D1 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1070 000024D6 6681FB4620          <1>     cmp bx, "F "
  1071 000024DB 7513                <1>     jne .badOnOff
  1072                              <1>     ;Set off
  1073 000024DD 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1074 000024DF EB0A                <1>     jmp short .setVerify
  1075                              <1> .maybeOn:
  1076 000024E1 663D4F4E            <1>     cmp ax, "ON"
  1077 000024E5 7509                <1>     jne .badOnOff
  1078                              <1>     ;Set on
  1079 000024E7 31C0                <1>     xor eax, eax
  1080 000024E9 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1081                              <1> .setVerify:
  1082 000024EB B42E                <1>     mov ah, 2Eh  ;Set Verify
  1083 000024ED CD21                <1>     int 21h
  1084                              <1>     return
    13                              <2> %%_ret:
    14 000024EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1085                              <1> .badOnOff:
  1086 000024F0 488D15B3E9FFFF      <1>     lea rdx, badOnOff
  1087 000024F7 B409                <1>     mov ah, 09h
  1088 000024F9 CD21                <1>     int 21h
  1089                              <1>     return
    13                              <2> %%_ret:
    14 000024FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1090                              <1> 
  1091                              <1> rename:
  1092 000024FC F605A7DBFFFFFF      <1>     test byte [arg1Flg], -1
  1093 00002503 0F8481F3FFFF        <1>     jz badArgError
  1094 00002509 F6059DDBFFFFFF      <1>     test byte [arg2Flg], -1
  1095 00002510 0F8474F3FFFF        <1>     jz badArgError    
  1096                              <1>     ;Initialise the variables!
  1097 00002516 488D350CE1FFFF      <1>     lea rsi, srcSpec
  1098 0000251D 48893509E2FFFF      <1>     mov qword [srcPtr], rsi
  1099 00002524 488D3580E1FFFF      <1>     lea rsi, destSpec
  1100 0000252B 48893503E2FFFF      <1>     mov qword [destPtr], rsi
  1101                              <1>     ;Check the second path is just a filename!
  1102 00002532 0FB60575DBFFFF      <1>     movzx eax, byte [arg2Off]
  1103 00002539 4C8B05CFDAFFFF      <1>     mov r8, qword [pspPtr]
  1104 00002540 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1105 00002547 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1106 0000254A 488D3D90DFFFFF      <1>     lea rdi, searchSpec
  1107 00002551 57                  <1>     push rdi
  1108 00002552 E8B00E0000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1109 00002557 5F                  <1>     pop rdi
  1110 00002558 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1111 0000255C 0F8428F3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1112 00002562 4889FE              <1>     mov rsi, rdi
  1113                              <1> .destScan:
  1114 00002565 AC                  <1>     lodsb   ;Get the char
  1115 00002566 3A05BFDAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1116 0000256C 0F8418F3FFFF        <1>     je badArgError
  1117 00002572 84C0                <1>     test al, al
  1118 00002574 75EF                <1>     jnz .destScan
  1119                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1120 00002576 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1121 0000257A 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1121 00002583 3F                  <1>
  1122 00002584 B903000000          <1>     mov ecx, 3  ;24 bytes
  1123 00002589 F348AB              <1>     rep stosq
  1124 0000258C AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1125 0000258D 488D354DDFFFFF      <1>     lea rsi, searchSpec
  1126 00002594 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1127 00002598 B80D290000          <1>     mov eax, 290Dh
  1128 0000259D CD21                <1>     int 21h     
  1129 0000259F 50                  <1>     push rax    ;Save the WC signature
  1130 000025A0 E8A50E0000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1131 000025A5 488D3D35DFFFFF      <1>     lea rdi, searchSpec
  1132 000025AC E8DC0D0000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1133 000025B1 4889FE              <1>     mov rsi, rdi
  1134 000025B4 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1135 000025B7 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1136 000025BB B80D290000          <1>     mov eax, 290Dh
  1137 000025C0 CD21                <1>     int 21h
  1138 000025C2 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1139 000025C3 88CC                <1>     mov ah, cl
  1140 000025C5 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1141 000025C8 0F84EC000000        <1>     jz .noWC
  1142 000025CE 488D350CDFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1143                              <1>     ;Now we check if we have a path to actually handle
  1144 000025D5 4839F3              <1>     cmp rbx, rsi
  1145 000025D8 7444                <1>     je .noPath
  1146 000025DA C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1147 000025DE 488D35FCDEFFFF      <1>     lea rsi, searchSpec
  1148 000025E5 488D3D3DE0FFFF      <1>     lea rdi, srcSpec
  1149 000025EC 56                  <1>     push rsi
  1150 000025ED E8A40C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1151 000025F2 5E                  <1>     pop rsi
  1152 000025F3 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1153 000025F6 8A052FDAFFFF        <1>     mov al, byte [pathSep]
  1154 000025FC AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1155 000025FD 48893D29E1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1156 00002604 488D3DA0E0FFFF      <1>     lea rdi, destSpec
  1157 0000260B E8860C0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1158 00002610 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1159 00002613 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1160 00002614 48893D1AE1FFFF      <1>     mov qword [destPtr], rdi
  1161 0000261B 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1162                              <1> .noPath:
  1163                              <1>     ;Now we have where to copy the files to, we can start our work!
  1164 0000261E E8130F0000          <1>     call setDTA
  1165 00002623 488D15B7DEFFFF      <1>     lea rdx, searchSpec
  1166 0000262A 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1167 0000262C B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1168 00002631 CD21                <1>     int 21h
  1169 00002633 0F8263F2FFFF        <1>     jc badDupFnf    ;If no file was found!
  1170                              <1> .wcLoop:
  1171                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1172 00002639 488D3545DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1173 00002640 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1174 00002644 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1175 00002649 CD21                <1>     int 21h 
  1176                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1177 0000264B 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1178 0000264F 488D3DE7E0FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1179 00002656 57                  <1>     push rdi
  1180 00002657 48A5                <1>     movsq
  1181 00002659 66A5                <1>     movsw
  1182 0000265B A4                  <1>     movsb
  1183 0000265C 5F                  <1>     pop rdi
  1184 0000265D 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1185 00002661 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1186                              <1> .wcNameMake:
  1187 00002666 AC                  <1>     lodsb   ;Get the char from the source string
  1188 00002667 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1189 0000266A 7502                <1>     jne .noStore    ;Dont store the char there
  1190 0000266C 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1191                              <1> .noStore:
  1192 0000266E 48FFC7              <1>     inc rdi ;Goto next char position
  1193 00002671 FFC9                <1>     dec ecx
  1194 00002673 75F1                <1>     jnz .wcNameMake
  1195                              <1> ;renName now has the FCB name for the file we wish to make!
  1196                              <1> ;Now make the two paths!
  1197 00002675 488D3509DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1198 0000267C 488B3DAAE0FFFF      <1>     mov rdi, qword [srcPtr]
  1199 00002683 E80E0C0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1200 00002688 488D35AEE0FFFF      <1>     lea rsi, renName
  1201 0000268F 488B3D9FE0FFFF      <1>     mov rdi, qword [destPtr]
  1202 00002696 E8160D0000          <1>     call FCBToAsciiz
  1203 0000269B 488D1587DFFFFF      <1>     lea rdx, srcSpec
  1204 000026A2 488D3D02E0FFFF      <1>     lea rdi, destSpec
  1205 000026A9 B800560000          <1>     mov eax, 5600h
  1206 000026AE CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1207 000026B0 B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1208 000026B5 CD21                <1>     int 21h
  1209 000026B7 7380                <1>     jnc .wcLoop     ;And process it too!
  1210                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000026B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1211                              <1> .noWC:
  1212 000026BA E88B0D0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1213 000026BF 0FB605E8D9FFFF      <1>     movzx eax, byte [arg2Off]
  1214 000026C6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1215 000026CD 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1216 000026D0 488D3DD4DFFFFF      <1>     lea rdi, destSpec
  1217 000026D7 57                  <1>     push rdi
  1218 000026D8 E82A0D0000          <1>     call cpDelimPathToBufz
  1219 000026DD 5F                  <1>     pop rdi
  1220 000026DE 488D15FCDDFFFF      <1>     lea rdx, searchSpec
  1221 000026E5 B800560000          <1>     mov eax, 5600h
  1222 000026EA CD21                <1>     int 21h
  1223                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026EC 73(B9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1224 000026EE E9A9F1FFFF          <1>     jmp badDupFnf   ;Always just return this
  1225                              <1> 
  1226                              <1> 
  1227                              <1> touch:
  1228                              <1> ;Temporarily used to create files
  1229 000026F3 F605B0D9FFFFFF      <1>     test byte [arg1Flg], -1
  1230 000026FA 0F848AF1FFFF        <1>     jz badArgError
  1231 00002700 E8450D0000          <1>     call buildCommandPath
  1232 00002705 488D15D5DDFFFF      <1>     lea rdx, searchSpec
  1233 0000270C B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1234 00002711 31C9                <1>     xor ecx, ecx
  1235 00002713 CD21                <1>     int 21h
  1236 00002715 721D                <1>     jc .touch1
  1237                              <1> .touchClose:
  1238 00002717 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1239 0000271A B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1240 0000271F CD2F                <1>     int 2fh
  1241 00002721 89C1                <1>     mov ecx, eax    ;Move the time here
  1242 00002723 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1243 00002725 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1244 0000272A CD21                <1>     int 21h
  1245 0000272C B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1246 00002731 CD21                <1>     int 21h
  1247                              <1>     return
    13                              <2> %%_ret:
    14 00002733 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1248                              <1> .touch1:
  1249 00002734 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1250 00002736 7509                <1>     jne .touchError ;If not, this is a proper error!
  1251 00002738 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1252 0000273D CD21                <1>     int 21h
  1253 0000273F 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1254                              <1> .touchError:
  1255 00002741 3C03                <1>     cmp al, errPnf
  1256 00002743 0F8441F1FFFF        <1>     je badArgError
  1257 00002749 3C02                <1>     cmp al, errFnf
  1258 0000274B 0F8454F1FFFF        <1>     je badFnf
  1259 00002751 E910F1FFFF          <1>     jmp badAccError
  1260                              <1>     
  1261                              <1> 
  1262                              <1> join:
  1263                              <1> ;Mock join command, to test join. Make an external command.
  1264                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1265 00002756 F605AF000000FF      <1>     test byte [.joinOn], -1
  1266 0000275D 743D                <1>     jz .okJoin
  1267                              <1> .joindisable:
  1268 0000275F B800520000          <1>     mov eax, 5200h  
  1269 00002764 CD21                <1>     int 21h
  1270                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1271 00002766 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1272 0000276B CD2A                <1>     int 2Ah
  1273 0000276D 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1274 00002771 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1275 00002775 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1276 0000277B C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1277 0000277E C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1278 00002782 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1279 00002785 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1280 0000278A CD2A                <1>     int 2Ah
  1281 0000278C C6057900000000      <1>     mov byte [.joinOn], 0
  1282 00002793 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1283 0000279A EB45                <1>     jmp short .joinExit
  1284                              <1> .okJoin:
  1285 0000279C C60569000000FF      <1>     mov byte [.joinOn], -1
  1286 000027A3 B800520000          <1>     mov eax, 5200h  
  1287 000027A8 CD21                <1>     int 21h
  1288 000027AA 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1289 000027AE 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1290                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1291 000027B2 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1292 000027B7 CD2A                <1>     int 2Ah
  1293 000027B9 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1294 000027BF 4889DF              <1>     mov rdi, rbx
  1295 000027C2 488D3544000000      <1>     lea rsi, .joinPath
  1296 000027C9 B90C000000          <1>     mov ecx, .joinPathL
  1297 000027CE F3A4                <1>     rep movsb   ;Copy chars over
  1298 000027D0 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1299 000027D3 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1300 000027D8 CD2A                <1>     int 2Ah
  1301 000027DA 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1302                              <1> .joinExit:
  1303 000027E1 B800090000          <1>     mov eax, 0900h
  1304 000027E6 CD21                <1>     int 21h
  1305                              <1>     return
    13                              <2> %%_ret:
    14 000027E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1306 000027E9 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1306 000027F2 61626C65640D0A24    <1>
  1307 000027FA 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1307 00002803 7361626C65640D0A24  <1>
  1308 0000280C 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1309 0000280D 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1309 00002816 535400              <1>
  1310                              <1> .joinPathL  equ $ - .joinPath 
  1311                              <1> 
  1312                              <1> subst:
  1313                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1314                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1315 00002819 F605D3000000FF      <1>     test byte [.substOn], -1
  1316 00002820 7443                <1>     jz .okSubst
  1317                              <1> .substdisable:
  1318 00002822 B800520000          <1>     mov eax, 5200h  
  1319 00002827 CD21                <1>     int 21h
  1320                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1321 00002829 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1322 0000282E CD2A                <1>     int 2Ah
  1323 00002830 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1324 00002834 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1325 0000283B 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1326 00002841 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1327 00002844 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1328 00002848 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1329 0000284E B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1330 00002853 CD2A                <1>     int 2Ah
  1331 00002855 C6059700000000      <1>     mov byte [.substOn], 0
  1332 0000285C 488D157D000000      <1>     lea rdx, .substDisableMsg
  1333 00002863 EB61                <1>     jmp short .substExit
  1334                              <1> .okSubst:
  1335 00002865 C60587000000FF      <1>     mov byte [.substOn], -1
  1336 0000286C B800520000          <1>     mov eax, 5200h  
  1337 00002871 CD21                <1>     int 21h
  1338 00002873 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1339 00002878 CD2A                <1>     int 2Ah
  1340 0000287A 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1341 0000287E 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1342 00002885 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1343 00002889 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1344 00002890 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1345 00002894 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1346                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1347 0000289B 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1348 000028A1 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1349 000028A7 4889DF              <1>     mov rdi, rbx
  1350 000028AA 488D3543000000      <1>     lea rsi, .substPath
  1351 000028B1 B90C000000          <1>     mov ecx, .substPathL
  1352 000028B6 F3A4                <1>     rep movsb   ;Copy chars over
  1353 000028B8 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1354 000028BD CD2A                <1>     int 2Ah
  1355 000028BF 488D1508000000      <1>     lea rdx, .substEnableMsg
  1356                              <1> .substExit:
  1357 000028C6 B800090000          <1>     mov eax, 0900h
  1358 000028CB CD21                <1>     int 21h
  1359                              <1>     return
    13                              <2> %%_ret:
    14 000028CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1360 000028CE 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1360 000028D7 6E61626C65640D0A24  <1>
  1361 000028E0 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1361 000028E9 697361626C65640D0A- <1>
  1361 000028F2 24                  <1>
  1362 000028F3 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1363 000028F4 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1363 000028FD 535400              <1>
  1364                              <1> .substPathL  equ $ - .substPath 
  1365                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1366                              <1> truename:
  1367 00002900 F605A3D7FFFFFF      <1>     test byte [arg1Flg], -1
  1368 00002907 0F847DEFFFFF        <1>     jz badArgError
  1369 0000290D E8380B0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1370 00002912 488D35C8DBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1371 00002919 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1372 0000291C B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1373 00002921 CD21                <1>     int 21h
  1374 00002923 730D                <1>     jnc .writePath
  1375 00002925 3C02                <1>     cmp al, errFnf
  1376 00002927 0F8466EFFFFF        <1>     je badFileError
  1377 0000292D E946EFFFFF          <1>     jmp badParamError
  1378                              <1> .writePath:
  1379 00002932 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1380 00002935 B9FFFFFFFF          <1>     mov ecx, -1
  1381 0000293A 30C0                <1>     xor al, al
  1382 0000293C F2AE                <1>     repne scasb     ;Get the new len
  1383 0000293E F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1384 00002940 FFC9                <1>     dec ecx
  1385 00002942 BB01000000          <1>     mov ebx, 01
  1386 00002947 B440                <1>     mov ah, 40h
  1387 00002949 CD21                <1>     int 21h
  1388 0000294B E868060000          <1>     call printCRLF
  1389                              <1>     return
    13                              <2> %%_ret:
    14 00002950 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1390                              <1> 
  1391                              <1> label:
  1392                              <1> ;Displays/Changes/Deletes the file label
  1393 00002951 488D1508000000      <1>     lea rdx, .l1
  1394 00002958 B800090000          <1>     mov eax, 0900h
  1395 0000295D CD21                <1>     int 21h
  1396                              <1>     return
    13                              <2> %%_ret:
    14 0000295F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397 00002960 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1397 00002969 6E20756E696D706C65- <1>
  1397 00002972 6D656E7465640D0A24  <1>
  1398                              <1> 
  1399                              <1> mklbl:
  1400                              <1>     ;lea rdx, .l1
  1401                              <1>     ;mov cx, 08h ;Make a label
  1402                              <1>     ;mov eax, 3C00h
  1403                              <1>     ;int 21h
  1404                              <1> 
  1405                              <1>     ;mov ebx, eax
  1406                              <1>     ;mov eax, 3E00h  ;Close the handle
  1407                              <1>     ;int 21h
  1408                              <1>     ;return
  1409                              <1> 
  1410                              <1> ;.l1: db "TESTLABEL",0
  1411 0000297B 488D1508000000      <1>     lea rdx, .l1
  1412 00002982 B800160000          <1>     mov eax, 1600h  ;Create FCB
  1413 00002987 CD21                <1>     int 21h
  1414                              <1>     return
    13                              <2> %%_ret:
    14 00002989 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1415                              <1> .l1:
  1416                              <1>     istruc exFcb
  1417 0000298A FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1418 0000298B 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1419 00002991 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1420 00002992 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1421 0000299A 4C2020              <1>     at exFcb.fileext,   db "L  "
  1422 0000299D 00000000            <1>     at exFcb.curBlock,  dd 0
  1423 000029A1 00<rep 15h>         <1>     iend 
  1424                              <1> rmlbl:
  1425 000029B6 488D1508000000      <1>     lea rdx, .l1
  1426 000029BD B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1427 000029C2 CD21                <1>     int 21h
  1428                              <1>     return
    13                              <2> %%_ret:
    14 000029C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1429                              <1> .l1:    ;FCB to volume label
  1430                              <1>     istruc exFcb
  1431 000029C5 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1432 000029C6 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1433 000029CC 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1434 000029CD 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1435 000029D5 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1436 000029D8 00000000            <1>     at exFcb.curBlock,  dd 0
  1437 000029DC 00<rep 15h>         <1>     iend 
  1438                              <1> 
  1439                              <1> rnlbl:
  1440 000029F1 488D1508000000      <1>     lea rdx, .l1
  1441 000029F8 B800170000          <1>     mov eax, 1700h
  1442 000029FD CD21                <1>     int 21h
  1443                              <1>     return
    13                              <2> %%_ret:
    14 000029FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1444                              <1> .l1:
  1445                              <1>     istruc exRenFcb
  1446 00002A00 FF                  <1>     at exRenFcb.extSig,     db -1
  1447 00002A01 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1448 00002A07 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1449 00002A08 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1450 00002A10 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1451 00002A13 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1451 00002A1C 4C414245            <1>
  1452 00002A20 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1453 00002A23 00<rep 4h>          <1>     iend
  1454                              <1> volume:
  1455                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1456 00002A27 F6057FD6FFFFFF      <1>     test byte [arg2Flg], -1
  1457 00002A2E 0F8556EEFFFF        <1>     jnz badArgError
  1458 00002A34 F6056FD6FFFFFF      <1>     test byte [arg1Flg], -1
  1459 00002A3B 7507                <1>     jnz .notCurrentDrive
  1460 00002A3D E84F080000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1461 00002A42 EB31                <1>     jmp short .dirEP
  1462                              <1> .notCurrentDrive:
  1463 00002A44 E8010A0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1464 00002A49 488D3591DAFFFF      <1>     lea rsi, searchSpec
  1465 00002A50 E876080000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1466 00002A55 66AD                <1>     lodsw                   ;Get this word
  1467 00002A57 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1468 00002A5A 0F852AEEFFFF        <1>     jne badArgError
  1469 00002A60 8A0546D6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1470 00002A66 A8FF                <1>     test al, -1
  1471 00002A68 0F8513EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1472 00002A6E 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1473 00002A73 FFC8                <1>     dec eax ;Convert to 0 based number
  1474                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1475 00002A75 E8BC0A0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1476 00002A7A 488D1578DBFFFF      <1>     lea rdx, volFcb
  1477 00002A81 FFC0                <1>     inc eax ;Get 1 based drive number
  1478 00002A83 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1479 00002A85 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1480 00002A88 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1481 00002A8D CD21                <1>     int 21h
  1482 00002A8F 50                  <1>     push rax
  1483                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1484 00002A90 488D1524DEFFFF      <1>     lea rdx, crlf
  1485 00002A97 B409                <1>     mov ah, 09h
  1486 00002A99 CD21                <1>     int 21h
  1487 00002A9B 488D159EE0FFFF      <1>     lea rdx, volMes
  1488 00002AA2 B409                <1>     mov ah, 09h
  1489 00002AA4 CD21                <1>     int 21h
  1490 00002AA6 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1491 00002AA8 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1492 00002AAB B402                <1>     mov ah, 02h
  1493 00002AAD CD21                <1>     int 21h
  1494 00002AAF 58                  <1>     pop rax
  1495 00002AB0 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1496 00002AB2 7409                <1>     jz .volIDOk
  1497 00002AB4 488D159CE0FFFF      <1>     lea rdx, volNo
  1498 00002ABB EB19                <1>     jmp short .volEndPrint
  1499                              <1> .volIDOk:
  1500 00002ABD 488D158EE0FFFF      <1>     lea rdx, volOk
  1501 00002AC4 B409                <1>     mov ah, 09h
  1502 00002AC6 CD21                <1>     int 21h
  1503 00002AC8 C605ABD6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1504 00002ACF 488D1599D6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1505                              <1> .volEndPrint:
  1506 00002AD6 B409                <1>     mov ah, 09h
  1507 00002AD8 CD21                <1>     int 21h
  1508 00002ADA 488D15DADDFFFF      <1>     lea rdx, crlf
  1509 00002AE1 B409                <1>     mov ah, 09h
  1510 00002AE3 CD21                <1>     int 21h
  1511                              <1>     return
    13                              <2> %%_ret:
    14 00002AE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1512                              <1> 
  1513                              <1> version:
  1514 00002AE6 488D15CEDDFFFF      <1>     lea rdx, crlf
  1515 00002AED B409                <1>     mov ah, 09h
  1516 00002AEF CD21                <1>     int 21h
  1517 00002AF1 488D1536E0FFFF      <1>     lea rdx, dosVer
  1518 00002AF8 B409                <1>     mov ah, 09h
  1519 00002AFA CD21                <1>     int 21h
  1520 00002AFC E80C000000          <1>     call .printVersionNumber
  1521 00002B01 488D15B3DDFFFF      <1>     lea rdx, crlf
  1522 00002B08 B409                <1>     mov ah, 09h
  1523 00002B0A CD21                <1>     int 21h
  1524                              <1>     return
    13                              <2> %%_ret:
    14 00002B0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1525                              <1> .printVersionNumber:
  1526 00002B0D B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1527 00002B0F CD21                <1>     int 21h
  1528 00002B11 50                  <1>     push rax
  1529 00002B12 0FB6C0              <1>     movzx eax, al
  1530 00002B15 E869090000          <1>     call printDecimalWord
  1531 00002B1A B22E                <1>     mov dl, "."
  1532 00002B1C B402                <1>     mov ah, 02h
  1533 00002B1E CD21                <1>     int 21h
  1534 00002B20 58                  <1>     pop rax
  1535 00002B21 0FB6C4              <1>     movzx eax, ah
  1536 00002B24 E85A090000          <1>     call printDecimalWord
  1537                              <1>     return
    13                              <2> %%_ret:
    14 00002B29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1538                              <1> 
  1539                              <1> 
  1540                              <1> memory:
  1541 00002B2A 488B1DEED4FFFF      <1>     mov rbx, qword [sysVars]
  1542 00002B31 4885DB              <1>     test rbx, rbx
  1543 00002B34 7510                <1>     jnz .sysvarsOK
  1544 00002B36 488D15D4E2FFFF      <1>     lea rdx, memBad0
  1545 00002B3D B409                <1>     mov ah, 09h
  1546 00002B3F CD21                <1>     int 21h
  1547 00002B41 E9E0090000          <1>     jmp freezePC.altEP
  1548                              <1> .sysvarsOK:
  1549                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1550                              <1>     ; and rcx to store Application memory
  1551 00002B46 31F6                <1>     xor esi, esi
  1552 00002B48 31FF                <1>     xor edi, edi
  1553 00002B4A 31ED                <1>     xor ebp, ebp
  1554 00002B4C 31C9                <1>     xor ecx, ecx
  1555 00002B4E 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1556 00002B52 488B1B              <1>     mov rbx, qword [rbx]
  1557                              <1> .memLp:
  1558 00002B55 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1559 00002B58 7409                <1>     je .validMCB
  1560 00002B5A 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1561 00002B5D 0F8501010000        <1>     jne .badMCBFound
  1562                              <1> .validMCB:
  1563 00002B63 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1564 00002B66 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1565 00002B6A 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1566 00002B72 7505                <1>     jne .notDOS
  1567 00002B74 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1568 00002B77 EB21                <1>     jmp short .gotoNext
  1569                              <1> .notDOS:
  1570 00002B79 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1571 00002B81 7505                <1>     jne .notFree
  1572 00002B83 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1573 00002B86 EB12                <1>     jmp short .gotoNext
  1574                              <1> .notFree:
  1575 00002B88 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1576 00002B90 7505                <1>     jne .notHole
  1577 00002B92 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1578 00002B95 EB03                <1>     jmp short .gotoNext
  1579                              <1> .notHole:
  1580 00002B97 4801C1              <1>     add rcx, rax    ;Add to Application count
  1581                              <1> .gotoNext:
  1582 00002B9A 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1583 00002B9D 7407                <1>     je .endOfWalk
  1584 00002B9F 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1585 00002BA4 EBAF                <1>     jmp short .memLp
  1586                              <1> .endOfWalk:
  1587                              <1>     
  1588 00002BA6 488D15C5E1FFFF      <1>     lea rdx, memDOS
  1589 00002BAD B409                <1>     mov ah, 09h
  1590 00002BAF CD21                <1>     int 21h
  1591 00002BB1 4889F0              <1>     mov rax, rsi
  1592 00002BB4 E89D000000          <1>     call .mcbPrintAmount
  1593 00002BB9 488D154AE2FFFF      <1>     lea rdx, memByte
  1594 00002BC0 B409                <1>     mov ah, 09h
  1595 00002BC2 CD21                <1>     int 21h
  1596                              <1> 
  1597 00002BC4 4885ED              <1>     test rbp, rbp
  1598 00002BC7 741E                <1>     jz .skipHole
  1599 00002BC9 488D15EEE1FFFF      <1>     lea rdx, memHole
  1600 00002BD0 B409                <1>     mov ah, 09h
  1601 00002BD2 CD21                <1>     int 21h
  1602 00002BD4 4889E8              <1>     mov rax, rbp
  1603 00002BD7 E87A000000          <1>     call .mcbPrintAmount
  1604 00002BDC 488D1527E2FFFF      <1>     lea rdx, memByte
  1605 00002BE3 B409                <1>     mov ah, 09h
  1606 00002BE5 CD21                <1>     int 21h
  1607                              <1> .skipHole:
  1608                              <1> 
  1609 00002BE7 488D15AAE1FFFF      <1>     lea rdx, memApp
  1610 00002BEE B409                <1>     mov ah, 09h
  1611 00002BF0 CD21                <1>     int 21h
  1612 00002BF2 4889C8              <1>     mov rax, rcx
  1613 00002BF5 E85C000000          <1>     call .mcbPrintAmount
  1614 00002BFA 488D1509E2FFFF      <1>     lea rdx, memByte
  1615 00002C01 B409                <1>     mov ah, 09h
  1616 00002C03 CD21                <1>     int 21h
  1617                              <1> 
  1618 00002C05 488D15D8E1FFFF      <1>     lea rdx, memFree
  1619 00002C0C B409                <1>     mov ah, 09h
  1620 00002C0E CD21                <1>     int 21h
  1621 00002C10 4889F8              <1>     mov rax, rdi
  1622 00002C13 E83E000000          <1>     call .mcbPrintAmount
  1623 00002C18 488D15EBE1FFFF      <1>     lea rdx, memByte
  1624 00002C1F B409                <1>     mov ah, 09h
  1625 00002C21 CD21                <1>     int 21h
  1626                              <1> 
  1627 00002C23 488D1522E1FFFF      <1>     lea rdx, memSys
  1628 00002C2A B409                <1>     mov ah, 09h
  1629 00002C2C CD21                <1>     int 21h
  1630 00002C2E 4889F0              <1>     mov rax, rsi
  1631 00002C31 4801F8              <1>     add rax, rdi
  1632 00002C34 4801C8              <1>     add rax, rcx
  1633 00002C37 4801E8              <1>     add rax, rbp
  1634 00002C3A E817000000          <1>     call .mcbPrintAmount
  1635 00002C3F 488D15C4E1FFFF      <1>     lea rdx, memByte
  1636 00002C46 B409                <1>     mov ah, 09h
  1637 00002C48 CD21                <1>     int 21h
  1638                              <1> 
  1639 00002C4A 488D156ADCFFFF      <1>     lea rdx, crlf
  1640 00002C51 B409                <1>     mov ah, 09h
  1641 00002C53 CD21                <1>     int 21h
  1642                              <1>     return
    13                              <2> %%_ret:
    14 00002C55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1643                              <1> 
  1644                              <1> .mcbPrintAmount:
  1645 00002C56 51                  <1>     push rcx
  1646 00002C57 56                  <1>     push rsi
  1647 00002C58 57                  <1>     push rdi
  1648 00002C59 55                  <1>     push rbp
  1649 00002C5A E824080000          <1>     call printDecimalWord
  1650 00002C5F 5D                  <1>     pop rbp
  1651 00002C60 5F                  <1>     pop rdi
  1652 00002C61 5E                  <1>     pop rsi
  1653 00002C62 59                  <1>     pop rcx
  1654                              <1>     return
    13                              <2> %%_ret:
    14 00002C63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1655                              <1> .badMCBFound:
  1656 00002C64 488D15E6E1FFFF      <1>     lea rdx, memBad2
  1657 00002C6B B409                <1>     mov ah, 09h
  1658 00002C6D CD21                <1>     int 21h
  1659 00002C6F E9B2080000          <1>     jmp freezePC.altEP
  1660                              <1> 
  1661                              <1> type:
  1662 00002C74 F6052FD4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1663 00002C7B 0F8409ECFFFF        <1>     jz badArgError
  1664 00002C81 F60525D4FFFFFF      <1>     test byte [arg2Flg], -1
  1665 00002C88 0F85FCEBFFFF        <1>     jnz badArgError         ;If this set, error
  1666 00002C8E 4C8B057AD3FFFF      <1>     mov r8, [pspPtr]
  1667 00002C95 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1668 00002C9C 0FB60508D4FFFF      <1>     movzx eax, byte [arg1Off]
  1669 00002CA3 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1670 00002CA6 803E0D              <1>     cmp byte [rsi], CR
  1671 00002CA9 0F84DBEBFFFF        <1>     je badArgError
  1672 00002CAF 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1673 00002CB3 750F                <1>     jne .noDrive
  1674 00002CB5 0FB605F0D3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1675 00002CBC 3CFF                <1>     cmp al, -1
  1676 00002CBE 0F84BDEBFFFF        <1>     je badDriveError
  1677                              <1> .noDrive:
  1678                              <1>     ;Now we open the provided file
  1679 00002CC4 E881070000          <1>     call buildCommandPath
  1680 00002CC9 488D1511D8FFFF      <1>     lea rdx, searchSpec
  1681 00002CD0 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1682 00002CD5 CD21                <1>     int 21h
  1683 00002CD7 0F82B6EBFFFF        <1>     jc badFileError
  1684 00002CDD 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1685 00002CE4 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1686                              <1> .lp:
  1687 00002CE7 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1688 00002CEC B43F                <1>     mov ah, 3Fh ;Read handle
  1689 00002CEE CD21                <1>     int 21h
  1690 00002CF0 89C1                <1>     mov ecx, eax
  1691 00002CF2 67E317              <1>     jecxz .exit
  1692 00002CF5 53                  <1>     push rbx    ;Save the original in handle
  1693 00002CF6 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1694 00002CFB B440                <1>     mov ah, 40h
  1695 00002CFD CD21                <1>     int 21h
  1696 00002CFF 5B                  <1>     pop rbx ;Get back the original read handle
  1697 00002D00 720F                <1>     jc .exitBad
  1698 00002D02 39C8                <1>     cmp eax, ecx
  1699 00002D04 74E1                <1>     je .lp
  1700 00002D06 FFC9                <1>     dec ecx ;One less for a ^Z
  1701 00002D08 39C8                <1>     cmp eax, ecx
  1702 00002D0A 7505                <1>     jne .exitBad
  1703                              <1> .exit:
  1704 00002D0C B43E                <1>     mov ah, 3Eh ;Close handle
  1705 00002D0E CD21                <1>     int 21h
  1706                              <1>     return
    13                              <2> %%_ret:
    14 00002D10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1707                              <1> .exitBad:
  1708                              <1>     ;Print a disk error message... use a table to build the message but for
  1709                              <1>     ; now, just exit
  1710                              <1>     ;If it is a char device, don't print a error
  1711 00002D11 EBF9                <1>     jmp short .exit
  1712                              <1> 
  1713                              <1> exit:
  1714 00002D13 F60513D3FFFFFF      <1>     test byte [permaSwitch], -1
  1715                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D1A 75(10)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1716 00002D1C 488B05F4D2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1717 00002D23 483DFFFFFFFF        <1>     cmp rax, -1
  1718                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D29 74(10)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1719 00002D2B 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1720                              <1> 
  1721 00002D2F 488B15F8D2FFFF      <1>     mov rdx, qword [parentInt22]
  1722 00002D36 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1723 00002D3A B822250000          <1>     mov eax, 2522h
  1724 00002D3F CD21                <1>     int 21h
  1725                              <1> 
  1726 00002D41 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1727 00002D46 CD21                <1>     int 21h
  1728                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1729                              <1> 
  1730                              <1> launchChild:
  1731                              <1>     ;We execute an external command here.
  1732                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1733                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1734                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1735                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1736                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1737 00002D49 E8E8070000          <1>     call setDTA         
  1738                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1739 00002D4E 488D3DE3D5FFFF      <1>     lea rdi, cmdPathSpec
  1740 00002D55 E833060000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1741 00002D5A 4889FE              <1>     mov rsi, rdi    ;Source here
  1742 00002D5D 488D3DF3D3FFFF      <1>     lea rdi, cmdFcb
  1743 00002D64 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1744 00002D69 CD21                <1>     int 21h
  1745 00002D6B 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1746 00002D6D 0F8552EBFFFF        <1>     jnz badCmdError
  1747 00002D73 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1748                              <1> .pathLoop:
  1749 00002D76 488D35E3D3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1750 00002D7D 488D3D46E1FFFF      <1>     lea rdi, extStr
  1751 00002D84 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1752                              <1> .extLp:
  1753 00002D89 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1754 00002D8A B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1755 00002D8F F3A6                <1>     rep cmpsb   ;Compare the two strings
  1756 00002D91 5E                  <1>     pop rsi
  1757 00002D92 85C9                <1>     test ecx, ecx
  1758 00002D94 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1759 00002D96 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1760 00002D99 FFCA                <1>     dec edx         ;Else one less extension type to check
  1761 00002D9B 75EC                <1>     jnz .extLp
  1762                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1763                              <1>     ;If not, error.
  1764 00002D9D B903000000          <1>     mov ecx, 3
  1765 00002DA2 4889F7              <1>     mov rdi, rsi
  1766 00002DA5 B020                <1>     mov al, SPC
  1767 00002DA7 F3AE                <1>     rep scasb   
  1768 00002DA9 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1769 00002DAB 0F8514EBFFFF        <1>     jnz badCmdError    ;If not, error!
  1770                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1771 00002DB1 488D3512E1FFFF      <1>     lea rsi, extStr
  1772 00002DB8 BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1773                              <1> .extSrchLp:
  1774 00002DBD 488D3D9CD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1775 00002DC4 B903000000          <1>     mov ecx, 3
  1776 00002DC9 F3A4                <1>     rep movsb   ;Copy the extension over!
  1777 00002DCB E864010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1778 00002DD0 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1779 00002DD2 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1780 00002DD4 75E7                <1>     jnz .extSrchLp
  1781                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1782                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1783                              <1> ; by setting the fcb extension back to all spaces.
  1784 00002DD6 488D3D83D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1785 00002DDD B903000000          <1>     mov ecx, 3
  1786 00002DE2 B020                <1>     mov al, SPC
  1787 00002DE4 F3AA                <1>     rep stosb   ;Store back the empty extension!
  1788 00002DE6 EB53                <1>     jmp short .pathHandle
  1789                              <1> .extFnd:
  1790                              <1> ;Here if the file had the right extension.
  1791 00002DE8 E847010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1792 00002DED 724C                <1>     jc .pathHandle
  1793                              <1> .extSrchFnd:
  1794                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1795                              <1> ; a BAT. If it is, separate handling!
  1796 00002DEF 803D6AD3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1797 00002DF6 0F8404010000        <1>     je .batLaunch
  1798                              <1>     breakpoint
    81 00002DFC 6687DB              <2> xchg bx, bx
  1799 00002DFF 488D1D8CD3FFFF      <1>     lea rbx, launchBlock
  1800 00002E06 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1801 00002E0A 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1802 00002E0D 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1803 00002E14 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1804 00002E18 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1805 00002E1C 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1806 00002E20 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1807 00002E24 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1808 00002E28 488D1509D5FFFF      <1>     lea rdx, cmdPathSpec
  1809 00002E2F B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1810 00002E34 CD21                <1>     int 21h
  1811 00002E36 E98AEAFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1812                              <1> .pathHandle:        
  1813                              <1> ;First check if rbp is null. If it is, its a first time entry
  1814 00002E3B 4885ED              <1>     test rbp, rbp
  1815 00002E3E 0F85AA000000        <1>     jnz .pathReentry
  1816                              <1> ;Now check if the command we recieved included an absolute path.
  1817                              <1> ;If so, we don't do path substitution and just fail at this point
  1818 00002E44 488D35EDD4FFFF      <1>     lea rsi, cmdPathSpec
  1819 00002E4B 66AD                <1>     lodsw   ;Get the first two chars
  1820 00002E4D 3A05D8D1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1821 00002E53 0F846CEAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1822 00002E59 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1823 00002E5B 7412                <1>     je .pathGetEnv
  1824 00002E5D 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1825 00002E60 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1826 00002E62 AC                  <1>     lodsb   ;Get the third char
  1827 00002E63 3A05C2D1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1828 00002E69 0F8456EAFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1829                              <1> .pathGetEnv:
  1830                              <1> ;Now get a pointer to the environment and search for PATH=
  1831                              <1> ;We only take the final portion of the path and add it to each path componant
  1832                              <1> ;This agrees with DOS 3.3
  1833 00002E6F E8E6060000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1834 00002E74 0F844BEAFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1835                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1836                              <1>     ;Now we know we dont have to keep track of chars!!
  1837                              <1> .pathLp:
  1838 00002E7A 488D3D6DE0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1839 00002E81 B905000000          <1>     mov ecx, 5          ;5 Chars in PATH=
  1840 00002E86 E8C6060000          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1841 00002E8B 7419                <1>     je .pathFound
  1842 00002E8D 31C0                <1>     xor eax, eax        ;Search for a null
  1843 00002E8F 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1844 00002E92 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1845 00002E97 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1846 00002E99 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1847 00002E9B 0F8424EAFFFF        <1>     je badCmdError      ;If second null, no more env to search!
  1848 00002EA1 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1849 00002EA4 EBD4                <1>     jmp short .pathLp   ;And scan again!
  1850                              <1> .pathFound:
  1851                              <1> ;Env var found!
  1852 00002EA6 F3A6                <1>     repe cmpsb          ;Move rdi past the = sign!
  1853                              <1> .pathRejoin:
  1854 00002EA8 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1855 00002EAB 4889FE              <1>     mov rsi, rdi        ;This is a ; delimited ASCII string
  1856 00002EAE 488D3D2CD6FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1857 00002EB5 E837050000          <1>     call cpDelimOrCtrlStringToBufz   
  1858 00002EBA 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1859 00002EBD 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1860 00002EC0 48FFCF              <1>     dec rdi ;Point to the null terminator
  1861 00002EC3 8A0562D1FFFF        <1>     mov al, byte [pathSep]
  1862 00002EC9 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1863 00002ECA 488D3587D2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1864 00002ED1 E8DB040000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1865 00002ED6 488D3504D6FFFF      <1>     lea rsi, searchSpec 
  1866 00002EDD 488D3D54D4FFFF      <1>     lea rdi, cmdPathSpec
  1867 00002EE4 E8AD030000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1868 00002EE9 E988FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1869                              <1> .pathReentry:
  1870 00002EEE 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1871 00002EF2 0F84CDE9FFFF        <1>     je badCmdError
  1872 00002EF8 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1873 00002EFB 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1874 00002EFE EBA8                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1875                              <1> 
  1876                              <1> .batLaunch:
  1877 00002F00 488D1508000000      <1>     lea rdx, .batMsg
  1878 00002F07 B800090000          <1>     mov eax, 0900h
  1879 00002F0C CD21                <1>     int 21h
  1880                              <1>     return
    13                              <2> %%_ret:
    14 00002F0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1881 00002F0F 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1881 00002F18 70726F636573736F72- <1>
  1881 00002F21 206E6F7420696D706C- <1>
  1881 00002F2A 656D656E7465640D0A- <1>
  1881 00002F33 24                  <1>
  1882                              <1> 
  1883                              <1> .prepAndSearch:
  1884                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1885                              <1> ;cmdPathSpec and null terminates. 
  1886                              <1> ;Input: cmdFcb name + ext setup. 
  1887                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1888                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found!
  1889 00002F34 50                  <1>     push rax
  1890 00002F35 51                  <1>     push rcx
  1891 00002F36 56                  <1>     push rsi
  1892 00002F37 57                  <1>     push rdi
  1893 00002F38 488D3DF9D3FFFF      <1>     lea rdi, cmdPathSpec 
  1894 00002F3F 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1895 00002F42 E846040000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1896 00002F47 488D350AD2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1897 00002F4E E85E040000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1898 00002F53 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1899 00002F58 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1900 00002F5A CD21                <1>     int 21h
  1901 00002F5C 5F                  <1>     pop rdi
  1902 00002F5D 5E                  <1>     pop rsi
  1903 00002F5E 59                  <1>     pop rcx
  1904 00002F5F 58                  <1>     pop rax
  1905                              <1>     return
    13                              <2> %%_ret:
    14 00002F60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1906                              <1> 
  1907                              <1> set:
  1908 00002F61 F60542D1FFFFFF      <1>     test byte [arg1Flg], -1
  1909 00002F68 0F841CE9FFFF        <1>     jz badArgError  ;Need to give an argument!
  1910 00002F6E 0FB60536D1FFFF      <1>     movzx eax, byte [arg1Off]
  1911 00002F75 4C8B0593D0FFFF      <1>     mov r8, [pspPtr]
  1912 00002F7C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1913 00002F83 4801C6              <1>     add rsi, rax    ;Go to the start of the argument
  1914                              <1>     ;rsi -> EnvvarName=string;string;string<CR>
  1915                              <1> 
  1916                              <1> pathEdit:
  1917 00002F86 488D1508000000      <1>     lea rdx, .pMsg
  1918 00002F8D B800090000          <1>     mov eax, 0900h
  1919 00002F92 CD21                <1>     int 21h
  1920                              <1>     return
    13                              <2> %%_ret:
    14 00002F94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1921 00002F95 504154482065646974- <1> .pMsg db "PATH editing not yet implemented",CR,LF,"$"
  1921 00002F9E 696E67206E6F742079- <1>
  1921 00002FA7 657420696D706C656D- <1>
  1921 00002FB0 656E7465640D0A24    <1>
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002FB8 488D15FCD8FFFF      <1>     lea rdx, crlf
     5                              <1> printString:
     6 00002FBF B800090000          <1>     mov eax, 0900h  ;Print string
     7 00002FC4 CD21                <1>     int 21h
     8                              <1>     return
    13                              <2> %%_ret:
    14 00002FC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> printDate:
    10                              <1> ;Input: eax = Packed Date
    11                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    12                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    13                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    14                              <1> ;       ebx = 0 => Print two digit year
    15                              <1> ;       ebx = 1 => Print four digit year
    16 00002FC7 53                  <1>     push rbx
    17 00002FC8 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    18 00002FCA 803D65D0FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    19 00002FD1 7240                <1>     jb .usDate
    20 00002FD3 777C                <1>     ja .jpnDate
    21                              <1> ;European: DD/MM/YY
    22 00002FD5 251F000000          <1>     and eax, 1Fh    ;Save day bits
    23 00002FDA E8B0000000          <1>     call .printFirst
    24 00002FDF 8A155CD0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    25 00002FE5 B402                <1>     mov ah, 02h
    26 00002FE7 CD21                <1>     int 21h
    27                              <1> 
    28 00002FE9 89C8                <1>     mov eax, ecx
    29 00002FEB 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    30 00002FF0 C1E805              <1>     shr eax, 5
    31 00002FF3 E8B3000000          <1>     call .printSecond
    32                              <1> 
    33 00002FF8 8A1543D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    34 00002FFE B402                <1>     mov ah, 02h
    35 00003000 CD21                <1>     int 21h
    36                              <1> 
    37 00003002 89C8                <1>     mov eax, ecx
    38 00003004 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    39 00003009 C1E809              <1>     shr eax, 9
    40 0000300C 5B                  <1>     pop rbx ;Get the year signature back
    41 0000300D E8A9000000          <1>     call .printYear
    42                              <1>     return
    13                              <2> %%_ret:
    14 00003012 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                              <1> .usDate:
    44                              <1> ;US: MM/DD/YY
    45 00003013 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    46 00003018 C1E805              <1>     shr eax, 5
    47 0000301B E86F000000          <1>     call .printFirst
    48                              <1> 
    49 00003020 8A151BD0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    50 00003026 B402                <1>     mov ah, 02h
    51 00003028 CD21                <1>     int 21h
    52                              <1> 
    53 0000302A 89C8                <1>     mov eax, ecx
    54 0000302C 251F000000          <1>     and eax, 1Fh    ;Save day bits
    55 00003031 E875000000          <1>     call .printSecond
    56                              <1> 
    57 00003036 8A1505D0FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    58 0000303C B402                <1>     mov ah, 02h
    59 0000303E CD21                <1>     int 21h
    60                              <1> 
    61 00003040 89C8                <1>     mov eax, ecx
    62 00003042 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    63 00003047 C1E809              <1>     shr eax, 9
    64 0000304A 5B                  <1>     pop rbx ;Get the year signature back
    65 0000304B E86B000000          <1>     call .printYear
    66                              <1>     return
    13                              <2> %%_ret:
    14 00003050 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> .jpnDate:
    68                              <1> ;Japan: YY/MM/DD
    69 00003051 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    70 00003056 C1E809              <1>     shr eax, 9
    71 00003059 5B                  <1>     pop rbx ;Get the year signature back
    72 0000305A E85C000000          <1>     call .printYear
    73                              <1> 
    74 0000305F 8A15DCCFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    75 00003065 B402                <1>     mov ah, 02h
    76 00003067 CD21                <1>     int 21h
    77                              <1> 
    78 00003069 89C8                <1>     mov eax, ecx
    79 0000306B 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    80 00003070 C1E805              <1>     shr eax, 5
    81 00003073 E833000000          <1>     call .printSecond
    82                              <1> 
    83 00003078 8A15C3CFFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    84 0000307E B402                <1>     mov ah, 02h
    85 00003080 CD21                <1>     int 21h
    86                              <1> 
    87 00003082 89C8                <1>     mov eax, ecx
    88 00003084 251F000000          <1>     and eax, 1Fh    ;Save day bits
    89 00003089 E81D000000          <1>     call .printSecond
    90                              <1>     return
    13                              <2> %%_ret:
    14 0000308E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;Each of these require eax setup correctly
    93                              <1> .printFirst:
    94 0000308F 51                  <1>     push rcx
    95 00003090 E85F040000          <1>     call getDecimalWord
    96 00003095 84ED                <1>     test ch, ch ;Do we have an upper digit?
    97 00003097 7504                <1>     jnz .skipSpace
    98 00003099 88CD                <1>     mov ch, cl
    99 0000309B B120                <1>     mov cl, " "
   100                              <1> .skipSpace:
   101 0000309D 88CA                <1>     mov dl, cl
   102 0000309F B402                <1>     mov ah, 02h
   103 000030A1 CD21                <1>     int 21h
   104 000030A3 88EA                <1>     mov dl, ch
   105 000030A5 B402                <1>     mov ah, 02h
   106 000030A7 CD21                <1>     int 21h
   107 000030A9 59                  <1>     pop rcx
   108                              <1>     return
    13                              <2> %%_ret:
    14 000030AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   109                              <1> .printSecond:
   110 000030AB 51                  <1>     push rcx
   111 000030AC E843040000          <1>     call getDecimalWord
   112 000030B1 84ED                <1>     test ch, ch ;Do we have an upper digit?
   113 000030B3 75E8                <1>     jnz .skipSpace
   114 000030B5 88CD                <1>     mov ch, cl
   115 000030B7 B130                <1>     mov cl, "0"
   116 000030B9 EBE2                <1>     jmp short .skipSpace
   117                              <1> .printYear:
   118 000030BB 05BC070000          <1>     add eax, 1980
   119 000030C0 51                  <1>     push rcx
   120 000030C1 53                  <1>     push rbx
   121 000030C2 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   122 000030C7 5B                  <1>     pop rbx
   123 000030C8 84DB                <1>     test bl, bl
   124 000030CA 740C                <1>     jz .twoDigitYear
   125 000030CC 88CA                <1>     mov dl, cl  ;Print the first digit
   126 000030CE B402                <1>     mov ah, 02h
   127 000030D0 CD21                <1>     int 21h
   128 000030D2 88EA                <1>     mov dl, ch  ;Print the second digit
   129 000030D4 B402                <1>     mov ah, 02h
   130 000030D6 CD21                <1>     int 21h
   131                              <1> .twoDigitYear:
   132 000030D8 C1E910              <1>     shr ecx, 10h    ;Get high word low
   133 000030DB 88CA                <1>     mov dl, cl  ;Print the upper digit
   134 000030DD B402                <1>     mov ah, 02h
   135 000030DF CD21                <1>     int 21h
   136 000030E1 88EA                <1>     mov dl, ch  ;Print the lower digit
   137 000030E3 B402                <1>     mov ah, 02h
   138 000030E5 CD21                <1>     int 21h
   139 000030E7 59                  <1>     pop rcx
   140                              <1>     return
    13                              <2> %%_ret:
    14 000030E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> 
   143                              <1> printTime:
   144                              <1> ;Input: eax = Packed Time
   145                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   146                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   147 000030E9 89C1                <1>     mov ecx, eax
   148 000030EB 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   149 000030F0 C1E80B              <1>     shr eax, 11
   150 000030F3 803D4DCFFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   151 000030FA 750B                <1>     jne .ampm
   152 000030FC E85A000000          <1>     call .printHours
   153 00003101 E831000000          <1>     call .printMinutes
   154                              <1>     return
    13                              <2> %%_ret:
    14 00003106 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   155                              <1> .ampm:
   156 00003107 3D0C000000          <1>     cmp eax, 12
   157 0000310C 7713                <1>     ja .pm
   158 0000310E 7416                <1>     je .pm2
   159 00003110 E846000000          <1>     call .printHours
   160 00003115 E81D000000          <1>     call .printMinutes
   161 0000311A B261                <1>     mov dl, "a"
   162 0000311C B402                <1>     mov ah, 02h
   163 0000311E CD21                <1>     int 21h
   164                              <1>     return
    13                              <2> %%_ret:
    14 00003120 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> .pm:
   166 00003121 2D0C000000          <1>     sub eax, 12
   167                              <1> .pm2:
   168 00003126 E830000000          <1>     call .printHours
   169 0000312B E807000000          <1>     call .printMinutes
   170 00003130 B270                <1>     mov dl, "p"
   171 00003132 B402                <1>     mov ah, 02h
   172 00003134 CD21                <1>     int 21h
   173                              <1>     return
    13                              <2> %%_ret:
    14 00003136 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   174                              <1> .printMinutes:
   175 00003137 8A1506CFFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   176 0000313D B402                <1>     mov ah, 02h
   177 0000313F CD21                <1>     int 21h
   178                              <1> 
   179 00003141 89C8                <1>     mov eax, ecx
   180 00003143 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   181 00003148 C1E805              <1>     shr eax, 5
   182                              <1> .printMinutesAlt:
   183 0000314B 51                  <1>     push rcx
   184 0000314C E8A3030000          <1>     call getDecimalWord
   185 00003151 84ED                <1>     test ch, ch ;Do we have an upper digit?
   186 00003153 7514                <1>     jnz .skipSpace
   187 00003155 88CD                <1>     mov ch, cl
   188 00003157 B130                <1>     mov cl, "0"
   189 00003159 EB0E                <1>     jmp short .skipSpace
   190                              <1> .printHours:
   191 0000315B 51                  <1>     push rcx
   192 0000315C E893030000          <1>     call getDecimalWord
   193 00003161 84ED                <1>     test ch, ch ;Do we have an upper digit?
   194 00003163 7504                <1>     jnz .skipSpace
   195 00003165 88CD                <1>     mov ch, cl
   196 00003167 B120                <1>     mov cl, " "
   197                              <1> .skipSpace:
   198 00003169 88CA                <1>     mov dl, cl
   199 0000316B B402                <1>     mov ah, 02h
   200 0000316D CD21                <1>     int 21h
   201 0000316F 88EA                <1>     mov dl, ch
   202 00003171 B402                <1>     mov ah, 02h
   203 00003173 CD21                <1>     int 21h
   204 00003175 59                  <1>     pop rcx
   205                              <1>     return
    13                              <2> %%_ret:
    14 00003176 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> 
   208                              <1> putVersionInPrompt:
   209 00003177 488D15B0D9FFFF      <1>     lea rdx, dosVer
   210 0000317E B409                <1>     mov ah, 09h ;Print String
   211 00003180 CD21                <1>     int 21h
   212 00003182 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   213 00003184 CD21                <1>     int 21h
   214 00003186 50                  <1>     push rax    ;Save minor version
   215 00003187 E8B0000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   216 0000318C E8C8000000          <1>     call printPackedBCD ;Print al
   217 00003191 B22E                <1>     mov dl, "."
   218 00003193 B402                <1>     mov ah, 02h
   219 00003195 CD21                <1>     int 21h
   220 00003197 58                  <1>     pop rax
   221 00003198 88E0                <1>     mov al, ah  ;Get the minor version low
   222 0000319A E89D000000          <1>     call hexToBCD
   223 0000319F E8B5000000          <1>     call printPackedBCD
   224                              <1>     return
    13                              <2> %%_ret:
    14 000031A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> putEscInPrompt:
   226 000031A5 B21B                <1>     mov dl, ESC
   227 000031A7 EB1D                <1>     jmp short outChar
   228                              <1> 
   229                              <1> putMoneyInPrompt:
   230 000031A9 B224                <1>     mov dl, "$"
   231 000031AB EB19                <1>     jmp short outChar
   232                              <1> 
   233                              <1> putEquInPrompt:
   234 000031AD B23D                <1>     mov dl, "="
   235 000031AF EB15                <1>     jmp short outChar
   236                              <1> 
   237                              <1> putPipeInPrompt:
   238 000031B1 B27C                <1>     mov dl, "|"
   239 000031B3 EB11                <1>     jmp short outChar
   240                              <1> 
   241                              <1> putGTinPrompt:
   242 000031B5 B23E                <1>     mov dl, ">"
   243 000031B7 EB0D                <1>     jmp short outChar
   244                              <1> 
   245                              <1> putLTinPrompt:
   246 000031B9 B23C                <1>     mov dl, "<"
   247 000031BB EB09                <1>     jmp short outChar
   248                              <1> 
   249                              <1> putDriveInPrompt:
   250 000031BD E8CF000000          <1>     call getCurrentDrive
   251 000031C2 0441                <1>     add al, "A" ;Convert to letter
   252 000031C4 88C2                <1>     mov dl, al
   253                              <1> outChar:
   254 000031C6 B402                <1>     mov ah, 02h ;Echo to STDOUT
   255 000031C8 CD21                <1>     int 21h
   256                              <1>     return
    13                              <2> %%_ret:
    14 000031CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> putCWDInPrompt:
   258 000031CB E8C1000000          <1>     call getCurrentDrive
   259 000031D0 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   260 000031D2 FEC2                <1>     inc dl
   261 000031D4 0441                <1>     add al, "A" ;Convert to letter
   262 000031D6 B43A                <1>     mov ah, ":"
   263 000031D8 488D3D7DCEFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   264 000031DF 66AB                <1>     stosw   ;Store X:, rdi+=2
   265 000031E1 8A0544CEFFFF        <1>     mov al, byte [pathSep]
   266 000031E7 AA                  <1>     stosb   ;Store pathSep, inc rdi
   267 000031E8 B447                <1>     mov ah, 47h ;Get Current Working Directory
   268 000031EA 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   269 000031ED CD21                <1>     int 21h
   270 000031EF 721F                <1>     jc .badDrive
   271 000031F1 E8B9000000          <1>     call strlen
   272 000031F6 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   273                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   274 000031FC B800400000          <1>     mov eax, 4000h ;Write to handle
   275 00003201 BB01000000          <1>     mov ebx, 1  ;STDOUT
   276 00003206 488D154FCEFFFF      <1>     lea rdx, currDirStr
   277 0000320D CD21                <1>     int 21h
   278                              <1>     return
    13                              <2> %%_ret:
    14 0000320F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> .badDrive:
   280                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   281 00003210 488D15DFD9FFFF      <1>     lea rdx, badDrvMsg
   282 00003217 E8A3FDFFFF          <1>     call printString
   283                              <1>     return
    13                              <2> %%_ret:
    14 0000321C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> 
   285                              <1> BCDtoHex:
   286                              <1> ;Converts a BCD value to a Hex byte
   287                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   288 0000321D 51                  <1>     push rcx
   289 0000321E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   290 00003221 89C1                <1>     mov ecx, eax    ;Save al in ecx
   291 00003223 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   292 00003228 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   293 0000322E C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   294                              <1> .bth:
   295 00003231 050A000000          <1>     add eax, 10
   296 00003236 FFC9                <1>     dec ecx
   297 00003238 75F7                <1>     jnz .bth
   298 0000323A 59                  <1>     pop rcx
   299 0000323B C3                  <1>     ret
   300                              <1> 
   301                              <1> hexToBCD:
   302                              <1> ;Converts a Hex byte into two BCD digits
   303                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   304 0000323C 51                  <1>     push rcx
   305 0000323D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   306 00003240 31C9                <1>     xor ecx, ecx
   307                              <1> .htb0:
   308 00003242 3D0A000000          <1>     cmp eax, 10
   309 00003247 7209                <1>     jb .htb1
   310 00003249 2D0A000000          <1>     sub eax, 10
   311 0000324E FFC1                <1>     inc ecx
   312 00003250 EBF0                <1>     jmp short .htb0
   313                              <1> .htb1:
   314 00003252 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   315 00003255 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   316 00003257 59                  <1>     pop rcx
   317 00003258 C3                  <1>     ret
   318                              <1> 
   319                              <1> printPackedBCD:
   320                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   321                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   322                              <1> ;Preserves all registers
   323 00003259 50                  <1>     push rax
   324 0000325A 52                  <1>     push rdx
   325 0000325B 88C4                <1>     mov ah, al
   326 0000325D 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   327 0000325F 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   328 00003262 7508                <1>     jnz .upperNybble
   329 00003264 B220                <1>     mov dl, " "
   330 00003266 B402                <1>     mov ah, 02h
   331 00003268 CD21                <1>     int 21h
   332 0000326A EB0E                <1>     jmp short .lowerNybble
   333                              <1> .upperNybble:
   334 0000326C 50                  <1>     push rax
   335 0000326D C0EC04              <1>     shr ah, 4
   336 00003270 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   337 00003273 88E2                <1>     mov dl, ah
   338 00003275 B402                <1>     mov ah, 02h ;Print DL
   339 00003277 CD21                <1>     int 21h
   340 00003279 58                  <1>     pop rax
   341                              <1> .lowerNybble:
   342 0000327A 0430                <1>     add al, "0"
   343 0000327C 88C2                <1>     mov dl, al
   344 0000327E B402                <1>     mov ah, 02h ;Print DL
   345 00003280 CD21                <1>     int 21h
   346 00003282 5A                  <1>     pop rdx
   347 00003283 58                  <1>     pop rax
   348                              <1>     return
    13                              <2> %%_ret:
    14 00003284 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> setDrive:
   351                              <1> ;Input: dl = 0 based Drive number to set to
   352                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   353                              <1> ;AX trashed.
   354 00003285 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   355 00003287 CD21                <1>     int 21h 
   356 00003289 E803000000          <1>     call getCurrentDrive
   357 0000328E 38D0                <1>     cmp al, dl  ;Is this the same drive?
   358                              <1>     return
    13                              <2> %%_ret:
    14 00003290 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> getCurrentDrive:
   360                              <1> ;Returns the 0 based current drive in al
   361 00003291 B419                <1>     mov ah, 19h
   362 00003293 CD21                <1>     int 21h
   363                              <1>     return
    13                              <2> %%_ret:
    14 00003295 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> 
   365                              <1> strcpy:
   366                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   367                              <1> ;rsi -> Source
   368                              <1> ;rdi -> Destination
   369 00003296 51                  <1>     push rcx
   370 00003297 57                  <1>     push rdi
   371 00003298 4889F7              <1>     mov rdi, rsi
   372 0000329B E80F000000          <1>     call strlen ;Get the length of the string in rsi
   373 000032A0 5F                  <1>     pop rdi
   374 000032A1 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   375 000032A3 59                  <1>     pop rcx
   376                              <1>     return
    13                              <2> %%_ret:
    14 000032A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> 
   378                              <1> strcpy2:
   379                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   380                              <1> ;rsi -> Source
   381                              <1> ;rdi -> Destination
   382 000032A5 56                  <1>     push rsi
   383 000032A6 57                  <1>     push rdi
   384 000032A7 E8EAFFFFFF          <1>     call strcpy 
   385 000032AC 5F                  <1>     pop rdi
   386 000032AD 5E                  <1>     pop rsi
   387                              <1>     return
    13                              <2> %%_ret:
    14 000032AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> 
   389                              <1> strlen:
   390                              <1> ;Gets the length of a ASCIIZ string
   391                              <1> ;Input: rdi = Source buffer
   392                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   393 000032AF 50                  <1>     push rax
   394 000032B0 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   395 000032B5 CD2F                <1>     int 2fh
   396 000032B7 58                  <1>     pop rax
   397                              <1>     return
    13                              <2> %%_ret:
    14 000032B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> ucChar:
   400                              <1> ;Input: al = Char to uppercase
   401                              <1> ;Output: al = Adjusted char 
   402 000032B9 53                  <1>     push rbx
   403 000032BA 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   404 000032BD 50                  <1>     push rax    ;Push the char twice on the stack
   405 000032BE 50                  <1>     push rax
   406 000032BF B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   407 000032C4 CD2F                <1>     int 2fh         ;Returns the processed char in al
   408 000032C6 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   409 000032C9 5B                  <1>     pop rbx
   410                              <1>     return
    13                              <2> %%_ret:
    14 000032CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> skipDelimiters:
   413                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   414                              <1> ; command delimiters but a subset thereof. 
   415                              <1> ;These are the same across all codepages.
   416                              <1> ;Input: rsi must point to the start of the data string
   417                              <1> ;Output: rsi points to the first non-delimiter char
   418 000032CB 50                  <1>     push rax
   419                              <1> .l1:
   420 000032CC AC                  <1>     lodsb
   421 000032CD E807000000          <1>     call isALdelimiter
   422 000032D2 74F8                <1>     jz .l1
   423                              <1> .exit:
   424 000032D4 58                  <1>     pop rax
   425 000032D5 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   426                              <1>     return
    13                              <2> %%_ret:
    14 000032D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> isALdelimiter:
   429                              <1> ;Returns: ZF=NZ if al is not a command separator 
   430                              <1> ;         ZF=ZE if al is a command separator
   431 000032D9 3C20                <1>     cmp al, " "
   432                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000032DB 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433 000032DD 3C3B                <1>     cmp al, ";"
   434                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000032DF 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   435 000032E1 3C3D                <1>     cmp al, "="
   436                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000032E3 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   437 000032E5 3C2C                <1>     cmp al, ","
   438                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000032E7 74(D8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   439 000032E9 3C09                <1>     cmp al, TAB
   440                              <1>     return
    13                              <2> %%_ret:
    14 000032EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> printPrompt:
   443 000032EC 66813D34CDFFFFFFFF  <1>     cmp word [promptPtr], -1
   444 000032F5 750B                <1>     jne .validPrompt
   445                              <1>     ;Here we print the default prompt
   446 000032F7 E8CFFEFFFF          <1>     call putCWDInPrompt
   447 000032FC E8B4FEFFFF          <1>     call putGTinPrompt
   448                              <1>     return
    13                              <2> %%_ret:
    14 00003301 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> .validPrompt:
   450                              <1>     return
    13                              <2> %%_ret:
    14 00003302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   451                              <1> 
   452                              <1> clearCommandState:
   453                              <1> ;Clears the command state
   454 00003303 488D3D9ACDFFFF      <1>     lea rdi, cmdStatePtr
   455 0000330A B90C000000          <1>     mov ecx, cmdStateL
   456 0000330F 31C0                <1>     xor eax, eax
   457 00003311 F3AA                <1>     rep stosb
   458 00003313 C70589CDFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   458 0000331C FF                  <1>
   459                              <1>     return
    13                              <2> %%_ret:
    14 0000331D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   460                              <1> 
   461                              <1> clearCommandLineState:
   462                              <1> ;Clears the command line state after a 0Dh encountered
   463 0000331E 488D3D7ACDFFFF      <1>     lea rdi, cmdLineStatePtr
   464 00003325 B911000000          <1>     mov ecx, cmdLineStateL
   465 0000332A 31C0                <1>     xor eax, eax
   466 0000332C F3AA                <1>     rep stosb
   467 0000332E C70568CDFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   467 00003337 FF                  <1>
   468 00003338 C70564CDFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   468 00003341 FF                  <1>
   469                              <1>     return
    13                              <2> %%_ret:
    14 00003342 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> asciiFilenameToFCB:
   472                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   473                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   474                              <1> ;Also doesn't check if chars are valid
   475                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   476                              <1> ;Name is space padded.
   477                              <1> ;Input: rsi = ASCII string buffer
   478                              <1> ;       rdi = FCB name buffer
   479                              <1> ;Output: al = Char that terminated the source string 
   480 00003343 53                  <1>     push rbx    
   481 00003344 57                  <1>     push rdi
   482 00003345 B90B000000          <1>     mov ecx, 11
   483 0000334A B020                <1>     mov al, " "
   484 0000334C F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   485 0000334E 5F                  <1>     pop rdi
   486 0000334F 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   487                              <1>     ;Preprocess for Dir Searches
   488 00003352 803E2E              <1>     cmp byte [rsi], "."
   489 00003355 7509                <1>     jne .processName
   490 00003357 A4                  <1>     movsb   ;Store the first dot
   491 00003358 803E2E              <1>     cmp byte [rsi], "."
   492 0000335B 752C                <1>     jne .exitBadChar
   493 0000335D A4                  <1>     movsb
   494 0000335E EB29                <1>     jmp short .exitBadChar
   495                              <1> .processName:
   496 00003360 AC                  <1>     lodsb   ;Get the char in al
   497 00003361 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   498 00003363 7426                <1>     jz .exit
   499 00003365 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   500 00003367 7407                <1>     je .extSpace
   501 00003369 3C2E                <1>     cmp al, "."
   502 0000336B 740C                <1>     je .ext
   503 0000336D AA                  <1>     stosb   ;Store the char
   504 0000336E EBF0                <1>     jmp short .processName
   505                              <1> .extSpace:
   506                              <1> ;Now we scan for a period in the name
   507 00003370 AC                  <1>     lodsb   ;Get a char and increase rsi
   508 00003371 84C0                <1>     test al, al
   509 00003373 7416                <1>     jz .exit
   510 00003375 3C2E                <1>     cmp al, "."     ;If al is not a period...
   511 00003377 75F7                <1>     jne .extSpace   ; keep searching
   512                              <1> .ext:
   513 00003379 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   514                              <1> .processExt:
   515 0000337D AC                  <1>     lodsb
   516 0000337E 84C0                <1>     test al, al
   517 00003380 7409                <1>     jz .exit
   518 00003382 3C20                <1>     cmp al, " "
   519 00003384 7405                <1>     je .exit
   520 00003386 AA                  <1>     stosb
   521 00003387 EBF4                <1>     jmp short .processExt
   522                              <1> .exitBadChar:
   523 00003389 30C0                <1>     xor al, al  ;Return a null terminator
   524                              <1> .exit:
   525 0000338B 5B                  <1>     pop rbx
   526                              <1>     return
    13                              <2> %%_ret:
    14 0000338C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> findLastPathComponant:
   529                              <1> ;Finds the last path componant of an ASCIIZ path string
   530                              <1> ;Input: rdi -> Head of the path to find last componant on
   531                              <1> ;Output: rdi -> Start of the last componant
   532 0000338D 50                  <1>     push rax
   533 0000338E 51                  <1>     push rcx
   534 0000338F 31C9                <1>     xor ecx, ecx
   535 00003391 FFC9                <1>     dec ecx
   536 00003393 31C0                <1>     xor eax, eax
   537 00003395 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   538 00003397 F7D1                <1>     not ecx     ;This gets the count of chars  
   539 00003399 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   540 0000339C 8A0589CCFFFF        <1>     mov al, byte [pathSep]
   541 000033A2 FD                  <1>     std
   542 000033A3 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   543 000033A5 FC                  <1>     cld
   544 000033A6 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   545 000033A8 48FFC7              <1>     inc rdi     ;Point at pathsep
   546                              <1> .exit:
   547 000033AB 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   548 000033AE 59                  <1>     pop rcx
   549 000033AF 58                  <1>     pop rax
   550                              <1>     return
    13                              <2> %%_ret:
    14 000033B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> FCBToAsciiz:
   553                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   554                              <1> ;Name is space padded too
   555                              <1> ;Input: rsi = FCB name buffer
   556                              <1> ;       rdi = ASCIIZ string buffer
   557 000033B1 B908000000          <1>     mov ecx, 8
   558 000033B6 F3A4                <1>     rep movsb   ;Move the name over
   559                              <1> .scanNameSpace:
   560 000033B8 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   561 000033BC 750D                <1>     jne .ext
   562 000033BE 48FFCF              <1>     dec rdi
   563 000033C1 FFC1                <1>     inc ecx
   564 000033C3 81F908000000        <1>     cmp ecx, 8
   565 000033C9 72ED                <1>     jb .scanNameSpace
   566                              <1> .ext:
   567 000033CB 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   568 000033D0 7506                <1>     jne .validExt
   569 000033D2 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   570 000033D6 7415                <1>     je .exit
   571                              <1> .validExt:
   572 000033D8 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   573 000033DA AA                  <1>     stosb
   574 000033DB B903000000          <1>     mov ecx, 3
   575 000033E0 F3A4                <1>     rep movsb   ;Move the three extension chars over
   576                              <1> .scanExtSpace:
   577 000033E2 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   578 000033E6 7505                <1>     jne .exit
   579 000033E8 48FFCF              <1>     dec rdi
   580 000033EB EBF5                <1>     jmp short .scanExtSpace
   581                              <1> .exit:
   582 000033ED 31C0                <1>     xor eax, eax
   583 000033EF AA                  <1>     stosb   ;Store a null at the end
   584                              <1>     return
    13                              <2> %%_ret:
    14 000033F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> cpDelimOrCtrlStringToBufz:
   587                              <1> ;Copy a delimited or control char terminated string to a buffer
   588                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   589                              <1> ;       rdi -> Buffer to store null terminated string in
   590                              <1> ;Output: rsi -> First char past string end
   591                              <1> ;       rdi -> One char past null terminator on string buffer
   592 000033F1 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   593                              <1> .lp:
   594 000033F4 AC                  <1>     lodsb
   595 000033F5 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here
   596 000033F7 760A                <1>     jbe .exit
   597 000033F9 E8DBFEFFFF          <1>     call isALdelimiter
   598 000033FE 7403                <1>     je .exit
   599 00003400 AA                  <1>     stosb
   600 00003401 EBF1                <1>     jmp short .lp
   601                              <1> .exit:
   602 00003403 31C0                <1>     xor eax, eax
   603 00003405 AA                  <1>     stosb   ;Store a null terminator
   604                              <1>     return
    13                              <2> %%_ret:
    14 00003406 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   605                              <1> 
   606                              <1> 
   607                              <1> cpDelimPathToBufz:
   608                              <1> ;Copy a delimited path into buffer and null terminate.
   609                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   610                              <1> ;       rdi -> Buffer to store null terminated path in
   611                              <1> ;Output: rsi -> First char past pathname delimiter
   612                              <1> ;       rdi -> One char past null terminator on pathname buffer
   613 00003407 53                  <1>     push rbx
   614 00003408 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   615 0000340B C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   616                              <1> .lp:
   617 0000340E AC                  <1>     lodsb   ;Get the char
   618 0000340F 3C0D                <1>     cmp al, CR
   619 00003411 7412                <1>     je .gotRedirPath
   620 00003413 E8C1FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   621 00003418 740B                <1>     jz .gotRedirPath 
   622 0000341A 3A050CCCFFFF        <1>     cmp al, byte [switchChar]
   623 00003420 7403                <1>     je .gotRedirPath
   624 00003422 AA                  <1>     stosb   ;Store this char and loop next char
   625 00003423 EBE9                <1>     jmp short .lp
   626                              <1> .gotRedirPath:
   627 00003425 50                  <1>     push rax    ;Save the char on stack
   628 00003426 30C0                <1>     xor al, al  ;Get null terminator char
   629 00003428 4829FB              <1>     sub rbx, rdi
   630 0000342B 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   631 00003432 7412                <1>     je .notColon
   632 00003434 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   633 0000343B 7409                <1>     je .notColon
   634 0000343D 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   635 00003441 7503                <1>     jne .notColon
   636 00003443 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   637                              <1> .notColon:
   638 00003446 AA                  <1>     stosb   ;Store the null terminator for the redir path
   639 00003447 58                  <1>     pop rax ;Get back the char in al
   640 00003448 5B                  <1>     pop rbx
   641                              <1>     return
    13                              <2> %%_ret:
    14 00003449 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   642                              <1> 
   643                              <1> buildCommandPath:
   644                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   645 0000344A 0FB6055ACCFFFF      <1>     movzx eax, byte [arg1Off]
   646 00003451 4C8B05B7CBFFFF      <1>     mov r8, [pspPtr]
   647 00003458 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   648 0000345F 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   649                              <1> copyArgumentToSearchSpec:
   650                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   651                              <1> ; and null terminates
   652 00003462 488D3D78D0FFFF      <1>     lea rdi, searchSpec
   653 00003469 E899FFFFFF          <1>     call cpDelimPathToBufz
   654                              <1>     return
    13                              <2> %%_ret:
    14 0000346E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> 
   656                              <1> scanForWildcards:
   657                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   658                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   659 0000346F 50                  <1>     push rax
   660 00003470 56                  <1>     push rsi
   661                              <1> .lp:
   662 00003471 AC                  <1>     lodsb
   663 00003472 3C3F                <1>     cmp al, "?"
   664 00003474 740A                <1>     je .exit
   665 00003476 3C2A                <1>     cmp al, "*"
   666 00003478 7406                <1>     je .exit
   667 0000347A 84C0                <1>     test al, al
   668 0000347C 75F3                <1>     jnz .lp
   669 0000347E FEC0                <1>     inc al  ;This will clear the ZF
   670                              <1> .exit:
   671 00003480 5E                  <1>     pop rsi
   672 00003481 58                  <1>     pop rax
   673                              <1>     return
    13                              <2> %%_ret:
    14 00003482 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> printDecimalWord:
   676                              <1> ;Takes qword in rax and print it's decimal representation
   677                              <1> ;Takes the qword in eax and prints its decimal representation
   678 00003483 31C9                <1>     xor ecx, ecx
   679 00003485 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   680 00003487 85C0                <1>     test eax, eax
   681 00003489 750C                <1>     jnz .notZero
   682 0000348B B930000000          <1>     mov ecx, "0"
   683 00003490 BD01000000          <1>     mov ebp, 1  ;Print one digit
   684 00003495 EB3E                <1>     jmp short .dpfb2
   685                              <1> .notZero:
   686 00003497 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   687 00003499 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   688                              <1> .dpfb0:
   689 0000349E FFC5                <1>     inc ebp
   690 000034A0 81FD08000000        <1>     cmp ebp, 8
   691 000034A6 7206                <1>     jb .dpfb00
   692 000034A8 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   693 000034AC EB04                <1>     jmp short .dpfb01
   694                              <1> .dpfb00:
   695 000034AE 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   696                              <1> .dpfb01:
   697 000034B2 31D2                <1>     xor edx, edx
   698 000034B4 48F7F6              <1>     div rsi
   699 000034B7 80C230              <1>     add dl, '0'
   700 000034BA 80FA39              <1>     cmp dl, '9'
   701 000034BD 7603                <1>     jbe .dpfb1
   702 000034BF 80C207              <1>     add dl, 'A'-'0'-10
   703                              <1> .dpfb1:
   704 000034C2 81FD08000000        <1>     cmp ebp, 8
   705 000034C8 7204                <1>     jb .dpfb10
   706 000034CA 88D3                <1>     mov bl, dl ;Add the bottom bits
   707 000034CC EB02                <1>     jmp short .dpfb11
   708                              <1> .dpfb10:
   709 000034CE 88D1                <1>     mov cl, dl    ;Save remainder byte
   710                              <1> .dpfb11:
   711 000034D0 4885C0              <1>     test rax, rax
   712 000034D3 75C9                <1>     jnz .dpfb0
   713                              <1> .dpfb2:
   714 000034D5 81FD08000000        <1>     cmp ebp, 8
   715 000034DB 7208                <1>     jb .dpfb20
   716 000034DD 88DA                <1>     mov dl, bl
   717 000034DF 48C1EB08            <1>     shr rbx, 8
   718 000034E3 EB06                <1>     jmp short .dpfb21
   719                              <1> .dpfb20:
   720 000034E5 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   721 000034E7 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   722                              <1> .dpfb21:
   723 000034EB B402                <1>     mov ah, 02h
   724 000034ED CD21                <1>     int 21h
   725 000034EF FFCD                <1>     dec ebp
   726 000034F1 75E2                <1>     jnz .dpfb2
   727                              <1>     return
    13                              <2> %%_ret:
    14 000034F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   728                              <1> 
   729                              <1> getDecimalWord:
   730                              <1> ;Works on MAX A dword in eax
   731                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   732 000034F4 31C9                <1>     xor ecx, ecx
   733 000034F6 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   734 000034F8 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   735                              <1> .dpfb0:
   736 000034FD FFC5                <1>     inc ebp
   737 000034FF 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   738 00003503 31D2                <1>     xor edx, edx
   739 00003505 48F7F3              <1>     div rbx
   740 00003508 80C230              <1>     add dl, '0'
   741 0000350B 80FA39              <1>     cmp dl, '9'
   742 0000350E 7603                <1>     jbe .dpfb1
   743 00003510 80C207              <1>     add dl, 'A'-'0'-10
   744                              <1> .dpfb1:
   745 00003513 88D1                <1>     mov cl, dl    ;Save remainder byte
   746 00003515 4885C0              <1>     test rax, rax
   747 00003518 75E3                <1>     jnz .dpfb0
   748                              <1>     return
    13                              <2> %%_ret:
    14 0000351A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   749                              <1> 
   750                              <1> freezePC:
   751 0000351B 488D1515D9FFFF      <1>     lea rdx, memBad1
   752 00003522 B409                <1>     mov ah, 09h
   753 00003524 CD21                <1>     int 21h
   754                              <1> .altEP:
   755 00003526 488D1533D9FFFF      <1>     lea rdx, memBad3
   756 0000352D B409                <1>     mov ah, 09h
   757 0000352F CD21                <1>     int 21h
   758                              <1> .lp:
   759 00003531 F390                <1>     pause
   760 00003533 F4                  <1>     hlt
   761 00003534 EBFB                <1>     jmp short .lp
   762                              <1> 
   763                              <1> setDTA:
   764 00003536 50                  <1>     push rax
   765 00003537 52                  <1>     push rdx
   766 00003538 488D1528CCFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   767 0000353F B8001A0000          <1>     mov eax, 1A00h
   768 00003544 CD21                <1>     int 21h
   769 00003546 5A                  <1>     pop rdx
   770 00003547 58                  <1>     pop rax
   771                              <1>     return
    13                              <2> %%_ret:
    14 00003548 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   772                              <1> 
   773                              <1> getDTA:
   774 00003549 488D1517CCFFFF      <1>     lea rdx, cmdFFBlock
   775                              <1>     return
    13                              <2> %%_ret:
    14 00003550 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> 
   777                              <1> ;-------------------------------
   778                              <1> ; Environment utility functions
   779                              <1> ;-------------------------------
   780                              <1> 
   781                              <1> cmpEnvVar:
   782                              <1> ;Checks that we have found the environment variable we are looking for.
   783                              <1> ;Input: rsi -> Environment var to verify the name of
   784                              <1> ;       rdi -> Environment var name to compare against
   785                              <1> ;       ecx = Length of the environment variable
   786                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   787 00003551 56                  <1>     push rsi
   788 00003552 57                  <1>     push rdi
   789 00003553 51                  <1>     push rcx
   790 00003554 F3A6                <1>     rep cmpsb
   791 00003556 59                  <1>     pop rcx
   792 00003557 5F                  <1>     pop rdi
   793 00003558 5E                  <1>     pop rsi
   794                              <1>     return
    13                              <2> %%_ret:
    14 00003559 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   795                              <1> 
   796                              <1> checkEnvGoodAndGet:
   797                              <1> ;Gets the env ptr and checks that it is double null terminated.
   798                              <1> ;Output:
   799                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   800                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   801                              <1> ;           rsi -> Environment pointer
   802 0000355A 50                  <1>     push rax
   803 0000355B 51                  <1>     push rcx
   804 0000355C 57                  <1>     push rdi
   805 0000355D 4150                <1>     push r8
   806 0000355F 4C8B05A9CAFFFF      <1>     mov r8, qword [pspPtr]
   807 00003566 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   808 0000356A 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   809 0000356D 741A                <1>     jz .badExit
   810 0000356F 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   811 00003572 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   812                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   813 00003575 31C0                <1>     xor eax, eax
   814                              <1> .pathNulScan:
   815 00003577 F2AE                <1>     repne scasb
   816 00003579 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   817 0000357B 740C                <1>     jz .badExit
   818 0000357D 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   819 0000357F 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   820 00003581 31C0                <1>     xor eax, eax
   821 00003583 FFC0                <1>     inc eax ;Clear the ZF
   822 00003585 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   823                              <1> .badExit:
   824 00003589 4158                <1>     pop r8
   825 0000358B 5F                  <1>     pop rdi
   826 0000358C 59                  <1>     pop rcx
   827 0000358D 58                  <1>     pop rax
   828                              <1>     return
    13                              <2> %%_ret:
    14 0000358E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   829                              <1> 
   830                              <1> allocEnv:
   831                              <1> ;Allocates space in the environment. Assumes environment is good.
   832                              <1> ;Input: ecx = Number of bytes to allocate
   833                              <1> ;Output: CF=NC: rsi -> Start of alloc region
   834                              <1> ;        CF=CY: Not enough space to alloc
   835                              <1> 
   836                              <1> freeEnv:
   837                              <1> ;Frees space in the environment by zeroing all allocated chars.
   838                              <1> ;Input: rdi -> Byte to start zeroing from.
   839                              <1> ;Output: All bytes from rdi to first null zero. rdi trashed.
   840 0000358F 50                  <1>     push rax
   841 00003590 31C0                <1>     xor eax, eax
   842                              <1> .lp:
   843 00003592 3807                <1>     cmp byte [rdi], al
   844 00003594 7403                <1>     je .exit
   845 00003596 AA                  <1>     stosb
   846 00003597 EBF9                <1>     jmp short .lp
   847                              <1> .exit:
   848 00003599 58                  <1>     pop rax
   849                              <1>     return
    13                              <2> %%_ret:
    14 0000359A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   850                              <1> 
   851                              <1> findEnvSpace:
   852                              <1> ;Searches the environment for space
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000359B 53                  <1>     push rbx
    25 0000359C 51                  <1>     push rcx
    26 0000359D 52                  <1>     push rdx
    27 0000359E 57                  <1>     push rdi
    28 0000359F 56                  <1>     push rsi
    29 000035A0 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 000035A1 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 000035A4 488D1510D3FFFF      <1>     lea rdx, crlf
    33 000035AB E80FFAFFFF          <1>     call printString
    34                              <1> 
    35 000035B0 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 000035B6 B90C000000          <1>     mov ecx, 0Ch
    37 000035BB 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 000035BD 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 000035C0 480FB7FF            <1>     movzx rdi, di
    40 000035C4 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 000035C7 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 000035CB 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 000035CE 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 000035D1 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 000035D8 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 000035DC E8DEF9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 000035E1 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 000035E8 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 000035EF F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 000035F2 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 000035F6 E8C4F9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 000035FB F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 000035FE 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003604 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 0000360B E8AFF9FFFF          <1>     call printString
    59 00003610 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003612 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003615 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003617 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003619 E89AF9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 0000361E 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003625 E895F9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 0000362A F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 0000362D 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 0000362F 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003636 E884F9FFFF          <1>     call printString
    76 0000363B 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003642 E878F9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003647 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 0000364A 7418                <1>     jz .userFail
    81 0000364C 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003653 E867F9FFFF          <1>     call printString
    83 00003658 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 0000365F E85BF9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003664 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003667 7418                <1>     jz .userMsgEnd
    88 00003669 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003670 E84AF9FFFF          <1>     call printString
    90 00003675 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 0000367C E83EF9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003681 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003688 E832F9FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 0000368D 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 0000368F 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003696 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003698 CD21                <1>     int 21h ;Get char in al
   100 0000369A 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 0000369C 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 0000369E 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 000036A0 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 000036A1 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 000036A3 FFC1                <1>     inc ecx
   107 000036A5 81F904000000        <1>     cmp ecx, 4
   108 000036AB 75F3                <1>     jne .uip1
   109 000036AD E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 000036B2 E801F9FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 000036B7 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 000036B9 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 000036BB 7427                <1>     je .cehExit
   116 000036BD 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 000036BF 740F                <1>     je .viIgnore
   118 000036C1 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 000036C3 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 000036C5 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 000036C8 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 000036CE EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 000036D0 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 000036D3 0F8440FFFFFF        <1>     jz .userInput
   127 000036D9 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 000036DB F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 000036DE 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 000036E4 5E                  <1>     pop rsi
   133 000036E5 5F                  <1>     pop rdi
   134 000036E6 5A                  <1>     pop rdx
   135 000036E7 59                  <1>     pop rcx
   136 000036E8 5B                  <1>     pop rbx
   137 000036E9 48CF                <1>     iretq
   138                              <1> .charError:
   139 000036EB B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 000036F0 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 000036F7 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 000036F8 88C2                <1>     mov dl, al  ;Move char into dl
   144 000036FA B402                <1>     mov ah, 02h
   145 000036FC CD21                <1>     int 21h ;Print char
   146 000036FE E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003700 E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003705 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 0000370E 746563742024202020  <1>
   151 00003717 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003720 6E6974202420202020  <1>
   152 00003729 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003732 202420202020202020  <1>
   153 0000373B 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003744 6F6D6D616E64202420  <1>
   154 0000374D 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003756 202020202020202020  <1>
   155 0000375F 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003768 737420242020202020  <1>
   156 00003771 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 0000377A 202020202020202020  <1>
   157 00003783 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 0000378C 656469612024202020  <1>
   158 00003795 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 0000379E 7420466F756E642024  <1>
   159 000037A7 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 000037B0 706572202420202020  <1>
   160 000037B9 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 000037C2 6C7420242020202020  <1>
   161 000037CB 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 000037D4 742024202020202020  <1>
   162 000037DD 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 000037E6 61696C757265202420  <1>
   163                              <1> 
   164 000037EF 64726976652024      <1> .drive      db "drive $"
   165 000037F6 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 000037FF 64696E672024        <1>
   166 00003805 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 0000380E 74696E672024        <1>
   167 00003814 41626F727424        <1> .abortmsg   db "Abort$" 
   168 0000381A 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003821 526574727924        <1> .retrymsg   db "Retry$"
   170 00003827 4661696C24          <1> .failmsg    db "Fail$"
   171 0000382C 2C2024              <1> .betweenMsg db ", $"
   172 0000382F 3F2024              <1> .endMsg     db "? $"
   173 00003832 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003836 F605F0C7FFFFFF      <1>     test byte [permaSwitch], -1
   177 0000383D 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 0000383F 50                  <1>     push rax
   180 00003840 53                  <1>     push rbx
   181 00003841 488B05CFC7FFFF      <1>     mov rax, qword [realParent]
   182 00003848 488B1DC0C7FFFF      <1>     mov rbx, qword [pspPtr]
   183 0000384F 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003853 5B                  <1>     pop rbx
   185 00003854 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003855 F9                  <1>     stc     ;Set CF to kill the task
   188 00003856 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(9B350000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(36380000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(080F0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(DF0E0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(32180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(D70E0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(BB080000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(56220000)        <1>     call time
    90 0000011A E8(8D210000)        <1>     call date
    91 0000011F 488D15(BB080000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:
    96 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    97 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    98 0000013B 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    99 00000142 F2AE                <1>     repne scasb
   100 00000144 67E313              <1>     jecxz .printInit
   101 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   102 0000014A E8(B9320000)        <1>     call ucChar
   103 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   104 00000151 7507                <1>     jne .printInit
   105 00000153 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   106                              <1> .printInit:
   107 0000015A 488D1D(59380000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   108                              <1> ;Finish by printing INIT string.
   109 00000161 53                  <1>     push rbx
   110 00000162 488D153A000000      <1>     lea rdx, initString
   111 00000169 B409                <1>     mov ah, 09h
   112 0000016B CD21                <1>     int 21h ;Print init string
   113 0000016D E8(0D2B0000)        <1>     call version.printVersionNumber
   114 00000172 488D1560000000      <1>     lea rdx, initString2
   115 00000179 B409                <1>     mov ah, 09h
   116 0000017B CD21                <1>     int 21h ;Print init string
   117 0000017D 5B                  <1>     pop rbx
   118                              <1>     ;Now we add the stack to the alloc and paragraph align
   119 0000017E 4881C340060000      <1>     add rbx, stackSize
   120 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00000190 48C1E304            <1>     shl rbx, 4
   123 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   124 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   125 0000019E E9(F50E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   126                              <1> ;Loader Data here
   127                              <1> initString: 
   128 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   128 000001AC 66696320436F6D7075- <1>
   128 000001B5 746572205265736561- <1>
   128 000001BE 726368285229205343- <1>
   128 000001C7 502F444F5328522920- <1>
   128 000001D0 56657273696F6E2024  <1>
   129                              <1> initString2:
   130 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   130 000001E2 202020284329436F70- <1>
   130 000001EB 797269676874205363- <1>
   130 000001F4 69656E746966696320- <1>
   130 000001FD 436F6D707574657220- <1>
   130 00000206 526573656172636820- <1>
   130 0000020F 323032342E0D0A24    <1>
   131 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   131 00000220 20444F532076657273- <1>
   131 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

