     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53 0000011D 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000126 000000000000000000- <1>
    53 0000012F 000000000000000000- <1>
    53 00000138 000000000000000000- <1>
    53 00000141 000000000000000000- <1>
    53 0000014A 000000000000000000- <1>
    53 00000153 000000000000000000- <1>
    53 0000015C 000000000000000000- <1>
    53 00000165 000000000000000000- <1>
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 000000000000000000- <1>
    53 00000192 000000000000000000- <1>
    53 0000019B 0000                <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 000000000000000000- <1>
    56 0000026E 000000000000000000- <1>
    56 00000277 000000000000000000- <1>
    56 00000280 000000000000000000- <1>
    56 00000289 000000000000000000- <1>
    56 00000292 000000000000000000- <1>
    56 0000029B 0000                <1>
    57 0000029D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002A6 000000000000000000- <1>
    57 000002AF 000000000000000000- <1>
    57 000002B8 000000000000000000- <1>
    57 000002C1 000000000000000000- <1>
    57 000002CA 000000000000000000- <1>
    57 000002D3 000000000000000000- <1>
    57 000002DC 000000000000000000- <1>
    57 000002E5 00000000000000      <1>
    58                              <1> 
    59 000002EC 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F5 0000                <1>
    60 000002F7 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000300 00000000            <1>
    61 00000304 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 0000030D 0000000000          <1>
    62                              <1> 
    63 00000312 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031B 000000000000000000- <1>
    63 00000324 000000000000000000- <1>
    63 0000032D 000000000000000000- <1>
    63 00000336 000000000000000000- <1>
    63 0000033F 000000000000000000- <1>
    63 00000348 000000000000000000- <1>
    63 00000351 000000000000000000- <1>
    63 0000035A 00000000000000      <1>
    64 00000361 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036A 000000000000000000- <1>
    64 00000373 000000000000000000- <1>
    64 0000037C 000000000000000000- <1>
    64 00000385 000000000000000000- <1>
    64 0000038E 000000000000000000- <1>
    64 00000397 000000000000000000- <1>
    64 000003A0 000000000000000000- <1>
    64 000003A9 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B0 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003B9 000000000000000000- <1>
    67 000003C2 000000000000000000- <1>
    67 000003CB 000000000000000000- <1>
    67 000003D4 000000000000000000- <1>
    67 000003DD 000000000000000000- <1>
    67 000003E6 000000000000000000- <1>
    67 000003EF 000000000000000000- <1>
    67 000003F8 00000000000000      <1>
    68 000003FF 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 00000408 000000000000000000- <1>
    68 00000411 000000000000000000- <1>
    68 0000041A 000000000000000000- <1>
    68 00000423 000000000000000000- <1>
    68 0000042C 000000000000000000- <1>
    68 00000435 000000000000000000- <1>
    68 0000043E 000000000000000000- <1>
    68 00000447 00000000000000      <1>
    69                              <1> 
    70 0000044E 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 00000456 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 0000045E 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000467 000000000000000000- <1>
    73 00000470 000000000000000000- <1>
    73 00000479 000000000000000000- <1>
    73 00000482 000000000000000000- <1>
    73 0000048B 000000000000000000- <1>
    73 00000494 000000000000000000- <1>
    73 0000049D 000000000000000000- <1>
    73 000004A6 000000000000000000- <1>
    73 000004AF 000000000000000000- <1>
    73 000004B8 000000000000000000- <1>
    73 000004C1 000000000000000000- <1>
    73 000004CA 000000000000000000- <1>
    73 000004D3 000000000000000000- <1>
    73 000004DC 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004DE 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000004DF 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000004E0 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000004E1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000004E2 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000056B 000000000000000000- <1>
    85 00000574 000000000000000000- <1>
    85 0000057D 000000000000000000- <1>
    85 00000586 000000000000000000- <1>
    85 0000058F 000000000000000000- <1>
    85 00000598 000000000000000000- <1>
    85 000005A1 000000000000000000- <1>
    85 000005AA 000000000000000000- <1>
    85 000005B3 000000000000000000- <1>
    85 000005BC 000000000000000000- <1>
    85 000005C5 000000000000000000- <1>
    85 000005CE 000000000000000000- <1>
    85 000005D7 000000000000000000- <1>
    85 000005E0 0000                <1>
    86 000005E2 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000005EA 2E                  <1> dirSPExt    db "."
    88 000005EB 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91                              <1> volFcb:
    92                              <1>     istruc exFcb
    93 000005EE FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    94 000005EF 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    95 000005F5 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    96 000005F6 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    97 000005FE 3F3F3F              <1>     at exFcb.fileext,   db "???"
    98 00000601 00000000            <1>     at exFcb.curBlock,  dd 0
    99 00000605 00<rep 15h>         <1>     iend 
   100                              <1> 
   101                              <1> ;Time/Date vars
   102 0000061A 00                  <1> td1 db 0    ;Minutes/Year
   103 0000061B 00                  <1> td2 db 0    ;Hours/Zero
   104 0000061C 00                  <1> td3 db 0    ;Hundredths/Day
   105 0000061D 00                  <1> td4 db 0    ;Seconds/Month
   106                              <1> 
   107                              <1> ;Rename/Copy Buffers
   108 0000061E 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   108 00000627 000000000000000000- <1>
   108 00000630 000000000000000000- <1>
   108 00000639 000000000000000000- <1>
   108 00000642 000000000000000000- <1>
   108 0000064B 000000000000000000- <1>
   108 00000654 000000000000000000- <1>
   108 0000065D 000000000000000000- <1>
   108 00000666 000000000000000000- <1>
   108 0000066F 000000000000000000- <1>
   108 00000678 000000000000000000- <1>
   108 00000681 000000000000000000- <1>
   108 0000068A 000000000000000000- <1>
   108 00000693 000000000000000000- <1>
   108 0000069C 0000                <1>
   109 0000069E 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   109 000006A7 000000000000000000- <1>
   109 000006B0 000000000000000000- <1>
   109 000006B9 000000000000000000- <1>
   109 000006C2 000000000000000000- <1>
   109 000006CB 000000000000000000- <1>
   109 000006D4 000000000000000000- <1>
   109 000006DD 000000000000000000- <1>
   109 000006E6 000000000000000000- <1>
   109 000006EF 000000000000000000- <1>
   109 000006F8 000000000000000000- <1>
   109 00000701 000000000000000000- <1>
   109 0000070A 000000000000000000- <1>
   109 00000713 000000000000000000- <1>
   109 0000071C 0000                <1>
   110                              <1> ;Copy Handles
   111 0000071E FFFF                <1> sourceHdl   dw -1
   112 00000720 FFFF                <1> destHdl     dw -1
   113 00000722 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   114                              <1> 
   115 00000724 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   115 0000072D 000000000000000000- <1>
   115 00000736 000000000000000000- <1>
   115 0000073F 000000000000000000- <1>
   115 00000748 000000000000000000- <1>
   115 00000751 000000000000000000- <1>
   115 0000075A 000000000000000000- <1>
   115 00000763 000000000000000000- <1>
   115 0000076C 000000000000000000- <1>
   115 00000775 000000000000000000- <1>
   115 0000077E 000000000000000000- <1>
   115 00000787 000000000000000000- <1>
   115 00000790 000000000000000000- <1>
   115 00000799 000000000000000000- <1>
   115 000007A2 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 000007A4 03444952            <1>     db 3, "DIR"
     8 000007A8 AF17                <1>     dw dir - startLbl
     9                              <1> 
    10 000007AA 024344              <1>     db 2, "CD"
    11 000007AD 591B                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007AF 054348444952        <1>     db 5, "CHDIR"
    14 000007B5 591B                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007B7 024D44              <1>     db 2, "MD"
    17 000007BA FB1B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007BC 054D4B444952        <1>     db 5, "MKDIR"
    20 000007C2 FB1B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007C4 025244              <1>     db 2, "RD"
    23 000007C7 471C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007C9 05524D444952        <1>     db 5, "RMDIR"
    26 000007CF 471C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007D1 0344454C            <1>     db 3, "DEL"
    29 000007D5 711E                <1>     dw erase - startLbl
    30                              <1> 
    31 000007D7 054552415345        <1>     db 5, "ERASE"
    32 000007DD 711E                <1>     dw erase - startLbl
    33                              <1> 
    34 000007DF 0444415445          <1>     db 4, "DATE"
    35 000007E4 9A1E                <1>     dw date - startLbl
    36                              <1> 
    37 000007E6 0454494D45          <1>     db 4, "TIME"
    38 000007EB 631F                <1>     dw time - startLbl
    39                              <1> 
    40 000007ED 04434F5059          <1>     db 4, "COPY"
    41 000007F2 931C                <1>     dw copy - startLbl
    42                              <1> 
    43 000007F4 0443545459          <1>     db 4, "CTTY"
    44 000007F9 FE1F                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007FB 03434C53            <1>     db 3, "CLS"
    47 000007FF 9920                <1>     dw cls - startLbl
    48                              <1> 
    49 00000801 05425245414B        <1>     db 5, "BREAK"
    50 00000807 0B21                <1>     dw break - startLbl
    51                              <1> 
    52 00000809 06564552494659      <1>     db 6, "VERIFY"
    53 00000810 8C21                <1>     dw verify - startLbl
    54                              <1> 
    55 00000812 0652454E414D45      <1>     db 6, "RENAME"
    56 00000819 0922                <1>     dw rename - startLbl
    57                              <1> 
    58 0000081B 044D4F5645          <1>     db 4, "MOVE"
    59 00000820 0922                <1>     dw rename - startLbl
    60                              <1>     
    61 00000822 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000082B BB24                <1>     dw truename - startLbl
    63                              <1> 
    64 0000082D 03564552            <1>     db 3, "VER"
    65 00000831 D026                <1>     dw version - startLbl
    66                              <1> 
    67 00000833 03564F4C            <1>     db 3, "VOL"
    68 00000837 0326                <1>     dw volume - startLbl
    69                              <1> 
    70 00000839 034D454D            <1>     db 3, "MEM"
    71 0000083D 1427                <1>     dw memory - startLbl
    72                              <1> 
    73 0000083F 0445584954          <1>     db 4, "EXIT"
    74 00000844 F628                <1>     dw exit - startLbl
    75                              <1> 
    76 00000846 0454595045          <1>     db 4, "TYPE"
    77 0000084B 5E28                <1>     dw type - startLbl
    78                              <1> 
    79 0000084D 054C4142454C        <1>     db 5, "LABEL"
    80 00000853 2D25                <1>     dw label - startLbl
    81                              <1> 
    82                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    83 00000855 054D4B4C424C        <1>     db 5, "MKLBL"
    84 0000085B 5725                <1>     dw mklbl - startLbl
    85                              <1> 
    86 0000085D 05524D4C424C        <1>     db 5, "RMLBL"
    87 00000863 9225                <1>     dw rmlbl - startLbl
    88                              <1> 
    89 00000865 05524E4C424C        <1>     db 5, "RNLBL"
    90 0000086B CD25                <1>     dw rnlbl - startLbl
    91                              <1> 
    92 0000086D 05544F554348        <1>     db 5, "TOUCH"
    93 00000873 D622                <1>     dw touch - startLbl
    94                              <1> 
    95 00000875 044A4F494E          <1>     db 4, "JOIN"
    96 0000087A 1123                <1>     dw join - startLbl
    97                              <1> 
    98 0000087C 055355425354        <1>     db 5, "SUBST"
    99 00000882 D423                <1>     dw subst - startLbl
   100                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   101 00000884 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000885 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000888 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000088D 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000896 696C65206D69737369- <1>
     4 0000089F 6E670D0A24          <1>
     5 000008A4 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000008AD 6469736B2077697468- <1>
     5 000008B6 206261746368206669- <1>
     5 000008BF 6C65                <1>
     6 000008C1 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008CA 737320616E79206B65- <1>
     6 000008D3 79207768656E207265- <1>
     6 000008DC 6164790D0A24        <1>
     7 000008E2 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000008EB 6E64206F722066696C- <1>
     7 000008F4 65206E616D650D0A24  <1>
     8 000008FD 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 00000906 2066696C65206E616D- <1>
     8 0000090F 65206F7220          <1>
     9 00000914 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 0000091D 666F756E640D0A24    <1>
    10 00000925 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 0000092E 656E74206469736B20- <1>
    10 00000937 73706163650D0A24    <1>
    11 0000093F 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000948 7669726F6E6D656E74- <1>
    11 00000951 2073706163650D0A24  <1>
    12 0000095A 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000963 74696F6E206572726F- <1>
    12 0000096C 720D0A24            <1>
    13 00000970 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000979 6F7420626520636F70- <1>
    13 00000982 696564206F6E746F20- <1>
    13 0000098B 697473656C660D0A24  <1>
    14 00000994 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 0000099D 662064657374696E61- <1>
    14 000009A6 74696F6E206C6F7374- <1>
    14 000009AF 206265666F72652063- <1>
    14 000009B8 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000009BE 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000009C7 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 000009D0 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 000009D9 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 000009DA 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 000009E3 65650D0A24          <1>
    21 000009E8 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 000009F1 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009FA 726976652073706563- <1>
    23 00000A03 696669636174696F6E- <1>
    23 00000A0C 0D0A24              <1>
    24 00000A0F 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000A18 6B6579207768656E20- <1>
    24 00000A21 7265616479202E202E- <1>
    24 00000A2A 202E2024            <1>
    25 00000A2E 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000A37 6172616D657465720D- <1>
    25 00000A40 0A24                <1>
    26                              <1> 
    27 00000A42 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A4B 576564546875467269- <1>
    27 00000A54 536174              <1>
    28 00000A57 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A60 206461746524        <1>
    29 00000A66 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A6F 6174652069732024    <1>
    30 00000A77 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A80 657720646174652024  <1>
    31 00000A89 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A92 293A2024            <1>
    32 00000A96 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A9F 293A2024            <1>
    33 00000AA3 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000AAC 293A2024            <1>
    34 00000AB0 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000AB9 2074696D6524        <1>
    35 00000ABF 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000AC8 696D652069732024    <1>
    36 00000AD0 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000AD9 65772074696D653A20- <1>
    36 00000AE2 24                  <1>
    37                              <1> 
    38 00000AE3 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000AEC 7572652028592F4E29- <1>
    38 00000AF5 3F2024              <1>
    39                              <1> 
    40 00000AF8 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000B01 56657273696F6E2024  <1>
    41                              <1> 
    42 00000B0A 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000B13 6E2064726976652024  <1>
    43 00000B1C 2069732024          <1> volOk   db " is $"
    44 00000B21 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000B2A 6162656C24          <1>
    45                              <1> 
    46 00000B2F 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B38 69726563746F72790D- <1>
    46 00000B41 0A24                <1>
    47 00000B43 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B4C 206372656174652064- <1>
    47 00000B55 69726563746F72790D- <1>
    47 00000B5E 0A24                <1>
    48 00000B60 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B69 6174682C206E6F7420- <1>
    48 00000B72 6469726563746F7279- <1>
    48 00000B7B 2C0D0A              <1>
    49 00000B7E 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B87 6F7279206E6F742065- <1>
    49 00000B90 6D7074790D0A24      <1>
    50 00000B97 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000BA0 79206F66202024      <1>
    51 00000BA7 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000BB0 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000BB9 7269766520696E2073- <1>
    52 00000BC2 656172636820706174- <1>
    52 00000BCB 680D0A24            <1>
    53 00000BCF 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000BD8 65766963650D0A24    <1>
    54 00000BE0 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000BE9 20666F756E640D0A24  <1>
    55 00000BF2 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000BFB 726F720D0A24        <1>
    56 00000C01 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000C0A 6F74206265206E6573- <1>
    56 00000C13 7465640D0A24        <1>
    57 00000C19 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000C22 6174652066696C6520- <1>
    57 00000C2B 6572726F7220647572- <1>
    57 00000C34 696E6720706970650D- <1>
    57 00000C3D 0A24                <1>
    58 00000C3F 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000C48 2062696E6172792072- <1>
    58 00000C51 656164732066726F6D- <1>
    58 00000C5A 206120646576696365- <1>
    58 00000C63 0D0A24              <1>
    59 00000C66 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C6C 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C71 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C7A 24                  <1>
    62 00000C7B 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C84 2024                <1>
    63 00000C86 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C8F 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C98 617468206F72206669- <1>
    64 00000CA1 6C65206E616D650D0A- <1>
    64 00000CAA 24                  <1>
    65 00000CAB 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000CB4 756D626572206F6620- <1>
    65 00000CBD 706172616D65746572- <1>
    65 00000CC6 730D0A24            <1>
    66 00000CCA 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000CD3 74696E6720746F2064- <1>
    66 00000CDC 6576696365          <1>
    67 00000CE1 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000CE5 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000CEE 20202020202020546F- <1>
    69 00000CF7 74616C207379737465- <1>
    69 00000D00 6D206D656D6F72793A- <1>
    69 00000D09 2024                <1>
    70 00000D0B 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000D14 20202020202020204D- <1>
    70 00000D1D 656D6F727920757365- <1>
    70 00000D26 6420627920444F533A- <1>
    70 00000D2F 2024                <1>
    71 00000D31 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000D3A 656D6F727920757365- <1>
    71 00000D43 64206279206170706C- <1>
    71 00000D4C 69636174696F6E733A- <1>
    71 00000D55 2024                <1>
    72 00000D57 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000D60 656D6F727920726573- <1>
    72 00000D69 657276656420627920- <1>
    72 00000D72 68617264776172653A- <1>
    72 00000D7B 2024                <1>
    73 00000D7D 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D86 202020202020202020- <1>
    73 00000D8F 2020202020204D656D- <1>
    73 00000D98 6F727920667265653A- <1>
    73 00000DA1 2024                <1>
    74 00000DA3 20627974657324      <1> memByte db " bytes$"
    75 00000DAA 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000DB3 6F7420417373657274- <1>
    75 00000DBC 61696E20444F532045- <1>
    75 00000DC5 6E74727920506F696E- <1>
    75 00000DCE 7424                <1>
    76 00000DD0 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000DD9 416C6C6F636174696F- <1>
    76 00000DE2 6E204572726F7224    <1>
    77 00000DEA 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000DF3 4572726F7224        <1>
    78 00000DF9 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000E02 68616C74656424      <1>
    79                              <1> 
    80 00000E09 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000E12 206372656174652066- <1>
    80 00000E1B 696C650D0A24        <1>
    81 00000E21 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000E2A 206372656174652070- <1>
    81 00000E33 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000E38 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000E41 6F6E206572726F720D- <1>
    83 00000E4A 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000E4B 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000E4F 2020202024          <1> fourSpc  db "    $"
    88 00000E54 20202024            <1> threeSpc db "   $"
    89 00000E58 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000E5B 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000E64 696679204F4E206F72- <1>
    91 00000E6D 204F46460D0A24      <1>
    92 00000E74 504154483D          <1> pathEVar db "PATH="
    93 00000E79 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E80 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E84 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E87 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E8B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E8E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E90 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E93 CD21                <1>     int 21h
    11 00000E95 EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E97 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E9C CD21                <1>     int 21h
    15 00000E9E 66890568F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000EA5 488D157E210000      <1>     lea rdx, critErrorHandler
    18 00000EAC 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000EB0 B824250000          <1>     mov eax, 2524h
    20 00000EB5 CD21                <1>     int 21h
    21 00000EB7 488D15FC230000      <1>     lea rdx, int23h
    22 00000EBE 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000EC2 B823250000          <1>     mov eax, 2523h
    24 00000EC7 CD21                <1>     int 21h
    25 00000EC9 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000ED0 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000ED4 B822250000          <1>     mov eax, 2522h
    28 00000ED9 CD21                <1>     int 21h
    29 00000EDB F605CDF1FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EE2 7574                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EE4 E8BA040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EE9 0FB70D37F1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EF0 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EF5 B43E                <1>     mov ah, 3Eh ;File close
    37 00000EF7 CD21                <1>     int 21h
    38 00000EF9 FFC3                <1>     inc ebx ;Goto next file
    39 00000EFB 39CB                <1>     cmp ebx, ecx
    40 00000EFD 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000EFF 488B25FFF0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000F06 FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000F07 C6058FF2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000F0E E8A71B0000          <1>     call printCRLF
    48                              <1> .inputMain2:
    49 00000F13 E81E1F0000          <1>     call clearCommandLineState
    50 00000F18 E8E71E0000          <1>     call printPrompt
    51                              <1> 
    52 00000F1D 488D1579F2FFFF      <1>     lea rdx, inBuffer
    53 00000F24 B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    54 00000F29 CD21                <1>     int 21h
    55 00000F2B E88A1B0000          <1>     call printCRLF  ;Note we have accepted input
    56                              <1> ;First check we had something typed in of length greater than 0
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000F30 803D67F2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    59 00000F37 74DA                <1>     je .inputMain2
    60                              <1>     ;Copy over the input text
    61 00000F39 488D355DF2FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    62 00000F40 488D3DD6F2FFFF      <1>     lea rdi, cmdBuffer
    63 00000F47 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    64 00000F4C F3A4                <1>     rep movsb
    65                              <1> .pipeLoop:
    66 00000F4E E838000000          <1>     call parseInput
    67 00000F53 E8CB010000          <1>     call doCommandLine
    68                              <1> .pipeProceed:
    69 00000F58 E846040000          <1>     call cleanUpRedir
    70 00000F5D 488B0543F1FFFF      <1>     mov rax, qword [cmdEndPtr]
    71 00000F64 48890534F1FFFF      <1>     mov qword [cmdStartPtr], rax
    72 00000F6B F6053DF1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    73 00000F72 749A                <1>     jz .inputMain
    74 00000F74 E8A21E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    75 00000F79 EBD3                <1>     jmp short .pipeLoop
    76                              <1> .dfltErrExit:
    77 00000F7B 488D1560F9FFFF      <1>     lea rdx, badCmd
    78 00000F82 B409                <1>     mov ah, 09h
    79 00000F84 CD21                <1>     int 21h
    80 00000F86 E983FFFFFF          <1>     jmp .inputMain
    81                              <1> 
    82                              <1> parseInput:
    83                              <1> ;EndOff is set up before entering this part
    84                              <1> ;Copies a nicely formatted version of the input command line
    85                              <1> ; without any redirections to psp.dta
    86 00000F8B 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    87 00000F92 488B3506F1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    88 00000F99 4885F6              <1>     test rsi, rsi
    89 00000F9C 7507                <1>     jnz .notNewCmd
    90 00000F9E 488D3579F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    91                              <1> .notNewCmd:
    92 00000FA5 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    93 00000FA8 E8361E0000          <1>     call skipSeparators ;Skip any preceeding spaces
    94 00000FAD 66AD                <1>     lodsw   ;Get the first two chars into ax
    95 00000FAF 668905FEF0FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    96 00000FB6 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    97 00000FBD 56                  <1>     push rsi
    98 00000FBE 57                  <1>     push rdi
    99 00000FBF 488D3DD7F2FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   100 00000FC6 57                  <1>     push rdi
   101 00000FC7 E804070000          <1>     call copyCommandTailItemProgram
   102 00000FCC 5F                  <1>     pop rdi
   103 00000FCD 9C                  <1>     pushfq  ;Save the CF state
   104 00000FCE E8AC1D0000          <1>     call strlen
   105 00000FD3 FFC9                <1>     dec ecx ;Drop the terminating char from the count
   106 00000FD5 58                  <1>     pop rax ;Get the CF state in al
   107 00000FD6 5F                  <1>     pop rdi
   108 00000FD7 5E                  <1>     pop rsi
   109 00000FD8 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   110 00000FDA A801                <1>     test al, 1  ;Was CF set?
   111 00000FDC 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   112                              <1> .cmdLineProcess:
   113 00000FE2 E8FC1D0000          <1>     call skipSeparators ;Go to the next char in the input line
   114                              <1> .redirFound:
   115 00000FE7 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   116 00000FE8 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   117 00000FEA 747C                <1>     je .exit
   118 00000FEC E822050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   119 00000FF1 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   120 00000FF3 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   121 00000FF5 B020                <1>     mov al, " "
   122 00000FF7 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   123 00000FF8 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   124 00000FFB F605BAF0FFFFFF      <1>     test byte [arg1Flg], -1
   125 00001002 7521                <1>     jnz .arg2
   126                              <1> .arg1:
   127 00001004 C605B1F0FFFFFF      <1>     mov byte [arg1Flg], -1
   128 0000100B E8D31D0000          <1>     call skipSeparators
   129 00001010 4889F0              <1>     mov rax, rsi
   130 00001013 488D1D03F2FFFF      <1>     lea rbx, cmdBuffer
   131 0000101A 4829D8              <1>     sub rax, rbx
   132 0000101D 88059AF0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   133 00001023 EB2A                <1>     jmp short .argCommon
   134                              <1> .arg2:
   135 00001025 F60593F0FFFFFF      <1>     test byte [arg2Flg], -1
   136 0000102C 7521                <1>     jnz .argCommon
   137 0000102E C6058AF0FFFFFF      <1>     mov byte [arg2Flg], -1
   138 00001035 E8A91D0000          <1>     call skipSeparators
   139 0000103A 4889F0              <1>     mov rax, rsi
   140 0000103D 488D1DD9F1FFFF      <1>     lea rbx, cmdBuffer
   141 00001044 4829D8              <1>     sub rax, rbx
   142 00001047 880573F0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   143 0000104D EB00                <1>     jmp short .argCommon
   144                              <1> .argCommon:
   145                              <1>     ;More than two arguments? Do nothing more than just copy it
   146                              <1>     ; over. If we encounter an embedded CR, exit there too
   147 0000104F E88F1D0000          <1>     call skipSeparators
   148 00001054 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   149 00001057 740F                <1>     je .exit
   150                              <1>     ;If not, we copy it over
   151 00001059 E88F060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   152 0000105E 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   153 00001062 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   154                              <1> .exit:
   155 00001068 48FFCE              <1>     dec rsi
   156 0000106B 48893535F0FFFF      <1>     mov qword [cmdEndPtr], rsi
   157 00001072 B00D                <1>     mov al, CR
   158 00001074 AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   159                              <1>     ;Now compute the command line length 
   160 00001075 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   161 0000107C B00D                <1>     mov al, CR
   162 0000107E 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   163 00001080 FFC9                <1>     dec ecx ;rcx = -1
   164 00001082 F2AE                <1>     repne scasb
   165 00001084 F7D1                <1>     not ecx
   166 00001086 FEC9                <1>     dec cl  ;Dont include terminating CR
   167 00001088 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   168 0000108F 880F                <1>     mov byte [rdi], cl
   169                              <1>     ;Before returning, we copy the command name to cmdName
   170 00001091 488D3D05F2FFFF      <1>     lea rdi, cmdPathSpec
   171 00001098 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   172 0000109B 30C0                <1>     xor al, al  ;Search for the terminating null
   173 0000109D B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   174 000010A2 F2AE                <1>     repne scasb
   175 000010A4 48FFCF              <1>     dec rdi ;Go to the last char in the command
   176 000010A7 4889FE              <1>     mov rsi, rdi
   177 000010AA FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   178                              <1> .keepSearching:
   179 000010AB AC                  <1>     lodsb
   180 000010AC 3A0579EFFFFF        <1>     cmp al, byte [pathSep]
   181 000010B2 740B                <1>     je .cmdStartFnd
   182 000010B4 4839DE              <1>     cmp rsi, rbx
   183 000010B7 75F2                <1>     jne .keepSearching
   184 000010B9 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   185 000010BC 48FFCE              <1>     dec rsi
   186                              <1> .cmdStartFnd:
   187 000010BF 48FFC6              <1>     inc rsi
   188 000010C2 48FFC6              <1>     inc rsi ;Go past the pathsep
   189 000010C5 FC                  <1>     cld ;Go the sane way again
   190 000010C6 488D3D38F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   191 000010CD 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   192 000010CE B90E000000          <1>     mov ecx, cmdNameL
   193 000010D3 30C0                <1>     xor al, al
   194 000010D5 F3AA                <1>     rep stosb
   195 000010D7 5F                  <1>     pop rdi
   196 000010D8 31C9                <1>     xor ecx, ecx
   197 000010DA 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   198                              <1> .cmdGetChar:
   199 000010DB AC                  <1>     lodsb
   200 000010DC 84C0                <1>     test al, al ;Did we find the terminating null?
   201 000010DE 7411                <1>     jz .nameLenFnd
   202 000010E0 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   203 000010E2 740D                <1>     je .nameLenFnd
   204 000010E4 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   205 000010E6 AA                  <1>     stosb   ;and store it
   206 000010E7 FFC1                <1>     inc ecx
   207 000010E9 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   208 000010EF 72EA                <1>     jb .cmdGetChar
   209                              <1> .nameLenFnd:
   210 000010F1 880D0DF2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   211                              <1>     ;Now finally, create a FCB filespec
   212 000010F7 488D3DEEF1FFFF      <1>     lea rdi, fcbCmdSpec
   213 000010FE 57                  <1>     push rdi
   214 000010FF B90B000000          <1>     mov ecx, fcbNameL
   215 00001104 B020                <1>     mov al, " " ;Fill with spaces
   216 00001106 F3AA                <1>     rep stosb
   217 00001108 5F                  <1>     pop rdi
   218 00001109 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   219 0000110A E84C1D0000          <1>     call asciiToFCB
   220 0000110F 488D35D6F1FFFF      <1>     lea rsi, fcbCmdSpec
   221 00001116 488D3DDAF1FFFF      <1>     lea rdi, cmdSpec
   222 0000111D E8941D0000          <1>     call FCBToAsciiz
   223                              <1>     return
    13                              <2> %%_ret:
    14 00001122 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   224                              <1> 
   225                              <1> doCommandLine:
   226 00001123 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   227                              <1>     ;The following check accounts for the end of a piped command
   228 0000112A 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   229                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000112D 74(22)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   230 0000112F 488D3D8CEFFFFF      <1>     lea rdi, cmdFcb
   231 00001136 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   232 0000113B CD21                <1>     int 21h
   233 0000113D 0FB71D70EFFFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   234 00001144 80FF3A              <1>     cmp bh, ":"
   235 00001147 752E                <1>     jne .noDriveSpecified
   236 00001149 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   237 0000114B 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   238 0000114E 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   239 00001151 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   240 00001153 7415                <1>     je .badDrive
   241                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   242 00001155 803DA8F1FFFF02      <1>     cmp byte [cmdName], 2
   243 0000115C 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   244 0000115E B40E                <1>     mov ah, 0Eh ;Set drive to dl
   245 00001160 CD21                <1>     int 21h 
   246 00001162 B419                <1>     mov ah, 19h
   247 00001164 CD21                <1>     int 21h     ;Get current drive
   248 00001166 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   249                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001168 74(22)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   250                              <1> .badDrive:
   251 0000116A 488D1580F8FFFF      <1>     lea rdx, badDrv
   252 00001171 B409                <1>     mov ah, 09h
   253 00001173 CD21                <1>     int 21h
   254 00001175 F9                  <1>     stc
   255                              <1>     return
    13                              <2> %%_ret:
    14 00001176 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .noDriveSpecified:
   257                              <1> ;Now we set the two FCB's in the command line
   258 00001177 F6053EEFFFFFFF      <1>     test byte [arg1Flg], -1
   259 0000117E 744D                <1>     jz .fcbArgsDone
   260 00001180 0FB60536EFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   261 00001187 488D358FF0FFFF      <1>     lea rsi, cmdBuffer
   262 0000118E 4801C6              <1>     add rsi, rax    ;Point to first argument
   263 00001191 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   264 00001195 B801290000          <1>     mov eax, 2901h
   265 0000119A CD21                <1>     int 21h
   266 0000119C 88051CEFFFFF        <1>     mov byte [arg1FCBret], al
   267 000011A2 F60516EFFFFFFF      <1>     test byte [arg2Flg], -1
   268 000011A9 7422                <1>     jz .fcbArgsDone
   269 000011AB 0FB6050EEFFFFF      <1>     movzx eax, byte [arg2Off]
   270 000011B2 488D3564F0FFFF      <1>     lea rsi, cmdBuffer
   271 000011B9 4801C6              <1>     add rsi, rax    ;Point to first argument
   272 000011BC 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   273 000011C0 B801290000          <1>     mov eax, 2901h
   274 000011C5 CD21                <1>     int 21h
   275 000011C7 8805F4EEFFFF        <1>     mov byte [arg2FCBret], al
   276                              <1> .fcbArgsDone:
   277 000011CD 488D1D49F0FFFF      <1>     lea rbx, cmdBuffer
   278 000011D4 488D3529F1FFFF      <1>     lea rsi, cmdName
   279 000011DB B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   280 000011E0 BAFFFF0000          <1>     mov edx, 0FFFFh
   281 000011E5 B5FF                <1>     mov ch, -1
   282 000011E7 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   283 000011E9 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 000011EE BAFFFF0000          <1>     mov edx, 0FFFFh
   285 000011F3 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   286 000011F5 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   287                              <1>             ;        al = 0  if the command should be executed as usual
   288 000011F7 84C0                <1>     test al, al
   289 000011F9 741D                <1>     jz .executeInternal
   290                              <1>     ;Here we execute externally and return to the prompt
   291                              <1>     ; as if it was an internal execution
   292 000011FB 488D359BEFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   293 00001202 488D1DB9EEFFFF      <1>     lea rbx, cmdFcb
   294 00001209 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   295 0000120E BAFFFF0000          <1>     mov edx, 0FFFFh
   296 00001213 B5FF                <1>     mov ch, -1
   297 00001215 CD2F                <1>     int 2Fh 
   298                              <1>     return
    13                              <2> %%_ret:
    14 00001217 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   299                              <1> .executeInternal:
   300                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   301                              <1> ;rsi points after the command terminator in the command tail
   302 00001218 488D1D85F5FFFF      <1>     lea rbx, functionTable
   303                              <1> .nextEntry:
   304 0000121F 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   305 00001222 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   306 00001225 0F8401170000        <1>     je launchChild      ;If so, check externally now
   307 0000122B 380DD3F0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   308 00001231 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   309                              <1>     ;Here they have the same length so lets see if the name is the same
   310 00001233 56                  <1>     push rsi
   311                              <1>     ;ecx has the length to compare
   312 00001234 51                  <1>     push rcx
   313 00001235 488D7301            <1>     lea rsi, qword [rbx + 1]
   314 00001239 488D3DC5F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   315 00001240 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   316 00001242 59                  <1>     pop rcx
   317 00001243 5E                  <1>     pop rsi
   318 00001244 7516                <1>     jne .gotoNextEntry
   319                              <1>     ;Here it was found both strings are equal
   320 00001246 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   321 0000124B 480FB71F            <1>     movzx rbx, word [rdi]
   322 0000124F 488D3DAAEDFFFF      <1>     lea rdi, startLbl
   323 00001256 4801FB              <1>     add rbx, rdi
   324 00001259 FFD3                <1>     call rbx    ;Call this function...
   325                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000125B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> .gotoNextEntry:
   327 0000125C 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   328 00001263 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   329 00001266 EBB7                <1>     jmp short .nextEntry
   330                              <1> .dfltErrExit:
   331 00001268 488D1573F6FFFF      <1>     lea rdx, badCmd
   332 0000126F B409                <1>     mov ah, 09h
   333 00001271 CD21                <1>     int 21h
   334                              <1>     return
    13                              <2> %%_ret:
    14 00001273 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> 
   337                              <1> checkExtensionExec:
   338                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   339                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   340                              <1> ;         If ZF=ZE and CF=CY => Batch file
   341 00001274 8B0551EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   342 0000127A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   343 0000127F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   344 00001284 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   345 00001289 3D434F4D20          <1>     cmp eax, "COM "
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000128E 74(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 00001290 3D45584520          <1>     cmp eax, "EXE "
   348                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001295 74(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 00001297 3D42415420          <1>     cmp eax, "BAT "
   350                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000129C 75(73)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   351 0000129E F9                  <1>     stc
   352                              <1>     return
    13                              <2> %%_ret:
    14 0000129F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> 
   354                              <1> redirFailure:
   355 000012A0 488D1591FBFFFF      <1>     lea rdx, redirErrMsg
   356 000012A7 B913000000          <1>     mov ecx, redirErrMsgL
   357 000012AC EB0C                <1>     jmp short redirPipeFailureCommon
   358                              <1> pipeFailure:
   359 000012AE 488D156CFBFFFF      <1>     lea rdx, pipeErrMsg
   360 000012B5 B917000000          <1>     mov ecx, pipeErrMsgL
   361                              <1> redirPipeFailureCommon:
   362                              <1> ;This routine is called if any problems happen during 
   363                              <1> ;This routine tries to close whatever handles are not -1 and delete
   364                              <1> ; pipe files if the pipe count is not 0
   365                              <1> ;It resets all variables and proceeds.
   366 000012BA B800400000          <1>     mov eax, 4000h  ;Write handle
   367 000012BF BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   368 000012C4 CD21                <1>     int 21h
   369 000012C6 31DB                <1>     xor ebx, ebx    ;Select STDIN
   370 000012C8 E8C6000000          <1>     call .closeHandle
   371 000012CD FFC3                <1>     inc ebx         ;Select STDOUT
   372 000012CF E8BF000000          <1>     call .closeHandle
   373 000012D4 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   374 000012D9 488D15A0FBFFFF      <1>     lea rdx, conName
   375 000012E0 CD21                <1>     int 21h
   376 000012E2 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   377 000012E4 B800450000          <1>     mov eax, 4500h  ;DUP
   378 000012E9 CD21                <1>     int 21h
   379 000012EB 66C705C2EDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   380 000012F4 0FB71DBDEDFFFF      <1>     movzx ebx, word [redirSTDIN]
   381 000012FB E893000000          <1>     call .closeHandle
   382                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   383 00001300 66C705AFEDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   384 00001309 0FB71DAAEDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   385 00001310 E87E000000          <1>     call .closeHandle
   386 00001315 66C7059CEDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   387 0000131E 0FB71D8BEDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   388 00001325 E869000000          <1>     call .closeHandle
   389 0000132A 66C7057DEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   390 00001333 0FB71D78EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   391 0000133A E854000000          <1>     call .closeHandle
   392 0000133F 66C7056AEDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   393 00001348 C60560EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   394 0000134F 488D155AF0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   395 00001356 803A00              <1>     cmp byte [rdx], 0
   396 00001359 7407                <1>     jz .checkOld
   397 0000135B B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   398 00001360 CD21                <1>     int 21h
   399                              <1> .checkOld:
   400 00001362 488D1596F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   401 00001369 803A00              <1>     cmp byte [rdx],0
   402 0000136C 7407                <1>     jz .pipeNamesComplete
   403 0000136E B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   404 00001373 CD21                <1>     int 21h
   405                              <1> .pipeNamesComplete:
   406 00001375 31C0                <1>     xor eax, eax
   407                              <1>     ;Invalidate the pointers and the paths too
   408 00001377 488905D0F0FFFF      <1>     mov qword [newPipe], rax
   409 0000137E 488905D1F0FFFF      <1>     mov qword [oldPipe], rax
   410 00001385 890525F0FFFF        <1>     mov dword [pipe1Filespec], eax
   411 0000138B 89056EF0FFFF        <1>     mov dword [pipe2Filespec], eax
   412 00001391 F9                  <1>     stc
   413                              <1>     return
    13                              <2> %%_ret:
    14 00001392 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> .closeHandle:
   415 00001393 81FBFFFFFFFF        <1>     cmp ebx, -1
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001399 74(92)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 0000139B B8003E0000          <1>     mov eax, 3E00h
   418 000013A0 CD21                <1>     int 21h
   419                              <1>     return
    13                              <2> %%_ret:
    14 000013A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> cleanUpRedir:
   422                              <1> ;Cleans up the redir stuff after we are done.
   423 000013A3 0FB70506EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   424 000013AA 0FB71D01EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   425 000013B1 C1E310              <1>     shl ebx, 10h
   426 000013B4 09D8                <1>     or eax, ebx
   427 000013B6 3DFFFFFFFF          <1>     cmp eax, -1
   428 000013BB 750C                <1>     jne .pipe
   429 000013BD C605EBECFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   430 000013C4 E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   431                              <1> .pipe:
   432                              <1> ;Pipe processing here
   433                              <1> ;We handle stdin, closing the redir if it is and deleting
   434                              <1> ; the redir file.
   435                              <1> ;Then we handle stdout, moving the redir to stdin.
   436 000013C9 66813DDEECFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   437 000013D2 7443                <1>     je .pipeNostdin
   438                              <1>     ;We close the handle first and delete the file.
   439 000013D4 0FB71DD5ECFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   440 000013DB 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   441 000013DD B800460000          <1>     mov eax, 4600h
   442 000013E2 CD21                <1>     int 21h
   443 000013E4 0F82C4FEFFFF        <1>     jc pipeFailure
   444 000013EA B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   445 000013EF CD21                <1>     int 21h
   446 000013F1 0F82B7FEFFFF        <1>     jc pipeFailure
   447 000013F7 488B1558F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   448 000013FE B800410000          <1>     mov eax, 4100h  ;Delete the file!
   449 00001403 CD21                <1>     int 21h
   450 00001405 0F82A3FEFFFF        <1>     jc pipeFailure
   451 0000140B C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   452 0000140E 66C70599ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   453                              <1> .pipeNostdin:
   454 00001417 66813D92ECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   455 00001420 7474                <1>     je .redirInClear
   456                              <1> ;Duplicate STDIN to save across pipe
   457 00001422 B800450000          <1>     mov eax, 4500h
   458 00001427 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   459 00001429 CD21                <1>     int 21h
   460 0000142B 0F827DFEFFFF        <1>     jc pipeFailure
   461 00001431 66890578ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   462                              <1> 
   463                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   464 00001438 B800460000          <1>     mov eax, 4600h
   465 0000143D 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   466 0000143F FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   467 00001441 CD21                <1>     int 21h
   468 00001443 0F8265FEFFFF        <1>     jc pipeFailure
   469                              <1> 
   470                              <1> ;Now return the original stdout to stdout
   471 00001449 89D9                <1>     mov ecx, ebx
   472 0000144B 0FB71D60ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 00001452 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   474 00001457 CD21                <1>     int 21h
   475 00001459 0F824FFEFFFF        <1>     jc pipeFailure
   476                              <1> 
   477                              <1> ;Now close the DUP'ed STDOUT
   478 0000145F B8003E0000          <1>     mov eax, 3E00h
   479 00001464 CD21                <1>     int 21h
   480 00001466 0F8242FEFFFF        <1>     jc pipeFailure
   481                              <1> 
   482                              <1> ;Finally unwind STDIN to the beginning of the file
   483 0000146C B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   484 00001471 31DB                <1>     xor ebx, ebx    ;STDIN handle
   485 00001473 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   486 00001475 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   487 00001477 CD21                <1>     int 21h
   488 00001479 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   489                              <1> 
   490 0000147F 488B15C8EFFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   491 00001486 488915C9EFFFFF      <1>     mov qword [oldPipe], rdx
   492 0000148D 66C7051CECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   493                              <1> 
   494                              <1> .redirInClear:
   495                              <1> ;Check redir in
   496 00001496 F60519ECFFFFFF      <1>     test byte [redirIn], -1
   497 0000149D 7433                <1>     jz .redirOutClear
   498                              <1> 
   499 0000149F 0FB71D12ECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   500 000014A6 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   501 000014A8 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   502 000014AD CD21                <1>     int 21h
   503 000014AF 0F82EBFDFFFF        <1>     jc redirFailure
   504 000014B5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   505 000014BA CD21                <1>     int 21h
   506 000014BC 0F82DEFDFFFF        <1>     jc redirFailure
   507 000014C2 66C705EDEBFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   508 000014CB C605E4EBFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   509                              <1> .redirOutClear:
   510                              <1> ;Now check Redir Out
   511 000014D2 F605DEEBFFFFFF      <1>     test byte [redirOut], -1
   512                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014D9 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014DB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   513                              <1> 
   514 000014DC 0FB71DD7EBFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   515 000014E3 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   516 000014E8 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   517 000014ED CD21                <1>     int 21h
   518 000014EF 0F82ABFDFFFF        <1>     jc redirFailure
   519 000014F5 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   520 000014FA CD21                <1>     int 21h
   521 000014FC 0F829EFDFFFF        <1>     jc redirFailure
   522 00001502 66C705AFEBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   523 0000150B C605A5EBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   524                              <1>     return
    13                              <2> %%_ret:
    14 00001512 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> checkAndSetupRedir:
   527                              <1> ;Checks and sets up redir as appropriate
   528                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   529                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   530                              <1> ;Output: ZF=NZ => No redir
   531                              <1> ;        ZF=ZY => Redir
   532                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   533                              <1> ;CF=CY if pipe set or an embedded CR found
   534 00001513 57                  <1>     push rdi
   535 00001514 3C3C                <1>     cmp al, "<"
   536 00001516 740F                <1>     je .inputRedir
   537 00001518 3C3E                <1>     cmp al, ">"
   538 0000151A 7478                <1>     je .outputRedir
   539 0000151C 3C7C                <1>     cmp al, "|"
   540 0000151E 0F8428010000        <1>     je .pipeSetup
   541 00001524 F8                  <1>     clc
   542                              <1> .redirExit:
   543 00001525 5F                  <1>     pop rdi
   544                              <1>     return
    13                              <2> %%_ret:
    14 00001526 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> .inputRedir:
   546 00001527 C60588EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   547 0000152E 488D3DDDEDFFFF      <1>     lea rdi, rdrInFilespec
   548 00001535 E8A9180000          <1>     call skipSeparators ;Skip spaces between < and the filespec
   549 0000153A E8AE010000          <1>     call copyCommandTailItem
   550                              <1>     ;jc .redirExit
   551 0000153F 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   552 00001542 E89C180000          <1>     call skipSeparators
   553                              <1>     ;Setup the redir here for STDIN
   554 00001547 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   555 00001549 B800450000          <1>     mov eax, 4500h
   556 0000154E CD21                <1>     int 21h
   557 00001550 0F8274010000        <1>     jc .redirError
   558 00001556 6689055BEBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   559 0000155D 488D15AEEDFFFF      <1>     lea rdx, rdrInFilespec
   560 00001564 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   561 00001569 CD21                <1>     int 21h
   562 0000156B 0F8259010000        <1>     jc .redirError
   563 00001571 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   564 00001573 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   565 00001576 B800460000          <1>     mov eax, 4600h
   566 0000157B CD21                <1>     int 21h
   567 0000157D 0F8247010000        <1>     jc .redirError
   568 00001583 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   569 00001588 CD21                <1>     int 21h
   570 0000158A 0F823A010000        <1>     jc .redirError
   571 00001590 30C0                <1>     xor al, al
   572 00001592 EB91                <1>     jmp short .redirExit
   573                              <1> .outputRedir:
   574 00001594 C6051CEBFFFF01      <1>     mov byte [redirOut], 1
   575 0000159B 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   576 0000159E 7509                <1>     jne .notDouble
   577 000015A0 FE0511EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   578 000015A6 48FFC6              <1>     inc rsi ;Go past it too
   579                              <1> .notDouble:
   580 000015A9 488D3DB1EDFFFF      <1>     lea rdi, rdrOutFilespec
   581 000015B0 E82E180000          <1>     call skipSeparators
   582 000015B5 E833010000          <1>     call copyCommandTailItem
   583                              <1>     ;jc .redirExit
   584 000015BA 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   585 000015BD E821180000          <1>     call skipSeparators
   586                              <1>     ;Setup the redir here for STDOUT
   587 000015C2 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   588 000015C7 B800450000          <1>     mov eax, 4500h
   589 000015CC CD21                <1>     int 21h
   590 000015CE 0F82F6000000        <1>     jc .redirError
   591 000015D4 668905DFEAFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   592 000015DB 488D157FEDFFFF      <1>     lea rdx, rdrOutFilespec
   593 000015E2 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   594 000015E7 CD21                <1>     int 21h
   595 000015E9 7312                <1>     jnc .fileExists
   596 000015EB B8003C0000          <1>     mov eax, 3C00h
   597 000015F0 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   598 000015F5 CD21                <1>     int 21h
   599 000015F7 0F82CD000000        <1>     jc .redirError
   600                              <1> .fileExists:
   601 000015FD B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   602 00001602 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   603 00001605 B800460000          <1>     mov eax, 4600h  ;DUP2
   604 0000160A CD21                <1>     int 21h
   605 0000160C 0F82B8000000        <1>     jc .redirError
   606 00001612 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   607 00001617 CD21                <1>     int 21h
   608 00001619 0F82AB000000        <1>     jc .redirError
   609 0000161F 803D91EAFFFF01      <1>     cmp byte [redirOut], 1
   610 00001626 7416                <1>     je .dontAppend
   611                              <1>     ;Here we move the file pointer to the end of the file
   612 00001628 31D2                <1>     xor edx, edx    ;Low order 32 bits
   613 0000162A 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   614 0000162C BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   615 00001631 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   616 00001636 CD21                <1>     int 21h
   617 00001638 0F828C000000        <1>     jc .redirError
   618                              <1> .dontAppend:
   619 0000163E C60572EAFFFFFF      <1>     mov byte [redirOut], -1
   620 00001645 30C0                <1>     xor al, al
   621 00001647 E9D9FEFFFF          <1>     jmp .redirExit
   622                              <1> .pipeSetup:
   623                              <1> ;We only need to setup STDOUT redirection to the pipe file
   624 0000164C 488D155DEDFFFF      <1>     lea rdx, pipe1Filespec
   625 00001653 803A00              <1>     cmp byte [rdx], 0
   626 00001656 740C                <1>     jz .pathFound
   627 00001658 488D15A0EDFFFF      <1>     lea rdx, pipe2Filespec
   628 0000165F 803A00              <1>     cmp byte [rdx], 0
   629 00001662 7560                <1>     jnz .pipeError
   630                              <1> .pathFound:
   631 00001664 488915E3EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   632 0000166B B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   633 00001670 BB01000000          <1>     mov ebx, 1
   634 00001675 CD21                <1>     int 21h
   635 00001677 724B                <1>     jc .pipeError
   636 00001679 66890532EAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   637 00001680 E8F5160000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   638 00001685 0441                <1>     add al, "A"
   639 00001687 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   640 0000168C 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   641 0000168E 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   642 00001690 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   643 00001695 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   644 0000169A CD21                <1>     int 21h
   645 0000169C 7226                <1>     jc .pipeError
   646                              <1>     ;AX has the handle for this file now, this will become STDOUT
   647                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   648 0000169E 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   649 000016A1 B901000000          <1>     mov ecx, 1
   650 000016A6 B800460000          <1>     mov eax, 4600h
   651 000016AB CD21                <1>     int 21h
   652 000016AD 7215                <1>     jc .pipeError
   653 000016AF B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   654 000016B4 CD21                <1>     int 21h
   655 000016B6 720C                <1>     jc .pipeError
   656 000016B8 C605F0E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   657 000016BF 30C0                <1>     xor al, al
   658 000016C1 F9                  <1>     stc
   659 000016C2 5F                  <1>     pop rdi
   660                              <1>     return
    13                              <2> %%_ret:
    14 000016C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   661                              <1> .pipeError:
   662 000016C4 5F                  <1>     pop rdi 
   663 000016C5 E9E4FBFFFF          <1>     jmp pipeFailure
   664                              <1> .redirError:
   665 000016CA 5F                  <1>     pop rdi 
   666 000016CB E9D0FBFFFF          <1>     jmp redirFailure
   667                              <1> 
   668                              <1> copyCommandTailItemProgram:
   669                              <1> ;Copies a program name from the command tail until a terminator is found.
   670                              <1> ;Stores a terminating null in the destination
   671                              <1> ;Input: rsi = Start of the item to copy
   672                              <1> ;       rdi = Location for copy
   673                              <1> ;Output: Sentence copied with a null terminator inserted.
   674                              <1> ; If CF=CY, embedded CR encountered
   675 000016D0 AC                  <1>     lodsb
   676 000016D1 E806170000          <1>     call isALEndOfCommand
   677 000016D6 740A                <1>     je .endOfInput
   678 000016D8 E8E9160000          <1>     call isALterminator
   679 000016DD 740A                <1>     jz .exit
   680 000016DF AA                  <1>     stosb
   681 000016E0 EBEE                <1>     jmp short copyCommandTailItemProgram
   682                              <1> .endOfInput:
   683 000016E2 E802000000          <1>     call .exit
   684 000016E7 F9                  <1>     stc 
   685                              <1>     return
    13                              <2> %%_ret:
    14 000016E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   686                              <1> .exit:
   687 000016E9 30C0                <1>     xor al, al
   688 000016EB AA                  <1>     stosb
   689                              <1>     return
    13                              <2> %%_ret:
    14 000016EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   690                              <1> 
   691                              <1> copyCommandTailItem:
   692                              <1> ;Copies a sentence from the command tail until a terminator is found.
   693                              <1> ;Stores a terminating null in the destination
   694                              <1> ;Input: rsi = Start of the item to copy
   695                              <1> ;       rdi = Location for copy
   696                              <1> ;Output: Sentence copied with a null terminator inserted.
   697                              <1> ; If CF=CY, embedded CR or Pipe encountered
   698 000016ED AC                  <1>     lodsb
   699 000016EE E8E9160000          <1>     call isALEndOfCommand
   700 000016F3 7435                <1>     je .endOfInput
   701 000016F5 E8CC160000          <1>     call isALterminator
   702 000016FA 7435                <1>     jz .exit
   703 000016FC 3C3C                <1>     cmp al, "<"
   704 000016FE 7431                <1>     jz .exit
   705 00001700 3C3E                <1>     cmp al, ">"
   706 00001702 742D                <1>     jz .exit
   707 00001704 3A0521E9FFFF        <1>     cmp al, byte [pathSep]
   708 0000170A 7403                <1>     je .pathSep
   709 0000170C AA                  <1>     stosb
   710 0000170D EBDE                <1>     jmp short copyCommandTailItem
   711                              <1> .pathSep:
   712                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   713 0000170F AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   714 00001710 E8B1160000          <1>     call isALterminator
   715 00001715 741A                <1>     jz .exit
   716 00001717 E8C0160000          <1>     call isALEndOfCommand
   717 0000171C 740C                <1>     je .endOfInput
   718 0000171E 8A0507E9FFFF        <1>     mov al, byte [pathSep]
   719 00001724 AA                  <1>     stosb   ;Else store the pathsep
   720 00001725 48FFCE              <1>     dec rsi ;Move rsi back a piece
   721 00001728 EBC3                <1>     jmp short copyCommandTailItem
   722                              <1> .endOfInput:
   723 0000172A E802000000          <1>     call .exit
   724 0000172F F9                  <1>     stc 
   725                              <1>     return
    13                              <2> %%_ret:
    14 00001730 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   726                              <1> .exit:
   727 00001731 30C0                <1>     xor al, al
   728 00001733 AA                  <1>     stosb
   729                              <1>     return
    13                              <2> %%_ret:
    14 00001734 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   730                              <1> 
   731                              <1> 
   732                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   733                              <1> ;Input: rsi points to the count byte of a command line
   734 00001735 4150                <1>     push r8
   735 00001737 4151                <1>     push r9
   736 00001739 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   737 0000173B CD21                <1>     int 21h
   738 0000173D 52                  <1>     push rdx    ;Save on the stack
   739 0000173E 488D1DBBE7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   740 00001745 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   741 00001747 CD21                <1>     int 21h
   742 00001749 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   743 0000174C 4989D9              <1>     mov r9, rbx
   744 0000174F 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   745 00001756 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   746 0000175B F348A5              <1>     rep movsq   ;Copy command line over
   747                              <1>     ;call doCommandLine
   748 0000175E 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   749 0000175F B450                <1>     mov ah, 50h ;Set Current PSP
   750 00001761 CD21                <1>     int 21h
   751 00001763 4159                <1>     pop r9
   752 00001765 4158                <1>     pop r8
   753 00001767 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 00001769 488D1500F2FFFF      <1>     lea rdx, noSelfCopy
     8 00001770 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001772 488D15B5F2FFFF      <1>     lea rdx, badParm
    11 00001779 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 0000177B 488D156FF2FFFF      <1>     lea rdx, badDrv
    14 00001782 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 00001784 488D1520F5FFFF      <1>     lea rdx, badArgs
    17 0000178B EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 0000178D 488D15FBF4FFFF      <1>     lea rdx, badSpec
    20 00001794 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 00001796 488D1560F1FFFF      <1>     lea rdx, dupName
    24 0000179D EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 0000179F 488D1589F3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000017A6 B800090000          <1>     mov eax, 0900h
    29 000017AB CD21                <1>     int 21h
    30 000017AD F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000017AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 000017AF C60528EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 000017B6 C60522EDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 000017BD C6051CEDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 000017C4 C60597EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 000017CB 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 000017D4 3F                  <1>
    40 000017D5 488D3D06EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000017DC 48AB                <1>     stosq
    42 000017DE 48FFC7              <1>     inc rdi ;Go past dot
    43 000017E1 668907              <1>     mov word [rdi], ax
    44 000017E4 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 000017E7 488D3D30EAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 000017EE 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 000017F1 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 000017F4 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 000017F7 8A052FE8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 000017FD F2AE                <1>     repne scasb ;Scan for a switchchar
    53 000017FF 67E320              <1>     jecxz .switchScanDone
    54 00001802 24DF                <1>     and al, 0DFh    ;UC it
    55 00001804 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 00001806 7509                <1>     jne .notWideSw
    57 00001808 800DCFECFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 0000180F EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 00001811 3C50                <1>     cmp al, "P" ;Pause mode?
    61 00001813 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 00001819 800DBEECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 00001820 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 00001822 488D35F6E9FFFF      <1>     lea rsi, cmdBuffer + 2
    69 00001829 E8B5150000          <1>     call skipSeparators ;Skip leading spaces
    70 0000182E 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 00001835 E8A9150000          <1>     call skipSeparators ;Skip spaces after
    73 0000183A AC                  <1>     lodsb   ;Get first non space char
    74 0000183B E89C150000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001840 744A                <1>     jz .eocNoNull
    76 00001842 3C3E                <1>     cmp al, ">"
    77 00001844 7446                <1>     je .eocNoNull
    78 00001846 3C3C                <1>     cmp al, "<"
    79 00001848 7442                <1>     je .eocNoNull
    80 0000184A 3A05DCE7FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001850 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001852 E837150000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 00001857 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 00001859 EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 0000185B 803D00EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001862 0F851CFFFFFF        <1>     jne badArgError
    90 00001868 488D3DF3ECFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 0000186F 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 00001872 AC                  <1>     lodsb
    94 00001873 E864150000          <1>     call isALEndOfCommand
    95 00001878 740F                <1>     jz .eocReached
    96 0000187A E847150000          <1>     call isALterminator
    97 0000187F 7403                <1>     jz .terminateCopy
    98 00001881 AA                  <1>     stosb
    99 00001882 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 00001884 31C0                <1>     xor eax, eax
   102 00001886 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 00001887 EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 00001889 31C0                <1>     xor eax, eax
   106 0000188B AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 0000188C 803DCFECFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 00001893 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 00001895 488D35C6ECFFFF      <1>     lea rsi, dirPathArg
   112 0000189C 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 000018A0 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 000018A2 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 000018A7 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 000018AB B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 000018B0 CD21                <1>     int 21h
   119 000018B2 3CFF                <1>     cmp al, -1
   120 000018B4 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 000018BA 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 000018BF FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 000018C1 88051AECFFFF        <1>     mov byte [dirDrv], al
   125 000018C7 EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 000018C9 E8AC140000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 000018CE 88050DECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 000018D4 0FB60506ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000018DB E87F0D0000          <1>     call volume.dirEP
   132 000018E0 803D7BECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 000018E7 7409                <1>     je .printCWD
   134 000018E9 803D75ECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 000018F0 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 000018F2 8A15E9EBFFFF        <1>     mov dl, byte [dirDrv]
   140 000018F8 88D0                <1>     mov al, dl
   141 000018FA 0441                <1>     add al, "A"
   142 000018FC B43A                <1>     mov ah, ":"
   143 000018FE 66890559EBFFFF      <1>     mov word [searchSpec], ax
   144 00001905 8A0520E7FFFF        <1>     mov al, byte [pathSep]
   145 0000190B 88054FEBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001911 488D3549EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 00001918 B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 0000191A FEC2                <1>     inc dl  ;Convert to 1 based number
   149 0000191C CD21                <1>     int 21h
   150 0000191E 488D3D39EBFFFF      <1>     lea rdi, searchSpec
   151 00001925 E855140000          <1>     call strlen
   152 0000192A FFC9                <1>     dec ecx
   153 0000192C C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001930 488D1560F2FFFF      <1>     lea rdx, dirMain
   155 00001937 B409                <1>     mov ah, 09h
   156 00001939 CD21                <1>     int 21h
   157 0000193B 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 0000193E B409                <1>     mov ah, 09h
   159 00001940 CD21                <1>     int 21h
   160 00001942 488D153FEFFFFF      <1>     lea rdx, crlf2
   161 00001949 B409                <1>     mov ah, 09h
   162 0000194B CD21                <1>     int 21h
   163 0000194D E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001952 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 00001953 488D3D04EBFFFF      <1>     lea rdi, searchSpec
   179 0000195A 8A05CBE6FFFF        <1>     mov al, byte [pathSep]
   180 00001960 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 00001964 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 00001966 88040F              <1>     mov byte [rdi + rcx], al
   183 00001969 FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 0000196B 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 0000196F 488D356CECFFFF      <1>     lea rsi, dirSrchPat
   187 00001976 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 00001979 48A5                <1>     movsq
   189 0000197B A5                  <1>     movsd
   190 0000197C 30C0                <1>     xor al, al
   191 0000197E AA                  <1>     stosb   ;Store the terminating null
   192 0000197F E893160000          <1>     call setDTA
   193 00001984 4C8D1547E7FFFF      <1>     lea r10, cmdFFBlock
   194 0000198B B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   195 00001990 B44E                <1>     mov ah, 4Eh ;Find first
   196 00001992 CD21                <1>     int 21h
   197 00001994 720B                <1>     jc .dirNoMoreFiles
   198                              <1> .findNext:
   199 00001996 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   200 0000199B B44F                <1>     mov ah, 4Fh
   201 0000199D CD21                <1>     int 21h
   202 0000199F 73F5                <1>     jnc .findNext 
   203                              <1> .dirNoMoreFiles:
   204 000019A1 F60536EBFFFF01      <1>     test byte [dirPrnType], 1
   205 000019A8 740B                <1>     jz .dirNoEndNewLine
   206 000019AA 488D15D4EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   207 000019B1 B409                <1>     mov ah, 09h
   208 000019B3 CD21                <1>     int 21h
   209                              <1> .dirNoEndNewLine:
   210                              <1>     ;Now we print the number of files and the number of bytes on the disk
   211 000019B5 488D1593F4FFFF      <1>     lea rdx, fourSpc
   212 000019BC B409                <1>     mov ah, 09h
   213 000019BE CD21                <1>     int 21h
   214 000019C0 B409                <1>     mov ah, 09h ;Print four Spaces twice
   215 000019C2 CD21                <1>     int 21h
   216 000019C4 0FB60515EBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   217 000019CB E845150000          <1>     call printDecimalWord
   218 000019D0 488D15F9EFFFFF      <1>     lea rdx, dirOk
   219 000019D7 B409                <1>     mov ah, 09h
   220 000019D9 CD21                <1>     int 21h
   221 000019DB 488D1572F4FFFF      <1>     lea rdx, threeSpc
   222 000019E2 B409                <1>     mov ah, 09h
   223 000019E4 CD21                <1>     int 21h
   224 000019E6 B800360000          <1>     mov eax, 3600h ;Get disk info
   225 000019EB 8A15F0EAFFFF        <1>     mov dl, byte [dirDrv]
   226 000019F1 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   227 000019F3 CD21                <1>     int 21h ;Get disk free space info
   228 000019F5 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   229 000019F8 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   230 000019FB 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   231 000019FD F7E1                <1>     mul ecx ;Get bytes per cluster
   232 000019FF 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   233                              <1>     ;rax now has the number of free bytes on the disk
   234 00001A02 E80E150000          <1>     call printDecimalWord
   235 00001A07 488D15CCEFFFFF      <1>     lea rdx, bytesOk
   236 00001A0E B409                <1>     mov ah, 09h
   237 00001A10 CD21                <1>     int 21h
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001A12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> .dirPrintFileData:
   241                              <1> ;Use fcbCmdSpec to build the file name with space
   242                              <1> ;Start by print the name (same for both cases)
   243                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   244 00001A13 F605CDE6FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   245                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A1A 75(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   246 00001A1C 488D35CDE6FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   247 00001A23 488D3DC2E8FFFF      <1>     lea rdi, fcbCmdSpec
   248 00001A2A E83D140000          <1>     call asciiFilenameToFCB
   249 00001A2F 488D15B6E8FFFF      <1>     lea rdx, fcbCmdSpec
   250 00001A36 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   251 00001A3B BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 00001A40 B440                <1>     mov ah, 40h ;Write handle
   253 00001A42 CD21                <1>     int 21h
   254 00001A44 52                  <1>     push rdx
   255 00001A45 B220                <1>     mov dl, " "
   256 00001A47 B402                <1>     mov ah, 02h ;Print char
   257 00001A49 CD21                <1>     int 21h
   258 00001A4B 5A                  <1>     pop rdx
   259 00001A4C 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   260 00001A53 B903000000          <1>     mov ecx, 3  ;Print three chars
   261 00001A58 BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 00001A5D B440                <1>     mov ah, 40h ;Write handle
   263 00001A5F CD21                <1>     int 21h
   264 00001A61 F60576EAFFFF01      <1>     test byte [dirPrnType], 1
   265 00001A68 0F85A8000000        <1>     jnz .widePrint
   266                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   267                              <1>     ;Now check if a DIR
   268 00001A6E F60572E6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   269 00001A75 7418                <1>     jz .dirPrintNotDir
   270 00001A77 488D156AEFFFFF      <1>     lea rdx, dirLbl
   271 00001A7E B409                <1>     mov ah, 09h
   272 00001A80 CD21                <1>     int 21h
   273 00001A82 488D15CBF3FFFF      <1>     lea rdx, threeSpc
   274 00001A89 B409                <1>     mov ah, 09h
   275 00001A8B CD21                <1>     int 21h
   276 00001A8D EB4F                <1>     jmp short .dirPrintFileDT
   277                              <1> .dirPrintNotDir:
   278                              <1> ;Here we print the file size
   279 00001A8F B220                <1>     mov dl, " "
   280 00001A91 B402                <1>     mov ah, 02h
   281 00001A93 CD21                <1>     int 21h
   282 00001A95 8B0551E6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   283 00001A9B E8E6140000          <1>     call getDecimalWord
   284 00001AA0 4889CB              <1>     mov rbx, rcx
   285 00001AA3 51                  <1>     push rcx
   286 00001AA4 480FCB              <1>     bswap rbx
   287 00001AA7 B908000000          <1>     mov ecx, 8
   288                              <1> .dirPrintFileSizePrep:
   289 00001AAC 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   290 00001AAE 7514                <1>     jne .dirPrintFileSize
   291 00001AB0 B402                <1>     mov ah, 02h
   292 00001AB2 B220                <1>     mov dl, " "
   293 00001AB4 CD21                <1>     int 21h
   294 00001AB6 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   295 00001ABA FFC9                <1>     dec ecx
   296 00001ABC 81F901000000        <1>     cmp ecx, 1
   297 00001AC2 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   298                              <1> .dirPrintFileSize:
   299 00001AC4 5B                  <1>     pop rbx
   300                              <1> .dirPrintFileSizeLoop:
   301 00001AC5 88DA                <1>     mov dl, bl
   302 00001AC7 B402                <1>     mov ah, 02h
   303 00001AC9 CD21                <1>     int 21h
   304 00001ACB 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001ACF FFC9                <1>     dec ecx
   306 00001AD1 75F2                <1>     jnz .dirPrintFileSizeLoop
   307 00001AD3 488D157EF3FFFF      <1>     lea rdx, twoSpc
   308 00001ADA B409                <1>     mov ah, 09h
   309 00001ADC CD21                <1>     int 21h
   310                              <1> .dirPrintFileDT:
   311 00001ADE B220                <1>     mov dl, " "
   312 00001AE0 B402                <1>     mov ah, 02h
   313 00001AE2 CD21                <1>     int 21h
   314 00001AE4 0FB705FFE5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   315 00001AEB 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   316 00001AED E8DE0F0000          <1>     call printDate
   317 00001AF2 488D155FF3FFFF      <1>     lea rdx, twoSpc
   318 00001AF9 B409                <1>     mov ah, 09h
   319 00001AFB CD21                <1>     int 21h
   320 00001AFD 0FB705E4E5FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   321 00001B04 E8E9100000          <1>     call printTime
   322 00001B09 488D1575EDFFFF      <1>     lea rdx, crlf
   323 00001B10 B409                <1>     mov ah, 09h
   324 00001B12 CD21                <1>     int 21h
   325 00001B14 EB0B                <1>     jmp short .dirPrintNameExit
   326                              <1> .widePrint:
   327                              <1> ;If /W, print name space ext space space space space
   328 00001B16 488D1532F3FFFF      <1>     lea rdx, fourSpc
   329 00001B1D B409                <1>     mov ah, 09h ;Print string
   330 00001B1F CD21                <1>     int 21h
   331                              <1> .dirPrintNameExit:
   332 00001B21 FE05B9E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   333 00001B27 FE05B2E9FFFF        <1>     inc byte [dirLineCtr]
   334 00001B2D 803DABE9FFFF17      <1>     cmp byte [dirLineCtr], 23
   335                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001B34 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001B36 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 00001B37 488D15D1EEFFFF      <1>     lea rdx, pauseMes
   337 00001B3E B409                <1>     mov ah, 09h
   338 00001B40 CD21                <1>     int 21h
   339 00001B42 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   340 00001B44 CD21                <1>     int 21h
   341 00001B46 C60592E9FFFF00      <1>     mov byte [dirLineCtr], 0
   342 00001B4D 488D1531EDFFFF      <1>     lea rdx, crlf   ;Force new line
   343 00001B54 B409                <1>     mov ah, 09h
   344 00001B56 CD21                <1>     int 21h
   345                              <1>     return
    13                              <2> %%_ret:
    14 00001B58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> chdir:
   348 00001B59 F6055CE5FFFFFF      <1>     test byte [arg1Flg], -1
   349 00001B60 754D                <1>     jnz .changeDir
   350                              <1>     ;Print CWD
   351                              <1> .printCWD:
   352 00001B62 E86C110000          <1>     call putCWDInPrompt ;Exactly the same procedure
   353 00001B67 E84E0F0000          <1>     call printCRLF
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001B6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> .printDiskCWD:
   356                              <1> ;Print CWD for a specified drive
   357 00001B6D 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   358 00001B71 88D0                <1>     mov al, dl
   359 00001B73 0440                <1>     add al, "@" ;Get the UC letter
   360 00001B75 B43A                <1>     mov ah, ":"
   361 00001B77 488D3DE0E8FFFF      <1>     lea rdi, searchSpec
   362 00001B7E 66AB                <1>     stosw   ;Store X:, rdi+=2
   363 00001B80 8A05A5E4FFFF        <1>     mov al, byte [pathSep]
   364 00001B86 AA                  <1>     stosb   ;Store pathSep, inc rdi
   365 00001B87 B447                <1>     mov ah, 47h ;Get Current Working Directory
   366 00001B89 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   367 00001B8C CD21                <1>     int 21h
   368 00001B8E E8EC110000          <1>     call strlen
   369 00001B93 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   370 00001B99 B440                <1>     mov ah, 40h ;Write to handle
   371 00001B9B BB01000000          <1>     mov ebx, 1  ;STDOUT
   372 00001BA0 488D15B7E8FFFF      <1>     lea rdx, searchSpec
   373 00001BA7 CD21                <1>     int 21h
   374 00001BA9 E80C0F0000          <1>     call printCRLF
   375                              <1>     return
    13                              <2> %%_ret:
    14 00001BAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> .changeDir:
   377 00001BAF 8A0509E5FFFF        <1>     mov al, byte [arg1FCBret]
   378 00001BB5 3CFF                <1>     cmp al, -1 
   379 00001BB7 0F84BEFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   380 00001BBD 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   381 00001BC2 7520                <1>     jne .setPath
   382                              <1>     ;If we searched for a . or .., the fcb will be blank. Make sure we didn't search that
   383 00001BC4 0FB605F2E4FFFF      <1>     movzx eax, byte [arg1Off]
   384 00001BCB 488D354BE6FFFF      <1>     lea rsi, cmdBuffer
   385 00001BD2 4801C6              <1>     add rsi, rax
   386 00001BD5 8A0550E4FFFF        <1>     mov al, byte [pathSep]
   387 00001BDB 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   388 00001BDD 7405                <1>     je .setPath
   389 00001BDF 803E2E              <1>     cmp byte [rsi], "."
   390 00001BE2 7589                <1>     jne .printDiskCWD
   391                              <1> .setPath:
   392 00001BE4 E80D130000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   393 00001BE9 488D156EE8FFFF      <1>     lea rdx, searchSpec
   394 00001BF0 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001BF2 CD21                <1>     int 21h
   396 00001BF4 0F82A5FBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001BFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001BFB F605BAE4FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001C02 0F847CFBFFFF        <1>     jz badArgError
   402 00001C08 F605B0E4FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001C0F 0F856FFBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001C15 8A05A3E4FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001C1B 3CFF                <1>     cmp al, -1 
   407 00001C1D 0F8458FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001C23 E8CE120000          <1>     call buildCommandPath
   409 00001C28 488D152FE8FFFF      <1>     lea rdx, searchSpec
   410 00001C2F B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001C34 CD21                <1>     int 21h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C36 73(FA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001C38 488D1504EFFFFF      <1>     lea rdx, badMD
   415 00001C3F B800090000          <1>     mov eax, 0900h
   416 00001C44 CD21                <1>     int 21h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001C46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001C47 F6056EE4FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001C4E 0F8430FBFFFF        <1>     jz badArgError
   422 00001C54 F60564E4FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001C5B 0F8523FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001C61 8A0557E4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001C67 3CFF                <1>     cmp al, -1 
   427 00001C69 0F840CFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001C6F E882120000          <1>     call buildCommandPath
   429 00001C74 488D15E3E7FFFF      <1>     lea rdx, searchSpec
   430 00001C7B B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001C80 CD21                <1>     int 21h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C82 73(46)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001C84 488D15D5EEFFFF      <1>     lea rdx, badRD
   435 00001C8B B800090000          <1>     mov eax, 0900h
   436 00001C90 CD21                <1>     int 21h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001C92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001C93 F60522E4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001C9A 0F84E4FAFFFF        <1>     jz badArgError
   442 00001CA0 F60518E4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001CA7 0F84D7FAFFFF        <1>     jz badArgError
   444 00001CAD 488D3569E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001CB4 0FB60502E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001CBB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001CBE AC                  <1>     lodsb   ;Get first char in AL
   449 00001CBF 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001CC2 E815110000          <1>     call isALEndOfCommand
   451 00001CC7 0F82A5FAFFFF        <1>     jc badParamError
   452 00001CCD 488D3D4AE9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001CD4 AC                  <1>     lodsb
   455 00001CD5 E802110000          <1>     call isALEndOfCommand
   456 00001CDA 0F8492FAFFFF        <1>     je badParamError
   457 00001CE0 E8E1100000          <1>     call isALterminator
   458 00001CE5 7403                <1>     jz .endOfName1
   459 00001CE7 AA                  <1>     stosb
   460 00001CE8 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001CEA 31C0                <1>     xor eax, eax
   463 00001CEC AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001CED 488D3529E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001CF4 0FB605C5E3FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001CFB 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001CFE AC                  <1>     lodsb   ;Get first char in AL
   468 00001CFF 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001D02 E8D5100000          <1>     call isALEndOfCommand
   470 00001D07 0F8265FAFFFF        <1>     jc badParamError
   471 00001D0D 488D3D8AE9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001D14 AC                  <1>     lodsb
   474 00001D15 E8C2100000          <1>     call isALEndOfCommand
   475 00001D1A 740A                <1>     je .endOfName2
   476 00001D1C E8A5100000          <1>     call isALterminator
   477 00001D21 7403                <1>     jz .endOfName2
   478 00001D23 AA                  <1>     stosb
   479 00001D24 EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001D26 31C0                <1>     xor eax, eax
   482 00001D28 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001D29 488D35EEE8FFFF      <1>     lea rsi, sourcePath
   486 00001D30 488D3D67E9FFFF      <1>     lea rdi, destPath
   487 00001D37 B81E120000          <1>     mov eax, 121Eh
   488 00001D3C CD2F                <1>     int 2Fh
   489 00001D3E 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001D44 488D15D3E8FFFF      <1>     lea rdx, sourcePath
   493 00001D4B B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001D50 CD21                <1>     int 21h
   495 00001D52 0F821AFAFFFF        <1>     jc badParamError
   496 00001D58 668905BFE9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001D5F 0FB7D8              <1>     movzx ebx, ax   ;For bx
   499 00001D62 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   500 00001D67 CD21                <1>     int 21h
   501 00001D69 668915B2E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001D70 488D1527E9FFFF      <1>     lea rdx, destPath
   504 00001D77 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001D7C 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001D7E CD21                <1>     int 21h
   507 00001D80 0F82B8000000        <1>     jc .badExit
   508 00001D86 66890593E9FFFF      <1>     mov word [destHdl], ax
   509 00001D8D 31F6                <1>     xor esi, esi
   510 00001D8F 488D158EE9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001D96 B980000000          <1>     mov ecx, 128
   513 00001D9B 0FB71D7CE9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001DA2 B43F                <1>     mov ah, 3Fh ;Read
   515 00001DA4 CD21                <1>     int 21h
   516 00001DA6 0F8292000000        <1>     jc .badExit
   517 00001DAC 85C0                <1>     test eax, eax
   518 00001DAE 743A                <1>     jz .okExit
   519 00001DB0 01C6                <1>     add esi, eax
   520 00001DB2 89C1                <1>     mov ecx, eax
   521 00001DB4 0FB71D65E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001DBB B440                <1>     mov ah, 40h ;Write
   523 00001DBD CD21                <1>     int 21h
   524 00001DBF 727D                <1>     jc .badExit
   525 00001DC1 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001DC6 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001DC8 66F70551E9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001DD1 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001DD3 66F70546E9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001DDC 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001DDE 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001DE0 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001DE5 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001DE8 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001DEA E832000000          <1>     call .leaveCopyClose
   540 00001DEF 488D158FEAFFFF      <1>     lea rdx, crlf
   541 00001DF6 B409                <1>     mov ah, 09h
   542 00001DF8 CD21                <1>     int 21h
   543 00001DFA 488D154EF0FFFF      <1>     lea rdx, fourSpc
   544 00001E01 B409                <1>     mov ah, 09h
   545 00001E03 CD21                <1>     int 21h
   546 00001E05 B402                <1>     mov ah, 02h
   547 00001E07 B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001E09 CD21                <1>     int 21h
   549 00001E0B 488D15ACEBFFFF      <1>     lea rdx, copyOk
   550 00001E12 B409                <1>     mov ah, 09h
   551 00001E14 CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001E16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001E17 E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001E1C E948F9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001E21 668B1DF6E8FFFF      <1>     mov bx, word [sourceHdl]
   558 00001E28 B8003E0000          <1>     mov eax, 3E00h
   559 00001E2D CD21                <1>     int 21h
   560 00001E2F 668B1DEAE8FFFF      <1>     mov bx, word [destHdl]
   561 00001E36 B8003E0000          <1>     mov eax, 3E00h
   562 00001E3B CD21                <1>     int 21h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001E3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001E3E 668B1DD9E8FFFF      <1>     mov bx, word [sourceHdl]
   567 00001E45 6681FBFFFF          <1>     cmp bx, -1
   568 00001E4A 7407                <1>     je .skipSource
   569 00001E4C B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001E51 CD21                <1>     int 21h
   571                              <1> .skipSource:
   572 00001E53 668B1DC6E8FFFF      <1>     mov bx, word [destHdl]
   573 00001E5A 6681FBFFFF          <1>     cmp bx, -1
   574 00001E5F 0F840DF9FFFF        <1>     je badParamError
   575 00001E65 B8003E0000          <1>     mov eax, 3E00h
   576 00001E6A CD21                <1>     int 21h
   577 00001E6C E901F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
   580 00001E71 F60544E2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001E78 0F8406F9FFFF        <1>     jz badArgError
   582 00001E7E E873100000          <1>     call buildCommandPath
   583 00001E83 488D15D4E5FFFF      <1>     lea rdx, searchSpec
   584 00001E8A B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001E8F 31C9                <1>     xor ecx, ecx
   586 00001E91 CD21                <1>     int 21h
   587 00001E93 0F82EBF8FFFF        <1>     jc badArgError
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001E99 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001E9A 488D15C5EBFFFF      <1>     lea rdx, curDate
   591 00001EA1 B409                <1>     mov ah, 09h
   592 00001EA3 CD21                <1>     int 21h
   593 00001EA5 B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001EA7 CD21                <1>     int 21h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001EA9 66890D6AE7FFFF      <1>     mov word [td1], cx
   600 00001EB0 881566E7FFFF        <1>     mov byte [td3], dl
   601 00001EB6 883561E7FFFF        <1>     mov byte [td4], dh
   602 00001EBC 0FB6C0              <1>     movzx eax, al
   603 00001EBF 89C3                <1>     mov ebx, eax
   604 00001EC1 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001EC3 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001EC5 488D1576EBFFFF      <1>     lea rdx, dayName
   607 00001ECC 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001ED0 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001ED5 BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001EDA B440                <1>     mov ah, 40h ;Write to handle
   611 00001EDC CD21                <1>     int 21h
   612 00001EDE B220                <1>     mov dl, " "
   613 00001EE0 B402                <1>     mov ah, 02h
   614 00001EE2 CD21                <1>     int 21h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   618 00001EE4 0FB7052FE7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001EEB C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001EEE 0FB61D28E7FFFF      <1>     movzx ebx, byte [td4]
   621 00001EF5 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001EF8 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001EFA 0FB61D1BE7FFFF      <1>     movzx ebx, byte [td3]
   624 00001F01 09D8                <1>     or eax, ebx
   625 00001F03 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001F08 E8C30B0000          <1>     call printDate
   627                              <1> 
   628 00001F0D 488D1563EBFFFF      <1>     lea rdx, newDate
   629 00001F14 B409                <1>     mov ah, 09h
   630 00001F16 CD21                <1>     int 21h
   631 00001F18 488D1577EBFFFF      <1>     lea rdx, ukDate
   632 00001F1F 488D0563EBFFFF      <1>     lea rax, usDate
   633 00001F26 488D1D76EBFFFF      <1>     lea rbx, jpDate
   634 00001F2D 803D02E1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001F34 480F47D3            <1>     cmova rdx, rbx
   636 00001F38 480F42D0            <1>     cmovb rdx, rax
   637 00001F3C B409                <1>     mov ah, 09h
   638 00001F3E CD21                <1>     int 21h
   639                              <1> 
   640 00001F40 488D1556E2FFFF      <1>     lea rdx, inBuffer
   641 00001F47 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   642 00001F4A B40A                <1>     mov ah, 0Ah
   643 00001F4C CD21                <1>     int 21h
   644 00001F4E 52                  <1>     push rdx
   645 00001F4F 488D152FE9FFFF      <1>     lea rdx, crlf
   646 00001F56 B409                <1>     mov ah, 09h
   647 00001F58 CD21                <1>     int 21h
   648 00001F5A 5A                  <1>     pop rdx
   649 00001F5B 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F5F 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F61 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001F62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001F63 488D1555EBFFFF      <1>     lea rdx, curTime
   655 00001F6A B409                <1>     mov ah, 09h
   656 00001F6C CD21                <1>     int 21h
   657 00001F6E B42C                <1>     mov ah, 2Ch ;DOS get time
   658 00001F70 CD21                <1>     int 21h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 00001F72 880DA2E6FFFF        <1>     mov byte [td1], cl
   664 00001F78 882D9DE6FFFF        <1>     mov byte [td2], ch
   665 00001F7E 881598E6FFFF        <1>     mov byte [td3], dl
   666 00001F84 883593E6FFFF        <1>     mov byte [td4], dh
   667 00001F8A 0FB6C5              <1>     movzx eax, ch
   668 00001F8D E8D20C0000          <1>     call printTime.printHours
   669                              <1> 
   670 00001F92 8A15ABE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 00001F98 B402                <1>     mov ah, 02h
   672 00001F9A CD21                <1>     int 21h
   673                              <1> 
   674 00001F9C 0FB60577E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 00001FA3 E8AC0C0000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 00001FA8 8A1595E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 00001FAE B402                <1>     mov ah, 02h
   679 00001FB0 CD21                <1>     int 21h
   680                              <1> 
   681 00001FB2 0FB60564E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 00001FB9 E8960C0000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 00001FBE B22E                <1>     mov dl, "."
   685 00001FC0 B402                <1>     mov ah, 02h
   686 00001FC2 CD21                <1>     int 21h
   687                              <1> 
   688 00001FC4 0FB60551E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001FCB E8840C0000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001FD0 488D15F9EAFFFF      <1>     lea rdx, newTime
   692 00001FD7 B409                <1>     mov ah, 09h
   693 00001FD9 CD21                <1>     int 21h
   694                              <1> 
   695 00001FDB 488D15BBE1FFFF      <1>     lea rdx, inBuffer
   696 00001FE2 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   697 00001FE5 B40A                <1>     mov ah, 0Ah
   698 00001FE7 CD21                <1>     int 21h
   699 00001FE9 52                  <1>     push rdx
   700 00001FEA 488D1594E8FFFF      <1>     lea rdx, crlf
   701 00001FF1 B409                <1>     mov ah, 09h
   702 00001FF3 CD21                <1>     int 21h
   703 00001FF5 5A                  <1>     pop rdx
   704 00001FF6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   705                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FFA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FFC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001FFD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> ctty:
   708 00001FFE F605B7E0FFFFFF      <1>     test byte [arg1Flg], -1
   709 00002005 0F8479F7FFFF        <1>     jz badArgError
   710 0000200B F605ADE0FFFFFF      <1>     test byte [arg2Flg], -1
   711 00002012 0F856CF7FFFF        <1>     jnz badArgError
   712 00002018 488D35FEE1FFFF      <1>     lea rsi, cmdBuffer
   713 0000201F 0FB60597E0FFFF      <1>     movzx eax, byte [arg1Off]
   714 00002026 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   715 00002029 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   716 0000202D 750F                <1>     jne .noDrive
   717 0000202F 0FB60588E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   718 00002036 3CFF                <1>     cmp al, -1
   719 00002038 0F843DF7FFFF        <1>     je badDriveError
   720                              <1> .noDrive:
   721                              <1>     ;Now we open the provided file
   722 0000203E E8B70F0000          <1>     call copyArgumentToSearchSpec
   723 00002043 488D1514E4FFFF      <1>     lea rdx, searchSpec
   724 0000204A B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   725 0000204F CD21                <1>     int 21h
   726 00002051 0F8236F7FFFF        <1>     jc badFileError
   727 00002057 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   728 0000205A B800440000          <1>     mov eax, 4400h  ;Get device word
   729 0000205F CD21                <1>     int 21h
   730 00002061 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   731 00002064 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   732                              <1>     ;Now we set this handle to be STDIO
   733 00002066 80CA03              <1>     or dl, 3    ;Set STDIO bits
   734 00002069 30F6                <1>     xor dh, dh
   735 0000206B B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   736 00002070 CD21                <1>     int 21h
   737                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   738 00002072 31C9                <1>     xor ecx, ecx    ;STDIN
   739 00002074 B446                <1>     mov ah, 46h
   740 00002076 CD21                <1>     int 21h
   741 00002078 FFC1                <1>     inc ecx         ;STDOUT
   742 0000207A B446                <1>     mov ah, 46h
   743 0000207C CD21                <1>     int 21h
   744 0000207E FFC1                <1>     inc ecx         ;STDERR
   745 00002080 B446                <1>     mov ah, 46h
   746 00002082 CD21                <1>     int 21h
   747 00002084 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   748 00002086 CD21                <1>     int 21h
   749                              <1>     return
    13                              <2> %%_ret:
    14 00002088 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> .badCharDev:
   751 00002089 488D153FEBFFFF      <1>     lea rdx, badDev
   752 00002090 B409                <1>     mov ah, 09h
   753 00002092 CD21                <1>     int 21h
   754 00002094 B43E                <1>     mov ah, 3Eh ;Close opened handle
   755 00002096 CD21                <1>     int 21h
   756                              <1>     return
    13                              <2> %%_ret:
    14 00002098 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> cls:  
   759 00002099 B800440000          <1>     mov eax, 4400h  ;Get device info
   760 0000209E BB01000000          <1>     mov ebx, 1      ;for handle 1
   761 000020A3 CD21                <1>     int 21h         ;in dx
   762 000020A5 F7C280000000        <1>     test edx, devCharDev
   763 000020AB 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   764 000020AD F7C210000000        <1>     test edx, charDevFastOut
   765 000020B3 743E                <1>     jz .doAnsi
   766                              <1>     ;Test if Int 29h uses Int 30h
   767                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   768                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   769 000020B5 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   770 000020BA CD21                <1>     int 21h
   771                              <1> .biosCheck:
   772 000020BC 66813BCD30          <1>     cmp word [rbx], 30CDh
   773 000020C1 740C                <1>     je .biosConfirmed
   774 000020C3 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   775 000020C8 7429                <1>     je .doAnsi
   776 000020CA 48FFC3              <1>     inc rbx
   777 000020CD EBED                <1>     jmp short .biosCheck
   778                              <1> .biosConfirmed:
   779                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   780 000020CF B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   781 000020D1 31DB                <1>     xor ebx, ebx
   782 000020D3 CD30                <1>     int 30h
   783 000020D5 B40F                <1>     mov ah, 0Fh ;Get screen mode
   784 000020D7 CD30                <1>     int 30h
   785 000020D9 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   786 000020DC FECA                <1>     dec dl
   787 000020DE B619                <1>     mov dh, 25  ;Number of rows is standard
   788 000020E0 31C0                <1>     xor eax, eax
   789 000020E2 89C1                <1>     mov ecx, eax
   790 000020E4 B707                <1>     mov bh, 7   ;Screen attributes
   791 000020E6 B406                <1>     mov ah, 6   ;Scroll
   792 000020E8 CD30                <1>     int 30h
   793 000020EA 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   794 000020EC B700                <1>     mov bh, 0   ;Page 0
   795 000020EE B402                <1>     mov ah, 2
   796 000020F0 CD30                <1>     int 30h
   797                              <1>     return
    13                              <2> %%_ret:
    14 000020F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .doAnsi:
   799                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   800                              <1> ;4 chars in the ansi routine
   801                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   802                              <1> ; understand ANSI codes
   803 000020F3 488D3551EDFFFF      <1>     lea rsi, ansiCls
   804 000020FA B904000000          <1>     mov ecx, 4
   805 000020FF B406                <1>     mov ah, 06h ;Raw char output
   806                              <1> .ansiLp:
   807 00002101 AC                  <1>     lodsb   ;Get the char in 
   808 00002102 88C2                <1>     mov dl, al
   809 00002104 CD21                <1>     int 21h
   810 00002106 FFC9                <1>     dec ecx
   811 00002108 75F7                <1>     jnz .ansiLp
   812                              <1>     return
    13                              <2> %%_ret:
    14 0000210A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> break:
   815 0000210B F605AADFFFFFFF      <1>     test byte [arg1Flg], -1
   816 00002112 752D                <1>     jnz .argumentProvided
   817                              <1>     ;Here we just get the status of break
   818 00002114 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   819 00002119 CD21                <1>     int 21h
   820 0000211B 88D3                <1>     mov bl, dl
   821 0000211D 488D154DEBFFFF      <1>     lea rdx, breakIs
   822 00002124 B409                <1>     mov ah, 09h
   823 00002126 CD21                <1>     int 21h
   824 00002128 488D153DEBFFFF      <1>     lea rdx, onMes
   825 0000212F 488D0D30EBFFFF      <1>     lea rcx, offMes
   826 00002136 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   827 00002138 480F44D1            <1>     cmovz rdx, rcx
   828 0000213C B409                <1>     mov ah, 09h
   829 0000213E CD21                <1>     int 21h
   830                              <1>     return
    13                              <2> %%_ret:
    14 00002140 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .argumentProvided:
   832 00002141 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   833 00002145 AD                  <1>     lodsd   ;Read the word
   834 00002146 89C3                <1>     mov ebx, eax
   835 00002148 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   836 0000214D C1EB10              <1>     shr ebx, 10h     ;Get high word low
   837 00002150 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   838 00002155 7416                <1>     je .maybeOn
   839 00002157 663D4F46            <1>     cmp ax, "OF"
   840 0000215B 7523                <1>     jne .badOnOff
   841 0000215D 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   842 00002162 6681FB4620          <1>     cmp bx, "F "
   843 00002167 7517                <1>     jne .badOnOff
   844                              <1>     ;Set off
   845 00002169 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   846 0000216B EB0B                <1>     jmp short .setBreak
   847                              <1> .maybeOn:
   848 0000216D 663D4F4E            <1>     cmp ax, "ON"
   849 00002171 750D                <1>     jne .badOnOff
   850                              <1>     ;Set on
   851 00002173 BA01000000          <1>     mov edx, 1
   852                              <1> .setBreak:
   853 00002178 B801330000          <1>     mov eax, 3301h  ;Set break
   854 0000217D CD21                <1>     int 21h
   855                              <1>     return
    13                              <2> %%_ret:
    14 0000217F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .badOnOff:
   857 00002180 488D15D4ECFFFF      <1>     lea rdx, badOnOff
   858 00002187 B409                <1>     mov ah, 09h
   859 00002189 CD21                <1>     int 21h
   860                              <1>     return
    13                              <2> %%_ret:
    14 0000218B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   861                              <1> 
   862                              <1> verify:
   863 0000218C F60529DFFFFFFF      <1>     test byte [arg1Flg], -1
   864 00002193 752D                <1>     jnz .argumentProvided
   865                              <1>     ;Here we just get the status of break
   866 00002195 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   867 0000219A CD21                <1>     int 21h
   868 0000219C 88C3                <1>     mov bl, al
   869 0000219E 488D15D6EAFFFF      <1>     lea rdx, verifyIs
   870 000021A5 B409                <1>     mov ah, 09h
   871 000021A7 CD21                <1>     int 21h
   872 000021A9 488D15BCEAFFFF      <1>     lea rdx, onMes
   873 000021B0 488D0DAFEAFFFF      <1>     lea rcx, offMes
   874 000021B7 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   875 000021B9 480F44D1            <1>     cmovz rdx, rcx
   876 000021BD B409                <1>     mov ah, 09h
   877 000021BF CD21                <1>     int 21h
   878                              <1>     return
    13                              <2> %%_ret:
    14 000021C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .argumentProvided:
   880 000021C2 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   881 000021C6 AD                  <1>     lodsd   ;Read the word
   882 000021C7 89C3                <1>     mov ebx, eax
   883 000021C9 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   884 000021CE C1EB10              <1>     shr ebx, 10h     ;Get high word low
   885 000021D1 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   886 000021D6 7416                <1>     je .maybeOn
   887 000021D8 663D4F46            <1>     cmp ax, "OF"
   888 000021DC 751F                <1>     jne .badOnOff
   889 000021DE 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   890 000021E3 6681FB4620          <1>     cmp bx, "F "
   891 000021E8 7513                <1>     jne .badOnOff
   892                              <1>     ;Set off
   893 000021EA 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   894 000021EC EB0A                <1>     jmp short .setVerify
   895                              <1> .maybeOn:
   896 000021EE 663D4F4E            <1>     cmp ax, "ON"
   897 000021F2 7509                <1>     jne .badOnOff
   898                              <1>     ;Set on
   899 000021F4 31C0                <1>     xor eax, eax
   900 000021F6 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   901                              <1> .setVerify:
   902 000021F8 B42E                <1>     mov ah, 2Eh  ;Set Verify
   903 000021FA CD21                <1>     int 21h
   904                              <1>     return
    13                              <2> %%_ret:
    14 000021FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> .badOnOff:
   906 000021FD 488D1557ECFFFF      <1>     lea rdx, badOnOff
   907 00002204 B409                <1>     mov ah, 09h
   908 00002206 CD21                <1>     int 21h
   909                              <1>     return
    13                              <2> %%_ret:
    14 00002208 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> 
   911                              <1> rename:
   912 00002209 F605ACDEFFFFFF      <1>     test byte [arg1Flg], -1
   913 00002210 0F846EF5FFFF        <1>     jz badArgError
   914 00002216 F605A2DEFFFFFF      <1>     test byte [arg2Flg], -1
   915 0000221D 0F8461F5FFFF        <1>     jz badArgError
   916 00002223 488D35F3DFFFFF      <1>     lea rsi, cmdBuffer
   917 0000222A 0FB6058CDEFFFF      <1>     movzx eax, byte [arg1Off]
   918 00002231 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   919                              <1>     ;rsi points to terminating char
   920 00002234 AC                  <1>     lodsb   ;Get first char in AL
   921 00002235 48FFCE              <1>     dec rsi ;Go back to this char
   922 00002238 E89F0B0000          <1>     call isALEndOfCommand
   923 0000223D 0F822FF5FFFF        <1>     jc badParamError
   924 00002243 488D3DD4E3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   925                              <1> .copyName1:
   926 0000224A AC                  <1>     lodsb
   927 0000224B E88C0B0000          <1>     call isALEndOfCommand
   928 00002250 0F841CF5FFFF        <1>     je badParamError
   929 00002256 E86B0B0000          <1>     call isALterminator
   930 0000225B 7403                <1>     jz .endOfName1
   931 0000225D AA                  <1>     stosb
   932 0000225E EBEA                <1>     jmp short .copyName1
   933                              <1> .endOfName1:
   934 00002260 31C0                <1>     xor eax, eax
   935 00002262 AA                  <1>     stosb   ;Store this 0 at rdi
   936 00002263 488D35B3DFFFFF      <1>     lea rsi, cmdBuffer
   937 0000226A 0FB6054FDEFFFF      <1>     movzx eax, byte [arg2Off]
   938 00002271 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   939 00002274 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   940 00002278 0F84F4F4FFFF        <1>     je badParamError
   941 0000227E AC                  <1>     lodsb   ;Get first char in AL
   942 0000227F 48FFCE              <1>     dec rsi ;Go back to this char
   943 00002282 E8550B0000          <1>     call isALEndOfCommand
   944 00002287 0F82E5F4FFFF        <1>     jc badParamError
   945 0000228D 488D3D0AE4FFFF      <1>     lea rdi, destPath
   946                              <1> .copyName2:
   947 00002294 AC                  <1>     lodsb
   948 00002295 E8420B0000          <1>     call isALEndOfCommand
   949 0000229A 740A                <1>     je .endOfName2
   950 0000229C E8250B0000          <1>     call isALterminator
   951 000022A1 7403                <1>     jz .endOfName2
   952 000022A3 AA                  <1>     stosb
   953 000022A4 EBEE                <1>     jmp short .copyName2
   954                              <1> .endOfName2:
   955 000022A6 31C0                <1>     xor eax, eax
   956 000022A8 AA                  <1>     stosb   ;Store this 0 at rdi
   957 000022A9 488D156EE3FFFF      <1>     lea rdx, sourcePath
   958 000022B0 488D3DE7E3FFFF      <1>     lea rdi, destPath
   959 000022B7 B800560000          <1>     mov eax, 5600h
   960 000022BC CD21                <1>     int 21h
   961                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000022BE 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000022C0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   962 000022C1 3C0F                <1>     cmp al, errBadDrv
   963 000022C3 0F84B2F4FFFF        <1>     je badDriveError
   964 000022C9 3C0B                <1>     cmp al, errBadFmt
   965 000022CB 0F84CEF4FFFF        <1>     je badDirError
   966 000022D1 E9C0F4FFFF          <1>     jmp badDupFnf
   967                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   968                              <1> touch:
   969                              <1> ;Temporarily used to create files
   970 000022D6 F605DFDDFFFFFF      <1>     test byte [arg1Flg], -1
   971 000022DD 0F84A1F4FFFF        <1>     jz badArgError
   972 000022E3 E80E0C0000          <1>     call buildCommandPath
   973 000022E8 488D156FE1FFFF      <1>     lea rdx, searchSpec
   974 000022EF B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   975 000022F4 31C9                <1>     xor ecx, ecx
   976 000022F6 CD21                <1>     int 21h
   977 000022F8 720B                <1>     jc .touchError
   978 000022FA 0FB7D8              <1>     movzx ebx, ax
   979 000022FD B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   980 00002302 CD21                <1>     int 21h
   981                              <1>     return
    13                              <2> %%_ret:
    14 00002304 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .touchError:
   983 00002305 488D15FDEAFFFF      <1>     lea rdx, touchErr
   984 0000230C E995F4FFFF          <1>     jmp badCmn
   985                              <1> 
   986                              <1> join:
   987                              <1> ;Mock join command, to test join. Make an external command.
   988                              <1> ;Mounts the A drive on C:\JOINTEST,0
   989 00002311 F605AF000000FF      <1>     test byte [.joinOn], -1
   990 00002318 743D                <1>     jz .okJoin
   991                              <1> .joindisable:
   992 0000231A B800520000          <1>     mov eax, 5200h  
   993 0000231F CD21                <1>     int 21h
   994                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
   995 00002321 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
   996 00002326 CD2A                <1>     int 2Ah
   997 00002328 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
   998 0000232C 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
   999 00002330 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1000 00002336 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1001 00002339 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1002 0000233D FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1003 00002340 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1004 00002345 CD2A                <1>     int 2Ah
  1005 00002347 C6057900000000      <1>     mov byte [.joinOn], 0
  1006 0000234E 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1007 00002355 EB45                <1>     jmp short .joinExit
  1008                              <1> .okJoin:
  1009 00002357 C60569000000FF      <1>     mov byte [.joinOn], -1
  1010 0000235E B800520000          <1>     mov eax, 5200h  
  1011 00002363 CD21                <1>     int 21h
  1012 00002365 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1013 00002369 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1014                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1015 0000236D B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1016 00002372 CD2A                <1>     int 2Ah
  1017 00002374 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1018 0000237A 4889DF              <1>     mov rdi, rbx
  1019 0000237D 488D3544000000      <1>     lea rsi, .joinPath
  1020 00002384 B90C000000          <1>     mov ecx, .joinPathL
  1021 00002389 F3A4                <1>     rep movsb   ;Copy chars over
  1022 0000238B FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1023 0000238E B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1024 00002393 CD2A                <1>     int 2Ah
  1025 00002395 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1026                              <1> .joinExit:
  1027 0000239C B800090000          <1>     mov eax, 0900h
  1028 000023A1 CD21                <1>     int 21h
  1029                              <1>     return
    13                              <2> %%_ret:
    14 000023A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1030 000023A4 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1030 000023AD 61626C65640D0A24    <1>
  1031 000023B5 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1031 000023BE 7361626C65640D0A24  <1>
  1032 000023C7 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1033 000023C8 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1033 000023D1 535400              <1>
  1034                              <1> .joinPathL  equ $ - .joinPath 
  1035                              <1> 
  1036                              <1> subst:
  1037                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1038                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1039 000023D4 F605D3000000FF      <1>     test byte [.substOn], -1
  1040 000023DB 7443                <1>     jz .okSubst
  1041                              <1> .substdisable:
  1042 000023DD B800520000          <1>     mov eax, 5200h  
  1043 000023E2 CD21                <1>     int 21h
  1044                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1045 000023E4 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1046 000023E9 CD2A                <1>     int 2Ah
  1047 000023EB 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1048 000023EF 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1049 000023F6 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1050 000023FC C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1051 000023FF C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1052 00002403 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1053 00002409 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1054 0000240E CD2A                <1>     int 2Ah
  1055 00002410 C6059700000000      <1>     mov byte [.substOn], 0
  1056 00002417 488D157D000000      <1>     lea rdx, .substDisableMsg
  1057 0000241E EB61                <1>     jmp short .substExit
  1058                              <1> .okSubst:
  1059 00002420 C60587000000FF      <1>     mov byte [.substOn], -1
  1060 00002427 B800520000          <1>     mov eax, 5200h  
  1061 0000242C CD21                <1>     int 21h
  1062 0000242E B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1063 00002433 CD2A                <1>     int 2Ah
  1064 00002435 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1065 00002439 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1066 00002440 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1067 00002444 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1068 0000244B 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1069 0000244F C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1070                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1071 00002456 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1072 0000245C 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1073 00002462 4889DF              <1>     mov rdi, rbx
  1074 00002465 488D3543000000      <1>     lea rsi, .substPath
  1075 0000246C B90C000000          <1>     mov ecx, .substPathL
  1076 00002471 F3A4                <1>     rep movsb   ;Copy chars over
  1077 00002473 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1078 00002478 CD2A                <1>     int 2Ah
  1079 0000247A 488D1508000000      <1>     lea rdx, .substEnableMsg
  1080                              <1> .substExit:
  1081 00002481 B800090000          <1>     mov eax, 0900h
  1082 00002486 CD21                <1>     int 21h
  1083                              <1>     return
    13                              <2> %%_ret:
    14 00002488 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084 00002489 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1084 00002492 6E61626C65640D0A24  <1>
  1085 0000249B 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1085 000024A4 697361626C65640D0A- <1>
  1085 000024AD 24                  <1>
  1086 000024AE 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1087 000024AF 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1087 000024B8 535400              <1>
  1088                              <1> .substPathL  equ $ - .substPath 
  1089                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1090                              <1> truename:
  1091 000024BB F605FADBFFFFFF      <1>     test byte [arg1Flg], -1
  1092 000024C2 0F84BCF2FFFF        <1>     jz badArgError
  1093                              <1>     ;Explicitly call Truename if we remove truename from this function
  1094 000024C8 0FB605EEDBFFFF      <1>     movzx eax, byte [arg1Off]
  1095 000024CF 488D1547DDFFFF      <1>     lea rdx, cmdBuffer
  1096 000024D6 4801C2              <1>     add rdx, rax    ;Go to the start of the pathname
  1097 000024D9 B978000000          <1>     mov ecx, 120    ;Only search within 128 chars
  1098 000024DE B00D                <1>     mov al, CR     ;Search for the first space char after the argument
  1099 000024E0 4889D7              <1>     mov rdi, rdx
  1100 000024E3 F2AE                <1>     repne scasb
  1101 000024E5 48FFCF              <1>     dec rdi ;Go back a char
  1102 000024E8 C60700              <1>     mov byte [rdi], 0   ;Make ASCIIZ
  1103 000024EB 4889FD              <1>     mov rbp, rdi    ;Have rbp point to the end of the string
  1104 000024EE 4889D6              <1>     mov rsi, rdx    ;Point rsi to start of path
  1105 000024F1 488D3D66DFFFFF      <1>     lea rdi, searchSpec ;Store the path here
  1106 000024F8 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1107 000024FD CD21                <1>     int 21h
  1108 000024FF 730D                <1>     jnc .writePath
  1109 00002501 3C02                <1>     cmp al, 2
  1110 00002503 0F8484F2FFFF        <1>     je badFileError
  1111 00002509 E964F2FFFF          <1>     jmp badParamError
  1112                              <1> .writePath:
  1113 0000250E 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1114 00002511 B9FFFFFFFF          <1>     mov ecx, -1
  1115 00002516 30C0                <1>     xor al, al
  1116 00002518 F2AE                <1>     repne scasb     ;Get the new len
  1117 0000251A F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1118 0000251C FFC9                <1>     dec ecx
  1119 0000251E BB01000000          <1>     mov ebx, 01
  1120 00002523 B440                <1>     mov ah, 40h
  1121 00002525 CD21                <1>     int 21h
  1122 00002527 E88E050000          <1>     call printCRLF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 0000252C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> label:
  1126                              <1> ;Displays/Changes/Deletes the file label
  1127 0000252D 488D1508000000      <1>     lea rdx, .l1
  1128 00002534 B800090000          <1>     mov eax, 0900h
  1129 00002539 CD21                <1>     int 21h
  1130                              <1>     return
    13                              <2> %%_ret:
    14 0000253B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131 0000253C 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1131 00002545 6E20756E696D706C65- <1>
  1131 0000254E 6D656E7465640D0A24  <1>
  1132                              <1> 
  1133                              <1> mklbl:
  1134                              <1>     ;lea rdx, .l1
  1135                              <1>     ;mov cx, 08h ;Make a label
  1136                              <1>     ;mov eax, 3C00h
  1137                              <1>     ;int 21h
  1138                              <1> 
  1139                              <1>     ;mov ebx, eax
  1140                              <1>     ;mov eax, 3E00h  ;Close the handle
  1141                              <1>     ;int 21h
  1142                              <1>     ;return
  1143                              <1> 
  1144                              <1> ;.l1: db "TESTLABEL",0
  1145 00002557 488D1508000000      <1>     lea rdx, .l1
  1146 0000255E B800160000          <1>     mov eax, 1600h  ;Create FCB
  1147 00002563 CD21                <1>     int 21h
  1148                              <1>     return
    13                              <2> %%_ret:
    14 00002565 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> .l1:
  1150                              <1>     istruc exFcb
  1151 00002566 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1152 00002567 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1153 0000256D 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1154 0000256E 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1155 00002576 4C2020              <1>     at exFcb.fileext,   db "L  "
  1156 00002579 00000000            <1>     at exFcb.curBlock,  dd 0
  1157 0000257D 00<rep 15h>         <1>     iend 
  1158                              <1> rmlbl:
  1159 00002592 488D1508000000      <1>     lea rdx, .l1
  1160 00002599 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1161 0000259E CD21                <1>     int 21h
  1162                              <1>     return
    13                              <2> %%_ret:
    14 000025A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1163                              <1> .l1:    ;FCB to volume label
  1164                              <1>     istruc exFcb
  1165 000025A1 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1166 000025A2 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1167 000025A8 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1168 000025A9 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1169 000025B1 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1170 000025B4 00000000            <1>     at exFcb.curBlock,  dd 0
  1171 000025B8 00<rep 15h>         <1>     iend 
  1172                              <1> 
  1173                              <1> rnlbl:
  1174 000025CD 488D1508000000      <1>     lea rdx, .l1
  1175 000025D4 B800170000          <1>     mov eax, 1700h
  1176 000025D9 CD21                <1>     int 21h
  1177                              <1>     return
    13                              <2> %%_ret:
    14 000025DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1178                              <1> .l1:
  1179                              <1>     istruc exRenFcb
  1180 000025DC FF                  <1>     at exRenFcb.extSig,     db -1
  1181 000025DD 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1182 000025E3 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1183 000025E4 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1184 000025EC 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1185 000025EF 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1185 000025F8 4C414245            <1>
  1186 000025FC 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1187 000025FF 00<rep 4h>          <1>     iend
  1188                              <1> volume:
  1189 00002603 488D3515DCFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1190 0000260A E8D4070000          <1>     call skipSeparators
  1191 0000260F 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1192 00002616 E8C8070000          <1>     call skipSeparators
  1193 0000261B AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1194 0000261C E8BB070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1195 00002621 7507                <1>     jnz .checkDriveLetter
  1196 00002623 E852070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1197 00002628 EB35                <1>     jmp short .dirEP
  1198                              <1> .checkDriveLetter:
  1199 0000262A 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1200 0000262D 0F8548F1FFFF        <1>     jne badDriveError
  1201 00002633 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1202 00002636 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1203 00002639 E8A5070000          <1>     call skipSeparators
  1204 0000263E AC                  <1>     lodsb   ;Get the non-space char in al
  1205 0000263F E898070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1206 00002644 0F8531F1FFFF        <1>     jne badDriveError
  1207                              <1> ;This argument should've been parsed into FCB1 so use that result
  1208 0000264A 8A056EDAFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1209 00002650 A8FF                <1>     test al, -1
  1210 00002652 0F8523F1FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1211 00002658 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1212 0000265D FFC8                <1>     dec eax ;Convert to 0 based number
  1213                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1214 0000265F E8B3090000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1215 00002664 488D1583DFFFFF      <1>     lea rdx, volFcb
  1216 0000266B FFC0                <1>     inc eax ;Get 1 based drive number
  1217 0000266D 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1218 0000266F 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1219 00002672 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1220 00002677 CD21                <1>     int 21h
  1221 00002679 50                  <1>     push rax
  1222                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1223 0000267A 488D1504E2FFFF      <1>     lea rdx, crlf
  1224 00002681 B409                <1>     mov ah, 09h
  1225 00002683 CD21                <1>     int 21h
  1226 00002685 488D157EE4FFFF      <1>     lea rdx, volMes
  1227 0000268C B409                <1>     mov ah, 09h
  1228 0000268E CD21                <1>     int 21h
  1229 00002690 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1230 00002692 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1231 00002695 B402                <1>     mov ah, 02h
  1232 00002697 CD21                <1>     int 21h
  1233 00002699 58                  <1>     pop rax
  1234 0000269A 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1235 0000269C 7409                <1>     jz .volIDOk
  1236 0000269E 488D157CE4FFFF      <1>     lea rdx, volNo
  1237 000026A5 EB19                <1>     jmp short .volEndPrint
  1238                              <1> .volIDOk:
  1239 000026A7 488D156EE4FFFF      <1>     lea rdx, volOk
  1240 000026AE B409                <1>     mov ah, 09h
  1241 000026B0 CD21                <1>     int 21h
  1242 000026B2 C6052CDAFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1243 000026B9 488D151ADAFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1244                              <1> .volEndPrint:
  1245 000026C0 B409                <1>     mov ah, 09h
  1246 000026C2 CD21                <1>     int 21h
  1247 000026C4 488D15BAE1FFFF      <1>     lea rdx, crlf
  1248 000026CB B409                <1>     mov ah, 09h
  1249 000026CD CD21                <1>     int 21h
  1250                              <1>     return
    13                              <2> %%_ret:
    14 000026CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1251                              <1> 
  1252                              <1> version:
  1253 000026D0 488D15AEE1FFFF      <1>     lea rdx, crlf
  1254 000026D7 B409                <1>     mov ah, 09h
  1255 000026D9 CD21                <1>     int 21h
  1256 000026DB 488D1516E4FFFF      <1>     lea rdx, dosVer
  1257 000026E2 B409                <1>     mov ah, 09h
  1258 000026E4 CD21                <1>     int 21h
  1259 000026E6 E80C000000          <1>     call .printVersionNumber
  1260 000026EB 488D1593E1FFFF      <1>     lea rdx, crlf
  1261 000026F2 B409                <1>     mov ah, 09h
  1262 000026F4 CD21                <1>     int 21h
  1263                              <1>     return
    13                              <2> %%_ret:
    14 000026F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1264                              <1> .printVersionNumber:
  1265 000026F7 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1266 000026F9 CD21                <1>     int 21h
  1267 000026FB 50                  <1>     push rax
  1268 000026FC 0FB6C0              <1>     movzx eax, al
  1269 000026FF E811080000          <1>     call printDecimalWord
  1270 00002704 B22E                <1>     mov dl, "."
  1271 00002706 B402                <1>     mov ah, 02h
  1272 00002708 CD21                <1>     int 21h
  1273 0000270A 58                  <1>     pop rax
  1274 0000270B 0FB6C4              <1>     movzx eax, ah
  1275 0000270E E802080000          <1>     call printDecimalWord
  1276                              <1>     return
    13                              <2> %%_ret:
    14 00002713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1277                              <1> 
  1278                              <1> 
  1279                              <1> memory:
  1280 00002714 488B1D04D9FFFF      <1>     mov rbx, qword [sysVars]
  1281 0000271B 4885DB              <1>     test rbx, rbx
  1282 0000271E 7510                <1>     jnz .sysvarsOK
  1283 00002720 488D1583E6FFFF      <1>     lea rdx, memBad0
  1284 00002727 B409                <1>     mov ah, 09h
  1285 00002729 CD21                <1>     int 21h
  1286 0000272B E988080000          <1>     jmp freezePC.altEP
  1287                              <1> .sysvarsOK:
  1288                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1289                              <1>     ; and rcx to store Application memory
  1290 00002730 31F6                <1>     xor esi, esi
  1291 00002732 31FF                <1>     xor edi, edi
  1292 00002734 31ED                <1>     xor ebp, ebp
  1293 00002736 31C9                <1>     xor ecx, ecx
  1294 00002738 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1295 0000273C 488B1B              <1>     mov rbx, qword [rbx]
  1296                              <1> .memLp:
  1297 0000273F 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1298 00002742 7409                <1>     je .validMCB
  1299 00002744 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1300 00002747 0F8501010000        <1>     jne .badMCBFound
  1301                              <1> .validMCB:
  1302 0000274D 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1303 00002750 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1304 00002754 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1305 0000275C 7505                <1>     jne .notDOS
  1306 0000275E 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1307 00002761 EB21                <1>     jmp short .gotoNext
  1308                              <1> .notDOS:
  1309 00002763 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1310 0000276B 7505                <1>     jne .notFree
  1311 0000276D 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1312 00002770 EB12                <1>     jmp short .gotoNext
  1313                              <1> .notFree:
  1314 00002772 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1315 0000277A 7505                <1>     jne .notHole
  1316 0000277C 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1317 0000277F EB03                <1>     jmp short .gotoNext
  1318                              <1> .notHole:
  1319 00002781 4801C1              <1>     add rcx, rax    ;Add to Application count
  1320                              <1> .gotoNext:
  1321 00002784 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1322 00002787 7407                <1>     je .endOfWalk
  1323 00002789 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1324 0000278E EBAF                <1>     jmp short .memLp
  1325                              <1> .endOfWalk:
  1326                              <1>     
  1327 00002790 488D1574E5FFFF      <1>     lea rdx, memDOS
  1328 00002797 B409                <1>     mov ah, 09h
  1329 00002799 CD21                <1>     int 21h
  1330 0000279B 4889F0              <1>     mov rax, rsi
  1331 0000279E E89D000000          <1>     call .mcbPrintAmount
  1332 000027A3 488D15F9E5FFFF      <1>     lea rdx, memByte
  1333 000027AA B409                <1>     mov ah, 09h
  1334 000027AC CD21                <1>     int 21h
  1335                              <1> 
  1336 000027AE 4885ED              <1>     test rbp, rbp
  1337 000027B1 741E                <1>     jz .skipHole
  1338 000027B3 488D159DE5FFFF      <1>     lea rdx, memHole
  1339 000027BA B409                <1>     mov ah, 09h
  1340 000027BC CD21                <1>     int 21h
  1341 000027BE 4889E8              <1>     mov rax, rbp
  1342 000027C1 E87A000000          <1>     call .mcbPrintAmount
  1343 000027C6 488D15D6E5FFFF      <1>     lea rdx, memByte
  1344 000027CD B409                <1>     mov ah, 09h
  1345 000027CF CD21                <1>     int 21h
  1346                              <1> .skipHole:
  1347                              <1> 
  1348 000027D1 488D1559E5FFFF      <1>     lea rdx, memApp
  1349 000027D8 B409                <1>     mov ah, 09h
  1350 000027DA CD21                <1>     int 21h
  1351 000027DC 4889C8              <1>     mov rax, rcx
  1352 000027DF E85C000000          <1>     call .mcbPrintAmount
  1353 000027E4 488D15B8E5FFFF      <1>     lea rdx, memByte
  1354 000027EB B409                <1>     mov ah, 09h
  1355 000027ED CD21                <1>     int 21h
  1356                              <1> 
  1357 000027EF 488D1587E5FFFF      <1>     lea rdx, memFree
  1358 000027F6 B409                <1>     mov ah, 09h
  1359 000027F8 CD21                <1>     int 21h
  1360 000027FA 4889F8              <1>     mov rax, rdi
  1361 000027FD E83E000000          <1>     call .mcbPrintAmount
  1362 00002802 488D159AE5FFFF      <1>     lea rdx, memByte
  1363 00002809 B409                <1>     mov ah, 09h
  1364 0000280B CD21                <1>     int 21h
  1365                              <1> 
  1366 0000280D 488D15D1E4FFFF      <1>     lea rdx, memSys
  1367 00002814 B409                <1>     mov ah, 09h
  1368 00002816 CD21                <1>     int 21h
  1369 00002818 4889F0              <1>     mov rax, rsi
  1370 0000281B 4801F8              <1>     add rax, rdi
  1371 0000281E 4801C8              <1>     add rax, rcx
  1372 00002821 4801E8              <1>     add rax, rbp
  1373 00002824 E817000000          <1>     call .mcbPrintAmount
  1374 00002829 488D1573E5FFFF      <1>     lea rdx, memByte
  1375 00002830 B409                <1>     mov ah, 09h
  1376 00002832 CD21                <1>     int 21h
  1377                              <1> 
  1378 00002834 488D154AE0FFFF      <1>     lea rdx, crlf
  1379 0000283B B409                <1>     mov ah, 09h
  1380 0000283D CD21                <1>     int 21h
  1381                              <1>     return
    13                              <2> %%_ret:
    14 0000283F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1382                              <1> 
  1383                              <1> .mcbPrintAmount:
  1384 00002840 51                  <1>     push rcx
  1385 00002841 56                  <1>     push rsi
  1386 00002842 57                  <1>     push rdi
  1387 00002843 55                  <1>     push rbp
  1388 00002844 E8CC060000          <1>     call printDecimalWord
  1389 00002849 5D                  <1>     pop rbp
  1390 0000284A 5F                  <1>     pop rdi
  1391 0000284B 5E                  <1>     pop rsi
  1392 0000284C 59                  <1>     pop rcx
  1393                              <1>     return
    13                              <2> %%_ret:
    14 0000284D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1394                              <1> .badMCBFound:
  1395 0000284E 488D1595E5FFFF      <1>     lea rdx, memBad2
  1396 00002855 B409                <1>     mov ah, 09h
  1397 00002857 CD21                <1>     int 21h
  1398 00002859 E95A070000          <1>     jmp freezePC.altEP
  1399                              <1> 
  1400                              <1> type:
  1401 0000285E F60557D8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1402 00002865 0F8419EFFFFF        <1>     jz badArgError
  1403 0000286B F6054DD8FFFFFF      <1>     test byte [arg2Flg], -1
  1404 00002872 0F850CEFFFFF        <1>     jnz badArgError         ;If this set, error
  1405 00002878 488D359ED9FFFF      <1>     lea rsi, cmdBuffer
  1406 0000287F 0FB60537D8FFFF      <1>     movzx eax, byte [arg1Off]
  1407 00002886 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1408 00002889 803E0D              <1>     cmp byte [rsi], CR
  1409 0000288C 0F84F2EEFFFF        <1>     je badArgError
  1410 00002892 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1411 00002896 750F                <1>     jne .noDrive
  1412 00002898 0FB6051FD8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1413 0000289F 3CFF                <1>     cmp al, -1
  1414 000028A1 0F84D4EEFFFF        <1>     je badDriveError
  1415                              <1> .noDrive:
  1416                              <1>     ;Now we open the provided file
  1417 000028A7 E84E070000          <1>     call copyArgumentToSearchSpec
  1418 000028AC 488D15ABDBFFFF      <1>     lea rdx, searchSpec
  1419 000028B3 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1420 000028B8 CD21                <1>     int 21h
  1421 000028BA 0F82CDEEFFFF        <1>     jc badFileError
  1422 000028C0 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1423 000028C7 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1424                              <1> .lp:
  1425 000028CA B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1426 000028CF B43F                <1>     mov ah, 3Fh ;Read handle
  1427 000028D1 CD21                <1>     int 21h
  1428 000028D3 89C1                <1>     mov ecx, eax
  1429 000028D5 67E317              <1>     jecxz .exit
  1430 000028D8 53                  <1>     push rbx    ;Save the original in handle
  1431 000028D9 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1432 000028DE B440                <1>     mov ah, 40h
  1433 000028E0 CD21                <1>     int 21h
  1434 000028E2 5B                  <1>     pop rbx ;Get back the original read handle
  1435 000028E3 720F                <1>     jc .exitBad
  1436 000028E5 39C8                <1>     cmp eax, ecx
  1437 000028E7 74E1                <1>     je .lp
  1438 000028E9 FFC9                <1>     dec ecx ;One less for a ^Z
  1439 000028EB 39C8                <1>     cmp eax, ecx
  1440 000028ED 7505                <1>     jne .exitBad
  1441                              <1> .exit:
  1442 000028EF B43E                <1>     mov ah, 3Eh ;Close handle
  1443 000028F1 CD21                <1>     int 21h
  1444                              <1>     return
    13                              <2> %%_ret:
    14 000028F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> .exitBad:
  1446                              <1>     ;Print a disk error message... use a table to build the message but for
  1447                              <1>     ; now, just exit
  1448                              <1>     ;If it is a char device, don't print a error
  1449 000028F4 EBF9                <1>     jmp short .exit
  1450                              <1> 
  1451                              <1> exit:
  1452 000028F6 F60530D7FFFFFF      <1>     test byte [permaSwitch], -1
  1453                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000028FD 75(F3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1454 000028FF 488B0511D7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1455 00002906 483DFFFFFFFF        <1>     cmp rax, -1
  1456                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000290C 74(F3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1457 0000290E 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1458                              <1> 
  1459 00002912 488B1515D7FFFF      <1>     mov rdx, qword [parentInt22]
  1460 00002919 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1461 0000291D B822250000          <1>     mov eax, 2522h
  1462 00002922 CD21                <1>     int 21h
  1463                              <1> 
  1464 00002924 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1465 00002929 CD21                <1>     int 21h
  1466                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000292B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1467                              <1> 
  1468                              <1> launchChild:
  1469                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1470                              <1> ;Here we must search the CWD or all path componants before failing
  1471                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1472 0000292C E8E6060000          <1>     call setDTA
  1473                              <1> 
  1474 00002931 8B0594D7FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1475 00002937 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1476 0000293C 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1477 00002941 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1478 00002946 741D                <1>     je .noExt
  1479 00002948 E827E9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1480 0000294D 0F855B010000        <1>     jnz .dfltErrExit
  1481                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1482 00002953 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1483                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1484                              <1>     ;So it is a com or exe that we are searching for for now
  1485 00002959 488D3D3DD9FFFF      <1>     lea rdi, cmdPathSpec
  1486 00002960 4889FA              <1>     mov rdx, rdi
  1487 00002963 EB24                <1>     jmp short .search
  1488                              <1> .noExt:
  1489                              <1>     ;If the filename has no extension, append a .*
  1490                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1491 00002965 31DB                <1>     xor ebx, ebx
  1492 00002967 488D3D2FD9FFFF      <1>     lea rdi, cmdPathSpec
  1493 0000296E 4889FA              <1>     mov rdx, rdi
  1494 00002971 31C0                <1>     xor eax, eax
  1495 00002973 B9FFFFFFFF          <1>     mov ecx, -1
  1496 00002978 F2AE                <1>     repne scasb
  1497 0000297A 48FFCF              <1>     dec rdi ;Point to the terminating null
  1498 0000297D 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1499 00002980 66B82E2A            <1>     mov ax, ".*"
  1500 00002984 66AB                <1>     stosw
  1501 00002986 30C0                <1>     xor al, al  ;Store terminating null
  1502 00002988 AA                  <1>     stosb
  1503                              <1> .search:
  1504 00002989 B906000000          <1>     mov ecx, dirIncFiles
  1505 0000298E B44E                <1>     mov ah, 4Eh ;Find First File
  1506 00002990 CD21                <1>     int 21h
  1507 00002992 0F8216010000        <1>     jc .dfltErrExit
  1508 00002998 E8C4000000          <1>     call .noExtCheckExt
  1509                              <1> .moreSearch:
  1510 0000299D B44F                <1>     mov ah, 4Fh
  1511 0000299F CD21                <1>     int 21h
  1512 000029A1 7207                <1>     jc .noMoreFiles
  1513 000029A3 E8B9000000          <1>     call .noExtCheckExt
  1514 000029A8 EBF3                <1>     jmp short .moreSearch
  1515                              <1> .noMoreFiles:
  1516 000029AA 85DB                <1>     test ebx, ebx
  1517 000029AC 0F84FC000000        <1>     jz .dfltErrExit
  1518                              <1> ;So we have a valid executable
  1519 000029B2 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1520 000029B5 F7C301000000        <1>     test ebx, 1
  1521 000029BB 7407                <1>     jz .launchexebat
  1522 000029BD B82E434F4D          <1>     mov eax, ".COM"
  1523 000029C2 EB14                <1>     jmp short .buildTail
  1524                              <1> .launchexebat:
  1525 000029C4 F7C302000000        <1>     test ebx, 2
  1526 000029CA 7407                <1>     jz .launchbat
  1527 000029CC B82E455845          <1>     mov eax, ".EXE"
  1528 000029D1 EB05                <1>     jmp short .buildTail
  1529                              <1> .launchbat:
  1530                              <1> ;Temporary For BAT
  1531 000029D3 E9D6000000          <1>     jmp .dfltErrExit
  1532                              <1> .buildTail:
  1533 000029D8 AB                  <1>     stosd
  1534 000029D9 31C0                <1>     xor eax, eax
  1535 000029DB AA                  <1>     stosb   ;Store the terminating null
  1536                              <1> ;Now we build the cmdtail properly
  1537 000029DC 488D3D3AD7FFFF      <1>     lea rdi, cmdTail
  1538 000029E3 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1539 000029E6 B910000000          <1>     mov ecx, 128/8
  1540 000029EB F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1541 000029EE 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1542 000029F2 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1543 000029F9 AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1544 000029FA 88C4                <1>     mov ah, al  ;Move the number into ah
  1545 000029FC 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1546                              <1>     ;Skip the parsed command name
  1547                              <1> .passName:
  1548 000029FE AC                  <1>     lodsb   ;Get the char in al
  1549 000029FF FEC5                <1>     inc ch
  1550 00002A01 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1551 00002A04 741D                <1>     je short .finishBuildingTailNoCR
  1552 00002A06 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1553 00002A08 7418                <1>     je short .finishBuildingTail
  1554 00002A0A 3C20                <1>     cmp al, SPC
  1555 00002A0C 75F0                <1>     jne short .passName
  1556                              <1>     ;Now we copy the name 
  1557 00002A0E E8D0030000          <1>     call skipSeparators ;Start by skipping spaces (there are no embedded tabs)
  1558                              <1>     ;rsi points to the first non-space char
  1559                              <1> .copyTail:
  1560 00002A13 AC                  <1>     lodsb
  1561 00002A14 3C0D                <1>     cmp al, CR
  1562 00002A16 740A                <1>     je short .finishBuildingTail
  1563 00002A18 AA                  <1>     stosb
  1564 00002A19 FEC1                <1>     inc cl
  1565 00002A1B 80F97F              <1>     cmp cl, 127 ;Exit condition
  1566 00002A1E 75F3                <1>     jne .copyTail
  1567 00002A20 EB01                <1>     jmp short .finishBuildingTailNoCR
  1568                              <1> .finishBuildingTail:
  1569 00002A22 AA                  <1>     stosb   ;Store the CR
  1570                              <1> .finishBuildingTailNoCR:
  1571 00002A23 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1572                              <1> .launch:
  1573 00002A25 488D1DD1D6FFFF      <1>     lea rbx, launchBlock
  1574 00002A2C 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1575 00002A30 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1576 00002A33 488D05E3D6FFFF      <1>     lea rax, cmdTail
  1577 00002A3A 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1578 00002A3E 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1579 00002A42 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1580 00002A46 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1581 00002A4A 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1582 00002A4E 488D1548D8FFFF      <1>     lea rdx, cmdPathSpec
  1583 00002A55 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1584 00002A5A CD21                <1>     int 21h
  1585 00002A5C E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1586                              <1> .noExtCheckExt:
  1587                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1588 00002A61 488D3588D6FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1589 00002A68 488D3D7DD8FFFF      <1>     lea rdi, fcbCmdSpec
  1590 00002A6F E8F8030000          <1>     call asciiFilenameToFCB
  1591 00002A74 8B057AD8FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1592 00002A7A 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1593 00002A7F 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1594 00002A84 3D434F4D20          <1>     cmp eax, "COM "
  1595 00002A89 7507                <1>     jne .neceexe
  1596 00002A8B 81CB01000000        <1>     or ebx, 1
  1597                              <1>     return
    13                              <2> %%_ret:
    14 00002A91 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1598                              <1> .neceexe:
  1599 00002A92 3D45584520          <1>     cmp eax, "EXE "
  1600 00002A97 7507                <1>     jne .necebat
  1601 00002A99 81CB02000000        <1>     or ebx, 2
  1602                              <1>     return
    13                              <2> %%_ret:
    14 00002A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1603                              <1> .necebat:
  1604 00002AA0 3D42415420          <1>     cmp eax, "BAT "
  1605                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002AA5 75(9F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1606 00002AA7 81CB04000000        <1>     or ebx, 4
  1607                              <1>     return
    13                              <2> %%_ret:
    14 00002AAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1608                              <1> 
  1609                              <1> .dfltErrExit:
  1610 00002AAE 488D152DDEFFFF      <1>     lea rdx, badCmd
  1611 00002AB5 B409                <1>     mov ah, 09h
  1612 00002AB7 CD21                <1>     int 21h
  1613                              <1>     return
    13                              <2> %%_ret:
    14 00002AB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 00002ABA 488D15C4DDFFFF      <1>     lea rdx, crlf
     5 00002AC1 BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002AC6 B440                <1>     mov ah, 40h ;Print a new line
     7 00002AC8 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002ACD CD21                <1>     int 21h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002ACF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002AD0 53                  <1>     push rbx
    18 00002AD1 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002AD3 803D5CD5FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002ADA 7240                <1>     jb .usDate
    21 00002ADC 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002ADE 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002AE3 E8B0000000          <1>     call .printFirst
    25 00002AE8 8A1553D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002AEE B402                <1>     mov ah, 02h
    27 00002AF0 CD21                <1>     int 21h
    28                              <1> 
    29 00002AF2 89C8                <1>     mov eax, ecx
    30 00002AF4 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002AF9 C1E805              <1>     shr eax, 5
    32 00002AFC E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002B01 8A153AD5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002B07 B402                <1>     mov ah, 02h
    36 00002B09 CD21                <1>     int 21h
    37                              <1> 
    38 00002B0B 89C8                <1>     mov eax, ecx
    39 00002B0D 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002B12 C1E809              <1>     shr eax, 9
    41 00002B15 5B                  <1>     pop rbx ;Get the year signature back
    42 00002B16 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002B1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002B1C 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002B21 C1E805              <1>     shr eax, 5
    48 00002B24 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002B29 8A1512D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002B2F B402                <1>     mov ah, 02h
    52 00002B31 CD21                <1>     int 21h
    53                              <1> 
    54 00002B33 89C8                <1>     mov eax, ecx
    55 00002B35 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002B3A E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002B3F 8A15FCD4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 00002B45 B402                <1>     mov ah, 02h
    60 00002B47 CD21                <1>     int 21h
    61                              <1> 
    62 00002B49 89C8                <1>     mov eax, ecx
    63 00002B4B 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002B50 C1E809              <1>     shr eax, 9
    65 00002B53 5B                  <1>     pop rbx ;Get the year signature back
    66 00002B54 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 00002B59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 00002B5A 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002B5F C1E809              <1>     shr eax, 9
    72 00002B62 5B                  <1>     pop rbx ;Get the year signature back
    73 00002B63 E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002B68 8A15D3D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002B6E B402                <1>     mov ah, 02h
    77 00002B70 CD21                <1>     int 21h
    78                              <1> 
    79 00002B72 89C8                <1>     mov eax, ecx
    80 00002B74 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002B79 C1E805              <1>     shr eax, 5
    82 00002B7C E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002B81 8A15BAD4FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 00002B87 B402                <1>     mov ah, 02h
    86 00002B89 CD21                <1>     int 21h
    87                              <1> 
    88 00002B8B 89C8                <1>     mov eax, ecx
    89 00002B8D 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002B92 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 00002B97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002B98 51                  <1>     push rcx
    96 00002B99 E8E8030000          <1>     call getDecimalWord
    97 00002B9E 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002BA0 7504                <1>     jnz .skipSpace
    99 00002BA2 88CD                <1>     mov ch, cl
   100 00002BA4 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002BA6 88CA                <1>     mov dl, cl
   103 00002BA8 B402                <1>     mov ah, 02h
   104 00002BAA CD21                <1>     int 21h
   105 00002BAC 88EA                <1>     mov dl, ch
   106 00002BAE B402                <1>     mov ah, 02h
   107 00002BB0 CD21                <1>     int 21h
   108 00002BB2 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002BB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002BB4 51                  <1>     push rcx
   112 00002BB5 E8CC030000          <1>     call getDecimalWord
   113 00002BBA 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002BBC 75E8                <1>     jnz .skipSpace
   115 00002BBE 88CD                <1>     mov ch, cl
   116 00002BC0 B130                <1>     mov cl, "0"
   117 00002BC2 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002BC4 05BC070000          <1>     add eax, 1980
   120 00002BC9 51                  <1>     push rcx
   121 00002BCA 53                  <1>     push rbx
   122 00002BCB E8B6030000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002BD0 5B                  <1>     pop rbx
   124 00002BD1 84DB                <1>     test bl, bl
   125 00002BD3 740C                <1>     jz .twoDigitYear
   126 00002BD5 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002BD7 B402                <1>     mov ah, 02h
   128 00002BD9 CD21                <1>     int 21h
   129 00002BDB 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002BDD B402                <1>     mov ah, 02h
   131 00002BDF CD21                <1>     int 21h
   132                              <1> .twoDigitYear:
   133 00002BE1 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002BE4 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002BE6 B402                <1>     mov ah, 02h
   136 00002BE8 CD21                <1>     int 21h
   137 00002BEA 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002BEC B402                <1>     mov ah, 02h
   139 00002BEE CD21                <1>     int 21h
   140 00002BF0 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002BF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002BF2 89C1                <1>     mov ecx, eax
   149 00002BF4 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002BF9 C1E80B              <1>     shr eax, 11
   151 00002BFC 803D44D4FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002C03 750B                <1>     jne .ampm
   153 00002C05 E85A000000          <1>     call .printHours
   154 00002C0A E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002C0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002C10 3D0C000000          <1>     cmp eax, 12
   158 00002C15 7713                <1>     ja .pm
   159 00002C17 7416                <1>     je .pm2
   160 00002C19 E846000000          <1>     call .printHours
   161 00002C1E E81D000000          <1>     call .printMinutes
   162 00002C23 B261                <1>     mov dl, "a"
   163 00002C25 B402                <1>     mov ah, 02h
   164 00002C27 CD21                <1>     int 21h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002C29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002C2A 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002C2F E830000000          <1>     call .printHours
   170 00002C34 E807000000          <1>     call .printMinutes
   171 00002C39 B270                <1>     mov dl, "p"
   172 00002C3B B402                <1>     mov ah, 02h
   173 00002C3D CD21                <1>     int 21h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002C3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002C40 8A15FDD3FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002C46 B402                <1>     mov ah, 02h
   178 00002C48 CD21                <1>     int 21h
   179                              <1> 
   180 00002C4A 89C8                <1>     mov eax, ecx
   181 00002C4C 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002C51 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002C54 51                  <1>     push rcx
   185 00002C55 E82C030000          <1>     call getDecimalWord
   186 00002C5A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002C5C 7514                <1>     jnz .skipSpace
   188 00002C5E 88CD                <1>     mov ch, cl
   189 00002C60 B130                <1>     mov cl, "0"
   190 00002C62 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002C64 51                  <1>     push rcx
   193 00002C65 E81C030000          <1>     call getDecimalWord
   194 00002C6A 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002C6C 7504                <1>     jnz .skipSpace
   196 00002C6E 88CD                <1>     mov ch, cl
   197 00002C70 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002C72 88CA                <1>     mov dl, cl
   200 00002C74 B402                <1>     mov ah, 02h
   201 00002C76 CD21                <1>     int 21h
   202 00002C78 88EA                <1>     mov dl, ch
   203 00002C7A B402                <1>     mov ah, 02h
   204 00002C7C CD21                <1>     int 21h
   205 00002C7E 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002C80 488D1571DEFFFF      <1>     lea rdx, dosVer
   211 00002C87 B409                <1>     mov ah, 09h ;Print String
   212 00002C89 CD21                <1>     int 21h
   213 00002C8B B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002C8D CD21                <1>     int 21h
   215 00002C8F 50                  <1>     push rax    ;Save minor version
   216 00002C90 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002C95 E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002C9A B22E                <1>     mov dl, "."
   219 00002C9C B402                <1>     mov ah, 02h
   220 00002C9E CD21                <1>     int 21h
   221 00002CA0 58                  <1>     pop rax
   222 00002CA1 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002CA3 E889000000          <1>     call hexToBCD
   224 00002CA8 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002CAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002CAE B21B                <1>     mov dl, ESC
   228 00002CB0 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002CB2 B224                <1>     mov dl, "$"
   232 00002CB4 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002CB6 B23D                <1>     mov dl, "="
   236 00002CB8 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002CBA B27C                <1>     mov dl, "|"
   240 00002CBC EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002CBE B23E                <1>     mov dl, ">"
   244 00002CC0 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002CC2 B23C                <1>     mov dl, "<"
   248 00002CC4 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002CC6 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002CC8 CD21                <1>     int 21h
   253 00002CCA 0441                <1>     add al, "A" ;Convert to letter
   254 00002CCC 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002CCE B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002CD0 CD21                <1>     int 21h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002CD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002CD3 488D3D82D3FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002CDA B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002CDC CD21                <1>     int 21h
   263 00002CDE 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002CE0 FEC2                <1>     inc dl
   265 00002CE2 0441                <1>     add al, "A" ;Convert to letter
   266 00002CE4 B43A                <1>     mov ah, ":"
   267 00002CE6 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002CE8 8A053DD3FFFF        <1>     mov al, byte [pathSep]
   269 00002CEE AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002CEF B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002CF1 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002CF4 CD21                <1>     int 21h
   273 00002CF6 E884000000          <1>     call strlen
   274 00002CFB 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002D01 B440                <1>     mov ah, 40h ;Write to handle
   277 00002D03 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002D08 488D154DD3FFFF      <1>     lea rdx, currDirStr
   279 00002D0F CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002D11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002D12 51                  <1>     push rcx
   286 00002D13 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002D16 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002D18 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002D1D 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002D23 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002D26 050A000000          <1>     add eax, 10
   293 00002D2B FFC9                <1>     dec ecx
   294 00002D2D 75F7                <1>     jnz .bth
   295 00002D2F 59                  <1>     pop rcx
   296 00002D30 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002D31 51                  <1>     push rcx
   302 00002D32 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002D35 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002D37 3D0A000000          <1>     cmp eax, 10
   306 00002D3C 7209                <1>     jb .htb1
   307 00002D3E 2D0A000000          <1>     sub eax, 10
   308 00002D43 FFC1                <1>     inc ecx
   309 00002D45 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002D47 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002D4A 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002D4C 59                  <1>     pop rcx
   314 00002D4D C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002D4E 50                  <1>     push rax
   321 00002D4F 52                  <1>     push rdx
   322 00002D50 88C4                <1>     mov ah, al
   323 00002D52 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002D54 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002D57 7508                <1>     jnz .upperNybble
   326 00002D59 B220                <1>     mov dl, " "
   327 00002D5B B402                <1>     mov ah, 02h
   328 00002D5D CD21                <1>     int 21h
   329 00002D5F EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002D61 50                  <1>     push rax
   332 00002D62 C0EC04              <1>     shr ah, 4
   333 00002D65 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002D68 88E2                <1>     mov dl, ah
   335 00002D6A B402                <1>     mov ah, 02h ;Print DL
   336 00002D6C CD21                <1>     int 21h
   337 00002D6E 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002D6F 0430                <1>     add al, "0"
   340 00002D71 88C2                <1>     mov dl, al
   341 00002D73 B402                <1>     mov ah, 02h ;Print DL
   342 00002D75 CD21                <1>     int 21h
   343 00002D77 5A                  <1>     pop rdx
   344 00002D78 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002D79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002D7A B419                <1>     mov ah, 19h
   350 00002D7C CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002D7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002D7F 50                  <1>     push rax
   358 00002D80 57                  <1>     push rdi
   359 00002D81 30C0                <1>     xor al, al
   360 00002D83 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002D85 FFC9                <1>     dec ecx ;rcx = -1
   362 00002D87 F2AE                <1>     repne scasb
   363 00002D89 F7D1                <1>     not ecx
   364 00002D8B 5F                  <1>     pop rdi
   365 00002D8C 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002D8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 00002D8E AC                  <1>     lodsb
   374 00002D8F E848000000          <1>     call isALEndOfCommand
   375 00002D94 7419                <1>     je .endOfInput
   376 00002D96 E82B000000          <1>     call isALterminator
   377 00002D9B 7419                <1>     jz .exit
   378 00002D9D 3A0588D2FFFF        <1>     cmp al, byte [pathSep]
   379 00002DA3 7411                <1>     je .exit
   380 00002DA5 3A0581D2FFFF        <1>     cmp al, byte [switchChar]
   381 00002DAB 7409                <1>     je .exit
   382 00002DAD EBDF                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002DAF E802000000          <1>     call .exit
   385 00002DB4 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002DB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002DB6 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002DB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002DBA AC                  <1>     lodsb
   395 00002DBB E806000000          <1>     call isALterminator
   396 00002DC0 75F8                <1>     jnz findTerminator
   397 00002DC2 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002DC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002DC6 E826000000          <1>     call isALseparator
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DCB 74(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002DCD 3C0A                <1>     cmp al, LF
   405                              <1>     return
    13                              <2> %%_ret:
    14 00002DCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   406                              <1> 
   407                              <1> findEndOfCommand:
   408                              <1> ;Moves rsi to the | or CR that terminates this command
   409 00002DD0 AC                  <1>     lodsb
   410 00002DD1 E806000000          <1>     call isALEndOfCommand
   411 00002DD6 75F8                <1>     jnz findEndOfCommand
   412 00002DD8 48FFCE              <1>     dec rsi
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002DDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> isALEndOfCommand:
   415 00002DDC 3C7C                <1>     cmp al, "|"
   416                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DDE 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   417 00002DE0 3C0D                <1>     cmp al, CR
   418                              <1>     return
    13                              <2> %%_ret:
    14 00002DE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> 
   420                              <1> skipSeparators:
   421                              <1> ;Skips all "standard" command separators. This is not the same as FCB 
   422                              <1> ; command separators but a subset thereof. 
   423                              <1> ;These are the same across all codepages.
   424                              <1> ;Input: rsi must point to the start of the data string
   425                              <1> ;Output: rsi points to the first non-separator char
   426 00002DE3 50                  <1>     push rax
   427                              <1> .l1:
   428 00002DE4 AC                  <1>     lodsb
   429 00002DE5 E807000000          <1>     call isALseparator
   430 00002DEA 74F8                <1>     jz .l1
   431                              <1> .exit:
   432 00002DEC 58                  <1>     pop rax
   433 00002DED 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command separator
   434                              <1>     return
    13                              <2> %%_ret:
    14 00002DF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> isALseparator:
   437                              <1> ;Returns: ZF=NZ if al is not a command separator 
   438                              <1> ;         ZF=ZE if al is a command separator
   439 00002DF1 3C20                <1>     cmp al, " "
   440                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DF3 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   441 00002DF5 3C3B                <1>     cmp al, ";"
   442                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DF7 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   443 00002DF9 3C3D                <1>     cmp al, "="
   444                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DFB 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   445 00002DFD 3C2C                <1>     cmp al, ","
   446                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DFF 74(F0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   447 00002E01 3C09                <1>     cmp al, TAB
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002E03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> printPrompt:
   451 00002E04 66813D1CD2FFFFFFFF  <1>     cmp word [promptPtr], -1
   452 00002E0D 750B                <1>     jne .validPrompt
   453                              <1>     ;Here we print the default prompt
   454 00002E0F E8BFFEFFFF          <1>     call putCWDInPrompt
   455 00002E14 E8A5FEFFFF          <1>     call putGTinPrompt
   456                              <1>     return
    13                              <2> %%_ret:
    14 00002E19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   457                              <1> .validPrompt:
   458                              <1>     return
    13                              <2> %%_ret:
    14 00002E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> 
   460                              <1> clearCommandState:
   461                              <1> ;Clears the command state
   462 00002E1B 488D3D92D2FFFF      <1>     lea rdi, cmdStatePtr
   463 00002E22 B90E000000          <1>     mov ecx, cmdStateL
   464 00002E27 31C0                <1>     xor eax, eax
   465 00002E29 F3AA                <1>     rep stosb
   466 00002E2B C70583D2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002E34 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002E35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> clearCommandLineState:
   470                              <1> ;Clears the command line state after a 0Dh encountered
   471 00002E36 488D3D62D2FFFF      <1>     lea rdi, cmdLineStatePtr
   472 00002E3D B923000000          <1>     mov ecx, cmdLineStateL
   473 00002E42 31C0                <1>     xor eax, eax
   474 00002E44 F3AA                <1>     rep stosb
   475 00002E46 C70560D2FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   475 00002E4F FF                  <1>
   476 00002E50 C7055ED2FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   476 00002E59 FF                  <1>
   477                              <1>     return
    13                              <2> %%_ret:
    14 00002E5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> asciiToFCB:
   480                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   481                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   482                              <1> ;Also doesn't check if chars are valid
   483                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   484                              <1> ;Name is space padded.
   485                              <1> ;Input: rsi = ASCII string buffer
   486                              <1> ;       rdi = FCB name buffer
   487                              <1> ;Output: al = Char that terminated the source string 
   488 00002E5B 53                  <1>     push rbx    
   489 00002E5C 57                  <1>     push rdi
   490 00002E5D B90B000000          <1>     mov ecx, 11
   491 00002E62 B020                <1>     mov al, " "
   492 00002E64 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   493 00002E66 5F                  <1>     pop rdi
   494 00002E67 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   495 00002E6A EB1D                <1>     jmp short asciiFilenameToFCB.processName
   496                              <1> asciiFilenameToFCB:
   497                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   498                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   499                              <1> ;Also doesn't check if chars are valid
   500                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   501                              <1> ;Name is space padded.
   502                              <1> ;Input: rsi = ASCII string buffer
   503                              <1> ;       rdi = FCB name buffer
   504                              <1> ;Output: al = Char that terminated the source string 
   505 00002E6C 53                  <1>     push rbx    
   506 00002E6D 57                  <1>     push rdi
   507 00002E6E B90B000000          <1>     mov ecx, 11
   508 00002E73 B020                <1>     mov al, " "
   509 00002E75 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   510 00002E77 5F                  <1>     pop rdi
   511 00002E78 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   512                              <1>     ;Preprocess for Dir Searches
   513 00002E7B 803E2E              <1>     cmp byte [rsi], "."
   514 00002E7E 7509                <1>     jne .processName
   515 00002E80 A4                  <1>     movsb   ;Store the first dot
   516 00002E81 803E2E              <1>     cmp byte [rsi], "."
   517 00002E84 752C                <1>     jne .exitBadChar
   518 00002E86 A4                  <1>     movsb
   519 00002E87 EB29                <1>     jmp short .exitBadChar
   520                              <1> .processName:
   521 00002E89 AC                  <1>     lodsb   ;Get the char in al
   522 00002E8A 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   523 00002E8C 7426                <1>     jz .exit
   524 00002E8E 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   525 00002E90 7407                <1>     je .extSpace
   526 00002E92 3C2E                <1>     cmp al, "."
   527 00002E94 740C                <1>     je .ext
   528 00002E96 AA                  <1>     stosb   ;Store the char
   529 00002E97 EBF0                <1>     jmp short .processName
   530                              <1> .extSpace:
   531                              <1> ;Now we scan for a period in the name
   532 00002E99 AC                  <1>     lodsb   ;Get a char and increase rsi
   533 00002E9A 84C0                <1>     test al, al
   534 00002E9C 7416                <1>     jz .exit
   535 00002E9E 3C2E                <1>     cmp al, "."     ;If al is not a period...
   536 00002EA0 75F7                <1>     jne .extSpace   ; keep searching
   537                              <1> .ext:
   538 00002EA2 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   539                              <1> .processExt:
   540 00002EA6 AC                  <1>     lodsb
   541 00002EA7 84C0                <1>     test al, al
   542 00002EA9 7409                <1>     jz .exit
   543 00002EAB 3C20                <1>     cmp al, " "
   544 00002EAD 7405                <1>     je .exit
   545 00002EAF AA                  <1>     stosb
   546 00002EB0 EBF4                <1>     jmp short .processExt
   547                              <1> .exitBadChar:
   548 00002EB2 30C0                <1>     xor al, al  ;Return a null terminator
   549                              <1> .exit:
   550 00002EB4 5B                  <1>     pop rbx
   551                              <1>     return
    13                              <2> %%_ret:
    14 00002EB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> FCBToAsciiz:
   554                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   555                              <1> ;Name is space padded too
   556                              <1> ;Input: rsi = FCB name buffer
   557                              <1> ;       rdi = ASCIIZ string buffer
   558 00002EB6 B908000000          <1>     mov ecx, 8
   559 00002EBB F3A4                <1>     rep movsb   ;Move the name over
   560                              <1> .scanNameSpace:
   561 00002EBD 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   562 00002EC1 750D                <1>     jne .ext
   563 00002EC3 48FFCF              <1>     dec rdi
   564 00002EC6 FFC1                <1>     inc ecx
   565 00002EC8 81F908000000        <1>     cmp ecx, 8
   566 00002ECE 72ED                <1>     jb .scanNameSpace
   567                              <1> .ext:
   568 00002ED0 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   569 00002ED5 7506                <1>     jne .validExt
   570 00002ED7 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   571 00002EDB 7415                <1>     je .exit
   572                              <1> .validExt:
   573 00002EDD B02E                <1>     mov al, "." ;We have a valid extension, store a period
   574 00002EDF AA                  <1>     stosb
   575 00002EE0 B903000000          <1>     mov ecx, 3
   576 00002EE5 F3A4                <1>     rep movsb   ;Move the three extension chars over
   577                              <1> .scanExtSpace:
   578 00002EE7 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   579 00002EEB 7505                <1>     jne .exit
   580 00002EED 48FFCF              <1>     dec rdi
   581 00002EF0 EBF5                <1>     jmp short .scanExtSpace
   582                              <1> .exit:
   583 00002EF2 31C0                <1>     xor eax, eax
   584 00002EF4 AA                  <1>     stosb   ;Store a null at the end
   585                              <1>     return
    13                              <2> %%_ret:
    14 00002EF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> buildCommandPath:
   588                              <1> ;Based on the first argument on the command line
   589                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   590                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   591 00002EF6 0FB605C0D1FFFF      <1>     movzx eax, byte [arg1Off]
   592 00002EFD 488D3519D3FFFF      <1>     lea rsi, cmdBuffer
   593 00002F04 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   594 00002F07 488D3D50D5FFFF      <1>     lea rdi, searchSpec
   595                              <1> .buildPath:
   596 00002F0E E8DAE7FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   597 00002F13 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   598                              <1>     return
    13                              <2> %%_ret:
    14 00002F14 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   599                              <1>     
   600                              <1> printDecimalWord:
   601                              <1> ;Takes qword in rax and print it's decimal representation
   602                              <1> ;Takes the qword in eax and prints its decimal representation
   603 00002F15 31C9                <1>     xor ecx, ecx
   604 00002F17 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   605 00002F19 85C0                <1>     test eax, eax
   606 00002F1B 750C                <1>     jnz .notZero
   607 00002F1D B930000000          <1>     mov ecx, "0"
   608 00002F22 BD01000000          <1>     mov ebp, 1  ;Print one digit
   609 00002F27 EB3E                <1>     jmp short .dpfb2
   610                              <1> .notZero:
   611 00002F29 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   612 00002F2B BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   613                              <1> .dpfb0:
   614 00002F30 FFC5                <1>     inc ebp
   615 00002F32 81FD08000000        <1>     cmp ebp, 8
   616 00002F38 7206                <1>     jb .dpfb00
   617 00002F3A 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   618 00002F3E EB04                <1>     jmp short .dpfb01
   619                              <1> .dpfb00:
   620 00002F40 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   621                              <1> .dpfb01:
   622 00002F44 31D2                <1>     xor edx, edx
   623 00002F46 48F7F6              <1>     div rsi
   624 00002F49 80C230              <1>     add dl, '0'
   625 00002F4C 80FA39              <1>     cmp dl, '9'
   626 00002F4F 7603                <1>     jbe .dpfb1
   627 00002F51 80C207              <1>     add dl, 'A'-'0'-10
   628                              <1> .dpfb1:
   629 00002F54 81FD08000000        <1>     cmp ebp, 8
   630 00002F5A 7204                <1>     jb .dpfb10
   631 00002F5C 88D3                <1>     mov bl, dl ;Add the bottom bits
   632 00002F5E EB02                <1>     jmp short .dpfb11
   633                              <1> .dpfb10:
   634 00002F60 88D1                <1>     mov cl, dl    ;Save remainder byte
   635                              <1> .dpfb11:
   636 00002F62 4885C0              <1>     test rax, rax
   637 00002F65 75C9                <1>     jnz .dpfb0
   638                              <1> .dpfb2:
   639 00002F67 81FD08000000        <1>     cmp ebp, 8
   640 00002F6D 7208                <1>     jb .dpfb20
   641 00002F6F 88DA                <1>     mov dl, bl
   642 00002F71 48C1EB08            <1>     shr rbx, 8
   643 00002F75 EB06                <1>     jmp short .dpfb21
   644                              <1> .dpfb20:
   645 00002F77 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   646 00002F79 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   647                              <1> .dpfb21:
   648 00002F7D B402                <1>     mov ah, 02h
   649 00002F7F CD21                <1>     int 21h
   650 00002F81 FFCD                <1>     dec ebp
   651 00002F83 75E2                <1>     jnz .dpfb2
   652                              <1>     return
    13                              <2> %%_ret:
    14 00002F85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> 
   654                              <1> getDecimalWord:
   655                              <1> ;Works on MAX A dword in eax
   656                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   657 00002F86 31C9                <1>     xor ecx, ecx
   658 00002F88 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   659 00002F8A BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   660                              <1> .dpfb0:
   661 00002F8F FFC5                <1>     inc ebp
   662 00002F91 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663 00002F95 31D2                <1>     xor edx, edx
   664 00002F97 48F7F3              <1>     div rbx
   665 00002F9A 80C230              <1>     add dl, '0'
   666 00002F9D 80FA39              <1>     cmp dl, '9'
   667 00002FA0 7603                <1>     jbe .dpfb1
   668 00002FA2 80C207              <1>     add dl, 'A'-'0'-10
   669                              <1> .dpfb1:
   670 00002FA5 88D1                <1>     mov cl, dl    ;Save remainder byte
   671 00002FA7 4885C0              <1>     test rax, rax
   672 00002FAA 75E3                <1>     jnz .dpfb0
   673                              <1>     return
    13                              <2> %%_ret:
    14 00002FAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   674                              <1> 
   675                              <1> freezePC:
   676 00002FAD 488D151CDEFFFF      <1>     lea rdx, memBad1
   677 00002FB4 B409                <1>     mov ah, 09h
   678 00002FB6 CD21                <1>     int 21h
   679                              <1> .altEP:
   680 00002FB8 488D153ADEFFFF      <1>     lea rdx, memBad3
   681 00002FBF B409                <1>     mov ah, 09h
   682 00002FC1 CD21                <1>     int 21h
   683                              <1> .lp:
   684 00002FC3 F390                <1>     pause
   685 00002FC5 F4                  <1>     hlt
   686 00002FC6 EBFB                <1>     jmp short .lp
   687                              <1> 
   688                              <1> getFilenamePtrFromFilespec:
   689                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   690                              <1> ;Input: rsi = Pathspec to search
   691                              <1> ;Output: rsi = Points to the first char of the filename
   692 00002FC8 4889F3              <1>     mov rbx, rsi
   693 00002FCB 31C0                <1>     xor eax, eax
   694 00002FCD 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   695 00002FD0 E8AAFDFFFF          <1>     call strlen     ;Get it's length
   696 00002FD5 FFC9                <1>     dec ecx ;Dont include terminating null
   697 00002FD7 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   698 00002FD9 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   699                              <1> .lp:
   700 00002FDC 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   701                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002FDF 74(AC)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   702 00002FE1 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   703 00002FE3 3C3A                <1>     cmp al, ":" ;X: ?
   704 00002FE5 740D                <1>     je .pointFilename
   705 00002FE7 3A053ED0FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   706 00002FED 7405                <1>     je .pointFilename
   707 00002FEF 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   708 00002FF2 EBE8                <1>     jmp short .lp
   709                              <1> .pointFilename:
   710 00002FF4 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   711                              <1>     return
    13                              <2> %%_ret:
    14 00002FF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   712                              <1> .exitBad:
   713 00002FF8 F9                  <1>     stc
   714                              <1> .exit:
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002FF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> 
   718                              <1> copyArgumentToSearchSpec:
   719                              <1> ;Works similarly to the build searchpath but is simpler
   720                              <1> ;Null terminates
   721 00002FFA 488D3D5DD4FFFF      <1>     lea rdi, searchSpec
   722                              <1> .copyPath:
   723 00003001 AC                  <1>     lodsb
   724 00003002 E8D5FDFFFF          <1>     call isALEndOfCommand
   725 00003007 740A                <1>     jz .finishCopy
   726 00003009 E8B8FDFFFF          <1>     call isALterminator
   727 0000300E 7403                <1>     jz .finishCopy
   728 00003010 AA                  <1>     stosb
   729 00003011 EBEE                <1>     jmp short .copyPath
   730                              <1> .finishCopy:
   731 00003013 31C0                <1>     xor eax, eax
   732 00003015 AA                  <1>     stosb
   733                              <1>     return
    13                              <2> %%_ret:
    14 00003016 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   734                              <1> 
   735                              <1> setDTA:
   736 00003017 50                  <1>     push rax
   737 00003018 52                  <1>     push rdx
   738 00003019 488D15B2D0FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   739 00003020 B8001A0000          <1>     mov eax, 1A00h
   740 00003025 CD21                <1>     int 21h
   741 00003027 5A                  <1>     pop rdx
   742 00003028 58                  <1>     pop rax
   743                              <1>     return
    13                              <2> %%_ret:
    14 00003029 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 0000302A 53                  <1>     push rbx
    25 0000302B 51                  <1>     push rcx
    26 0000302C 52                  <1>     push rdx
    27 0000302D 57                  <1>     push rdi
    28 0000302E 56                  <1>     push rsi
    29 0000302F FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003030 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003033 488D154BD8FFFF      <1>     lea rdx, crlf
    33 0000303A B409                <1>     mov ah, 09h ;Print String
    34 0000303C CD21                <1>     int 21h
    35                              <1> 
    36 0000303E 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00003044 B90C000000          <1>     mov ecx, 0Ch
    38 00003049 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 0000304B 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 0000304E 480FB7FF            <1>     movzx rdi, di
    41 00003052 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00003055 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00003059 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 0000305C 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 0000305F 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00003066 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 0000306A B409                <1>     mov ah, 09h ;Print String
    48 0000306C CD21                <1>     int 21h     ;Call DOS to print first part of message
    49                              <1> 
    50 0000306E 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00003075 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 0000307C F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 0000307F 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00003083 B409                <1>     mov ah, 09h ;Print String
    55 00003085 CD21                <1>     int 21h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00003087 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 0000308A 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00003090 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00003097 B409                <1>     mov ah, 09h
    62 00003099 CD21                <1>     int 21h
    63 0000309B 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 0000309D 80C241              <1>     add dl, "A" ;Add ASCII code
    65 000030A0 B402                <1>     mov ah, 02h ;Print char in dl
    66 000030A2 CD21                <1>     int 21h
    67                              <1> .userInput:
    68 000030A4 488D15DAD7FFFF      <1>     lea rdx, crlf  ;Print new line
    69 000030AB B409                <1>     mov ah, 09h
    70 000030AD CD21                <1>     int 21h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 000030AF 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 000030B6 B409                <1>     mov ah, 09h
    77 000030B8 CD21                <1>     int 21h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 000030BA F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 000030BD 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 000030BF 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 000030C6 B409                <1>     mov ah, 09h
    83 000030C8 CD21                <1>     int 21h
    84 000030CA 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 000030D1 B409                <1>     mov ah, 09h
    86 000030D3 CD21                <1>     int 21h
    87                              <1> .userIgnore:
    88 000030D5 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 000030D8 7416                <1>     jz .userFail
    90 000030DA 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 000030E1 B409                <1>     mov ah, 09h
    92 000030E3 CD21                <1>     int 21h
    93 000030E5 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 000030EC B409                <1>     mov ah, 09h
    95 000030EE CD21                <1>     int 21h
    96                              <1> .userFail:
    97 000030F0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 000030F3 7416                <1>     jz .userMsgEnd
    99 000030F5 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 000030FC B409                <1>     mov ah, 09h
   101 000030FE CD21                <1>     int 21h
   102 00003100 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00003107 B409                <1>     mov ah, 09h
   104 00003109 CD21                <1>     int 21h
   105                              <1> .userMsgEnd:
   106 0000310B 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00003112 B409                <1>     mov ah, 09h
   108 00003114 CD21                <1>     int 21h
   109                              <1> ;Get user input now 
   110 00003116 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00003118 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 0000311F B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00003121 CD21                <1>     int 21h ;Get char in al
   114 00003123 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00003125 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00003127 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00003129 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 0000312A 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 0000312C FFC1                <1>     inc ecx
   121 0000312E 81F904000000        <1>     cmp ecx, 4
   122 00003134 75F3                <1>     jne .uip1
   123 00003136 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 0000313B 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 0000313D 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 0000313F 7427                <1>     je .cehExit
   129 00003141 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00003143 740F                <1>     je .viIgnore
   131 00003145 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00003147 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00003149 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 0000314C 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00003152 EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00003154 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00003157 0F8447FFFFFF        <1>     jz .userInput
   140 0000315D EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 0000315F F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00003162 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00003168 5E                  <1>     pop rsi
   146 00003169 5F                  <1>     pop rdi
   147 0000316A 5A                  <1>     pop rdx
   148 0000316B 59                  <1>     pop rcx
   149 0000316C 5B                  <1>     pop rbx
   150 0000316D 48CF                <1>     iretq
   151                              <1> .charError:
   152 0000316F B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00003174 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 0000317B AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 0000317C 88C2                <1>     mov dl, al  ;Move char into dl
   157 0000317E B402                <1>     mov ah, 02h
   158 00003180 CD21                <1>     int 21h ;Print char
   159 00003182 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00003184 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00003189 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00003192 746563742024202020  <1>
   164 0000319B 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 000031A4 6E6974202420202020  <1>
   165 000031AD 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 000031B6 202420202020202020  <1>
   166 000031BF 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 000031C8 6F6D6D616E64202420  <1>
   167 000031D1 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 000031DA 202020202020202020  <1>
   168 000031E3 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 000031EC 737420242020202020  <1>
   169 000031F5 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 000031FE 202020202020202020  <1>
   170 00003207 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00003210 656469612024202020  <1>
   171 00003219 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00003222 7420466F756E642024  <1>
   172 0000322B 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00003234 706572202420202020  <1>
   173 0000323D 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00003246 6C7420242020202020  <1>
   174 0000324F 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00003258 742024202020202020  <1>
   175 00003261 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 0000326A 61696C757265202420  <1>
   176                              <1> 
   177 00003273 64726976652024      <1> .drive      db "drive $"
   178 0000327A 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00003283 64696E672024        <1>
   179 00003289 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00003292 74696E672024        <1>
   180 00003298 41626F727424        <1> .abortmsg   db "Abort$" 
   181 0000329E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 000032A5 526574727924        <1> .retrymsg   db "Retry$"
   183 000032AB 4661696C24          <1> .failmsg    db "Fail$"
   184 000032B0 2C2024              <1> .betweenMsg db ", $"
   185 000032B3 3F2024              <1> .endMsg     db "? $"
   186 000032B6 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int23h:
   189 000032BA F6056CCDFFFFFF      <1>     test byte [permaSwitch], -1
   190 000032C1 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 000032C3 50                  <1>     push rax
   193 000032C4 53                  <1>     push rbx
   194 000032C5 488B054BCDFFFF      <1>     mov rax, qword [realParent]
   195 000032CC 488B1D3CCDFFFF      <1>     mov rbx, qword [pspPtr]
   196 000032D3 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 000032D7 5B                  <1>     pop rbx
   198 000032D8 58                  <1>     pop rax
   199                              <1> .exit:
   200 000032D9 F9                  <1>     stc     ;Set CF to kill the task
   201 000032DA C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 000032DD 504154483D00        <1>     db "PATH=",0
     5 000032E3 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 000032EB 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 000032F4 442E434F4D00        <1>
     8 000032FA 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 00003303 202020202020202020- <1>
     8 0000330C 202020202020202020- <1>
     8 00003315 202020202020202020- <1>
     8 0000331E 202020202020202020- <1>
     8 00003327 202020202020202020- <1>
     8 00003330 202020202020202020- <1>
     8 00003339 202020202020202020- <1>
     8 00003342 202020202020202020- <1>
     8 0000334B 202020202020202020- <1>
     8 00003354 202020202020202020- <1>
     8 0000335D 202020202020202020- <1>
     8 00003366 202020202020202020- <1>
     8 0000336F 202020202020202020- <1>
     8 00003378 202020202020202020- <1>
     8 00003381 20                  <1>
     9 00003382 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(2A300000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(BA320000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(970E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(DD320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(EB320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(35170000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(85080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(631F0000)        <1>     call time
    81 000000FB E8(9A1E0000)        <1>     call date
    82 00000100 488D15(85080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(84330000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(DD320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(F7260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(840E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573656172636820- <1>
   123 000001F4 323032342E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

