     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    57 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    58                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    59                              <1> ; another, we save the number of chars to skip to that deep level).
    60                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    61                              <1> ; Only affects for SUBST drives, not JOIN
    62                              <1> ; Flags: Bit 15 set = Network drive
    63                              <1> ;        Bit 14 set = Physical drive
    64                              <1> ;        Bit 13 set = JOIN'ed drive
    65                              <1> ;        Bit 12 set = SUBST'ed drive
    66                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    67                              <1> endstruc
    68                              <1> ;CDS equates
    69                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    70                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    71                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    72                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    73                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    74                              <1> ;------------------------------------------------------------------------;
    75                              <1> ; The SFT is a way to allow applications to open file handles to files 
    76                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    77                              <1> ; under the first header, and then a second header will be linked to the 
    78                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    79                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    80                              <1> ; using the FCBS= command. Default FCBS=5.
    81                              <1> ;
    82                              <1> ; A file handle describes the file, and the location within the file that
    83                              <1> ; we are reading. The file handle can be manipulated without the file
    84                              <1> ; being in memory, thus allowing the user to access data without needing 
    85                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    86                              <1> ; accessing devices, by treating them as files with their drivers 
    87                              <1> ; responding and translating the manipulations of the file handle itself.
    88                              <1> ; Neither the driver nor the application should see or use the SFT for
    89                              <1> ; the handle, as it is subject to change (and will change when file 
    90                              <1> ; sharing provisions are included). The DOS will make requests to the 
    91                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    92                              <1> ; track of the information in the SFT entry for that handle. 
    93                              <1> ;
    94                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    95                              <1> ; can point to the same file. It all depends on what the applications 
    96                              <1> ; want to do with the File.
    97                              <1> ;
    98                              <1> ; !!!!IMPORTANT!!!!
    99                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   100                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   101                              <1> ;
   102                              <1> ;Each SFT may look like this:
   103                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   104                              <1> ;            |                |
   105                              <1> ;       wNumFiles*sft    wNumFiles*sft
   106                              <1> ;
   107                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   108                              <1> ; System FCBs.
   109                              <1> ;
   110                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   111                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   112                              <1> ;
   113                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   114                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   115                              <1> ;------------------------------------------------------------------------;
   116                              <1> struc sfth   ;System file table header
   117                              <1> ; This is the SFT header.
   118                              <1> ; This structure comes before the start of the first file in the array/table.
   119 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   120 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc sft
   124                              <1> ;This is the file struc itself
   125 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   126 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   127 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   128 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   129 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   130 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   131 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   132 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   133 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   134 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   135 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   136 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   137 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   138 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   139 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   140 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   141 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   142 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   143 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   144                              <1> ;                           0 means no record
   145                              <1> endstruc
   146                              <1> ;Open Mode equates
   147                              <1> ;Access modes   Bits[2:0]
   148                              <1> ReadAccess      equ 0h
   149                              <1> WriteAccess     equ 1h
   150                              <1> RWAccess        equ 2h
   151                              <1> ;Bit 3 reserved 0
   152                              <1> ;Sharing modes  Bits[6:4]
   153                              <1> CompatShare     equ 0h
   154                              <1> denyRWShare     equ 10h
   155                              <1> denyWriteShare  equ 20h
   156                              <1> denyReadShare   equ 30h
   157                              <1> denyNoneShare   equ 40h
   158                              <1> netFCBShare     equ 70h
   159                              <1> noInherit       equ 80h
   160                              <1> ;Bits 8-12 reserved 0
   161                              <1> 
   162                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   163                              <1> ;Buffering on writes
   164                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   165                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   166                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   167                              <1> ;Attribute Byte
   168                              <1> readOnlyFile    equ 1h
   169                              <1> hiddenFile      equ 2h
   170                              <1> systemFile      equ 4h
   171                              <1> volumeLabel     equ 8h
   172                              <1> directoryFile   equ 10h ;Directory entry
   173                              <1> archiveFile     equ 20h
   174                              <1> ;Device Info equates
   175                              <1> ;For a block device, bits [5:0] contain the drive number
   176                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   177                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   178                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   179                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   180                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   181                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   182                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   183                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   184                              <1> devCharDev      equ 80h ;If set, it is a char device!
   185                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   186                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   187                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   188                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   189                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   190                              <1>  
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   214 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;Note! A buffer is marked as referenced only when the application 
   225                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> ; Memory control block for each memory arena
   228                              <1> ;------------------------------------------------------------------------;
   229                              <1> struc mcb
   230 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   231 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   232 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   233 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   234                              <1>     .program:
   235                              <1> endstruc
   236                              <1> ;MCB equates
   237                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   238                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   239                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   240                              <1> mcbMarkCtn      equ "M"
   241                              <1> mcbMarkEnd      equ "Z"
   242                              <1> 
   243                              <1> memFirstFit     equ 0   ;First free block goes to application
   244                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   245                              <1> memLastFit      equ 2   ;Last free block goes to application
   246                              <1> 
   247                              <1> ;Owner = Para aligned address => Owning application PSP
   248                              <1> ;...To consider...
   249                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   250                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   251                              <1> ;------------------------------------------------------------------------;
   252                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   253                              <1> ; following order, thus allowing for return values to be placed in the 
   254                              <1> ; registers by accessing the caller register stack frame.
   255                              <1> ;------------------------------------------------------------------------;
   256                              <1> struc callerFrame
   257 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   258 00000008 ????????????????    <1>     .rbx    resq 1    
   259 00000010 ????????????????    <1>     .rcx    resq 1
   260 00000018 ????????????????    <1>     .rdx    resq 1
   261 00000020 ????????????????    <1>     .rsi    resq 1
   262 00000028 ????????????????    <1>     .rdi    resq 1
   263 00000030 ????????????????    <1>     .rbp    resq 1
   264 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   265 00000040 ????????????????    <1>     .r9     resq 1
   266                              <1> ;Pushed by Processor when invoked via Interrupt
   267 00000048 ????????????????    <1>     .rip    resq 1
   268 00000050 ????????????????    <1>     .cs     resq 1
   269 00000058 ????????????????    <1>     .flags  resq 1
   270                              <1> endstruc
   271                              <1> 
   272                              <1> struc dpl
   273                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   274                              <1> ; server calls
   275 00000000 ????????????????    <1>     .rax    resq 1
   276 00000008 ????????????????    <1>     .rbx    resq 1
   277 00000010 ????????????????    <1>     .rcx    resq 1
   278 00000018 ????????????????    <1>     .rdx    resq 1
   279 00000020 ????????????????    <1>     .rsi    resq 1
   280 00000028 ????????????????    <1>     .rdi    resq 1
   281 00000030 ????????????????    <1>     .r8     resq 1
   282 00000038 ????????????????    <1>     .r9     resq 1
   283 00000040 ????????????????    <1>     .align  resq 1
   284 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   285 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   286                              <1> endstruc
   287                              <1> 
   288                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   289 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   290 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   291 00000010 ????????????????    <1>     .newSFTVal      resq 1
   292 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   293 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   294 00000028 ????????????????    <1>     .newLastdrive   resq 1
   295 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   296 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   297 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   298 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   299 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   300 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   301 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   302                              <1> endstruc
   303                              <1> 
   304                              <1> struc filename
   305                              <1> ;8.3 File name struct
   306 00000000 ????????????????    <1>     .fName  resb 8
   307 00000008 ??????              <1>     .fExt   resb 3
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   311 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   312 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   313 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   314 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   315 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   316 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   317 00000016 ????                <1>     .fileTime   resw 1  ;File time
   318 00000018 ????                <1>     .fileDate   resw 1  ;File date
   319 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   320 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   321                              <1> endstruc
   322                              <1> 
   323                              <1> struc psp
   324 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   325 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   326 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   327 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   328 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   329 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   330 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   331                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   332 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   333 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   334 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   335 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   336 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   337 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   338 0000005B ??                  <1>                 resb 1  ;Reserved byte
   339                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   340                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   341                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   342                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   343                              <1> ; always used and xtraHdlSz.
   344                              <1> ;Will need to add two SYSCALLS for future expansion:
   345                              <1> ;       1) Get Program Environment Pointer
   346                              <1> ;       2) Get Command Line arguments pointer
   347                              <1> ;The below are in the same place as in DOS.
   348                              <1>     .cmdLineArgPtr: ;Symbol for future use
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   357                              <1> 
   358                              <1> struc clkStruc
   359 00000000 ????                <1>     .dateWord   resw 1
   360 00000002 ??                  <1>     .minutes    resb 1
   361 00000003 ??                  <1>     .hours      resb 1
   362 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   363 00000005 ??                  <1>     .seconds    resb 1
   364                              <1> endstruc
   365                              <1> 
   366                              <1> struc countryStruc
   367 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   368                              <1>                         ;0 = month day year hh:mm:ss
   369                              <1>                         ;1 = day month year hh:mm:ss
   370                              <1>                         ;2 = year month day hh:mm:ss
   371 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   372 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   373 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   374 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   375 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   376 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   377                              <1>                         ;0 = Symbol leads, without space
   378                              <1>                         ;1 = Symbol follows, without space
   379                              <1>                         ;2 = Symbol leads, one space
   380                              <1>                         ;3 = Symbol follows, one space
   381                              <1>                         ;4 = Symbol replace decimal separator
   382 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   383 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   384 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   385 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   386 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   387                              <1> endstruc
   388                              <1> 
   389                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   390                              <1> ;for a space of 64Gb
   391                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   392                              <1> dosLowBase  equ 600h    ;Low load address
   393                              <1> 
   394                              <1> ;Critical Error AH bitfield equates
   395                              <1> critRead    equ 0h
   396                              <1> critWrite   equ 1h
   397                              <1> critDOS     equ 0h
   398                              <1> critFAT     equ 2h
   399                              <1> critDir     equ 4h
   400                              <1> critData    equ 6h
   401                              <1> critFailOK  equ 8h
   402                              <1> critRetryOK equ 10h
   403                              <1> critIgnorOK equ 20h
   404                              <1> critCharDev equ 80h
   405                              <1> 
   406                              <1> critIgnore  equ 0
   407                              <1> critRetry   equ 1
   408                              <1> critAbort   equ 2
   409                              <1> critFail    equ 3
   410                              <1> 
   411                              <1> ;MISC ASCII control chars
   412                              <1> NUL equ 00h ;^@         | ASCII Null
   413                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   414                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   415                              <1> BEL equ 07h ;^G         | ASCII Bell
   416                              <1> BSP equ 08h ;^H         | ASCII Backspace
   417                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   418                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   419                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   420                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   421                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   422                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   423                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   424                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   425                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   426                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   427                              <1> SPC equ 20h ;Printable  | ASCII Space
   428                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   429                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   430                              <1> 
   431                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   432                              <1> ;Extended Ascii Codes
   433                              <1> eF1     equ 3Bh ;F1 second byte
   434                              <1> eF2     equ 3Ch ;F2 second byte
   435                              <1> eF3     equ 3Dh ;F3 second byte
   436                              <1> eF4     equ 3Eh ;F4 second byte
   437                              <1> eF5     equ 3Fh ;F5 second byte
   438                              <1> eF6     equ 40h ;F6 second byte
   439                              <1> eF7     equ 41h ;F7 second byte
   440                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   441                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   442                              <1> eIns    equ 52h ;Insert second byte
   443                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   444                              <1> 
   445                              <1> ;Default Configuration for the system
   446                              <1> 
   447                              <1> buffersDefault  equ 30
   448                              <1> filesDefault    equ 20
   449                              <1> fcbsDefault     equ 4
   450                              <1> safeFcbsDeflt   equ 0
   451                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on INT 44h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt42 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53                              <1> 
    54 0000011D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    54 00000126 000000000000000000- <1>
    54 0000012F 000000000000000000- <1>
    54 00000138 000000000000000000- <1>
    54 00000141 000000000000000000- <1>
    54 0000014A 000000000000000000- <1>
    54 00000153 000000000000000000- <1>
    54 0000015C 000000000000000000- <1>
    54 00000165 000000000000000000- <1>
    54 0000016E 000000000000000000- <1>
    54 00000177 000000000000000000- <1>
    54 00000180 000000000000000000- <1>
    54 00000189 000000000000000000- <1>
    54 00000192 000000000000000000- <1>
    54 0000019B 0000                <1>
    55 0000019D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 00000000000000      <1>
    57                              <1> 
    58 0000026C 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    58 00000275 0000                <1>
    59 00000277 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    59 00000280 00000000            <1>
    60 00000284 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    60 0000028D 0000000000          <1>
    61                              <1> 
    62 00000292 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    62 0000029B 000000000000000000- <1>
    62 000002A4 000000000000000000- <1>
    62 000002AD 000000000000000000- <1>
    62 000002B6 000000000000000000- <1>
    62 000002BF 000000000000000000- <1>
    62 000002C8 000000000000000000- <1>
    62 000002D1 000000000000000000- <1>
    62 000002DA 00000000000000      <1>
    63 000002E1 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    63 000002EA 000000000000000000- <1>
    63 000002F3 000000000000000000- <1>
    63 000002FC 000000000000000000- <1>
    63 00000305 000000000000000000- <1>
    63 0000030E 000000000000000000- <1>
    63 00000317 000000000000000000- <1>
    63 00000320 000000000000000000- <1>
    63 00000329 00000000000000      <1>
    64                              <1> 
    65                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    66 00000330 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    66 00000339 000000000000000000- <1>
    66 00000342 000000000000000000- <1>
    66 0000034B 000000000000000000- <1>
    66 00000354 000000000000000000- <1>
    66 0000035D 000000000000000000- <1>
    66 00000366 000000000000000000- <1>
    66 0000036F 000000000000000000- <1>
    66 00000378 00000000000000      <1>
    67 0000037F 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 00000388 000000000000000000- <1>
    67 00000391 000000000000000000- <1>
    67 0000039A 000000000000000000- <1>
    67 000003A3 000000000000000000- <1>
    67 000003AC 000000000000000000- <1>
    67 000003B5 000000000000000000- <1>
    67 000003BE 000000000000000000- <1>
    67 000003C7 00000000000000      <1>
    68                              <1> 
    69 000003CE 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    70 000003D6 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    71                              <1> 
    72 000003DE 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    72 000003E7 000000000000000000- <1>
    72 000003F0 000000000000000000- <1>
    72 000003F9 000000000000000000- <1>
    72 00000402 000000000000000000- <1>
    72 0000040B 000000000000000000- <1>
    72 00000414 000000000000000000- <1>
    72 0000041D 000000000000000000- <1>
    72 00000426 000000000000000000- <1>
    72 0000042F 000000000000000000- <1>
    72 00000438 000000000000000000- <1>
    72 00000441 000000000000000000- <1>
    72 0000044A 000000000000000000- <1>
    72 00000453 000000000000000000- <1>
    72 0000045C 0000                <1>
    73                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    74                              <1> ; users overtyping
    75                              <1> 
    76                              <1> ;Internal Function vars
    77                              <1> ;Dir Vars
    78 0000045E 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    79                              <1> ;                                   Bit[1] set => /P or /p specified
    80 0000045F 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    81 00000460 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    82 00000461 00                  <1> dirDrv      db 0    ;0 based drive number to use
    83 00000462 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    83 0000046B 000000000000000000- <1>
    83 00000474 000000000000000000- <1>
    83 0000047D 000000000000000000- <1>
    83 00000486 000000000000000000- <1>
    83 0000048F 000000000000000000- <1>
    83 00000498 000000000000000000- <1>
    83 000004A1 000000000000000000- <1>
    83 000004AA 000000000000000000- <1>
    83 000004B3 000000000000000000- <1>
    83 000004BC 000000000000000000- <1>
    83 000004C5 000000000000000000- <1>
    83 000004CE 000000000000000000- <1>
    83 000004D7 000000000000000000- <1>
    83 000004E0 0000                <1>
    84 000004E2 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    86 0000056A 2E                  <1> dirSPExt    db "."
    87 0000056B 3F3F3F              <1>             db 3 dup ("?")
    88                              <1> 
    89                              <1> ;Volume Vars
    90 0000056E 000000000000000000- <1> volLblSpc   db 13 dup (0)
    90 00000577 00000000            <1>
    91 0000057B 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    92 0000057C 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    93                              <1> 
    94                              <1> ;Time/Date vars
    95 00000582 00                  <1> td1 db 0    ;Minutes/Year
    96 00000583 00                  <1> td2 db 0    ;Hours/Zero
    97 00000584 00                  <1> td3 db 0    ;Hundredths/Day
    98 00000585 00                  <1> td4 db 0    ;Seconds/Month
    99                              <1> 
   100                              <1> ;Rename/Copy Buffers
   101 00000586 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   101 0000058F 000000000000000000- <1>
   101 00000598 000000000000000000- <1>
   101 000005A1 000000000000000000- <1>
   101 000005AA 000000000000000000- <1>
   101 000005B3 000000000000000000- <1>
   101 000005BC 000000000000000000- <1>
   101 000005C5 000000000000000000- <1>
   101 000005CE 000000000000000000- <1>
   101 000005D7 000000000000000000- <1>
   101 000005E0 000000000000000000- <1>
   101 000005E9 000000000000000000- <1>
   101 000005F2 000000000000000000- <1>
   101 000005FB 000000000000000000- <1>
   101 00000604 0000                <1>
   102 00000606 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   102 0000060F 000000000000000000- <1>
   102 00000618 000000000000000000- <1>
   102 00000621 000000000000000000- <1>
   102 0000062A 000000000000000000- <1>
   102 00000633 000000000000000000- <1>
   102 0000063C 000000000000000000- <1>
   102 00000645 000000000000000000- <1>
   102 0000064E 000000000000000000- <1>
   102 00000657 000000000000000000- <1>
   102 00000660 000000000000000000- <1>
   102 00000669 000000000000000000- <1>
   102 00000672 000000000000000000- <1>
   102 0000067B 000000000000000000- <1>
   102 00000684 0000                <1>
   103                              <1> ;Copy Handles
   104 00000686 FFFF                <1> sourceHdl   dw -1
   105 00000688 FFFF                <1> destHdl     dw -1
   106                              <1> 
   107 0000068A 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   107 00000693 000000000000000000- <1>
   107 0000069C 000000000000000000- <1>
   107 000006A5 000000000000000000- <1>
   107 000006AE 000000000000000000- <1>
   107 000006B7 000000000000000000- <1>
   107 000006C0 000000000000000000- <1>
   107 000006C9 000000000000000000- <1>
   107 000006D2 000000000000000000- <1>
   107 000006DB 000000000000000000- <1>
   107 000006E4 000000000000000000- <1>
   107 000006ED 000000000000000000- <1>
   107 000006F6 000000000000000000- <1>
   107 000006FF 000000000000000000- <1>
   107 00000708 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000070A 03444952            <1>     db 3, "DIR"
     8 0000070E D216                <1>     dw dir - startLbl
     9                              <1> 
    10 00000710 024344              <1>     db 2, "CD"
    11 00000713 701A                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000715 054348444952        <1>     db 5, "CHDIR"
    14 0000071B 701A                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000071D 024D44              <1>     db 2, "MD"
    17 00000720 181B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 00000722 054D4B444952        <1>     db 5, "MKDIR"
    20 00000728 181B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 0000072A 025244              <1>     db 2, "RD"
    23 0000072D 641B                <1>     dw rmdir - startLbl
    24                              <1> 
    25 0000072F 05524D444952        <1>     db 5, "RMDIR"
    26 00000735 641B                <1>     dw rmdir - startLbl
    27                              <1> 
    28 00000737 0344454C            <1>     db 3, "DEL"
    29 0000073B 571D                <1>     dw erase - startLbl
    30                              <1> 
    31 0000073D 054552415345        <1>     db 5, "ERASE"
    32 00000743 571D                <1>     dw erase - startLbl
    33                              <1> 
    34 00000745 0444415445          <1>     db 4, "DATE"
    35 0000074A 801D                <1>     dw date - startLbl
    36                              <1> 
    37 0000074C 0454494D45          <1>     db 4, "TIME"
    38 00000751 461E                <1>     dw time - startLbl
    39                              <1> 
    40 00000753 04434F5059          <1>     db 4, "COPY"
    41 00000758 B01B                <1>     dw copy - startLbl
    42                              <1> 
    43 0000075A 0443545459          <1>     db 4, "CTTY"
    44 0000075F DE1E                <1>     dw ctty - startLbl
    45                              <1> 
    46 00000761 03434C53            <1>     db 3, "CLS"
    47 00000765 791F                <1>     dw cls - startLbl
    48                              <1> 
    49 00000767 05425245414B        <1>     db 5, "BREAK"
    50 0000076D EB1F                <1>     dw break - startLbl
    51                              <1> 
    52 0000076F 06564552494659      <1>     db 6, "VERIFY"
    53 00000776 6C20                <1>     dw verify - startLbl
    54                              <1> 
    55 00000778 0652454E414D45      <1>     db 6, "RENAME"
    56 0000077F E920                <1>     dw rename - startLbl
    57                              <1> 
    58 00000781 044D4F5645          <1>     db 4, "MOVE"
    59 00000786 E920                <1>     dw rename - startLbl
    60                              <1>     
    61 00000788 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000791 F121                <1>     dw truename - startLbl
    63                              <1> 
    64 00000793 03564552            <1>     db 3, "VER"
    65 00000797 3A23                <1>     dw version - startLbl
    66                              <1> 
    67 00000799 03564F4C            <1>     db 3, "VOL"
    68 0000079D 2722                <1>     dw volume - startLbl
    69                              <1> 
    70 0000079F 034D454D            <1>     db 3, "MEM"
    71 000007A3 7E23                <1>     dw memory - startLbl
    72                              <1> 
    73 000007A5 0445584954          <1>     db 4, "EXIT"
    74 000007AA 6025                <1>     dw exit - startLbl
    75                              <1> 
    76 000007AC 0454595045          <1>     db 4, "TYPE"
    77 000007B1 C824                <1>     dw type - startLbl
    78                              <1> 
    79 000007B3 05544F554348        <1>     db 5, "TOUCH"
    80 000007B9 B621                <1>     dw touch - startLbl
    81                              <1> 
    82 000007BB FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 000007BC 0D0A24              <1> crlf    db  CR,LF,"$"
     3 000007BF 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 000007C4 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 000007CD 696C65206D69737369- <1>
     4 000007D6 6E670D0A24          <1>
     5 000007DB 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 000007E4 6469736B2077697468- <1>
     5 000007ED 206261746368206669- <1>
     5 000007F6 6C65                <1>
     6 000007F8 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000801 737320616E79206B65- <1>
     6 0000080A 79207768656E207265- <1>
     6 00000813 6164790D0A24        <1>
     7 00000819 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 00000822 6E64206F722066696C- <1>
     7 0000082B 65206E616D650D0A24  <1>
     8 00000834 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 0000083D 2066696C65206E616D- <1>
     8 00000846 65206F7220          <1>
     9 0000084B 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 00000854 666F756E640D0A24    <1>
    10 0000085C 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 00000865 656E74206469736B20- <1>
    10 0000086E 73706163650D0A24    <1>
    11 00000876 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 0000087F 7669726F6E6D656E74- <1>
    11 00000888 2073706163650D0A24  <1>
    12 00000891 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000089A 74696F6E206572726F- <1>
    12 000008A3 720D0A24            <1>
    13 000008A7 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 000008B0 6F7420626520636F70- <1>
    13 000008B9 696564206F6E746F20- <1>
    13 000008C2 697473656C660D0A24  <1>
    14 000008CB 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 000008D4 662064657374696E61- <1>
    14 000008DD 74696F6E206C6F7374- <1>
    14 000008E6 206265666F72652063- <1>
    14 000008EF 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 000008F5 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 000008FE 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000907 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000910 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000911 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 0000091A 65650D0A24          <1>
    21 0000091F 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000928 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000931 726976652073706563- <1>
    23 0000093A 696669636174696F6E- <1>
    23 00000943 0D0A24              <1>
    24 00000946 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 0000094F 6B6579207768656E20- <1>
    24 00000958 7265616479202E202E- <1>
    24 00000961 202E2024            <1>
    25 00000965 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 0000096E 6172616D657465720D- <1>
    25 00000977 0A24                <1>
    26                              <1> 
    27 00000979 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000982 576564546875467269- <1>
    27 0000098B 536174              <1>
    28 0000098E 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000997 206461746524        <1>
    29 0000099D 43757272656E742064- <1> curDate db  "Current date is $"
    29 000009A6 6174652069732024    <1>
    30 000009AE 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 000009B7 657720646174652024  <1>
    31 000009C0 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 000009C9 293A2024            <1>
    32 000009CD 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 000009D6 293A2024            <1>
    33 000009DA 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 000009E3 293A2024            <1>
    34 000009E7 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 000009F0 2074696D6524        <1>
    35 000009F6 43757272656E742074- <1> curTime db  "Current time is $"
    35 000009FF 696D652069732024    <1>
    36 00000A07 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000A10 65772074696D653A20- <1>
    36 00000A19 24                  <1>
    37                              <1> 
    38 00000A1A 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000A23 7572652028592F4E29- <1>
    38 00000A2C 3F2024              <1>
    39                              <1> 
    40 00000A2F 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000A38 56657273696F6E2024  <1>
    41                              <1> 
    42 00000A41 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000A4A 6E2064726976652024  <1>
    43 00000A53 2069732024          <1> volOk   db " is $"
    44 00000A58 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000A61 6162656C24          <1>
    45                              <1> 
    46 00000A66 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000A6F 69726563746F72790D- <1>
    46 00000A78 0A24                <1>
    47 00000A7A 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000A83 206372656174652064- <1>
    47 00000A8C 69726563746F72790D- <1>
    47 00000A95 0A24                <1>
    48 00000A97 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000AA0 6174682C206E6F7420- <1>
    48 00000AA9 6469726563746F7279- <1>
    48 00000AB2 2C0D0A              <1>
    49 00000AB5 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000ABE 6F7279206E6F742065- <1>
    49 00000AC7 6D7074790D0A24      <1>
    50 00000ACE 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000AD7 79206F66202024      <1>
    51 00000ADE 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000AE7 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000AF0 7269766520696E2073- <1>
    52 00000AF9 656172636820706174- <1>
    52 00000B02 680D0A24            <1>
    53 00000B06 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000B0F 65766963650D0A24    <1>
    54 00000B17 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000B20 20666F756E640D0A24  <1>
    55 00000B29 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000B32 726F720D0A24        <1>
    56 00000B38 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000B41 6F74206265206E6573- <1>
    56 00000B4A 7465640D0A24        <1>
    57 00000B50 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000B59 6174652066696C6520- <1>
    57 00000B62 6572726F7220647572- <1>
    57 00000B6B 696E6720706970650D- <1>
    57 00000B74 0A24                <1>
    58 00000B76 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000B7F 2062696E6172792072- <1>
    58 00000B88 656164732066726F6D- <1>
    58 00000B91 206120646576696365- <1>
    58 00000B9A 0D0A24              <1>
    59 00000B9D 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000BA3 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000BA8 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000BB1 24                  <1>
    62 00000BB2 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000BBB 2024                <1>
    63 00000BBD 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000BC6 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000BCF 617468206F72206669- <1>
    64 00000BD8 6C65206E616D650D0A- <1>
    64 00000BE1 24                  <1>
    65 00000BE2 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000BEB 756D626572206F6620- <1>
    65 00000BF4 706172616D65746572- <1>
    65 00000BFD 730D0A24            <1>
    66 00000C01 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C0A 74696E6720746F2064- <1>
    66 00000C13 6576696365          <1>
    67 00000C18 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000C1C 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000C25 20202020202020546F- <1>
    69 00000C2E 74616C207379737465- <1>
    69 00000C37 6D206D656D6F72793A- <1>
    69 00000C40 2024                <1>
    70 00000C42 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000C4B 20202020202020204D- <1>
    70 00000C54 656D6F727920757365- <1>
    70 00000C5D 6420627920444F533A- <1>
    70 00000C66 2024                <1>
    71 00000C68 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000C71 656D6F727920757365- <1>
    71 00000C7A 64206279206170706C- <1>
    71 00000C83 69636174696F6E733A- <1>
    71 00000C8C 2024                <1>
    72 00000C8E 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000C97 656D6F727920726573- <1>
    72 00000CA0 657276656420627920- <1>
    72 00000CA9 68617264776172653A- <1>
    72 00000CB2 2024                <1>
    73 00000CB4 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000CBD 202020202020202020- <1>
    73 00000CC6 2020202020204D656D- <1>
    73 00000CCF 6F727920667265653A- <1>
    73 00000CD8 2024                <1>
    74 00000CDA 20627974657324      <1> memByte db " bytes$"
    75 00000CE1 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000CEA 6F7420417373657274- <1>
    75 00000CF3 61696E20444F532045- <1>
    75 00000CFC 6E74727920506F696E- <1>
    75 00000D05 7424                <1>
    76 00000D07 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000D10 416C6C6F636174696F- <1>
    76 00000D19 6E204572726F7224    <1>
    77 00000D21 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000D2A 4572726F7224        <1>
    78 00000D30 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000D39 68616C74656424      <1>
    79                              <1> 
    80 00000D40 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000D49 206372656174652066- <1>
    80 00000D52 696C650D0A24        <1>
    81 00000D58 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000D61 206372656174652070- <1>
    81 00000D6A 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000D6F 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000D78 6F6E206572726F720D- <1>
    83 00000D81 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000D82 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000D86 2020202024          <1> fourSpc  db "    $"
    88 00000D8B 20202024            <1> threeSpc db "   $"
    89 00000D8F 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000D92 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000D9B 696679204F4E206F72- <1>
    91 00000DA4 204F46460D0A24      <1>
    92 00000DAB 504154483D          <1> pathEVar db "PATH="
    93 00000DB0 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000DB7 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000DBB 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000DBE 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000DC2 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000DC5 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000DC7 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000DCA CD41                <1>     int 41h
    11 00000DCC EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000DCE B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000DD3 CD41                <1>     int 41h
    15 00000DD5 66890531F2FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000DDC 488D15D01E0000      <1>     lea rdx, critErrorHandler
    18 00000DE3 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    19 00000DE7 B844250000          <1>     mov eax, 2544h
    20 00000DEC CD41                <1>     int 41h
    21 00000DEE 488D154E210000      <1>     lea rdx, int43h
    22 00000DF5 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    23 00000DF9 B843250000          <1>     mov eax, 2543h
    24 00000DFE CD41                <1>     int 41h
    25 00000E00 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E07 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    27 00000E0B B842250000          <1>     mov eax, 2542h
    28 00000E10 CD41                <1>     int 41h
    29 00000E12 F60596F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000E19 7576                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000E1B E8B7040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000E20 0FB70D00F2FFFF      <1>     movzx ecx, word [numHdls]
    34 00000E27 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000E2C B43E                <1>     mov ah, 3Eh ;File close
    37 00000E2E CD41                <1>     int 41h
    38 00000E30 FFC3                <1>     inc ebx ;Goto next file
    39 00000E32 39CB                <1>     cmp ebx, ecx
    40 00000E34 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000E36 488B25C8F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000E3D FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000E3E C605D8F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000E45 E8091C0000          <1>     call clearCommandLineState
    48 00000E4A E890180000          <1>     call printCRLF
    49 00000E4F E8CD1B0000          <1>     call printPrompt
    50                              <1> 
    51 00000E54 488D15C2F2FFFF      <1>     lea rdx, inBuffer
    52 00000E5B B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    53 00000E60 CD41                <1>     int 41h
    54 00000E62 E878180000          <1>     call printCRLF  ;Note we have accepted input
    55                              <1> 
    56                              <1> ;First check we had something typed in of length greater than 1
    57                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    58 00000E67 803DB0F2FFFF01      <1>     cmp byte [inBuffer + 1], 1  ;Check input length valid
    59 00000E6E 7444                <1>     je .dfltErrExit
    60 00000E70 72D3                <1>     jb .inputMain
    61                              <1>     ;Copy over the input text
    62 00000E72 488D35A4F2FFFF      <1>     lea rsi, inBuffer
    63 00000E79 488D3D1DF3FFFF      <1>     lea rdi, cmdBuffer
    64 00000E80 B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000E85 F3A4                <1>     rep movsb
    66                              <1> .pipeLoop:
    67 00000E87 E838000000          <1>     call parseInput
    68 00000E8C E8CB010000          <1>     call doCommandLine
    69                              <1> .pipeProceed:
    70 00000E91 E841040000          <1>     call cleanUpRedir
    71 00000E96 488B050AF2FFFF      <1>     mov rax, qword [cmdEndPtr]
    72 00000E9D 488905FBF1FFFF      <1>     mov qword [cmdStartPtr], rax
    73 00000EA4 F60504F2FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    74 00000EAB 7498                <1>     jz .inputMain
    75 00000EAD E8861B0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000EB2 EBD3                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000EB4 488D155EF9FFFF      <1>     lea rdx, badCmd
    79 00000EBB B409                <1>     mov ah, 09h
    80 00000EBD CD41                <1>     int 41h
    81 00000EBF E981FFFFFF          <1>     jmp .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000EC4 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000ECB 488B35CDF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    90 00000ED2 4885F6              <1>     test rsi, rsi
    91 00000ED5 7507                <1>     jnz .notNewCmd
    92 00000ED7 488D35C0F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    93                              <1> .notNewCmd:
    94 00000EDE 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    95 00000EE1 E82C1B0000          <1>     call skipSpaces ;Skip any preceeding spaces
    96 00000EE6 66AD                <1>     lodsw   ;Get the first two chars into ax
    97 00000EE8 668905C5F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    98 00000EEF 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    99 00000EF6 56                  <1>     push rsi
   100 00000EF7 57                  <1>     push rdi
   101 00000EF8 488D3D1EF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   102 00000EFF 57                  <1>     push rdi
   103 00000F00 E8D7060000          <1>     call copyCommandTailItemProgram
   104 00000F05 5F                  <1>     pop rdi
   105 00000F06 9C                  <1>     pushfq  ;Save the CF state
   106 00000F07 E8981A0000          <1>     call strlen
   107 00000F0C FFC9                <1>     dec ecx ;Drop the terminating char from the count
   108 00000F0E 58                  <1>     pop rax ;Get the CF state in al
   109 00000F0F 5F                  <1>     pop rdi
   110 00000F10 5E                  <1>     pop rsi
   111 00000F11 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   112 00000F13 A801                <1>     test al, 1  ;Was CF set?
   113 00000F15 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   114                              <1> .cmdLineProcess:
   115 00000F1B E8F21A0000          <1>     call skipSpaces ;Go to the next char in the input line
   116                              <1> .redirFound:
   117 00000F20 AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   118 00000F21 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   119 00000F23 747C                <1>     je .exit
   120 00000F25 E8F5040000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   121 00000F2A 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   122 00000F2C 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   123 00000F2E B020                <1>     mov al, " "
   124 00000F30 AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   125 00000F31 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   126 00000F34 F60581F1FFFFFF      <1>     test byte [arg1Flg], -1
   127 00000F3B 7521                <1>     jnz .arg2
   128                              <1> .arg1:
   129 00000F3D C60578F1FFFFFF      <1>     mov byte [arg1Flg], -1
   130 00000F44 E8C91A0000          <1>     call skipSpaces
   131 00000F49 4889F0              <1>     mov rax, rsi
   132 00000F4C 488D1D4AF2FFFF      <1>     lea rbx, cmdBuffer
   133 00000F53 4829D8              <1>     sub rax, rbx
   134 00000F56 880561F1FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   135 00000F5C EB2A                <1>     jmp short .argCommon
   136                              <1> .arg2:
   137 00000F5E F6055AF1FFFFFF      <1>     test byte [arg2Flg], -1
   138 00000F65 7521                <1>     jnz .argCommon
   139 00000F67 C60551F1FFFFFF      <1>     mov byte [arg2Flg], -1
   140 00000F6E E89F1A0000          <1>     call skipSpaces
   141 00000F73 4889F0              <1>     mov rax, rsi
   142 00000F76 488D1D20F2FFFF      <1>     lea rbx, cmdBuffer
   143 00000F7D 4829D8              <1>     sub rax, rbx
   144 00000F80 88053AF1FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   145 00000F86 EB00                <1>     jmp short .argCommon
   146                              <1> .argCommon:
   147                              <1>     ;More than two arguments? Do nothing more than just copy it
   148                              <1>     ; over. If we encounter an embedded CR, exit there too
   149 00000F88 E8851A0000          <1>     call skipSpaces
   150 00000F8D 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   151 00000F90 740F                <1>     je .exit
   152                              <1>     ;If not, we copy it over
   153 00000F92 E86F060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   154 00000F97 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   155 00000F9B 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   156                              <1> .exit:
   157 00000FA1 48FFCE              <1>     dec rsi
   158 00000FA4 488935FCF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   159 00000FAB B00D                <1>     mov al, CR
   160 00000FAD AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 00000FAE 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00000FB5 B00D                <1>     mov al, CR
   164 00000FB7 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00000FB9 FFC9                <1>     dec ecx ;rcx = -1
   166 00000FBB F2AE                <1>     repne scasb
   167 00000FBD F7D1                <1>     not ecx
   168 00000FBF FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00000FC1 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00000FC8 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00000FCA 488D3D4CF2FFFF      <1>     lea rdi, cmdPathSpec
   173 00000FD1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00000FD4 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00000FD6 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 00000FDB F2AE                <1>     repne scasb
   177 00000FDD 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 00000FE0 4889FE              <1>     mov rsi, rdi
   179 00000FE3 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00000FE4 AC                  <1>     lodsb
   182 00000FE5 3A0540F0FFFF        <1>     cmp al, byte [pathSep]
   183 00000FEB 740B                <1>     je .cmdStartFnd
   184 00000FED 4839DE              <1>     cmp rsi, rbx
   185 00000FF0 75F2                <1>     jne .keepSearching
   186 00000FF2 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00000FF5 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00000FF8 48FFC6              <1>     inc rsi
   190 00000FFB 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 00000FFE FC                  <1>     cld ;Go the sane way again
   192 00000FFF 488D3D7FF2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001006 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001007 B90E000000          <1>     mov ecx, cmdNameL
   195 0000100C 30C0                <1>     xor al, al
   196 0000100E F3AA                <1>     rep stosb
   197 00001010 5F                  <1>     pop rdi
   198 00001011 31C9                <1>     xor ecx, ecx
   199 00001013 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 00001014 AC                  <1>     lodsb
   202 00001015 84C0                <1>     test al, al ;Did we find the terminating null?
   203 00001017 7411                <1>     jz .nameLenFnd
   204 00001019 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 0000101B 740D                <1>     je .nameLenFnd
   206 0000101D 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 0000101F AA                  <1>     stosb   ;and store it
   208 00001020 FFC1                <1>     inc ecx
   209 00001022 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 00001028 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 0000102A 880D54F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 00001030 488D3D35F2FFFF      <1>     lea rdi, fcbCmdSpec
   215 00001037 57                  <1>     push rdi
   216 00001038 B90B000000          <1>     mov ecx, fcbNameL
   217 0000103D B020                <1>     mov al, " " ;Fill with spaces
   218 0000103F F3AA                <1>     rep stosb
   219 00001041 5F                  <1>     pop rdi
   220 00001042 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 00001043 E8301A0000          <1>     call asciiToFCB
   222 00001048 488D351DF2FFFF      <1>     lea rsi, fcbCmdSpec
   223 0000104F 488D3D21F2FFFF      <1>     lea rdi, cmdSpec
   224 00001056 E8781A0000          <1>     call FCBToAsciiz
   225                              <1>     return
    13                              <2> %%_ret:
    14 0000105B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> doCommandLine:
   228 0000105C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   229 00001063 488D3D58F0FFFF      <1>     lea rdi, cmdFcb
   230 0000106A B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   231 0000106F CD41                <1>     int 41h
   232 00001071 0FB71D3CF0FFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   233 00001078 80FF3A              <1>     cmp bh, ":"
   234 0000107B 752E                <1>     jne .noDriveSpecified
   235 0000107D 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   236 0000107F 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   237 00001082 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   238 00001085 3CFF                <1>     cmp al, -1  ;Int 41h returns AL = -1 if bad drive specified
   239 00001087 7415                <1>     je .badDrive
   240                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   241 00001089 803DF4F1FFFF02      <1>     cmp byte [cmdName], 2
   242 00001090 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   243 00001092 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   244 00001094 CD41                <1>     int 41h 
   245 00001096 B419                <1>     mov ah, 19h
   246 00001098 CD41                <1>     int 41h     ;Get current drive
   247 0000109A 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   248                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000109C 74(5B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   249                              <1> .badDrive:
   250 0000109E 488D1583F8FFFF      <1>     lea rdx, badDrv
   251 000010A5 B409                <1>     mov ah, 09h
   252 000010A7 CD41                <1>     int 41h
   253 000010A9 F9                  <1>     stc
   254                              <1>     return
    13                              <2> %%_ret:
    14 000010AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   255                              <1> .noDriveSpecified:
   256                              <1> ;Now we set the two FCB's in the command line
   257 000010AB F6050AF0FFFFFF      <1>     test byte [arg1Flg], -1
   258 000010B2 744D                <1>     jz .fcbArgsDone
   259 000010B4 0FB60502F0FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   260 000010BB 488D35DBF0FFFF      <1>     lea rsi, cmdBuffer
   261 000010C2 4801C6              <1>     add rsi, rax    ;Point to first argument
   262 000010C5 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   263 000010C9 B801290000          <1>     mov eax, 2901h
   264 000010CE CD41                <1>     int 41h
   265 000010D0 8805E8EFFFFF        <1>     mov byte [arg1FCBret], al
   266 000010D6 F605E2EFFFFFFF      <1>     test byte [arg2Flg], -1
   267 000010DD 7422                <1>     jz .fcbArgsDone
   268 000010DF 0FB605DAEFFFFF      <1>     movzx eax, byte [arg2Off]
   269 000010E6 488D35B0F0FFFF      <1>     lea rsi, cmdBuffer
   270 000010ED 4801C6              <1>     add rsi, rax    ;Point to first argument
   271 000010F0 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   272 000010F4 B801290000          <1>     mov eax, 2901h
   273 000010F9 CD41                <1>     int 41h
   274 000010FB 8805C0EFFFFF        <1>     mov byte [arg2FCBret], al
   275                              <1> .fcbArgsDone:
   276 00001101 488D3595F0FFFF      <1>     lea rsi, cmdBuffer
   277 00001108 488D1D75F1FFFF      <1>     lea rbx, cmdName
   278 0000110F B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   279 00001114 BAFFFF0000          <1>     mov edx, 0FFFFh
   280 00001119 B5FF                <1>     mov ch, -1
   281 0000111B CD4F                <1>     int 4Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   282                              <1>             ;        al = 0  if the command should be executed as usual
   283 0000111D B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   284 00001122 BAFFFF0000          <1>     mov edx, 0FFFFh
   285 00001127 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   286 00001129 CD4F                <1>     int 4Fh
   287 0000112B 741D                <1>     jz .executeInternal
   288                              <1>     ;Here we execute externally and return to the prompt
   289                              <1>     ; as if it was an internal execution
   290 0000112D 488D35E9EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   291 00001134 488D1D87EFFFFF      <1>     lea rbx, cmdFcb
   292 0000113B B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   293 00001140 BAFFFF0000          <1>     mov edx, 0FFFFh
   294 00001145 B5FF                <1>     mov ch, -1
   295 00001147 CD4F                <1>     int 4Fh 
   296                              <1>     return
    13                              <2> %%_ret:
    14 00001149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> .executeInternal:
   298                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   299                              <1> ;rsi points after the command terminator in the command tail
   300 0000114A 488D1DB9F5FFFF      <1>     lea rbx, functionTable
   301                              <1> .nextEntry:
   302 00001151 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   303 00001154 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   304 00001157 0F8439140000        <1>     je launchChild      ;If so, check externally now
   305 0000115D 380D21F1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   306 00001163 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   307                              <1>     ;Here they have the same length so lets see if the name is the same
   308 00001165 56                  <1>     push rsi
   309                              <1>     ;ecx has the length to compare
   310 00001166 51                  <1>     push rcx
   311 00001167 488D7301            <1>     lea rsi, qword [rbx + 1]
   312 0000116B 488D3D13F1FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   313 00001172 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   314 00001174 59                  <1>     pop rcx
   315 00001175 5E                  <1>     pop rsi
   316 00001176 7516                <1>     jne .gotoNextEntry
   317                              <1>     ;Here it was found both strings are equal
   318 00001178 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   319 0000117D 480FB71F            <1>     movzx rbx, word [rdi]
   320 00001181 488D3D78EEFFFF      <1>     lea rdi, startLbl
   321 00001188 4801FB              <1>     add rbx, rdi
   322 0000118B FFD3                <1>     call rbx    ;Call this function...
   323                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 0000118D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   324                              <1> .gotoNextEntry:
   325 0000118E 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   326 00001195 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   327 00001198 EBB7                <1>     jmp short .nextEntry
   328                              <1> .dfltErrExit:
   329 0000119A 488D1578F6FFFF      <1>     lea rdx, badCmd
   330 000011A1 B409                <1>     mov ah, 09h
   331 000011A3 CD41                <1>     int 41h
   332                              <1>     return
    13                              <2> %%_ret:
    14 000011A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> checkExtensionExec:
   336                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   337                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   338                              <1> ;         If ZF=ZE and CF=CY => Batch file
   339 000011A6 8B051FEFFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   340 000011AC 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   341 000011B1 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   342 000011B6 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   343 000011BB 3D434F4D20          <1>     cmp eax, "COM "
   344                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C0 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   345 000011C2 3D45584520          <1>     cmp eax, "EXE "
   346                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011C7 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   347 000011C9 3D42415420          <1>     cmp eax, "BAT "
   348                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000011CE 75(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 000011D0 F9                  <1>     stc
   350                              <1>     return
    13                              <2> %%_ret:
    14 000011D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> redirFailure:
   353 000011D2 488D1596FBFFFF      <1>     lea rdx, redirErrMsg
   354 000011D9 B913000000          <1>     mov ecx, redirErrMsgL
   355 000011DE EB0C                <1>     jmp short redirPipeFailureCommon
   356                              <1> pipeFailure:
   357 000011E0 488D1571FBFFFF      <1>     lea rdx, pipeErrMsg
   358 000011E7 B917000000          <1>     mov ecx, pipeErrMsgL
   359                              <1> redirPipeFailureCommon:
   360                              <1> ;This routine is called if any problems happen during 
   361                              <1> ;This routine tries to close whatever handles are not -1 and delete
   362                              <1> ; pipe files if the pipe count is not 0
   363                              <1> ;It resets all variables and proceeds.
   364 000011EC B800400000          <1>     mov eax, 4000h  ;Write handle
   365 000011F1 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   366 000011F6 CD41                <1>     int 41h
   367 000011F8 31DB                <1>     xor ebx, ebx    ;Select STDIN
   368 000011FA E8C8000000          <1>     call .closeHandle
   369 000011FF FFC3                <1>     inc ebx         ;Select STDOUT
   370 00001201 E8C1000000          <1>     call .closeHandle
   371 00001206 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   372 0000120B 488D15A5FBFFFF      <1>     lea rdx, conName
   373 00001212 CD41                <1>     int 41h
   374 00001214 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   375 00001216 B800450000          <1>     mov eax, 4500h  ;DUP
   376 0000121B CD41                <1>     int 41h
   377 0000121D 66C70590EEFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   378 00001226 0FB71D8BEEFFFF      <1>     movzx ebx, word [redirSTDIN]
   379 0000122D E895000000          <1>     call .closeHandle
   380                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   381 00001232 66C7057DEEFFFFFFFF  <1>     mov word [redirSTDIN], -1
   382 0000123B 0FB71D78EEFFFF      <1>     movzx ebx, word [redirSTDOUT]
   383 00001242 E880000000          <1>     call .closeHandle
   384 00001247 66C7056AEEFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   385 00001250 0FB71D59EEFFFF      <1>     movzx ebx, word [pipeSTDIN]
   386 00001257 E86B000000          <1>     call .closeHandle
   387 0000125C 66C7054BEEFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   388 00001265 0FB71D46EEFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   389 0000126C E856000000          <1>     call .closeHandle
   390 00001271 66C70538EEFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   391 0000127A 66C7052CEEFFFF0000  <1>     mov word [pipeFlag], 0  ;Cover the pipe number too
   392 00001283 488D15A6F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   393 0000128A 803A00              <1>     cmp byte [rdx], 0
   394 0000128D 7407                <1>     jz .checkOld
   395 0000128F B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   396 00001294 CD41                <1>     int 41h
   397                              <1> .checkOld:
   398 00001296 488D15E2F0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   399 0000129D 803A00              <1>     cmp byte [rdx],0
   400 000012A0 7407                <1>     jz .pipeNamesComplete
   401 000012A2 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   402 000012A7 CD41                <1>     int 41h
   403                              <1> .pipeNamesComplete:
   404 000012A9 31C0                <1>     xor eax, eax
   405                              <1>     ;Invalidate the pointers and the paths too
   406 000012AB 4889051CF1FFFF      <1>     mov qword [newPipe], rax
   407 000012B2 4889051DF1FFFF      <1>     mov qword [oldPipe], rax
   408 000012B9 890571F0FFFF        <1>     mov dword [pipe1Filespec], eax
   409 000012BF 8905BAF0FFFF        <1>     mov dword [pipe2Filespec], eax
   410 000012C5 F9                  <1>     stc
   411                              <1>     return
    13                              <2> %%_ret:
    14 000012C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .closeHandle:
   413 000012C7 81FBFFFFFFFF        <1>     cmp ebx, -1
   414                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012CD 74(C6)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   415 000012CF B8003E0000          <1>     mov eax, 3E00h
   416 000012D4 CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 000012D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> cleanUpRedir:
   420                              <1> ;Cleans up the redir stuff after we are done.
   421                              <1>     breakpoint
    81 000012D7 6687DB              <2> xchg bx, bx
   422 000012DA F605D5EDFFFFFF      <1>     test byte [redirIn], -1
   423 000012E1 0F85CD000000        <1>     jnz .redirInClear
   424 000012E7 F605C9EDFFFFFF      <1>     test byte [redirOut], -1
   425 000012EE 0F85F4000000        <1>     jnz .redirOutClear
   426 000012F4 0FB705B5EDFFFF      <1>     movzx eax, word [pipeSTDIN]
   427 000012FB 0FB71DB0EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   428 00001302 C1E310              <1>     shl ebx, 10h
   429 00001305 09D8                <1>     or eax, ebx
   430 00001307 3DFFFFFFFF          <1>     cmp eax, -1
   431 0000130C 7508                <1>     jne .pipe
   432 0000130E C6059AEDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   433                              <1>     return
    13                              <2> %%_ret:
    14 00001315 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   434                              <1> .pipe:
   435                              <1> ;Pipe processing here
   436                              <1> ;We handle stdin, closing the redir if it is and deleting
   437                              <1> ; the redir file.
   438                              <1> ;Then we handle stdout, moving the redir to stdin.
   439 00001316 66813D91EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   440 0000131F 7440                <1>     je .pipeNostdin
   441                              <1>     ;We close the handle first and delete the file.
   442 00001321 0FB71D88EDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   443 00001328 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   444 0000132A B800460000          <1>     mov eax, 4600h
   445 0000132F CD41                <1>     int 41h
   446 00001331 0F82A9FEFFFF        <1>     jc pipeFailure
   447 00001337 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   448 0000133C CD41                <1>     int 41h
   449 0000133E 0F829CFEFFFF        <1>     jc pipeFailure
   450 00001344 488B158BF0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   451 0000134B B800410000          <1>     mov eax, 4100h  ;Delete the file!
   452 00001350 CD41                <1>     int 41h
   453 00001352 0F8288FEFFFF        <1>     jc pipeFailure
   454 00001358 66C7054FEDFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   455                              <1> .pipeNostdin:
   456 00001361 66813D48EDFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   457                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000136A 74(15)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   458                              <1> ;Handle now moving STDOUT to STDIN
   459 0000136C B800460000          <1>     mov eax, 4600h
   460 00001371 31C9                <1>     xor ecx, ecx    ;DUP STDOUT into STDIN
   461 00001373 89CB                <1>     mov ebx, ecx
   462 00001375 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   463 00001377 CD41                <1>     int 41h
   464 00001379 0F8261FEFFFF        <1>     jc pipeFailure
   465                              <1> 
   466 0000137F 0FB71D2CEDFFFF      <1>     movzx ebx, word [pipeSTDOUT]    ;Return the OG handle back to STDOUT
   467 00001386 66891D23EDFFFF      <1>     mov word [pipeSTDIN], bx    ;First back it up at STDIN
   468                              <1> 
   469 0000138D FFC1                <1>     inc ecx
   470 0000138F B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   471 00001394 CD41                <1>     int 41h
   472 00001396 0F8244FEFFFF        <1>     jc pipeFailure
   473 0000139C 488B152BF0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   474 000013A3 4889152CF0FFFF      <1>     mov qword [oldPipe], rdx
   475                              <1>     ;Now we dup the handle into STDIN, and close STDOUT 
   476 000013AA 66C705FFECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   477                              <1>     return
    13                              <2> %%_ret:
    14 000013B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> .redirInClear:
   480 000013B4 0FB71DFDECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   481 000013BB 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   482 000013BD B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   483 000013C2 CD41                <1>     int 41h
   484 000013C4 0F8208FEFFFF        <1>     jc redirFailure
   485 000013CA B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   486 000013CF CD41                <1>     int 41h
   487 000013D1 0F82FBFDFFFF        <1>     jc redirFailure
   488 000013D7 66C705D8ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   489 000013E0 C605CFECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   490                              <1>     return
    13                              <2> %%_ret:
    14 000013E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> .redirOutClear:
   492 000013E8 0FB71DCBECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   493 000013EF B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   494 000013F4 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   495 000013F9 CD41                <1>     int 41h
   496 000013FB 0F82D1FDFFFF        <1>     jc redirFailure
   497 00001401 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   498 00001406 CD41                <1>     int 41h
   499 00001408 0F82C4FDFFFF        <1>     jc redirFailure
   500 0000140E 66C705A3ECFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   501 00001417 C60599ECFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   502                              <1>     return
    13                              <2> %%_ret:
    14 0000141E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> 
   504                              <1> checkAndSetupRedir:
   505                              <1> ;Checks and sets up redir as appropriate
   506                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   507                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   508                              <1> ;Output: ZF=NZ => No redir
   509                              <1> ;        ZF=ZY => Redir
   510                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   511                              <1> ;CF=CY if pipe set or an embedded CR found
   512 0000141F 57                  <1>     push rdi
   513 00001420 3C3C                <1>     cmp al, "<"
   514 00001422 740F                <1>     je .inputRedir
   515 00001424 3C3E                <1>     cmp al, ">"
   516 00001426 7478                <1>     je .outputRedir
   517 00001428 3C7C                <1>     cmp al, "|"
   518 0000142A 0F8428010000        <1>     je .pipeSetup
   519 00001430 F8                  <1>     clc
   520                              <1> .redirExit:
   521 00001431 5F                  <1>     pop rdi
   522                              <1>     return
    13                              <2> %%_ret:
    14 00001432 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .inputRedir:
   524 00001433 C6057CECFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   525 0000143A 488D3D51EEFFFF      <1>     lea rdi, rdrInFilespec
   526 00001441 E8CC150000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   527 00001446 E8BB010000          <1>     call copyCommandTailItem
   528                              <1>     ;jc .redirExit
   529 0000144B 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   530 0000144E E8BF150000          <1>     call skipSpaces
   531                              <1>     ;Setup the redir here for STDIN
   532 00001453 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   533 00001455 B800450000          <1>     mov eax, 4500h
   534 0000145A CD41                <1>     int 41h
   535 0000145C 0F8274010000        <1>     jc .redirError
   536 00001462 6689054FECFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   537 00001469 488D1522EEFFFF      <1>     lea rdx, rdrInFilespec
   538 00001470 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   539 00001475 CD41                <1>     int 41h
   540 00001477 0F8259010000        <1>     jc .redirError
   541 0000147D 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   542 0000147F 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   543 00001482 B800460000          <1>     mov eax, 4600h
   544 00001487 CD41                <1>     int 41h
   545 00001489 0F8247010000        <1>     jc .redirError
   546 0000148F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   547 00001494 CD41                <1>     int 41h
   548 00001496 0F823A010000        <1>     jc .redirError
   549 0000149C 30C0                <1>     xor al, al
   550 0000149E EB91                <1>     jmp short .redirExit
   551                              <1> .outputRedir:
   552 000014A0 C60510ECFFFF01      <1>     mov byte [redirOut], 1
   553 000014A7 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   554 000014AA 7509                <1>     jne .notDouble
   555 000014AC FE0505ECFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   556 000014B2 48FFC6              <1>     inc rsi ;Go past it too
   557                              <1> .notDouble:
   558 000014B5 488D3D25EEFFFF      <1>     lea rdi, rdrOutFilespec
   559 000014BC E851150000          <1>     call skipSpaces
   560 000014C1 E840010000          <1>     call copyCommandTailItem
   561                              <1>     ;jc .redirExit
   562 000014C6 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   563 000014C9 E844150000          <1>     call skipSpaces
   564                              <1>     ;Setup the redir here for STDOUT
   565 000014CE BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   566 000014D3 B800450000          <1>     mov eax, 4500h
   567 000014D8 CD41                <1>     int 41h
   568 000014DA 0F82F6000000        <1>     jc .redirError
   569 000014E0 668905D3EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   570 000014E7 488D15F3EDFFFF      <1>     lea rdx, rdrOutFilespec
   571 000014EE B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   572 000014F3 CD41                <1>     int 41h
   573 000014F5 7312                <1>     jnc .fileExists
   574 000014F7 B8003C0000          <1>     mov eax, 3C00h
   575 000014FC B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   576 00001501 CD41                <1>     int 41h
   577 00001503 0F82CD000000        <1>     jc .redirError
   578                              <1> .fileExists:
   579 00001509 B901000000          <1>     mov ecx, 1    ;Close STDOUT and duplicate bx into it
   580 0000150E 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   581 00001511 B800460000          <1>     mov eax, 4600h  ;DUP2
   582 00001516 CD41                <1>     int 41h
   583 00001518 0F82B8000000        <1>     jc .redirError
   584 0000151E B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   585 00001523 CD41                <1>     int 41h
   586 00001525 0F82AB000000        <1>     jc .redirError
   587 0000152B 803D85EBFFFF01      <1>     cmp byte [redirOut], 1
   588 00001532 7416                <1>     je .dontAppend
   589                              <1>     ;Here we move the file pointer to the end of the file
   590 00001534 31D2                <1>     xor edx, edx    ;Low order 32 bits
   591 00001536 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   592 00001538 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   593 0000153D B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   594 00001542 CD41                <1>     int 41h
   595 00001544 0F828C000000        <1>     jc .redirError
   596                              <1> .dontAppend:
   597 0000154A C60566EBFFFFFF      <1>     mov byte [redirOut], -1
   598 00001551 30C0                <1>     xor al, al
   599 00001553 E9D9FEFFFF          <1>     jmp .redirExit
   600                              <1> .pipeSetup:
   601                              <1> ;We only need to setup STDOUT redirection to the pipe file
   602 00001558 488D15D1EDFFFF      <1>     lea rdx, pipe1Filespec
   603 0000155F 803A00              <1>     cmp byte [rdx], 0
   604 00001562 740C                <1>     jz .pathFound
   605 00001564 488D1514EEFFFF      <1>     lea rdx, pipe2Filespec
   606 0000156B 803A00              <1>     cmp byte [rdx], 0
   607 0000156E 7560                <1>     jnz .pipeError
   608                              <1> .pathFound:
   609 00001570 48891557EEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   610 00001577 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   611 0000157C BB01000000          <1>     mov ebx, 1
   612 00001581 CD41                <1>     int 41h
   613 00001583 724B                <1>     jc .pipeError
   614 00001585 66890526EBFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   615 0000158C E80E140000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   616 00001591 0441                <1>     add al, "A"
   617 00001593 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   618 00001598 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   619 0000159A 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   620 0000159C B902000000          <1>     mov ecx, dirHidden  ;Hidden attributes
   621 000015A1 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   622 000015A6 CD41                <1>     int 41h
   623 000015A8 7226                <1>     jc .pipeError
   624                              <1>     ;AX has the handle for this file now, this will become STDOUT
   625                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   626 000015AA 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   627 000015AD B901000000          <1>     mov ecx, 1
   628 000015B2 B800460000          <1>     mov eax, 4600h
   629 000015B7 CD41                <1>     int 41h
   630 000015B9 7215                <1>     jc .pipeError
   631 000015BB B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   632 000015C0 CD41                <1>     int 41h
   633 000015C2 720C                <1>     jc .pipeError
   634 000015C4 C605E4EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   635 000015CB 30C0                <1>     xor al, al
   636 000015CD F9                  <1>     stc
   637 000015CE 5F                  <1>     pop rdi
   638                              <1>     return
    13                              <2> %%_ret:
    14 000015CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   639                              <1> .pipeError:
   640 000015D0 5F                  <1>     pop rdi 
   641 000015D1 E90AFCFFFF          <1>     jmp pipeFailure
   642                              <1> .redirError:
   643 000015D6 5F                  <1>     pop rdi 
   644 000015D7 E9F6FBFFFF          <1>     jmp redirFailure
   645                              <1> 
   646                              <1> copyCommandTailItemProgram:
   647                              <1> ;Copies a program name from the command tail until a terminator is found.
   648                              <1> ;Stores a terminating null in the destination
   649                              <1> ;Input: rsi = Start of the item to copy
   650                              <1> ;       rdi = Location for copy
   651                              <1> ;Output: Sentence copied with a null terminator inserted.
   652                              <1> ; If CF=CY, embedded CR encountered
   653 000015DC AC                  <1>     lodsb
   654 000015DD 3C0D                <1>     cmp al, CR
   655 000015DF 741A                <1>     je .endOfInput
   656 000015E1 E802140000          <1>     call isALterminator
   657 000015E6 741A                <1>     jz .exit
   658 000015E8 3A053DEAFFFF        <1>     cmp al, byte [pathSep]
   659 000015EE 7412                <1>     je .exit
   660 000015F0 3A0536EAFFFF        <1>     cmp al, byte [switchChar]
   661 000015F6 740A                <1>     je .exit
   662 000015F8 AA                  <1>     stosb
   663 000015F9 EBE1                <1>     jmp short copyCommandTailItemProgram
   664                              <1> .endOfInput:
   665 000015FB E802000000          <1>     call .exit
   666 00001600 F9                  <1>     stc 
   667                              <1>     return
    13                              <2> %%_ret:
    14 00001601 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   668                              <1> .exit:
   669 00001602 30C0                <1>     xor al, al
   670 00001604 AA                  <1>     stosb
   671                              <1>     return
    13                              <2> %%_ret:
    14 00001605 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   672                              <1> 
   673                              <1> copyCommandTailItem:
   674                              <1> ;Copies a sentence from the command tail until a terminator is found.
   675                              <1> ;Stores a terminating null in the destination
   676                              <1> ;Input: rsi = Start of the item to copy
   677                              <1> ;       rdi = Location for copy
   678                              <1> ;Output: Sentence copied with a null terminator inserted.
   679                              <1> ; If CF=CY, embedded CR encountered
   680 00001606 AC                  <1>     lodsb
   681 00001607 3C0D                <1>     cmp al, CR
   682 00001609 7442                <1>     je .endOfInput
   683 0000160B E8D8130000          <1>     call isALterminator
   684 00001610 7442                <1>     jz .exit
   685 00001612 3C3C                <1>     cmp al, "<"
   686 00001614 743E                <1>     jz .exit
   687 00001616 3C3E                <1>     cmp al, ">"
   688 00001618 743A                <1>     jz .exit
   689 0000161A 3A050BEAFFFF        <1>     cmp al, byte [pathSep]
   690 00001620 740B                <1>     je .pathSep
   691 00001622 3A0504EAFFFF        <1>     cmp al, byte [switchChar]
   692 00001628 742A                <1>     je .exit
   693 0000162A AA                  <1>     stosb
   694 0000162B EBD9                <1>     jmp short copyCommandTailItem
   695                              <1> .pathSep:
   696                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   697 0000162D AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   698 0000162E E8B5130000          <1>     call isALterminator
   699 00001633 741F                <1>     jz .exit
   700 00001635 3C0D                <1>     cmp al, CR
   701 00001637 7414                <1>     je .endOfInput
   702 00001639 3A05EDE9FFFF        <1>     cmp al, byte [switchChar]
   703 0000163F 7413                <1>     je .exit
   704 00001641 8A05E4E9FFFF        <1>     mov al, byte [pathSep]
   705 00001647 AA                  <1>     stosb   ;Else store the pathsep
   706 00001648 48FFCE              <1>     dec rsi ;Move rsi back a piece
   707 0000164B EBB9                <1>     jmp short copyCommandTailItem
   708                              <1> .endOfInput:
   709 0000164D E802000000          <1>     call .exit
   710 00001652 F9                  <1>     stc 
   711                              <1>     return
    13                              <2> %%_ret:
    14 00001653 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   712                              <1> .exit:
   713 00001654 30C0                <1>     xor al, al
   714 00001656 AA                  <1>     stosb
   715                              <1>     return
    13                              <2> %%_ret:
    14 00001657 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> 
   718                              <1> int4Eh:   ;Interrupt interface for parsing and executing command lines
   719                              <1> ;Input: rsi points to the count byte of a command line
   720 00001658 4150                <1>     push r8
   721 0000165A 4151                <1>     push r9
   722 0000165C B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   723 0000165E CD41                <1>     int 41h
   724 00001660 52                  <1>     push rdx    ;Save on the stack
   725 00001661 488D1D98E8FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   726 00001668 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   727 0000166A CD41                <1>     int 41h
   728 0000166C 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   729 0000166F 4989D9              <1>     mov r9, rbx
   730 00001672 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   731 00001679 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   732 0000167E F348A5              <1>     rep movsq   ;Copy command line over
   733                              <1>     ;call doCommandLine
   734 00001681 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   735 00001682 B450                <1>     mov ah, 50h ;Set Current PSP
   736 00001684 CD41                <1>     int 41h
   737 00001686 4159                <1>     pop r9
   738 00001688 4158                <1>     pop r8
   739 0000168A 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 4Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 0000168C 488D1514F2FFFF      <1>     lea rdx, noSelfCopy
     8 00001693 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001695 488D15C9F2FFFF      <1>     lea rdx, badParm
    11 0000169C EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 0000169E 488D1583F2FFFF      <1>     lea rdx, badDrv
    14 000016A5 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 000016A7 488D1534F5FFFF      <1>     lea rdx, badArgs
    17 000016AE EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 000016B0 488D150FF5FFFF      <1>     lea rdx, badSpec
    20 000016B7 EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 000016B9 488D1574F1FFFF      <1>     lea rdx, dupName
    24 000016C0 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 000016C2 488D159DF3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 000016C9 B800090000          <1>     mov eax, 0900h
    29 000016CE CD41                <1>     int 41h
    30 000016D0 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 000016D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 000016D2 C60585EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 000016D9 C6057FEDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 000016E0 C60579EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 000016E7 C605F4EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 000016EE 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 000016F7 3F                  <1>
    40 000016F8 488D3D63EEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000016FF 48AB                <1>     stosq
    42 00001701 48FFC7              <1>     inc rdi ;Go past dot
    43 00001704 668907              <1>     mov word [rdi], ax
    44 00001707 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 0000170A 488D3D8DEAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 00001711 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 00001714 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 00001717 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 0000171A 8A050CE9FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 00001720 F2AE                <1>     repne scasb ;Scan for a switchchar
    53 00001722 67E320              <1>     jecxz .switchScanDone
    54 00001725 24DF                <1>     and al, 0DFh    ;UC it
    55 00001727 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 00001729 7509                <1>     jne .notWideSw
    57 0000172B 800D2CEDFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 00001732 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 00001734 3C50                <1>     cmp al, "P" ;Pause mode?
    61 00001736 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 0000173C 800D1BEDFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 00001743 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 00001745 488D3553EAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 0000174C E8C1120000          <1>     call skipSpaces ;Skip leading spaces
    70 00001751 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 00001758 E8B5120000          <1>     call skipSpaces ;Skip spaces after
    73 0000175D AC                  <1>     lodsb   ;Get first non space char
    74 0000175E E8A8120000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001763 744A                <1>     jz .eocNoNull
    76 00001765 3C3E                <1>     cmp al, ">"
    77 00001767 7446                <1>     je .eocNoNull
    78 00001769 3C3C                <1>     cmp al, "<"
    79 0000176B 7442                <1>     je .eocNoNull
    80 0000176D 3A05B9E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001773 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001775 E839120000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 0000177A 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 0000177C EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 0000177E 803D5DEDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001785 0F851CFFFFFF        <1>     jne badArgError
    90 0000178B 488D3D50EDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 00001792 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 00001795 AC                  <1>     lodsb
    94 00001796 E870120000          <1>     call isALEndOfCommand
    95 0000179B 740F                <1>     jz .eocReached
    96 0000179D E846120000          <1>     call isALterminator
    97 000017A2 7403                <1>     jz .terminateCopy
    98 000017A4 AA                  <1>     stosb
    99 000017A5 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 000017A7 31C0                <1>     xor eax, eax
   102 000017A9 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 000017AA EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 000017AC 31C0                <1>     xor eax, eax
   106 000017AE AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 000017AF 803D2CEDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 000017B6 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 000017B8 488D3523EDFFFF      <1>     lea rsi, dirPathArg
   112 000017BF 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 000017C3 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 000017C5 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 000017CA 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 000017CE B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 000017D3 CD41                <1>     int 41h
   119 000017D5 3CFF                <1>     cmp al, -1
   120 000017D7 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 000017DD 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 000017E2 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 000017E4 880577ECFFFF        <1>     mov byte [dirDrv], al
   125 000017EA EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 000017EC E8AE110000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 000017F1 88056AECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 000017F7 0FB60563ECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000017FE E8800A0000          <1>     call volume.dirEP
   132 00001803 803DD8ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 0000180A 7409                <1>     je .printCWD
   134 0000180C 803DD2ECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 00001813 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 00001815 8A1546ECFFFF        <1>     mov dl, byte [dirDrv]
   140 0000181B 88D0                <1>     mov al, dl
   141 0000181D 0441                <1>     add al, "A"
   142 0000181F B43A                <1>     mov ah, ":"
   143 00001821 668905B6EBFFFF      <1>     mov word [searchSpec], ax
   144 00001828 8A05FDE7FFFF        <1>     mov al, byte [pathSep]
   145 0000182E 8805ACEBFFFF        <1>     mov byte [searchSpec + 2], al
   146 00001834 488D35A6EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 0000183B B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 0000183D FEC2                <1>     inc dl  ;Convert to 1 based number
   149 0000183F CD41                <1>     int 41h
   150 00001841 488D3D96EBFFFF      <1>     lea rdi, searchSpec
   151 00001848 E857110000          <1>     call strlen
   152 0000184D FFC9                <1>     dec ecx
   153 0000184F C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 00001853 488D1574F2FFFF      <1>     lea rdx, dirMain
   155 0000185A B409                <1>     mov ah, 09h
   156 0000185C CD41                <1>     int 41h
   157 0000185E 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001861 B409                <1>     mov ah, 09h
   159 00001863 CD41                <1>     int 41h
   160 00001865 488D1553EFFFFF      <1>     lea rdx, crlf2
   161 0000186C B409                <1>     mov ah, 09h
   162 0000186E CD41                <1>     int 41h
   163 00001870 E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001875 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 00001876 488D3D61EBFFFF      <1>     lea rdi, searchSpec
   179 0000187D 8A05A8E7FFFF        <1>     mov al, byte [pathSep]
   180 00001883 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 00001887 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 00001889 88040F              <1>     mov byte [rdi + rcx], al
   183 0000188C FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 0000188E 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 00001892 488D35C9ECFFFF      <1>     lea rsi, dirSrchPat
   187 00001899 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 0000189C 48A5                <1>     movsq
   189 0000189E A5                  <1>     movsd
   190 0000189F 30C0                <1>     xor al, al
   191 000018A1 AA                  <1>     stosb   ;Store the terminating null
   192 000018A2 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   193 000018A7 B44E                <1>     mov ah, 4Eh ;Find first
   194 000018A9 CD41                <1>     int 41h
   195 000018AB 720B                <1>     jc .dirNoMoreFiles
   196                              <1> .findNext:
   197 000018AD E878000000          <1>     call .dirPrintFileData  ;Print the file information
   198 000018B2 B44F                <1>     mov ah, 4Fh
   199 000018B4 CD41                <1>     int 41h
   200 000018B6 73F5                <1>     jnc .findNext 
   201                              <1> .dirNoMoreFiles:
   202 000018B8 F6059FEBFFFF01      <1>     test byte [dirPrnType], 1
   203 000018BF 740B                <1>     jz .dirNoEndNewLine
   204 000018C1 488D15F4EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   205 000018C8 B409                <1>     mov ah, 09h
   206 000018CA CD41                <1>     int 41h
   207                              <1> .dirNoEndNewLine:
   208                              <1>     ;Now we print the number of files and the number of bytes on the disk
   209 000018CC 488D15B3F4FFFF      <1>     lea rdx, fourSpc
   210 000018D3 B409                <1>     mov ah, 09h
   211 000018D5 CD41                <1>     int 41h
   212 000018D7 B409                <1>     mov ah, 09h ;Print four Spaces twice
   213 000018D9 CD41                <1>     int 41h
   214 000018DB 0FB6057EEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   215 000018E2 E8CA120000          <1>     call printDecimalWord
   216 000018E7 488D1519F0FFFF      <1>     lea rdx, dirOk
   217 000018EE B409                <1>     mov ah, 09h
   218 000018F0 CD41                <1>     int 41h
   219 000018F2 488D1592F4FFFF      <1>     lea rdx, threeSpc
   220 000018F9 B409                <1>     mov ah, 09h
   221 000018FB CD41                <1>     int 41h
   222 000018FD B800360000          <1>     mov eax, 3600h ;Get disk info
   223 00001902 8A1559EBFFFF        <1>     mov dl, byte [dirDrv]
   224 00001908 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   225 0000190A CD41                <1>     int 41h ;Get disk free space info
   226 0000190C 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   227 0000190F 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   228 00001912 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   229 00001914 F7E1                <1>     mul ecx ;Get bytes per cluster
   230 00001916 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   231                              <1>     ;rax now has the number of free bytes on the disk
   232 00001919 E893120000          <1>     call printDecimalWord
   233 0000191E 488D15ECEFFFFF      <1>     lea rdx, bytesOk
   234 00001925 B409                <1>     mov ah, 09h
   235 00001927 CD41                <1>     int 41h
   236                              <1>     return
    13                              <2> %%_ret:
    14 00001929 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> .dirPrintFileData:
   239                              <1> ;Use fcbCmdSpec to build the file name with space
   240                              <1> ;Start by print the name (same for both cases)
   241                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   242 0000192A F605B6E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   243                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001931 75(29)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   244 00001933 488D35B6E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   245 0000193A 488D3D2BE9FFFF      <1>     lea rdi, fcbCmdSpec
   246 00001941 E843110000          <1>     call asciiFilenameToFCB
   247 00001946 488D151FE9FFFF      <1>     lea rdx, fcbCmdSpec
   248 0000194D B908000000          <1>     mov ecx, 8  ;Print 8 chars
   249 00001952 BB01000000          <1>     mov ebx, 1  ;STDOUT
   250 00001957 B440                <1>     mov ah, 40h ;Write handle
   251 00001959 CD41                <1>     int 41h
   252 0000195B 52                  <1>     push rdx
   253 0000195C B220                <1>     mov dl, " "
   254 0000195E B402                <1>     mov ah, 02h ;Print char
   255 00001960 CD41                <1>     int 41h
   256 00001962 5A                  <1>     pop rdx
   257 00001963 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   258 0000196A B903000000          <1>     mov ecx, 3  ;Print three chars
   259 0000196F BB01000000          <1>     mov ebx, 1  ;STDOUT
   260 00001974 B440                <1>     mov ah, 40h ;Write handle
   261 00001976 CD41                <1>     int 41h
   262 00001978 F605DFEAFFFF01      <1>     test byte [dirPrnType], 1
   263 0000197F 0F85A8000000        <1>     jnz .widePrint
   264                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   265                              <1>     ;Now check if a DIR
   266 00001985 F6055BE7FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   267 0000198C 7418                <1>     jz .dirPrintNotDir
   268 0000198E 488D158AEFFFFF      <1>     lea rdx, dirLbl
   269 00001995 B409                <1>     mov ah, 09h
   270 00001997 CD41                <1>     int 41h
   271 00001999 488D15EBF3FFFF      <1>     lea rdx, threeSpc
   272 000019A0 B409                <1>     mov ah, 09h
   273 000019A2 CD41                <1>     int 41h
   274 000019A4 EB4F                <1>     jmp short .dirPrintFileDT
   275                              <1> .dirPrintNotDir:
   276                              <1> ;Here we print the file size
   277 000019A6 B220                <1>     mov dl, " "
   278 000019A8 B402                <1>     mov ah, 02h
   279 000019AA CD41                <1>     int 41h
   280 000019AC 8B053AE7FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   281 000019B2 E86B120000          <1>     call getDecimalWord
   282 000019B7 4889CB              <1>     mov rbx, rcx
   283 000019BA 51                  <1>     push rcx
   284 000019BB 480FCB              <1>     bswap rbx
   285 000019BE B908000000          <1>     mov ecx, 8
   286                              <1> .dirPrintFileSizePrep:
   287 000019C3 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   288 000019C5 7514                <1>     jne .dirPrintFileSize
   289 000019C7 B402                <1>     mov ah, 02h
   290 000019C9 B220                <1>     mov dl, " "
   291 000019CB CD41                <1>     int 41h
   292 000019CD 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   293 000019D1 FFC9                <1>     dec ecx
   294 000019D3 81F901000000        <1>     cmp ecx, 1
   295 000019D9 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   296                              <1> .dirPrintFileSize:
   297 000019DB 5B                  <1>     pop rbx
   298                              <1> .dirPrintFileSizeLoop:
   299 000019DC 88DA                <1>     mov dl, bl
   300 000019DE B402                <1>     mov ah, 02h
   301 000019E0 CD41                <1>     int 41h
   302 000019E2 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   303 000019E6 FFC9                <1>     dec ecx
   304 000019E8 75F2                <1>     jnz .dirPrintFileSizeLoop
   305 000019EA 488D159EF3FFFF      <1>     lea rdx, twoSpc
   306 000019F1 B409                <1>     mov ah, 09h
   307 000019F3 CD41                <1>     int 41h
   308                              <1> .dirPrintFileDT:
   309 000019F5 B220                <1>     mov dl, " "
   310 000019F7 B402                <1>     mov ah, 02h
   311 000019F9 CD41                <1>     int 41h
   312 000019FB 0FB705E8E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   313 00001A02 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   314 00001A04 E8EC0C0000          <1>     call printDate
   315 00001A09 488D157FF3FFFF      <1>     lea rdx, twoSpc
   316 00001A10 B409                <1>     mov ah, 09h
   317 00001A12 CD41                <1>     int 41h
   318 00001A14 0FB705CDE6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   319 00001A1B E8F70D0000          <1>     call printTime
   320 00001A20 488D1595EDFFFF      <1>     lea rdx, crlf
   321 00001A27 B409                <1>     mov ah, 09h
   322 00001A29 CD41                <1>     int 41h
   323 00001A2B EB0B                <1>     jmp short .dirPrintNameExit
   324                              <1> .widePrint:
   325                              <1> ;If /W, print name space ext space space space space
   326 00001A2D 488D1552F3FFFF      <1>     lea rdx, fourSpc
   327 00001A34 B409                <1>     mov ah, 09h ;Print string
   328 00001A36 CD41                <1>     int 41h
   329                              <1> .dirPrintNameExit:
   330 00001A38 FE0522EAFFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   331 00001A3E FE051BEAFFFF        <1>     inc byte [dirLineCtr]
   332 00001A44 803D14EAFFFF17      <1>     cmp byte [dirLineCtr], 23
   333                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001A4B 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001A4D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   334 00001A4E 488D15F1EEFFFF      <1>     lea rdx, pauseMes
   335 00001A55 B409                <1>     mov ah, 09h
   336 00001A57 CD41                <1>     int 41h
   337 00001A59 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   338 00001A5B CD41                <1>     int 41h
   339 00001A5D C605FBE9FFFF00      <1>     mov byte [dirLineCtr], 0
   340 00001A64 488D1551EDFFFF      <1>     lea rdx, crlf   ;Force new line
   341 00001A6B B409                <1>     mov ah, 09h
   342 00001A6D CD41                <1>     int 41h
   343                              <1>     return
    13                              <2> %%_ret:
    14 00001A6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> chdir:
   346 00001A70 F60545E6FFFFFF      <1>     test byte [arg1Flg], -1
   347 00001A77 754D                <1>     jnz .changeDir
   348                              <1>     ;Print CWD
   349                              <1> .printCWD:
   350 00001A79 E87A0E0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   351 00001A7E E85C0C0000          <1>     call printCRLF
   352                              <1>     return
    13                              <2> %%_ret:
    14 00001A83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .printDiskCWD:
   354                              <1> ;Print CWD for a specified drive
   355 00001A84 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   356 00001A88 88D0                <1>     mov al, dl
   357 00001A8A 0440                <1>     add al, "@" ;Get the UC letter
   358 00001A8C B43A                <1>     mov ah, ":"
   359 00001A8E 488D3D49E9FFFF      <1>     lea rdi, searchSpec
   360 00001A95 66AB                <1>     stosw   ;Store X:, rdi+=2
   361 00001A97 8A058EE5FFFF        <1>     mov al, byte [pathSep]
   362 00001A9D AA                  <1>     stosb   ;Store pathSep, inc rdi
   363 00001A9E B447                <1>     mov ah, 47h ;Get Current Working Directory
   364 00001AA0 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   365 00001AA3 CD41                <1>     int 41h
   366 00001AA5 E8FA0E0000          <1>     call strlen
   367 00001AAA 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   368 00001AB0 B440                <1>     mov ah, 40h ;Write to handle
   369 00001AB2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   370 00001AB7 488D1520E9FFFF      <1>     lea rdx, searchSpec
   371 00001ABE CD41                <1>     int 41h
   372 00001AC0 E81A0C0000          <1>     call printCRLF
   373                              <1>     return
    13                              <2> %%_ret:
    14 00001AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   374                              <1> .changeDir:
   375 00001AC6 8A05F2E5FFFF        <1>     mov al, byte [arg1FCBret]
   376 00001ACC 3CFF                <1>     cmp al, -1 
   377 00001ACE 0F84CAFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   378 00001AD4 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   379 00001AD9 7520                <1>     jne .getFQPath
   380                              <1>     ;Now we double check that on the command line we have . or ..
   381 00001ADB 0FB605DBE5FFFF      <1>     movzx eax, byte [arg1Off]
   382 00001AE2 488D35B4E6FFFF      <1>     lea rsi, cmdBuffer
   383 00001AE9 4801C6              <1>     add rsi, rax
   384 00001AEC 8A0539E5FFFF        <1>     mov al, byte [pathSep]
   385 00001AF2 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   386 00001AF4 7405                <1>     je .getFQPath
   387 00001AF6 803E2E              <1>     cmp byte [rsi], "."
   388 00001AF9 7589                <1>     jne .printDiskCWD
   389                              <1>     ;If the path is . or .., its acceptable, else fail
   390                              <1> .getFQPath:
   391 00001AFB E813100000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   392 00001B00 0F82BCFBFFFF        <1>     jc badDirError  ;If this returns CF=CY, its a badDir
   393 00001B06 488D15D1E8FFFF      <1>     lea rdx, searchSpec
   394 00001B0D B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001B0F CD41                <1>     int 41h
   396 00001B11 0F82ABFBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001B17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001B18 F6059DE5FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001B1F 0F8482FBFFFF        <1>     jz badArgError
   402 00001B25 F60593E5FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001B2C 0F8575FBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001B32 8A0586E5FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001B38 3CFF                <1>     cmp al, -1 
   407 00001B3A 0F845EFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001B40 E8CE0F0000          <1>     call buildCommandPath
   409 00001B45 488D1592E8FFFF      <1>     lea rdx, searchSpec
   410 00001B4C B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001B51 CD41                <1>     int 41h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B53 73(17)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001B55 488D151EEFFFFF      <1>     lea rdx, badMD
   415 00001B5C B800090000          <1>     mov eax, 0900h
   416 00001B61 CD41                <1>     int 41h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001B63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001B64 F60551E5FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001B6B 0F8436FBFFFF        <1>     jz badArgError
   422 00001B71 F60547E5FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001B78 0F8529FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001B7E 8A053AE5FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001B84 3CFF                <1>     cmp al, -1 
   427 00001B86 0F8412FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001B8C E8820F0000          <1>     call buildCommandPath
   429 00001B91 488D1546E8FFFF      <1>     lea rdx, searchSpec
   430 00001B98 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001B9D CD41                <1>     int 41h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001B9F 73(63)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001BA1 488D15EFEEFFFF      <1>     lea rdx, badRD
   435 00001BA8 B800090000          <1>     mov eax, 0900h
   436 00001BAD CD41                <1>     int 41h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001BAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001BB0 F60505E5FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001BB7 0F84EAFAFFFF        <1>     jz badArgError
   442 00001BBD F605FBE4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001BC4 0F84DDFAFFFF        <1>     jz badArgError
   444 00001BCA 488D35CCE5FFFF      <1>     lea rsi, cmdBuffer
   445 00001BD1 0FB605E5E4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001BD8 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001BDB AC                  <1>     lodsb   ;Get first char in AL
   449 00001BDC 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001BDF E8270E0000          <1>     call isALEndOfCommand
   451 00001BE4 0F82ABFAFFFF        <1>     jc badParamError
   452 00001BEA 488D3D95E9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001BF1 AC                  <1>     lodsb
   455 00001BF2 E8140E0000          <1>     call isALEndOfCommand
   456 00001BF7 0F8498FAFFFF        <1>     je badParamError
   457 00001BFD E8E60D0000          <1>     call isALterminator
   458 00001C02 7403                <1>     jz .endOfName1
   459 00001C04 AA                  <1>     stosb
   460 00001C05 EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001C07 31C0                <1>     xor eax, eax
   463 00001C09 AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001C0A 488D358CE5FFFF      <1>     lea rsi, cmdBuffer
   465 00001C11 0FB605A8E4FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001C18 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001C1B AC                  <1>     lodsb   ;Get first char in AL
   468 00001C1C 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001C1F E8E70D0000          <1>     call isALEndOfCommand
   470 00001C24 0F826BFAFFFF        <1>     jc badParamError
   471 00001C2A 488D3DD5E9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001C31 AC                  <1>     lodsb
   474 00001C32 E8D40D0000          <1>     call isALEndOfCommand
   475 00001C37 740A                <1>     je .endOfName2
   476 00001C39 E8AA0D0000          <1>     call isALterminator
   477 00001C3E 7403                <1>     jz .endOfName2
   478 00001C40 AA                  <1>     stosb
   479 00001C41 EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001C43 31C0                <1>     xor eax, eax
   482 00001C45 AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001C46 488D3539E9FFFF      <1>     lea rsi, sourcePath
   486 00001C4D 488D3DB2E9FFFF      <1>     lea rdi, destPath
   487 00001C54 B81E120000          <1>     mov eax, 121Eh
   488 00001C59 CD4F                <1>     int 4Fh
   489 00001C5B 0F849C000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001C61 488D151EE9FFFF      <1>     lea rdx, sourcePath
   493 00001C68 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001C6D CD41                <1>     int 41h
   495 00001C6F 0F8220FAFFFF        <1>     jc badParamError
   496 00001C75 6689050AEAFFFF      <1>     mov word [sourceHdl], ax
   497 00001C7C 488D1583E9FFFF      <1>     lea rdx, destPath
   498 00001C83 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   499 00001C88 31C9                <1>     xor ecx, ecx    ;No file attributes
   500 00001C8A CD41                <1>     int 41h
   501 00001C8C 0F8292000000        <1>     jc .badExit
   502 00001C92 668905EFE9FFFF      <1>     mov word [destHdl], ax
   503 00001C99 31F6                <1>     xor esi, esi
   504 00001C9B 488D15E8E9FFFF      <1>     lea rdx, copyBuffer
   505                              <1> .copyLoop:
   506 00001CA2 B980000000          <1>     mov ecx, 128
   507 00001CA7 0FB71DD8E9FFFF      <1>     movzx ebx, word [sourceHdl]
   508 00001CAE B43F                <1>     mov ah, 3Fh ;Read
   509 00001CB0 CD41                <1>     int 41h
   510 00001CB2 7270                <1>     jc .badExit
   511 00001CB4 85C0                <1>     test eax, eax
   512 00001CB6 7418                <1>     jz .okExit
   513 00001CB8 01C6                <1>     add esi, eax
   514                              <1>     ;mov eax, EOF
   515                              <1>     ;mov rdi, rdx
   516                              <1>     ;mov ecx, 128
   517                              <1>     ;repne scasb ;Scan for an EOF
   518                              <1>     ;mov eax, 128
   519                              <1>     ;sub eax, ecx    ;If an EOF found, only print up to it
   520 00001CBA 89C1                <1>     mov ecx, eax
   521 00001CBC 0FB71DC5E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001CC3 B440                <1>     mov ah, 40h ;Write
   523 00001CC5 CD41                <1>     int 41h
   524 00001CC7 725B                <1>     jc .badExit
   525 00001CC9 3D80000000          <1>     cmp eax, 128    ;Change this for writing from Char devices in ASCII mode
   526 00001CCE 73D2                <1>     jnb .copyLoop
   527                              <1> .okExit:
   528 00001CD0 E832000000          <1>     call .leaveCopyClose
   529 00001CD5 488D15E0EAFFFF      <1>     lea rdx, crlf
   530 00001CDC B409                <1>     mov ah, 09h
   531 00001CDE CD41                <1>     int 41h
   532 00001CE0 488D159FF0FFFF      <1>     lea rdx, fourSpc
   533 00001CE7 B409                <1>     mov ah, 09h
   534 00001CE9 CD41                <1>     int 41h
   535 00001CEB B402                <1>     mov ah, 02h
   536 00001CED B231                <1>     mov dl, "1" ;1 File(s) copied
   537 00001CEF CD41                <1>     int 41h
   538 00001CF1 488D15FDEBFFFF      <1>     lea rdx, copyOk
   539 00001CF8 B409                <1>     mov ah, 09h
   540 00001CFA CD41                <1>     int 41h
   541                              <1>     return
    13                              <2> %%_ret:
    14 00001CFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> .sameFilename:
   543 00001CFD E805000000          <1>     call .leaveCopyClose ;Close the handles
   544 00001D02 E985F9FFFF          <1>     jmp noSelfCopyError
   545                              <1> .leaveCopyClose:
   546 00001D07 668B1D78E9FFFF      <1>     mov bx, word [sourceHdl]
   547 00001D0E B8003E0000          <1>     mov eax, 3E00h
   548 00001D13 CD41                <1>     int 41h
   549 00001D15 668B1D6CE9FFFF      <1>     mov bx, word [destHdl]
   550 00001D1C B8003E0000          <1>     mov eax, 3E00h
   551 00001D21 CD41                <1>     int 41h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001D23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .badExit:
   554                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   555 00001D24 668B1D5BE9FFFF      <1>     mov bx, word [sourceHdl]
   556 00001D2B 6681FBFFFF          <1>     cmp bx, -1
   557 00001D30 7407                <1>     je .skipSource
   558 00001D32 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   559 00001D37 CD41                <1>     int 41h
   560                              <1> .skipSource:
   561 00001D39 668B1D48E9FFFF      <1>     mov bx, word [destHdl]
   562 00001D40 6681FBFFFF          <1>     cmp bx, -1
   563 00001D45 0F844AF9FFFF        <1>     je badParamError
   564 00001D4B B8003E0000          <1>     mov eax, 3E00h
   565 00001D50 CD41                <1>     int 41h
   566 00001D52 E93EF9FFFF          <1>     jmp badParamError
   567                              <1> 
   568                              <1> erase:
   569 00001D57 F6055EE3FFFFFF      <1>     test byte [arg1Flg], -1
   570 00001D5E 0F8443F9FFFF        <1>     jz badArgError
   571 00001D64 E8AA0D0000          <1>     call buildCommandPath
   572 00001D69 488D156EE6FFFF      <1>     lea rdx, searchSpec
   573 00001D70 B800410000          <1>     mov eax, 4100h  ;Delete File 
   574 00001D75 31C9                <1>     xor ecx, ecx
   575 00001D77 CD41                <1>     int 41h
   576 00001D79 0F8228F9FFFF        <1>     jc badArgError
   577                              <1>     return
    13                              <2> %%_ret:
    14 00001D7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> date:
   579 00001D80 488D1516ECFFFF      <1>     lea rdx, curDate
   580 00001D87 B409                <1>     mov ah, 09h
   581 00001D89 CD41                <1>     int 41h
   582 00001D8B B42A                <1>     mov ah, 2Ah ;DOS get date
   583 00001D8D CD41                <1>     int 41h
   584                              <1> 	;AL = day of the week (0=Sunday)
   585                              <1> 	;CX = year (1980-2099)
   586                              <1> 	;DH = month (1-12)
   587                              <1> 	;DL = day (1-31)
   588 00001D8F 66890DECE7FFFF      <1>     mov word [td1], cx
   589 00001D96 8815E8E7FFFF        <1>     mov byte [td3], dl
   590 00001D9C 8835E3E7FFFF        <1>     mov byte [td4], dh
   591 00001DA2 0FB6C0              <1>     movzx eax, al
   592 00001DA5 89C3                <1>     mov ebx, eax
   593 00001DA7 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   594 00001DA9 01D8                <1>     add eax, ebx ;Make it 3 times 
   595 00001DAB 488D15C7EBFFFF      <1>     lea rdx, dayName
   596 00001DB2 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   597 00001DB6 B903000000          <1>     mov ecx, 3  ;Print three chars
   598 00001DBB BB01000000          <1>     mov ebx, 1  ;STDOUT
   599 00001DC0 B440                <1>     mov ah, 40h ;Write to handle
   600 00001DC2 CD41                <1>     int 41h
   601 00001DC4 B220                <1>     mov dl, " "
   602 00001DC6 B402                <1>     mov ah, 02h
   603 00001DC8 CD41                <1>     int 41h
   604                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   605                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   606                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   607 00001DCA 0FB705B1E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   608 00001DD1 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   609 00001DD4 0FB61DAAE7FFFF      <1>     movzx ebx, byte [td4]
   610 00001DDB C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   611 00001DDE 09D8                <1>     or eax, ebx ;Add this date to eax
   612 00001DE0 0FB61D9DE7FFFF      <1>     movzx ebx, byte [td3]
   613 00001DE7 09D8                <1>     or eax, ebx
   614 00001DE9 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   615 00001DEE E802090000          <1>     call printDate
   616                              <1> 
   617 00001DF3 488D15B4EBFFFF      <1>     lea rdx, newDate
   618 00001DFA B409                <1>     mov ah, 09h
   619 00001DFC CD41                <1>     int 41h
   620 00001DFE 488D15C8EBFFFF      <1>     lea rdx, ukDate
   621 00001E05 488D05B4EBFFFF      <1>     lea rax, usDate
   622 00001E0C 488D1DC7EBFFFF      <1>     lea rbx, jpDate
   623 00001E13 803D1CE2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   624 00001E1A 480F47D3            <1>     cmova rdx, rbx
   625 00001E1E 480F42D0            <1>     cmovb rdx, rax
   626 00001E22 B409                <1>     mov ah, 09h
   627 00001E24 CD41                <1>     int 41h
   628                              <1> 
   629 00001E26 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   630 00001E2D B40A                <1>     mov ah, 0Ah
   631 00001E2F CD41                <1>     int 41h
   632 00001E31 52                  <1>     push rdx
   633 00001E32 488D1583E9FFFF      <1>     lea rdx, crlf
   634 00001E39 B409                <1>     mov ah, 09h
   635 00001E3B CD41                <1>     int 41h
   636 00001E3D 5A                  <1>     pop rdx
   637 00001E3E 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   638                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E42 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E44 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   639                              <1>     return
    13                              <2> %%_ret:
    14 00001E45 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   640                              <1> 
   641                              <1> time:
   642 00001E46 488D15A9EBFFFF      <1>     lea rdx, curTime
   643 00001E4D B409                <1>     mov ah, 09h
   644 00001E4F CD41                <1>     int 41h
   645 00001E51 B42C                <1>     mov ah, 2Ch ;DOS get time
   646 00001E53 CD41                <1>     int 41h
   647                              <1>     ;CH = hour (0-23)
   648                              <1> 	;CL = minutes (0-59)
   649                              <1> 	;DH = seconds (0-59)
   650                              <1> 	;DL = hundredths (0-99)
   651 00001E55 880D27E7FFFF        <1>     mov byte [td1], cl
   652 00001E5B 882D22E7FFFF        <1>     mov byte [td2], ch
   653 00001E61 88151DE7FFFF        <1>     mov byte [td3], dl
   654 00001E67 883518E7FFFF        <1>     mov byte [td4], dh
   655 00001E6D 0FB6C5              <1>     movzx eax, ch
   656 00001E70 E8140A0000          <1>     call printTime.printHours
   657                              <1> 
   658 00001E75 8A15C8E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   659 00001E7B B402                <1>     mov ah, 02h
   660 00001E7D CD41                <1>     int 41h
   661                              <1> 
   662 00001E7F 0FB605FCE6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   663 00001E86 E8EE090000          <1>     call printTime.printMinutesAlt
   664                              <1> 
   665 00001E8B 8A15B2E1FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   666 00001E91 B402                <1>     mov ah, 02h
   667 00001E93 CD41                <1>     int 41h
   668                              <1> 
   669 00001E95 0FB605E9E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   670 00001E9C E8D8090000          <1>     call printTime.printMinutesAlt
   671                              <1> 
   672 00001EA1 B22E                <1>     mov dl, "."
   673 00001EA3 B402                <1>     mov ah, 02h
   674 00001EA5 CD41                <1>     int 41h
   675                              <1> 
   676 00001EA7 0FB605D6E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   677 00001EAE E8C6090000          <1>     call printTime.printMinutesAlt
   678                              <1> 
   679 00001EB3 488D154DEBFFFF      <1>     lea rdx, newTime
   680 00001EBA B409                <1>     mov ah, 09h
   681 00001EBC CD41                <1>     int 41h
   682                              <1> 
   683 00001EBE 498D9080000000      <1>     lea rdx, qword [r8 + cmdLineCnt]
   684 00001EC5 B40A                <1>     mov ah, 0Ah
   685 00001EC7 CD41                <1>     int 41h
   686 00001EC9 52                  <1>     push rdx
   687 00001ECA 488D15EBE8FFFF      <1>     lea rdx, crlf
   688 00001ED1 B409                <1>     mov ah, 09h
   689 00001ED3 CD41                <1>     int 41h
   690 00001ED5 5A                  <1>     pop rdx
   691 00001ED6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   692                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001EDA 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001EDC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   693                              <1>     return
    13                              <2> %%_ret:
    14 00001EDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> ctty:
   695 00001EDE F605D7E1FFFFFF      <1>     test byte [arg1Flg], -1
   696 00001EE5 0F84BCF7FFFF        <1>     jz badArgError
   697 00001EEB F605CDE1FFFFFF      <1>     test byte [arg2Flg], -1
   698 00001EF2 0F85AFF7FFFF        <1>     jnz badArgError
   699 00001EF8 488D359EE2FFFF      <1>     lea rsi, cmdBuffer
   700 00001EFF 0FB605B7E1FFFF      <1>     movzx eax, byte [arg1Off]
   701 00001F06 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   702 00001F09 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   703 00001F0D 750F                <1>     jne .noDrive
   704 00001F0F 0FB605A8E1FFFF      <1>     movzx eax, byte [arg1FCBret]
   705 00001F16 3CFF                <1>     cmp al, -1
   706 00001F18 0F8480F7FFFF        <1>     je badDriveError
   707                              <1> .noDrive:
   708                              <1>     ;Now we open the provided file
   709 00001F1E E8730D0000          <1>     call copyArgumentToSearchSpec
   710 00001F23 488D15B4E4FFFF      <1>     lea rdx, searchSpec
   711 00001F2A B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   712 00001F2F CD41                <1>     int 41h
   713 00001F31 0F8279F7FFFF        <1>     jc badFileError
   714 00001F37 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   715 00001F3A B800440000          <1>     mov eax, 4400h  ;Get device word
   716 00001F3F CD41                <1>     int 41h
   717 00001F41 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   718 00001F44 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   719                              <1>     ;Now we set this handle to be STDIO
   720 00001F46 80CA03              <1>     or dl, 3    ;Set STDIO bits
   721 00001F49 30F6                <1>     xor dh, dh
   722 00001F4B B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   723 00001F50 CD41                <1>     int 41h
   724                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   725 00001F52 31C9                <1>     xor ecx, ecx    ;STDIN
   726 00001F54 B446                <1>     mov ah, 46h
   727 00001F56 CD41                <1>     int 41h
   728 00001F58 FFC1                <1>     inc ecx         ;STDOUT
   729 00001F5A B446                <1>     mov ah, 46h
   730 00001F5C CD41                <1>     int 41h
   731 00001F5E FFC1                <1>     inc ecx         ;STDERR
   732 00001F60 B446                <1>     mov ah, 46h
   733 00001F62 CD41                <1>     int 41h
   734 00001F64 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   735 00001F66 CD41                <1>     int 41h
   736                              <1>     return
    13                              <2> %%_ret:
    14 00001F68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> .badCharDev:
   738 00001F69 488D1596EBFFFF      <1>     lea rdx, badDev
   739 00001F70 B409                <1>     mov ah, 09h
   740 00001F72 CD41                <1>     int 41h
   741 00001F74 B43E                <1>     mov ah, 3Eh ;Close opened handle
   742 00001F76 CD41                <1>     int 41h
   743                              <1>     return
    13                              <2> %%_ret:
    14 00001F78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> 
   745                              <1> cls:  
   746 00001F79 B800440000          <1>     mov eax, 4400h  ;Get device info
   747 00001F7E BB01000000          <1>     mov ebx, 1      ;for handle 1
   748 00001F83 CD41                <1>     int 41h         ;in dx
   749 00001F85 F7C280000000        <1>     test edx, devCharDev
   750 00001F8B 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   751 00001F8D F7C210000000        <1>     test edx, charDevFastOut
   752 00001F93 743E                <1>     jz .doAnsi
   753                              <1>     ;Test if Int 49h uses Int 30h
   754                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   755                              <1>     ;Int 49h MUST be terminated with a IRETQ, within 1024 bytes
   756 00001F95 B849350000          <1>     mov eax, 3549h  ;Get the vector for interrupt 49h
   757 00001F9A CD41                <1>     int 41h
   758                              <1> .biosCheck:
   759 00001F9C 66813BCD30          <1>     cmp word [rbx], 30CDh
   760 00001FA1 740C                <1>     je .biosConfirmed
   761 00001FA3 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   762 00001FA8 7429                <1>     je .doAnsi
   763 00001FAA 48FFC3              <1>     inc rbx
   764 00001FAD EBED                <1>     jmp short .biosCheck
   765                              <1> .biosConfirmed:
   766                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   767 00001FAF B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   768 00001FB1 31DB                <1>     xor ebx, ebx
   769 00001FB3 CD30                <1>     int 30h
   770 00001FB5 B40F                <1>     mov ah, 0Fh ;Get screen mode
   771 00001FB7 CD30                <1>     int 30h
   772 00001FB9 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   773 00001FBC FECA                <1>     dec dl
   774 00001FBE B619                <1>     mov dh, 25  ;Number of rows is standard
   775 00001FC0 31C0                <1>     xor eax, eax
   776 00001FC2 89C1                <1>     mov ecx, eax
   777 00001FC4 B707                <1>     mov bh, 7   ;Screen attributes
   778 00001FC6 B406                <1>     mov ah, 6   ;Scroll
   779 00001FC8 CD30                <1>     int 30h
   780 00001FCA 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   781 00001FCC B700                <1>     mov bh, 0   ;Page 0
   782 00001FCE B402                <1>     mov ah, 2
   783 00001FD0 CD30                <1>     int 30h
   784                              <1>     return
    13                              <2> %%_ret:
    14 00001FD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   785                              <1> .doAnsi:
   786                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   787                              <1> ;4 chars in the ansi routine
   788                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   789                              <1> ; understand ANSI codes
   790 00001FD3 488D35A8EDFFFF      <1>     lea rsi, ansiCls
   791 00001FDA B904000000          <1>     mov ecx, 4
   792 00001FDF B406                <1>     mov ah, 06h ;Raw char output
   793                              <1> .ansiLp:
   794 00001FE1 AC                  <1>     lodsb   ;Get the char in 
   795 00001FE2 88C2                <1>     mov dl, al
   796 00001FE4 CD41                <1>     int 41h
   797 00001FE6 FFC9                <1>     dec ecx
   798 00001FE8 75F7                <1>     jnz .ansiLp
   799                              <1>     return
    13                              <2> %%_ret:
    14 00001FEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> 
   801                              <1> break:
   802 00001FEB F605CAE0FFFFFF      <1>     test byte [arg1Flg], -1
   803 00001FF2 752D                <1>     jnz .argumentProvided
   804                              <1>     ;Here we just get the status of break
   805 00001FF4 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   806 00001FF9 CD41                <1>     int 41h
   807 00001FFB 88D3                <1>     mov bl, dl
   808 00001FFD 488D15A4EBFFFF      <1>     lea rdx, breakIs
   809 00002004 B409                <1>     mov ah, 09h
   810 00002006 CD41                <1>     int 41h
   811 00002008 488D1594EBFFFF      <1>     lea rdx, onMes
   812 0000200F 488D0D87EBFFFF      <1>     lea rcx, offMes
   813 00002016 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   814 00002018 480F44D1            <1>     cmovz rdx, rcx
   815 0000201C B409                <1>     mov ah, 09h
   816 0000201E CD41                <1>     int 41h
   817                              <1>     return
    13                              <2> %%_ret:
    14 00002020 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .argumentProvided:
   819 00002021 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   820 00002025 AD                  <1>     lodsd   ;Read the word
   821 00002026 89C3                <1>     mov ebx, eax
   822 00002028 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   823 0000202D C1EB10              <1>     shr ebx, 10h     ;Get high word low
   824 00002030 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   825 00002035 7416                <1>     je .maybeOn
   826 00002037 663D4F46            <1>     cmp ax, "OF"
   827 0000203B 7523                <1>     jne .badOnOff
   828 0000203D 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   829 00002042 6681FB4620          <1>     cmp bx, "F "
   830 00002047 7517                <1>     jne .badOnOff
   831                              <1>     ;Set off
   832 00002049 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   833 0000204B EB0B                <1>     jmp short .setBreak
   834                              <1> .maybeOn:
   835 0000204D 663D4F4E            <1>     cmp ax, "ON"
   836 00002051 750D                <1>     jne .badOnOff
   837                              <1>     ;Set on
   838 00002053 BA01000000          <1>     mov edx, 1
   839                              <1> .setBreak:
   840 00002058 B801330000          <1>     mov eax, 3301h  ;Set break
   841 0000205D CD41                <1>     int 41h
   842                              <1>     return
    13                              <2> %%_ret:
    14 0000205F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   843                              <1> .badOnOff:
   844 00002060 488D152BEDFFFF      <1>     lea rdx, badOnOff
   845 00002067 B409                <1>     mov ah, 09h
   846 00002069 CD41                <1>     int 41h
   847                              <1>     return
    13                              <2> %%_ret:
    14 0000206B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   848                              <1> 
   849                              <1> verify:
   850 0000206C F60549E0FFFFFF      <1>     test byte [arg1Flg], -1
   851 00002073 752D                <1>     jnz .argumentProvided
   852                              <1>     ;Here we just get the status of break
   853 00002075 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   854 0000207A CD41                <1>     int 41h
   855 0000207C 88C3                <1>     mov bl, al
   856 0000207E 488D152DEBFFFF      <1>     lea rdx, verifyIs
   857 00002085 B409                <1>     mov ah, 09h
   858 00002087 CD41                <1>     int 41h
   859 00002089 488D1513EBFFFF      <1>     lea rdx, onMes
   860 00002090 488D0D06EBFFFF      <1>     lea rcx, offMes
   861 00002097 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   862 00002099 480F44D1            <1>     cmovz rdx, rcx
   863 0000209D B409                <1>     mov ah, 09h
   864 0000209F CD41                <1>     int 41h
   865                              <1>     return
    13                              <2> %%_ret:
    14 000020A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   866                              <1> .argumentProvided:
   867 000020A2 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   868 000020A6 AD                  <1>     lodsd   ;Read the word
   869 000020A7 89C3                <1>     mov ebx, eax
   870 000020A9 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   871 000020AE C1EB10              <1>     shr ebx, 10h     ;Get high word low
   872 000020B1 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   873 000020B6 7416                <1>     je .maybeOn
   874 000020B8 663D4F46            <1>     cmp ax, "OF"
   875 000020BC 751F                <1>     jne .badOnOff
   876 000020BE 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   877 000020C3 6681FB4620          <1>     cmp bx, "F "
   878 000020C8 7513                <1>     jne .badOnOff
   879                              <1>     ;Set off
   880 000020CA 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   881 000020CC EB0A                <1>     jmp short .setVerify
   882                              <1> .maybeOn:
   883 000020CE 663D4F4E            <1>     cmp ax, "ON"
   884 000020D2 7509                <1>     jne .badOnOff
   885                              <1>     ;Set on
   886 000020D4 31C0                <1>     xor eax, eax
   887 000020D6 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   888                              <1> .setVerify:
   889 000020D8 B42E                <1>     mov ah, 2Eh  ;Set Verify
   890 000020DA CD41                <1>     int 41h
   891                              <1>     return
    13                              <2> %%_ret:
    14 000020DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   892                              <1> .badOnOff:
   893 000020DD 488D15AEECFFFF      <1>     lea rdx, badOnOff
   894 000020E4 B409                <1>     mov ah, 09h
   895 000020E6 CD41                <1>     int 41h
   896                              <1>     return
    13                              <2> %%_ret:
    14 000020E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> 
   898                              <1> rename:
   899 000020E9 F605CCDFFFFFFF      <1>     test byte [arg1Flg], -1
   900 000020F0 0F84B1F5FFFF        <1>     jz badArgError
   901 000020F6 F605C2DFFFFFFF      <1>     test byte [arg2Flg], -1
   902 000020FD 0F84A4F5FFFF        <1>     jz badArgError
   903 00002103 488D3593E0FFFF      <1>     lea rsi, cmdBuffer
   904 0000210A 0FB605ACDFFFFF      <1>     movzx eax, byte [arg1Off]
   905 00002111 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   906                              <1>     ;rsi points to terminating char
   907 00002114 AC                  <1>     lodsb   ;Get first char in AL
   908 00002115 48FFCE              <1>     dec rsi ;Go back to this char
   909 00002118 E8EE080000          <1>     call isALEndOfCommand
   910 0000211D 0F8272F5FFFF        <1>     jc badParamError
   911 00002123 488D3D5CE4FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   912                              <1> .copyName1:
   913 0000212A AC                  <1>     lodsb
   914 0000212B E8DB080000          <1>     call isALEndOfCommand
   915 00002130 0F845FF5FFFF        <1>     je badParamError
   916 00002136 E8AD080000          <1>     call isALterminator
   917 0000213B 7403                <1>     jz .endOfName1
   918 0000213D AA                  <1>     stosb
   919 0000213E EBEA                <1>     jmp short .copyName1
   920                              <1> .endOfName1:
   921 00002140 31C0                <1>     xor eax, eax
   922 00002142 AA                  <1>     stosb   ;Store this 0 at rdi
   923 00002143 488D3553E0FFFF      <1>     lea rsi, cmdBuffer
   924 0000214A 0FB6056FDFFFFF      <1>     movzx eax, byte [arg2Off]
   925 00002151 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   926 00002154 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   927 00002158 0F8437F5FFFF        <1>     je badParamError
   928 0000215E AC                  <1>     lodsb   ;Get first char in AL
   929 0000215F 48FFCE              <1>     dec rsi ;Go back to this char
   930 00002162 E8A4080000          <1>     call isALEndOfCommand
   931 00002167 0F8228F5FFFF        <1>     jc badParamError
   932 0000216D 488D3D92E4FFFF      <1>     lea rdi, destPath
   933                              <1> .copyName2:
   934 00002174 AC                  <1>     lodsb
   935 00002175 E891080000          <1>     call isALEndOfCommand
   936 0000217A 740A                <1>     je .endOfName2
   937 0000217C E867080000          <1>     call isALterminator
   938 00002181 7403                <1>     jz .endOfName2
   939 00002183 AA                  <1>     stosb
   940 00002184 EBEE                <1>     jmp short .copyName2
   941                              <1> .endOfName2:
   942 00002186 31C0                <1>     xor eax, eax
   943 00002188 AA                  <1>     stosb   ;Store this 0 at rdi
   944 00002189 488D15F6E3FFFF      <1>     lea rdx, sourcePath
   945 00002190 488D3D6FE4FFFF      <1>     lea rdi, destPath
   946 00002197 B800560000          <1>     mov eax, 5600h
   947 0000219C CD41                <1>     int 41h
   948                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000219E 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000021A0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   949 000021A1 3C0F                <1>     cmp al, errBadDrv
   950 000021A3 0F84F5F4FFFF        <1>     je badDriveError
   951 000021A9 3C0B                <1>     cmp al, errBadFmt
   952 000021AB 0F8411F5FFFF        <1>     je badDirError
   953 000021B1 E903F5FFFF          <1>     jmp badDupFnf
   954                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   955                              <1> touch:
   956                              <1> ;Temporarily used to create files
   957 000021B6 F605FFDEFFFFFF      <1>     test byte [arg1Flg], -1
   958 000021BD 0F84E4F4FFFF        <1>     jz badArgError
   959 000021C3 E84B090000          <1>     call buildCommandPath
   960 000021C8 488D150FE2FFFF      <1>     lea rdx, searchSpec
   961 000021CF B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   962 000021D4 31C9                <1>     xor ecx, ecx
   963 000021D6 CD41                <1>     int 41h
   964 000021D8 720B                <1>     jc .touchError
   965 000021DA 0FB7D8              <1>     movzx ebx, ax
   966 000021DD B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   967 000021E2 CD41                <1>     int 41h
   968                              <1>     return
    13                              <2> %%_ret:
    14 000021E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   969                              <1> .touchError:
   970 000021E5 488D1554EBFFFF      <1>     lea rdx, touchErr
   971 000021EC E9D8F4FFFF          <1>     jmp badCmn
   972                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   973                              <1> truename:
   974 000021F1 F605C4DEFFFFFF      <1>     test byte [arg1Flg], -1
   975 000021F8 0F84A9F4FFFF        <1>     jz badArgError
   976 000021FE E810090000          <1>     call buildCommandPath
   977                              <1>     ;Explicitly call Truename if we remove truename from this function
   978 00002203 488D3DD4E1FFFF      <1>     lea rdi, searchSpec
   979 0000220A E895070000          <1>     call strlen
   980 0000220F FFC9                <1>     dec ecx ;Don't print terminating null
   981 00002211 488D15C6E1FFFF      <1>     lea rdx, searchSpec
   982 00002218 BB01000000          <1>     mov ebx, 01
   983 0000221D B440                <1>     mov ah, 40h
   984 0000221F CD41                <1>     int 41h
   985 00002221 E8B9040000          <1>     call printCRLF
   986                              <1>     return
    13                              <2> %%_ret:
    14 00002226 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   987                              <1> 
   988                              <1> volume:
   989 00002227 488D3571DFFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
   990 0000222E E8DF070000          <1>     call skipSpaces
   991 00002233 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
   992 0000223A E8D3070000          <1>     call skipSpaces
   993 0000223F AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
   994 00002240 E8C6070000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
   995 00002245 7507                <1>     jnz .checkDriveLetter
   996 00002247 E853070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
   997 0000224C EB35                <1>     jmp short .dirEP
   998                              <1> .checkDriveLetter:
   999 0000224E 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1000 00002251 0F8547F4FFFF        <1>     jne badDriveError
  1001 00002257 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1002 0000225A 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1003 0000225D E8B0070000          <1>     call skipSpaces
  1004 00002262 AC                  <1>     lodsb   ;Get the non-space char in al
  1005 00002263 E8A3070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1006 00002268 0F8530F4FFFF        <1>     jne badDriveError
  1007                              <1> ;This argument should've been parsed into FCB1 so use that result
  1008 0000226E 8A054ADEFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1009 00002274 A8FF                <1>     test al, -1
  1010 00002276 0F8522F4FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1011 0000227C 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1012 00002281 FFC8                <1>     dec eax ;Convert to 0 based number
  1013                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1014 00002283 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1015 00002288 8805EDE2FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1016 0000228E 488D153DDEFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1017 00002295 B41A                <1>     mov ah, 1Ah
  1018 00002297 CD41                <1>     int 41h
  1019 00002299 488D15DBE2FFFF      <1>     lea rdx, volPathBuf
  1020 000022A0 66B90800            <1>     mov cx, dirVolumeID
  1021 000022A4 B44E                <1>     mov ah, 4Eh ;Find first
  1022 000022A6 CD41                <1>     int 41h
  1023 000022A8 7221                <1>     jc .skipVolLbl
  1024 000022AA 488D353FDEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1025 000022B1 488D3DB6E2FFFF      <1>     lea rdi, volLblSpc
  1026 000022B8 B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1027                              <1> .dirLblCopy:
  1028 000022BD AC                  <1>     lodsb   ;Get the first char
  1029 000022BE 3C00                <1>     cmp al, 0
  1030 000022C0 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1031 000022C2 3C2E                <1>     cmp al, "."
  1032 000022C4 7401                <1>     je .dirLblSkipStore
  1033 000022C6 AA                  <1>     stosb
  1034                              <1> .dirLblSkipStore:
  1035 000022C7 FFC9                <1>     dec ecx
  1036 000022C9 75F2                <1>     jnz .dirLblCopy
  1037                              <1>     ;Fallthru with CF=NC
  1038                              <1> .skipVolLbl:
  1039                              <1> ;Print volume label information now
  1040                              <1> ;Propagates the CF if CF was set    
  1041 000022CB 9C                  <1>     pushfq
  1042 000022CC 488D15E9E4FFFF      <1>     lea rdx, crlf
  1043 000022D3 B409                <1>     mov ah, 09h
  1044 000022D5 CD41                <1>     int 41h
  1045 000022D7 488D1563E7FFFF      <1>     lea rdx, volMes
  1046 000022DE B409                <1>     mov ah, 09h
  1047 000022E0 CD41                <1>     int 41h
  1048 000022E2 8A1593E2FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1049 000022E8 B402                <1>     mov ah, 02h
  1050 000022EA CD41                <1>     int 41h
  1051 000022EC 9D                  <1>     popfq
  1052 000022ED 7317                <1>     jnc .volIDOk
  1053 000022EF 488D1562E7FFFF      <1>     lea rdx, volNo
  1054 000022F6 B409                <1>     mov ah, 09h
  1055 000022F8 CD41                <1>     int 41h
  1056 000022FA 488D15BBE4FFFF      <1>     lea rdx, crlf
  1057 00002301 B409                <1>     mov ah, 09h
  1058 00002303 CD41                <1>     int 41h
  1059                              <1>     return
    13                              <2> %%_ret:
    14 00002305 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1060                              <1> .volIDOk:
  1061 00002306 488D1546E7FFFF      <1>     lea rdx, volOk
  1062 0000230D B409                <1>     mov ah, 09h
  1063 0000230F CD41                <1>     int 41h
  1064 00002311 488D3D56E2FFFF      <1>     lea rdi, volLblSpc
  1065 00002318 E887060000          <1>     call strlen
  1066 0000231D FFC9                <1>     dec ecx
  1067 0000231F C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1068 00002323 488D1544E2FFFF      <1>     lea rdx, volLblSpc
  1069 0000232A B409                <1>     mov ah, 09h
  1070 0000232C CD41                <1>     int 41h
  1071 0000232E 488D1587E4FFFF      <1>     lea rdx, crlf
  1072 00002335 B409                <1>     mov ah, 09h
  1073 00002337 CD41                <1>     int 41h
  1074                              <1>     return
    13                              <2> %%_ret:
    14 00002339 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1075                              <1> 
  1076                              <1> version:
  1077 0000233A 488D157BE4FFFF      <1>     lea rdx, crlf
  1078 00002341 B409                <1>     mov ah, 09h
  1079 00002343 CD41                <1>     int 41h
  1080 00002345 488D15E3E6FFFF      <1>     lea rdx, dosVer
  1081 0000234C B409                <1>     mov ah, 09h
  1082 0000234E CD41                <1>     int 41h
  1083 00002350 E80C000000          <1>     call .printVersionNumber
  1084 00002355 488D1560E4FFFF      <1>     lea rdx, crlf
  1085 0000235C B409                <1>     mov ah, 09h
  1086 0000235E CD41                <1>     int 41h
  1087                              <1>     return
    13                              <2> %%_ret:
    14 00002360 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1088                              <1> .printVersionNumber:
  1089 00002361 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1090 00002363 CD41                <1>     int 41h
  1091 00002365 50                  <1>     push rax
  1092 00002366 0FB6C0              <1>     movzx eax, al
  1093 00002369 E843080000          <1>     call printDecimalWord
  1094 0000236E B22E                <1>     mov dl, "."
  1095 00002370 B402                <1>     mov ah, 02h
  1096 00002372 CD41                <1>     int 41h
  1097 00002374 58                  <1>     pop rax
  1098 00002375 0FB6C4              <1>     movzx eax, ah
  1099 00002378 E834080000          <1>     call printDecimalWord
  1100                              <1>     return
    13                              <2> %%_ret:
    14 0000237D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1101                              <1> 
  1102                              <1> 
  1103                              <1> memory:
  1104 0000237E 488B1D9ADCFFFF      <1>     mov rbx, qword [sysVars]
  1105 00002385 4885DB              <1>     test rbx, rbx
  1106 00002388 7510                <1>     jnz .sysvarsOK
  1107 0000238A 488D1550E9FFFF      <1>     lea rdx, memBad0
  1108 00002391 B409                <1>     mov ah, 09h
  1109 00002393 CD41                <1>     int 41h
  1110 00002395 E9BA080000          <1>     jmp freezePC.altEP
  1111                              <1> .sysvarsOK:
  1112                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1113                              <1>     ; and rcx to store Application memory
  1114 0000239A 31F6                <1>     xor esi, esi
  1115 0000239C 31FF                <1>     xor edi, edi
  1116 0000239E 31ED                <1>     xor ebp, ebp
  1117 000023A0 31C9                <1>     xor ecx, ecx
  1118 000023A2 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1119 000023A6 488B1B              <1>     mov rbx, qword [rbx]
  1120                              <1> .memLp:
  1121 000023A9 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1122 000023AC 7409                <1>     je .validMCB
  1123 000023AE 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1124 000023B1 0F8501010000        <1>     jne .badMCBFound
  1125                              <1> .validMCB:
  1126 000023B7 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1127 000023BA 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1128 000023BE 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1129 000023C6 7505                <1>     jne .notDOS
  1130 000023C8 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1131 000023CB EB21                <1>     jmp short .gotoNext
  1132                              <1> .notDOS:
  1133 000023CD 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1134 000023D5 7505                <1>     jne .notFree
  1135 000023D7 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1136 000023DA EB12                <1>     jmp short .gotoNext
  1137                              <1> .notFree:
  1138 000023DC 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1139 000023E4 7505                <1>     jne .notHole
  1140 000023E6 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1141 000023E9 EB03                <1>     jmp short .gotoNext
  1142                              <1> .notHole:
  1143 000023EB 4801C1              <1>     add rcx, rax    ;Add to Application count
  1144                              <1> .gotoNext:
  1145 000023EE 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1146 000023F1 7407                <1>     je .endOfWalk
  1147 000023F3 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1148 000023F8 EBAF                <1>     jmp short .memLp
  1149                              <1> .endOfWalk:
  1150                              <1>     
  1151 000023FA 488D1541E8FFFF      <1>     lea rdx, memDOS
  1152 00002401 B409                <1>     mov ah, 09h
  1153 00002403 CD41                <1>     int 41h
  1154 00002405 4889F0              <1>     mov rax, rsi
  1155 00002408 E89D000000          <1>     call .mcbPrintAmount
  1156 0000240D 488D15C6E8FFFF      <1>     lea rdx, memByte
  1157 00002414 B409                <1>     mov ah, 09h
  1158 00002416 CD41                <1>     int 41h
  1159                              <1> 
  1160 00002418 4885ED              <1>     test rbp, rbp
  1161 0000241B 741E                <1>     jz .skipHole
  1162 0000241D 488D156AE8FFFF      <1>     lea rdx, memHole
  1163 00002424 B409                <1>     mov ah, 09h
  1164 00002426 CD41                <1>     int 41h
  1165 00002428 4889E8              <1>     mov rax, rbp
  1166 0000242B E87A000000          <1>     call .mcbPrintAmount
  1167 00002430 488D15A3E8FFFF      <1>     lea rdx, memByte
  1168 00002437 B409                <1>     mov ah, 09h
  1169 00002439 CD41                <1>     int 41h
  1170                              <1> .skipHole:
  1171                              <1> 
  1172 0000243B 488D1526E8FFFF      <1>     lea rdx, memApp
  1173 00002442 B409                <1>     mov ah, 09h
  1174 00002444 CD41                <1>     int 41h
  1175 00002446 4889C8              <1>     mov rax, rcx
  1176 00002449 E85C000000          <1>     call .mcbPrintAmount
  1177 0000244E 488D1585E8FFFF      <1>     lea rdx, memByte
  1178 00002455 B409                <1>     mov ah, 09h
  1179 00002457 CD41                <1>     int 41h
  1180                              <1> 
  1181 00002459 488D1554E8FFFF      <1>     lea rdx, memFree
  1182 00002460 B409                <1>     mov ah, 09h
  1183 00002462 CD41                <1>     int 41h
  1184 00002464 4889F8              <1>     mov rax, rdi
  1185 00002467 E83E000000          <1>     call .mcbPrintAmount
  1186 0000246C 488D1567E8FFFF      <1>     lea rdx, memByte
  1187 00002473 B409                <1>     mov ah, 09h
  1188 00002475 CD41                <1>     int 41h
  1189                              <1> 
  1190 00002477 488D159EE7FFFF      <1>     lea rdx, memSys
  1191 0000247E B409                <1>     mov ah, 09h
  1192 00002480 CD41                <1>     int 41h
  1193 00002482 4889F0              <1>     mov rax, rsi
  1194 00002485 4801F8              <1>     add rax, rdi
  1195 00002488 4801C8              <1>     add rax, rcx
  1196 0000248B 4801E8              <1>     add rax, rbp
  1197 0000248E E817000000          <1>     call .mcbPrintAmount
  1198 00002493 488D1540E8FFFF      <1>     lea rdx, memByte
  1199 0000249A B409                <1>     mov ah, 09h
  1200 0000249C CD41                <1>     int 41h
  1201                              <1> 
  1202 0000249E 488D1517E3FFFF      <1>     lea rdx, crlf
  1203 000024A5 B409                <1>     mov ah, 09h
  1204 000024A7 CD41                <1>     int 41h
  1205                              <1>     return
    13                              <2> %%_ret:
    14 000024A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1206                              <1> 
  1207                              <1> .mcbPrintAmount:
  1208 000024AA 51                  <1>     push rcx
  1209 000024AB 56                  <1>     push rsi
  1210 000024AC 57                  <1>     push rdi
  1211 000024AD 55                  <1>     push rbp
  1212 000024AE E8FE060000          <1>     call printDecimalWord
  1213 000024B3 5D                  <1>     pop rbp
  1214 000024B4 5F                  <1>     pop rdi
  1215 000024B5 5E                  <1>     pop rsi
  1216 000024B6 59                  <1>     pop rcx
  1217                              <1>     return
    13                              <2> %%_ret:
    14 000024B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1218                              <1> .badMCBFound:
  1219 000024B8 488D1562E8FFFF      <1>     lea rdx, memBad2
  1220 000024BF B409                <1>     mov ah, 09h
  1221 000024C1 CD41                <1>     int 41h
  1222 000024C3 E98C070000          <1>     jmp freezePC.altEP
  1223                              <1> 
  1224                              <1> type:
  1225 000024C8 F605EDDBFFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1226 000024CF 0F84D2F1FFFF        <1>     jz badArgError
  1227 000024D5 F605E3DBFFFFFF      <1>     test byte [arg2Flg], -1
  1228 000024DC 0F85C5F1FFFF        <1>     jnz badArgError         ;If this set, error
  1229 000024E2 488D35B4DCFFFF      <1>     lea rsi, cmdBuffer
  1230 000024E9 0FB605CDDBFFFF      <1>     movzx eax, byte [arg1Off]
  1231 000024F0 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1232 000024F3 803E0D              <1>     cmp byte [rsi], CR
  1233 000024F6 0F84ABF1FFFF        <1>     je badArgError
  1234 000024FC 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1235 00002500 750F                <1>     jne .noDrive
  1236 00002502 0FB605B5DBFFFF      <1>     movzx eax, byte [arg1FCBret]
  1237 00002509 3CFF                <1>     cmp al, -1
  1238 0000250B 0F848DF1FFFF        <1>     je badDriveError
  1239                              <1> .noDrive:
  1240                              <1>     ;Now we open the provided file
  1241 00002511 E880070000          <1>     call copyArgumentToSearchSpec
  1242 00002516 488D15C1DEFFFF      <1>     lea rdx, searchSpec
  1243 0000251D B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1244 00002522 CD41                <1>     int 41h
  1245 00002524 0F8286F1FFFF        <1>     jc badFileError
  1246 0000252A 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1247 00002531 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1248                              <1> .lp:
  1249 00002534 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1250 00002539 B43F                <1>     mov ah, 3Fh ;Read handle
  1251 0000253B CD41                <1>     int 41h
  1252 0000253D 89C1                <1>     mov ecx, eax
  1253 0000253F 67E317              <1>     jecxz .exit
  1254 00002542 53                  <1>     push rbx    ;Save the original in handle
  1255 00002543 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1256 00002548 B440                <1>     mov ah, 40h
  1257 0000254A CD41                <1>     int 41h
  1258 0000254C 5B                  <1>     pop rbx ;Get back the original read handle
  1259 0000254D 720F                <1>     jc .exitBad
  1260 0000254F 39C8                <1>     cmp eax, ecx
  1261 00002551 74E1                <1>     je .lp
  1262 00002553 FFC9                <1>     dec ecx ;One less for a ^Z
  1263 00002555 39C8                <1>     cmp eax, ecx
  1264 00002557 7505                <1>     jne .exitBad
  1265                              <1> .exit:
  1266 00002559 B43E                <1>     mov ah, 3Eh ;Close handle
  1267 0000255B CD41                <1>     int 41h
  1268                              <1>     return
    13                              <2> %%_ret:
    14 0000255D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1269                              <1> .exitBad:
  1270                              <1>     ;Print a disk error message... use a table to build the message but for
  1271                              <1>     ; now, just exit
  1272                              <1>     ;If it is a char device, don't print a error
  1273 0000255E EBF9                <1>     jmp short .exit
  1274                              <1> 
  1275                              <1> exit:
  1276 00002560 F605C6DAFFFFFF      <1>     test byte [permaSwitch], -1
  1277                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002567 75(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1278 00002569 488B05A7DAFFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1279 00002570 483DFFFFFFFF        <1>     cmp rax, -1
  1280                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002576 74(5D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1281 00002578 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1282                              <1> 
  1283 0000257C 488B15ABDAFFFF      <1>     mov rdx, qword [parentInt42]
  1284 00002583 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
  1285 00002587 B842250000          <1>     mov eax, 2542h
  1286 0000258C CD41                <1>     int 41h
  1287                              <1> 
  1288 0000258E B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1289 00002593 CD41                <1>     int 41h
  1290                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002595 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1291                              <1> 
  1292                              <1> launchChild:
  1293                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1294                              <1> ;Here we must search the CWD or all path componants before failing
  1295                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1296 00002596 488D1535DBFFFF      <1>     lea rdx, cmdFFBlock
  1297 0000259D B41A                <1>     mov ah, 1Ah     ;Set DTA for task
  1298 0000259F CD41                <1>     int 41h
  1299                              <1> 
  1300 000025A1 8B0524DBFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1301 000025A7 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1302 000025AC 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1303 000025B1 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1304 000025B6 741D                <1>     je .noExt
  1305 000025B8 E8E9EBFFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1306 000025BD 0F8510010000        <1>     jnz .dfltErrExit
  1307                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1308 000025C3 0F820A010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1309                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1310                              <1>     ;So it is a com or exe that we are searching for for now
  1311 000025C9 488D3D4DDCFFFF      <1>     lea rdi, cmdPathSpec
  1312 000025D0 4889FA              <1>     mov rdx, rdi
  1313 000025D3 EB24                <1>     jmp short .search
  1314                              <1> .noExt:
  1315                              <1>     ;If the filename has no extension, append a .*
  1316                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1317 000025D5 31DB                <1>     xor ebx, ebx
  1318 000025D7 488D3D3FDCFFFF      <1>     lea rdi, cmdPathSpec
  1319 000025DE 4889FA              <1>     mov rdx, rdi
  1320 000025E1 31C0                <1>     xor eax, eax
  1321 000025E3 B9FFFFFFFF          <1>     mov ecx, -1
  1322 000025E8 F2AE                <1>     repne scasb
  1323 000025EA 48FFCF              <1>     dec rdi ;Point to the terminating null
  1324 000025ED 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1325 000025F0 66B82E2A            <1>     mov ax, ".*"
  1326 000025F4 66AB                <1>     stosw
  1327 000025F6 30C0                <1>     xor al, al  ;Store terminating null
  1328 000025F8 AA                  <1>     stosb
  1329                              <1> .search:
  1330 000025F9 B906000000          <1>     mov ecx, dirIncFiles
  1331 000025FE B44E                <1>     mov ah, 4Eh ;Find First File
  1332 00002600 CD41                <1>     int 41h
  1333 00002602 0F82CB000000        <1>     jc .dfltErrExit
  1334 00002608 E879000000          <1>     call .noExtCheckExt
  1335                              <1> .moreSearch:
  1336 0000260D B44F                <1>     mov ah, 4Fh
  1337 0000260F CD41                <1>     int 41h
  1338 00002611 7207                <1>     jc .noMoreFiles
  1339 00002613 E86E000000          <1>     call .noExtCheckExt
  1340 00002618 EBF3                <1>     jmp short .moreSearch
  1341                              <1> .noMoreFiles:
  1342 0000261A 85DB                <1>     test ebx, ebx
  1343 0000261C 0F84B1000000        <1>     jz .dfltErrExit
  1344                              <1> ;So we have a valid executable
  1345 00002622 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1346 00002625 F7C301000000        <1>     test ebx, 1
  1347 0000262B 7407                <1>     jz .launchexebat
  1348 0000262D B82E434F4D          <1>     mov eax, ".COM"
  1349 00002632 EB14                <1>     jmp short .launch
  1350                              <1> .launchexebat:
  1351 00002634 F7C302000000        <1>     test ebx, 2
  1352 0000263A 7407                <1>     jz .launchbat
  1353 0000263C B82E455845          <1>     mov eax, ".EXE"
  1354 00002641 EB05                <1>     jmp short .launch
  1355                              <1> .launchbat:
  1356                              <1> ;Temporary For BAT
  1357 00002643 E98B000000          <1>     jmp .dfltErrExit
  1358                              <1> .launch:
  1359 00002648 AB                  <1>     stosd
  1360 00002649 30C0                <1>     xor al, al
  1361 0000264B AA                  <1>     stosb   ;Store the terminating null
  1362 0000264C 488D1DAADAFFFF      <1>     lea rbx, launchBlock
  1363 00002653 31C0                <1>     xor eax, eax
  1364 00002655 488903              <1>     mov qword [rbx + execProg.pEnv], rax    ;Tell DOS to copy my current Env
  1365 00002658 498D8080000000      <1>     lea rax, qword [r8 + cmdLineCnt]
  1366 0000265F 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1367 00002663 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1368 00002667 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1369 0000266B 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1370 0000266F 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1371 00002673 488D15A3DBFFFF      <1>     lea rdx, cmdPathSpec
  1372 0000267A B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1373 0000267F CD41                <1>     int 41h
  1374 00002681 E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1375                              <1> .noExtCheckExt:
  1376                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1377 00002686 488D3563DAFFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1378 0000268D 488D3DD8DBFFFF      <1>     lea rdi, fcbCmdSpec
  1379 00002694 E8F0030000          <1>     call asciiFilenameToFCB
  1380 00002699 8B05D5DBFFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1381 0000269F 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1382 000026A4 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1383 000026A9 3D434F4D20          <1>     cmp eax, "COM "
  1384 000026AE 7507                <1>     jne .neceexe
  1385 000026B0 81CB01000000        <1>     or ebx, 1
  1386                              <1>     return
    13                              <2> %%_ret:
    14 000026B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> .neceexe:
  1388 000026B7 3D45584520          <1>     cmp eax, "EXE "
  1389 000026BC 7507                <1>     jne .necebat
  1390 000026BE 81CB02000000        <1>     or ebx, 2
  1391                              <1>     return
    13                              <2> %%_ret:
    14 000026C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1392                              <1> .necebat:
  1393 000026C5 3D42415420          <1>     cmp eax, "BAT "
  1394                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026CA 75(C4)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1395 000026CC 81CB04000000        <1>     or ebx, 4
  1396                              <1>     return
    13                              <2> %%_ret:
    14 000026D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> 
  1398                              <1> .dfltErrExit:
  1399 000026D3 488D153FE1FFFF      <1>     lea rdx, badCmd
  1400 000026DA B409                <1>     mov ah, 09h
  1401 000026DC CD41                <1>     int 41h
  1402                              <1>     return
    13                              <2> %%_ret:
    14 000026DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 000026DF 488D15D6E0FFFF      <1>     lea rdx, crlf
     5 000026E6 BB02000000          <1>     mov ebx, 2
     6 000026EB B440                <1>     mov ah, 40h ;Print a new line
     7 000026ED B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 000026F2 CD41                <1>     int 41h
     9                              <1>     return
    13                              <2> %%_ret:
    14 000026F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 000026F5 53                  <1>     push rbx
    18 000026F6 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 000026F8 803D37D9FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 000026FF 7240                <1>     jb .usDate
    21 00002701 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002703 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002708 E8B0000000          <1>     call .printFirst
    25 0000270D 8A152ED9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002713 B402                <1>     mov ah, 02h
    27 00002715 CD41                <1>     int 41h
    28                              <1> 
    29 00002717 89C8                <1>     mov eax, ecx
    30 00002719 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 0000271E C1E805              <1>     shr eax, 5
    32 00002721 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002726 8A1515D9FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 0000272C B402                <1>     mov ah, 02h
    36 0000272E CD41                <1>     int 41h
    37                              <1> 
    38 00002730 89C8                <1>     mov eax, ecx
    39 00002732 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002737 C1E809              <1>     shr eax, 9
    41 0000273A 5B                  <1>     pop rbx ;Get the year signature back
    42 0000273B E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002740 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002741 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002746 C1E805              <1>     shr eax, 5
    48 00002749 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 0000274E 8A15EDD8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002754 B402                <1>     mov ah, 02h
    52 00002756 CD41                <1>     int 41h
    53                              <1> 
    54 00002758 89C8                <1>     mov eax, ecx
    55 0000275A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 0000275F E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002764 8A15D7D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 0000276A B402                <1>     mov ah, 02h
    60 0000276C CD41                <1>     int 41h
    61                              <1> 
    62 0000276E 89C8                <1>     mov eax, ecx
    63 00002770 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002775 C1E809              <1>     shr eax, 9
    65 00002778 5B                  <1>     pop rbx ;Get the year signature back
    66 00002779 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 0000277E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 0000277F 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002784 C1E809              <1>     shr eax, 9
    72 00002787 5B                  <1>     pop rbx ;Get the year signature back
    73 00002788 E85C000000          <1>     call .printYear
    74                              <1> 
    75 0000278D 8A15AED8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002793 B402                <1>     mov ah, 02h
    77 00002795 CD41                <1>     int 41h
    78                              <1> 
    79 00002797 89C8                <1>     mov eax, ecx
    80 00002799 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 0000279E C1E805              <1>     shr eax, 5
    82 000027A1 E833000000          <1>     call .printSecond
    83                              <1> 
    84 000027A6 8A1595D8FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 000027AC B402                <1>     mov ah, 02h
    86 000027AE CD41                <1>     int 41h
    87                              <1> 
    88 000027B0 89C8                <1>     mov eax, ecx
    89 000027B2 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 000027B7 E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 000027BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 000027BD 51                  <1>     push rcx
    96 000027BE E85F040000          <1>     call getDecimalWord
    97 000027C3 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 000027C5 7504                <1>     jnz .skipSpace
    99 000027C7 88CD                <1>     mov ch, cl
   100 000027C9 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 000027CB 88CA                <1>     mov dl, cl
   103 000027CD B402                <1>     mov ah, 02h
   104 000027CF CD41                <1>     int 41h
   105 000027D1 88EA                <1>     mov dl, ch
   106 000027D3 B402                <1>     mov ah, 02h
   107 000027D5 CD41                <1>     int 41h
   108 000027D7 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 000027D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 000027D9 51                  <1>     push rcx
   112 000027DA E843040000          <1>     call getDecimalWord
   113 000027DF 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 000027E1 75E8                <1>     jnz .skipSpace
   115 000027E3 88CD                <1>     mov ch, cl
   116 000027E5 B130                <1>     mov cl, "0"
   117 000027E7 EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 000027E9 05BC070000          <1>     add eax, 1980
   120 000027EE 51                  <1>     push rcx
   121 000027EF 53                  <1>     push rbx
   122 000027F0 E82D040000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 000027F5 5B                  <1>     pop rbx
   124 000027F6 84DB                <1>     test bl, bl
   125 000027F8 740C                <1>     jz .twoDigitYear
   126 000027FA 88CA                <1>     mov dl, cl  ;Print the first digit
   127 000027FC B402                <1>     mov ah, 02h
   128 000027FE CD41                <1>     int 41h
   129 00002800 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002802 B402                <1>     mov ah, 02h
   131 00002804 CD41                <1>     int 41h
   132                              <1> .twoDigitYear:
   133 00002806 C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002809 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 0000280B B402                <1>     mov ah, 02h
   136 0000280D CD41                <1>     int 41h
   137 0000280F 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002811 B402                <1>     mov ah, 02h
   139 00002813 CD41                <1>     int 41h
   140 00002815 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002816 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002817 89C1                <1>     mov ecx, eax
   149 00002819 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 0000281E C1E80B              <1>     shr eax, 11
   151 00002821 803D1FD8FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002828 750B                <1>     jne .ampm
   153 0000282A E85A000000          <1>     call .printHours
   154 0000282F E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002834 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002835 3D0C000000          <1>     cmp eax, 12
   158 0000283A 7713                <1>     ja .pm
   159 0000283C 7416                <1>     je .pm2
   160 0000283E E846000000          <1>     call .printHours
   161 00002843 E81D000000          <1>     call .printMinutes
   162 00002848 B261                <1>     mov dl, "a"
   163 0000284A B402                <1>     mov ah, 02h
   164 0000284C CD41                <1>     int 41h
   165                              <1>     return
    13                              <2> %%_ret:
    14 0000284E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 0000284F 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002854 E830000000          <1>     call .printHours
   170 00002859 E807000000          <1>     call .printMinutes
   171 0000285E B270                <1>     mov dl, "p"
   172 00002860 B402                <1>     mov ah, 02h
   173 00002862 CD41                <1>     int 41h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002864 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002865 8A15D8D7FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 0000286B B402                <1>     mov ah, 02h
   178 0000286D CD41                <1>     int 41h
   179                              <1> 
   180 0000286F 89C8                <1>     mov eax, ecx
   181 00002871 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002876 C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002879 51                  <1>     push rcx
   185 0000287A E8A3030000          <1>     call getDecimalWord
   186 0000287F 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002881 7514                <1>     jnz .skipSpace
   188 00002883 88CD                <1>     mov ch, cl
   189 00002885 B130                <1>     mov cl, "0"
   190 00002887 EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002889 51                  <1>     push rcx
   193 0000288A E893030000          <1>     call getDecimalWord
   194 0000288F 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002891 7504                <1>     jnz .skipSpace
   196 00002893 88CD                <1>     mov ch, cl
   197 00002895 B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002897 88CA                <1>     mov dl, cl
   200 00002899 B402                <1>     mov ah, 02h
   201 0000289B CD41                <1>     int 41h
   202 0000289D 88EA                <1>     mov dl, ch
   203 0000289F B402                <1>     mov ah, 02h
   204 000028A1 CD41                <1>     int 41h
   205 000028A3 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 000028A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 000028A5 488D1583E1FFFF      <1>     lea rdx, dosVer
   211 000028AC B409                <1>     mov ah, 09h ;Print String
   212 000028AE CD41                <1>     int 41h
   213 000028B0 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 000028B2 CD41                <1>     int 41h
   215 000028B4 50                  <1>     push rax    ;Save minor version
   216 000028B5 E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 000028BA E8B4000000          <1>     call printPackedBCD ;Print al
   218 000028BF B22E                <1>     mov dl, "."
   219 000028C1 B402                <1>     mov ah, 02h
   220 000028C3 CD41                <1>     int 41h
   221 000028C5 58                  <1>     pop rax
   222 000028C6 88E0                <1>     mov al, ah  ;Get the minor version low
   223 000028C8 E889000000          <1>     call hexToBCD
   224 000028CD E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 000028D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 000028D3 B21B                <1>     mov dl, ESC
   228 000028D5 EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 000028D7 B224                <1>     mov dl, "$"
   232 000028D9 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 000028DB B23D                <1>     mov dl, "="
   236 000028DD EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 000028DF B27C                <1>     mov dl, "|"
   240 000028E1 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 000028E3 B23E                <1>     mov dl, ">"
   244 000028E5 EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 000028E7 B23C                <1>     mov dl, "<"
   248 000028E9 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 000028EB B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 000028ED CD41                <1>     int 41h
   253 000028EF 0441                <1>     add al, "A" ;Convert to letter
   254 000028F1 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 000028F3 B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 000028F5 CD41                <1>     int 41h
   258                              <1>     return
    13                              <2> %%_ret:
    14 000028F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 000028F8 488D3D5DD7FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 000028FF B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002901 CD41                <1>     int 41h
   263 00002903 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002905 FEC2                <1>     inc dl
   265 00002907 0441                <1>     add al, "A" ;Convert to letter
   266 00002909 B43A                <1>     mov ah, ":"
   267 0000290B 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 0000290D 8A0518D7FFFF        <1>     mov al, byte [pathSep]
   269 00002913 AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002914 B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002916 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002919 CD41                <1>     int 41h
   273 0000291B E884000000          <1>     call strlen
   274 00002920 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002926 B440                <1>     mov ah, 40h ;Write to handle
   277 00002928 BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 0000292D 488D1528D7FFFF      <1>     lea rdx, currDirStr
   279 00002934 CD41                <1>     int 41h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002936 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002937 51                  <1>     push rcx
   286 00002938 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 0000293B 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 0000293D 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002942 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002948 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 0000294B 050A000000          <1>     add eax, 10
   293 00002950 FFC9                <1>     dec ecx
   294 00002952 75F7                <1>     jnz .bth
   295 00002954 59                  <1>     pop rcx
   296 00002955 C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002956 51                  <1>     push rcx
   302 00002957 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 0000295A 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 0000295C 3D0A000000          <1>     cmp eax, 10
   306 00002961 7209                <1>     jb .htb1
   307 00002963 2D0A000000          <1>     sub eax, 10
   308 00002968 FFC1                <1>     inc ecx
   309 0000296A EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 0000296C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 0000296F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002971 59                  <1>     pop rcx
   314 00002972 C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002973 50                  <1>     push rax
   321 00002974 52                  <1>     push rdx
   322 00002975 88C4                <1>     mov ah, al
   323 00002977 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002979 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 0000297C 7508                <1>     jnz .upperNybble
   326 0000297E B220                <1>     mov dl, " "
   327 00002980 B402                <1>     mov ah, 02h
   328 00002982 CD41                <1>     int 41h
   329 00002984 EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002986 50                  <1>     push rax
   332 00002987 C0EC04              <1>     shr ah, 4
   333 0000298A 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 0000298D 88E2                <1>     mov dl, ah
   335 0000298F B402                <1>     mov ah, 02h ;Print DL
   336 00002991 CD41                <1>     int 41h
   337 00002993 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002994 0430                <1>     add al, "0"
   340 00002996 88C2                <1>     mov dl, al
   341 00002998 B402                <1>     mov ah, 02h ;Print DL
   342 0000299A CD41                <1>     int 41h
   343 0000299C 5A                  <1>     pop rdx
   344 0000299D 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 0000299E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 0000299F B419                <1>     mov ah, 19h
   350 000029A1 CD41                <1>     int 41h
   351                              <1>     return
    13                              <2> %%_ret:
    14 000029A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 000029A4 50                  <1>     push rax
   358 000029A5 57                  <1>     push rdi
   359 000029A6 30C0                <1>     xor al, al
   360 000029A8 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 000029AA FFC9                <1>     dec ecx ;rcx = -1
   362 000029AC F2AE                <1>     repne scasb
   363 000029AE F7D1                <1>     not ecx
   364 000029B0 5F                  <1>     pop rdi
   365 000029B1 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 000029B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 000029B3 AC                  <1>     lodsb
   374 000029B4 3C0D                <1>     cmp al, CR
   375 000029B6 7419                <1>     je .endOfInput
   376 000029B8 E82B000000          <1>     call isALterminator
   377 000029BD 7419                <1>     jz .exit
   378 000029BF 3A0566D6FFFF        <1>     cmp al, byte [pathSep]
   379 000029C5 7411                <1>     je .exit
   380 000029C7 3A055FD6FFFF        <1>     cmp al, byte [switchChar]
   381 000029CD 7409                <1>     je .exit
   382 000029CF EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 000029D1 E802000000          <1>     call .exit
   385 000029D6 F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 000029D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 000029D8 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 000029DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 000029DC AC                  <1>     lodsb
   395 000029DD E806000000          <1>     call isALterminator
   396 000029E2 75F8                <1>     jnz findTerminator
   397 000029E4 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 000029E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 000029E8 3C20                <1>     cmp al, " "
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029EA 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 000029EC 3C3B                <1>     cmp al, ";"
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029EE 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 000029F0 3C3D                <1>     cmp al, "="
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029F2 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   408 000029F4 3C2C                <1>     cmp al, ","
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029F6 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   410 000029F8 3C09                <1>     cmp al, TAB
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029FA 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   412 000029FC 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 000029FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
   417 000029FF AC                  <1>     lodsb
   418 00002A00 E806000000          <1>     call isALEndOfCommand
   419 00002A05 75F8                <1>     jnz findEndOfCommand
   420 00002A07 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002A0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002A0B 3C7C                <1>     cmp al, "|"
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A0D 74(0A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   425 00002A0F 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002A11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
   432 00002A12 803E20              <1>     cmp byte [rsi], " "
   433 00002A15 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002A17 803E09              <1>     cmp byte [rsi], TAB
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002A1A 75(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
   437 00002A1C 48FFC6              <1>     inc rsi
   438 00002A1F EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002A21 66813DFFD5FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002A2A 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002A2C E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002A31 E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002A36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002A37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
   452 00002A38 488D3D75D6FFFF      <1>     lea rdi, cmdStatePtr
   453 00002A3F B90E000000          <1>     mov ecx, cmdStateL
   454 00002A44 31C0                <1>     xor eax, eax
   455 00002A46 F3AA                <1>     rep stosb
   456 00002A48 C70566D6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002A51 FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002A52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
   461 00002A53 488D3D45D6FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002A5A B923000000          <1>     mov ecx, cmdLineStateL
   463 00002A5F 31C0                <1>     xor eax, eax
   464 00002A61 F3AA                <1>     rep stosb
   465 00002A63 C70543D6FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002A6C FF                  <1>
   466 00002A6D C70541D6FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002A76 FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002A77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
   478 00002A78 53                  <1>     push rbx    
   479 00002A79 57                  <1>     push rdi
   480 00002A7A B90B000000          <1>     mov ecx, 11
   481 00002A7F B020                <1>     mov al, " "
   482 00002A81 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002A83 5F                  <1>     pop rdi
   484 00002A84 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002A87 EB1D                <1>     jmp short asciiFilenameToFCB.processName
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002A89 53                  <1>     push rbx    
   496 00002A8A 57                  <1>     push rdi
   497 00002A8B B90B000000          <1>     mov ecx, 11
   498 00002A90 B020                <1>     mov al, " "
   499 00002A92 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002A94 5F                  <1>     pop rdi
   501 00002A95 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002A98 803E2E              <1>     cmp byte [rsi], "."
   504 00002A9B 7509                <1>     jne .processName
   505 00002A9D A4                  <1>     movsb   ;Store the first dot
   506 00002A9E 803E2E              <1>     cmp byte [rsi], "."
   507 00002AA1 752C                <1>     jne .exitBadChar
   508 00002AA3 A4                  <1>     movsb
   509 00002AA4 EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002AA6 AC                  <1>     lodsb   ;Get the char in al
   512 00002AA7 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002AA9 7426                <1>     jz .exit
   514 00002AAB 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002AAD 7407                <1>     je .extSpace
   516 00002AAF 3C2E                <1>     cmp al, "."
   517 00002AB1 740C                <1>     je .ext
   518 00002AB3 AA                  <1>     stosb   ;Store the char
   519 00002AB4 EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002AB6 AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002AB7 84C0                <1>     test al, al
   524 00002AB9 7416                <1>     jz .exit
   525 00002ABB 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002ABD 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002ABF 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002AC3 AC                  <1>     lodsb
   531 00002AC4 84C0                <1>     test al, al
   532 00002AC6 7409                <1>     jz .exit
   533 00002AC8 3C20                <1>     cmp al, " "
   534 00002ACA 7405                <1>     je .exit
   535 00002ACC AA                  <1>     stosb
   536 00002ACD EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002ACF 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002AD1 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002AD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
   548 00002AD3 B908000000          <1>     mov ecx, 8
   549 00002AD8 F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002ADA 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002ADE 750D                <1>     jne .ext
   553 00002AE0 48FFCF              <1>     dec rdi
   554 00002AE3 FFC1                <1>     inc ecx
   555 00002AE5 81F908000000        <1>     cmp ecx, 8
   556 00002AEB 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002AED 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002AF2 7506                <1>     jne .validExt
   560 00002AF4 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002AF8 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002AFA B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002AFC AA                  <1>     stosb
   565 00002AFD B903000000          <1>     mov ecx, 3
   566 00002B02 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002B04 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002B08 7505                <1>     jne .exit
   570 00002B0A 48FFCF              <1>     dec rdi
   571 00002B0D EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002B0F 31C0                <1>     xor eax, eax
   574 00002B11 AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   581 00002B13 0FB605A3D5FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002B1A 488D357CD6FFFF      <1>     lea rsi, cmdBuffer
   583 00002B21 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002B24 8A3D01D5FFFF        <1>     mov bh, byte [pathSep]
   585 00002B2A B33A                <1>     mov bl, ":"
   586 00002B2C 383E                <1>     cmp byte [rsi], bh  ;Is the first char relative to root?
   587 00002B2E 7458                <1>     je .absoluteCurrent
   588 00002B30 66395E01            <1>     cmp word [rsi + 1], bx    ;This checks if absolute or relative
   589 00002B34 746D                <1>     je .absolutePath
   590 00002B36 385E01              <1>     cmp byte [rsi + 1], bl  ;Check if a drive separator
   591 00002B39 7409                <1>     je .relativeGiven
   592                              <1> ;No drive letter given, must get Current Drive
   593 00002B3B E85FFEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   594 00002B40 0441                <1>     add al, "A"
   595 00002B42 EB0B                <1>     jmp short .relativeCommon
   596                              <1> .relativeGiven:
   597                              <1> ;Drive letter pointed to by AL
   598 00002B44 8A06                <1>     mov al, byte [rsi]  ;Get drive letter in al
   599 00002B46 24DF                <1>     and al, 0DFh    ;Convert to UC
   600 00002B48 4881C602000000      <1>     add rsi, 2  ;Skip the given drive letter and the colon
   601                              <1> .relativeCommon:
   602                              <1>     ;al has drive letter
   603 00002B4F 88C2                <1>     mov dl, al  ;Save drive letter in dl
   604 00002B51 80EA40              <1>     sub dl, "@" ;Get 1 based drive number in dl
   605 00002B54 B43A                <1>     mov ah, ":" ;Get the colon in too
   606 00002B56 488D3D81D8FFFF      <1>     lea rdi, searchSpec ;Start building our search path here
   607 00002B5D 66AB                <1>     stosw   ;Store X:
   608 00002B5F 8A05C6D4FFFF        <1>     mov al, byte [pathSep]
   609 00002B65 AA                  <1>     stosb   ;Store pathSep
   610 00002B66 56                  <1>     push rsi    ;Save user input string
   611 00002B67 4889FE              <1>     mov rsi, rdi    ;Put the current directory here for this drive
   612 00002B6A B447                <1>     mov ah, 47h ;Get Current Working Directory, dl has drive number
   613 00002B6C CD41                <1>     int 41h ;Won't fail as drive letter in dl confirmed ok
   614 00002B6E 5E                  <1>     pop rsi
   615                              <1>     ;Now want to find terminating null
   616 00002B6F 30C0                <1>     xor al, al
   617 00002B71 31C9                <1>     xor ecx, ecx
   618 00002B73 FFC9                <1>     dec ecx
   619 00002B75 F2AE                <1>     repne scasb ;Search for the terminating null
   620 00002B77 48FFCF              <1>     dec rdi ;Go back one once found
   621 00002B7A 8A05ABD4FFFF        <1>     mov al, byte [pathSep]
   622 00002B80 3847FF              <1>     cmp byte [rdi - 1], al
   623 00002B83 7425                <1>     je .buildPath ;If the previous char is a pathsep, skip storing another
   624 00002B85 AA                  <1>     stosb   ;Store the pathsep
   625 00002B86 EB22                <1>     jmp short .buildPath  ;Now we copy the user string over and good to go
   626                              <1> .absoluteCurrent:
   627 00002B88 E812FEFFFF          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   628 00002B8D 0441                <1>     add al, "A"
   629 00002B8F B43A                <1>     mov ah, ":" ;ax has X: now to store 
   630 00002B91 488D3D46D8FFFF      <1>     lea rdi, searchSpec
   631 00002B98 66AB                <1>     stosw
   632 00002B9A 8A058BD4FFFF        <1>     mov al, byte [pathSep]
   633 00002BA0 AA                  <1>     stosb
   634 00002BA1 EB07                <1>     jmp short .buildPath
   635                              <1> .absolutePath:
   636 00002BA3 488D3D34D8FFFF      <1>     lea rdi, searchSpec
   637                              <1> .buildPath:
   638 00002BAA E857EAFFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   639 00002BAF F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   640                              <1>     return
    13                              <2> %%_ret:
    14 00002BB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1>     
   642                              <1> printDecimalWord:
   643                              <1> ;Takes qword in rax and print it's decimal representation
   644                              <1> ;Takes the qword in eax and prints its decimal representation
   645 00002BB1 31C9                <1>     xor ecx, ecx
   646 00002BB3 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   647 00002BB5 85C0                <1>     test eax, eax
   648 00002BB7 750C                <1>     jnz .notZero
   649 00002BB9 B930000000          <1>     mov ecx, "0"
   650 00002BBE BD01000000          <1>     mov ebp, 1  ;Print one digit
   651 00002BC3 EB3E                <1>     jmp short .dpfb2
   652                              <1> .notZero:
   653 00002BC5 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   654 00002BC7 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   655                              <1> .dpfb0:
   656 00002BCC FFC5                <1>     inc ebp
   657 00002BCE 81FD08000000        <1>     cmp ebp, 8
   658 00002BD4 7206                <1>     jb .dpfb00
   659 00002BD6 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   660 00002BDA EB04                <1>     jmp short .dpfb01
   661                              <1> .dpfb00:
   662 00002BDC 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   663                              <1> .dpfb01:
   664 00002BE0 31D2                <1>     xor edx, edx
   665 00002BE2 48F7F6              <1>     div rsi
   666 00002BE5 80C230              <1>     add dl, '0'
   667 00002BE8 80FA39              <1>     cmp dl, '9'
   668 00002BEB 7603                <1>     jbe .dpfb1
   669 00002BED 80C207              <1>     add dl, 'A'-'0'-10
   670                              <1> .dpfb1:
   671 00002BF0 81FD08000000        <1>     cmp ebp, 8
   672 00002BF6 7204                <1>     jb .dpfb10
   673 00002BF8 88D3                <1>     mov bl, dl ;Add the bottom bits
   674 00002BFA EB02                <1>     jmp short .dpfb11
   675                              <1> .dpfb10:
   676 00002BFC 88D1                <1>     mov cl, dl    ;Save remainder byte
   677                              <1> .dpfb11:
   678 00002BFE 4885C0              <1>     test rax, rax
   679 00002C01 75C9                <1>     jnz .dpfb0
   680                              <1> .dpfb2:
   681 00002C03 81FD08000000        <1>     cmp ebp, 8
   682 00002C09 7208                <1>     jb .dpfb20
   683 00002C0B 88DA                <1>     mov dl, bl
   684 00002C0D 48C1EB08            <1>     shr rbx, 8
   685 00002C11 EB06                <1>     jmp short .dpfb21
   686                              <1> .dpfb20:
   687 00002C13 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   688 00002C15 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   689                              <1> .dpfb21:
   690 00002C19 B402                <1>     mov ah, 02h
   691 00002C1B CD41                <1>     int 41h
   692 00002C1D FFCD                <1>     dec ebp
   693 00002C1F 75E2                <1>     jnz .dpfb2
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002C21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   695                              <1> 
   696                              <1> getDecimalWord:
   697                              <1> ;Works on MAX A dword in eax
   698                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   699 00002C22 31C9                <1>     xor ecx, ecx
   700 00002C24 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   701 00002C26 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   702                              <1> .dpfb0:
   703 00002C2B FFC5                <1>     inc ebp
   704 00002C2D 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   705 00002C31 31D2                <1>     xor edx, edx
   706 00002C33 48F7F3              <1>     div rbx
   707 00002C36 80C230              <1>     add dl, '0'
   708 00002C39 80FA39              <1>     cmp dl, '9'
   709 00002C3C 7603                <1>     jbe .dpfb1
   710 00002C3E 80C207              <1>     add dl, 'A'-'0'-10
   711                              <1> .dpfb1:
   712 00002C41 88D1                <1>     mov cl, dl    ;Save remainder byte
   713 00002C43 4885C0              <1>     test rax, rax
   714 00002C46 75E3                <1>     jnz .dpfb0
   715                              <1>     return
    13                              <2> %%_ret:
    14 00002C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   716                              <1> 
   717                              <1> freezePC:
   718 00002C49 488D15B7E0FFFF      <1>     lea rdx, memBad1
   719 00002C50 B409                <1>     mov ah, 09h
   720 00002C52 CD41                <1>     int 41h
   721                              <1> .altEP:
   722 00002C54 488D15D5E0FFFF      <1>     lea rdx, memBad3
   723 00002C5B B409                <1>     mov ah, 09h
   724 00002C5D CD41                <1>     int 41h
   725                              <1> .lp:
   726 00002C5F F390                <1>     pause
   727 00002C61 F4                  <1>     hlt
   728 00002C62 EBFB                <1>     jmp short .lp
   729                              <1> 
   730                              <1> getFilenamePtrFromFilespec:
   731                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   732                              <1> ;Input: rsi = Pathspec to search
   733                              <1> ;Output: rsi = Points to the first char of the filename
   734 00002C64 4889F3              <1>     mov rbx, rsi
   735 00002C67 31C0                <1>     xor eax, eax
   736 00002C69 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   737 00002C6C E833FDFFFF          <1>     call strlen     ;Get it's length
   738 00002C71 FFC9                <1>     dec ecx ;Dont include terminating null
   739 00002C73 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   740 00002C75 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   741                              <1> .lp:
   742 00002C78 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   743                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C7B 74(48)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   744 00002C7D 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   745 00002C7F 3C3A                <1>     cmp al, ":" ;X: ?
   746 00002C81 740D                <1>     je .pointFilename
   747 00002C83 3A05A2D3FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   748 00002C89 7405                <1>     je .pointFilename
   749 00002C8B 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   750 00002C8E EBE8                <1>     jmp short .lp
   751                              <1> .pointFilename:
   752 00002C90 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   753                              <1>     return
    13                              <2> %%_ret:
    14 00002C93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   754                              <1> .exitBad:
   755 00002C94 F9                  <1>     stc
   756                              <1> .exit:
   757                              <1>     return
    13                              <2> %%_ret:
    14 00002C95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   758                              <1> 
   759                              <1> 
   760                              <1> copyArgumentToSearchSpec:
   761                              <1> ;Works similarly to the build searchpath but is simpler
   762                              <1> ;Null terminates
   763 00002C96 488D3D41D7FFFF      <1>     lea rdi, searchSpec
   764                              <1> .copyPath:
   765 00002C9D AC                  <1>     lodsb
   766 00002C9E E868FDFFFF          <1>     call isALEndOfCommand
   767 00002CA3 740A                <1>     jz .finishCopy
   768 00002CA5 E83EFDFFFF          <1>     call isALterminator
   769 00002CAA 7403                <1>     jz .finishCopy
   770 00002CAC AA                  <1>     stosb
   771 00002CAD EBEE                <1>     jmp short .copyPath
   772                              <1> .finishCopy:
   773 00002CAF 31C0                <1>     xor eax, eax
   774 00002CB1 AA                  <1>     stosb
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002CB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int44h.asm"
     1                              <1> critErrorHandler:   ;Int 44h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002CB3 53                  <1>     push rbx
    25 00002CB4 51                  <1>     push rcx
    26 00002CB5 52                  <1>     push rdx
    27 00002CB6 57                  <1>     push rdi
    28 00002CB7 56                  <1>     push rsi
    29 00002CB8 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002CB9 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002CBC 488D15F9DAFFFF      <1>     lea rdx, crlf
    33 00002CC3 B409                <1>     mov ah, 09h ;Print String
    34 00002CC5 CD41                <1>     int 41h
    35                              <1> 
    36 00002CC7 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002CCD B90C000000          <1>     mov ecx, 0Ch
    38 00002CD2 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002CD4 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002CD7 480FB7FF            <1>     movzx rdi, di
    41 00002CDB 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002CDE 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002CE2 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002CE5 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002CE8 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002CEF 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002CF3 B409                <1>     mov ah, 09h ;Print String
    48 00002CF5 CD41                <1>     int 41h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002CF7 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002CFE 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002D05 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002D08 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002D0C B409                <1>     mov ah, 09h ;Print String
    55 00002D0E CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002D10 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002D13 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002D19 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002D20 B409                <1>     mov ah, 09h
    62 00002D22 CD41                <1>     int 41h
    63 00002D24 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002D26 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002D29 B402                <1>     mov ah, 02h ;Print char in dl
    66 00002D2B CD41                <1>     int 41h
    67                              <1> .userInput:
    68 00002D2D 488D1588DAFFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002D34 B409                <1>     mov ah, 09h
    70 00002D36 CD41                <1>     int 41h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 00002D38 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002D3F B409                <1>     mov ah, 09h
    77 00002D41 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002D43 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002D46 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002D48 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002D4F B409                <1>     mov ah, 09h
    83 00002D51 CD41                <1>     int 41h
    84 00002D53 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00002D5A B409                <1>     mov ah, 09h
    86 00002D5C CD41                <1>     int 41h
    87                              <1> .userIgnore:
    88 00002D5E F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 00002D61 7416                <1>     jz .userFail
    90 00002D63 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00002D6A B409                <1>     mov ah, 09h
    92 00002D6C CD41                <1>     int 41h
    93 00002D6E 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00002D75 B409                <1>     mov ah, 09h
    95 00002D77 CD41                <1>     int 41h
    96                              <1> .userFail:
    97 00002D79 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00002D7C 7416                <1>     jz .userMsgEnd
    99 00002D7E 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00002D85 B409                <1>     mov ah, 09h
   101 00002D87 CD41                <1>     int 41h
   102 00002D89 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 00002D90 B409                <1>     mov ah, 09h
   104 00002D92 CD41                <1>     int 41h
   105                              <1> .userMsgEnd:
   106 00002D94 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00002D9B B409                <1>     mov ah, 09h
   108 00002D9D CD41                <1>     int 41h
   109                              <1> ;Get user input now 
   110 00002D9F 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 00002DA1 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00002DA8 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00002DAA CD41                <1>     int 41h ;Get char in al
   114 00002DAC 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00002DAE 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 00002DB0 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 00002DB2 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 00002DB3 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00002DB5 FFC1                <1>     inc ecx
   121 00002DB7 81F904000000        <1>     cmp ecx, 4
   122 00002DBD 75F3                <1>     jne .uip1
   123 00002DBF E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 00002DC4 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00002DC6 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00002DC8 7427                <1>     je .cehExit
   129 00002DCA 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00002DCC 740F                <1>     je .viIgnore
   131 00002DCE 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 00002DD0 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 00002DD2 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00002DD5 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00002DDB EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00002DDD F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 00002DE0 0F8447FFFFFF        <1>     jz .userInput
   140 00002DE6 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00002DE8 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00002DEB 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 00002DF1 5E                  <1>     pop rsi
   146 00002DF2 5F                  <1>     pop rdi
   147 00002DF3 5A                  <1>     pop rdx
   148 00002DF4 59                  <1>     pop rcx
   149 00002DF5 5B                  <1>     pop rbx
   150 00002DF6 48CF                <1>     iretq
   151                              <1> .charError:
   152 00002DF8 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 00002DFD 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 00002E04 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 00002E05 88C2                <1>     mov dl, al  ;Move char into dl
   157 00002E07 B402                <1>     mov ah, 02h
   158 00002E09 CD41                <1>     int 41h ;Print char
   159 00002E0B E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 00002E0D E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 00002E12 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 00002E1B 746563742024202020  <1>
   164 00002E24 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 00002E2D 6E6974202420202020  <1>
   165 00002E36 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 00002E3F 202420202020202020  <1>
   166 00002E48 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 00002E51 6F6D6D616E64202420  <1>
   167 00002E5A 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 00002E63 202020202020202020  <1>
   168 00002E6C 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00002E75 737420242020202020  <1>
   169 00002E7E 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00002E87 202020202020202020  <1>
   170 00002E90 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00002E99 656469612024202020  <1>
   171 00002EA2 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00002EAB 7420466F756E642024  <1>
   172 00002EB4 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00002EBD 706572202420202020  <1>
   173 00002EC6 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 00002ECF 6C7420242020202020  <1>
   174 00002ED8 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 00002EE1 742024202020202020  <1>
   175 00002EEA 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 00002EF3 61696C757265202420  <1>
   176                              <1> 
   177 00002EFC 64726976652024      <1> .drive      db "drive $"
   178 00002F03 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 00002F0C 64696E672024        <1>
   179 00002F12 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 00002F1B 74696E672024        <1>
   180 00002F21 41626F727424        <1> .abortmsg   db "Abort$" 
   181 00002F27 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 00002F2E 526574727924        <1> .retrymsg   db "Retry$"
   183 00002F34 4661696C24          <1> .failmsg    db "Fail$"
   184 00002F39 2C2024              <1> .betweenMsg db ", $"
   185 00002F3C 3F2024              <1> .endMsg     db "? $"
   186 00002F3F 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int43h:
   189 00002F43 F605E3D0FFFFFF      <1>     test byte [permaSwitch], -1
   190 00002F4A 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 00002F4C 50                  <1>     push rax
   193 00002F4D 53                  <1>     push rbx
   194 00002F4E 488B05C2D0FFFF      <1>     mov rax, qword [realParent]
   195 00002F55 488B1DB3D0FFFF      <1>     mov rbx, qword [pspPtr]
   196 00002F5C 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 00002F60 5B                  <1>     pop rbx
   198 00002F61 58                  <1>     pop rax
   199                              <1> .exit:
   200 00002F62 F9                  <1>     stc     ;Set CF to kill the task
   201 00002F63 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor
     3 00002F66 5F3A434F4D4D414E44- <1>     db "_:COMMAND.COM",0
     3 00002F6F 2E434F4D00          <1>
     4 00002F74 504154483D0000      <1>     db "PATH=",0,0  ;Terminate with two null bytes
     5 00002F7B 202020202020202020- <1>     db ($ - masterEnv) dup (" ")    ;Pad the environment with spaces
     5 00002F84 202020202020202020- <1>
     5 00002F8D 202020              <1>
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD41                <1>     int 41h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD41                <1>     int 41h
    10 00000013 CD40                <1>     int 40h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 42h, Int 43h and Int 44h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt42h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt42], rax
    20                              <1> 
    21 00000036 488D15(B32C0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt44h], rdx
    23 00000041 B844250000          <1>     mov eax, 2544h
    24 00000046 CD41                <1>     int 41h
    25 00000048 488D15(432F0000)    <1>     lea rdx, int43h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt43h], rdx
    27 00000053 B843250000          <1>     mov eax, 2543h
    28 00000058 CD41                <1>     int 41h
    29 0000005A 488D15(CE0D0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt42h], rdx
    31 00000065 B842250000          <1>     mov eax, 2542h
    32 0000006A CD41                <1>     int 41h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD41                <1>     int 41h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD41                <1>     int 41h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD41                <1>     int 41h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 4Eh has the same address as Int 4Dh. If so, we are master.
    52 000000A2 B84E350000          <1>     mov eax, 354Eh  ;Get int 4Eh address
    53 000000A7 CD41                <1>     int 41h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B84D350000          <1>     mov eax, 354Dh  ;Get int 4Dh address
    56 000000B1 CD41                <1>     int 41h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(662F0000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD41                <1>     int 41h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(662F0000)      <1>     mov byte [masterEnv], al
    71                              <1> ;Set Int 4Eh up
    72 000000DD 488D15(58160000)    <1>     lea rdx, int4Eh
    73 000000E4 B84E250000          <1>     mov eax, 254Eh ;Set this as Int 4Eh
    74 000000E9 CD41                <1>     int 41h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(BC070000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD41                <1>     int 41h
    80 000000F6 E8(461E0000)        <1>     call time
    81 000000FB E8(801D0000)        <1>     call date
    82 00000100 488D15(BC070000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD41                <1>     int 41h
    85 0000010B 488D1D(902F0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(662F0000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD41                <1>     int 41h ;Print init string
   106 00000152 E8(61230000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD41                <1>     int 41h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C300020000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(BB0D0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 64*8    ;64 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

