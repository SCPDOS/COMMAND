     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  stackSize equ 200*8    ;200 QWORD stacks always
     7                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     8                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber             db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector         dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster     db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSectorsPerClusterShift db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset              dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs           db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries   dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset      dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dClusterCount           dd ?  ;Total number of clusters in data area
    27 00000013 ????????            <1>     .dFATlength              dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor        db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag             db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr             dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?  ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?  ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?  ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?  ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?  ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?  ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?  ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?  ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?  ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?  ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> struc psp
   344 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   345 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   346 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   347 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   348 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   349 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   350 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   351                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   352                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   353                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   354                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   355                              <1> ; always used and jftSize.
   356                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   357 0000002A <res 14h>           <1>     .jobFileTbl resb dfltJFTsize ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   360 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   361 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>                 db ?  ;Reserved byte
   364                              <1> ;The below are in the same place as in DOS.
   365                              <1>     .cmdLineArgPtr: ;Symbol for future use
   366 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   367 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   374                              <1> 
   375                              <1> struc clkStruc
   376 00000000 ????                <1>     .dateWord   dw ?
   377 00000002 ??                  <1>     .minutes    db ?
   378 00000003 ??                  <1>     .hours      db ?
   379 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   380 00000005 ??                  <1>     .seconds    db ?
   381                              <1> endstruc
   382                              <1> 
   383                              <1> 
   384                              <1> struc extCtryStruc
   385 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   386 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   387 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   388 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   389 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   390                              <1>                         ;0 = month day year hh:mm:ss
   391                              <1>                         ;1 = day month year hh:mm:ss
   392                              <1>                         ;2 = year month day hh:mm:ss
   393 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   394 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   395 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   396 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   397 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   398 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   399                              <1>                         ;0 = Symbol leads, without space
   400                              <1>                         ;1 = Symbol follows, without space
   401                              <1>                         ;2 = Symbol leads, one space
   402                              <1>                         ;3 = Symbol follows, one space
   403                              <1>                         ;4 = Symbol replace decimal separator
   404 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   405 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   406 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   407 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   408 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   409                              <1> endstruc
   410                              <1> 
   411                              <1> struc countryStruc
   412 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   413                              <1>                         ;0 = month day year hh:mm:ss
   414                              <1>                         ;1 = day month year hh:mm:ss
   415                              <1>                         ;2 = year month day hh:mm:ss
   416 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   417 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   418 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   419 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   420 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   421 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   422                              <1>                         ;0 = Symbol leads, without space
   423                              <1>                         ;1 = Symbol follows, without space
   424                              <1>                         ;2 = Symbol leads, one space
   425                              <1>                         ;3 = Symbol follows, one space
   426                              <1>                         ;4 = Symbol replace decimal separator
   427 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   428 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   429 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   430 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   431 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   432                              <1> endstruc
   433                              <1> 
   434                              <1> ;Critical Error AH bitfield equates
   435                              <1> critRead    equ 0h
   436                              <1> critWrite   equ 1h
   437                              <1> critDOS     equ 0h
   438                              <1> critFAT     equ 2h
   439                              <1> critDir     equ 4h
   440                              <1> critData    equ 6h
   441                              <1> critFailOK  equ 8h
   442                              <1> critRetryOK equ 10h
   443                              <1> critIgnorOK equ 20h
   444                              <1> critCharDev equ 80h
   445                              <1> 
   446                              <1> critIgnore  equ 0
   447                              <1> critRetry   equ 1
   448                              <1> critAbort   equ 2
   449                              <1> critFail    equ 3
   450                              <1> 
   451                              <1> ;MISC ASCII control chars
   452                              <1> NUL equ 00h ;^@         | ASCII Null
   453                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   454                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   455                              <1> BEL equ 07h ;^G         | ASCII Bell
   456                              <1> BSP equ 08h ;^H         | ASCII Backspace
   457                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   458                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   459                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   460                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   461                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   462                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   463                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   464                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   465                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   466                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   467                              <1> SPC equ 20h ;Printable  | ASCII Space
   468                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   469                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   470                              <1> 
   471                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   472                              <1> ;Extended Ascii Codes
   473                              <1> eF1     equ 3Bh ;F1 second byte
   474                              <1> eF2     equ 3Ch ;F2 second byte
   475                              <1> eF3     equ 3Dh ;F3 second byte
   476                              <1> eF4     equ 3Eh ;F4 second byte
   477                              <1> eF5     equ 3Fh ;F5 second byte
   478                              <1> eF6     equ 40h ;F6 second byte
   479                              <1> eF7     equ 41h ;F7 second byte
   480                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   481                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   482                              <1> eIns    equ 52h ;Insert second byte
   483                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   484                              <1> 
   485                              <1> ;Default Configuration for the system
   486                              <1> 
   487                              <1> buffersDefault  equ 30
   488                              <1> filesDefault    equ 20
   489                              <1> fcbsDefault     equ 4
   490                              <1> safeFcbsDeflt   equ 0
   491                              <1> lastDriveDeflt  equ 5   
   492                              <1> 
   493                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   494                              <1> ; then the char has this property.
   495                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   496                              <1> termChar    equ 2   ;Terminator char type
   497                              <1> sepChar     equ 4   ;Separator char type
   498                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   db ?  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   dq ?
     8 00000009 ??????              <1>     .fileext    db 3 dup (?)
     9 0000000C ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize dw ?  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   dw ?  ;Standard date format
    14 00000016 ????                <1>     .fileTime   dw ?  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  db ?  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   db 5 dup (?)  
    28 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   db ?  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   dq ?
    31 00000010 ??????              <1>     .fileext    db 3 dup (?)
    32 00000013 ????                <1>     .curBlock   dw ?  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize dw ?  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   dd ?  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   dw ?  ;Standard date format
    37 0000001D ????                <1>     .fileTime   dw ?  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     db ?  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    db ?  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    db 6 dup (?)  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  db ?  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  dd ?  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   db ?
    52 00000001 ????????????????    <1>     .filename   dq ?
    53 00000009 ??????              <1>     .fileext    db 3 dup (?)
    54 0000000C ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    dq ?
    57 00000019 ??????              <1>     .newExt     db 3 dup (?)
    58 0000001C ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     db ?  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       db 5 dup (?)  
    66 00000006 ??                  <1>     .attribute  db ?  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   db ?
    68 00000008 ????????????????    <1>     .filename   dq ?
    69 00000010 ??????              <1>     .fileext    db 3 dup (?)
    70 00000013 ????????            <1>     .reserved   dd ?  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  db ?  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    dq ?
    73 00000020 ??????              <1>     .newExt     db 3 dup (?)
    74 00000023 ????????            <1>     .reserved2  dd ?  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord db ?  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust dw ?  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    dw ?  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   db ?  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  dw ?  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   dw ?  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   dw ?  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    dw ?  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   dw ?  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   dw ?  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
    10                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI24     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ 1 + fileNameZL  ;1 for the count prefix
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> ;In batch, for pointers, 0 means NULL.
    25                              <1> ;FOR/CALL not priorities for implementation right now.
    26                              <1> struc batBlockHdr
    27 00000000 ??                  <1>     .zero       db ?    ;Always null
    28 00000001 ??                  <1>     .bEchoFlg   db ?    ;Echo flag on entry to batch. 1 if echo on!
    29 00000002 ????????????????    <1>     .pCallBlk   dq ?    ;Pointer to the previous batch block when CALLed
    30 0000000A ????????????????    <1>     .pForBlk    dq ?    ;Pointer to the active FOR block
    31 00000012 ??                  <1>     .bBatFlg    db ?    ;Indicates type of command currently active
    32 00000013 ????????            <1>     .dBatOffLo  dd ?    ;LSEEK Low dword of the batch offset
    33 00000017 ????????            <1>     .dBatOffHi  dd ?    ;LSEEK High dword of the batch offset (0 unless net FS)
    34 0000001B <res 14h>           <1>     .wArgs      dw 10 dup (?) ;Offsets of parameters %0-%9. -1 means no param
    35                              <1>     .cmdLine:   ;0 terminated path (%0) followed by cmd line params.
    36                              <1>     ;We include terminating CR. Add null at the end to mean end of params.
    37                              <1> endstruc
    38                              <1> bbNoParam   equ -1
    39                              <1> bbNull      equ 0
    40                              <1> bbEchoOn    equ 1
    41                              <1> bbEchoOff   equ 0
    42                              <1> bbMaxAlloc  equ batBlockHdr_size + cmdBufferL + 1 ;Add 1 for good measure :)
    43                              <1> batNoEchoChar   equ "@" ;If a line starts with this, no echo!
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    48 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    49 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    50 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    51 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    52 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    53                              <1> endstruc
    54                              <1> 
    55                              <1> struc execProg  ;For use with EXEC-ing a child task
    56 00000000 ????????????????    <1>     .pEnv       dq ?  ;Ptr to environment block (or 0 => copy parent env)
    57 00000008 ????????????????    <1>     .pCmdLine   dq ?  ;Ptr to the command line to be placed at PSP + 80h
    58 00000010 ????????????????    <1>     .pfcb1      dq ?  ;Ptr to the first FCB (parsed argument 1)
    59 00000018 ????????????????    <1>     .pfcb2      dq ?  ;Ptr to the second FCB  (parsed argument 2)
    60                              <1> endstruc
    61                              <1> 
    62                              <1> ;Directory attribute equates
    63                              <1>     dirReadOnly     equ 01h
    64                              <1>     dirHidden       equ 02h
    65                              <1>     dirSystem       equ 04h
    66                              <1>     dirVolumeID     equ 08h
    67                              <1>     dirDirectory    equ 10h
    68                              <1>     dirArchive      equ 20h
    69                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    70                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    71                              <1>     ;If any of the three bits are set, then ALL three bits are set
    72                              <1>     ; in addition to whatever the user passed to search for.
    73                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    74                              <1>     dirIncFiles     equ dirHidden | dirSystem
    12                                  Segment cmd align=1 valign=1
    13                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9BC4A0000          <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 0000000000000000    <1> int2Epsp    dq 0    ;
     8 0000001F 0000000000000000    <1> int2Ersp    dq 0    ;Save the far Int 2E entry stack pointer!
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12                              <1> ;Static strings, not used in command line parsing
    13 0000002B 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    13 00000034 000000000000000000- <1>
    13 0000003D 000000000000000000- <1>
    13 00000046 000000000000000000- <1>
    13 0000004F 0000                <1>
    14 00000051 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    14 0000005A 000000000000000000- <1>
    14 00000063 000000000000000000- <1>
    14 0000006C 000000000000000000- <1>
    14 00000075 000000000000000000- <1>
    14 0000007E 000000000000000000- <1>
    14 00000087 000000000000000000- <1>
    14 00000090 00000000            <1>
    15                              <1> ;=============================================================
    16 00000094 00                  <1> statFlg1    db 0    ;Flags 1 for the command interpreter
    17                              <1> ;=============================================================
    18                              <1> permaShell  equ 1   ;Up if we are a permanent command interpreter
    19                              <1> inCtrlC     equ 2   ;Up if we are processing int 23h
    20                              <1> inSingle    equ 4   ;Up if processing a single command (/C mode)
    21                              <1> inBatch     equ 8   ;Up if processing a batch file
    22                              <1> batchEOF    equ 10h ;Set to indicate we have reached the end of the batch file
    23                              <1> inCritical  equ 20h ;Up if processing a command.
    24                              <1> inLdrDT     equ 40h ;Up if in the Date / Time part of Loader
    25                              <1> inLdr       equ 80h ;Up if in loader
    26 00000095 FF                  <1> failDrv     db -1   ;0 based drive number. Used to identify if drv bad
    27 00000096 01                  <1> echoFlg     db 1    ;Global Echo flag, starts up! 1 means on
    28 00000097 FFFF                <1> errHdls     dw -1   ;Set to the STDIO handles. Non -1 => Handles swapped
    29                              <1> 
    30                              <1> cmdLineStatePtr:
    31 00000099 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    32 0000009A FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    33 0000009C FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    34                              <1> ;These variables are valid for a SINGLE command in a command line
    35                              <1> ;Next two bytes, if set to -1, flags error
    36 0000009E 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    37 0000009F 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    38                              <1> ;                    If 2, we are redirecting output to a file, by appending
    39 000000A0 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    40 000000A2 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    41                              <1> 
    42                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    43 000000A4 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    44 000000A5 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    45 000000A6 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    46                              <1> 
    47 000000A7 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    48 000000A8 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    49 000000A9 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    50                              <1> 
    51 000000AA 00                  <1> switchFnd   db 0    ;Set if a switch char is found
    52                              <1> cmdStateL equ $ - cmdStatePtr
    53                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    54                              <1> 
    55                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    56 000000AB 0000000000000000    <1> bbPtr       dq 0    ;Ptr to the batch block
    57 000000B3 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    57 000000BC 000000000000000000- <1>
    57 000000C5 000000000000000000- <1>
    57 000000CE 000000000000000000- <1>
    57 000000D7 000000000000000000- <1>
    57 000000E0 000000000000000000- <1>
    57 000000E9 000000000000000000- <1>
    57 000000F2 000000000000000000- <1>
    57 000000FB 00000000000000      <1>
    58 00000102 0201200D            <1> batYNstr    db 2,1," ",CR           ;String for buffered Y/N input
    59                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    60                              <1> 
    61                              <1> ;Structs and strings
    62                              <1> 
    63 00000106 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    63 0000010F 00000000000000      <1>
    64 00000116 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    64 0000011F 000000000000000000- <1>
    64 00000128 000000000000000000- <1>
    64 00000131 000000000000000000- <1>
    64 0000013A 00000000000000      <1>
    65                              <1> 
    66 00000141 000000000000000000- <1> launchBlock db execProg_size dup (0)
    66 0000014A 000000000000000000- <1>
    66 00000153 000000000000000000- <1>
    66 0000015C 0000000000          <1>
    67                              <1> 
    68                              <1> ;Use the below figure for the buffer "length" (byte 0) as this will allow 
    69                              <1> ; for us to type 127 characters plus a mandatory terminating 128th <CR>. 
    70                              <1> ; This will always be ok for copying to the PSP as on the PSP we have space for
    71                              <1> ; 127 chars. If we type 128 chars with terminating <CR>, the command name must be 
    72                              <1> ; at least 1 character long. The tail is formed of the remaining chars, so there
    73                              <1> ; will be at least 127 chars left. Thus we always have enough space.
    74                              <1> inLen   equ 128 
    75 00000161 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Original input from user! 128 chars max! 
    75 0000016A 000000000000000000- <1>
    75 00000173 000000000000000000- <1>
    75 0000017C 000000000000000000- <1>
    75 00000185 000000000000000000- <1>
    75 0000018E 000000000000000000- <1>
    75 00000197 000000000000000000- <1>
    75 000001A0 000000000000000000- <1>
    75 000001A9 000000000000000000- <1>
    75 000001B2 000000000000000000- <1>
    75 000001BB 000000000000000000- <1>
    75 000001C4 000000000000000000- <1>
    75 000001CD 000000000000000000- <1>
    75 000001D6 000000000000000000- <1>
    75 000001DF 00000000            <1>
    76 000001E3 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    76 000001EC 000000000000000000- <1>
    76 000001F5 000000000000000000- <1>
    76 000001FE 000000000000000000- <1>
    76 00000207 000000000000000000- <1>
    76 00000210 000000000000000000- <1>
    76 00000219 000000000000000000- <1>
    76 00000222 000000000000000000- <1>
    76 0000022B 000000000000000000- <1>
    76 00000234 000000000000000000- <1>
    76 0000023D 000000000000000000- <1>
    76 00000246 000000000000000000- <1>
    76 0000024F 000000000000000000- <1>
    76 00000258 000000000000000000- <1>
    76 00000261 00000000            <1>
    77 00000265 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    77 0000026E 000000000000000000- <1>
    77 00000277 000000000000000000- <1>
    77 00000280 000000000000000000- <1>
    77 00000289 000000000000000000- <1>
    77 00000292 000000000000000000- <1>
    77 0000029B 000000000000000000- <1>
    77 000002A4 000000000000000000- <1>
    77 000002AD 000000000000000000- <1>
    77 000002B6 000000000000000000- <1>
    77 000002BF 000000000000000000- <1>
    77 000002C8 000000000000000000- <1>
    77 000002D1 000000000000000000- <1>
    77 000002DA 000000000000000000- <1>
    77 000002E3 00000000            <1>
    78 000002E7 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    78 000002F0 000000000000000000- <1>
    78 000002F9 000000000000000000- <1>
    78 00000302 000000000000000000- <1>
    78 0000030B 000000000000000000- <1>
    78 00000314 000000000000000000- <1>
    78 0000031D 000000000000000000- <1>
    78 00000326 000000000000000000- <1>
    78 0000032F 00000000000000      <1>
    79 00000336 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    79 0000033F 0000000000          <1>
    80                              <1> 
    81 00000344 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    81 0000034D 000000000000000000- <1>
    81 00000356 000000000000000000- <1>
    81 0000035F 000000000000000000- <1>
    81 00000368 000000000000000000- <1>
    81 00000371 000000000000000000- <1>
    81 0000037A 000000000000000000- <1>
    81 00000383 000000000000000000- <1>
    81 0000038C 00000000000000      <1>
    82 00000393 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    82 0000039C 000000000000000000- <1>
    82 000003A5 000000000000000000- <1>
    82 000003AE 000000000000000000- <1>
    82 000003B7 000000000000000000- <1>
    82 000003C0 000000000000000000- <1>
    82 000003C9 000000000000000000- <1>
    82 000003D2 000000000000000000- <1>
    82 000003DB 00000000000000      <1>
    83                              <1> 
    84                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    85 000003E2 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    85 000003EB 000000000000000000- <1>
    85 000003F4 000000000000000000- <1>
    85 000003FD 000000000000000000- <1>
    85 00000406 000000000000000000- <1>
    85 0000040F 000000000000000000- <1>
    85 00000418 000000000000000000- <1>
    85 00000421 000000000000000000- <1>
    85 0000042A 00000000000000      <1>
    86 00000431 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    86 0000043A 000000000000000000- <1>
    86 00000443 000000000000000000- <1>
    86 0000044C 000000000000000000- <1>
    86 00000455 000000000000000000- <1>
    86 0000045E 000000000000000000- <1>
    86 00000467 000000000000000000- <1>
    86 00000470 000000000000000000- <1>
    86 00000479 00000000000000      <1>
    87                              <1> 
    88 00000480 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    89 00000488 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    90                              <1> 
    91                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    92                              <1> ; a really long invalid DOS path for PATH to work properly.
    93 00000490 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    93 00000499 000000000000000000- <1>
    93 000004A2 000000000000000000- <1>
    93 000004AB 000000000000000000- <1>
    93 000004B4 000000000000000000- <1>
    93 000004BD 000000000000000000- <1>
    93 000004C6 000000000000000000- <1>
    93 000004CF 000000000000000000- <1>
    93 000004D8 000000000000000000- <1>
    93 000004E1 000000000000000000- <1>
    93 000004EA 000000000000000000- <1>
    93 000004F3 000000000000000000- <1>
    93 000004FC 000000000000000000- <1>
    93 00000505 000000000000000000- <1>
    93 0000050E 000000000000000000- <1>
    93 00000517 000000000000000000- <1>
    93 00000520 000000000000000000- <1>
    93 00000529 000000000000000000- <1>
    93 00000532 000000000000000000- <1>
    93 0000053B 000000000000000000- <1>
    93 00000544 000000000000000000- <1>
    93 0000054D 000000000000000000- <1>
    93 00000556 000000000000000000- <1>
    93 0000055F 000000000000000000- <1>
    93 00000568 000000000000000000- <1>
    93 00000571 000000000000000000- <1>
    93 0000057A 000000000000000000- <1>
    93 00000583 000000000000000000- <1>
    93 0000058C 0000000000000000    <1>
    94                              <1> 
    95                              <1> ;Internal Function vars
    96                              <1> ;Dir Vars
    97 00000594 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    98                              <1> ;                                   Bit[1] set => /P or /p specified
    99                              <1> ;                                   Bit[2] set => A file/path specified
   100 00000595 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
   101 00000596 00000000            <1> dirFileCtr  dd 0    ;Used in /W mode, rollover after 5
   102 0000059A 00                  <1> dirDrv      db 0    ;0 based drive number to use
   103 0000059B 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
   103 000005A4 000000000000000000- <1>
   103 000005AD 000000000000000000- <1>
   103 000005B6 000000000000000000- <1>
   103 000005BF 000000000000000000- <1>
   103 000005C8 000000000000000000- <1>
   103 000005D1 000000000000000000- <1>
   103 000005DA 000000000000000000- <1>
   103 000005E3 000000000000000000- <1>
   103 000005EC 000000000000000000- <1>
   103 000005F5 000000000000000000- <1>
   103 000005FE 000000000000000000- <1>
   103 00000607 000000000000000000- <1>
   103 00000610 000000000000000000- <1>
   103 00000619 00000000            <1>
   104 0000061D 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
   104 00000626 3F3F3F3F3F3F3F      <1>
   105                              <1> dirWideType equ 1
   106                              <1> dirPageType equ 2
   107                              <1> dirFileType equ 4
   108                              <1> ;Volume Vars
   109                              <1> volFcb:
   110                              <1>     istruc exFcb
   111 0000062D FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
   112 0000062E 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
   113 00000634 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
   114 00000635 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
   115 0000063D 3F3F3F              <1>     at exFcb.fileext,   db "???"
   116 00000640 00000000            <1>     at exFcb.curBlock,  dd 0
   117 00000644 00<rep 15h>         <1>     iend 
   118                              <1> 
   119                              <1> ;Time/Date vars
   120 00000659 00                  <1> td1 db 0    ;Minutes/Year
   121 0000065A 00                  <1> td2 db 0    ;Hours/Zero
   122 0000065B 00                  <1> td3 db 0    ;Hundredths/Day
   123 0000065C 00                  <1> td4 db 0    ;Seconds/Month
   124                              <1> 
   125                              <1> ;Rename/Copy/Delete Buffers
   126                              <1> delPath:
   127                              <1> comspecDir:    ;Used to store the directory passed during startup
   128 0000065D 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   128 00000666 000000000000000000- <1>
   128 0000066F 000000000000000000- <1>
   128 00000678 000000000000000000- <1>
   128 00000681 000000000000000000- <1>
   128 0000068A 000000000000000000- <1>
   128 00000693 000000000000000000- <1>
   128 0000069C 000000000000000000- <1>
   128 000006A5 000000000000000000- <1>
   128 000006AE 000000000000000000- <1>
   128 000006B7 000000000000000000- <1>
   128 000006C0 000000000000000000- <1>
   128 000006C9 000000000000000000- <1>
   128 000006D2 000000000000000000- <1>
   128 000006DB 00000000            <1>
   129 000006DF 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   129 000006E8 000000000000000000- <1>
   129 000006F1 000000000000000000- <1>
   129 000006FA 000000000000000000- <1>
   129 00000703 000000000000000000- <1>
   129 0000070C 000000000000000000- <1>
   129 00000715 000000000000000000- <1>
   129 0000071E 000000000000000000- <1>
   129 00000727 000000000000000000- <1>
   129 00000730 000000000000000000- <1>
   129 00000739 000000000000000000- <1>
   129 00000742 000000000000000000- <1>
   129 0000074B 000000000000000000- <1>
   129 00000754 000000000000000000- <1>
   129 0000075D 00000000            <1>
   130 00000761 0000000000000000    <1> srcPtr      dq 0    ;Where to copy pattern to in src path
   131 00000769 0000000000000000    <1> destPtr     dq 0    ;Where to copy pattern to in dest path
   132 00000771 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   132 0000077A 2020                <1>
   133                              <1> ;Copy vars
   134 0000077C 00                  <1> verifyFlg   db 0    ;Set if verify on before copy
   135 0000077D FFFF                <1> sourceHdl   dw -1
   136 0000077F FFFF                <1> destHdl     dw -1
   137 00000781 0000                <1> srcHdlInfo  dw 0    ;Save the hdl device info (bit 7 Set -> Char dev)
   138 00000783 0000000000000000    <1> cpBufPtr    dq 0    ;Ptr to the xfr arena
   139 0000078B 0000                <1> wCpBufSz    dw 0    ;Copy Buffer size, max 4096 bytes
   140 0000078D 00000000            <1> dCpCnt      dd 0    ;Number of files we have copied
   141 00000791 00                  <1> bCpFlg      db 0    ;Copy state flag
   142                              <1> 
   143                              <1> ascSrc      equ 1   ;Set if ascii copy for this source file.
   144                              <1> binSrc      equ 2   ;Set if last encountered src file flag was binary
   145                              <1> ascDes      equ 4   ;Set if add ^Z at end of file. Clear if not!
   146                              <1> wcSrc       equ 8   ;Set if wc's in source pattern. Display source file names.
   147                              <1> oneDest     equ 10h ;Single destination, not dir 
   148                              <1> mod1Cpy     equ 20h ;Set if copying files to new dir with same names
   149                              <1> mod2Cpy     equ 40h ;Set if copying files with new names
   150                              <1> mod3Cpy     equ 80h ;Set if dflt cat ASCII files to a single destination
   151                              <1> 
   152                              <1> ;Environment manipulation vars
   153 00000792 0000                <1> envVarSz        dw 0    ;Env var size
   154 00000794 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    14                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000796 03444952            <1>     db 3, "DIR"
     8 0000079A FE1E                <1>     dw dir - startLbl
     9                              <1> 
    10 0000079C 024344              <1>     db 2, "CD"
    11 0000079F AB23                <1>     dw chdir - startLbl
    12                              <1> 
    13 000007A1 054348444952        <1>     db 5, "CHDIR"
    14 000007A7 AB23                <1>     dw chdir - startLbl
    15                              <1> 
    16 000007A9 024D44              <1>     db 2, "MD"
    17 000007AC 2624                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007AE 054D4B444952        <1>     db 5, "MKDIR"
    20 000007B4 2624                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007B6 025244              <1>     db 2, "RD"
    23 000007B9 6F24                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007BB 05524D444952        <1>     db 5, "RMDIR"
    26 000007C1 6F24                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007C3 0344454C            <1>     db 3, "DEL"
    29 000007C7 2E2C                <1>     dw erase - startLbl
    30                              <1> 
    31 000007C9 054552415345        <1>     db 5, "ERASE"
    32 000007CF 2E2C                <1>     dw erase - startLbl
    33                              <1> 
    34 000007D1 0444415445          <1>     db 4, "DATE"
    35 000007D6 712D                <1>     dw date - startLbl
    36                              <1> 
    37 000007D8 0454494D45          <1>     db 4, "TIME"
    38 000007DD 1F2F                <1>     dw time - startLbl
    39                              <1> 
    40 000007DF 04434F5059          <1>     db 4, "COPY"
    41 000007E4 B924                <1>     dw copy - startLbl
    42                              <1> 
    43 000007E6 0443545459          <1>     db 4, "CTTY"
    44 000007EB 4830                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007ED 03434C53            <1>     db 3, "CLS"
    47 000007F1 EF30                <1>     dw cls - startLbl
    48                              <1> 
    49 000007F3 05425245414B        <1>     db 5, "BREAK"
    50 000007F9 6131                <1>     dw break - startLbl
    51                              <1> 
    52 000007FB 06564552494659      <1>     db 6, "VERIFY"
    53 00000802 E231                <1>     dw verify - startLbl
    54                              <1> 
    55 00000804 0652454E414D45      <1>     db 6, "RENAME"
    56 0000080B 5F32                <1>     dw rename - startLbl
    57                              <1> 
    58 0000080D 0352454E            <1>     db 3, "REN"
    59 00000811 5F32                <1>     dw rename - startLbl
    60                              <1>     
    61 00000813 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 0000081C FE34                <1>     dw truename - startLbl
    63                              <1> 
    64 0000081E 03564552            <1>     db 3, "VER"
    65 00000822 0E36                <1>     dw version - startLbl
    66                              <1> 
    67 00000824 03564F4C            <1>     db 3, "VOL"
    68 00000828 4F35                <1>     dw volume - startLbl
    69                              <1> 
    70 0000082A 034D454D            <1>     db 3, "MEM"
    71 0000082E 5236                <1>     dw memory - startLbl
    72                              <1> 
    73 00000830 0445584954          <1>     db 4, "EXIT"
    74 00000835 5438                <1>     dw exit - startLbl
    75                              <1> 
    76 00000837 0454595045          <1>     db 4, "TYPE"
    77 0000083C A137                <1>     dw type - startLbl
    78                              <1> 
    79 0000083E 0450415448          <1>     db 4, "PATH"
    80 00000843 A13B                <1>     dw pathEdit - startLbl
    81                              <1> 
    82 00000845 03534554            <1>     db 3, "SET"
    83 00000849 823A                <1>     dw set - startLbl
    84                              <1> 
    85 0000084B 0650524F4D5054      <1>     db 6, "PROMPT"
    86 00000852 803C                <1>     dw prompt - startLbl
    87                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    88 00000854 05544F554348        <1>     db 5, "TOUCH"
    89 0000085A 9B34                <1>     dw touch - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91                              <1> 
    92                              <1> ;BATCH ORIENTED COMMANDS HERE
    93 0000085C 044543484F          <1>     db 4, "ECHO"
    94 00000861 F03C                <1>     dw echo - startLbl
    95                              <1> 
    96 00000863 055041555345        <1>     db 5, "PAUSE"
    97 00000869 CC3D                <1>     dw pauza - startLbl
    98                              <1> 
    99 0000086B 0352454D            <1>     db 3, "REM"
   100 0000086F 153E                <1>     dw remark - startLbl
   101 00000871 FF                  <1>     db -1   ;End of table
    15                                  %include "./Data/cmdStr.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000872 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000875 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 0000087A 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000883 696C65206D69737369- <1>
     4 0000088C 6E670D0A24          <1>
     5 00000891 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 0000089A 6469736B2077697468- <1>
     5 000008A3 206261746368206669- <1>
     5 000008AC 6C65                <1>
     6 000008AE 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 000008B7 737320616E79206B65- <1>
     6 000008C0 79207768656E207265- <1>
     6 000008C9 6164790D0A24        <1>
     7 000008CF 0D0A5465726D696E61- <1> batFail db  CR,LF,"Terminate batch job (Y/N)? $"
     7 000008D8 746520626174636820- <1>
     7 000008E1 6A6F622028592F4E29- <1>
     7 000008EA 3F2024              <1>
     8 000008ED 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     8 000008F6 6E64206F722066696C- <1>
     8 000008FF 65206E616D650D0A24  <1>
     9 00000908 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     9 00000911 2066696C65206E616D- <1>
     9 0000091A 65206F7220          <1>
    10 0000091F 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
    10 00000928 666F756E640D0A24    <1>
    11 00000930 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full.
    11 00000939 656E74206469736B20- <1>
    11 00000942 73706163650D0A24    <1>
    12 0000094A 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    12 00000953 7669726F6E6D656E74- <1>
    12 0000095C 2073706163650D0A24  <1>
    13 00000965 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    13 0000096E 74696F6E206572726F- <1>
    13 00000977 720D0A24            <1>
    14 0000097B 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    14 00000984 6F7420626520636F70- <1>
    14 0000098D 696564206F6E746F20- <1>
    14 00000996 697473656C660D0A24  <1>
    15 0000099F 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    15 000009A8 662064657374696E61- <1>
    15 000009B1 74696F6E206C6F7374- <1>
    15 000009BA 206265666F72652063- <1>
    15 000009C3 6F70790D0A24        <1>
    16                              <1> ;Copy end message. First write # files copied then this message 
    17 000009C9 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    17 000009D2 636F706965640D0A24  <1>
    18 000009DB 4E6F7420656E6F7567- <1> cpNoMem db  "Not enough memory for COPY",CR,LF,"$"      ;Never should happen
    18 000009E4 68206D656D6F727920- <1>
    18 000009ED 666F7220434F50590D- <1>
    18 000009F6 0A24                <1>
    19                              <1> ;Dir end1 msg. First write # files in dir then this
    20 000009F8 2046696C6528732920- <1> dirOk   db  " File(s) $"
    20 00000A01 24                  <1>
    21                              <1> ;Dir end2 msg. First write # bytes free then this message
    22 00000A02 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    22 00000A0B 65650D0A24          <1>
    23 00000A10 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    24                              <1> 
    25 00000A19 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    25 00000A22 726976652073706563- <1>
    25 00000A2B 696669636174696F6E- <1>
    25 00000A34 0D0A24              <1>
    26 00000A37 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    26 00000A40 6B6579207768656E20- <1>
    26 00000A49 7265616479202E202E- <1>
    26 00000A52 202E2024            <1>
    27 00000A56 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    27 00000A5F 6172616D657465720D- <1>
    27 00000A68 0A24                <1>
    28                              <1> 
    29 00000A6A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    29 00000A73 576564546875467269- <1>
    29 00000A7C 536174              <1>
    30 00000A7F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    30 00000A88 206461746524        <1>
    31 00000A8E 43757272656E742064- <1> curDate db  "Current date is $"
    31 00000A97 6174652069732024    <1>
    32 00000A9F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    32 00000AA8 657720646174652024  <1>
    33 00000AB1 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    33 00000ABA 293A2024            <1>
    34 00000ABE 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    34 00000AC7 293A2024            <1>
    35 00000ACB 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    35 00000AD4 293A2024            <1>
    36 00000AD8 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    36 00000AE1 2074696D6524        <1>
    37 00000AE7 43757272656E742074- <1> curTime db  "Current time is $"
    37 00000AF0 696D652069732024    <1>
    38 00000AF8 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    38 00000B01 65772074696D653A20- <1>
    38 00000B0A 24                  <1>
    39                              <1> 
    40 00000B0B 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    40 00000B14 7572652028592F4E29- <1>
    40 00000B1D 3F2024              <1>
    41                              <1> 
    42 00000B20 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    42 00000B29 56657273696F6E2024  <1>
    43                              <1> 
    44 00000B32 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    44 00000B3B 6E2064726976652024  <1>
    45 00000B44 2069732024          <1> volOk   db " is $"
    46 00000B49 20686173206E6F206C- <1> volNo   db " has no label$"
    46 00000B52 6162656C24          <1>
    47                              <1> 
    48 00000B57 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    48 00000B60 69726563746F72790D- <1>
    48 00000B69 0A24                <1>
    49 00000B6B 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    49 00000B74 206372656174652064- <1>
    49 00000B7D 69726563746F72790D- <1>
    49 00000B86 0A24                <1>
    50 00000B88 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    50 00000B91 6174682C206E6F7420- <1>
    50 00000B9A 6469726563746F7279- <1>
    50 00000BA3 2C0D0A              <1>
    51 00000BA6 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    51 00000BAF 6F7279206E6F742065- <1>
    51 00000BB8 6D7074790D0A24      <1>
    52 00000BBF 204469726563746F72- <1> dirMain db " Directory of  $"
    52 00000BC8 79206F66202024      <1>
    53 00000BCF 4E6F20506174682024  <1> noPath  db "No Path $"
    54 00000BD8 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    54 00000BE1 6E6965640D0A24      <1>
    55 00000BE8 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    55 00000BF1 72697665206973206E- <1>
    55 00000BFA 6F206C6F6E67657220- <1>
    55 00000C03 76616C696424        <1>
    56                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    57 00000C09 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    57 00000C12 65766963650D0A24    <1>
    58 00000C1A 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    58 00000C23 20666F756E640D0A24  <1>
    59 00000C2C 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    59 00000C35 726F720D0A24        <1>
    60 00000C3B 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    60 00000C44 6F74206265206E6573- <1>
    60 00000C4D 7465640D0A24        <1>
    61 00000C53 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    61 00000C5C 6174652066696C6520- <1>
    61 00000C65 6572726F7220647572- <1>
    61 00000C6E 696E6720706970650D- <1>
    61 00000C77 0A24                <1>
    62 00000C79 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    62 00000C82 2062696E6172792072- <1>
    62 00000C8B 656164732066726F6D- <1>
    62 00000C94 206120646576696365- <1>
    62 00000C9D 0D0A24              <1>
    63 00000CA0 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    64 00000CA6 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    65 00000CAB 425245414B20697320- <1> breakIs db "BREAK is $"
    65 00000CB4 24                  <1>
    66 00000CB5 564552494659206973- <1> verifyIs    db "VERIFY is $"
    66 00000CBE 2024                <1>
    67 00000CC0 4543484F2069732024  <1> echoIs  db "ECHO is $"  
    68 00000CC9 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    68 00000CD2 617468206F72206669- <1>
    68 00000CDB 6C65206E616D650D0A- <1>
    68 00000CE4 24                  <1>
    69 00000CE5 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    69 00000CEE 756D626572206F6620- <1>
    69 00000CF7 706172616D65746572- <1>
    69 00000D00 730D0A24            <1>
    70 00000D04 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    70 00000D0D 74696E6720746F2064- <1>
    70 00000D16 6576696365          <1>
    71 00000D1B 08200800            <1> backSpace   db BSP," ",BSP,NUL
    72 00000D1F 50726F6772616D2074- <1> noMemMsg  db "Program too big to fit in memory",CR,LF,"$"
    72 00000D28 6F6F2062696720746F- <1>
    72 00000D31 2066697420696E206D- <1>
    72 00000D3A 656D6F72790D0A24    <1>
    73                              <1> 
    74                              <1> 
    75 00000D42 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    75 00000D4B 20202020202020546F- <1>
    75 00000D54 74616C207379737465- <1>
    75 00000D5D 6D206D656D6F72793A- <1>
    75 00000D66 2024                <1>
    76 00000D68 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    76 00000D71 20202020202020204D- <1>
    76 00000D7A 656D6F727920757365- <1>
    76 00000D83 6420627920444F533A- <1>
    76 00000D8C 2024                <1>
    77 00000D8E 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    77 00000D97 656D6F727920757365- <1>
    77 00000DA0 64206279206170706C- <1>
    77 00000DA9 69636174696F6E733A- <1>
    77 00000DB2 2024                <1>
    78 00000DB4 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    78 00000DBD 656D6F727920726573- <1>
    78 00000DC6 657276656420627920- <1>
    78 00000DCF 68617264776172653A- <1>
    78 00000DD8 2024                <1>
    79 00000DDA 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    79 00000DE3 202020202020202020- <1>
    79 00000DEC 2020202020204D656D- <1>
    79 00000DF5 6F727920667265653A- <1>
    79 00000DFE 2024                <1>
    80 00000E00 20627974657324      <1> memByte db " bytes$"
    81 00000E07 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    81 00000E10 6F7420417373657274- <1>
    81 00000E19 61696E20444F532045- <1>
    81 00000E22 6E74727920506F696E- <1>
    81 00000E2B 7424                <1>
    82 00000E2D 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    82 00000E36 416C6C6F636174696F- <1>
    82 00000E3F 6E204572726F7224    <1>
    83 00000E47 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    83 00000E50 4572726F7224        <1>
    84 00000E56 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    84 00000E5F 68616C74656424      <1>
    85                              <1> 
    86 00000E66 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    86 00000E6F 206372656174652070- <1>
    86 00000E78 6970650D0A          <1>
    87                              <1> pipeErrMsgL equ $ - pipeErrMsg
    88 00000E7D 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    88 00000E86 6F6E206572726F720D- <1>
    88 00000E8F 0A                  <1>
    89                              <1> redirErrMsgL   equ $ - redirErrMsg
    90                              <1> 
    91 00000E90 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    92 00000E94 2020202024          <1> fourSpc  db "    $"
    93 00000E99 20202024            <1> threeSpc db "   $"
    94 00000E9D 202024              <1> twoSpc   db "  $"
    95                              <1> 
    96 00000EA0 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    96 00000EA9 696679204F4E206F72- <1>
    96 00000EB2 204F46460D0A24      <1>
    97                              <1> 
    98 00000EB9 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    99 00000EC1 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
   100                              <1> ;If anything goes wrong with piping or redirecting just close first two 
   101                              <1> ; handles and reopen this device. Defaults to CON
   102 00000ECA 434F4E000000000000  <1> devName db "CON", 6 dup (0) ;8 chars + space for null terminator
   103 00000ED3 5F3A5C4155544F4558- <1> autoSpec    db "_:\AUTOEXEC.BAT",0
   103 00000EDC 45432E42415400      <1>
   104                              <1> autoSpecL equ $ - autoSpec
   105 00000EE3 504154483D00        <1> pathEVar    db "PATH=",0
   106 00000EE9 434F4D535045433D00  <1> comspecEVar db "COMSPEC=",0
   107 00000EF2 434F4D4D414E442E43- <1> cspec   db "COMMAND.COM", 0
   107 00000EFB 4F4D00              <1>
   108                              <1> 
   109                              <1> ;Int 24h strings
   110                              <1> errMsgPtrTbl:
   111 00000EFE 2400                <1>     dw errorMsgTbl.0 - errMsgPtrTbl
   112 00000F00 3400                <1>     dw errorMsgTbl.1 - errMsgPtrTbl
   113 00000F02 4200                <1>     dw errorMsgTbl.2 - errMsgPtrTbl
   114 00000F04 4D00                <1>     dw errorMsgTbl.3 - errMsgPtrTbl
   115 00000F06 5E00                <1>     dw errorMsgTbl.4 - errMsgPtrTbl
   116 00000F08 6400                <1>     dw errorMsgTbl.5 - errMsgPtrTbl
   117 00000F0A 7100                <1>     dw errorMsgTbl.6 - errMsgPtrTbl
   118 00000F0C 7700                <1>     dw errorMsgTbl.7 - errMsgPtrTbl
   119 00000F0E 8600                <1>     dw errorMsgTbl.8 - errMsgPtrTbl
   120 00000F10 9800                <1>     dw errorMsgTbl.9 - errMsgPtrTbl
   121 00000F12 A600                <1>     dw errorMsgTbl.A - errMsgPtrTbl
   122 00000F14 B300                <1>     dw errorMsgTbl.B - errMsgPtrTbl
   123 00000F16 BF00                <1>     dw errorMsgTbl.C - errMsgPtrTbl
   124 00000F18 D000                <1>     dw errorMsgTbl.D - errMsgPtrTbl
   125 00000F1A E300                <1>     dw errorMsgTbl.E - errMsgPtrTbl
   126 00000F1C F300                <1>     dw errorMsgTbl.F - errMsgPtrTbl
   127 00000F1E 1401                <1>     dw errorMsgTbl.10 - errMsgPtrTbl
   128 00000F20 2501                <1>     dw errorMsgTbl.11 - errMsgPtrTbl
   129                              <1> errorMsgTbl:
   130 00000F22 57726974652050726F- <1> .0: db "Write Proctect $"       ;Driver Error 0 / DOS Error 013h
   130 00000F2B 63746563742024      <1>
   131 00000F32 556E6B6E6F776E2055- <1> .1: db "Unknown Unit $"         ;Driver Error 1 / DOS Error 014h
   131 00000F3B 6E69742024          <1>
   132 00000F40 4E6F74205265616479- <1> .2: db "Not Ready $"            ;Driver Error 2 / DOS Error 015h
   132 00000F49 2024                <1>
   133 00000F4B 556E6B6E6F776E2043- <1> .3: db "Unknown Command $"      ;Driver Error 3 / DOS Error 016h
   133 00000F54 6F6D6D616E642024    <1>
   134 00000F5C 446174612024        <1> .4: db "Data $"                 ;Driver Error 4 / DOS Error 017h
   135 00000F62 426164205265717565- <1> .5: db "Bad Request $"          ;Driver Error 5 / DOS Error 018h
   135 00000F6B 73742024            <1>
   136 00000F6F 5365656B2024        <1> .6: db "Seek $"                 ;Driver Error 6 / DOS Error 019h
   137 00000F75 556E6B6E6F776E204D- <1> .7: db "Unknown Media $"        ;Driver Error 7 / DOS Error 01Ah
   137 00000F7E 656469612024        <1>
   138 00000F84 536563746F72204E6F- <1> .8: db "Sector Not Found $"     ;Driver Error 8 / DOS Error 01Bh
   138 00000F8D 7420466F756E642024  <1>
   139 00000F96 4F7574204F66205061- <1> .9: db "Out Of Paper $"         ;Driver Error 9 / DOS Error 01Ch
   139 00000F9F 7065722024          <1>
   140 00000FA4 577269746520466175- <1> .A: db "Write Fault $"          ;Driver Error A / DOS Error 01Dh
   140 00000FAD 6C742024            <1>
   141 00000FB1 52656164204661756C- <1> .B: db "Read Fault $"           ;Driver Error B / DOS Error 01Eh
   141 00000FBA 742024              <1>
   142 00000FBD 47656E6572616C2046- <1> .C: db "General Failure $"      ;Driver Error C / DOS Error 01Fh
   142 00000FC6 61696C7572652024    <1>
   143 00000FCE 53686172696E672076- <1> .D: db "Sharing violation $"    ;SHARE Error / DOS Error 020h
   143 00000FD7 696F6C6174696F6E20- <1>
   143 00000FE0 24                  <1>
   144 00000FE1 4C6F636B2076696F6C- <1> .E: db "Lock violation $"       ;SHARE Error / DOS Error 021h
   144 00000FEA 6174696F6E2024      <1>
   145 00000FF1 506C6561736520496E- <1> .F: db "Please Insert disk "    ;Driver Error F / DOS Error 022h
   145 00000FFA 73657274206469736B- <1>
   145 00001003 20                  <1>
   146 00001004 202020202020202020- <1> .FVol:  db 11 dup (" ")         ; Volume name for disk. Setup before print
   146 0000100D 2020                <1>
   147 0000100F 0D0A24              <1>         db CR,LF,"$"
   148                              <1> ;Next two strings dont print any more information, such as reading/writing etc
   149 00001012 46434220756E617661- <1> .10:    db "FCB unavailable $"      ;FCB Error / DOS Error 023h - RESERVED
   149 0000101B 696C61626C652024    <1>
   150 00001023 53686172696E672062- <1> .11:    db "Sharing buffer error $" ;SHARE Error / Error 024h
   150 0000102C 756666657220657272- <1>
   150 00001035 6F722024            <1>
   151                              <1> 
   152                              <1> ;Anything above this is a generic network error.
   153 00001039 47656E6572616C204E- <1> genNetErr   db "General Network Error $"    ;All NET errors codes [32h, 58h]
   153 00001042 6574776F726B204572- <1>
   153 0000104B 726F722024          <1>
   154                              <1> 
   155                              <1> ;Rest of the Int 24h error messages go here
   156 00001050 64726976652024      <1> drvMsg      db "drive $"
   157 00001057 6572726F7220726561- <1> readMsg     db "error reading $"
   157 00001060 64696E672024        <1>
   158 00001066 6572726F7220777269- <1> writeMsg    db "error writing $"
   158 0000106F 74696E672024        <1>
   159 00001075 41626F727424        <1> abortMsg    db "Abort$" 
   160 0000107B 49676E6F726524      <1> ignoreMsg   db "Ignore$"
   161 00001082 526574727924        <1> retryMsg    db "Retry$"
   162 00001088 4661696C24          <1> failMsg     db "Fail$"
   163 0000108D 2C2024              <1> betweenMsg  db ", $"
   164 00001090 3F2024              <1> endMsg      db "? $"
   165 00001093 49524146            <1> i24Resp     db "IRAF"   ;Abort Retry Ignore Fail
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1> ;Jumped to with edx=0 means no autoexec. edx=-1 means autoexec.
     3                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     4                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     5                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     6 00001097 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     7 0000109A 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     8 0000109E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     9 000010A1 B44A                <1>     mov ah, 4Ah ;Realloc
    10 000010A3 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    11 000010A6 CD21                <1>     int 21h
    12 000010A8 85D2                <1>     test edx, edx   ;If zero, no autoexec or single command
    13 000010AA 7432                <1>     jz commandMain
    14 000010AC E8EA090000          <1>     call getSetMainState    ;Ensure the buffers are ready to be used 
    15                              <1> ;If inSingle is set, cmd already in buffer and ready for processing  
    16 000010B1 F605DCEFFFFF04      <1>     test byte [statFlg1], inSingle
    17 000010B8 0F8584000000        <1>     jnz commandMain.goSingle 
    18                              <1>     ;Only enter here if we are autoexec :)
    19 000010BE C6059DF0FFFF0F      <1>     mov byte [inBuffer + 1], autoSpecL - 1  ;Drop one from the count for CR
    20 000010C5 488D3507FEFFFF      <1>     lea rsi, autoSpec
    21 000010CC 488D3D90F0FFFF      <1>     lea rdi, inBuffer + 2
    22 000010D3 E8A5310000          <1>     call strcpy
    23 000010D8 C647FF0D            <1>     mov byte [rdi - 1], CR  ;Store a CR over the terminating null
    24 000010DC EB56                <1>     jmp short commandMain.batProceed
    25                              <1> commandMain:
    26 000010DE 488B2520EFFFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    27 000010E5 E8B1090000          <1>     call getSetMainState
    28                              <1> .inputMain:         ;Only reset once per line!
    29 000010EA F605A3EFFFFF04      <1>     test byte [statFlg1], inSingle   ;If we here in single mode, time to exit
    30 000010F1 0F855D270000        <1>     jnz exit
    31 000010F7 E86D2F0000          <1>     call printCRLF  ;Command complete, indicate with new line!
    32 000010FC B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    33 00001101 CD21                <1>     int 21h
    34 00001103 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    35 00001108 BA01000000          <1>     mov edx, 1      ;Start new print job
    36 0000110D CD21                <1>     int 21h
    37                              <1> .inputGetAgain:
    38 0000110F E8D9310000          <1>     call clearCommandLineState      ;Cleans all handles 5->MAX
    39                              <1> .inputGetCmdlineAgain:
    40 00001114 E8AD2E0000          <1>     call printPrompt    ;Ok we are gonna get more input, output prompt
    41 00001119 F60574EFFFFF08      <1>     test byte [statFlg1], inBatch   ;If batch on, get the next line to execute
    42 00001120 0F85D10B0000        <1>     jnz batNextLine
    43 00001126 488D1534F0FFFF      <1>     lea rdx, inBuffer
    44 0000112D B8000A0000          <1>     mov eax, 0A00h      ;Do Buffered input
    45 00001132 CD21                <1>     int 21h
    46                              <1> .batProceed:            ;Jump here to copy the batch input line 
    47 00001134 E8262F0000          <1>     call printCRLFecho  ;Note we have accepted input
    48                              <1> ;First check we had something typed in of length greater than 0
    49 00001139 803D22F0FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    50 00001140 74D2                <1>     je .inputGetCmdlineAgain  ;If not, keep looping input
    51                              <1>     ;Copy over the input text
    52                              <1> .goSingle:
    53 00001142 488D3518F0FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    54 00001149 488D3D93F0FFFF      <1>     lea rdi, cpyBuffer
    55 00001150 B982000000          <1>     mov ecx, cmdBufferL     ;Copy the buffer over to manipulate
    56 00001155 F3A4                <1>     rep movsb
    57 00001157 E870000000          <1>     call makeCmdBuffer      ;Preprocess the redir, make cmd buffer
    58                              <1>     ;Now check we aren't starting with a pipe or <CR> and treat differently
    59 0000115C 488D3504F1FFFF      <1>     lea rsi, cmdBuffer + 2
    60 00001163 E853310000          <1>     call skipDelimiters
    61 00001168 803E0D              <1>     cmp byte [rsi], CR      ;If the first non-delim is a CR, reject input!
    62 0000116B 74A2                <1>     je .inputGetAgain       ;Wipe redir flags and reobtain input!
    63 0000116D 803E7C              <1>     cmp byte [rsi], "|"     ;If the first non-delim is a pipe, syntax error!
    64 00001170 0F84DA030000        <1>     je hardSynErr
    65                              <1> .pipeLoop:
    66 00001176 4C8B0592EEFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    67 0000117D E8A4000000          <1>     call makeCmdString      ;Makes the CR delimited command in psp
    68                              <1>     ;ZF here indicates if we are at the end of the command or nots
    69 00001182 E861070000          <1>     call setupRedirandPipes ;Setup/advance pipes and redir as appropriate
    70 00001187 E8F3000000          <1>     call analyseCmdline     ;Setup cmdName and fcb for cmdBuffer portion
    71 0000118C E84B020000          <1>     call doCommandLine      ;This preps and executes the command portion.
    72                              <1> .okRet:                     ;Normal return point for processing
    73 00001191 E857050000          <1>     call advanceRedir       ;Now advance and end redir if needed
    74 00001196 F605FCEEFFFFFF      <1>     test byte [pipeFlag], -1    ;If no pipes, reset state, accept new input
    75 0000119D 0F8447FFFFFF        <1>     jz .inputMain
    76                              <1>     ;Now we pull the commandline forwards. 
    77 000011A3 E87E000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    78 000011A8 488D3DB8F0FFFF      <1>     lea rdi, cmdBuffer + 2
    79 000011AF 4889F1              <1>     mov rcx, rsi
    80 000011B2 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    81 000011B5 280DABF0FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And erase from the count
    82 000011BB 8A0DA5F0FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    83 000011C1 FFC1                <1>     inc ecx     ;One more for the terminating char
    84 000011C3 F3A4                <1>     rep movsb   ;Move the chars over    
    85 000011C5 E812310000          <1>     call clearCommandState  ;Else, clear the command state and start again
    86 000011CA EBAA                <1>     jmp short .pipeLoop     ;Doesn't close handles above 5 until end of pipe!
    87                              <1> 
    88                              <1> makeCmdBuffer:
    89                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    90                              <1> ; copy buffer. Called only once in a cycle.
    91                              <1> ;Throughout: CL has char count, CH has quote count
    92 000011CC 488D3512F0FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
    93 000011D3 31C9                <1>     xor ecx, ecx
    94 000011D5 4889F7              <1>     mov rdi, rsi    ;Save the pointer
    95                              <1> .countQuotes:
    96 000011D8 AC                  <1>     lodsb
    97 000011D9 3C22                <1>     cmp al, '"'
    98 000011DB 7507                <1>     jne .notQuoteToCount
    99 000011DD FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   100 000011DF E9F4FFFFFF          <1>     jmp .countQuotes
   101                              <1> .notQuoteToCount:
   102 000011E4 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   103 000011E6 75F0                <1>     jne .countQuotes
   104 000011E8 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   105 000011EB 488D3D75F0FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   106                              <1> .getChar:
   107 000011F2 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   108 000011F3 3C22                <1>     cmp al, '"'     ;Is char a quote?
   109 000011F5 750E                <1>     jne .notQuote
   110 000011F7 FECD                <1>     dec ch          ;We have a quote, now decrement
   111 000011F9 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   112                              <1> .searchForClosingQuote:
   113                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   114 000011FB AA                  <1>     stosb   ;Store char and inc rdi
   115 000011FC FEC1                <1>     inc cl
   116 000011FE AC                  <1>     lodsb   ;Get next char
   117 000011FF 3C22                <1>     cmp al, '"'
   118 00001201 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   119 00001203 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   120                              <1> .notQuote:
   121 00001205 E87D060000          <1>     call peelRedir      ;Intervene redir if needed
   122 0000120A 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   123 0000120C 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   124 0000120E EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   125                              <1> .pipeHandle:
   126                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   127 00001210 0F843A030000        <1>     jz hardSynErr ;We had double pipe symbol, syntax error and reset!
   128                              <1> .notRedir:
   129 00001216 AA                  <1>     stosb       ;Store char and advance rdi
   130 00001217 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   131 00001219 7404                <1>     je .exit
   132 0000121B FEC1                <1>     inc cl      ;Increment char count
   133 0000121D EBD3                <1>     jmp short .getChar    ;If not, get next char
   134                              <1> .exit:
   135 0000121F 880D41F0FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   136                              <1>     return
    13                              <2> %%_ret:
    14 00001225 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   137                              <1> 
   138                              <1> makeCmdString:
   139                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   140                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   141                              <1> ; Copies into the psp.
   142                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   143 00001226 488D353AF0FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   144 0000122D 31C9                <1>     xor ecx, ecx
   145 0000122F 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   146                              <1> .countQuotes:
   147 00001232 AC                  <1>     lodsb
   148 00001233 3C22                <1>     cmp al, '"'
   149 00001235 7507                <1>     jne .notQuoteToCount
   150 00001237 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   151 00001239 E9F4FFFFFF          <1>     jmp .countQuotes
   152                              <1> .notQuoteToCount:
   153 0000123E 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   154 00001240 75F0                <1>     jne .countQuotes
   155 00001242 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   156 00001245 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   157                              <1> .getChar:
   158 0000124C AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   159 0000124D 3C22                <1>     cmp al, '"'     ;Is char a quote?
   160 0000124F 750E                <1>     jne .notQuote
   161 00001251 FECD                <1>     dec ch          ;We have a quote, now decrement
   162 00001253 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   163                              <1> .searchForClosingQuote:
   164                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   165 00001255 AA                  <1>     stosb   ;Store char and inc rdi
   166 00001256 FEC1                <1>     inc cl
   167 00001258 AC                  <1>     lodsb   ;Get next char
   168 00001259 3C22                <1>     cmp al, '"'
   169 0000125B 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   170 0000125D FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   171                              <1> .notQuote:
   172 0000125F 3C7C                <1>     cmp al, "|"
   173 00001261 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   174 00001263 B00D                <1>     mov al, CR          ;Store the pipe char
   175 00001265 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   176                              <1> .notPipe:
   177 00001268 AA                  <1>     stosb       ;Store char and advance rdi
   178 00001269 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   179 0000126B 7404                <1>     je .exit
   180 0000126D FEC1                <1>     inc cl      ;Increment char count
   181 0000126F EBDB                <1>     jmp short .getChar    ;If not, get next char
   182                              <1> .exit:
   183 00001271 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   184 00001274 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   185 0000127B 803E0D              <1>     cmp byte [rsi], CR  
   186                              <1>     return
    13                              <2> %%_ret:
    14 0000127E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> analyseCmdline:
   189                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   190                              <1> ; processes the command name into the FCB.  
   191 0000127F C605B0F0FFFF00      <1>     mov byte [cmdName], 0   ;Init this field to indicate no cmd
   192                              <1> ;Start by searching for any switch chars! Set byte if switch chars fnd!!
   193 00001286 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   194 0000128D 4889FE              <1>     mov rsi, rdi                    ;Prep rsi here too
   195 00001290 0FB64FFF            <1>     movzx ecx, byte [rdi - 1]       ;Get the count byte
   196 00001294 8A0590EDFFFF        <1>     mov al, byte [switchChar]
   197 0000129A F2AE                <1>     repne scasb                     ;Scan for the switch char
   198 0000129C 7506                <1>     jne .noSwitchFnd
   199 0000129E F61506EEFFFF        <1>     not byte [switchFnd]            ;Set switch char fnd on!
   200                              <1> .noSwitchFnd:
   201 000012A4 E812300000          <1>     call skipDelimiters     ;Skip any preceeding separators from rsi
   202 000012A9 803E0D              <1>     cmp byte [rsi], CR      ;We have no command? Return!
   203                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000012AC 74(7E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 000012AE 4889F3              <1>     mov rbx, rsi            ;Save the start of the text in rbx
   205                              <1> .plp:
   206 000012B1 488D3D4EEEFFFF      <1>     lea rdi, cmdFcb         ;Loop on the commandFCB
   207 000012B8 B801290000          <1>     mov eax, 2901h
   208 000012BD CD21                <1>     int 21h
   209 000012BF 3CFF                <1>     cmp al, -1  ;If DOS returns -1, we have a bad drive specified, fail!
   210 000012C1 0F8408010000        <1>     je .exitBadDrv
   211                              <1> .trailingDotLp:
   212                              <1> ;Reverse along trailing dots!
   213 000012C7 807EFF2E            <1>     cmp byte [rsi - 1], "." ;Is this a dot?
   214 000012CB 7505                <1>     jne .noTrailingDots
   215 000012CD 48FFCE              <1>     dec rsi
   216 000012D0 EBF5                <1>     jmp short .trailingDotLp
   217                              <1> .noTrailingDots:
   218 000012D2 8A0551EDFFFF        <1>     mov al, byte [pathSep]  
   219 000012D8 3806                <1>     cmp byte [rsi], al      ;Is the terminator a pathsep?
   220 000012DA 7525                <1>     jne .notPs
   221 000012DC 48FFC6              <1>     inc rsi ;Go to the char after the pathsep
   222 000012DF AC                  <1>     lodsb   ;Get this char
   223 000012E0 48FFCE              <1>     dec rsi ;And move rsi back to where we were
   224 000012E3 3C20                <1>     cmp al, 20h     ;Is this char below 32?
   225 000012E5 7217                <1>     jb .delimfnd    ;Also a delimiter
   226 000012E7 3C5C                <1>     cmp al, "\"     ;If this is a second pathsep, we are done
   227 000012E9 7413                <1>     je .delimfnd
   228 000012EB 3C2F                <1>     cmp al, "/"     ;Or an alt pathsep?
   229 000012ED 740F                <1>     je .delimfnd
   230 000012EF 3C2E                <1>     cmp al, byte "."
   231 000012F1 740B                <1>     je .delimfnd
   232 000012F3 3C22                <1>     cmp al, byte '"'
   233 000012F5 7407                <1>     je .delimfnd
   234 000012F7 E8CD2F0000          <1>     call isALdelimiter  ;Is this a delim char?
   235 000012FC 75B3                <1>     jne .plp            ;If not, we loop again
   236                              <1> .delimfnd:
   237 000012FE 48FFCE              <1>     dec rsi             ;Point rsi to end of the command
   238                              <1> .notPs:
   239                              <1> ;Now we have reached the end of the command, rsi points to the first char
   240                              <1> ; after the command, whether a delimiter or not.
   241 00001301 4889F1              <1>     mov rcx, rsi
   242 00001304 4829D9              <1>     sub rcx, rbx    ;Get the number of chars in the command ONLY
   243 00001307 0F84BA000000        <1>     jz .exitBad     ;If this is zero, exit fail!
   244 0000130D 4887DE              <1>     xchg rbx, rsi   ;Swap the start and end of the commands!!!
   245 00001310 488D3DD0EFFFFF      <1>     lea rdi, cmdPathSpec
   246 00001317 F3A4                <1>     rep movsb
   247 00001319 30C0                <1>     xor al, al
   248 0000131B AA                  <1>     stosb   ;Store a terminating null
   249 0000131C 4887DE              <1>     xchg rbx, rsi
   250                              <1> ;Now we build FCBs for the arguments!
   251 0000131F 498D9881000000      <1>     lea rbx, qword [r8 + cmdLine]   ;Now we measure from the start of the buf!
   252 00001326 E893000000          <1>     call .skipAndCheckCR
   253 0000132B 745B                <1>     je .setupCmdVars
   254 0000132D C60570EDFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   255 00001334 4889F0              <1>     mov rax, rsi
   256 00001337 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   257 0000133A 880565EDFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   258 00001340 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   259 00001344 B801290000          <1>     mov eax, 2901h
   260 00001349 CD21                <1>     int 21h
   261 0000134B 880555EDFFFF        <1>     mov byte [arg1FCBret], al
   262                              <1> .skipArg:
   263 00001351 AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   264 00001352 3C0D                <1>     cmp al, CR
   265 00001354 7432                <1>     je .setupCmdVars
   266 00001356 E86E2F0000          <1>     call isALdelimiter
   267 0000135B 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   268 0000135D E85C000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   269 00001362 7424                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   270 00001364 C6053CEDFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   271 0000136B 4889F0              <1>     mov rax, rsi            
   272 0000136E 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   273 00001371 880531EDFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   274 00001377 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 0000137B B801290000          <1>     mov eax, 2901h
   276 00001380 CD21                <1>     int 21h
   277 00001382 880521EDFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .setupCmdVars:
   279                              <1> ;Before returning, we copy the command name to cmdName 
   280 00001388 488D3D58EFFFFF      <1>     lea rdi, cmdPathSpec
   281 0000138F E8DE2F0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   282 00001394 E8FD2E0000          <1>     call strlen ;Get the length of the null terminated final path componant
   283 00001399 81F90D000000        <1>     cmp ecx, fileNameZL ;11 chars + ext sep + null terminator
   284 0000139F 7726                <1>     ja .exitBad     ;Return error
   285 000013A1 4889FE              <1>     mov rsi, rdi
   286 000013A4 488D3D8BEFFFFF      <1>     lea rdi, cmdName
   287 000013AB FFC9                <1>     dec ecx ;Minus the terminating null
   288 000013AD 880F                <1>     mov byte [rdi], cl ;Store the length here
   289 000013AF 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   290                              <1> .cpCmdName:
   291 000013B2 AC                  <1>     lodsb
   292 000013B3 E8E82E0000          <1>     call ucChar ;Uppercase the char
   293 000013B8 AA                  <1>     stosb
   294 000013B9 FFC9                <1>     dec ecx
   295 000013BB 75F5                <1>     jnz .cpCmdName
   296                              <1>     return
    13                              <2> %%_ret:
    14 000013BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> .skipAndCheckCR:
   298                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   299 000013BE E8F82E0000          <1>     call skipDelimiters ;Go to the next char in the input line
   300 000013C3 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   301                              <1>     return
    13                              <2> %%_ret:
    14 000013C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   302                              <1> .exitBad:
   303 000013C7 C60568EFFFFFFF      <1>     mov byte [cmdName], -1  ;Store -1 to indicate error
   304                              <1>     return
    13                              <2> %%_ret:
    14 000013CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .exitBadDrv:
   306 000013CF C60560EFFFFFFE      <1>     mov byte [cmdName], -2  ;Indicate a bad drive specified
   307 000013D6 E8E10A0000          <1>     call badDriveError
   308                              <1>     return
    13                              <2> %%_ret:
    14 000013DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   309                              <1> 
   310                              <1> doCommandLine:
   311                              <1>     ;The following check accounts for the end of a piped command
   312 000013DC 803D53EFFFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, syntax error!
   313 000013E3 0F8467010000        <1>     je hardSynErr   ;This now should never be hit, earmark for removal!
   314 000013E9 803D46EFFFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   315 000013F0 0F84FF0A0000        <1>     je badCmdError
   316 000013F6 803D39EFFFFFFE      <1>     cmp byte [cmdName], -2  ;Bad drive specified, nop
   317                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000013FD 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 000013FF 488D35E1EEFFFF      <1>     lea rsi, cmdPathSpec
   319 00001406 0FB71DDAEEFFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   320 0000140D 80FF3A              <1>     cmp bh, ":"
   321 00001410 7520                <1>     jne .noDriveSpecified
   322 00001412 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   323 00001414 E8872E0000          <1>     call ucChar     ;Uppercase al
   324 00001419 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   325                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   326 0000141B 803D14EFFFFF02      <1>     cmp byte [cmdName], 2
   327 00001422 750E                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   328 00001424 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   329 00001426 E8412E0000          <1>     call setDrive
   330                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000142B 74(DB)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   331 0000142D E98A0A0000          <1>     jmp badDriveError
   332                              <1> .noDriveSpecified:
   333                              <1> ;rbx is writable UP TO THE FIRST PIPE OR CR (non-inclusive)
   334 00001432 488D1D2CEEFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer
   335 00001439 488D35F6EEFFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   336 00001440 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   337 00001445 BAFFFF0000          <1>     mov edx, 0FFFFh
   338 0000144A B5FF                <1>     mov ch, -1
   339 0000144C CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   340 0000144E B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   341 00001453 BAFFFF0000          <1>     mov edx, 0FFFFh
   342 00001458 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   343 0000145A CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   344                              <1>             ;        al = 0  if the command should be executed as usual
   345 0000145C 84C0                <1>     test al, al
   346 0000145E 7444                <1>     jz .executeInternal
   347                              <1>     ;Here we execute externally and return to the prompt
   348                              <1>     ; as if it was an internal execution. rbx is not to be relied on here!
   349 00001460 498D9880000000      <1>     lea rbx, qword [r8 + cmdTail]
   350 00001467 488D35C8EEFFFF      <1>     lea rsi, cmdName        
   351 0000146E B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   352 00001473 BAFFFF0000          <1>     mov edx, 0FFFFh
   353 00001478 B5FF                <1>     mov ch, -1
   354 0000147A CD2F                <1>     int 2Fh
   355 0000147C 803DB3EEFFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   356                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001483 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001485 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   357                              <1>     ;We need to copy over to cmdPathSpec in the event this command
   358                              <1>     ; is an external command that is in the CD or in the PATH.
   359                              <1>     ;Should not be used for this purpose but it is here...
   360 00001486 E8C6050000          <1>     call pullCommandline    ;Pull the tail down with the original name
   361 0000148B 488D35A4EEFFFF      <1>     lea rsi, cmdName        ;Now make the new cmd the new cmdspec!
   362 00001492 AC                  <1>     lodsb                   ;Get the name length
   363 00001493 0FB6C8              <1>     movzx ecx, al
   364 00001496 488D3D4AEEFFFF      <1>     lea rdi, cmdPathSpec    ;Overwrite the original specified command
   365 0000149D F3A4                <1>     rep movsb   
   366 0000149F 31C0                <1>     xor eax, eax
   367 000014A1 AA                  <1>     stosb   ;Store null terminator
   368 000014A2 EB1F                <1>     jmp short .executeInternal2 ;Skip the equivalent for non-ae cases
   369                              <1> .executeInternal:
   370 000014A4 E8A8050000          <1>     call pullCommandline    ;Now pull the tail down
   371 000014A9 488D3D37EEFFFF      <1>     lea rdi, cmdPathSpec
   372 000014B0 E8E12D0000          <1>     call strlen ;Get the length of the input command
   373 000014B5 FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   374 000014B7 380D79EEFFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   375 000014BD 0F85B0230000        <1>     jne launchChild     ;If not, a path was specified, exit!
   376                              <1> .executeInternal2:
   377                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   378 000014C3 488D1DCCF2FFFF      <1>     lea rbx, functionTable
   379                              <1> .nextEntry:
   380 000014CA 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   381 000014CD 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   382 000014D0 0F849D230000        <1>     je launchChild      ;If so, check externally now
   383 000014D6 380D5AEEFFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   384 000014DC 7531                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   385                              <1>     ;Here they have the same length so lets see if the name is the same
   386 000014DE 56                  <1>     push rsi
   387                              <1>     ;ecx has the length to compare
   388 000014DF 51                  <1>     push rcx
   389 000014E0 488D7301            <1>     lea rsi, qword [rbx + 1]
   390 000014E4 488D3D4CEEFFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   391 000014EB F3A6                <1>     rep cmpsb   ;Check the strings are equal
   392 000014ED 59                  <1>     pop rcx
   393 000014EE 5E                  <1>     pop rsi
   394 000014EF 751E                <1>     jne .gotoNextEntry
   395                              <1>     ;Here it was found both strings are equal
   396 000014F1 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   397 000014F6 480FB71F            <1>     movzx rbx, word [rdi]
   398 000014FA 488D3DFFEAFFFF      <1>     lea rdi, startLbl
   399 00001501 4801FB              <1>     add rbx, rdi
   400 00001504 C60502EBFFFF00      <1>     mov byte [returnCode], 0 ;Reset the retcode before executing function!
   401 0000150B FFD3                <1>     call rbx        ;Call the internal function!
   402 0000150D EB0C                <1>     jmp short appRet    ;Now once we are done, goto appRet!
   403                              <1> .gotoNextEntry:
   404 0000150F 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   405 00001516 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   406 00001519 EBAF                <1>     jmp short .nextEntry
   407                              <1> 
   408                              <1> appRet:  ;Return point from a task, jumped to from internal functions
   409                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled.
   410                              <1> ;Can depend on RSP here because I fixed DOS.
   411 0000151B 488B25E3EAFFFF      <1>     mov rsp, qword [stackTop]   ;Reset stack ptr
   412 00001522 E8B4300000          <1>     call resetIDTentries
   413 00001527 B8004D0000          <1>     mov eax, 4D00h              ;Get retcode, will be 0 for internal commands
   414 0000152C CD21                <1>     int 21h
   415 0000152E 668905D8EAFFFF      <1>     mov word [returnCode], ax
   416 00001535 84E4                <1>     test ah, ah     ;Regular exit
   417 00001537 0F8454FCFFFF        <1>     jz commandMain.okRet
   418 0000153D 80FC03              <1>     cmp ah, 3       ;TSR exit
   419 00001540 0F844BFCFFFF        <1>     je commandMain.okRet
   420                              <1>     ;Clean redirs and fully reset! This allows for safe returning if an error
   421                              <1>     ; occured when invoked on Int 2Eh! Doesnt matter for normal single command
   422                              <1>     ; as we always close the COMMAND.COM instance at this point.
   423 00001546 E83F000000          <1>     call cleanupRedirs
   424 0000154B E98EFBFFFF          <1>     jmp commandMain
   425                              <1> 
   426                              <1> hardSynErr:
   427                              <1> ;Hard syntax error in cmd line. Delete pipe files and reset completely!
   428 00001550 E843090000          <1>     call badSyntaxError         ;Output bad syntax if empty command found
   429 00001555 E926000000          <1>     jmp redirPipeFailureCommon.noPrint  ;This closes pipes and resets stack
   430                              <1> redirFailure:
   431 0000155A 488D151CF9FFFF      <1>     lea rdx, redirErrMsg
   432 00001561 B913000000          <1>     mov ecx, redirErrMsgL
   433 00001566 EB0C                <1>     jmp short redirPipeFailureCommon
   434                              <1> pipeFailure:
   435 00001568 488D15F7F8FFFF      <1>     lea rdx, pipeErrMsg
   436 0000156F B917000000          <1>     mov ecx, pipeErrMsgL
   437                              <1> redirPipeFailureCommon:
   438                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   439                              <1> ;This routine tries to close whatever handles are not -1 and delete
   440                              <1> ; pipe files if the pipe count is not 0.
   441                              <1> ;It resets all variables and jumps to reset the stack!
   442 00001574 B800400000          <1>     mov eax, 4000h  ;Write handle
   443 00001579 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   444 0000157E CD21                <1>     int 21h
   445                              <1> .noPrint:
   446 00001580 E805000000          <1>     call cleanupRedirs  ;Cleans the redirections 
   447 00001585 E954FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   448                              <1> 
   449                              <1> cleanupRedirs:
   450                              <1> ;Cleans all active redirections, returning to the saved state.
   451                              <1> ;Deletes any pipe files, leaves any redir out files.
   452                              <1> ;Resets the internal vars
   453 0000158A 0FB7050FEBFFFF      <1>     movzx eax, word [redirSTDIN]
   454 00001591 0FB71502EBFFFF      <1>     movzx edx, word [pipeSTDIN]
   455 00001598 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   456 0000159A E8CC000000          <1>     call .closeAndReplace
   457 0000159F 0FB705FCEAFFFF      <1>     movzx eax, word [redirSTDOUT]
   458 000015A6 0FB715EFEAFFFF      <1>     movzx edx, word [pipeSTDOUT]
   459 000015AD FFC3                <1>     inc ebx         ;Select STDOUT for closing
   460 000015AF E8B7000000          <1>     call .closeAndReplace
   461 000015B4 66C705E1EAFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   462 000015BD 0FB71DDCEAFFFF      <1>     movzx ebx, word [redirSTDIN]
   463 000015C4 E892000000          <1>     call .closeHandle
   464                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   465 000015C9 66C705CEEAFFFFFFFF  <1>     mov word [redirSTDIN], -1
   466 000015D2 0FB71DC9EAFFFF      <1>     movzx ebx, word [redirSTDOUT]
   467 000015D9 E87D000000          <1>     call .closeHandle
   468 000015DE 66C705BBEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   469 000015E7 0FB71DACEAFFFF      <1>     movzx ebx, word [pipeSTDIN]
   470 000015EE E868000000          <1>     call .closeHandle
   471 000015F3 66C7059EEAFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   472 000015FC 0FB71D99EAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   473 00001603 E853000000          <1>     call .closeHandle
   474 00001608 66C7058BEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   475 00001611 C60581EAFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   476 00001618 488D15C3EDFFFF      <1>     lea rdx, qword [pipe1Filespec]
   477 0000161F 803A00              <1>     cmp byte [rdx], 0
   478 00001622 7407                <1>     jz .checkOld
   479 00001624 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   480 00001629 CD21                <1>     int 21h
   481                              <1> .checkOld:
   482 0000162B 488D15FFEDFFFF      <1>     lea rdx, qword [pipe2Filespec]
   483 00001632 803A00              <1>     cmp byte [rdx],0
   484 00001635 7407                <1>     jz .pipeNamesComplete
   485 00001637 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   486 0000163C CD21                <1>     int 21h
   487                              <1> .pipeNamesComplete:
   488 0000163E 31C0                <1>     xor eax, eax
   489                              <1>     ;Invalidate the pointers and the paths too
   490 00001640 48890539EEFFFF      <1>     mov qword [newPipe], rax
   491 00001647 4889053AEEFFFF      <1>     mov qword [oldPipe], rax
   492 0000164E 89058EEDFFFF        <1>     mov dword [pipe1Filespec], eax
   493 00001654 8905D7EDFFFF        <1>     mov dword [pipe2Filespec], eax
   494                              <1>     return
    13                              <2> %%_ret:
    14 0000165A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> .closeHandle:
   497 0000165B 81FBFFFFFFFF        <1>     cmp ebx, -1
   498                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001661 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   499 00001663 B8003E0000          <1>     mov eax, 3E00h
   500 00001668 CD21                <1>     int 21h
   501                              <1>     return
    13                              <2> %%_ret:
    14 0000166A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   502                              <1> .closeAndReplace:
   503                              <1> ;Input: ax = one possible handle, dx = second possible handle
   504                              <1> ;       bx = handle to close and copy ax/dx into
   505                              <1> ;Output: Handle intervened on. bx preserved
   506 0000166B C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   507 0000166E 09D0                <1>     or eax, edx     ;Form packed
   508 00001670 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   509                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001675 74(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   510 00001677 E8DFFFFFFF          <1>     call .closeHandle
   511 0000167C 663DFFFF            <1>     cmp ax, -1      
   512 00001680 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   513 00001684 53                  <1>     push rbx
   514 00001685 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   515 00001688 B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   516 0000168D CD21                <1>     int 21h
   517 0000168F 5B                  <1>     pop rbx
   518                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001690 73(6A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   519                              <1>     ;Else we now try to force default device to open!
   520 00001692 E8C4FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   521 00001697 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   522 0000169C 488D1527F8FFFF      <1>     lea rdx, devName
   523 000016A3 CD21                <1>     int 21h
   524                              <1>     return
    13                              <2> %%_ret:
    14 000016A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   525                              <1> 
   526                              <1> cleanRedirOut:
   527                              <1> ;Used to oust any stdout redir if necessary. This is different to the above in 
   528                              <1> ; that it deletes the redir out file. Therefore, this is only called in 
   529                              <1> ; particular cases like launching bat files which needs special handling in 
   530                              <1> ; that all redirs need to be completely removed.
   531 000016A6 66813DF3E9FFFFFFFF  <1>     cmp word [redirSTDOUT], -1  ;Do we have > xyzzy.fil?
   532                              <1>     rete  ;Return if no stdout redir! We are ok!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000016AF 74(A5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   533 000016B1 0FB71DEAE9FFFF      <1>     movzx ebx, word [redirSTDOUT]
   534 000016B8 B901000000          <1>     mov ecx, 1      ;STDOUT
   535 000016BD B800460000          <1>     mov eax, 4600h  ;DUP this into STDOUT closing redirout
   536 000016C2 CD21                <1>     int 21h
   537 000016C4 0FB71DD7E9FFFF      <1>     movzx ebx, word [redirSTDOUT]   ;Kill the duplicate now
   538 000016CB B8003E0000          <1>     mov eax, 3E00h  
   539 000016D0 CD21                <1>     int 21h
   540 000016D2 66C705C7E9FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Set default value back
   541 000016DB 488D15B1ECFFFF      <1>     lea rdx, rdrOutFilespec
   542 000016E2 B800410000          <1>     mov eax, 4100h      ;Del stdout file
   543 000016E7 CD21                <1>     int 21h
   544 000016E9 C60200              <1>     mov byte [rdx], 0   ;Ensure this is a clear path (not necessary)
   545                              <1>     ;Ignore any errors in this procedures. Errors mean either sharing problems
   546                              <1>     ; or the file doesnt exist, which in either case, is fine to leave it be!
   547                              <1>     return
    13                              <2> %%_ret:
    14 000016EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> advanceRedir:
   550                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   551                              <1> ;Close stdin redir then stdout redir. 
   552 000016ED F605AAE9FFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   553 000016F4 0F8585000000        <1>     jnz .redirIn
   554 000016FA F60598E9FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   555 00001701 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   556 00001707 0FBF058CE9FFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   557 0000170E 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   558 00001713 0F84EB000000        <1>     je .pipeOut              
   559                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   560 00001719 0FB71D7AE9FFFF      <1>     movzx ebx, word [pipeSTDIN] 
   561 00001720 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   562 00001722 B800460000          <1>     mov eax, 4600h
   563 00001727 CD21                <1>     int 21h
   564 00001729 0F8239FEFFFF        <1>     jc pipeFailure
   565 0000172F B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   566 00001734 CD21                <1>     int 21h
   567 00001736 0F822CFEFFFF        <1>     jc pipeFailure
   568 0000173C 488B1545EDFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   569 00001743 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   570 00001748 CD21                <1>     int 21h
   571 0000174A 0F8218FEFFFF        <1>     jc pipeFailure
   572 00001750 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   573 00001753 66C7053EE9FFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   574                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   575                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   576                              <1>     ;Else exit!
   577 0000175C 0FBF0539E9FFFF      <1>     movsx eax, word [pipeSTDOUT]
   578 00001763 3DFFFFFFFF          <1>     cmp eax, -1
   579 00001768 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   580 0000176E C60524E9FFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   581 00001775 F60523E9FFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   582 0000177C 753D                <1>     jnz .redirOut               ;Go for it if so!
   583                              <1>     return
    13                              <2> %%_ret:
    14 0000177E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   584                              <1> .redirIn:
   585                              <1> ;Here we clean redirIn
   586 0000177F 0FB71D1AE9FFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   587 00001786 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   588 00001788 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   589 0000178D CD21                <1>     int 21h
   590 0000178F 0F82C5FDFFFF        <1>     jc redirFailure
   591 00001795 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   592 0000179A CD21                <1>     int 21h
   593 0000179C 0F82B8FDFFFF        <1>     jc redirFailure
   594 000017A2 66C705F5E8FFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   595 000017AB C605ECE8FFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   596 000017B2 F605E0E8FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   597 000017B9 7549                <1>     jnz .pipeOut
   598                              <1> .redirOut:
   599 000017BB F605DDE8FFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   600                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017C2 74(7E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   601                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   602 000017C4 F605CEE8FFFFFF      <1>     test byte [pipeFlag], -1
   603 000017CB 7537                <1>     jnz short .pipeOut
   604 000017CD 0FB71DCEE8FFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   605 000017D4 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   606 000017D9 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   607 000017DE CD21                <1>     int 21h
   608 000017E0 0F8274FDFFFF        <1>     jc redirFailure
   609 000017E6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   610 000017EB CD21                <1>     int 21h
   611 000017ED 0F8267FDFFFF        <1>     jc redirFailure
   612 000017F3 66C705A6E8FFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   613 000017FC C6059CE8FFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   614                              <1>     return
    13                              <2> %%_ret:
    14 00001803 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   615                              <1> .pipeOut:
   616                              <1> ;Duplicate STDIN to save across pipe
   617 00001804 0FBF0591E8FFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   618 0000180B 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   619                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001810 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   620 00001812 B800450000          <1>     mov eax, 4500h
   621 00001817 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   622 00001819 CD21                <1>     int 21h
   623 0000181B 0F8247FDFFFF        <1>     jc pipeFailure
   624 00001821 66890572E8FFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   625                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   626 00001828 B800460000          <1>     mov eax, 4600h
   627 0000182D 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   628 0000182F FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   629 00001831 CD21                <1>     int 21h
   630 00001833 0F822FFDFFFF        <1>     jc pipeFailure
   631                              <1> ;Now return the original stdout to stdout
   632 00001839 89D9                <1>     mov ecx, ebx
   633 0000183B 0FB71D5AE8FFFF      <1>     movzx ebx, word [pipeSTDOUT]
   634 00001842 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   635 00001847 CD21                <1>     int 21h
   636 00001849 0F8219FDFFFF        <1>     jc pipeFailure
   637                              <1> ;Now close the DUP'ed STDOUT
   638 0000184F B8003E0000          <1>     mov eax, 3E00h
   639 00001854 CD21                <1>     int 21h
   640 00001856 0F820CFDFFFF        <1>     jc pipeFailure
   641                              <1> ;Finally unwind STDIN to the beginning of the file
   642 0000185C B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   643 00001861 31DB                <1>     xor ebx, ebx    ;STDIN handle
   644 00001863 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   645 00001865 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   646 00001867 CD21                <1>     int 21h
   647 00001869 0F82F9FCFFFF        <1>     jc pipeFailure  ;This should never happen
   648 0000186F 488B150AECFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   649 00001876 4889150BECFFFF      <1>     mov qword [oldPipe], rdx
   650 0000187D 66C70516E8FFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001886 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> 
   654                              <1> peelRedir:
   655                              <1> ;Checks and sets up redir as appropriate
   656                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   657                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   658                              <1> ;Output: ZF=NZ => No redir
   659                              <1> ;        ZF=ZY => Redir
   660                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   661                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   662 00001887 51                  <1>     push rcx
   663 00001888 57                  <1>     push rdi
   664 00001889 3C3C                <1>     cmp al, "<"
   665 0000188B 740C                <1>     je .inputRedir
   666 0000188D 3C3E                <1>     cmp al, ">"
   667 0000188F 7427                <1>     je .outputRedir
   668 00001891 3C7C                <1>     cmp al, "|"
   669 00001893 7441                <1>     je .pipeSetup
   670 00001895 F8                  <1>     clc
   671                              <1> .redirExit:
   672 00001896 5F                  <1>     pop rdi
   673 00001897 59                  <1>     pop rcx
   674                              <1>     return
    13                              <2> %%_ret:
    14 00001898 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   675                              <1> .inputRedir:
   676 00001899 C605FEE7FFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   677 000018A0 488D3D9DEAFFFF      <1>     lea rdi, rdrInFilespec
   678                              <1> .redirCommon:
   679 000018A7 E80F2A0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   680 000018AC E83B2B0000          <1>     call cpDelimPathToBufz
   681 000018B1 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   682 000018B4 30C0                <1>     xor al, al  ;Clear the ZF flag
   683 000018B6 EBDE                <1>     jmp short .redirExit
   684                              <1> .outputRedir:
   685 000018B8 C605E0E7FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   686 000018BF 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   687 000018C2 7509                <1>     jne .notDouble
   688 000018C4 FE05D5E7FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   689 000018CA 48FFC6              <1>     inc rsi ;Go past it too
   690                              <1> .notDouble:
   691 000018CD 488D3DBFEAFFFF      <1>     lea rdi, rdrOutFilespec
   692 000018D4 EBD1                <1>     jmp short .redirCommon
   693                              <1> .pipeSetup:
   694 000018D6 56                  <1>     push rsi    ;Save rsi pointing to char past |
   695 000018D7 E8DF290000          <1>     call skipDelimiters ;Check if this is effectively a double || or |<CR>
   696 000018DC 803E7C              <1>     cmp byte [rsi], "|" 
   697 000018DF 7403                <1>     je .badFnd
   698 000018E1 803E0D              <1>     cmp byte [rsi], CR
   699                              <1> .badFnd:
   700 000018E4 5E                  <1>     pop rsi
   701 000018E5 F9                  <1>     stc
   702 000018E6 EBAE                <1>     jmp short .redirExit
   703                              <1> 
   704                              <1> setupRedirandPipes:
   705                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   706                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   707 000018E8 0F8484000000        <1>     jz .redirIn
   708 000018EE 488D15EDEAFFFF      <1>     lea rdx, pipe1Filespec
   709 000018F5 803A00              <1>     cmp byte [rdx], 0
   710 000018F8 7410                <1>     jz .pathFound
   711 000018FA 488D1530EBFFFF      <1>     lea rdx, pipe2Filespec
   712 00001901 803A00              <1>     cmp byte [rdx], 0
   713 00001904 0F855EFCFFFF        <1>     jnz pipeFailure
   714                              <1> .pathFound:
   715 0000190A 4889156FEBFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   716 00001911 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   717 00001916 BB01000000          <1>     mov ebx, 1
   718 0000191B CD21                <1>     int 21h
   719 0000191D 0F8245FCFFFF        <1>     jc pipeFailure
   720 00001923 66890572E7FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   721 0000192A E849290000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   722 0000192F 0441                <1>     add al, "A"
   723 00001931 BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   724 00001936 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   725 00001938 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   726 0000193A 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   727 0000193C B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   728 00001941 CD21                <1>     int 21h
   729 00001943 0F821FFCFFFF        <1>     jc pipeFailure
   730                              <1>     ;AX has the handle for this file now, this will become STDOUT
   731                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   732 00001949 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   733 0000194C B901000000          <1>     mov ecx, 1
   734 00001951 B800460000          <1>     mov eax, 4600h
   735 00001956 CD21                <1>     int 21h
   736 00001958 0F820AFCFFFF        <1>     jc pipeFailure
   737 0000195E B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   738 00001963 CD21                <1>     int 21h
   739 00001965 0F82FDFBFFFF        <1>     jc pipeFailure
   740 0000196B C60527E7FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   741                              <1> .redirIn:
   742                              <1> ;Now check if any other redir needs to be setup
   743                              <1> ;Checks and sets up redir as appropriate.
   744                              <1>     ;Setup the redir here for STDIN
   745 00001972 F60525E7FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   746 00001979 7449                <1>     jz .redirOut
   747 0000197B 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   748 0000197D B800450000          <1>     mov eax, 4500h
   749 00001982 CD21                <1>     int 21h
   750 00001984 0F82D0FBFFFF        <1>     jc redirFailure
   751 0000198A 6689050FE7FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   752 00001991 488D15ACE9FFFF      <1>     lea rdx, rdrInFilespec
   753 00001998 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   754 0000199D CD21                <1>     int 21h
   755 0000199F 0F82B5FBFFFF        <1>     jc redirFailure
   756 000019A5 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   757 000019A7 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   758 000019AA B800460000          <1>     mov eax, 4600h
   759 000019AF CD21                <1>     int 21h
   760 000019B1 0F82A3FBFFFF        <1>     jc redirFailure
   761 000019B7 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   762 000019BC CD21                <1>     int 21h
   763 000019BE 0F8296FBFFFF        <1>     jc redirFailure
   764                              <1> .redirOut:
   765 000019C4 F605D4E6FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   766                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000019CB 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000019CD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   767 000019CE 803DC7E6FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   768                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019D5 75(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769                              <1>     ;Else setup the redir here for STDOUT
   770 000019D7 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   771 000019DC B800450000          <1>     mov eax, 4500h
   772 000019E1 CD21                <1>     int 21h
   773 000019E3 0F8271FBFFFF        <1>     jc redirFailure
   774 000019E9 668905B2E6FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   775 000019F0 488D159CE9FFFF      <1>     lea rdx, rdrOutFilespec
   776 000019F7 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   777 000019FC CD21                <1>     int 21h
   778 000019FE 730F                <1>     jnc .fileExists
   779 00001A00 B8003C0000          <1>     mov eax, 3C00h
   780 00001A05 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   781 00001A07 CD21                <1>     int 21h
   782 00001A09 0F824BFBFFFF        <1>     jc redirFailure
   783                              <1> .fileExists:
   784 00001A0F B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   785 00001A14 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   786 00001A17 B800460000          <1>     mov eax, 4600h  ;DUP2
   787 00001A1C CD21                <1>     int 21h
   788 00001A1E 0F8236FBFFFF        <1>     jc redirFailure
   789 00001A24 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   790 00001A29 CD21                <1>     int 21h
   791 00001A2B 0F8229FBFFFF        <1>     jc redirFailure
   792 00001A31 803D67E6FFFF01      <1>     cmp byte [redirOut], 1
   793                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001A38 74(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   794                              <1>     ;Here we move the file pointer to the end of the file
   795 00001A3A 31D2                <1>     xor edx, edx    ;Low order 32 bits
   796 00001A3C 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   797 00001A3E BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   798 00001A43 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   799 00001A48 CD21                <1>     int 21h
   800 00001A4A 0F820AFBFFFF        <1>     jc redirFailure
   801                              <1>     return
    13                              <2> %%_ret:
    14 00001A50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   802                              <1> 
   803                              <1> 
   804                              <1> pullCommandline:
   805                              <1> ;This command pulls the command tail down, removing the whole launch command
   806 00001A51 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   807                              <1> ;Skip leading separators
   808                              <1> .pctSkipLeading:
   809 00001A58 AC                  <1>     lodsb   ;Get first char
   810 00001A59 E86B280000          <1>     call isALdelimiter
   811 00001A5E 74F8                <1>     je .pctSkipLeading
   812 00001A60 48FFCE              <1>     dec rsi
   813                              <1>     ;rsi points to the start of the command
   814 00001A63 488D3D7DE8FFFF      <1>     lea rdi, cmdPathSpec
   815 00001A6A E827280000          <1>     call strlen ;Get the length of the command
   816 00001A6F FFC9                <1>     dec ecx ;Minus the terminating null
   817 00001A71 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   818 00001A74 280D2BE6FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   819 00001A7A 280D28E6FFFF        <1>     sub byte [arg2Off], cl
   820 00001A80 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   821 00001A82 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   822                              <1> .pctPullChars:
   823 00001A89 AC                  <1>     lodsb
   824 00001A8A AA                  <1>     stosb
   825 00001A8B 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   826 00001A8D 7404                <1>     je .pctExit
   827 00001A8F FFC1                <1>     inc ecx     ;Increment count
   828 00001A91 EBF6                <1>     jmp short .pctPullChars 
   829                              <1> .pctExit:
   830 00001A93 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   831                              <1>     return
    13                              <2> %%_ret:
    14 00001A9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   832                              <1> 
   833                              <1> getSetMainState:
   834                              <1> ;Resets the buffers lengths, sets stringops and gets the pspptr in r8
   835 00001A9B FC                  <1>     cld ;Ensure stringops are done the right way
   836 00001A9C C605BEE6FFFF80      <1>     mov byte [inBuffer], inLen      ;Reset the buffer length
   837 00001AA3 C60539E7FFFF80      <1>     mov byte [cpyBuffer], inLen     ;Reset the buffer length
   838 00001AAA C605B4E7FFFF80      <1>     mov byte [cmdBuffer], inLen     ;Reset the buffer length
   839 00001AB1 4C8B0557E5FFFF      <1>     mov r8, qword [pspPtr]              ;Reset the pspPtr
   840                              <1>     return
    13                              <2> %%_ret:
    14 00001AB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   841                              <1> 
   842                              <1> 
   843                              <1> int2Eh: 
   844                              <1> ;Very sucky interface for passing command lines to be processed by the 
   845                              <1> ; current top level command interpreter. Will slowly try to patch to make it
   846                              <1> ; more reliable with a critical section flag. Currently, if we are already
   847                              <1> ; processing an Int 2Eh request, this will not process the command.
   848                              <1> ;
   849                              <1> ;Need to add further safeguards for when pipes are also setup and
   850                              <1> ; batchmode is on!
   851                              <1> ;
   852                              <1> ;Input: rsi points to the count byte of a command line.
   853                              <1> ;       Max number of chars is 128 (127 + count byte)
   854                              <1> ;Output:
   855                              <1> ;       CF=NC: Command was processed. ax = Retcode
   856                              <1> ;       CF=CY: Command was not processed.
   857 00001AB9 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF on entry
   858 00001ABE F605CFE5FFFF04      <1>     test byte [statFlg1], inSingle
   859 00001AC5 0F8584000000        <1>     jnz int2EcheckReentry 
   860                              <1> .multiJoin:
   861 00001ACB 800DC2E5FFFF04      <1>     or byte [statFlg1], inSingle ;Set the bits! Gets the lock!
   862 00001AD2 48892546E5FFFF      <1>     mov qword [int2Ersp], rsp   ;Save the far stack pointer 
   863 00001AD9 488B2525E5FFFF      <1>     mov rsp, qword [stackTop]    ;Set to use the internal stack
   864 00001AE0 B800510000          <1>     mov eax, 5100h ;Get Current PSP in rdx
   865 00001AE5 CD21                <1>     int 21h
   866 00001AE7 48891D29E5FFFF      <1>     mov qword [int2Epsp], rbx
   867 00001AEE 52                  <1>     push rdx    ;Save on the stack
   868 00001AEF 488B1D19E5FFFF      <1>     mov rbx, qword [pspPtr] ;Get the psp for this COMMAND.COM
   869 00001AF6 B800500000          <1>     mov eax, 5000h ;Set this version of COMMAND.COM as the current PSP
   870 00001AFB CD21                <1>     int 21h
   871 00001AFD 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   872 00001B00 4989D9              <1>     mov r9, rbx
   873 00001B03 488D3D58E6FFFF      <1>     lea rdi, inBuffer + 1
   874 00001B0A B910000000          <1>     mov ecx, 10h    ;80h/8
   875 00001B0F FC                  <1>     cld
   876 00001B10 F348A5              <1>     rep movsq   ;Zoom zoom copy command line over
   877 00001B13 E883FFFFFF          <1>     call getSetMainState    ;Ensure the buffers have their lengths set
   878 00001B18 803D43E6FFFF00      <1>     cmp byte [inBuffer + 1], 0
   879 00001B1F 0F851DF6FFFF        <1>     jne commandMain.goSingle    ;Proceed if we have anything to execute
   880                              <1> int2ERet:
   881 00001B25 E8C3270000          <1>     call clearCommandLineState  ;Be a good citizen, leave it as we found it!
   882 00001B2A 488B25EEE4FFFF      <1>     mov rsp, qword [int2Ersp]
   883 00001B31 488B1DDFE4FFFF      <1>     mov rbx, qword [int2Epsp] ;Get Old current PSP in rbx
   884 00001B38 B800500000          <1>     mov eax, 5000h ;Set Current PSP
   885 00001B3D CD21                <1>     int 21h
   886 00001B3F 0FB705C7E4FFFF      <1>     movzx eax, word [returnCode]    ;Get the return code in eax
   887 00001B46 802547E5FFFFFB      <1>     and byte [statFlg1], ~inSingle  ;Clear that we are in single mode
   888 00001B4D 48CF                <1>     iretq
   889                              <1> 
   890                              <1> int2EcheckReentry:
   891                              <1> ;Now we check if we DOSMGR is installed. If so, put task on ice
   892                              <1> ; else, return with CF=CY.
   893 00001B4F B800520000          <1>     mov eax, 5200h  ;Get sysvars
   894 00001B54 CD21                <1>     int 21h
   895 00001B56 F64363FF            <1>     test byte [rbx + 63h], -1   ;check the sysVars.dosMgrPresent byte
   896 00001B5A 7512                <1>     jnz short .multifnd
   897 00001B5C B800030000          <1>     mov eax, 0300h   ;Are we here check on Int 2Fh
   898 00001B61 CD2F                <1>     int 2Fh
   899 00001B63 84C0                <1>     test al, al ;This must still be zero, else something installed
   900 00001B65 7507                <1>     jnz .multifnd
   901 00001B67 804C241001          <1>     or byte [rsp + 2*8], 1  ;Else return with CF=CY, already processing
   902 00001B6C 48CF                <1>     iretq   
   903                              <1> .multifnd:
   904                              <1> ;Recognised multitasker present, we now spinlock until flag is clear!
   905 00001B6E F390                <1>     pause
   906 00001B70 F6051DE5FFFF04      <1>     test byte [statFlg1], inSingle   ;Is this bit set?
   907 00001B77 75F5                <1>     jnz .multifnd
   908 00001B79 E94DFFFFFF          <1>     jmp int2Eh.multiJoin            ;Rejoin the norm now
    17                                  %include "./Source/cmdBat.asm"
     1                              <1> ;Main Batch processing routines go here!
     2                              <1> 
     3                              <1> batLaunch:
     4                              <1> ;Preps and launches a batch file! Called with rdx pointing to the filespec :)
     5 00001B7E BB200B0000          <1>     mov ebx, bbMaxAlloc << 4    ;Convert to paragraphs
     6 00001B83 B800480000          <1>     mov eax, 4800h
     7 00001B88 CD21                <1>     int 21h
     8 00001B8A 730A                <1>     jnc .bbAlloced
     9 00001B8C E8FE020000          <1>     call badNoMemError  ;Print not enough mem error
    10 00001B91 E9EAF9FFFF          <1>     jmp  redirPipeFailureCommon.noPrint ;Clean up all redir and ret to cmdline
    11                              <1> .bbAlloced:
    12 00001B96 4889050EE5FFFF      <1>     mov qword [bbPtr], rax  ;Save the ptr here!
    13 00001B9D 4889C3              <1>     mov rbx, rax
    14 00001BA0 4889DF              <1>     mov rdi, rbx
    15 00001BA3 31C0                <1>     xor eax, eax
    16 00001BA5 B9B2000000          <1>     mov ecx, bbMaxAlloc     
    17 00001BAA F3AA                <1>     rep stosb               ;Clean the arena
    18 00001BAC 4889DF              <1>     mov rdi, rbx            ;Point back to the head
    19 00001BAF 8A05E1E4FFFF        <1>     mov al, byte [echoFlg]
    20 00001BB5 884301              <1>     mov byte [rbx + batBlockHdr.bEchoFlg], al
    21 00001BB8 B8FFFFFFFF          <1>     mov eax, -1
    22 00001BBD B905000000          <1>     mov ecx, 5
    23 00001BC2 488D7B1B            <1>     lea rdi, qword [rbx + batBlockHdr.wArgs]    ;Init the wArgs to no params!
    24 00001BC6 F3AB                <1>     rep stosd   ;Store in dwords for speed. Leave rdi pointing at .cmdLine
    25 00001BC8 66C7431B0000        <1>     mov word [rbx + batBlockHdr.wArgs], 0   ;Arg %0 starts at offset 0!
    26 00001BCE 488D3512E7FFFF      <1>     lea rsi, cmdPathSpec
    27 00001BD5 E8A3260000          <1>     call strcpy     ;Leave rdi past the terminating null
    28 00001BDA 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get char cnt for copy
    29 00001BE2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get copy source
    30 00001BE9 57                  <1>     push rdi    ;Save the ptr to the start of cmd tail in batblock
    31 00001BEA F3A4                <1>     rep movsb   ;Copy the command tail over
    32                              <1>     ;Since this copy is shorter than the space we have, we already have a free
    33                              <1>     ; terminating null. All good!
    34 00001BEC 5E                  <1>     pop rsi 
    35                              <1>     ;Now analyse the command line to get the word offsets. Get at most 10
    36 00001BED B901000000          <1>     mov ecx, 1  ;Start with argument 1
    37                              <1> .bbFndLp:
    38 00001BF2 E8C4260000          <1>     call skipDelimiters ;Skip leading delimiters, leave rsi at char1
    39 00001BF7 E8E7000000          <1>     call .bbCheckEndOfCmdLine   ;Is this the end of the command?
    40 00001BFC 7428                <1>     je .bbArgsDone      ;Yes
    41                              <1>     ;Add the entry to the table!
    42 00001BFE 4889F0              <1>     mov rax, rsi
    43 00001C01 488D532F            <1>     lea rdx, qword [rbx + batBlockHdr.cmdLine]  ;Get addr of start of cmdline
    44 00001C05 4829D0              <1>     sub rax, rdx    ;Now get the difference in ax
    45 00001C08 6689440B1B          <1>     mov word [rbx + batBlockHdr.wArgs + rcx], ax    ;Store this offset here
    46                              <1>     
    47 00001C0D FFC1                <1>     inc ecx
    48 00001C0F 81F90A000000        <1>     cmp ecx, 10         ;Did we just process %9?
    49 00001C15 740F                <1>     je .bbArgsDone
    50                              <1> .bbFndLp2:
    51 00001C17 AC                  <1>     lodsb   ;Getch
    52 00001C18 E8AC260000          <1>     call isALdelimiter  ;If this is a delimiter, we are at the end of the command
    53 00001C1D 74D3                <1>     je .bbFndLp
    54 00001C1F E8BF000000          <1>     call .bbCheckEndOfCmdLine
    55 00001C24 75F1                <1>     jne .bbFndLp2   ;If not end of cmdline, see if next char delim
    56                              <1> .bbArgsDone:
    57                              <1> ;Now copy the batch name, need to figure the full path to it.
    58 00001C26 488D35BAE6FFFF      <1>     lea rsi, cmdPathSpec
    59 00001C2D 488D3D7FE4FFFF      <1>     lea rdi, batFile
    60 00001C34 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
    61 00001C37 80FC3A              <1>     cmp ah, ":"
    62 00001C3A 746D                <1>     je .bbdrvGiven
    63 00001C3C 3A05E7E3FFFF        <1>     cmp al, byte [pathSep]  ;Is the first char a pathsep?
    64 00001C42 7458                <1>     je .bbCDrvAbs
    65                              <1> ;Current drive relative
    66 00001C44 E82F260000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
    67 00001C49 0441                <1>     add al, "A"
    68 00001C4B B43A                <1>     mov ah, ":"
    69 00001C4D 66AB                <1>     stosw   ;Store these two chars, adv rdi
    70                              <1> .bbRelPath:
    71 00001C4F 8A05D4E3FFFF        <1>     mov al, byte [pathSep]  
    72 00001C55 AA                  <1>     stosb   ;Store the pathsep
    73 00001C56 8A0557E4FFFF        <1>     mov al, byte [batFile]  ;Now get the drive letter into al
    74 00001C5C E83F260000          <1>     call ucChar             ;UC it
    75 00001C61 88054CE4FFFF        <1>     mov byte [batFile], al  ;and overwrite it :)
    76 00001C67 2C40                <1>     sub al, "@"             ;Convert into a 1 based drive number
    77 00001C69 88C2                <1>     mov dl, al
    78 00001C6B 56                  <1>     push rsi        ;Save remaining char source
    79 00001C6C 4889FE              <1>     mov rsi, rdi    ;rdi is where we want to store the file name
    80 00001C6F B800470000          <1>     mov eax, 4700h  ;Get Current Directory
    81 00001C74 CD21                <1>     int 21h
    82 00001C76 5E                  <1>     pop rsi
    83 00001C77 7311                <1>     jnc .bbRelPathOk
    84 00001C79 488D15FAEBFFFF      <1>     lea rdx, badBat
    85 00001C80 E8EB230000          <1>     call printString
    86 00001C85 E963000000          <1>     jmp batFinish   ;Now clean up the batch stuff we've setup
    87                              <1> .bbRelPathOk:
    88                              <1> ;Now move rdi to the terminating null   
    89 00001C8A 31C0                <1>     xor eax, eax
    90 00001C8C 31C9                <1>     xor ecx, ecx
    91 00001C8E F2AE                <1>     repne scasb ;Find the terminating null
    92 00001C90 48FFCF              <1>     dec rdi ;Now point to the terminating null
    93 00001C93 8A0590E3FFFF        <1>     mov al, byte [pathSep]
    94 00001C99 AA                  <1>     stosb   ;Store this pathsep over the original null
    95                              <1>     ;Now we are ready to copy the command line passed to us by the user
    96                              <1>     ; to rdi. rsi points to where to source the rest of the chars
    97 00001C9A EB1B                <1>     jmp short .bbCpName
    98                              <1> .bbCDrvAbs:
    99                              <1> ;Current drive absolute. Get current drive into buffer
   100 00001C9C E8D7250000          <1>     call getCurrentDrive    ;Gets the 0 based current drive in al
   101 00001CA1 0441                <1>     add al, "A"
   102 00001CA3 B43A                <1>     mov ah, ":"
   103 00001CA5 66AB                <1>     stosw   ;Store these two chars
   104                              <1>     ;Now we are ready to copy the command line passed to us by the user
   105                              <1>     ; to rdi. rsi points to where to source the rest of the chars
   106 00001CA7 EB0E                <1>     jmp short .bbCpName
   107                              <1> .bbdrvGiven:
   108                              <1> ;Drive given X:
   109 00001CA9 66A5                <1>     movsw   ;Move over the X:, point rsi to the first new char
   110 00001CAB AC                  <1>     lodsb
   111 00001CAC 48FFCE              <1>     dec rsi ;Get the char and point back to it
   112 00001CAF 3A0574E3FFFF        <1>     cmp al, byte [pathSep]  ;Is char three a pathsep?
   113 00001CB5 7598                <1>     jne .bbRelPath
   114                              <1> .bbCpName:
   115 00001CB7 E8C1250000          <1>     call strcpy ;Copy the remaining portion
   116 00001CBC 488D35F0E3FFFF      <1>     lea rsi, batFile
   117 00001CC3 4889F7              <1>     mov rdi, rsi
   118 00001CC6 B811120000          <1>     mov eax, 1211h  ;Normalise the path :)
   119 00001CCB CD2F                <1>     int 2fh
   120                              <1> ;Now deactivate any redirs. Do redir out as cleanupRedirs somewhat ignores it.
   121                              <1> ;Do the handle close as deleting the file without closing the handle is asking 
   122                              <1> ; for SHARING trouble...
   123 00001CCD E8D4F9FFFF          <1>     call cleanRedirOut      ;Liquidates redirout if needed
   124 00001CD2 E8B3F8FFFF          <1>     call cleanupRedirs      ;Now liquidate remaining redirs and pipes
   125 00001CD7 800DB6E3FFFF08      <1>     or byte [statFlg1], inBatch ;Fire up the batch processor!
   126 00001CDE E9FBF3FFFF          <1>     jmp commandMain         ;Now we start reading the batch file!
   127                              <1> 
   128                              <1> .bbCheckEndOfCmdLine:
   129                              <1> ;Input: rsi -> Char to check 
   130                              <1> ;Output: ZF=ZE if we hit a CR or a <NUL>
   131 00001CE3 803E00              <1>     cmp byte [rsi], 0
   132                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001CE6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001CE8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   133 00001CE9 803E0D              <1>     cmp byte [rsi], CR
   134                              <1>     return
    13                              <2> %%_ret:
    14 00001CEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> batFinish:
   137                              <1> ;This is the procedure called after we've processed the last batch line
   138 00001CED E842010000          <1>     call batCleanup     ;Cleanup the batch and batch state vars etc etc
   139 00001CF2 E9E7F3FFFF          <1>     jmp commandMain     ;And start again :)
   140                              <1> batNextLine:
   141                              <1> ;Read the next line from the file and sets if we are done with copying
   142 00001CF7 F60596E3FFFF10      <1>     test byte [statFlg1], batchEOF ;Did we hit EOF?
   143 00001CFE 75ED                <1>     jnz batFinish
   144 00001D00 488D15ACE3FFFF      <1>     lea rdx, batFile
   145                              <1> .batOpen:
   146 00001D07 B8003D0000          <1>     mov eax, 3D00h  ;Open for read only
   147 00001D0C CD21                <1>     int 21h
   148 00001D0E 7315                <1>     jnc .batOpened
   149 00001D10 488D157AEBFFFF      <1>     lea rdx, needBat
   150 00001D17 E854230000          <1>     call printString
   151 00001D1C B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Allows for triggering ^C
   152 00001D21 CD21                <1>     int 21h
   153 00001D23 EBE2                <1>     jmp short .batOpen
   154                              <1> .batOpened:
   155 00001D25 89C3                <1>     mov ebx, eax            ;Move the handle into ebx
   156 00001D27 488B357DE3FFFF      <1>     mov rsi, qword [bbPtr]  ;Get the batch block ptr
   157 00001D2E 8B5613              <1>     mov edx, dword [rsi + batBlockHdr.dBatOffLo]
   158 00001D31 8B4E17              <1>     mov ecx, dword [rsi + batBlockHdr.dBatOffHi]
   159 00001D34 B800420000          <1>     mov eax, 4200h          ;LSEEK to where we left off previously
   160 00001D39 CD21                <1>     int 21h
   161 00001D3B C60520E4FFFF00      <1>     mov byte [inBuffer + 1], 0  ;Reset the buffer count
   162 00001D42 488D151AE4FFFF      <1>     lea rdx, inBuffer + 2   ;Start read pos
   163 00001D49 31FF                <1>     xor edi, edi            ;Use edi as the char counter
   164                              <1> .readlp:
   165 00001D4B E8CB000000          <1>     call .readChar          ;Read the char
   166 00001D50 85C0                <1>     test eax, eax
   167 00001D52 7433                <1>     jz .endOfBatAddCr
   168 00001D54 FFC7                <1>     inc edi                 ;We read a char, woohoo!
   169 00001D56 803A1A              <1>     cmp byte [rdx], EOF     ;Did we read a ^Z char?
   170 00001D59 742C                <1>     je .endOfBatAddCr
   171 00001D5B 803A0D              <1>     cmp byte [rdx], CR      ;End of line?
   172 00001D5E 7444                <1>     je .endOfLineCr
   173 00001D60 803A0A              <1>     cmp byte [rdx], LF      ;End of line UNIX?
   174 00001D63 744F                <1>     je .endOfLineLf
   175 00001D65 FE05F7E3FFFF        <1>     inc byte [inBuffer + 1] ;Inc our char count
   176 00001D6B 48FFC2              <1>     inc rdx                 ;Store the next char in the next position
   177 00001D6E 803DEDE3FFFF80      <1>     cmp byte [inBuffer + 1], inLen    ;Are we 128 chars w/o CR?
   178 00001D75 75D4                <1>     jne .readlp             ;Get next char if not
   179 00001D77 48FFCA              <1>     dec rdx                 ;Go back to the char we just read
   180 00001D7A C6020D              <1>     mov byte [rdx], CR      ;Overwrite with a terminating CR instead!!
   181 00001D7D FE0DDFE3FFFF        <1>     dec byte [inBuffer + 1] ;Reduce the valid char count by one
   182 00001D83 FFCF                <1>     dec edi                 ;Ignore the 128th char that we read!
   183 00001D85 EB30                <1>     jmp short .endOfLine    ;The user typed too many chars on a line, EOL
   184                              <1> .endOfBatAddCr:
   185 00001D87 C6020D              <1>     mov byte [rdx], CR  ;Store a terminating CR on the line!
   186                              <1> .endOfBat:
   187 00001D8A 800D03E3FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set if we encounter a ^Z terminator
   188 00001D91 803DCAE3FFFF00      <1>     cmp byte [inBuffer + 1], 0      ;If we formally read 0 chars, exit!
   189 00001D98 751D                <1>     jne .endOfLine
   190 00001D9A E874000000          <1>     call .closeBat                  ;Close the hdl! This is why this is here!
   191 00001D9F E949FFFFFF          <1>     jmp batFinish
   192                              <1> .endOfLineCr:   ;Now get the next char, to possibly eliminate a trailing LF
   193 00001DA4 E872000000          <1>     call .readChar  ;Get the LF over the CR
   194 00001DA9 85C0                <1>     test eax, eax   ;Did we read nothing?
   195 00001DAB 74DD                <1>     jz .endOfBat    ;That CR was last char, check if empty buffer, else exec
   196 00001DAD 803A0A              <1>     cmp byte [rdx], LF  ;Did we read a LF?
   197 00001DB0 7502                <1>     jne .endOfLineLf    ;Reread this char if not LF
   198 00001DB2 FFC7                <1>     inc edi             ;Else add to the count
   199                              <1> .endOfLineLf:
   200 00001DB4 C6020D              <1>     mov byte [rdx], CR  ;Now place the CR over the last char
   201                              <1> .endOfLine:
   202                              <1> ;Close the file, update the batch block file pointer, then proceed.
   203                              <1> ;rsi -> Batch block.
   204 00001DB7 E857000000          <1>     call .closeBat
   205                              <1>     ;Imagine someone gives us a 2+Gb Batch file... some server magik lmao
   206 00001DBC 017E13              <1>     add dword [rsi + batBlockHdr.dBatOffLo], edi    ;Add lo dword to chars 
   207 00001DBF 81561700000000      <1>     adc dword [rsi + batBlockHdr.dBatOffHi], 0      ;Add CF if needed!
   208                              <1> ;Now we echo the line to the console unless the first char is @ or 
   209                              <1> ; the echo flag is off
   210 00001DC6 488D1596E3FFFF      <1>     lea rdx, inBuffer + 2
   211 00001DCD 803A40              <1>     cmp byte [rdx], batNoEchoChar
   212 00001DD0 7421                <1>     je .noEchoPull       
   213 00001DD2 F605BDE2FFFFFF      <1>     test byte [echoFlg], -1         
   214 00001DD9 7413                <1>     jz .noEcho
   215 00001DDB 0FB60D80E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]    ;Get the number of chars to print
   216 00001DE2 BB01000000          <1>     mov ebx, 1  ;STDOUT
   217 00001DE7 B800400000          <1>     mov eax, 4000h  ;Write woo!
   218 00001DEC CD21                <1>     int 21h
   219                              <1> .noEcho:
   220 00001DEE E941F3FFFF          <1>     jmp commandMain.batProceed
   221                              <1> .noEchoPull:
   222 00001DF3 FE0D69E3FFFF        <1>     dec byte [inBuffer + 1]     ;Eliminate the @ char
   223 00001DF9 0F84F8FEFFFF        <1>     jz batNextLine    ;If this was just a @<CR><LF>, get next line
   224 00001DFF 4889D7              <1>     mov rdi, rdx
   225 00001E02 488D7201            <1>     lea rsi, qword [rdx + 1]    ;Start from the char afterwards
   226 00001E06 0FB60D55E3FFFF      <1>     movzx ecx, byte [inBuffer + 1]  ;Get the remaining count to copy
   227 00001E0D FFC1                <1>     inc ecx                         ;Want to copy over the terminating CR too
   228 00001E0F F3A4                <1>     rep movsb 
   229 00001E11 EBDB                <1>     jmp short .noEcho   ;Now proceed normally
   230                              <1>     
   231                              <1> .closeBat:
   232                              <1> ;Close the handle in rbx
   233 00001E13 B8003E0000          <1>     mov eax, 3E00h  ;Close the file pointer in ebx
   234 00001E18 CD21                <1>     int 21h         ;We ignore errors here... dont hurt me SHARE pls
   235                              <1>     return
    13                              <2> %%_ret:
    14 00001E1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> .readChar:
   237                              <1> ;Reads a char. If no chars read, sets the EOF flag!
   238 00001E1B B901000000          <1>     mov ecx, 1
   239 00001E20 B8003F0000          <1>     mov eax, 3F00h
   240 00001E25 CD21                <1>     int 21h  
   241 00001E27 85C0                <1>     test eax, eax
   242                              <1>     retnz   ;If a char read, return
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001E29 75(1A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   243 00001E2B 800D62E2FFFF10      <1>     or byte [statFlg1], batchEOF    ;Set the end of file reached flag!
   244                              <1>     return
    13                              <2> %%_ret:
    14 00001E32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> 
   247                              <1> batExpandVar:
   248                              <1> ;Input: rsi -> Char after the % sign that triggered this call.
   249                              <1> ;       rdi -> Position to place the substitution string
   250                              <1> ;Output: CF=NC: Substitution string is placed in buffer
   251                              <1> ;        CF=CY: No substitution string found
   252                              <1>     return
    13                              <2> %%_ret:
    14 00001E33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1>     ;cmp byte [rsi], "%"
   254                              <1> 
   255                              <1> batCleanup:
   256                              <1> ;This function is called after the last line has been processed by the 
   257                              <1> ; batch interpreter! Cleans up all the batch resources. Also called if 
   258                              <1> ; CTRLC called during a batch job and the user wants to kill the batch.
   259 00001E34 488B1D70E2FFFF      <1>     mov rbx, qword [bbPtr]
   260 00001E3B 8A4301              <1>     mov al, byte [rbx + batBlockHdr.bEchoFlg]   ;Reset the echo flag
   261 00001E3E 880552E2FFFF        <1>     mov byte [echoFlg], al
   262                              <1> ;-----------------------------------------------------------------------
   263                              <1> ;===Now free the FOR and CALL blocks... oops havent implemented yet!!===
   264                              <1> ; FOR blocks are generally cleaned up by the FOR command. CALL too. 
   265                              <1> ; But since this is the routine called by the error handler too, it 
   266                              <1> ; needs to check for these things. Not a big deal as normally we'll 
   267                              <1> ; just have a null pointer.
   268                              <1> ;-----------------------------------------------------------------------
   269                              <1> ;Finally free this batch header
   270 00001E44 4150                <1>     push r8
   271 00001E46 4989D8              <1>     mov r8, rbx
   272 00001E49 B800490000          <1>     mov eax, 4900h
   273 00001E4E CD21                <1>     int 21h
   274 00001E50 4158                <1>     pop r8
   275 00001E52 E833F7FFFF          <1>     call cleanupRedirs  ;Clean up all redirections, close files etc
   276 00001E57 48C70549E2FFFF0000- <1>     mov qword [bbPtr], 0    
   276 00001E60 0000                <1>
   277 00001E62 80252BE2FFFFE7      <1>     and byte [statFlg1], ~(inBatch|batchEOF)   ;Oh bye bye batch mode!
   278                              <1>     return
    13                              <2> %%_ret:
    14 00001E69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badDiskFull:
     7                              <1> ;This is a different error return, as this closes handles and prints
     8                              <1> ; disk full error and resets the command line!
     9 00001E6A 488D15BFEAFFFF      <1>     lea rdx, noSpace
    10 00001E71 488D0DDBEDFFFF      <1>     lea rcx, pipeErr
    11 00001E78 F6051AE2FFFFFF      <1>     test byte [pipeFlag], -1    ;Is the flag set
    12 00001E7F 746F                <1>     jz short badCmn ;If its just disk full, dont go through pipe clean
    13 00001E81 480F45D1            <1>     cmovnz rdx, rcx ;Swap error messages if pipe flag is on
    14 00001E85 E866000000          <1>     call badCmn     ;Print the string
    15 00001E8A E9F1F6FFFF          <1>     jmp redirPipeFailureCommon.noPrint  ;Now close pipes and fully reset!
    16                              <1> badNoMemError:
    17 00001E8F 488D1589EEFFFF      <1>     lea rdx, noMemMsg
    18 00001E96 EB58                <1>     jmp short badCmn
    19                              <1> badSyntaxError:
    20 00001E98 488D158DEDFFFF      <1>     lea rdx, syntaxErr
    21 00001E9F EB4F                <1>     jmp short badCmn
    22                              <1> badEnvSpaceError:
    23 00001EA1 488D15A2EAFFFF      <1>     lea rdx, noEnvSpace
    24 00001EA8 EB46                <1>     jmp short badCmn
    25                              <1> badAccError:
    26 00001EAA 488D1527EDFFFF      <1>     lea rdx, accDenMsg
    27 00001EB1 EB3D                <1>     jmp short badCmn
    28                              <1> badParamError:
    29 00001EB3 488D159CEBFFFF      <1>     lea rdx, badParm
    30 00001EBA EB34                <1>     jmp short badCmn
    31                              <1> badDriveError:
    32 00001EBC 488D1556EBFFFF      <1>     lea rdx, badDrv
    33 00001EC3 EB2B                <1>     jmp short badCmn
    34                              <1> badArgError:
    35 00001EC5 488D1519EEFFFF      <1>     lea rdx, badArgs
    36 00001ECC EB22                <1>     jmp short badCmn
    37                              <1> badFileError:
    38 00001ECE 488D15F4EDFFFF      <1>     lea rdx, badSpec
    39 00001ED5 EB19                <1>     jmp short badCmn
    40                              <1> badDupFnf:
    41                              <1> ;Hybrid error message
    42 00001ED7 488D152AEAFFFF      <1>     lea rdx, dupName
    43 00001EDE EB10                <1>     jmp short badCmn
    44                              <1> badFnf:
    45 00001EE0 488D1538EAFFFF      <1>     lea rdx, fnfMsg
    46 00001EE7 EB07                <1>     jmp short badCmn
    47                              <1> badDirError:
    48 00001EE9 488D1567ECFFFF      <1>     lea rdx, badDir
    49                              <1> badCmn:
    50 00001EF0 E97B210000          <1>     jmp printString     ;This will be made nuanced later, to agree with DOS
    51                              <1> badCmdError:
    52 00001EF5 488D15F1E9FFFF      <1>     lea rdx, badCmd
    53 00001EFC EBF2                <1>     jmp short badCmn
    54                              <1> dir:
    55                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    56 00001EFE C6058FE6FFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    57 00001F05 C60589E6FFFF00      <1>     mov byte [dirLineCtr], 0
    58 00001F0C C70580E6FFFF000000- <1>     mov dword [dirFileCtr], 0
    58 00001F15 00                  <1>
    59 00001F16 C6057EE6FFFF00      <1>     mov byte [dirSrchDir], 0
    60 00001F1D 66C7056AE5FFFF0000  <1>     mov word [searchSpec], 0
    61 00001F26 488D3DF0E6FFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    62 00001F2D C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    63 00001F30 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    63 00001F39 3F                  <1>
    64 00001F3A 48894701            <1>     mov qword [rdi + fcb.filename], rax
    65 00001F3E C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    66                              <1>     ;Start by scanning for the switches
    67 00001F45 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    68 00001F4C 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    69                              <1> .scanNew:
    70 00001F4F E867230000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    71 00001F54 AC                  <1>     lodsb   ;Get this char
    72 00001F55 3C0D                <1>     cmp al, CR
    73 00001F57 744D                <1>     je .scanDone
    74 00001F59 3A05CBE0FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    75 00001F5F 7524                <1>     jne .notSwitch
    76 00001F61 AC                  <1>     lodsb   ;Get the next char
    77 00001F62 E839230000          <1>     call ucChar
    78 00001F67 3C57                <1>     cmp al, "W"
    79 00001F69 7509                <1>     jne .notWide
    80 00001F6B 800D22E6FFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    81 00001F72 EBDB                <1>     jmp short .scanNew
    82                              <1> .notWide:
    83 00001F74 3C50                <1>     cmp al, "P"
    84 00001F76 0F8537FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    85 00001F7C 800D11E6FFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    86 00001F83 EBCA                <1>     jmp short .scanNew
    87                              <1> .notSwitch:
    88 00001F85 F60508E6FFFF04      <1>     test byte [dirFlags], dirFileType
    89 00001F8C 0F8521FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    90                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    91 00001F92 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    92 00001F95 E8AD240000          <1>     call copyArgumentToSearchSpec   
    93 00001F9A 48FFCE              <1>     dec rsi ;Point back to the terminator char
    94 00001F9D 800DF0E5FFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    95 00001FA4 EBA9                <1>     jmp short .scanNew
    96                              <1> .scanDone:
    97 00001FA6 F605E7E5FFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    98 00001FAD 7438                <1>     jz .currentDrv
    99                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   100 00001FAF 488D35DAE4FFFF      <1>     lea rsi, searchSpec
   101 00001FB6 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   102 00001FBA 752B                <1>     jne .currentDrv
   103                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   104 00001FBC 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   105 00001FC1 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   106 00001FC5 B801290000          <1>     mov eax, 2901h   ;Parse filename
   107 00001FCA CD21                <1>     int 21h
   108 00001FCC 3CFF                <1>     cmp al, -1
   109 00001FCE 0F84E8FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   110                              <1>     ;Else the drive in the fcb is valid
   111 00001FD4 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   112 00001FD9 84C0                <1>     test al, al
   113 00001FDB 740A                <1>     jz .currentDrv
   114 00001FDD FEC8                <1>     dec al  ;Convert to 0 based drive number
   115 00001FDF 8805B5E5FFFF        <1>     mov byte [dirDrv], al
   116 00001FE5 EB0B                <1>     jmp short .dirPrintVol
   117                              <1> .currentDrv:
   118 00001FE7 E88C220000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   119 00001FEC 8805A8E5FFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   120                              <1> .dirPrintVol:
   121 00001FF2 488D3597E4FFFF      <1>     lea rsi, searchSpec
   122                              <1> ;Now construct the path on dirSrchDir.
   123 00001FF9 488D3D9BE5FFFF      <1>     lea rdi, dirSrchDir
   124 00002000 0FB60593E5FFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   125 00002007 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   126 00002009 0441                <1>     add al, "A" ;Turn into a letter
   127 0000200B B43A                <1>     mov ah, ":"
   128 0000200D 66AB                <1>     stosw   ;Store X: into the search path
   129 0000200F B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   130 00002014 CD2F                <1>     int 2fh
   131 00002016 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   132 00002018 0F849EFEFFFF        <1>     je badDriveError
   133                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   134 0000201E 8A0505E0FFFF        <1>     mov al, byte [pathSep]
   135 00002024 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   136 00002026 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   137 00002028 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   138 00002029 FEC2                <1>     inc dl  ;Increment by 1
   139 0000202B 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   140 0000202E B800470000          <1>     mov eax, 4700h  ;Print current working directory
   141 00002033 CD21                <1>     int 21h
   142 00002035 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   143                              <1>     ;rsi points to the first char in the provided path.
   144                              <1>     ;rdi points to the first char of the cwd.
   145 00002038 31C0                <1>     xor eax, eax
   146                              <1> .goToEndOfCwd:
   147                              <1> ;Move to the end of the string, could use repne?
   148 0000203A 3807                <1>     cmp byte [rdi], al
   149 0000203C 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   150 0000203E 48FFC7              <1>     inc rdi
   151 00002041 EBF7                <1>     jmp short .goToEndOfCwd
   152                              <1> .prepCopy:
   153 00002043 8A05E0DFFFFF        <1>     mov al, byte [pathSep]
   154 00002049 3806                <1>     cmp byte [rsi], al
   155 0000204B 7412                <1>     je .copyPathLoop
   156 0000204D B43A                <1>     mov ah, ":"
   157 0000204F 86C4                <1>     xchg al, ah
   158 00002051 663947FE            <1>     cmp word [rdi - 2], ax
   159 00002055 7408                <1>     je .copyPathLoop
   160 00002057 88E0                <1>     mov al, ah
   161 00002059 3847FF              <1>     cmp byte [rdi - 1], al
   162 0000205C 7401                <1>     je .copyPathLoop
   163 0000205E AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   164                              <1> .copyPathLoop:
   165 0000205F AC                  <1>     lodsb
   166 00002060 3A05C3DFFFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   167 00002066 7509                <1>     jne .checkDot  ;If not, store it
   168                              <1> .lpPathseps:
   169 00002068 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   170 0000206A 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   171 0000206C 48FFC6              <1>     inc rsi
   172 0000206F EBF7                <1>     jmp short .lpPathseps
   173                              <1> .checkDot:
   174 00002071 3C2E                <1>     cmp al, "."
   175 00002073 7407                <1>     je .dots
   176                              <1> .store:
   177 00002075 AA                  <1>     stosb
   178 00002076 84C0                <1>     test al, al ;Was the char we just copied a null?
   179 00002078 7472                <1>     jz .exitPathCopy
   180 0000207A EBE3                <1>     jmp short .copyPathLoop
   181                              <1> .dots:
   182                              <1>     ;Here handle dot and dot dot
   183                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   184                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   185                              <1>     ; by 1. If it is null, go to top of loop.
   186                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   187 0000207C 8A25A7DFFFFF        <1>     mov ah, byte [pathSep]
   188 00002082 3867FF              <1>     cmp byte [rdi - 1], ah  
   189 00002085 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   190 00002087 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   191 00002089 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   192 0000208C 7413                <1>     je .twoDot
   193                              <1>     ;This is only a "current dir" when next char is pathsep or null
   194 0000208E 3A2595DFFFFF        <1>     cmp ah, byte [pathSep]
   195 00002094 7406                <1>     je .skipThisPathsep
   196 00002096 84E4                <1>     test ah, ah
   197 00002098 74C5                <1>     jz .copyPathLoop
   198 0000209A EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   199                              <1> .skipThisPathsep:
   200                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   201 0000209C 48FFC6              <1>     inc rsi ;Point to the pathsep
   202 0000209F EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   203                              <1> .twoDot:
   204                              <1>     ;Woohoo, this works!
   205 000020A1 48FFC6              <1>     inc rsi ;Move past the second dot
   206 000020A4 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   207 000020A6 3A257DDFFFFF        <1>     cmp ah, byte [pathSep]
   208 000020AC 7408                <1>     je .tdOk
   209 000020AE 84E4                <1>     test ah, ah
   210 000020B0 0F85FDFDFFFF        <1>     jne badParamError
   211                              <1> .tdOk:
   212 000020B6 8A056DDFFFFF        <1>     mov al, byte byte [pathSep]
   213 000020BC 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   214 000020C0 0F84EDFDFFFF        <1>     je badParamError
   215 000020C6 4881EF02000000      <1>     sub rdi, 2
   216 000020CD 31C9                <1>     xor ecx, ecx
   217 000020CF FFC9                <1>     dec ecx
   218 000020D1 FD                  <1>     std
   219 000020D2 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   220 000020D4 FC                  <1>     cld
   221 000020D5 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   222 000020DC 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   223 000020DE 0F847BFFFFFF        <1>     jz .copyPathLoop
   224 000020E4 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   225 000020E7 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   226                              <1> .exitPathCopy:
   227                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   228 000020EC 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   229 000020F3 8A0530DFFFFF        <1>     mov al, byte [pathSep]
   230 000020F9 B43A                <1>     mov ah, ":"
   231 000020FB 86C4                <1>     xchg al, ah
   232 000020FD 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   233 00002101 7409                <1>     je .skipOverwrite
   234 00002103 88E0                <1>     mov al, ah
   235 00002105 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   236 00002107 7503                <1>     jne .skipOverwrite
   237 00002109 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   238                              <1> .skipOverwrite:
   239 0000210C 488D3588E4FFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   240 00002113 4889F7              <1>     mov rdi, rsi
   241 00002116 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   242 0000211B CD2F                <1>     int 2fh
   243 0000211D E832230000          <1>     call scanForWildcards
   244 00002122 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   245 00002124 4889F2              <1>     mov rdx, rsi
   246 00002127 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   247 0000212B 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   248                              <1> .notNull:
   249 0000212D E88E240000          <1>     call setDTA ;Set the DTA
   250 00002132 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   251 00002137 B8004E0000          <1>     mov eax, 4E00h ;Find first
   252 0000213C CD21                <1>     int 21h
   253 0000213E 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   254                              <1> ;Now we have searched for the file, is a directory?
   255 00002140 F605E4DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   256 00002147 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   257                              <1>     ;Here we are searching IN a directory. Default search pattern!
   258 00002149 31C0                <1>     xor eax, eax
   259 0000214B 31C9                <1>     xor ecx, ecx
   260 0000214D FFC9                <1>     dec ecx
   261 0000214F F2AE                <1>     repne scasb
   262 00002151 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   263 00002154 EB40                <1>     jmp short .wcDefaultSearch
   264                              <1> .wcSearchPattern:
   265                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   266                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   267 00002156 31C0                <1>     xor eax, eax
   268 00002158 31C9                <1>     xor ecx, ecx
   269 0000215A FFC9                <1>     dec ecx
   270 0000215C F2AE                <1>     repne scasb ;Scan forwards
   271                              <1>     ;Here rdi points past the null at the end
   272 0000215E 8A05C5DEFFFF        <1>     mov al, byte [pathSep]
   273 00002164 31C9                <1>     xor ecx, ecx
   274 00002166 FFC9                <1>     dec ecx
   275 00002168 FD                  <1>     std ;Search backwards
   276 00002169 F2AE                <1>     repne scasb
   277 0000216B FC                  <1>     cld ;Search forwards again
   278 0000216C 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   279 0000216F 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   280 00002173 7503                <1>     jne .wcsp1
   281 00002175 48FFC7              <1>     inc rdi ;Go one char forwards
   282                              <1> .wcsp1:
   283                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   284 00002178 57                  <1>     push rdi
   285 00002179 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   286 0000217B 7503                <1>     jne .wcsp2
   287 0000217D 48FFC7              <1>     inc rdi
   288                              <1> .wcsp2:
   289 00002180 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   290 00002183 488D3D93E4FFFF      <1>     lea rdi, dirSrchFCB
   291 0000218A B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   292 0000218F CD21                <1>     int 21h
   293 00002191 5F                  <1>     pop rdi
   294 00002192 31C0                <1>     xor eax, eax
   295 00002194 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   296                              <1> .wcDefaultSearch:
   297 00002196 0FB605FDE3FFFF      <1>     movzx eax, byte [dirDrv] 
   298 0000219D E8FB130000          <1>     call volume.dirEP
   299 000021A2 488D1516EAFFFF      <1>     lea rdx, dirMain    ;Print message intro
   300 000021A9 B409                <1>     mov ah, 09h
   301 000021AB CD21                <1>     int 21h
   302 000021AD C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   303 000021B0 488D15E4E3FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   304 000021B7 B409                <1>     mov ah, 09h
   305 000021B9 CD21                <1>     int 21h
   306 000021BB C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   307 000021BE 488D15B0E6FFFF      <1>     lea rdx, crlf2
   308 000021C5 B409                <1>     mov ah, 09h
   309 000021C7 CD21                <1>     int 21h
   310                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   311                              <1> ;rdi points to the terminating null
   312 000021C9 8A055ADEFFFF        <1>     mov al, byte [pathSep]
   313 000021CF 3847FF              <1>     cmp byte [rdi - 1], al
   314 000021D2 7403                <1>     je .root
   315 000021D4 48FFC7              <1>     inc rdi
   316                              <1> .root:
   317 000021D7 48FFCF              <1>     dec rdi ;Point back to the pathsep
   318 000021DA AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   319 000021DB 488D353CE4FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   320 000021E2 E8AF210000          <1>     call FCBToAsciiz    ;Terminates for free
   321 000021E7 E801000000          <1>     call .searchForFile
   322                              <1>     return
    13                              <2> %%_ret:
    14 000021EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> .searchForFile:
   325 000021ED E8CE230000          <1>     call setDTA
   326 000021F2 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   327 000021F7 488D159DE3FFFF      <1>     lea rdx, dirSrchDir
   328 000021FE B8004E0000          <1>     mov eax, 4E00h ;Find first
   329 00002203 CD21                <1>     int 21h
   330 00002205 720B                <1>     jc .dirNoMoreFiles
   331                              <1> .findNext:
   332 00002207 E880000000          <1>     call .dirPrintFileData  ;Print the file information
   333 0000220C B44F                <1>     mov ah, 4Fh
   334 0000220E CD21                <1>     int 21h
   335 00002210 73F5                <1>     jnc .findNext 
   336                              <1> .dirNoMoreFiles:
   337 00002212 F6057BE3FFFF01      <1>     test byte [dirFlags], dirWideType
   338 00002219 740B                <1>     jz .dirNoEndNewLine
   339 0000221B 488D1550E6FFFF      <1>     lea rdx, crlf   ;Only need this for /W
   340 00002222 B409                <1>     mov ah, 09h
   341 00002224 CD21                <1>     int 21h
   342                              <1> .dirNoEndNewLine:
   343                              <1>     ;Now we print the number of files and the number of bytes on the disk
   344 00002226 F70566E3FFFFFFFFFF- <1>     test dword [dirFileCtr], -1
   344 0000222F FF                  <1>
   345 00002230 750D                <1>     jnz .filesFound
   346                              <1>     ;Else print File not found and exit!
   347 00002232 488D15E6E6FFFF      <1>     lea rdx, fnfMsg
   348 00002239 E8321E0000          <1>     call printString
   349                              <1>     return
    13                              <2> %%_ret:
    14 0000223E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   350                              <1> .filesFound:
   351 0000223F 8B0551E3FFFF        <1>     mov eax, dword [dirFileCtr]   ;Get number of files
   352 00002245 B909000000          <1>     mov ecx, 9
   353 0000224A E819220000          <1>     call printDecimalValLB
   354 0000224F 488D15A2E7FFFF      <1>     lea rdx, dirOk
   355 00002256 B409                <1>     mov ah, 09h
   356 00002258 CD21                <1>     int 21h
   357 0000225A B800360000          <1>     mov eax, 3600h ;Get disk info
   358 0000225F 8A1535E3FFFF        <1>     mov dl, byte [dirDrv]
   359 00002265 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   360 00002267 CD21                <1>     int 21h ;Get disk free space info
   361 00002269 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   362 0000226C 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   363 0000226F 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   364 00002271 F7E1                <1>     mul ecx ;Get bytes per cluster
   365 00002273 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   366                              <1>     ;rax now has the number of free bytes on the disk
   367 00002276 B911000000          <1>     mov ecx, 17     ;2 Tb with commas needs this 
   368 0000227B E8E8210000          <1>     call printDecimalValLB
   369 00002280 488D157BE7FFFF      <1>     lea rdx, bytesOk
   370 00002287 B409                <1>     mov ah, 09h
   371 00002289 CD21                <1>     int 21h
   372                              <1>     return
    13                              <2> %%_ret:
    14 0000228B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> .dirPrintFileData:
   375                              <1> ;Use cmdFcb to build the file name with space
   376                              <1> ;Start by print the name (same for both cases)
   377                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   378 0000228C F60598DEFFFF46      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles | dirCharDev
   379                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002293 75(8B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   380 00002295 488D3598DEFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   381 0000229C 488D3D63DEFFFF      <1>     lea rdi, cmdFcb
   382 000022A3 E880200000          <1>     call asciiFilenameToFCB
   383 000022A8 488D1557DEFFFF      <1>     lea rdx, cmdFcb
   384 000022AF B908000000          <1>     mov ecx, 8  ;Print 8 chars
   385 000022B4 BB01000000          <1>     mov ebx, 1  ;STDOUT
   386 000022B9 B440                <1>     mov ah, 40h ;Write handle
   387 000022BB CD21                <1>     int 21h
   388 000022BD 52                  <1>     push rdx
   389 000022BE B220                <1>     mov dl, " "
   390 000022C0 B402                <1>     mov ah, 02h ;Print char
   391 000022C2 CD21                <1>     int 21h
   392 000022C4 5A                  <1>     pop rdx
   393 000022C5 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   394 000022CC B903000000          <1>     mov ecx, 3  ;Print three chars
   395 000022D1 BB01000000          <1>     mov ebx, 1  ;STDOUT
   396 000022D6 B440                <1>     mov ah, 40h ;Write handle
   397 000022D8 CD21                <1>     int 21h
   398 000022DA F605B3E2FFFF01      <1>     test byte [dirFlags], dirWideType
   399 000022E1 757B                <1>     jnz .widePrint
   400                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   401                              <1>     ;Now check if a DIR
   402 000022E3 F60541DEFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   403 000022EA 7422                <1>     jz .dirPrintNotDir
   404 000022EC 488D151DE7FFFF      <1>     lea rdx, dirLbl
   405 000022F3 B409                <1>     mov ah, 09h
   406 000022F5 CD21                <1>     int 21h
   407 000022F7 488D159BEBFFFF      <1>     lea rdx, threeSpc
   408 000022FE B409                <1>     mov ah, 09h
   409 00002300 CD21                <1>     int 21h
   410 00002302 B409                <1>     mov ah, 09h
   411 00002304 CD21                <1>     int 21h
   412 00002306 B220                <1>     mov dl, SPC
   413 00002308 B402                <1>     mov ah, 02h
   414 0000230A CD21                <1>     int 21h
   415 0000230C EB1C                <1>     jmp short .dirPrintFileDT
   416                              <1> .dirPrintNotDir:
   417                              <1> ;Here we print the file size
   418 0000230E B220                <1>     mov dl, " "
   419 00002310 B402                <1>     mov ah, 02h
   420 00002312 CD21                <1>     int 21h
   421 00002314 8B0516DEFFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   422 0000231A B90D000000          <1>     mov ecx, 13
   423 0000231F E844210000          <1>     call printDecimalValLB
   424 00002324 B220                <1>     mov dl, SPC
   425 00002326 B402                <1>     mov ah, 02h
   426 00002328 CD21                <1>     int 21h
   427                              <1> .dirPrintFileDT:
   428 0000232A 0FB705FDDDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   429 00002331 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   430 00002333 E8DE1A0000          <1>     call printDate
   431 00002338 488D155AEBFFFF      <1>     lea rdx, threeSpc
   432 0000233F B409                <1>     mov ah, 09h
   433 00002341 CD21                <1>     int 21h
   434 00002343 0FB705E2DDFFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   435 0000234A E8E91B0000          <1>     call printTime
   436 0000234F 488D151CE5FFFF      <1>     lea rdx, crlf
   437 00002356 B409                <1>     mov ah, 09h
   438 00002358 CD21                <1>     int 21h
   439 0000235A B017                <1>     mov al, 23  ;23 lines... for the next bit
   440 0000235C EB0D                <1>     jmp short .dirPrintNameExit
   441                              <1> .widePrint:
   442                              <1> ;If /W, print name space ext space space space space
   443 0000235E 488D152FEBFFFF      <1>     lea rdx, fourSpc
   444 00002365 B409                <1>     mov ah, 09h ;Print string
   445 00002367 CD21                <1>     int 21h
   446 00002369 B073                <1>     mov al, 5*23    ;5 entries per line...
   447                              <1> .dirPrintNameExit:
   448 0000236B FF0525E2FFFF        <1>     inc dword [dirFileCtr]   ;Increment file counter
   449 00002371 FE051EE2FFFF        <1>     inc byte [dirLineCtr]
   450 00002377 380518E2FFFF        <1>     cmp byte [dirLineCtr], al
   451                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000237D 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000237F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   452 00002380 F6050DE2FFFF02      <1>     test byte [dirFlags], dirPageType
   453 00002387 741A                <1>     jz .dirPrnNoPag
   454 00002389 488D15A7E6FFFF      <1>     lea rdx, pauseMes
   455 00002390 B409                <1>     mov ah, 09h
   456 00002392 CD21                <1>     int 21h
   457 00002394 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   458 00002396 CD21                <1>     int 21h
   459 00002398 488D15D3E4FFFF      <1>     lea rdx, crlf   ;Force new line
   460 0000239F B409                <1>     mov ah, 09h
   461 000023A1 CD21                <1>     int 21h
   462                              <1> .dirPrnNoPag:
   463 000023A3 C605EBE1FFFF00      <1>     mov byte [dirLineCtr], 0
   464                              <1>     return
    13                              <2> %%_ret:
    14 000023AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> chdir:
   467 000023AB F605F2DCFFFFFF      <1>     test byte [arg1Flg], -1
   468 000023B2 754D                <1>     jnz .changeDir
   469                              <1>     ;Print CWD
   470                              <1> .printCWD:
   471 000023B4 E82C1D0000          <1>     call putCWDInPrompt ;Exactly the same procedure
   472 000023B9 E8AB1C0000          <1>     call printCRLF
   473                              <1>     return
    13                              <2> %%_ret:
    14 000023BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .printDiskCWD:
   475                              <1> ;Print CWD for a specified drive
   476 000023BF 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   477 000023C3 88D0                <1>     mov al, dl
   478 000023C5 0440                <1>     add al, "@" ;Get the UC letter
   479 000023C7 B43A                <1>     mov ah, ":"
   480 000023C9 488D3DC0E0FFFF      <1>     lea rdi, searchSpec
   481 000023D0 66AB                <1>     stosw   ;Store X:, rdi+=2
   482 000023D2 8A0551DCFFFF        <1>     mov al, byte [pathSep]
   483 000023D8 AA                  <1>     stosb   ;Store pathSep, inc rdi
   484 000023D9 B447                <1>     mov ah, 47h ;Get Current Working Directory
   485 000023DB 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   486 000023DE CD21                <1>     int 21h
   487 000023E0 E8B11E0000          <1>     call strlen
   488 000023E5 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   489 000023EB B440                <1>     mov ah, 40h ;Write to handle
   490 000023ED BB01000000          <1>     mov ebx, 1  ;STDOUT
   491 000023F2 488D1597E0FFFF      <1>     lea rdx, searchSpec
   492 000023F9 CD21                <1>     int 21h
   493 000023FB E8691C0000          <1>     call printCRLF
   494                              <1>     return
    13                              <2> %%_ret:
    14 00002400 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   495                              <1> .changeDir:
   496 00002401 8A059FDCFFFF        <1>     mov al, byte [arg1FCBret]
   497 00002407 3CFF                <1>     cmp al, -1 
   498 00002409 0F84ADFAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   499 0000240F E81B200000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   500 00002414 488D1575E0FFFF      <1>     lea rdx, searchSpec
   501 0000241B B43B                <1>     mov ah, 3Bh ;CHDIR
   502 0000241D CD21                <1>     int 21h
   503 0000241F 0F82C4FAFFFF        <1>     jc badDirError
   504                              <1>     return
    13                              <2> %%_ret:
    14 00002425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> mkdir:
   507 00002426 F60577DCFFFFFF      <1>     test byte [arg1Flg], -1
   508 0000242D 0F8492FAFFFF        <1>     jz badArgError
   509 00002433 F6056DDCFFFFFF      <1>     test byte [arg2Flg], -1
   510 0000243A 0F8585FAFFFF        <1>     jnz badArgError
   511                              <1>     ;We have exactly one argument
   512 00002440 8A0560DCFFFF        <1>     mov al, byte [arg1FCBret]
   513 00002446 3CFF                <1>     cmp al, -1 
   514 00002448 0F846EFAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   515 0000244E E8DC1F0000          <1>     call buildCommandPath
   516 00002453 488D1536E0FFFF      <1>     lea rdx, searchSpec
   517 0000245A B800390000          <1>     mov eax, 3900h  ;MKDIR
   518 0000245F CD21                <1>     int 21h
   519                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002461 73(25)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   520                              <1> .badMake:   ;Else, bad make
   521 00002463 488D1501E7FFFF      <1>     lea rdx, badMD
   522 0000246A E9011C0000          <1>     jmp printString
   523                              <1> 
   524                              <1> rmdir:
   525 0000246F F6052EDCFFFFFF      <1>     test byte [arg1Flg], -1
   526 00002476 0F8449FAFFFF        <1>     jz badArgError
   527 0000247C F60524DCFFFFFF      <1>     test byte [arg2Flg], -1
   528 00002483 0F853CFAFFFF        <1>     jnz badArgError
   529                              <1>     ;We have exactly one argument
   530 00002489 8A0517DCFFFF        <1>     mov al, byte [arg1FCBret]
   531 0000248F 3CFF                <1>     cmp al, -1 
   532 00002491 0F8425FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   533 00002497 E8931F0000          <1>     call buildCommandPath
   534 0000249C 488D15EDDFFFFF      <1>     lea rdx, searchSpec
   535 000024A3 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   536 000024A8 CD21                <1>     int 21h
   537                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000024AA 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000024AC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   538                              <1> .badRemove:   ;Else, bad make
   539 000024AD 488D15D4E6FFFF      <1>     lea rdx, badRD
   540 000024B4 E9B71B0000          <1>     jmp printString
   541                              <1> 
   542                              <1> copy:
   543 000024B9 66C705BBE2FFFFFFFF  <1>     mov word [sourceHdl], -1
   544 000024C2 66C705B4E2FFFFFFFF  <1>     mov word [destHdl], -1
   545 000024CB 66C705ADE2FFFFFFFF  <1>     mov word [srcHdlInfo], -1
   546 000024D4 C605B6E2FFFF00      <1>     mov byte [bCpFlg], 0    ;State flag!
   547 000024DB 48C7059DE2FFFF0000- <1>     mov qword [cpBufPtr], 0 ;Init to null ptr!
   547 000024E4 0000                <1>
   548 000024E6 66C7059CE2FFFF0000  <1>     mov word [wCpBufSz], 0  ;Clear buffer count        
   549 000024EF C70594E2FFFF000000- <1>     mov dword [dCpCnt], 0   ;Clear file count
   549 000024F8 00                  <1>
   550 000024F9 C6055DE1FFFF00      <1>     mov byte [srcSpec], 0   ;Clear first bytes of the buffers
   551 00002500 C605D8E1FFFF00      <1>     mov byte [destSpec], 0
   552 00002507 48C7054FE2FFFF0000- <1>     mov qword [srcPtr], 0
   552 00002510 0000                <1>
   553 00002512 48C7054CE2FFFF0000- <1>     mov qword [destPtr], 0
   553 0000251B 0000                <1>
   554 0000251D E89E200000          <1>     call setDTA
   555 00002522 B800540000          <1>     mov eax, 5400h  ;Get verify flag
   556 00002527 CD21                <1>     int 21h
   557 00002529 88054DE2FFFF        <1>     mov byte [verifyFlg], al    ;Save verify flag!
   558                              <1> ;Start with getting a disk buffer, of the size of the internal disk buffers. 
   559                              <1> ;If we cant allocate full diskbuffer, get as much as we can
   560                              <1> ;Diskbuffer as thats the best optimisation for IO buffers
   561 0000252F B800520000          <1>     mov eax, 5200h
   562 00002534 CD21                <1>     int 21h ;Get in rbx ptr to sysvars
   563 00002536 0FB74B20            <1>     movzx ecx, word [rbx + 20h] ;Get the internal buffer size in ecx!
   564 0000253A 89CB                <1>     mov ebx, ecx
   565 0000253C C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs, save bytes in ecx
   566 0000253F B800480000          <1>     mov eax, 4800h
   567 00002544 CD21                <1>     int 21h
   568 00002546 731E                <1>     jnc .bufOk
   569 00002548 85DB                <1>     test ebx, ebx       ;Cannot allocate? Yikes...
   570 0000254A 750C                <1>     jnz .okSize
   571                              <1> .badAlloc:
   572                              <1> ;Not enough memory error!
   573 0000254C 488D1588E4FFFF      <1>     lea rdx, cpNoMem
   574 00002553 E998F9FFFF          <1>     jmp badCmn  ;Print the string and return!
   575                              <1> .okSize:
   576 00002558 89D9                <1>     mov ecx, ebx    
   577 0000255A C1E104              <1>     shl ecx, 4  ;Convert into bytes from paragraphs
   578 0000255D B800480000          <1>     mov eax, 4800h
   579 00002562 CD21                <1>     int 21h
   580 00002564 72E6                <1>     jc .badAlloc
   581                              <1> .bufOk:
   582 00002566 48890516E2FFFF      <1>     mov qword [cpBufPtr], rax   ;Save ptr to xfr area
   583 0000256D 66890D17E2FFFF      <1>     mov word [wCpBufSz], cx     ;Save buffer size
   584                              <1> ;Go to the end of the cmd line and search backwards for the destination first
   585 00002574 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   586 0000257B 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]
   587 00002583 FFC9                <1>     dec ecx ;Turn into offset
   588 00002585 4801CE              <1>     add rsi, rcx
   589 00002588 31D2                <1>     xor edx, edx    ;Use edx as a counter for number of destination switches
   590 0000258A FD                  <1>     std ;Go in reverse
   591                              <1> .sd:    ;At this point, any switch chars affect destination!
   592 0000258B E82B1D0000          <1>     call skipDelimiters ;skipDelimiters in reverse!
   593 00002590 8A0594DAFFFF        <1>     mov al, byte [switchChar]
   594 00002596 384601              <1>     cmp byte [rsi + 1], al  ;Did we hit a switch?
   595 00002599 7509                <1>     jne .noSwitch
   596                              <1>     ;Here we hit a switchchar! Process it! rsi points to char before switchchar
   597 0000259B 0FB64602            <1>     movzx eax, byte [rsi + 2]   ;Get the char
   598 0000259F 50                  <1>     push rax        ;Push the switchchar
   599 000025A0 FFC2                <1>     inc edx         ;Inc the counter
   600 000025A2 EBE7                <1>     jmp short .sd   ;Now go back to skipping delimiters again!
   601                              <1> .noSwitch:
   602                              <1> ;Ok so we hit a path. Now set the flags based on the stack!
   603 000025A4 85D2                <1>     test edx, edx
   604 000025A6 7412                <1>     jz .noDestSwitch
   605                              <1> .ns1:
   606 000025A8 58                  <1>     pop rax ;Pop the switch char
   607 000025A9 B304                <1>     mov bl, ascDes
   608 000025AB E805040000          <1>     call .doSwitchRev
   609 000025B0 0F8570040000        <1>     jnz .badExit    ;Invalid switch, abort procedure!    
   610 000025B6 FFCA                <1>     dec edx
   611 000025B8 75EE                <1>     jnz .ns1
   612                              <1> .noDestSwitch:
   613                              <1> ;Now search for the starting delimiter or start of line
   614 000025BA 48FFC6              <1>     inc rsi ;Go to the last char in the path
   615                              <1> .noSwitchLp:
   616 000025BD AC                  <1>     lodsb   ;Get char at rsi, go back a char
   617 000025BE E8061D0000          <1>     call isALdelimiter
   618 000025C3 7412                <1>     je .destFnd
   619 000025C5 8A055FDAFFFF        <1>     mov al, byte [switchChar]
   620 000025CB 3846FF              <1>     cmp byte [rsi - 1], al  ;Peek if an embedded switch?
   621 000025CE 7404                <1>     je .se  ;Jump if so!
   622 000025D0 FFC9                <1>     dec ecx ;One less char left to search
   623 000025D2 EBE9                <1>     jmp short .noSwitchLp
   624                              <1> .se:
   625 000025D4 48FFCE              <1>     dec rsi     ;Dec to make the below work!
   626                              <1> .destFnd:
   627 000025D7 4881C602000000      <1>     add rsi, 2  ;Go back to the first char past the delimiter
   628 000025DE FC                  <1>     cld 
   629 000025DF 4889F5              <1>     mov rbp, rsi    ;Save this ptr in rbp temporarily
   630 000025E2 488D3DF6E0FFFF      <1>     lea rdi, destSpec
   631 000025E9 57                  <1>     push rdi
   632 000025EA E8FD1D0000          <1>     call cpDelimPathToBufz ;Copy this over!   
   633 000025EF 5F                  <1>     pop rdi
   634 000025F0 E87D1D0000          <1>     call findLastPathComponant  ;Get last path componant in rdi
   635 000025F5 48893D6DE1FFFF      <1>     mov qword [destPtr], rdi
   636 000025FC 807F013A            <1>     cmp byte [rdi + 1], ":" ;Is this a colon?
   637 00002600 7517                <1>     jne .destEnd    ;Dont worry
   638 00002602 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   639 00002604 E8971C0000          <1>     call ucChar             ;Make sure we UC the drive letter
   640 00002609 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   641 0000260B 4881C702000000      <1>     add rdi, 2              ;Point to this null
   642 00002612 48893D50E1FFFF      <1>     mov qword [destPtr], rdi    ;Store chars over the null
   643                              <1> .destEnd:
   644                              <1> ;Now start with source processing!! Clear the binSrc bit in bCpFlg
   645 00002619 802571E1FFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;Mightve been accidentally set by dest flags
   646 00002620 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   647                              <1> .srcLp:
   648 00002627 E88F1C0000          <1>     call skipDelimiters 
   649 0000262C 8A05F8D9FFFF        <1>     mov al, byte [switchChar]
   650 00002632 3806                <1>     cmp byte [rsi], al
   651 00002634 7516                <1>     jne .noSrcSw    ;Not switch! Must be filename start!
   652                              <1>     ;rsi points to switch after switchchar
   653 00002636 B301                <1>     mov bl, ascSrc
   654 00002638 E872030000          <1>     call .doSwitch
   655 0000263D 0F85E3030000        <1>     jnz .badExit
   656 00002643 4881C602000000      <1>     add rsi, 2
   657 0000264A EBDB                <1>     jmp short .srcLp    ;Now keep searching for start of filename
   658                              <1> .noSrcSw:
   659 0000264C 4839F5              <1>     cmp rbp, rsi
   660 0000264F 7527                <1>     jne .noSameSrcDest
   661                              <1>     ;Here if the destination we specified earlier is the same as the source
   662                              <1>     ;This means, the actual destination is the current default drive
   663                              <1>     ; on the current directory. Pass to DOS X:FILENAME.EXT<NUL> string.
   664 00002651 E8221C0000          <1>     call getCurrentDrive    ;Get current drive
   665 00002656 0441                <1>     add al, "A"             ;Turn into a drive letter
   666 00002658 B43A                <1>     mov ah, ":"
   667 0000265A 0FB7C0              <1>     movzx eax, ax
   668 0000265D 89057CE0FFFF        <1>     mov dword [destSpec], eax   ;Add a default null terminator
   669 00002663 488D3D77E0FFFF      <1>     lea rdi, destSpec+2         ;Point to the null after the colon
   670 0000266A 48893DF8E0FFFF      <1>     mov qword [destPtr], rdi    ;Copy the filenames here
   671 00002671 800D19E1FFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Copy to curdir in cur drive
   672                              <1> .noSameSrcDest:
   673 00002678 488D3DDEDFFFFF      <1>     lea rdi, srcSpec            ;rsi now goes into the source spec!
   674 0000267F 57                  <1>     push rdi
   675 00002680 E8671D0000          <1>     call cpDelimPathToBufz      ;Copy this over! rsi points past delimiter
   676 00002685 5F                  <1>     pop rdi
   677                              <1>     ;Now go forwards and pick up any more switches.
   678                              <1>     ;Also any "+" signs here!!
   679 00002686 48FFCE              <1>     dec rsi ;Point back to the first delimiter
   680                              <1> .swSrcSwPost:
   681 00002689 E82D1C0000          <1>     call skipDelimiters ;Skips trailing delimiters
   682 0000268E 8A0596D9FFFF        <1>     mov al, byte [switchChar]
   683 00002694 3806                <1>     cmp byte [rsi], al
   684 00002696 7516                <1>     jne .swSrcSwPostExit
   685                              <1>     ;rsi points to switch after switchchar
   686 00002698 B301                <1>     mov bl, ascSrc
   687 0000269A E810030000          <1>     call .doSwitch  ;Puts us at the char past the switch itself
   688 0000269F 0F8581030000        <1>     jnz .badExit
   689 000026A5 4881C602000000      <1>     add rsi, 2      ;Go past the switch
   690 000026AC EBDB                <1>     jmp short .swSrcSwPost
   691                              <1> .swSrcSwPostExit:
   692 000026AE 4889FE              <1>     mov rsi, rdi
   693 000026B1 E89E1D0000          <1>     call scanForWildcards   ;Find if we have a WC in this source!
   694 000026B6 7507                <1>     jnz .oneCp
   695 000026B8 800DD2E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We are copying many files. Disp names
   696                              <1> .oneCp:
   697 000026BF E8AE1C0000          <1>     call findLastPathComponant  ;Get last componant of src in rdi
   698 000026C4 48893D96E0FFFF      <1>     mov qword [srcPtr], rdi     ;Now save the last componant
   699 000026CB 807F013A            <1>     cmp byte [rdi + 1], ":"     ;Is this a colon?
   700 000026CF 7517                <1>     jne .srcEnd             ;Dont worry
   701 000026D1 8A07                <1>     mov al, byte [rdi]      ;Pick up drive letter
   702 000026D3 E8C81B0000          <1>     call ucChar             ;Make sure we UC the drive letter
   703 000026D8 8807                <1>     mov byte [rdi], al      ;Store the drive letter
   704 000026DA 4881C702000000      <1>     add rdi, 2              ;Point after the colon
   705 000026E1 48893D79E0FFFF      <1>     mov qword [srcPtr], rdi ;Store chars past the colon
   706                              <1> .srcEnd:
   707                              <1> ;Now uppercase both paths
   708 000026E8 488D356EDFFFFF      <1>     lea rsi, srcSpec
   709 000026EF E8B81B0000          <1>     call normalisePath
   710 000026F4 488D3DE4DFFFFF      <1>     lea rdi, destSpec
   711 000026FB E8AC1B0000          <1>     call normalisePath
   712                              <1> ;Now establish if the source is a directory or not!
   713 00002700 F6058AE0FFFF08      <1>     test byte [bCpFlg], wcSrc
   714 00002707 7577                <1>     jnz .checkDestDir   ;Skip check if source has wildcards
   715 00002709 488D154DDFFFFF      <1>     lea rdx, srcSpec
   716 00002710 4889D6              <1>     mov rsi, rdx
   717 00002713 66AD                <1>     lodsw   ;Get the first two chars, is it "X:" style
   718 00002715 80FC3A              <1>     cmp ah, ":"
   719 00002718 7522                <1>     jne .isSrcDir   ;If not, check explicitly
   720 0000271A AC                  <1>     lodsb           ;Get char past :
   721 0000271B 84C0                <1>     test al, al     ;Is byte three nul?
   722 0000271D 740D                <1>     jz .srcStorWc   ;If so, we have "X:<NUL>"
   723 0000271F 3A0504D9FFFF        <1>     cmp al, byte [pathSep]  ;If char past : isnt pathsep, check manually
   724 00002725 7515                <1>     jne .isSrcDir
   725 00002727 AC                  <1>     lodsb           ;Get char past char past "X:\"
   726 00002728 84C0                <1>     test al, al     
   727 0000272A 7510                <1>     jnz .isSrcDir   ;Fall thru is "X:\<NUL>"
   728                              <1> .srcStorWc:
   729                              <1> ;rsi points past the char to store the WC at
   730 0000272C C746FF2A2E2A00      <1>     mov dword [rsi - 1], "*.*"  ;Store with terminating null!
   731 00002733 800D57E0FFFF08      <1>     or byte [bCpFlg], wcSrc     ;We're adding the wildcard to the source!
   732 0000273A EB44                <1>     jmp short .checkDestDir
   733                              <1> .isSrcDir:
   734 0000273C B910000000          <1>     mov ecx, dirDirectory
   735 00002741 B8004E0000          <1>     mov eax, 4E00h
   736 00002746 CD21                <1>     int 21h
   737 00002748 7236                <1>     jc .checkDestDir    ;Wasn't a dir!
   738                              <1>     ;Was the file we found actually a directory?
   739 0000274A 803DDAD9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   740 00002751 752D                <1>     jne .checkDestDir   ;Wasn't a dir
   741 00002753 4889D7              <1>     mov rdi, rdx
   742 00002756 E83B1B0000          <1>     call strlen
   743 0000275B FFC9                <1>     dec ecx
   744 0000275D 4801CF              <1>     add rdi, rcx    ;Move rdi to the terminating null
   745 00002760 8A05C3D8FFFF        <1>     mov al, byte [pathSep]
   746 00002766 3847FF              <1>     cmp byte [rdi - 1], al  ;Do we have a trailing pathsep?
   747 00002769 7401                <1>     je .srctpsp
   748 0000276B AA                  <1>     stosb   ;Store the pathsep over the null, inc rdi
   749                              <1> .srctpsp:
   750 0000276C 48893DEEDFFFFF      <1>     mov qword [srcPtr], rdi ;Update the srcPtr
   751 00002773 B82A2E2A00          <1>     mov eax, "*.*"
   752 00002778 AB                  <1>     stosd   ;Store the WC with terminating nul!
   753 00002779 800D11E0FFFF08      <1>     or byte [bCpFlg], wcSrc ;We're adding the wildcard to the source!
   754                              <1> .checkDestDir:
   755                              <1> ;Now establish if destination is a directory or not!
   756 00002780 F6050AE0FFFF20      <1>     test byte [bCpFlg], mod1Cpy ;If we already know its mod1, skip
   757 00002787 0F855E010000        <1>     jnz .mod1
   758 0000278D 488D354BDFFFFF      <1>     lea rsi, destSpec
   759 00002794 66AD                <1>     lodsw   ;Get the first word, i.e. candidate "X:"
   760 00002796 80FC3A              <1>     cmp ah, ":"
   761 00002799 751A                <1>     jne .isDestDir
   762 0000279B 66AD                <1>     lodsw   ;Get second word, i.e. candidate "\<NUL>" or "<NUL>"
   763 0000279D 84C0                <1>     test al, al ;Is byte three nul?
   764 0000279F 0F8446010000        <1>     jz .mod1    ;If so, it was a X:<NUL>
   765 000027A5 84E4                <1>     test ah, ah ;Is byte four nul?
   766 000027A7 750C                <1>     jnz .isDestDir  ;If not, check if destination is a directory
   767 000027A9 3A057AD8FFFF        <1>     cmp al, byte [pathSep]  ;Else, check if byte 3 was a pathsep!
   768 000027AF 0F8436010000        <1>     je .mod1    ;If it is, then it was a X:\<NUL>
   769                              <1> .isDestDir:
   770                              <1> ;Only here if we suspect the destination pathspec is a path, not file!
   771 000027B5 488D1523DFFFFF      <1>     lea rdx, destSpec
   772 000027BC B910000000          <1>     mov ecx, dirDirectory
   773 000027C1 B8004E0000          <1>     mov eax, 4E00h
   774 000027C6 CD21                <1>     int 21h
   775 000027C8 7237                <1>     jc .mod2
   776                              <1>     ;Was the file we found actually a directory?
   777 000027CA 803D5AD9FFFF10      <1>     cmp byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   778 000027D1 752E                <1>     jne .mod2
   779                              <1>     ;Here we just check if we have a terminating slash on the destination path.
   780                              <1>     ;If not, we need to place one there!
   781 000027D3 4889D7              <1>     mov rdi, rdx    ;Move destSpec
   782 000027D6 E8BB1A0000          <1>     call strlen
   783 000027DB FFC9                <1>     dec ecx         ;Lose the null terminator, zero upper bits
   784 000027DD 4801CF              <1>     add rdi, rcx    ;Go to null terminator
   785 000027E0 0FB60542D8FFFF      <1>     movzx eax, byte [pathSep]
   786 000027E7 3847FF              <1>     cmp byte [rdi - 1], al  ;Is the char before the null a pathsep?
   787 000027EA 0F84FB000000        <1>     je .mod1        ;If so, skip adding another one!
   788 000027F0 66AB                <1>     stosw           ;Else, store the pathsep and null!
   789 000027F2 48FFCF              <1>     dec rdi         ;Point back to null
   790 000027F5 48893D6DDFFFFF      <1>     mov qword [destPtr], rdi    ;Save this pointer
   791 000027FC E9EA000000          <1>     jmp .mod1
   792                              <1> .mod2:
   793                              <1> ;Here we are copying files(s) to file(s)! Filenames are copied according 
   794                              <1> ; to rename wildcard semantics. Always run through this as the destination
   795                              <1> ; name may have wildcards in it! But we don't add any.
   796 00002801 800D89DFFFFF40      <1>     or byte [bCpFlg], mod2Cpy   ;Set to remind us what we are doing!
   797 00002808 488D35D0DEFFFF      <1>     lea rsi, destSpec
   798 0000280F E8401C0000          <1>     call scanForWildcards   ;ZF=ZE if WC cound
   799 00002814 7407                <1>     jz .m2Wc
   800 00002816 800D74DFFFFF10      <1>     or byte [bCpFlg], oneDest   ;The destination is a single file!
   801                              <1> .m2Wc:
   802                              <1> ;Search for the source file
   803 0000281D 488D1539DEFFFF      <1>     lea rdx, srcSpec
   804 00002824 31C9                <1>     xor ecx, ecx    ;Normal and RO files pls
   805 00002826 B8004E0000          <1>     mov eax, 4E00h
   806 0000282B CD21                <1>     int 21h
   807 0000282D 0F82E9010000        <1>     jc .badSrcFile
   808 00002833 488B352FDFFFFF      <1>     mov rsi, qword [destPtr]
   809 0000283A 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Create the permanent destination pattern
   810 0000283E B801290000          <1>     mov eax, 2901h
   811 00002843 CD21                <1>     int 21h
   812                              <1> .md2Lp:
   813 00002845 488D35E8D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   814 0000284C 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Create the source pattern
   815 00002850 B801290000          <1>     mov eax, 2901h
   816 00002855 CD21                <1>     int 21h  
   817                              <1> ;Now depending on source and dest patterns, build a filename in renName
   818 00002857 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
   819 0000285B 488D3D0FDFFFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
   820 00002862 57                  <1>     push rdi
   821 00002863 48A5                <1>     movsq
   822 00002865 66A5                <1>     movsw
   823 00002867 A4                  <1>     movsb
   824 00002868 5F                  <1>     pop rdi
   825 00002869 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
   826 0000286D B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
   827                              <1> .md2NameMake:
   828 00002872 AC                  <1>     lodsb   ;Get the char from the source string
   829 00002873 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
   830 00002876 7502                <1>     jne .noStore    ;Dont store the char there
   831 00002878 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
   832                              <1> .noStore:
   833 0000287A 48FFC7              <1>     inc rdi ;Goto next char position
   834 0000287D FFC9                <1>     dec ecx
   835 0000287F 75F1                <1>     jnz .md2NameMake
   836 00002881 488D35ACD8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   837 00002888 488B3DD2DEFFFF      <1>     mov rdi, qword [srcPtr]
   838 0000288F E8E9190000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
   839 00002894 488D35D6DEFFFF      <1>     lea rsi, renName
   840 0000289B 488B3DC7DEFFFF      <1>     mov rdi, qword [destPtr]
   841 000028A2 E8EF1A0000          <1>     call FCBToAsciiz
   842 000028A7 E8D7000000          <1>     call .prntFilespec  ;Prints the source filename
   843 000028AC E8AA010000          <1>     call copyMain       ;And copy it!
   844 000028B1 731D                <1>     jnc .md2Ok
   845                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   846                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   847 000028B3 3CFD                <1>     cmp al, -3
   848 000028B5 0F843E010000        <1>     je .badBinCdevErr
   849 000028BB 3CFE                <1>     cmp al, -2
   850 000028BD 0F843F010000        <1>     je .rootDirFull
   851 000028C3 3CFF                <1>     cmp al, -1      ;Source and destination same?
   852 000028C5 0F8440010000        <1>     je .badSameFile 
   853 000028CB E956010000          <1>     jmp .badExit    ;Else generic error message
   854                              <1> .md2Ok:
   855 000028D0 F605BADEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   856 000028D7 0F8485000000        <1>     jz .copyDone        ;Copy complete!
   857 000028DD B8004F0000          <1>     mov eax, 4F00h      ;Else, find Next File
   858 000028E2 CD21                <1>     int 21h
   859 000028E4 727C                <1>     jc .copyDone        ;If no more files, we are done!
   860 000028E6 E95AFFFFFF          <1>     jmp .md2Lp    ;Else, now build a new source and destination!
   861                              <1> .mod1:
   862                              <1> ;Here we are copying file(s) into a directory. Filenames are copied verbatum.
   863 000028EB 800D9FDEFFFF20      <1>     or byte [bCpFlg], mod1Cpy   ;Ensure this bit is set!
   864 000028F2 488D1564DDFFFF      <1>     lea rdx, srcSpec
   865 000028F9 31C9                <1>     xor ecx, ecx    ;Normal and read only files pls!!
   866 000028FB B8004E0000          <1>     mov eax, 4E00h
   867 00002900 CD21                <1>     int 21h
   868 00002902 0F8214010000        <1>     jc .badSrcFile  ;File not found error!!
   869                              <1> .mod1Lp:
   870 00002908 488D3525D8FFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
   871 0000290F 488B3D4BDEFFFF      <1>     mov rdi, qword [srcPtr]
   872 00002916 E871190000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   873 0000291B 488B3D47DEFFFF      <1>     mov rdi, qword [destPtr]
   874 00002922 E865190000          <1>     call strcpy2    ;Place the asciiz name at the end of the path
   875 00002927 E857000000          <1>     call .prntFilespec
   876 0000292C E82A010000          <1>     call copyMain   ;And copy it!
   877 00002931 731D                <1>     jnc .mod1Ok
   878                              <1> ;Errors are not ignored, only when overwrite on ASCII concat mode, in which case
   879                              <1> ; we display a "contents lost" message and proceed. Here all errors halt!
   880 00002933 3CFD                <1>     cmp al, -3
   881 00002935 0F84BE000000        <1>     je .badBinCdevErr
   882 0000293B 3CFE                <1>     cmp al, -2
   883 0000293D 0F84BF000000        <1>     je .rootDirFull
   884 00002943 3CFF                <1>     cmp al, -1      ;Source and destination same?
   885 00002945 0F84C0000000        <1>     je .badSameFile 
   886 0000294B E9D6000000          <1>     jmp .badExit    ;Else generic error message
   887                              <1> .mod1Ok:
   888 00002950 F6053ADEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no Wildcards in source, we are done!
   889 00002957 7409                <1>     jz .copyDone
   890 00002959 B8004F0000          <1>     mov eax, 4F00h      ;Find Next File
   891 0000295E CD21                <1>     int 21h
   892 00002960 73A6                <1>     jnc .mod1Lp         ;If no more files, we are done! Fall thru!
   893                              <1> 
   894                              <1> .copyDone:
   895 00002962 E8C9000000          <1>     call .copyCleanup   ;Clean up resources!
   896 00002967 8B0520DEFFFF        <1>     mov eax, dword [dCpCnt] ;Get number of files copied
   897 0000296D B909000000          <1>     mov ecx, 9  ;Maximum copy 9,999,999 files... ofc thats ok
   898 00002972 E8F11A0000          <1>     call printDecimalValLB   ;n File(s) copied
   899 00002977 488D154BE0FFFF      <1>     lea rdx, copyOk
   900 0000297E B409                <1>     mov ah, 09h
   901 00002980 CD21                <1>     int 21h    
   902                              <1>     return
    13                              <2> %%_ret:
    14 00002982 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   903                              <1> 
   904                              <1> .prntFilespec:
   905                              <1> ;Prints the filespec to STDOUT. If the path is 
   906 00002983 F60507DEFFFF08      <1>     test byte [bCpFlg], wcSrc   ;If no wildcard, then don't print name
   907                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000298A 74(82)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   908 0000298C 488D15CADCFFFF      <1>     lea rdx, srcSpec
   909 00002993 4889D7              <1>     mov rdi, rdx
   910 00002996 E8FB180000          <1>     call strlen
   911 0000299B FFC9                <1>     dec ecx     ;Drop terminating null
   912 0000299D BB01000000          <1>     mov ebx, 1  ;STDOUT
   913 000029A2 B800400000          <1>     mov eax, 4000h  ;Write
   914 000029A7 CD21                <1>     int 21h
   915 000029A9 E8BB160000          <1>     call printCRLF
   916                              <1>     return
    13                              <2> %%_ret:
    14 000029AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   917                              <1> .doSwitch:
   918                              <1> ;Since switches can come before or after a name, handle them here!
   919                              <1> ;If invalid switch char, returns ZF=NZ.
   920                              <1> ;Input: bl = ASCII bit to set (either 1 or 2) 
   921                              <1> ;       rsi -> Switchchar
   922 000029AF 56                  <1>     push rsi
   923 000029B0 48FFC6              <1>     inc rsi ;Point to char past switchchar
   924 000029B3 AC                  <1>     lodsb   ;Get this char, goto next char
   925 000029B4 5E                  <1>     pop rsi
   926                              <1> .doSwitchRev:
   927 000029B5 E8E6180000          <1>     call ucChar
   928 000029BA 3C41                <1>     cmp al, "A"
   929 000029BC 7510                <1>     jne .cB
   930 000029BE 081DCDDDFFFF        <1>     or byte [bCpFlg], bl    ;Set the ASCII bit
   931 000029C4 8025C6DDFFFFFD      <1>     and byte [bCpFlg], ~binSrc  ;ASCII flag clears this
   932                              <1> .cExit:
   933 000029CB 31DB                <1>     xor ebx, ebx    ;Clear ZF 
   934                              <1>     return
    13                              <2> %%_ret:
    14 000029CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   935                              <1> .cB:
   936 000029CE 3C42                <1>     cmp al, "B"
   937 000029D0 7511                <1>     jne .cV
   938 000029D2 F6D3                <1>     not bl  ;Reverse bits
   939 000029D4 201DB7DDFFFF        <1>     and byte [bCpFlg], bl   ;Clear the ASCII bit.
   940 000029DA 800DB0DDFFFF02      <1>     or byte [bCpFlg], binSrc    ;This was explicitly set
   941 000029E1 EBE8                <1>     jmp short .cExit
   942                              <1> .cV:
   943 000029E3 3C56                <1>     cmp al, "V"
   944                              <1>     retne   ;Exit w/o clearing ZF
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029E5 75(CD)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   945 000029E7 F6058EDDFFFFFF      <1>     test byte [verifyFlg], -1   ;If verify flag set, do nothing
   946 000029EE 75DB                <1>     jnz .cExit                  ;If not zero, flag already set!
   947                              <1>     ;Else, set it. We return it at the end!
   948 000029F0 B8012E0000          <1>     mov eax, 2E01h  ;Set Verify Flag
   949 000029F5 CD21                <1>     int 21h
   950 000029F7 EBD2                <1>     jmp short .cExit
   951                              <1> 
   952                              <1> ;COPY Bad Exits!!
   953                              <1> .badBinCdevErr:
   954 000029F9 488D1579E2FFFF      <1>     lea rdx, binDevErr
   955 00002A00 EB10                <1>     jmp short .badExitCmn
   956                              <1> .rootDirFull:
   957 00002A02 488D155CDFFFFF      <1>     lea rdx, fulRootDir
   958 00002A09 EB07                <1>     jmp short .badExitCmn
   959                              <1> .badSameFile:
   960 00002A0B 488D1569DFFFFF      <1>     lea rdx, noSelfCopy
   961                              <1> .badExitCmn:
   962 00002A12 E8D9F4FFFF          <1>     call badCmn     ;Print error message
   963 00002A17 E946FFFFFF          <1>     jmp .copyDone   ;Clean resources
   964                              <1> .badSrcFile:
   965 00002A1C E8BFF4FFFF          <1>     call badFnf  ;File not found!!
   966 00002A21 E93CFFFFFF          <1>     jmp .copyDone
   967                              <1> .badExit:
   968 00002A26 E888F4FFFF          <1>     call badParamError
   969 00002A2B E932FFFFFF          <1>     jmp .copyDone
   970                              <1> 
   971                              <1> .copyCleanup:
   972                              <1> ;Clean all resources!! Reset verify and free copy buffer. 
   973                              <1> ;Handles are never open in this process!
   974 00002A30 B8002E0000          <1>     mov eax, 2E00h
   975 00002A35 8A0541DDFFFF        <1>     mov al, byte [verifyFlg]
   976 00002A3B CD21                <1>     int 21h
   977 00002A3D 4150                <1>     push r8
   978 00002A3F 4C8B053DDDFFFF      <1>     mov r8, qword [cpBufPtr]
   979 00002A46 4D85C0              <1>     test r8, r8 ;Check zero, clear CF
   980 00002A49 7407                <1>     jz .skipFree
   981 00002A4B B800490000          <1>     mov eax, 4900h
   982 00002A50 CD21                <1>     int 21h
   983                              <1> .skipFree:
   984 00002A52 4158                <1>     pop r8
   985 00002A54 0F824B1B0000        <1>     jc freezePC ;If free fails, man....
   986                              <1>     return
    13                              <2> %%_ret:
    14 00002A5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   987                              <1> 
   988                              <1> copyMain:
   989                              <1> ;This is the main copying procedure! 
   990                              <1> ;Start by checking the two files are not the same. If so, complain!
   991                              <1> ;If returns CF=CY, error code in al. 
   992                              <1> ;   If al = -1, same filename error!
   993                              <1> ;   If al = -2, Root Dir full (couldn't create file)
   994                              <1> ;   If al = -3, attempted binary read from a device
   995                              <1> ;If returns CF=NC, file copied successfully.
   996                              <1> ;Check the two files are not the same using truename in searchspec
   997 00002A5B 488D35FBDBFFFF      <1>     lea rsi, srcSpec
   998 00002A62 488D3D27DAFFFF      <1>     lea rdi, searchSpec
   999 00002A69 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1000 00002A6E CD21                <1>     int 21h 
  1001 00002A70 57                  <1>     push rdi    ;Save this searchSpec
  1002 00002A71 488D3567DCFFFF      <1>     lea rsi, destSpec
  1003 00002A78 488D3D93DAFFFF      <1>     lea rdi, searchSpec + cmdBufferL ;Use the latter half to store this bit
  1004 00002A7F B800600000          <1>     mov eax, 6000h
  1005 00002A84 CD21                <1>     int 21h
  1006 00002A86 5E                  <1>     pop rsi     ;Get this ptr back
  1007 00002A87 B81E120000          <1>     mov eax, 121Eh  ;Cmpr ASCII strings
  1008 00002A8C CD2F                <1>     int 2Fh
  1009 00002A8E 750F                <1>     jnz .notSameFile
  1010 00002A90 B0FF                <1>     mov al, -1  ;Same filename error!
  1011                              <1> .badExit:
  1012 00002A92 50                  <1>     push rax
  1013 00002A93 E8B0000000          <1>     call .exitCleanup
  1014 00002A98 58                  <1>     pop rax
  1015 00002A99 F9                  <1>     stc
  1016                              <1>     return
    13                              <2> %%_ret:
    14 00002A9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1017                              <1> .badExitNoSpace:
  1018 00002A9B B0FE                <1>     mov al, -2  ;Access denied from Create happens if Root Dir full!
  1019 00002A9D EBF3                <1>     jmp short .badExit
  1020                              <1> .notSameFile:
  1021                              <1> ;Open source with read permission
  1022                              <1> ;Open destination with write permission
  1023 00002A9F 488D15B7DBFFFF      <1>     lea rdx, srcSpec
  1024 00002AA6 B8003D0000          <1>     mov eax, 3D00h  ;Read open
  1025 00002AAB CD21                <1>     int 21h
  1026 00002AAD 72E3                <1>     jc .badExit
  1027 00002AAF 668905C7DCFFFF      <1>     mov word [sourceHdl], ax
  1028 00002AB6 0FB7D8              <1>     movzx ebx, ax   ;For bx
  1029                              <1> 
  1030 00002AB9 B800440000          <1>     mov eax, 4400h  ;Get device info for file in bx in dx
  1031 00002ABE CD21                <1>     int 21h
  1032 00002AC0 668915BADCFFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
  1033 00002AC7 F6C280              <1>     test dl, 80h    ;Is this a chardev?
  1034 00002ACA 7412                <1>     jz .prepCopy
  1035                              <1> ;Check the binary flag was not set on this source filespec
  1036 00002ACC B0FD                <1>     mov al, -3  ;Prep the error code
  1037 00002ACE F605BCDCFFFF02      <1>     test byte [bCpFlg], binSrc
  1038 00002AD5 75BB                <1>     jnz .badExit    ;Return with the error code in al
  1039 00002AD7 800DB3DCFFFF01      <1>     or byte [bCpFlg], ascSrc    ;Set the ascii read bit for later!
  1040                              <1> .prepCopy:
  1041 00002ADE 31F6                <1>     xor esi, esi                ;Flag if ASCII copy done after write!
  1042 00002AE0 488B159CDCFFFF      <1>     mov rdx, qword [cpBufPtr]   ;Get the buffer pointer
  1043                              <1> .copyLoop:
  1044                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1045                              <1> ; CONSIDER MODIFYING THIS ROUTINE SO THAT ASCII READS ONLY WRITE AFTER       !
  1046                              <1> ; FINDING A ^Z, OR FILLING THE BUFFER. CURRENTLY, WRITES HAPPEN ON EACH LINE.!
  1047                              <1> ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  1048 00002AE7 0FB70D9DDCFFFF      <1>     movzx ecx, word [wCpBufSz]
  1049 00002AEE 0FB71D88DCFFFF      <1>     movzx ebx, word [sourceHdl]
  1050 00002AF5 B8003F0000          <1>     mov eax, 3F00h ;Read
  1051 00002AFA CD21                <1>     int 21h
  1052 00002AFC 7294                <1>     jc .badExit
  1053 00002AFE 89C1                <1>     mov ecx, eax    ;Save the binary # of bytes read
  1054 00002B00 F6058ADCFFFF01      <1>     test byte [bCpFlg], ascSrc  ;Are we copying in ascii mode
  1055 00002B07 7413                <1>     jz .notAscii
  1056                              <1> ;Now scan the buffer for a EOF. If we find, we stop the copy at that char
  1057 00002B09 50                  <1>     push rax        ;Save the original char count
  1058 00002B0A 4889D7              <1>     mov rdi, rdx    ;rdx keeps the buffer ptr
  1059 00002B0D B01A                <1>     mov al, EOF
  1060 00002B0F F2AE                <1>     repne scasb     ;Loop thru now!
  1061 00002B11 89C8                <1>     mov eax, ecx    ;Move the offset into the buffer in eax
  1062 00002B13 59                  <1>     pop rcx         ;Get the original read count into ecx
  1063 00002B14 7506                <1>     jne .notAscii   ;If EOF not found, ecx has the full buffer size to write
  1064                              <1> ;Here if EOF found.
  1065 00002B16 FFC0                <1>     inc eax         ;Drop one for the EOF char itself
  1066 00002B18 29C1                <1>     sub ecx, eax    ;Get difference for # of chars to write
  1067 00002B1A FFCE                <1>     dec esi         ;Set to -1 to indicate we are done with ASCII copy!
  1068                              <1> .notAscii:
  1069 00002B1C 85C9                <1>     test ecx, ecx   ;If no bytes were read, exit!
  1070 00002B1E 7428                <1>     jz .exitCleanup
  1071 00002B20 51                  <1>     push rcx    ;Save the number of bytes to write
  1072 00002B21 52                  <1>     push rdx    ;Save the buffer ptr
  1073 00002B22 E88D000000          <1>     call .getWriteHandle    ;Gets hdl in bx. Inc file ctr on create/open
  1074 00002B27 5A                  <1>     pop rdx
  1075 00002B28 59                  <1>     pop rcx
  1076 00002B29 0F826CFFFFFF        <1>     jc .badExitNoSpace
  1077 00002B2F B800400000          <1>     mov eax, 4000h ;Write to handle in bx, to buffer in rdx
  1078 00002B34 CD21                <1>     int 21h
  1079 00002B36 0F8256FFFFFF        <1>     jc .badExit
  1080 00002B3C 39C1                <1>     cmp ecx, eax            ;ecx=bytes to write, eax=bytes written
  1081 00002B3E 0F8557FFFFFF        <1>     jne .badExitNoSpace     ;Disk must be full!!
  1082 00002B44 85F6                <1>     test esi, esi           ;Always clear in Binary mode
  1083 00002B46 749F                <1>     jz .copyLoop            ;Set possible in ASCII mode
  1084                              <1> .exitCleanup:
  1085                              <1> ;Add a terminating EOF if we have been asked to. Else, skip!
  1086 00002B48 F60542DCFFFF04      <1>     test byte [bCpFlg], ascDes
  1087 00002B4F 7425                <1>     jz .ecNoEOF
  1088 00002B51 0FBF1D27DCFFFF      <1>     movsx ebx, word [destHdl]
  1089 00002B58 81FBFFFFFFFF        <1>     cmp ebx, -1 ;If this hdl is closed, skip this!
  1090 00002B5E 7416                <1>     je .ecNoEOF
  1091 00002B60 488B151CDCFFFF      <1>     mov rdx, qword [cpBufPtr]
  1092 00002B67 C6021A              <1>     mov byte [rdx], EOF
  1093 00002B6A B901000000          <1>     mov ecx, 1
  1094 00002B6F B800400000          <1>     mov eax, 4000h  ;Write and ignore any errors that come from this!
  1095 00002B74 CD21                <1>     int 21h
  1096                              <1> .ecNoEOF:
  1097                              <1> ;Now close copy handles!
  1098 00002B76 668B1D00DCFFFF      <1>     mov bx, word [sourceHdl]
  1099 00002B7D 6681FBFFFF          <1>     cmp bx, -1
  1100 00002B82 7410                <1>     je .beSkipSource
  1101 00002B84 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
  1102 00002B89 CD21                <1>     int 21h
  1103 00002B8B 66C705E9DBFFFFFFFF  <1>     mov word [sourceHdl], -1    ;Reset the var
  1104                              <1> .beSkipSource:
  1105 00002B94 668B1DE4DBFFFF      <1>     mov bx, word [destHdl]
  1106 00002B9B 6681FBFFFF          <1>     cmp bx, -1
  1107                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002BA0 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002BA2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1108 00002BA3 B8003E0000          <1>     mov eax, 3E00h  ;Close this one too!
  1109 00002BA8 CD21                <1>     int 21h
  1110 00002BAA 66C705CCDBFFFFFFFF  <1>     mov word [destHdl], -1  ;Reset the var
  1111                              <1>     return
    13                              <2> %%_ret:
    14 00002BB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> .getWriteHandle:
  1114                              <1> ;Returns in bx the handle to the destination file. If the file has not 
  1115                              <1> ; yet been opened, creates/opens the destination file as appropriate.
  1116                              <1> ;Input: Nothing
  1117                              <1> ;Output: CF=NC: bx = Handle to the file
  1118                              <1> ;        CF=CY: File failed to open/create. 
  1119 00002BB4 0FB71DC4DBFFFF      <1>     movzx ebx, word [destHdl]
  1120 00002BBB 6681FBFFFF          <1>     cmp bx, -1
  1121 00002BC0 7402                <1>     je .gwHProceed
  1122 00002BC2 F8                  <1>     clc     ;Clear the CF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 00002BC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> .gwHProceed:
  1125                              <1> ;Here if the destination has not been opened yet!
  1126 00002BC4 488D1514DBFFFF      <1>     lea rdx, destSpec   ;Prepare rdx to the destination
  1127                              <1> ;Now we create/reopen the file here!
  1128 00002BCB F605BFDBFFFF10      <1>     test byte [bCpFlg], oneDest ;If single destination, concatenate
  1129 00002BD2 743E                <1>     jz .createFile
  1130                              <1> ;Now we first try to open this file. If this is file 0, we create.
  1131                              <1> ;If this is more than file 0, we open
  1132 00002BD4 813DAFDBFFFF000000- <1>     cmp dword [dCpCnt], 0
  1132 00002BDD 00                  <1>
  1133 00002BDE 7432                <1>     je .createFile
  1134                              <1>     ;Now we open the file instead and append to the end
  1135 00002BE0 B8023D0000          <1>     mov eax, 3D02h  ;Open the file in exclusive read/write mode
  1136 00002BE5 CD21                <1>     int 21h
  1137                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002BE7 72(C3)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1138 00002BE9 FF059EDBFFFF        <1>     inc dword [dCpCnt]  ;We've opened the file for writing!
  1139 00002BEF 66890589DBFFFF      <1>     mov word [destHdl], ax
  1140 00002BF6 0FB7D8              <1>     movzx ebx, ax
  1141 00002BF9 31C9                <1>     xor ecx, ecx
  1142 00002BFB 31D2                <1>     xor edx, edx
  1143 00002BFD F6058DDBFFFF04      <1>     test byte [bCpFlg], ascDes  ;Did we write a terminating ^Z before?
  1144 00002C04 7404                <1>     jz .gwHNoAscii
  1145 00002C06 FFCA                <1>     dec edx                     ;Overwrite the ^Z
  1146 00002C08 FFC9                <1>     dec ecx                     ;PASS A SIGNED -1 !!!!
  1147                              <1> .gwHNoAscii:
  1148 00002C0A B802420000          <1>     mov eax, 4202h  ;LSEEK from the end
  1149 00002C0F CD21                <1>     int 21h
  1150                              <1>     return
    13                              <2> %%_ret:
    14 00002C11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1151                              <1> .createFile:
  1152 00002C12 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
  1153 00002C17 31C9                <1>     xor ecx, ecx    ;No file attributes
  1154 00002C19 CD21                <1>     int 21h
  1155                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002C1B 72(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1156 00002C1D FF056ADBFFFF        <1>     inc dword [dCpCnt]  ;File created for writing!
  1157 00002C23 66890555DBFFFF      <1>     mov word [destHdl], ax
  1158 00002C2A 0FB7D8              <1>     movzx ebx, ax
  1159                              <1>     return
    13                              <2> %%_ret:
    14 00002C2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1160                              <1> 
  1161                              <1> erase:
  1162 00002C2E F6056FD4FFFFFF      <1>     test byte [arg1Flg], -1
  1163 00002C35 0F848AF2FFFF        <1>     jz badArgError
  1164 00002C3B E880190000          <1>     call setDTA     ;Start by resetting the DTA
  1165 00002C40 E8EA170000          <1>     call buildCommandPath   ;Get the relative path to the file
  1166                              <1> .dirLp:
  1167 00002C45 488D3D44D8FFFF      <1>     lea rdi, searchSpec
  1168 00002C4C E821170000          <1>     call findLastPathComponant
  1169 00002C51 4889FE              <1>     mov rsi, rdi    ;Save this as the source
  1170 00002C54 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1171 00002C58 B03F                <1>     mov al, "?"
  1172                              <1>     ;Store question marks in the name field
  1173 00002C5A 57                  <1>     push rdi
  1174 00002C5B 48FFC7              <1>     inc rdi ;Goto the first char
  1175 00002C5E B90B000000          <1>     mov ecx, 11
  1176 00002C63 F3AA                <1>     rep stosb
  1177 00002C65 5F                  <1>     pop rdi
  1178 00002C66 4889F2              <1>     mov rdx, rsi    ;Save the ptr
  1179 00002C69 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
  1180 00002C6E CD21                <1>     int 21h
  1181 00002C70 3C01                <1>     cmp al, 1
  1182 00002C72 0F85A1000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
  1183                              <1>     ;Else, we now copy back the search pattern over the last componant!
  1184                              <1>     ;No dirs to handle in here
  1185 00002C78 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
  1186 00002C7C 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
  1187 00002C7F E812170000          <1>     call FCBToAsciiz    ;Null terminates for free
  1188                              <1>     ;Count the number of ?'s, if 11, we print the message
  1189 00002C84 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
  1190 00002C88 31C9                <1>     xor ecx, ecx
  1191                              <1> .wcScan:
  1192 00002C8A AC                  <1>     lodsb
  1193 00002C8B 3C3F                <1>     cmp al, "?"
  1194 00002C8D 7534                <1>     jne .endCount
  1195 00002C8F FFC1                <1>     inc ecx
  1196 00002C91 81F90B000000        <1>     cmp ecx, 11
  1197 00002C97 75F1                <1>     jne .wcScan
  1198                              <1> .ynmsg:
  1199 00002C99 488D156BDEFFFF      <1>     lea rdx, ynMes
  1200 00002CA0 E8CB130000          <1>     call printString
  1201 00002CA5 B401                <1>     mov ah, 01h ;STDIN without Console Echo
  1202 00002CA7 CD21                <1>     int 21h ;Get char in al
  1203 00002CA9 E8F2150000          <1>     call ucChar ;Uppercase the char
  1204 00002CAE 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
  1205 00002CB0 740C                <1>     je .endCount1
  1206 00002CB2 3C4E                <1>     cmp al, "N"
  1207                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002CB4 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002CB6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1208 00002CB7 E8AD130000          <1>     call printCRLF      ;Else, tell me what you want!!!
  1209 00002CBC EBDB                <1>     jmp short .ynmsg    
  1210                              <1> .endCount1:
  1211 00002CBE E8A6130000          <1>     call printCRLF
  1212                              <1> .endCount:
  1213                              <1>     ;Now we copy our search template pathstring to delPath
  1214 00002CC3 488D3D93D9FFFF      <1>     lea rdi, delPath
  1215 00002CCA 488D35BFD7FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
  1216 00002CD1 E8B6150000          <1>     call strcpy2         ;Copy the string over to delPath
  1217                              <1> .findFile:
  1218                              <1>     ;Now we find first/find next our way through the files
  1219 00002CD6 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
  1220 00002CD9 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
  1221 00002CDB B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1222 00002CE0 CD21                <1>     int 21h
  1223 00002CE2 0F82F8F1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1224                              <1>     ;Now the file was found, we copy the name over, delete and keep going
  1225 00002CE8 E885160000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
  1226 00002CED 488D3540D4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1227                              <1> .delNextFile:
  1228                              <1> ;rsi and rdi dont move here
  1229 00002CF4 E893150000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
  1230 00002CF9 488D155DD9FFFF      <1>     lea rdx, delPath
  1231 00002D00 B800410000          <1>     mov eax, 4100h  ;Delete File 
  1232 00002D05 CD21                <1>     int 21h         ;If this fails to delete it, fail silently
  1233 00002D07 488D1582D7FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
  1234 00002D0E B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
  1235 00002D13 CD21                <1>     int 21h
  1236 00002D15 73DD                <1>     jnc .delNextFile    
  1237 00002D17 F8                  <1>     clc ;Clear carry to indicate success
  1238                              <1>     return
    13                              <2> %%_ret:
    14 00002D18 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1239                              <1> .noWildcard:
  1240                              <1>     ;Here we just check that the file was not a directory. If it was, we add
  1241                              <1>     ; a \*.*<NUL> over the null terminator
  1242 00002D19 488D1570D7FFFF      <1>     lea rdx, searchSpec
  1243 00002D20 B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
  1244 00002D25 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1245 00002D2A CD21                <1>     int 21h
  1246 00002D2C 0F82AEF1FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
  1247 00002D32 F605F2D3FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
  1248 00002D39 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
  1249                              <1>     ;Else, we are dealing with a dir
  1250 00002D3B 4889D7              <1>     mov rdi, rdx
  1251 00002D3E 31C9                <1>     xor ecx, ecx
  1252 00002D40 FFC9                <1>     dec ecx
  1253 00002D42 F2AE                <1>     repne scasb ;Go to the end of the line!
  1254 00002D44 48FFCF              <1>     dec rdi
  1255 00002D47 0FB605DBD2FFFF      <1>     movzx eax, byte [pathSep]
  1256 00002D4E AA                  <1>     stosb
  1257 00002D4F B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
  1258 00002D54 AB                  <1>     stosd
  1259 00002D55 E9EBFEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
  1260                              <1> .delMain:   ;Call with rdx -> buffer!
  1261 00002D5A B800410000          <1>     mov eax, 4100h  ;Delete File 
  1262 00002D5F CD21                <1>     int 21h
  1263                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D61 73(18)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1264 00002D63 3C05                <1>     cmp al, errAccDen
  1265 00002D65 0F843FF1FFFF        <1>     je badAccError ;If the file is RO, fail!
  1266 00002D6B E95EF1FFFF          <1>     jmp badFileError
  1267                              <1>     return
    13                              <2> %%_ret:
    14 00002D70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1268                              <1> 
  1269                              <1> date:
  1270 00002D71 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1271 00002D78 E83E150000          <1>     call skipDelimiters
  1272 00002D7D 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1273 00002D80 7562                <1>     jne .goDate  ;Else rsi is pointing to something possibly a date. Try it!
  1274                              <1> .init:
  1275                              <1>     ;Else, we do interactive mode!
  1276 00002D82 488D1505DDFFFF      <1>     lea rdx, curDate
  1277 00002D89 B409                <1>     mov ah, 09h
  1278 00002D8B CD21                <1>     int 21h
  1279 00002D8D E81F140000          <1>     call printFmtDate
  1280                              <1> .noCur:
  1281 00002D92 488D1506DDFFFF      <1>     lea rdx, newDate
  1282 00002D99 B409                <1>     mov ah, 09h
  1283 00002D9B CD21                <1>     int 21h
  1284 00002D9D 488D151ADDFFFF      <1>     lea rdx, ukDate
  1285 00002DA4 488D0506DDFFFF      <1>     lea rax, usDate
  1286 00002DAB 488D1D19DDFFFF      <1>     lea rbx, jpDate
  1287 00002DB2 803D72D2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1288 00002DB9 480F47D3            <1>     cmova rdx, rbx
  1289 00002DBD 480F42D0            <1>     cmovb rdx, rax
  1290 00002DC1 B409                <1>     mov ah, 09h
  1291 00002DC3 CD21                <1>     int 21h
  1292                              <1> 
  1293 00002DC5 488D1517D4FFFF      <1>     lea rdx, cpyBuffer
  1294 00002DCC C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1295 00002DCF B40A                <1>     mov ah, 0Ah
  1296 00002DD1 CD21                <1>     int 21h
  1297 00002DD3 52                  <1>     push rdx
  1298 00002DD4 E890120000          <1>     call printCRLF
  1299 00002DD9 5A                  <1>     pop rdx
  1300 00002DDA 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1301                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002DDE 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1302                              <1>     ;No spaces anywhere, separator chars allowed are / . - only
  1303 00002DE0 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1304                              <1> .goDate:
  1305 00002DE4 31C0                <1>     xor eax, eax    
  1306 00002DE6 803D3ED2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
  1307 00002DED 727B                <1>     jb .us
  1308 00002DEF 0F87B7000000        <1>     ja .jpn
  1309                              <1>     ;Here for UK style dates
  1310 00002DF5 E86E170000          <1>     call getByte
  1311 00002DFA 725D                <1>     jc .badDate
  1312 00002DFC 880559D8FFFF        <1>     mov byte [td3], al  ;Store the day
  1313 00002E02 E80C010000          <1>     call .validSep
  1314 00002E07 7550                <1>     jne .badDate
  1315 00002E09 E85A170000          <1>     call getByte
  1316 00002E0E 7249                <1>     jc .badDate
  1317 00002E10 880546D8FFFF        <1>     mov byte [td4], al  ;Store month
  1318 00002E16 E8F8000000          <1>     call .validSep
  1319 00002E1B 753C                <1>     jne .badDate
  1320 00002E1D E852170000          <1>     call getNum
  1321 00002E22 E8CF000000          <1>     call .doYear    ;Adjusts the year if necessary
  1322 00002E27 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1323 00002E2C 732B                <1>     jae .badDate
  1324 00002E2E 66890524D8FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1325                              <1> .writeDate:
  1326 00002E35 E881140000          <1>     call skipDelimiters
  1327 00002E3A 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1328 00002E3D 751A                <1>     jne .badDate
  1329 00002E3F 0FB70D13D8FFFF      <1>     movzx ecx, word [td1]   ;Get the year
  1330 00002E46 668B150ED8FFFF      <1>     mov dx, word [td3]      ;Read time and date together!
  1331 00002E4D B8002B0000          <1>     mov eax, 2B00h
  1332 00002E52 CD21                <1>     int 21h
  1333 00002E54 84C0                <1>     test al, al
  1334                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002E56 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002E58 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1335                              <1> .badDate:
  1336 00002E59 488D151FDCFFFF      <1>     lea rdx, badDate
  1337 00002E60 E80B120000          <1>     call printString
  1338 00002E65 E928FFFFFF          <1>     jmp date.noCur
  1339                              <1> .us:
  1340 00002E6A E8F9160000          <1>     call getByte
  1341 00002E6F 72E8                <1>     jc .badDate
  1342 00002E71 8805E5D7FFFF        <1>     mov byte [td4], al  ;Store the month
  1343 00002E77 E897000000          <1>     call .validSep
  1344 00002E7C 75DB                <1>     jne .badDate
  1345 00002E7E E8E5160000          <1>     call getByte
  1346 00002E83 72D4                <1>     jc .badDate
  1347 00002E85 8805D0D7FFFF        <1>     mov byte [td3], al  ;Store day
  1348 00002E8B E883000000          <1>     call .validSep
  1349 00002E90 75C7                <1>     jne .badDate
  1350 00002E92 E8DD160000          <1>     call getNum
  1351 00002E97 E85A000000          <1>     call .doYear    ;Adjusts the year if necessary
  1352 00002E9C 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1353 00002EA1 73B6                <1>     jae .badDate
  1354 00002EA3 668905AFD7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1355                              <1> .writeHop:
  1356 00002EAA EB89                <1>     jmp short .writeDate
  1357                              <1> .jpn:
  1358 00002EAC E8C3160000          <1>     call getNum
  1359 00002EB1 E840000000          <1>     call .doYear    ;Adjusts the year if necessary
  1360 00002EB6 3D00000100          <1>     cmp eax, 10000h           ;If it is too large, fail!
  1361 00002EBB 739C                <1>     jae .badDate
  1362 00002EBD 66890595D7FFFF      <1>     mov word [td1], ax  ;Store the word directly
  1363 00002EC4 E84A000000          <1>     call .validSep
  1364 00002EC9 758E                <1>     jne .badDate
  1365 00002ECB E898160000          <1>     call getByte
  1366 00002ED0 7287                <1>     jc .badDate
  1367 00002ED2 880583D7FFFF        <1>     mov byte [td3], al  ;Store the day
  1368 00002ED8 E836000000          <1>     call .validSep
  1369 00002EDD 0F8576FFFFFF        <1>     jne .badDate
  1370 00002EE3 E880160000          <1>     call getByte
  1371 00002EE8 0F826BFFFFFF        <1>     jc .badDate
  1372 00002EEE 880568D7FFFF        <1>     mov byte [td4], al  ;Store month
  1373 00002EF4 EBB4                <1>     jmp short .writeHop
  1374                              <1> .doYear:
  1375 00002EF6 3D77000000          <1>     cmp eax, 119    ;If this is larger than 119, return assuming valid
  1376                              <1>     reta
    73                              <2> cret a
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002EFB 7601                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002EFD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1377                              <1> ;If the user specifies 80-99 it means 1980-1999
  1378                              <1> ;If the user specifies 00-79 it means 2000-2079
  1379 00002EFE BBD0070000          <1>     mov ebx, 2000
  1380 00002F03 B96C070000          <1>     mov ecx, 1900
  1381 00002F08 3D50000000          <1>     cmp eax, 80     
  1382 00002F0D 0F42CB              <1>     cmovb ecx, ebx
  1383 00002F10 01C8                <1>     add eax, ecx
  1384                              <1>     return
    13                              <2> %%_ret:
    14 00002F12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> .validSep:
  1386 00002F13 AC                  <1>     lodsb           ;Get the char and return
  1387 00002F14 3C2E                <1>     cmp al, "."
  1388                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F16 74(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1389 00002F18 3C2F                <1>     cmp al, "/"
  1390                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F1A 74(12)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1391 00002F1C 3C2D                <1>     cmp al, "-"
  1392                              <1>     return
    13                              <2> %%_ret:
    14 00002F1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1393                              <1> 
  1394                              <1> time:
  1395 00002F1F 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1396 00002F26 E890130000          <1>     call skipDelimiters
  1397 00002F2B 803E0D              <1>     cmp byte [rsi], CR  ;If nothing, get input
  1398 00002F2E 7540                <1>     jne .goTime  ;Else rsi is pointing to something possibly a time. Try it!
  1399                              <1> .init:
  1400 00002F30 488D15B0DBFFFF      <1>     lea rdx, curTime
  1401 00002F37 B409                <1>     mov ah, 09h
  1402 00002F39 CD21                <1>     int 21h
  1403 00002F3B E808120000          <1>     call printFmtTime
  1404                              <1> .noCur:
  1405 00002F40 488D15B1DBFFFF      <1>     lea rdx, newTime
  1406 00002F47 B409                <1>     mov ah, 09h
  1407 00002F49 CD21                <1>     int 21h
  1408                              <1> 
  1409 00002F4B 488D150FD2FFFF      <1>     lea rdx, inBuffer
  1410 00002F52 C60280              <1>     mov byte [rdx], inLen ;Enter a string of up to 128 chars in length
  1411 00002F55 B40A                <1>     mov ah, 0Ah
  1412 00002F57 CD21                <1>     int 21h
  1413 00002F59 52                  <1>     push rdx
  1414 00002F5A 488D1511D9FFFF      <1>     lea rdx, crlf
  1415 00002F61 B409                <1>     mov ah, 09h
  1416 00002F63 CD21                <1>     int 21h
  1417 00002F65 5A                  <1>     pop rdx
  1418 00002F66 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
  1419                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F6A 74(1E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1420 00002F6C 488D7202            <1>     lea rsi, qword [rdx + 2]    ;Go to the text portion
  1421                              <1> .goTime:
  1422 00002F70 C705DFD6FFFF000000- <1>     mov dword [td1], 0          ;Set all fields to 0
  1422 00002F79 00                  <1>
  1423 00002F7A 31C0                <1>     xor eax, eax   
  1424 00002F7C E8E7150000          <1>     call getByte
  1425 00002F81 0F8294000000        <1>     jc .badTime         ;Get the number in eax
  1426 00002F87 8805CDD6FFFF        <1>     mov byte [td2], al  ;Save hours
  1427 00002F8D E89A000000          <1>     call .validsep
  1428 00002F92 0F8583000000        <1>     jne .badTime
  1429 00002F98 E8CB150000          <1>     call getByte
  1430 00002F9D 727C                <1>     jc .badTime
  1431 00002F9F 8805B4D6FFFF        <1>     mov byte [td1], al  ;Save minutes
  1432 00002FA5 E882000000          <1>     call .validsep
  1433 00002FAA 740F                <1>     je .goSec
  1434 00002FAC 48FFCE              <1>     dec rsi ;Go back a char
  1435 00002FAF E807130000          <1>     call skipDelimiters ;Skip any delimiters
  1436 00002FB4 803E0D              <1>     cmp byte [rsi], CR
  1437 00002FB7 743E                <1>     je .setTime
  1438 00002FB9 EB60                <1>     jmp short .badTime
  1439                              <1> .goSec:
  1440 00002FBB E878000000          <1>     call .checkNum
  1441 00002FC0 7259                <1>     jc .badTime
  1442 00002FC2 E8A1150000          <1>     call getByte
  1443 00002FC7 7252                <1>     jc .badTime
  1444 00002FC9 88058DD6FFFF        <1>     mov byte [td4], al  ;Save seconds
  1445 00002FCF AC                  <1>     lodsb       ;Move rsi forwards
  1446 00002FD0 3C2E                <1>     cmp al, "." ;Now we dont allow for colon now, only dot!
  1447 00002FD2 740F                <1>     je .goMsec
  1448 00002FD4 48FFCE              <1>     dec rsi ;Go back a char
  1449 00002FD7 E8DF120000          <1>     call skipDelimiters ;Skip any delimiters
  1450 00002FDC 803E0D              <1>     cmp byte [rsi], CR
  1451 00002FDF 7416                <1>     je .setTime
  1452 00002FE1 EB38                <1>     jmp short .badTime
  1453                              <1> .goMsec:
  1454 00002FE3 E850000000          <1>     call .checkNum
  1455 00002FE8 7231                <1>     jc .badTime
  1456 00002FEA E879150000          <1>     call getByte
  1457 00002FEF 722A                <1>     jc .badTime
  1458 00002FF1 880564D6FFFF        <1>     mov byte [td3], al  ;Save miliseconds
  1459                              <1> .setTime:
  1460 00002FF7 E8BF120000          <1>     call skipDelimiters
  1461 00002FFC 803E0D              <1>     cmp byte [rsi], CR  ;Must be terminated by a CR!!
  1462 00002FFF 751A                <1>     jne .badTime
  1463 00003001 0FB70D51D6FFFF      <1>     movzx ecx, word [td1]   ;Get hour/minutes
  1464 00003008 0FB7154CD6FFFF      <1>     movzx edx, word [td3]   ;Get seconds/miliseconds
  1465 0000300F B8002D0000          <1>     mov eax, 2D00h      ;Set time
  1466 00003014 CD21                <1>     int 21h
  1467 00003016 A8FF                <1>     test al, -1
  1468                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003018 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000301A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1469                              <1> .badTime:
  1470 0000301B 488D15B6DAFFFF      <1>     lea rdx, badTime
  1471 00003022 E849100000          <1>     call printString
  1472 00003027 E914FFFFFF          <1>     jmp time.noCur
  1473                              <1> .validsep:
  1474 0000302C AC                  <1>     lodsb
  1475 0000302D 3A0505D0FFFF        <1>     cmp al, byte [ctryData + countryStruc.timeSep]  ;Usually a colon
  1476                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003033 74(1A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1477 00003035 3C2E                <1>     cmp al, "."
  1478                              <1>     return
    13                              <2> %%_ret:
    14 00003037 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1479                              <1> .checkNum:
  1480 00003038 AC                  <1>     lodsb   ;Now ensure the first char past the delim is a number
  1481 00003039 48FFCE              <1>     dec rsi
  1482 0000303C 3C30                <1>     cmp al, "0"
  1483 0000303E 7206                <1>     jb .cnbad
  1484 00003040 3C39                <1>     cmp al, "9"
  1485 00003042 7702                <1>     ja .cnbad
  1486 00003044 F8                  <1>     clc
  1487                              <1>     return
    13                              <2> %%_ret:
    14 00003045 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1488                              <1> .cnbad:
  1489 00003046 F9                  <1>     stc
  1490                              <1>     return
    13                              <2> %%_ret:
    14 00003047 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1491                              <1> ctty:
  1492 00003048 F60555D0FFFFFF      <1>     test byte [arg1Flg], -1
  1493 0000304F 0F8470EEFFFF        <1>     jz badArgError
  1494 00003055 F6054BD0FFFFFF      <1>     test byte [arg2Flg], -1
  1495 0000305C 0F8563EEFFFF        <1>     jnz badArgError
  1496 00003062 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1497 00003069 0FB60535D0FFFF      <1>     movzx eax, byte [arg1Off]
  1498 00003070 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
  1499 00003073 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1500 00003077 750F                <1>     jne .noDrive
  1501 00003079 0FB60526D0FFFF      <1>     movzx eax, byte [arg1FCBret]
  1502 00003080 3CFF                <1>     cmp al, -1
  1503 00003082 0F8434EEFFFF        <1>     je badDriveError
  1504                              <1> .noDrive:
  1505                              <1>     ;Now we open the provided file
  1506 00003088 E8BA130000          <1>     call copyArgumentToSearchSpec
  1507 0000308D 488D15FCD3FFFF      <1>     lea rdx, searchSpec
  1508                              <1> .loadSwap:
  1509 00003094 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
  1510 00003099 CD21                <1>     int 21h
  1511 0000309B 0F822DEEFFFF        <1>     jc badFileError
  1512 000030A1 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
  1513 000030A4 B800440000          <1>     mov eax, 4400h  ;Get device word
  1514 000030A9 CD21                <1>     int 21h
  1515 000030AB F6C280              <1>     test dl, 80h    ;Test if this device is a char device
  1516 000030AE 742F                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
  1517                              <1>     ;Now we set this handle to be STDIO
  1518 000030B0 80CA03              <1>     or dl, 3    ;Set STDIO bits
  1519 000030B3 30F6                <1>     xor dh, dh
  1520 000030B5 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
  1521 000030BA CD21                <1>     int 21h
  1522                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
  1523 000030BC 31C9                <1>     xor ecx, ecx    ;STDIN
  1524 000030BE B800460000          <1>     mov eax, 4600h
  1525 000030C3 CD21                <1>     int 21h
  1526 000030C5 FFC1                <1>     inc ecx         ;STDOUT
  1527 000030C7 B800460000          <1>     mov eax, 4600h
  1528 000030CC CD21                <1>     int 21h
  1529 000030CE FFC1                <1>     inc ecx         ;STDERR
  1530 000030D0 B800460000          <1>     mov eax, 4600h
  1531 000030D5 CD21                <1>     int 21h
  1532 000030D7 B8003E0000          <1>     mov eax, 3E00h ;Now we close the original handle
  1533 000030DC CD21                <1>     int 21h
  1534                              <1>     return
    13                              <2> %%_ret:
    14 000030DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1535                              <1> .badCharDev:
  1536 000030DF 488D1523DBFFFF      <1>     lea rdx, badDev
  1537 000030E6 B409                <1>     mov ah, 09h
  1538 000030E8 CD21                <1>     int 21h
  1539 000030EA B43E                <1>     mov ah, 3Eh ;Close opened handle
  1540 000030EC CD21                <1>     int 21h
  1541                              <1>     return
    13                              <2> %%_ret:
    14 000030EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1542                              <1> 
  1543                              <1> cls:  
  1544 000030EF B800440000          <1>     mov eax, 4400h  ;Get device info
  1545 000030F4 BB01000000          <1>     mov ebx, 1      ;for handle 1
  1546 000030F9 CD21                <1>     int 21h         ;in dx
  1547 000030FB F7C280000000        <1>     test edx, devCharDev
  1548 00003101 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
  1549 00003103 F7C210000000        <1>     test edx, charDevFastOut
  1550 00003109 743E                <1>     jz .doAnsi
  1551                              <1>     ;Test if Int 29h uses Int 30h
  1552                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
  1553                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
  1554 0000310B B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
  1555 00003110 CD21                <1>     int 21h
  1556                              <1> .biosCheck:
  1557 00003112 66813BCD30          <1>     cmp word [rbx], 30CDh
  1558 00003117 740C                <1>     je .biosConfirmed
  1559 00003119 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
  1560 0000311E 7429                <1>     je .doAnsi
  1561 00003120 48FFC3              <1>     inc rbx
  1562 00003123 EBED                <1>     jmp short .biosCheck
  1563                              <1> .biosConfirmed:
  1564                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
  1565 00003125 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
  1566 00003127 31DB                <1>     xor ebx, ebx
  1567 00003129 CD30                <1>     int 30h
  1568 0000312B B40F                <1>     mov ah, 0Fh ;Get screen mode
  1569 0000312D CD30                <1>     int 30h
  1570 0000312F 53                  <1>     push rbx
  1571 00003130 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
  1572 00003133 FECA                <1>     dec dl
  1573 00003135 B619                <1>     mov dh, 25  ;Number of rows is standard
  1574 00003137 31C0                <1>     xor eax, eax
  1575 00003139 89C1                <1>     mov ecx, eax
  1576 0000313B B707                <1>     mov bh, 7   ;Screen attributes
  1577 0000313D B406                <1>     mov ah, 6   ;Scroll
  1578 0000313F CD30                <1>     int 30h
  1579 00003141 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
  1580 00003143 5B                  <1>     pop rbx
  1581 00003144 B402                <1>     mov ah, 2
  1582 00003146 CD30                <1>     int 30h
  1583                              <1>     return
    13                              <2> %%_ret:
    14 00003148 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1584                              <1> .doAnsi:
  1585                              <1> ;4 chars in the ansi routine
  1586                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
  1587                              <1> ; understand ANSI codes
  1588 00003149 488D3540DDFFFF      <1>     lea rsi, ansiCls
  1589 00003150 B904000000          <1>     mov ecx, 4
  1590 00003155 B406                <1>     mov ah, 06h ;Raw char output
  1591                              <1> .ansiLp:
  1592 00003157 AC                  <1>     lodsb   ;Get the char in 
  1593 00003158 88C2                <1>     mov dl, al
  1594 0000315A CD21                <1>     int 21h
  1595 0000315C FFC9                <1>     dec ecx
  1596 0000315E 75F7                <1>     jnz .ansiLp
  1597                              <1>     return
    13                              <2> %%_ret:
    14 00003160 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1598                              <1> 
  1599                              <1> break:
  1600 00003161 F6053CCFFFFFFF      <1>     test byte [arg1Flg], -1
  1601 00003168 752D                <1>     jnz .argumentProvided
  1602                              <1>     ;Here we just get the status of break
  1603 0000316A B800330000          <1>     mov eax, 3300h  ;Get break status in dl
  1604 0000316F CD21                <1>     int 21h
  1605 00003171 88D3                <1>     mov bl, dl
  1606 00003173 488D1531DBFFFF      <1>     lea rdx, breakIs
  1607 0000317A B409                <1>     mov ah, 09h
  1608 0000317C CD21                <1>     int 21h
  1609 0000317E 488D1521DBFFFF      <1>     lea rdx, onMes
  1610 00003185 488D0D14DBFFFF      <1>     lea rcx, offMes
  1611 0000318C 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1612 0000318E 480F44D1            <1>     cmovz rdx, rcx
  1613 00003192 B409                <1>     mov ah, 09h
  1614 00003194 CD21                <1>     int 21h
  1615                              <1>     return
    13                              <2> %%_ret:
    14 00003196 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1616                              <1> .argumentProvided:
  1617 00003197 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1618 0000319B AD                  <1>     lodsd   ;Read the word
  1619 0000319C 89C3                <1>     mov ebx, eax
  1620 0000319E 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1621 000031A3 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1622 000031A6 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1623 000031AB 7416                <1>     je .maybeOn
  1624 000031AD 663D4F46            <1>     cmp ax, "OF"
  1625 000031B1 7523                <1>     jne .badOnOff
  1626 000031B3 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1627 000031B8 6681FB4620          <1>     cmp bx, "F "
  1628 000031BD 7517                <1>     jne .badOnOff
  1629                              <1>     ;Set off
  1630 000031BF 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
  1631 000031C1 EB0B                <1>     jmp short .setBreak
  1632                              <1> .maybeOn:
  1633 000031C3 663D4F4E            <1>     cmp ax, "ON"
  1634 000031C7 750D                <1>     jne .badOnOff
  1635                              <1>     ;Set on
  1636 000031C9 BA01000000          <1>     mov edx, 1
  1637                              <1> .setBreak:
  1638 000031CE B801330000          <1>     mov eax, 3301h  ;Set break
  1639 000031D3 CD21                <1>     int 21h
  1640                              <1>     return
    13                              <2> %%_ret:
    14 000031D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1641                              <1> .badOnOff:
  1642 000031D6 488D15C3DCFFFF      <1>     lea rdx, badOnOff
  1643 000031DD B409                <1>     mov ah, 09h
  1644 000031DF CD21                <1>     int 21h
  1645                              <1>     return
    13                              <2> %%_ret:
    14 000031E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1646                              <1> 
  1647                              <1> verify:
  1648 000031E2 F605BBCEFFFFFF      <1>     test byte [arg1Flg], -1
  1649 000031E9 752D                <1>     jnz .argumentProvided
  1650                              <1>     ;Here we just get the status of break
  1651 000031EB B800540000          <1>     mov eax, 5400h  ;Get verify status in al
  1652 000031F0 CD21                <1>     int 21h
  1653 000031F2 88C3                <1>     mov bl, al
  1654 000031F4 488D15BADAFFFF      <1>     lea rdx, verifyIs
  1655 000031FB B409                <1>     mov ah, 09h
  1656 000031FD CD21                <1>     int 21h
  1657 000031FF 488D15A0DAFFFF      <1>     lea rdx, onMes
  1658 00003206 488D0D93DAFFFF      <1>     lea rcx, offMes
  1659 0000320D 84DB                <1>     test bl, bl ;IF bl = 0, break is off
  1660 0000320F 480F44D1            <1>     cmovz rdx, rcx
  1661 00003213 B409                <1>     mov ah, 09h
  1662 00003215 CD21                <1>     int 21h
  1663                              <1>     return
    13                              <2> %%_ret:
    14 00003217 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1664                              <1> .argumentProvided:
  1665 00003218 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1666 0000321C AD                  <1>     lodsd   ;Read the word
  1667 0000321D 89C3                <1>     mov ebx, eax
  1668 0000321F 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1669 00003224 C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1670 00003227 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1671 0000322C 7416                <1>     je .maybeOn
  1672 0000322E 663D4F46            <1>     cmp ax, "OF"
  1673 00003232 751F                <1>     jne .badOnOff
  1674 00003234 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1675 00003239 6681FB4620          <1>     cmp bx, "F "
  1676 0000323E 7513                <1>     jne .badOnOff
  1677                              <1>     ;Set off
  1678 00003240 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1679 00003242 EB0A                <1>     jmp short .setVerify
  1680                              <1> .maybeOn:
  1681 00003244 663D4F4E            <1>     cmp ax, "ON"
  1682 00003248 7509                <1>     jne .badOnOff
  1683                              <1>     ;Set on
  1684 0000324A 31C0                <1>     xor eax, eax
  1685 0000324C FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1686                              <1> .setVerify:
  1687 0000324E B42E                <1>     mov ah, 2Eh  ;Set Verify
  1688 00003250 CD21                <1>     int 21h
  1689                              <1>     return
    13                              <2> %%_ret:
    14 00003252 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1690                              <1> .badOnOff:
  1691 00003253 488D1546DCFFFF      <1>     lea rdx, badOnOff
  1692 0000325A B409                <1>     mov ah, 09h
  1693 0000325C CD21                <1>     int 21h
  1694                              <1>     return
    13                              <2> %%_ret:
    14 0000325E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1695                              <1> 
  1696                              <1> rename:
  1697 0000325F F6053ECEFFFFFF      <1>     test byte [arg1Flg], -1
  1698 00003266 0F8459ECFFFF        <1>     jz badArgError
  1699 0000326C F60534CEFFFFFF      <1>     test byte [arg2Flg], -1
  1700 00003273 0F844CECFFFF        <1>     jz badArgError    
  1701                              <1>     ;Initialise the variables!
  1702 00003279 488D35DDD3FFFF      <1>     lea rsi, srcSpec
  1703 00003280 488935DAD4FFFF      <1>     mov qword [srcPtr], rsi
  1704 00003287 488D3551D4FFFF      <1>     lea rsi, destSpec
  1705 0000328E 488935D4D4FFFF      <1>     mov qword [destPtr], rsi
  1706                              <1>     ;Check the second path is just a filename!
  1707 00003295 0FB6050CCEFFFF      <1>     movzx eax, byte [arg2Off]
  1708 0000329C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1709 000032A3 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1710 000032A6 488D3DE3D1FFFF      <1>     lea rdi, searchSpec
  1711 000032AD 57                  <1>     push rdi
  1712 000032AE E839110000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1713 000032B3 5F                  <1>     pop rdi
  1714 000032B4 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1715 000032B8 0F8407ECFFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1716                              <1> ;Check if a drive specifier has been given
  1717 000032BE 0FB605E0CDFFFF      <1>     movzx eax, byte [arg1Off]
  1718 000032C5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1719 000032CC 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1720 000032CF 66AD                <1>     lodsw   ;Get the first two chars
  1721 000032D1 80FC3A              <1>     cmp ah, ":" ;If not, current drive
  1722 000032D4 752A                <1>     jne .curDrvSrc
  1723                              <1> ;Else, copy over the drive letter from the source path, if one exists!
  1724 000032D6 488B3584D4FFFF      <1>     mov rsi, qword [srcPtr]
  1725 000032DD 668906              <1>     mov word [rsi], ax
  1726 000032E0 48810576D4FFFF0200- <1>     add qword [srcPtr], 2   
  1726 000032E9 0000                <1>
  1727 000032EB 488B3577D4FFFF      <1>     mov rsi, qword [destPtr]
  1728 000032F2 668906              <1>     mov word [rsi], ax
  1729 000032F5 48810569D4FFFF0200- <1>     add qword [destPtr], 2  ;Advance the pointer, to copy to after this ptr
  1729 000032FE 0000                <1>
  1730                              <1> .curDrvSrc:
  1731 00003300 4889FE              <1>     mov rsi, rdi
  1732                              <1> .destScan:
  1733 00003303 AC                  <1>     lodsb   ;Get the char
  1734 00003304 3A051FCDFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1735 0000330A 0F84B5EBFFFF        <1>     je badArgError
  1736 00003310 84C0                <1>     test al, al
  1737 00003312 75EF                <1>     jnz .destScan
  1738                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1739 00003314 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1740 00003318 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1740 00003321 3F                  <1>
  1741 00003322 B903000000          <1>     mov ecx, 3  ;24 bytes
  1742 00003327 F348AB              <1>     rep stosq
  1743 0000332A AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1744 0000332B 488D355ED1FFFF      <1>     lea rsi, searchSpec
  1745 00003332 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1746 00003336 B80D290000          <1>     mov eax, 290Dh
  1747 0000333B CD21                <1>     int 21h     
  1748 0000333D 50                  <1>     push rax    ;Save the WC signature
  1749 0000333E E8EC100000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1750 00003343 488D3D46D1FFFF      <1>     lea rdi, searchSpec
  1751 0000334A E823100000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1752 0000334F 4889FE              <1>     mov rsi, rdi
  1753 00003352 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1754 00003355 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1755 00003359 B80D290000          <1>     mov eax, 290Dh
  1756 0000335E CD21                <1>     int 21h
  1757 00003360 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1758 00003361 88CC                <1>     mov ah, cl
  1759 00003363 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1760 00003366 0F84EB000000        <1>     jz .noWC
  1761 0000336C 3CFF                <1>     cmp al, -1  ;Is the source drive bad?
  1762 0000336E 0F8451EBFFFF        <1>     je badArgError
  1763 00003374 488D3515D1FFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1764                              <1>     ;Now we check if we have a path to actually handle
  1765 0000337B 4839F3              <1>     cmp rbx, rsi
  1766 0000337E 7444                <1>     je .noPath
  1767 00003380 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1768 00003384 488D3505D1FFFF      <1>     lea rsi, searchSpec
  1769 0000338B 488B3DCBD2FFFF      <1>     mov rdi, qword [srcSpec]
  1770 00003392 56                  <1>     push rsi
  1771 00003393 E8E50E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1772 00003398 5E                  <1>     pop rsi
  1773 00003399 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1774 0000339C 8A0587CCFFFF        <1>     mov al, byte [pathSep]
  1775 000033A2 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1776 000033A3 48893DB7D3FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1777 000033AA 488B3DB8D3FFFF      <1>     mov rdi, qword [destPtr]    ;Get the ptr (if it was advanced)
  1778 000033B1 E8C70E0000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1779 000033B6 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1780 000033B9 AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1781 000033BA 48893DA8D3FFFF      <1>     mov qword [destPtr], rdi
  1782 000033C1 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1783                              <1> .noPath:
  1784                              <1>     ;Now we have where to copy the files to, we can start our work!
  1785 000033C4 E8F7110000          <1>     call setDTA
  1786 000033C9 488D15C0D0FFFF      <1>     lea rdx, searchSpec
  1787 000033D0 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1788 000033D2 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1789 000033D7 CD21                <1>     int 21h
  1790 000033D9 0F82F8EAFFFF        <1>     jc badDupFnf    ;If no file was found!
  1791                              <1> .wcLoop:
  1792                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1793 000033DF 488D354ECDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1794 000033E6 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1795 000033EA B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1796 000033EF CD21                <1>     int 21h 
  1797                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1798 000033F1 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1799 000033F5 488D3D75D3FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1800 000033FC 57                  <1>     push rdi
  1801 000033FD 48A5                <1>     movsq
  1802 000033FF 66A5                <1>     movsw
  1803 00003401 A4                  <1>     movsb
  1804 00003402 5F                  <1>     pop rdi
  1805 00003403 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1806 00003407 B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1807                              <1> .wcNameMake:
  1808 0000340C AC                  <1>     lodsb   ;Get the char from the source string
  1809 0000340D 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1810 00003410 7502                <1>     jne .noStore    ;Dont store the char there
  1811 00003412 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1812                              <1> .noStore:
  1813 00003414 48FFC7              <1>     inc rdi ;Goto next char position
  1814 00003417 FFC9                <1>     dec ecx
  1815 00003419 75F1                <1>     jnz .wcNameMake
  1816                              <1> ;renName now has the FCB name for the file we wish to make!
  1817                              <1> ;Now make the two paths!
  1818 0000341B 488D3512CDFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1819 00003422 488B3D38D3FFFF      <1>     mov rdi, qword [srcPtr]
  1820 00003429 E84F0E0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1821 0000342E 488D353CD3FFFF      <1>     lea rsi, renName
  1822 00003435 488B3D2DD3FFFF      <1>     mov rdi, qword [destPtr]
  1823 0000343C E8550F0000          <1>     call FCBToAsciiz
  1824 00003441 488D1515D2FFFF      <1>     lea rdx, srcSpec
  1825 00003448 E83F000000          <1>     call .ren   ;Fail silently on wildcard rename
  1826 0000344D B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1827 00003452 CD21                <1>     int 21h
  1828 00003454 7389                <1>     jnc .wcLoop     ;And process it too!
  1829                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 00003456 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1830                              <1> .noWC:
  1831 00003457 E8D30F0000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1832 0000345C 0FB60545CCFFFF      <1>     movzx eax, byte [arg2Off]
  1833 00003463 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1834 0000346A 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1835 0000346D 488B3DF5D2FFFF      <1>     mov rdi, qword [destPtr]    
  1836 00003474 E8730F0000          <1>     call cpDelimPathToBufz
  1837 00003479 488D1510D0FFFF      <1>     lea rdx, searchSpec
  1838 00003480 E807000000          <1>     call .ren
  1839                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003485 73(56)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1840 00003487 E94BEAFFFF          <1>     jmp badDupFnf   ;Always just return this
  1841                              <1> .ren:
  1842 0000348C 488D3D4CD2FFFF      <1>     lea rdi, destSpec
  1843 00003493 B800560000          <1>     mov eax, 5600h
  1844 00003498 CD21                <1>     int 21h
  1845                              <1>     return
    13                              <2> %%_ret:
    14 0000349A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1846                              <1> 
  1847                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1848                              <1> touch:
  1849                              <1> ;Temporarily used to create files
  1850 0000349B F60502CCFFFFFF      <1>     test byte [arg1Flg], -1
  1851 000034A2 0F841DEAFFFF        <1>     jz badArgError
  1852 000034A8 E8820F0000          <1>     call buildCommandPath
  1853 000034AD 488D15DCCFFFFF      <1>     lea rdx, searchSpec
  1854 000034B4 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1855 000034B9 31C9                <1>     xor ecx, ecx
  1856 000034BB CD21                <1>     int 21h
  1857 000034BD 721D                <1>     jc .touch1
  1858                              <1> .touchClose:
  1859 000034BF 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1860 000034C2 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1861 000034C7 CD2F                <1>     int 2fh
  1862 000034C9 89C1                <1>     mov ecx, eax    ;Move the time here
  1863 000034CB 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1864 000034CD B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1865 000034D2 CD21                <1>     int 21h
  1866 000034D4 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1867 000034D9 CD21                <1>     int 21h
  1868                              <1>     return
    13                              <2> %%_ret:
    14 000034DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1869                              <1> .touch1:
  1870 000034DC 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1871 000034DE 7509                <1>     jne .touchError ;If not, this is a proper error!
  1872 000034E0 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1873 000034E5 CD21                <1>     int 21h
  1874 000034E7 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1875                              <1> .touchError:
  1876 000034E9 3C03                <1>     cmp al, errPnf
  1877 000034EB 0F84D4E9FFFF        <1>     je badArgError
  1878 000034F1 3C02                <1>     cmp al, errFnf
  1879 000034F3 0F84E7E9FFFF        <1>     je badFnf
  1880 000034F9 E9ACE9FFFF          <1>     jmp badAccError
  1881                              <1>     
  1882                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1883                              <1> 
  1884                              <1> truename:
  1885 000034FE F6059FCBFFFFFF      <1>     test byte [arg1Flg], -1
  1886 00003505 0F84BAE9FFFF        <1>     jz badArgError
  1887 0000350B E81F0F0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1888 00003510 488D3579CFFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1889 00003517 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1890 0000351A B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1891 0000351F CD21                <1>     int 21h
  1892 00003521 730D                <1>     jnc .writePath
  1893 00003523 3C02                <1>     cmp al, errFnf
  1894 00003525 0F84A3E9FFFF        <1>     je badFileError
  1895 0000352B E983E9FFFF          <1>     jmp badParamError
  1896                              <1> .writePath:
  1897 00003530 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1898 00003533 B9FFFFFFFF          <1>     mov ecx, -1
  1899 00003538 30C0                <1>     xor al, al
  1900 0000353A F2AE                <1>     repne scasb     ;Get the new len
  1901 0000353C F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1902 0000353E FFC9                <1>     dec ecx
  1903 00003540 BB01000000          <1>     mov ebx, 01
  1904 00003545 B440                <1>     mov ah, 40h
  1905 00003547 CD21                <1>     int 21h
  1906 00003549 E81B0B0000          <1>     call printCRLF
  1907                              <1>     return
    13                              <2> %%_ret:
    14 0000354E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1908                              <1> 
  1909                              <1> volume:
  1910                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1911 0000354F F60551CBFFFFFF      <1>     test byte [arg2Flg], -1
  1912 00003556 0F8569E9FFFF        <1>     jnz badArgError
  1913 0000355C F60541CBFFFFFF      <1>     test byte [arg1Flg], -1
  1914 00003563 7507                <1>     jnz .notCurrentDrive
  1915 00003565 E80E0D0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1916 0000356A EB31                <1>     jmp short .dirEP
  1917                              <1> .notCurrentDrive:
  1918 0000356C E8BE0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1919 00003571 488D3518CFFFFF      <1>     lea rsi, searchSpec
  1920 00003578 E83E0D0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1921 0000357D 66AD                <1>     lodsw                   ;Get this word
  1922 0000357F 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1923 00003582 0F853DE9FFFF        <1>     jne badArgError
  1924 00003588 8A0518CBFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1925 0000358E A8FF                <1>     test al, -1
  1926 00003590 0F8526E9FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1927 00003596 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1928 0000359B FFC8                <1>     dec eax ;Convert to 0 based number
  1929                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1930 0000359D E81E100000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1931 000035A2 488D1584D0FFFF      <1>     lea rdx, volFcb
  1932 000035A9 FFC0                <1>     inc eax ;Get 1 based drive number
  1933 000035AB 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1934 000035AD 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1935 000035B0 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1936 000035B5 CD21                <1>     int 21h
  1937 000035B7 50                  <1>     push rax
  1938                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1939 000035B8 488D15B3D2FFFF      <1>     lea rdx, crlf
  1940 000035BF B409                <1>     mov ah, 09h
  1941 000035C1 CD21                <1>     int 21h
  1942 000035C3 488D1568D5FFFF      <1>     lea rdx, volMes
  1943 000035CA B409                <1>     mov ah, 09h
  1944 000035CC CD21                <1>     int 21h
  1945 000035CE 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1946 000035D0 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1947 000035D3 B402                <1>     mov ah, 02h
  1948 000035D5 CD21                <1>     int 21h
  1949 000035D7 58                  <1>     pop rax
  1950 000035D8 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1951 000035DA 7409                <1>     jz .volIDOk
  1952 000035DC 488D1566D5FFFF      <1>     lea rdx, volNo
  1953 000035E3 EB19                <1>     jmp short .volEndPrint
  1954                              <1> .volIDOk:
  1955 000035E5 488D1558D5FFFF      <1>     lea rdx, volOk
  1956 000035EC B409                <1>     mov ah, 09h
  1957 000035EE CD21                <1>     int 21h
  1958 000035F0 C60532CBFFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1959 000035F7 488D1520CBFFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1960                              <1> .volEndPrint:
  1961 000035FE B409                <1>     mov ah, 09h
  1962 00003600 CD21                <1>     int 21h
  1963 00003602 488D1569D2FFFF      <1>     lea rdx, crlf
  1964 00003609 B409                <1>     mov ah, 09h
  1965 0000360B CD21                <1>     int 21h
  1966                              <1>     return
    13                              <2> %%_ret:
    14 0000360D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1967                              <1> 
  1968                              <1> version:
  1969 0000360E 488D155DD2FFFF      <1>     lea rdx, crlf
  1970 00003615 B409                <1>     mov ah, 09h
  1971 00003617 CD21                <1>     int 21h
  1972 00003619 488D1500D5FFFF      <1>     lea rdx, dosVer
  1973 00003620 B409                <1>     mov ah, 09h
  1974 00003622 CD21                <1>     int 21h
  1975 00003624 E80C000000          <1>     call .printVersionNumber
  1976 00003629 488D1542D2FFFF      <1>     lea rdx, crlf
  1977 00003630 B409                <1>     mov ah, 09h
  1978 00003632 CD21                <1>     int 21h
  1979                              <1>     return
    13                              <2> %%_ret:
    14 00003634 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1980                              <1> .printVersionNumber:
  1981 00003635 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1982 00003637 CD21                <1>     int 21h
  1983 00003639 50                  <1>     push rax
  1984 0000363A 0FB6C0              <1>     movzx eax, al
  1985 0000363D E8C60E0000          <1>     call printDecimalWord
  1986 00003642 B22E                <1>     mov dl, "."
  1987 00003644 B402                <1>     mov ah, 02h
  1988 00003646 CD21                <1>     int 21h
  1989 00003648 58                  <1>     pop rax
  1990 00003649 0FB6C4              <1>     movzx eax, ah
  1991 0000364C E8B70E0000          <1>     call printDecimalWord
  1992                              <1>     return
    13                              <2> %%_ret:
    14 00003651 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1993                              <1> 
  1994                              <1> 
  1995                              <1> memory:
  1996 00003652 B800520000          <1>     mov eax, 5200h  ;Get Sysvars :)
  1997 00003657 CD21                <1>     int 21h
  1998 00003659 4885DB              <1>     test rbx, rbx
  1999 0000365C 7510                <1>     jnz .sysvarsOK
  2000 0000365E 488D15A2D7FFFF      <1>     lea rdx, memBad0
  2001 00003665 B409                <1>     mov ah, 09h
  2002 00003667 CD21                <1>     int 21h
  2003 00003669 E9420F0000          <1>     jmp freezePC.altEP
  2004                              <1> .sysvarsOK:
  2005                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  2006                              <1>     ; and rcx to store Application memory
  2007 0000366E 31F6                <1>     xor esi, esi
  2008 00003670 31FF                <1>     xor edi, edi
  2009 00003672 31ED                <1>     xor ebp, ebp
  2010 00003674 31C9                <1>     xor ecx, ecx
  2011 00003676 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  2012 0000367A 488B1B              <1>     mov rbx, qword [rbx]
  2013                              <1> .memLp:
  2014 0000367D 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  2015 00003680 7409                <1>     je .validMCB
  2016 00003682 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2017 00003685 0F8506010000        <1>     jne .badMCBFound
  2018                              <1> .validMCB:
  2019 0000368B 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  2020 0000368E 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  2021 00003692 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  2022 0000369A 7505                <1>     jne .notDOS
  2023 0000369C 4801C6              <1>     add rsi, rax    ;Add to DOS count
  2024 0000369F EB21                <1>     jmp short .gotoNext
  2025                              <1> .notDOS:
  2026 000036A1 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  2027 000036A9 7505                <1>     jne .notFree
  2028 000036AB 4801C7              <1>     add rdi, rax    ;Add to Free space count
  2029 000036AE EB12                <1>     jmp short .gotoNext
  2030                              <1> .notFree:
  2031 000036B0 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  2032 000036B8 7505                <1>     jne .notHole
  2033 000036BA 4801C5              <1>     add rbp, rax    ;Add to Hole count
  2034 000036BD EB03                <1>     jmp short .gotoNext
  2035                              <1> .notHole:
  2036 000036BF 4801C1              <1>     add rcx, rax    ;Add to Application count
  2037                              <1> .gotoNext:
  2038 000036C2 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  2039 000036C5 7407                <1>     je .endOfWalk
  2040 000036C7 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  2041 000036CC EBAF                <1>     jmp short .memLp
  2042                              <1> .endOfWalk:
  2043                              <1>     
  2044 000036CE 488D1593D6FFFF      <1>     lea rdx, memDOS
  2045 000036D5 B409                <1>     mov ah, 09h
  2046 000036D7 CD21                <1>     int 21h
  2047 000036D9 4889F0              <1>     mov rax, rsi
  2048 000036DC E89D000000          <1>     call .mcbPrintAmount
  2049 000036E1 488D1518D7FFFF      <1>     lea rdx, memByte
  2050 000036E8 B409                <1>     mov ah, 09h
  2051 000036EA CD21                <1>     int 21h
  2052                              <1> 
  2053 000036EC 4885ED              <1>     test rbp, rbp
  2054 000036EF 741E                <1>     jz .skipHole
  2055 000036F1 488D15BCD6FFFF      <1>     lea rdx, memHole
  2056 000036F8 B409                <1>     mov ah, 09h
  2057 000036FA CD21                <1>     int 21h
  2058 000036FC 4889E8              <1>     mov rax, rbp
  2059 000036FF E87A000000          <1>     call .mcbPrintAmount
  2060 00003704 488D15F5D6FFFF      <1>     lea rdx, memByte
  2061 0000370B B409                <1>     mov ah, 09h
  2062 0000370D CD21                <1>     int 21h
  2063                              <1> .skipHole:
  2064                              <1> 
  2065 0000370F 488D1578D6FFFF      <1>     lea rdx, memApp
  2066 00003716 B409                <1>     mov ah, 09h
  2067 00003718 CD21                <1>     int 21h
  2068 0000371A 4889C8              <1>     mov rax, rcx
  2069 0000371D E85C000000          <1>     call .mcbPrintAmount
  2070 00003722 488D15D7D6FFFF      <1>     lea rdx, memByte
  2071 00003729 B409                <1>     mov ah, 09h
  2072 0000372B CD21                <1>     int 21h
  2073                              <1> 
  2074 0000372D 488D15A6D6FFFF      <1>     lea rdx, memFree
  2075 00003734 B409                <1>     mov ah, 09h
  2076 00003736 CD21                <1>     int 21h
  2077 00003738 4889F8              <1>     mov rax, rdi
  2078 0000373B E83E000000          <1>     call .mcbPrintAmount
  2079 00003740 488D15B9D6FFFF      <1>     lea rdx, memByte
  2080 00003747 B409                <1>     mov ah, 09h
  2081 00003749 CD21                <1>     int 21h
  2082                              <1> 
  2083 0000374B 488D15F0D5FFFF      <1>     lea rdx, memSys
  2084 00003752 B409                <1>     mov ah, 09h
  2085 00003754 CD21                <1>     int 21h
  2086 00003756 4889F0              <1>     mov rax, rsi
  2087 00003759 4801F8              <1>     add rax, rdi
  2088 0000375C 4801C8              <1>     add rax, rcx
  2089 0000375F 4801E8              <1>     add rax, rbp
  2090 00003762 E817000000          <1>     call .mcbPrintAmount
  2091 00003767 488D1592D6FFFF      <1>     lea rdx, memByte
  2092 0000376E B409                <1>     mov ah, 09h
  2093 00003770 CD21                <1>     int 21h
  2094                              <1> 
  2095 00003772 488D15F9D0FFFF      <1>     lea rdx, crlf
  2096 00003779 B409                <1>     mov ah, 09h
  2097 0000377B CD21                <1>     int 21h
  2098                              <1>     return
    13                              <2> %%_ret:
    14 0000377D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2099                              <1> 
  2100                              <1> .mcbPrintAmount:
  2101 0000377E 51                  <1>     push rcx
  2102 0000377F 56                  <1>     push rsi
  2103 00003780 57                  <1>     push rdi
  2104 00003781 55                  <1>     push rbp
  2105 00003782 B90F000000          <1>     mov ecx, 15 ;Makes space for up to (999 Gb of memory)
  2106 00003787 E8DC0C0000          <1>     call printDecimalValLB
  2107 0000378C 5D                  <1>     pop rbp
  2108 0000378D 5F                  <1>     pop rdi
  2109 0000378E 5E                  <1>     pop rsi
  2110 0000378F 59                  <1>     pop rcx
  2111                              <1>     return
    13                              <2> %%_ret:
    14 00003790 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2112                              <1> .badMCBFound:
  2113 00003791 488D15AFD6FFFF      <1>     lea rdx, memBad2
  2114 00003798 B409                <1>     mov ah, 09h
  2115 0000379A CD21                <1>     int 21h
  2116 0000379C E90F0E0000          <1>     jmp freezePC.altEP
  2117                              <1> 
  2118                              <1> type:
  2119 000037A1 F605FCC8FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  2120 000037A8 0F8417E7FFFF        <1>     jz badArgError
  2121 000037AE F605F2C8FFFFFF      <1>     test byte [arg2Flg], -1
  2122 000037B5 0F850AE7FFFF        <1>     jnz badArgError         ;If this set, error
  2123 000037BB 4C8B054DC8FFFF      <1>     mov r8, [pspPtr]
  2124 000037C2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2125 000037C9 0FB605D5C8FFFF      <1>     movzx eax, byte [arg1Off]
  2126 000037D0 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  2127 000037D3 803E0D              <1>     cmp byte [rsi], CR
  2128 000037D6 0F84E9E6FFFF        <1>     je badArgError
  2129 000037DC 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  2130 000037E0 750F                <1>     jne .noDrive
  2131 000037E2 0FB605BDC8FFFF      <1>     movzx eax, byte [arg1FCBret]
  2132 000037E9 3CFF                <1>     cmp al, -1
  2133 000037EB 0F84CBE6FFFF        <1>     je badDriveError
  2134                              <1> .noDrive:
  2135                              <1>     ;Now we open the provided file
  2136 000037F1 E8390C0000          <1>     call buildCommandPath
  2137 000037F6 488D1593CCFFFF      <1>     lea rdx, searchSpec
  2138 000037FD B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  2139 00003802 CD21                <1>     int 21h
  2140 00003804 0F82C4E6FFFF        <1>     jc badFileError
  2141 0000380A 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  2142 00003811 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  2143                              <1> .lp:
  2144 00003814 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  2145 00003819 B43F                <1>     mov ah, 3Fh ;Read handle
  2146 0000381B CD21                <1>     int 21h
  2147 0000381D 89C1                <1>     mov ecx, eax
  2148 0000381F 67E317              <1>     jecxz .exit
  2149 00003822 53                  <1>     push rbx    ;Save the original in handle
  2150 00003823 BB01000000          <1>     mov ebx, 1  ;STDOUT
  2151 00003828 B440                <1>     mov ah, 40h
  2152 0000382A CD21                <1>     int 21h
  2153 0000382C 5B                  <1>     pop rbx ;Get back the original read handle
  2154 0000382D 720F                <1>     jc .exitBad
  2155 0000382F 39C8                <1>     cmp eax, ecx
  2156 00003831 74E1                <1>     je .lp
  2157 00003833 FFC9                <1>     dec ecx ;One less for a ^Z
  2158 00003835 39C8                <1>     cmp eax, ecx
  2159 00003837 7505                <1>     jne .exitBad
  2160                              <1> .exit:
  2161 00003839 B43E                <1>     mov ah, 3Eh ;Close handle
  2162 0000383B CD21                <1>     int 21h
  2163                              <1>     return
    13                              <2> %%_ret:
    14 0000383D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2164                              <1> .exitBad:
  2165                              <1>     ;If it is a char device, don't print an error
  2166 0000383E B800440000          <1>     mov eax, 4400h  ;Get IOCTL mode 
  2167 00003843 BB01000000          <1>     mov ebx, 1
  2168 00003848 CD21                <1>     int 21h
  2169 0000384A F6C280              <1>     test dl, devCharDev
  2170                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000384D 75(3D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2171 0000384F E916E6FFFF          <1>     jmp badDiskFull
  2172                              <1> 
  2173                              <1> exit:
  2174 00003854 F60539C8FFFF01      <1>     test byte [statFlg1], permaShell
  2175 0000385B 740E                <1>     jz .ouch        ;If not permashell, time to EXIT
  2176 0000385D F60530C8FFFF04      <1>     test byte [statFlg1], inSingle  ;If perma and single command
  2177 00003864 0F85BBE2FFFF        <1>     jnz int2ERet    ;We are Int 2Eh, exit through the handler
  2178                              <1>     return  ;Else, permashell just returns
    13                              <2> %%_ret:
    14 0000386A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2179                              <1> .ouch:
  2180 0000386B B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  2181 00003870 CD21                <1>     int 21h
  2182                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00003872 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2183                              <1> 
  2184                              <1> launchChild:
  2185                              <1>     ;We execute an external command here.
  2186                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  2187                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  2188                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  2189                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  2190                              <1>     ;We know the drive we are on is valid so no need to double check that!
  2191 00003873 E8480D0000          <1>     call setDTA         
  2192                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  2193 00003878 488D3D68CAFFFF      <1>     lea rdi, cmdPathSpec
  2194 0000387F 4889FE              <1>     mov rsi, rdi
  2195 00003882 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  2196 00003887 CD2F                <1>     int 2fh
  2197 00003889 E8E40A0000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  2198 0000388E 4889FE              <1>     mov rsi, rdi    ;Source here
  2199 00003891 488D3D6EC8FFFF      <1>     lea rdi, cmdFcb
  2200 00003898 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  2201 0000389D CD21                <1>     int 21h
  2202 0000389F 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  2203 000038A1 0F854EE6FFFF        <1>     jnz badCmdError
  2204 000038A7 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  2205                              <1> .pathLoop:
  2206 000038AA 488D355EC8FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  2207 000038B1 488D3D09D6FFFF      <1>     lea rdi, extStr
  2208 000038B8 BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  2209                              <1> .extLp:
  2210 000038BD 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  2211 000038BE B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  2212 000038C3 F3A6                <1>     rep cmpsb   ;Compare the two strings
  2213 000038C5 5E                  <1>     pop rsi
  2214 000038C6 85C9                <1>     test ecx, ecx
  2215 000038C8 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  2216 000038CA 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  2217 000038CD FFCA                <1>     dec edx         ;Else one less extension type to check
  2218 000038CF 75EC                <1>     jnz .extLp
  2219                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  2220                              <1>     ;If not, error.
  2221 000038D1 B903000000          <1>     mov ecx, 3
  2222 000038D6 4889F7              <1>     mov rdi, rsi
  2223 000038D9 B020                <1>     mov al, SPC
  2224 000038DB F3AE                <1>     rep scasb   
  2225 000038DD 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  2226 000038DF 0F8510E6FFFF        <1>     jnz badCmdError    ;If not, error!
  2227                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  2228 000038E5 488D35D5D5FFFF      <1>     lea rsi, extStr
  2229 000038EC BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  2230                              <1> .extSrchLp:
  2231 000038F1 488D3D17C8FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2232 000038F8 B903000000          <1>     mov ecx, 3
  2233 000038FD F3A4                <1>     rep movsb   ;Copy the extension over!
  2234 000038FF E846010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  2235 00003904 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  2236 00003906 FFCB                <1>     dec ebx                 ;Decrement extension counter
  2237 00003908 75E7                <1>     jnz .extSrchLp
  2238                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  2239                              <1> ; we start prepending path componants and trying again. To do this, we reset
  2240                              <1> ; by setting the fcb extension back to all spaces.
  2241 0000390A 488D3DFEC7FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  2242 00003911 B903000000          <1>     mov ecx, 3
  2243 00003916 B020                <1>     mov al, SPC
  2244 00003918 F3AA                <1>     rep stosb   ;Store back the empty extension!
  2245 0000391A EB70                <1>     jmp short .pathHandle
  2246                              <1> .extFnd:
  2247                              <1> ;Here if the file had the right extension.
  2248 0000391C E829010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  2249 00003921 7269                <1>     jc .pathHandle
  2250                              <1> .extSrchFnd:
  2251                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  2252                              <1> ; a BAT. If it is, separate handling!
  2253 00003923 803DE5C7FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  2254 0000392A 0F844EE2FFFF        <1>     je batLaunch
  2255 00003930 488D1D0AC8FFFF      <1>     lea rbx, launchBlock
  2256 00003937 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  2257 0000393B 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  2258 0000393E 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  2259 00003945 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  2260 00003949 498D405C            <1>     lea rax, qword [r8 + fcb1]
  2261 0000394D 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  2262 00003951 498D406C            <1>     lea rax, qword [r8 + fcb2]
  2263 00003955 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  2264 00003959 488D1587C9FFFF      <1>     lea rdx, cmdPathSpec
  2265 00003960 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  2266 00003965 CD21                <1>     int 21h
  2267                              <1> ;If the program failed to start, verify why!
  2268 00003967 B800590000          <1>     mov eax, 5900h      ;Get extended error
  2269 0000396C 31DB                <1>     xor ebx, ebx
  2270 0000396E CD21                <1>     int 21h
  2271 00003970 66890596C6FFFF      <1>     mov word [returnCode], ax   ;Error code from EXEC
  2272 00003977 3C05                <1>     cmp al, errAccDen   ;Access denied?
  2273 00003979 0F842BE5FFFF        <1>     je badAccError
  2274 0000397F 3C07                <1>     cmp al, errMCBbad   ;If MCB bad error, freeze PC
  2275 00003981 0F841E0C0000        <1>     je freezePC
  2276 00003987 E969E5FFFF          <1>     jmp badCmdError     ;If something goes wrong, error out
  2277                              <1> .pathHandle:        
  2278                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  2279                              <1> ;al has error code!
  2280 0000398C 4885ED              <1>     test rbp, rbp
  2281 0000398F 0F85A3000000        <1>     jnz .pathReentry
  2282                              <1> ;Now check if the command we recieved included an absolute path.
  2283                              <1> ;If so, we don't do path substitution and just fail at this point
  2284 00003995 488D354BC9FFFF      <1>     lea rsi, cmdPathSpec
  2285 0000399C 66AD                <1>     lodsw   ;Get the first two chars
  2286 0000399E 3A0585C6FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  2287 000039A4 0F844BE5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2288 000039AA 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  2289 000039AC 7412                <1>     je .pathGetEnv
  2290 000039AE 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  2291 000039B1 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  2292 000039B3 AC                  <1>     lodsb   ;Get the third char
  2293 000039B4 3A056FC6FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  2294 000039BA 0F8435E5FFFF        <1>     je badCmdError  ;Therefore, exit bad!
  2295                              <1> .pathGetEnv:
  2296                              <1> ;Now get a pointer to the environment and search for PATH=
  2297                              <1> ;We only take the final portion of the path and add it to each path componant
  2298                              <1> ;This agrees with DOS 3.3
  2299 000039C0 E85C0C0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  2300 000039C5 0F842AE5FFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  2301                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  2302                              <1>     ;Now we know we dont have to keep track of chars!!
  2303 000039CB 488D3D11D5FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  2304 000039D2 E8A40C0000          <1>     call searchForEnvVar
  2305 000039D7 0F8218E5FFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  2306 000039DD 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  2307 000039E0 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  2308                              <1> .pathRejoin:
  2309 000039E7 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  2310 000039EA 0F8405E5FFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  2311 000039F0 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  2312 000039F3 488D3D96CAFFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  2313                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  2314                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  2315                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  2316                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  2317 000039FA E8D7090000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  2318 000039FF 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  2319 00003A02 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  2320 00003A05 48FFCF              <1>     dec rdi ;Point to the null terminator
  2321 00003A08 8A051BC6FFFF        <1>     mov al, byte [pathSep]
  2322 00003A0E 3847FF              <1>     cmp byte [rdi - 1], al
  2323 00003A11 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  2324 00003A13 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  2325                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  2326 00003A14 488D35ECC6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2327 00003A1B E876090000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  2328 00003A20 488D3569CAFFFF      <1>     lea rsi, searchSpec 
  2329 00003A27 488D3DB9C8FFFF      <1>     lea rdi, cmdPathSpec
  2330 00003A2E E84A080000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  2331 00003A33 E972FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  2332                              <1> .pathReentry:
  2333 00003A38 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  2334 00003A3C 0F84B3E4FFFF        <1>     je badCmdError
  2335                              <1> ;Currently, because we dont swap drives, we wont print this message.
  2336                              <1> ;Not really a big deal...
  2337                              <1>     ;cmp al, errBadDrv
  2338                              <1>     ;jne .pathDrvOk
  2339                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  2340                              <1>     ;mov eax, 0900h
  2341                              <1>     ;int 21h
  2342                              <1> ;.pathDrvOk:
  2343 00003A42 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  2344 00003A45 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  2345 00003A48 EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  2346                              <1> 
  2347                              <1> .prepAndSearch:
  2348                              <1> ;Copies over the name and extension in UC to the last componant of the 
  2349                              <1> ;cmdPathSpec and null terminates. 
  2350                              <1> ;Input: cmdFcb name + ext setup. 
  2351                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  2352                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  2353 00003A4A 51                  <1>     push rcx
  2354 00003A4B 56                  <1>     push rsi
  2355 00003A4C 57                  <1>     push rdi
  2356 00003A4D 488D3D93C8FFFF      <1>     lea rdi, cmdPathSpec 
  2357 00003A54 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  2358 00003A57 E816090000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  2359 00003A5C 807F013A            <1>     cmp byte [rdi + 1], ":"
  2360 00003A60 7507                <1>     jne .notdriveRel
  2361 00003A62 4881C702000000      <1>     add rdi, 2  ;Go past the drive specifier, but keep it!
  2362                              <1> .notdriveRel:
  2363 00003A69 488D3597C6FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  2364 00003A70 E821090000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  2365 00003A75 B8004E0000          <1>     mov eax, 4E00h  ;Find first
  2366 00003A7A 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  2367 00003A7C CD21                <1>     int 21h
  2368 00003A7E 5F                  <1>     pop rdi
  2369 00003A7F 5E                  <1>     pop rsi
  2370 00003A80 59                  <1>     pop rcx
  2371                              <1>     return
    13                              <2> %%_ret:
    14 00003A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2372                              <1> 
  2373                              <1> set:
  2374 00003A82 F6051BC6FFFFFF      <1>     test byte [arg1Flg], -1
  2375 00003A89 7539                <1>     jnz .editEnv
  2376                              <1>     ;Here we just print the environment.
  2377 00003A8B E8910B0000          <1>     call checkEnvGoodAndGet 
  2378 00003A90 0F840BE4FFFF        <1>     jz badEnvSpaceError
  2379                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  2380 00003A96 4889F7              <1>     mov rdi, rsi
  2381 00003A99 4889F2              <1>     mov rdx, rsi
  2382                              <1> .findLp:
  2383 00003A9C B9FFFFFFFF          <1>     mov ecx, -1
  2384 00003AA1 31C0                <1>     xor eax, eax
  2385                              <1> .scanLp:
  2386 00003AA3 F2AE                <1>     repne scasb
  2387 00003AA5 75FC                <1>     jne .scanLp
  2388 00003AA7 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  2389                              <1>     ;Else, we now print this environment variable and CRLF it
  2390                              <1>     ;rdx points to the start of the string aleady
  2391                              <1>     ;ecx has the bytes to print
  2392 00003AA9 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  2393 00003AAE B800400000          <1>     mov eax, 4000h  ;Print to handle
  2394 00003AB3 CD21                <1>     int 21h
  2395 00003AB5 E8AF050000          <1>     call printCRLF
  2396 00003ABA 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  2397                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003ABD 74(81)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2398 00003ABF 4889FA              <1>     mov rdx, rdi   
  2399 00003AC2 EBD8                <1>     jmp short .findLp
  2400                              <1> .editEnv:
  2401 00003AC4 E8580B0000          <1>     call checkEnvGoodAndGet
  2402 00003AC9 0F84D2E3FFFF        <1>     jz badEnvSpaceError
  2403 00003ACF 0FB605CFC5FFFF      <1>     movzx eax, byte [arg1Off]
  2404 00003AD6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2405 00003ADD 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  2406                              <1> .altEp:
  2407 00003AE0 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  2408 00003AE3 B00D                <1>     mov al, CR              ;Search for the CR
  2409 00003AE5 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  2410 00003AED 89CB                <1>     mov ebx, ecx            ;Save this count 
  2411 00003AEF 53                  <1>     push rbx                ;Save this count on the stack too!
  2412 00003AF0 F2AE                <1>     repne scasb             ;Now get the length of this env string
  2413 00003AF2 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  2414 00003AF4 66891D97CCFFFF      <1>     mov word [envVarSz], bx ;Store the count
  2415 00003AFB 59                  <1>     pop rcx                 ;Get the char count back!
  2416 00003AFC 89CB                <1>     mov ebx, ecx            
  2417 00003AFE 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  2418 00003B01 B03D                <1>     mov al, "="             ;Scan for an equals sign
  2419 00003B03 F2AE                <1>     repne scasb
  2420 00003B05 0F858DE3FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  2421 00003B0B 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  2422 00003B0D 66891D80CCFFFF      <1>     mov word [envVarNamSz], bx
  2423 00003B14 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  2424 00003B17 7477                <1>     je .delEnvVar           ;Free the envvar and return
  2425 00003B19 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  2426 00003B1A 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2427 00003B1D E8590B0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2428 00003B22 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  2429 00003B24 E8800B0000          <1>     call envFree            ;Free the var in rsi
  2430                              <1> .editNewEnv:
  2431 00003B29 E8B40B0000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  2432 00003B2E E8D40B0000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  2433 00003B33 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  2434 00003B34 31C0                <1>     xor eax, eax            ;Prepare null length!
  2435 00003B36 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  2436 00003B3C 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  2437 00003B3F 720B                <1>     jb .reallocTry          ;Try to reallocate!
  2438 00003B41 FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  2439 00003B43 663B0D48CCFFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  2440 00003B4A 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  2441                              <1> .reallocTry:
  2442                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  2443                              <1>     ; we proceed with the environment size.
  2444 00003B4C E8CB0B0000          <1>     call growEnvBlock   ;Attempt to grow the environment
  2445 00003B51 7319                <1>     jnc .reallocOk
  2446 00003B53 0F8448E3FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  2447                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  2448                              <1>     ; partially the variable into the env. If so we do that. If the name
  2449                              <1>     ; cannot fit, we don't bother
  2450                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  2451 00003B59 663B0D34CCFFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  2452                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003B60 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00003B62 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2453 00003B63 E839E3FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  2454 00003B68 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  2455 00003B6A EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  2456                              <1> .reallocOk:
  2457                              <1>     ;Here we have all the space to just copy the full path
  2458 00003B6C 0FB70D1FCCFFFF      <1>     movzx ecx, word [envVarSz]
  2459                              <1> .nameCp:
  2460                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  2461                              <1> ;Always enough memory for name= here
  2462 00003B73 AC                  <1>     lodsb
  2463 00003B74 E827070000          <1>     call ucChar
  2464 00003B79 AA                  <1>     stosb
  2465 00003B7A 66FFC9              <1>     dec cx      ;Always decrement this count
  2466 00003B7D 3C3D                <1>     cmp al, "="
  2467 00003B7F 75F2                <1>     jne .nameCp
  2468                              <1> .exitNameCp:
  2469 00003B81 AC                  <1>     lodsb
  2470 00003B82 3C0D                <1>     cmp al, CR
  2471 00003B84 7405                <1>     je .exitCp
  2472 00003B86 AA                  <1>     stosb
  2473 00003B87 FFC9                <1>     dec ecx
  2474 00003B89 75F6                <1>     jnz .exitNameCp
  2475                              <1> .exitCp:
  2476 00003B8B 31C0                <1>     xor eax, eax
  2477 00003B8D 66AB                <1>     stosw   ;Store the final null word
  2478                              <1>     return
    13                              <2> %%_ret:
    14 00003B8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2479                              <1> .delEnvVar:
  2480                              <1>     ;rsi -> Start of the envvar name in user buffer
  2481 00003B90 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  2482 00003B93 E8E30A0000          <1>     call searchForEnvVar    ;Look for the environment variable
  2483 00003B98 7205                <1>     jc .delEnvVarSkip
  2484 00003B9A E80A0B0000          <1>     call envFree    ;Free the env var at rsi
  2485                              <1> .delEnvVarSkip:
  2486 00003B9F F8                  <1>     clc             ;Clear CF if the var doesnt exist
  2487                              <1>     return
    13                              <2> %%_ret:
    14 00003BA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2488                              <1> 
  2489                              <1> pathEdit:
  2490                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  2491                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  2492                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  2493                              <1> ; end there. Error with too many arguments error!
  2494                              <1> ;If after the equals sign there is nothing, we just print the path!
  2495                              <1> ;Gotta process the command line ourselves first
  2496 00003BA1 E87B0A0000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2497 00003BA6 0F84F5E2FFFF        <1>     jz badEnvSpaceError
  2498                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2499 00003BAC 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2500 00003BB3 E8AD000000          <1>     call .skipPathDelimiters
  2501 00003BB8 3C0D                <1>     cmp al, CR
  2502 00003BBA 7466                <1>     je .printPath
  2503                              <1> ;Else use the set command to setup the path in the searchSpec.
  2504 00003BBC 56                  <1>     push rsi    ;Save the first char of the command line string
  2505 00003BBD 488D351FD3FFFF      <1>     lea rsi, pathEVar
  2506 00003BC4 488D3DC5C8FFFF      <1>     lea rdi, searchSpec
  2507 00003BCB E8AD060000          <1>     call strcpy
  2508 00003BD0 48FFCF              <1>     dec rdi     ;Point to the terminating null
  2509 00003BD3 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  2510 00003BD4 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  2511                              <1> .cpLp:
  2512 00003BD6 AC                  <1>     lodsb
  2513 00003BD7 3C0D                <1>     cmp al, CR
  2514 00003BD9 7411                <1>     je .cpLpExit
  2515 00003BDB E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  2516 00003BE0 740A                <1>     je .cpLpExit
  2517 00003BE2 E8B9060000          <1>     call ucChar ;Uppercase the char
  2518 00003BE7 AA                  <1>     stosb       ;Store it
  2519 00003BE8 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  2520 00003BEA EBEA                <1>     jmp short .cpLp
  2521                              <1> .cpLpExit:
  2522                              <1>     ;Remove trailing semicolons
  2523 00003BEC 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2524 00003BF0 7507                <1>     jne .cpLpNoIntervene
  2525 00003BF2 FFC9                <1>     dec ecx     ;Reduce the count by one
  2526 00003BF4 48FFCF              <1>     dec rdi     ;Go back a char
  2527 00003BF7 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2528                              <1> .cpLpNoIntervene:
  2529 00003BF9 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2530 00003BFB AA                  <1>     stosb       ;Store it!
  2531 00003BFC 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2532 00003C02 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2533 00003C09 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2534 00003C0B 488D357EC8FFFF      <1>     lea rsi, searchSpec
  2535 00003C12 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2536 00003C19 57                  <1>     push rdi
  2537 00003C1A F3A4                <1>     rep movsb
  2538 00003C1C 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2539 00003C1D E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2540                              <1> .printPath:
  2541 00003C22 488D3DBAD2FFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2542 00003C29 E84D0A0000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2543 00003C2E 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2544 00003C30 4889F7              <1>     mov rdi, rsi        
  2545 00003C33 E85E060000          <1>     call strlen         ;Get the length of the path in rdi
  2546 00003C38 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2547 00003C3E 7411                <1>     je .noPathPrnt      ;Print no path!
  2548 00003C40 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2549 00003C42 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2550 00003C45 BB01000000          <1>     mov ebx, 1          ;STDOUT
  2551 00003C4A B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2552 00003C4F EB0C                <1>     jmp short .pathExit
  2553                              <1> .noPathPrnt:
  2554 00003C51 488D1577CFFFFF      <1>     lea rdx, noPath
  2555 00003C58 B800090000          <1>     mov eax, 0900h
  2556                              <1> .pathExit:
  2557 00003C5D CD21                <1>     int 21h
  2558 00003C5F E805040000          <1>     call printCRLF      ;Print a crlf at the end
  2559                              <1>     return
    13                              <2> %%_ret:
    14 00003C64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2560                              <1> .skipPathDelimiters:
  2561                              <1> ;Input: rsi -> Start of string to parse
  2562                              <1> ;Output: rsi -> First non-delimiter char of string
  2563                              <1> ;        al = First non delim char
  2564 00003C65 AC                  <1>     lodsb
  2565 00003C66 E806000000          <1>     call .isALPathDelimiter
  2566 00003C6B 74F8                <1>     je .skipPathDelimiters
  2567 00003C6D 48FFCE              <1>     dec rsi
  2568                              <1>     return
    13                              <2> %%_ret:
    14 00003C70 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2569                              <1> .isALPathDelimiter:
  2570                              <1> ;Same as before without semicolon
  2571 00003C71 3C20                <1>     cmp al, SPC
  2572                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C73 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2573 00003C75 3C09                <1>     cmp al, TAB
  2574                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C77 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2575 00003C79 3C2C                <1>     cmp al, ","
  2576                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003C7B 74(70)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2577 00003C7D 3C3D                <1>     cmp al, "="
  2578                              <1>     return
    13                              <2> %%_ret:
    14 00003C7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2579                              <1> 
  2580                              <1> prompt:
  2581 00003C80 E89C090000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2582 00003C85 0F8416E2FFFF        <1>     jz badEnvSpaceError
  2583                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2584 00003C8B 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2585 00003C92 E824060000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2586 00003C97 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2587 00003C9A 742C                <1>     je .reset   ;Reset if so
  2588 00003C9C 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2589 00003C9D 488D3515D2FFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2590 00003CA4 488D3DE5C7FFFF      <1>     lea rdi, searchSpec
  2591 00003CAB B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2592 00003CB0 F3A4                <1>     rep movsb
  2593 00003CB2 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2594 00003CB3 31C9                <1>     xor ecx, ecx    ;Get char count
  2595                              <1> .cp:    ;Now copy the user string over
  2596 00003CB5 AC                  <1>     lodsb
  2597 00003CB6 AA                  <1>     stosb 
  2598 00003CB7 3C0D                <1>     cmp al, CR
  2599 00003CB9 7404                <1>     je .cpOk
  2600 00003CBB FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2601 00003CBD EBF6                <1>     jmp short .cp
  2602                              <1> .cpOk:
  2603 00003CBF 488D35CAC7FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2604 00003CC6 EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2605                              <1> .reset:
  2606                              <1> ;Delete the environment variable!
  2607 00003CC8 488D35EAD1FFFF      <1>     lea rsi, promptEVar 
  2608 00003CCF 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2609                              <1> .goSet:
  2610 00003CD1 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2611 00003CD7 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2612 00003CDE FFC1                <1>     inc ecx     ;Include CR in copy
  2613 00003CE0 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2614 00003CE7 57                  <1>     push rdi
  2615 00003CE8 F3A4                <1>     rep movsb
  2616 00003CEA 5E                  <1>     pop rsi
  2617 00003CEB E9F0FDFFFF          <1>     jmp set.altEp
  2618                              <1> 
  2619                              <1> echo:
  2620 00003CF0 F605ADC3FFFFFF      <1>     test byte [arg1Flg], -1 ;If no argument, display if on or off
  2621 00003CF7 752A                <1>     jnz .argGiven
  2622 00003CF9 488D15C0CFFFFF      <1>     lea rdx, echoIs
  2623 00003D00 E86B030000          <1>     call printString
  2624 00003D05 488D159ACFFFFF      <1>     lea rdx, onMes
  2625 00003D0C 488D0D8DCFFFFF      <1>     lea rcx, offMes
  2626 00003D13 F6057CC3FFFFFF      <1>     test byte [echoFlg], -1
  2627 00003D1A 480F44D1            <1>     cmovz rdx, rcx
  2628 00003D1E E94D030000          <1>     jmp printString
  2629                              <1> .argGiven:
  2630 00003D23 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  2631 00003D2A 0FB60574C3FFFF      <1>     movzx eax, byte [arg1Off]   ;Get the offset
  2632 00003D31 4801C6              <1>     add rsi, rax
  2633 00003D34 AC                  <1>     lodsb   ;Get this char
  2634 00003D35 48FFCE              <1>     dec rsi ;And go back to the start of the string
  2635 00003D38 E863050000          <1>     call ucChar
  2636 00003D3D 3C4F                <1>     cmp al, "O" ;Was it an O? If not, direct copy
  2637 00003D3F 755A                <1>     jne .directEcho
  2638 00003D41 8A4601              <1>     mov al, byte [rsi + 1]  ;Get the next char
  2639 00003D44 E857050000          <1>     call ucChar
  2640 00003D49 3C4E                <1>     cmp al, "N" ;If its N, check its the last char on the string
  2641 00003D4B 751B                <1>     jne .checkOff
  2642 00003D4D 56                  <1>     push rsi
  2643 00003D4E 4881C602000000      <1>     add rsi, 2  ;Go past on string
  2644 00003D55 E861050000          <1>     call skipDelimiters
  2645 00003D5A 803E0D              <1>     cmp byte [rsi], CR
  2646 00003D5D 5E                  <1>     pop rsi
  2647 00003D5E 753B                <1>     jne .directEcho ;If its not, just echo the string
  2648 00003D60 C6052FC3FFFF01      <1>     mov byte [echoFlg], 1   ;Set to 1 if on
  2649                              <1>     return
    13                              <2> %%_ret:
    14 00003D67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2650                              <1> .checkOff:
  2651 00003D68 8A4601              <1>     mov al, byte [rsi + 1]  ;Get first char past O
  2652 00003D6B E830050000          <1>     call ucChar
  2653 00003D70 3C46                <1>     cmp al, "F" ;Is it an F?
  2654 00003D72 7527                <1>     jne .directEcho ;No, just direct echo
  2655 00003D74 8A4602              <1>     mov al, byte [rsi + 2]
  2656 00003D77 E824050000          <1>     call ucChar
  2657 00003D7C 3C46                <1>     cmp al, "F"
  2658 00003D7E 751B                <1>     jne .directEcho
  2659 00003D80 56                  <1>     push rsi
  2660 00003D81 4881C603000000      <1>     add rsi, 3
  2661 00003D88 E82E050000          <1>     call skipDelimiters
  2662 00003D8D 803E0D              <1>     cmp byte [rsi], CR
  2663 00003D90 5E                  <1>     pop rsi
  2664 00003D91 7508                <1>     jne .directEcho
  2665 00003D93 C605FCC2FFFF00      <1>     mov byte [echoFlg], 0
  2666                              <1>     return
    13                              <2> %%_ret:
    14 00003D9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2667                              <1> .directEcho: 
  2668 00003D9B 498D9081000000      <1>     lea rdx, qword [r8 + cmdLine]
  2669 00003DA2 4889F3              <1>     mov rbx, rsi    
  2670 00003DA5 4829D3              <1>     sub rbx, rdx
  2671 00003DA8 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get original char count
  2672 00003DB0 29D9                <1>     sub ecx, ebx    ;Get the remaining chars
  2673 00003DB2 0F82A7020000        <1>     jc printCRLFecho    ;If something weird, echo nothing
  2674 00003DB8 4889F2              <1>     mov rdx, rsi
  2675 00003DBB BB01000000          <1>     mov ebx, 1
  2676 00003DC0 B800400000          <1>     mov eax, 4000h
  2677 00003DC5 CD21                <1>     int 21h
  2678 00003DC7 E99D020000          <1>     jmp printCRLF   ;Needs to be a proper CRLF to insert a CRLF at the end!
  2679                              <1> 
  2680                              <1> 
  2681                              <1> pauza:  ;Well... pause is an instruction in english 0:)
  2682                              <1> ;Thank you authors of MSDOS Encyclopedia for confusing an argument to this command
  2683                              <1> ; with just... the actual command tail being echoed with the command -_-
  2684 00003DCC F605C3C2FFFFFF      <1>     test byte [echoFlg], -1
  2685 00003DD3 7528                <1>     jnz .echoTail
  2686                              <1> ;Since we havent echoed the command out, type the tail out manually
  2687 00003DD5 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
  2688 00003DDC E8DA040000          <1>     call skipDelimiters ;Skip leading delims
  2689 00003DE1 4889F2              <1>     mov rdx, rsi
  2690 00003DE4 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]  ;Get the count
  2691 00003DEC BB01000000          <1>     mov ebx, 1  ;Echo to STDOUT 
  2692 00003DF1 B800400000          <1>     mov eax, 4000h  ;Write
  2693 00003DF6 CD21                <1>     int 21h
  2694 00003DF8 E86C020000          <1>     call printCRLF
  2695                              <1> .echoTail:
  2696 00003DFD 488D1533CCFFFF      <1>     lea rdx, pauseMes
  2697 00003E04 E867020000          <1>     call printString
  2698 00003E09 B800080000          <1>     mov eax, 0800h  ;CON input w/o echo. Triggers ^C
  2699 00003E0E CD21                <1>     int 21h
  2700 00003E10 E854020000          <1>     call printCRLF
  2701                              <1> remark:
  2702                              <1>     return
    13                              <2> %%_ret:
    14 00003E15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 00003E16 53                  <1>     push rbx
    11 00003E17 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 00003E19 803D0BC2FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 00003E20 7240                <1>     jb .usDate
    14 00003E22 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 00003E24 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 00003E29 E8B0000000          <1>     call .printFirst
    18 00003E2E 8A1502C2FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 00003E34 B402                <1>     mov ah, 02h
    20 00003E36 CD21                <1>     int 21h
    21                              <1> 
    22 00003E38 89C8                <1>     mov eax, ecx
    23 00003E3A 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 00003E3F C1E805              <1>     shr eax, 5
    25 00003E42 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 00003E47 8A15E9C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003E4D B402                <1>     mov ah, 02h
    29 00003E4F CD21                <1>     int 21h
    30                              <1> 
    31 00003E51 89C8                <1>     mov eax, ecx
    32 00003E53 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 00003E58 C1E809              <1>     shr eax, 9
    34 00003E5B 5B                  <1>     pop rbx ;Get the year signature back
    35 00003E5C E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003E61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003E62 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 00003E67 C1E805              <1>     shr eax, 5
    41 00003E6A E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003E6F 8A15C1C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003E75 B402                <1>     mov ah, 02h
    45 00003E77 CD21                <1>     int 21h
    46                              <1> 
    47 00003E79 89C8                <1>     mov eax, ecx
    48 00003E7B 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003E80 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003E85 8A15ABC1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 00003E8B B402                <1>     mov ah, 02h
    53 00003E8D CD21                <1>     int 21h
    54                              <1> 
    55 00003E8F 89C8                <1>     mov eax, ecx
    56 00003E91 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003E96 C1E809              <1>     shr eax, 9
    58 00003E99 5B                  <1>     pop rbx ;Get the year signature back
    59 00003E9A E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003E9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003EA0 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003EA5 C1E809              <1>     shr eax, 9
    65 00003EA8 5B                  <1>     pop rbx ;Get the year signature back
    66 00003EA9 E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003EAE 8A1582C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003EB4 B402                <1>     mov ah, 02h
    70 00003EB6 CD21                <1>     int 21h
    71                              <1> 
    72 00003EB8 89C8                <1>     mov eax, ecx
    73 00003EBA 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003EBF C1E805              <1>     shr eax, 5
    75 00003EC2 E833000000          <1>     call .printSecond
    76                              <1> 
    77 00003EC7 8A1569C1FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003ECD B402                <1>     mov ah, 02h
    79 00003ECF CD21                <1>     int 21h
    80                              <1> 
    81 00003ED1 89C8                <1>     mov eax, ecx
    82 00003ED3 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 00003ED8 E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003EDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003EDE 51                  <1>     push rcx
    89 00003EDF E85D060000          <1>     call getDecimalWord
    90 00003EE4 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003EE6 7504                <1>     jnz .skipSpace
    92 00003EE8 88CD                <1>     mov ch, cl
    93 00003EEA B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 00003EEC 88CA                <1>     mov dl, cl
    96 00003EEE B402                <1>     mov ah, 02h
    97 00003EF0 CD21                <1>     int 21h
    98 00003EF2 88EA                <1>     mov dl, ch
    99 00003EF4 B402                <1>     mov ah, 02h
   100 00003EF6 CD21                <1>     int 21h
   101 00003EF8 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 00003EF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 00003EFA 51                  <1>     push rcx
   105 00003EFB E841060000          <1>     call getDecimalWord
   106 00003F00 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 00003F02 75E8                <1>     jnz .skipSpace
   108 00003F04 88CD                <1>     mov ch, cl
   109 00003F06 B130                <1>     mov cl, "0"
   110 00003F08 EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 00003F0A 05BC070000          <1>     add eax, 1980
   113 00003F0F 51                  <1>     push rcx
   114 00003F10 53                  <1>     push rbx
   115 00003F11 E82B060000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 00003F16 5B                  <1>     pop rbx
   117 00003F17 84DB                <1>     test bl, bl
   118 00003F19 740C                <1>     jz .twoDigitYear
   119 00003F1B 88CA                <1>     mov dl, cl  ;Print the first digit
   120 00003F1D B402                <1>     mov ah, 02h
   121 00003F1F CD21                <1>     int 21h
   122 00003F21 88EA                <1>     mov dl, ch  ;Print the second digit
   123 00003F23 B402                <1>     mov ah, 02h
   124 00003F25 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 00003F27 C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 00003F2A 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 00003F2C B402                <1>     mov ah, 02h
   129 00003F2E CD21                <1>     int 21h
   130 00003F30 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 00003F32 B402                <1>     mov ah, 02h
   132 00003F34 CD21                <1>     int 21h
   133 00003F36 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 00003F37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 00003F38 89C1                <1>     mov ecx, eax
   142 00003F3A 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 00003F3F C1E80B              <1>     shr eax, 11
   144 00003F42 803DF3C0FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 00003F49 750B                <1>     jne .ampm
   146 00003F4B E85A000000          <1>     call .printHours
   147 00003F50 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003F55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003F56 3D0C000000          <1>     cmp eax, 12
   151 00003F5B 7713                <1>     ja .pm
   152 00003F5D 7416                <1>     je .pm2
   153 00003F5F E846000000          <1>     call .printHours
   154 00003F64 E81D000000          <1>     call .printMinutes
   155 00003F69 B261                <1>     mov dl, "a"
   156 00003F6B B402                <1>     mov ah, 02h
   157 00003F6D CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003F6F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003F70 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003F75 E830000000          <1>     call .printHours
   163 00003F7A E807000000          <1>     call .printMinutes
   164 00003F7F B270                <1>     mov dl, "p"
   165 00003F81 B402                <1>     mov ah, 02h
   166 00003F83 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003F85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003F86 8A15ACC0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 00003F8C B402                <1>     mov ah, 02h
   171 00003F8E CD21                <1>     int 21h
   172                              <1> 
   173 00003F90 89C8                <1>     mov eax, ecx
   174 00003F92 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 00003F97 C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 00003F9A 51                  <1>     push rcx
   178 00003F9B E8A1050000          <1>     call getDecimalWord
   179 00003FA0 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003FA2 7514                <1>     jnz .skipSpace
   181 00003FA4 88CD                <1>     mov ch, cl
   182 00003FA6 B130                <1>     mov cl, "0"
   183 00003FA8 EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 00003FAA 51                  <1>     push rcx
   186 00003FAB E891050000          <1>     call getDecimalWord
   187 00003FB0 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003FB2 7504                <1>     jnz .skipSpace
   189 00003FB4 88CD                <1>     mov ch, cl
   190 00003FB6 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 00003FB8 88CA                <1>     mov dl, cl
   193 00003FBA B402                <1>     mov ah, 02h
   194 00003FBC CD21                <1>     int 21h
   195 00003FBE 88EA                <1>     mov dl, ch
   196 00003FC0 B402                <1>     mov ah, 02h
   197 00003FC2 CD21                <1>     int 21h
   198 00003FC4 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003FC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003FC6 F605C9C0FFFFFF      <1>     test byte [echoFlg], -1 ;If echo off, no prompt!
   203                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FCD 74(C5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   204 00003FCF 488D3DE3CEFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   205 00003FD6 E8A0060000          <1>     call searchForEnvVar
   206 00003FDB 730B                <1>     jnc .validPrompt
   207                              <1>     ;Here we print the default prompt
   208 00003FDD E803010000          <1>     call putCWDInPrompt
   209 00003FE2 E8CF000000          <1>     call putGTinPrompt
   210                              <1>     return
    13                              <2> %%_ret:
    14 00003FE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> .validPrompt:
   212                              <1> ;rsi points to the prompt
   213 00003FE8 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   214                              <1> .promptLp:
   215 00003FEF AC                  <1>     lodsb   ;Get the char
   216 00003FF0 84C0                <1>     test al, al
   217                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003FF2 74(E7)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   218 00003FF4 3C24                <1>     cmp al, "$"
   219 00003FF6 7409                <1>     je .escapeChar
   220 00003FF8 88C2                <1>     mov dl, al
   221 00003FFA E8E1000000          <1>     call outChar    ;Prints the char in dl
   222 00003FFF EBEE                <1>     jmp short .promptLp
   223                              <1> .escapeChar:
   224 00004001 AC                  <1>     lodsb       ;Get the next char now that we are escaping
   225 00004002 E899020000          <1>     call ucChar ;Uppercase this char in al
   226 00004007 488D1D2A000000      <1>     lea rbx, .pTbl
   227 0000400E B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   228                              <1> .escapeLp:
   229 00004013 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   230 00004015 740D                <1>     je .escapeFnd
   231 00004017 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   232 0000401E FFC9                <1>     dec ecx
   233 00004020 75F1                <1>     jnz .escapeLp
   234 00004022 EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   235                              <1> .escapeFnd:
   236 00004024 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   237 0000402B 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   238 0000402F 4801D8              <1>     add rax, rbx                ;Add these
   239 00004032 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   240 00004033 FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   241 00004035 5E                  <1>     pop rsi
   242 00004036 EBB7                <1>     jmp short .promptLp
   243                              <1> 
   244                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   245                              <1> .pTbl:
   246 00004038 42                  <1>     db "B", 
   247 00004039 7A00                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   248 0000403B 44                  <1>     db "D", 
   249 0000403C 7901                <1>     dw printFmtDate - .pTbl        ;Current date
   250 0000403E 45                  <1>     db "E", 
   251 0000403F 6E00                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   252 00004041 47                  <1>     db "G", 
   253 00004042 7E00                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   254 00004044 48                  <1>     db "H", 
   255 00004045 8600                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   256 00004047 4C                  <1>     db "L", 
   257 00004048 8200                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   258 0000404A 4E                  <1>     db "N", 
   259 0000404B 9F00                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   260 0000404D 50                  <1>     db "P", 
   261 0000404E AD00                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   262 00004050 51                  <1>     db "Q", 
   263 00004051 7600                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   264 00004053 54                  <1>     db "T", 
   265 00004054 1001                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   266 00004056 56                  <1>     db "V", 
   267 00004057 4000                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   268 00004059 5F                  <1>     db "_", 
   269 0000405A 3100                <1>     dw printCRLF - .pTbl           ;CRLF pair
   270 0000405C 24                  <1>     db "$", 
   271 0000405D 7200                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   272                              <1> pTblL equ $ - .pTbl
   273                              <1> 
   274                              <1> printCRLFecho:
   275 0000405F F60530C0FFFFFF      <1>     test byte [echoFlg], -1
   276                              <1>     retz    ;If Echo off, don't do a CRLF!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004066 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004068 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> printCRLF:
   278 00004069 488D1502C8FFFF      <1>     lea rdx, crlf
   279                              <1> printString:
   280 00004070 B800090000          <1>     mov eax, 0900h  ;Print string
   281 00004075 CD21                <1>     int 21h
   282                              <1>     return
    13                              <2> %%_ret:
    14 00004077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> putVersionInPrompt:
   285 00004078 488D15A1CAFFFF      <1>     lea rdx, dosVer
   286 0000407F B409                <1>     mov ah, 09h ;Print String
   287 00004081 CD21                <1>     int 21h
   288 00004083 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   289 00004085 CD21                <1>     int 21h
   290 00004087 50                  <1>     push rax    ;Save minor version
   291 00004088 E896010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   292 0000408D E8AE010000          <1>     call printPackedBCD ;Print al
   293 00004092 B22E                <1>     mov dl, "."
   294 00004094 B402                <1>     mov ah, 02h
   295 00004096 CD21                <1>     int 21h
   296 00004098 58                  <1>     pop rax
   297 00004099 88E0                <1>     mov al, ah  ;Get the minor version low
   298 0000409B E883010000          <1>     call hexToBCD
   299 000040A0 E89B010000          <1>     call printPackedBCD
   300                              <1>     return
    13                              <2> %%_ret:
    14 000040A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> putEscInPrompt:
   302 000040A6 B21B                <1>     mov dl, ESC
   303 000040A8 EB36                <1>     jmp short outChar
   304                              <1> 
   305                              <1> putMoneyInPrompt:
   306 000040AA B224                <1>     mov dl, "$"
   307 000040AC EB32                <1>     jmp short outChar
   308                              <1> 
   309                              <1> putEquInPrompt:
   310 000040AE B23D                <1>     mov dl, "="
   311 000040B0 EB2E                <1>     jmp short outChar
   312                              <1> 
   313                              <1> putPipeInPrompt:
   314 000040B2 B27C                <1>     mov dl, "|"
   315 000040B4 EB2A                <1>     jmp short outChar
   316                              <1> 
   317                              <1> putGTinPrompt:
   318 000040B6 B23E                <1>     mov dl, ">"
   319 000040B8 EB26                <1>     jmp short outChar
   320                              <1> 
   321                              <1> putLTinPrompt:
   322 000040BA B23C                <1>     mov dl, "<"
   323 000040BC EB22                <1>     jmp short outChar
   324                              <1> 
   325                              <1> putBSPinPrompt:
   326 000040BE 488D1556CCFFFF      <1>     lea rdx, backSpace
   327 000040C5 B903000000          <1>     mov ecx, 3
   328 000040CA BB01000000          <1>     mov ebx, 1
   329 000040CF B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   330 000040D4 CD21                <1>     int 21h
   331                              <1>     return
    13                              <2> %%_ret:
    14 000040D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> 
   333                              <1> putDriveInPrompt:
   334 000040D7 E89C010000          <1>     call getCurrentDrive
   335 000040DC 0441                <1>     add al, "A" ;Convert to letter
   336 000040DE 88C2                <1>     mov dl, al
   337                              <1> outChar:
   338 000040E0 B402                <1>     mov ah, 02h ;Echo to STDOUT
   339 000040E2 CD21                <1>     int 21h
   340                              <1>     return
    13                              <2> %%_ret:
    14 000040E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> putCWDInPrompt:
   342 000040E5 E88E010000          <1>     call getCurrentDrive
   343 000040EA 3805A5BFFFFF        <1>     cmp byte [failDrv], al  ;If these are equal, badDrive
   344 000040F0 C6059EBFFFFFFF      <1>     mov byte [failDrv], -1  ;Reset on read
   345 000040F7 7443                <1>     je .badDrive 
   346 000040F9 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   347 000040FB FEC2                <1>     inc dl
   348 000040FD 0441                <1>     add al, "A" ;Convert to letter
   349 000040FF B43A                <1>     mov ah, ":"
   350 00004101 488D3D49BFFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   351 00004108 66AB                <1>     stosw   ;Store X:, rdi+=2
   352 0000410A 8A0519BFFFFF        <1>     mov al, byte [pathSep]
   353 00004110 AA                  <1>     stosb   ;Store pathSep, inc rdi
   354 00004111 B800470000          <1>     mov eax, 4700h  ;Get Current Working Directory
   355 00004116 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   356 00004119 CD21                <1>     int 21h
   357 0000411B 721F                <1>     jc .badDrive
   358 0000411D E874010000          <1>     call strlen
   359 00004122 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   360                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   361 00004128 B800400000          <1>     mov eax, 4000h ;Write to handle
   362 0000412D BB01000000          <1>     mov ebx, 1  ;STDOUT
   363 00004132 488D1518BFFFFF      <1>     lea rdx, currDirStr
   364 00004139 CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 0000413B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> .badDrive:
   367                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   368 0000413C 488D15A5CAFFFF      <1>     lea rdx, badDrvMsg
   369 00004143 E928FFFFFF          <1>     jmp printString
   370                              <1> printFmtTime:
   371                              <1> ;Outputs the formatted time
   372 00004148 E847000000          <1>     call getTime
   373 0000414D 0FB6C5              <1>     movzx eax, ch
   374 00004150 E855FEFFFF          <1>     call printTime.printHours
   375 00004155 8A15DDBEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   376 0000415B B402                <1>     mov ah, 02h
   377 0000415D CD21                <1>     int 21h
   378 0000415F 0FB605F3C4FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   379 00004166 E82FFEFFFF          <1>     call printTime.printMinutesAlt
   380 0000416B 8A15C7BEFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   381 00004171 B402                <1>     mov ah, 02h
   382 00004173 CD21                <1>     int 21h
   383 00004175 0FB605E0C4FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   384 0000417C E819FEFFFF          <1>     call printTime.printMinutesAlt
   385 00004181 B22E                <1>     mov dl, "."
   386 00004183 B402                <1>     mov ah, 02h
   387 00004185 CD21                <1>     int 21h
   388 00004187 0FB605CDC4FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   389 0000418E E807FEFFFF          <1>     call printTime.printMinutesAlt
   390                              <1>     return
    13                              <2> %%_ret:
    14 00004193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> getTime:
   392 00004194 B42C                <1>     mov ah, 2Ch ;DOS get time
   393 00004196 CD21                <1>     int 21h
   394                              <1>     ;CH = hour (0-23)
   395                              <1> 	;CL = minutes (0-59)
   396                              <1> 	;DH = seconds (0-59)
   397                              <1> 	;DL = hundredths (0-99)
   398 00004198 880DBBC4FFFF        <1>     mov byte [td1], cl
   399 0000419E 882DB6C4FFFF        <1>     mov byte [td2], ch
   400 000041A4 8815B1C4FFFF        <1>     mov byte [td3], dl
   401 000041AA 8835ACC4FFFF        <1>     mov byte [td4], dh
   402                              <1>     return
    13                              <2> %%_ret:
    14 000041B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> 
   404                              <1> printFmtDate:
   405                              <1> ;Outputs the formatted date
   406 000041B1 B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   407 000041B6 CD21                <1>     int 21h
   408                              <1> 	;AL = day of the week (0=Sunday)
   409                              <1> 	;CX = year (1980-2099)
   410                              <1> 	;DH = month (1-12)
   411                              <1> 	;DL = day (1-31)
   412 000041B8 6681E9BC07          <1>     sub cx, 1980    ;Subtract 1980 from cx
   413 000041BD 66890D95C4FFFF      <1>     mov word [td1], cx
   414 000041C4 881591C4FFFF        <1>     mov byte [td3], dl
   415 000041CA 88358CC4FFFF        <1>     mov byte [td4], dh
   416 000041D0 0FB6C0              <1>     movzx eax, al
   417 000041D3 89C3                <1>     mov ebx, eax
   418 000041D5 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   419 000041D7 01D8                <1>     add eax, ebx ;Make it 3 times 
   420 000041D9 488D158AC8FFFF      <1>     lea rdx, dayName
   421 000041E0 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   422 000041E4 B903000000          <1>     mov ecx, 3  ;Print three chars
   423 000041E9 BB01000000          <1>     mov ebx, 1  ;STDOUT
   424 000041EE B440                <1>     mov ah, 40h ;Write to handle
   425 000041F0 CD21                <1>     int 21h
   426 000041F2 B220                <1>     mov dl, " "
   427 000041F4 E8E7FEFFFF          <1>     call outChar
   428                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   429                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   430                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   431 000041F9 0FB70559C4FFFF      <1>     movzx eax, word [td1]   ;Get this word
   432 00004200 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   433 00004203 0FB61D52C4FFFF      <1>     movzx ebx, byte [td4]
   434 0000420A C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   435 0000420D 09D8                <1>     or eax, ebx ;Add this date to eax
   436 0000420F 0FB61D45C4FFFF      <1>     movzx ebx, byte [td3]
   437 00004216 09D8                <1>     or eax, ebx
   438 00004218 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   439 0000421D E8F4FBFFFF          <1>     call printDate
   440                              <1>     return
    13                              <2> %%_ret:
    14 00004222 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> 
   442                              <1> 
   443                              <1> hexToBCD:
   444                              <1> ;Converts a Hex byte into two BCD digits
   445                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   446 00004223 51                  <1>     push rcx
   447 00004224 0FB6C0              <1>     movzx eax, al   ;Zero extend
   448 00004227 31C9                <1>     xor ecx, ecx
   449                              <1> .htb0:
   450 00004229 3D0A000000          <1>     cmp eax, 10
   451 0000422E 7209                <1>     jb .htb1
   452 00004230 2D0A000000          <1>     sub eax, 10
   453 00004235 FFC1                <1>     inc ecx
   454 00004237 EBF0                <1>     jmp short .htb0
   455                              <1> .htb1:
   456 00004239 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   457 0000423C 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   458 0000423E 59                  <1>     pop rcx
   459 0000423F C3                  <1>     ret
   460                              <1> 
   461                              <1> printPackedBCD:
   462                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   463                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   464                              <1> ;Preserves all registers
   465 00004240 50                  <1>     push rax
   466 00004241 52                  <1>     push rdx
   467 00004242 88C4                <1>     mov ah, al
   468 00004244 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   469 00004246 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   470 00004249 7508                <1>     jnz .upperNybble
   471 0000424B B220                <1>     mov dl, " "
   472 0000424D B402                <1>     mov ah, 02h
   473 0000424F CD21                <1>     int 21h
   474 00004251 EB0E                <1>     jmp short .lowerNybble
   475                              <1> .upperNybble:
   476 00004253 50                  <1>     push rax
   477 00004254 C0EC04              <1>     shr ah, 4
   478 00004257 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   479 0000425A 88E2                <1>     mov dl, ah
   480 0000425C B402                <1>     mov ah, 02h ;Print DL
   481 0000425E CD21                <1>     int 21h
   482 00004260 58                  <1>     pop rax
   483                              <1> .lowerNybble:
   484 00004261 0430                <1>     add al, "0"
   485 00004263 88C2                <1>     mov dl, al
   486 00004265 B402                <1>     mov ah, 02h ;Print DL
   487 00004267 CD21                <1>     int 21h
   488 00004269 5A                  <1>     pop rdx
   489 0000426A 58                  <1>     pop rax
   490                              <1>     return
    13                              <2> %%_ret:
    14 0000426B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> setDrive:
   493                              <1> ;Input: dl = 0 based Drive number to set to
   494                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   495                              <1> ;AX trashed.
   496 0000426C B40E                <1>     mov ah, 0Eh ;Set drive to dl
   497 0000426E CD21                <1>     int 21h 
   498 00004270 E803000000          <1>     call getCurrentDrive
   499 00004275 38D0                <1>     cmp al, dl  ;Is this the same drive?
   500                              <1>     return
    13                              <2> %%_ret:
    14 00004277 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   501                              <1> getCurrentDrive:
   502                              <1> ;Returns the 0 based current drive in al
   503 00004278 B419                <1>     mov ah, 19h
   504 0000427A CD21                <1>     int 21h
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000427C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> 
   507                              <1> strcpy:
   508                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   509                              <1> ;rsi -> Source
   510                              <1> ;rdi -> Destination
   511 0000427D 51                  <1>     push rcx
   512 0000427E 57                  <1>     push rdi
   513 0000427F 4889F7              <1>     mov rdi, rsi
   514 00004282 E80F000000          <1>     call strlen ;Get the length of the string in rsi
   515 00004287 5F                  <1>     pop rdi
   516 00004288 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   517 0000428A 59                  <1>     pop rcx
   518                              <1>     return
    13                              <2> %%_ret:
    14 0000428B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> strcpy2:
   521                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   522                              <1> ;rsi -> Source
   523                              <1> ;rdi -> Destination
   524 0000428C 56                  <1>     push rsi
   525 0000428D 57                  <1>     push rdi
   526 0000428E E8EAFFFFFF          <1>     call strcpy 
   527 00004293 5F                  <1>     pop rdi
   528 00004294 5E                  <1>     pop rsi
   529                              <1>     return
    13                              <2> %%_ret:
    14 00004295 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> strlen:
   532                              <1> ;Gets the length of a ASCIIZ string
   533                              <1> ;Input: rdi = Source buffer
   534                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   535 00004296 50                  <1>     push rax
   536 00004297 B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   537 0000429C CD2F                <1>     int 2fh
   538 0000429E 58                  <1>     pop rax
   539                              <1>     return
    13                              <2> %%_ret:
    14 0000429F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   540                              <1> 
   541                              <1> ucChar:
   542                              <1> ;Input: al = Char to uppercase
   543                              <1> ;Output: al = Adjusted char 
   544 000042A0 53                  <1>     push rbx
   545 000042A1 50                  <1>     push rax    ;Push the char twice on the stack
   546 000042A2 B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   547 000042A7 CD2F                <1>     int 2fh         ;Returns the processed char in al
   548 000042A9 5B                  <1>     pop rbx         ;Pop the old word off the stack
   549 000042AA 5B                  <1>     pop rbx
   550                              <1>     return
    13                              <2> %%_ret:
    14 000042AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> normalisePath:
   553                              <1> ;Uppercases chars and flips pathseps
   554                              <1> ;Input: rsi -> Path to normalise
   555 000042AC 50                  <1>     push rax
   556 000042AD 57                  <1>     push rdi
   557 000042AE 4889F7              <1>     mov rdi, rsi
   558 000042B1 B811120000          <1>     mov eax, 1211h
   559 000042B6 CD2F                <1>     int 2fh
   560 000042B8 5F                  <1>     pop rdi
   561 000042B9 58                  <1>     pop rax
   562                              <1>     return
    13                              <2> %%_ret:
    14 000042BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> skipDelimiters:
   565                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   566                              <1> ; command delimiters but a subset thereof. 
   567                              <1> ;These are the same across all codepages.
   568                              <1> ;Input: rsi must point to the start of the data string
   569                              <1> ;Output: rsi points to the first non-delimiter char
   570 000042BB 50                  <1>     push rax
   571                              <1> .l1:
   572 000042BC AC                  <1>     lodsb
   573 000042BD E807000000          <1>     call isALdelimiter
   574 000042C2 74F8                <1>     jz .l1
   575                              <1> .exit:
   576 000042C4 58                  <1>     pop rax
   577 000042C5 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   578                              <1>     return
    13                              <2> %%_ret:
    14 000042C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> isALdelimiter:
   581                              <1> ;Returns: ZF=NZ if al is not a command separator 
   582                              <1> ;         ZF=ZE if al is a command separator
   583 000042C9 3C20                <1>     cmp al, " "
   584                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042CB 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   585 000042CD 3C3B                <1>     cmp al, ";"
   586                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042CF 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   587 000042D1 3C3D                <1>     cmp al, "="
   588                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042D3 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   589 000042D5 3C2C                <1>     cmp al, ","
   590                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000042D7 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   591 000042D9 3C09                <1>     cmp al, TAB
   592                              <1>     return
    13                              <2> %%_ret:
    14 000042DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> clearCommandState:
   595                              <1> ;Clears the command state
   596 000042DC 488D3DC1BDFFFF      <1>     lea rdi, cmdStatePtr
   597 000042E3 B907000000          <1>     mov ecx, cmdStateL
   598 000042E8 31C0                <1>     xor eax, eax
   599 000042EA F3AA                <1>     rep stosb
   600                              <1>     return
    13                              <2> %%_ret:
    14 000042EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   601                              <1> 
   602                              <1> clearCommandLineState:
   603                              <1> ;Clears the command line state after a 0Dh encountered
   604 000042ED 488D3DA5BDFFFF      <1>     lea rdi, cmdLineStatePtr
   605 000042F4 B912000000          <1>     mov ecx, cmdLineStateL
   606 000042F9 31C0                <1>     xor eax, eax
   607 000042FB F3AA                <1>     rep stosb
   608 000042FD C70593BDFFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   608 00004306 FF                  <1>
   609 00004307 C7058FBDFFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   609 00004310 FF                  <1>
   610                              <1> ;Close all handles from 5->MAX
   611 00004311 0FB70D0FBDFFFF      <1>     movzx ecx, word [numHdls]
   612 00004318 BB05000000          <1>     mov ebx, 5
   613                              <1> .lp:
   614 0000431D B43E                <1>     mov ah, 3Eh ;File close
   615 0000431F CD21                <1>     int 21h
   616 00004321 FFC3                <1>     inc ebx ;Goto next file
   617 00004323 39CB                <1>     cmp ebx, ecx
   618 00004325 76F6                <1>     jbe .lp    ;Keep looping whilst below or equal
   619                              <1>     return
    13                              <2> %%_ret:
    14 00004327 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> asciiFilenameToFCB:
   622                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   623                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   624                              <1> ;Also doesn't check if chars are valid
   625                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   626                              <1> ;Name is space padded.
   627                              <1> ;Input: rsi = ASCII string buffer
   628                              <1> ;       rdi = FCB name buffer
   629                              <1> ;Output: al = Char that terminated the source string 
   630 00004328 53                  <1>     push rbx    
   631 00004329 57                  <1>     push rdi
   632 0000432A B90B000000          <1>     mov ecx, 11
   633 0000432F B020                <1>     mov al, " "
   634 00004331 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   635 00004333 5F                  <1>     pop rdi
   636 00004334 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   637                              <1>     ;Preprocess for Dir Searches
   638 00004337 803E2E              <1>     cmp byte [rsi], "."
   639 0000433A 7509                <1>     jne .processName
   640 0000433C A4                  <1>     movsb   ;Store the first dot
   641 0000433D 803E2E              <1>     cmp byte [rsi], "."
   642 00004340 752C                <1>     jne .exitBadChar
   643 00004342 A4                  <1>     movsb
   644 00004343 EB29                <1>     jmp short .exitBadChar
   645                              <1> .processName:
   646 00004345 AC                  <1>     lodsb   ;Get the char in al
   647 00004346 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   648 00004348 7426                <1>     jz .exit
   649 0000434A 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   650 0000434C 7407                <1>     je .extSpace
   651 0000434E 3C2E                <1>     cmp al, "."
   652 00004350 740C                <1>     je .ext
   653 00004352 AA                  <1>     stosb   ;Store the char
   654 00004353 EBF0                <1>     jmp short .processName
   655                              <1> .extSpace:
   656                              <1> ;Now we scan for a period in the name
   657 00004355 AC                  <1>     lodsb   ;Get a char and increase rsi
   658 00004356 84C0                <1>     test al, al
   659 00004358 7416                <1>     jz .exit
   660 0000435A 3C2E                <1>     cmp al, "."     ;If al is not a period...
   661 0000435C 75F7                <1>     jne .extSpace   ; keep searching
   662                              <1> .ext:
   663 0000435E 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   664                              <1> .processExt:
   665 00004362 AC                  <1>     lodsb
   666 00004363 84C0                <1>     test al, al
   667 00004365 7409                <1>     jz .exit
   668 00004367 3C20                <1>     cmp al, " "
   669 00004369 7405                <1>     je .exit
   670 0000436B AA                  <1>     stosb
   671 0000436C EBF4                <1>     jmp short .processExt
   672                              <1> .exitBadChar:
   673 0000436E 30C0                <1>     xor al, al  ;Return a null terminator
   674                              <1> .exit:
   675 00004370 5B                  <1>     pop rbx
   676                              <1>     return
    13                              <2> %%_ret:
    14 00004371 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   677                              <1> 
   678                              <1> findLastPathComponant:
   679                              <1> ;Finds the last path componant of an ASCIIZ path string
   680                              <1> ;Input: rdi -> Head of the path to find last componant on
   681                              <1> ;Output: rdi -> Start of the last componant
   682 00004372 50                  <1>     push rax
   683 00004373 51                  <1>     push rcx
   684 00004374 31C9                <1>     xor ecx, ecx
   685 00004376 FFC9                <1>     dec ecx
   686 00004378 31C0                <1>     xor eax, eax
   687 0000437A F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   688 0000437C F7D1                <1>     not ecx     ;This gets the count of chars  
   689 0000437E 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   690 00004381 8A05A2BCFFFF        <1>     mov al, byte [pathSep]
   691 00004387 FD                  <1>     std
   692 00004388 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   693 0000438A FC                  <1>     cld
   694 0000438B 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   695 0000438D 48FFC7              <1>     inc rdi     ;Point at pathsep
   696                              <1> .exit:
   697 00004390 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   698 00004393 59                  <1>     pop rcx
   699 00004394 58                  <1>     pop rax
   700                              <1>     return
    13                              <2> %%_ret:
    14 00004395 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> 
   702                              <1> FCBToAsciiz:
   703                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   704                              <1> ;Name is space padded too
   705                              <1> ;Input: rsi = FCB name buffer
   706                              <1> ;       rdi = ASCIIZ string buffer
   707 00004396 B908000000          <1>     mov ecx, 8
   708 0000439B F3A4                <1>     rep movsb   ;Move the name over
   709                              <1> .scanNameSpace:
   710 0000439D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   711 000043A1 750D                <1>     jne .ext
   712 000043A3 48FFCF              <1>     dec rdi
   713 000043A6 FFC1                <1>     inc ecx
   714 000043A8 81F908000000        <1>     cmp ecx, 8
   715 000043AE 72ED                <1>     jb .scanNameSpace
   716                              <1> .ext:
   717 000043B0 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   718 000043B5 7506                <1>     jne .validExt
   719 000043B7 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   720 000043BB 7415                <1>     je .exit
   721                              <1> .validExt:
   722 000043BD B02E                <1>     mov al, "." ;We have a valid extension, store a period
   723 000043BF AA                  <1>     stosb
   724 000043C0 B903000000          <1>     mov ecx, 3
   725 000043C5 F3A4                <1>     rep movsb   ;Move the three extension chars over
   726                              <1> .scanExtSpace:
   727 000043C7 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   728 000043CB 7505                <1>     jne .exit
   729 000043CD 48FFCF              <1>     dec rdi
   730 000043D0 EBF5                <1>     jmp short .scanExtSpace
   731                              <1> .exit:
   732 000043D2 31C0                <1>     xor eax, eax
   733 000043D4 AA                  <1>     stosb   ;Store a null at the end
   734                              <1>     return
    13                              <2> %%_ret:
    14 000043D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   735                              <1> 
   736                              <1> cpDelimOrCtrlStringToBufz:
   737                              <1> ;Copy a delimited or control char terminated string to a buffer
   738                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   739                              <1> ;       rdi -> Buffer to store null terminated string in
   740                              <1> ;Output: rsi -> First char past string end
   741                              <1> ;       rdi -> One char past null terminator on string buffer
   742 000043D6 C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   743                              <1> .lp:
   744 000043D9 AC                  <1>     lodsb
   745 000043DA 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   746 000043DC 760A                <1>     jbe .exit
   747 000043DE E8E6FEFFFF          <1>     call isALdelimiter
   748 000043E3 7403                <1>     je .exit
   749 000043E5 AA                  <1>     stosb
   750 000043E6 EBF1                <1>     jmp short .lp
   751                              <1> .exit:
   752 000043E8 31C0                <1>     xor eax, eax
   753 000043EA AA                  <1>     stosb   ;Store a null terminator
   754                              <1>     return
    13                              <2> %%_ret:
    14 000043EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   755                              <1> 
   756                              <1> 
   757                              <1> cpDelimPathToBufz:
   758                              <1> ;Copy a delimited path into buffer and null terminate.
   759                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   760                              <1> ;       rdi -> Buffer to store null terminated path in
   761                              <1> ;Output: rsi -> First char past pathname delimiter
   762                              <1> ;       rdi -> One char past null terminator on pathname buffer
   763 000043EC 53                  <1>     push rbx
   764 000043ED 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   765 000043F0 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   766                              <1> .lp:
   767 000043F3 AC                  <1>     lodsb   ;Get the char
   768 000043F4 3C0D                <1>     cmp al, CR
   769 000043F6 7412                <1>     je .gotRedirPath
   770 000043F8 E8CCFEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   771 000043FD 740B                <1>     jz .gotRedirPath 
   772 000043FF 3A0525BCFFFF        <1>     cmp al, byte [switchChar]
   773 00004405 7403                <1>     je .gotRedirPath
   774 00004407 AA                  <1>     stosb   ;Store this char and loop next char
   775 00004408 EBE9                <1>     jmp short .lp
   776                              <1> .gotRedirPath:
   777 0000440A 50                  <1>     push rax    ;Save the char on stack
   778 0000440B 30C0                <1>     xor al, al  ;Get null terminator char
   779 0000440D 4829FB              <1>     sub rbx, rdi
   780 00004410 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   781 00004417 7412                <1>     je .notColon
   782 00004419 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   783 00004420 7409                <1>     je .notColon
   784 00004422 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   785 00004426 7503                <1>     jne .notColon
   786 00004428 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   787                              <1> .notColon:
   788 0000442B AA                  <1>     stosb   ;Store the null terminator for the redir path
   789 0000442C 58                  <1>     pop rax ;Get back the char in al
   790 0000442D 5B                  <1>     pop rbx
   791                              <1>     return
    13                              <2> %%_ret:
    14 0000442E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   792                              <1> 
   793                              <1> buildCommandPath:
   794                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   795 0000442F 0FB6056FBCFFFF      <1>     movzx eax, byte [arg1Off]
   796 00004436 4C8B05D2BBFFFF      <1>     mov r8, [pspPtr]
   797 0000443D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   798 00004444 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   799                              <1> copyArgumentToSearchSpec:
   800                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   801                              <1> ; and null terminates
   802 00004447 488D3D42C0FFFF      <1>     lea rdi, searchSpec
   803 0000444E E899FFFFFF          <1>     call cpDelimPathToBufz
   804                              <1>     return
    13                              <2> %%_ret:
    14 00004453 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> 
   806                              <1> scanForWildcards:
   807                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   808                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   809 00004454 50                  <1>     push rax
   810 00004455 56                  <1>     push rsi
   811                              <1> .lp:
   812 00004456 AC                  <1>     lodsb
   813 00004457 3C3F                <1>     cmp al, "?"
   814 00004459 740A                <1>     je .exit
   815 0000445B 3C2A                <1>     cmp al, "*"
   816 0000445D 7406                <1>     je .exit
   817 0000445F 84C0                <1>     test al, al
   818 00004461 75F3                <1>     jnz .lp
   819 00004463 FEC0                <1>     inc al  ;This will clear the ZF
   820                              <1> .exit:
   821 00004465 5E                  <1>     pop rsi
   822 00004466 58                  <1>     pop rax
   823                              <1>     return
    13                              <2> %%_ret:
    14 00004467 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> printDecimalValLB:
   826                              <1> ;Takes a value in rax and prints it's decimal representation with leading
   827                              <1> ; blanks and inserts commas where appropriate.
   828                              <1> ;Input: rax = Value to print
   829                              <1> ;       rcx = Buffer size to handle (usual values: 17 for max, 13 for dword)
   830 00004468 4889E5              <1>     mov rbp, rsp
   831 0000446B 4829CC              <1>     sub rsp, rcx ;Allocate the buffer on the stack
   832 0000446E 4889EF              <1>     mov rdi, rbp
   833 00004471 4829CF              <1>     sub rdi, rcx
   834 00004474 50                  <1>     push rax
   835 00004475 51                  <1>     push rcx
   836 00004476 57                  <1>     push rdi
   837 00004477 31C0                <1>     xor eax, eax
   838 00004479 F3AA                <1>     rep stosb   ;Initialise the buffer with a null value
   839 0000447B 5F                  <1>     pop rdi     ;Now set the ptr to the head of the buffer
   840 0000447C 59                  <1>     pop rcx
   841 0000447D 58                  <1>     pop rax
   842 0000447E 51                  <1>     push rcx    ;Save this value to keep the buffer length
   843 0000447F E83E000000          <1>     call decimalise   ;If return with CF=CY, error!
   844 00004484 59                  <1>     pop rcx     ;Now print the buffer
   845 00004485 4889EF              <1>     mov rdi, rbp
   846 00004488 48FFCF              <1>     dec rdi     ;Doesn't affect CF
   847 0000448B 722A                <1>     jc .errPrint    ;Print a mis-aligned ? to clearly mark an error!
   848                              <1> .skipLp:
   849 0000448D 8A1F                <1>     mov bl, byte [rdi]
   850 0000448F 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   851 00004491 7513                <1>     jne .printLp
   852 00004493 B402                <1>     mov ah, 02h
   853 00004495 B220                <1>     mov dl, " "
   854 00004497 CD21                <1>     int 21h
   855 00004499 48FFCF              <1>     dec rdi
   856 0000449C FFC9                <1>     dec ecx
   857 0000449E 81F901000000        <1>     cmp ecx, 1
   858 000044A4 75E7                <1>     jne .skipLp   ;Always print 1 byte for size
   859                              <1> .printLp:
   860 000044A6 8A17                <1>     mov dl, byte [rdi]
   861 000044A8 B402                <1>     mov ah, 02h
   862 000044AA CD21                <1>     int 21h
   863 000044AC 48FFCF              <1>     dec rdi
   864 000044AF FFC9                <1>     dec ecx
   865 000044B1 75F3                <1>     jnz .printLp
   866                              <1> .exit:
   867 000044B3 4889EC              <1>     mov rsp, rbp    ;Deallocate the buffer and exit!
   868                              <1>     return
    13                              <2> %%_ret:
    14 000044B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   869                              <1> .errPrint:
   870                              <1> ;Print a default ? symbol if an overflow occurs.
   871 000044B7 B23F                <1>     mov dl, "?"
   872 000044B9 B800020000          <1>     mov eax, 0200h
   873 000044BE CD21                <1>     int 21h
   874 000044C0 EBF1                <1>     jmp short .exit
   875                              <1> 
   876                              <1> decimalise:
   877                              <1> ;Input: rax = value to decimalise
   878                              <1> ;       rdi -> Ptr to byte buffer to store string in with commas
   879                              <1> ;       ecx = buffer length
   880                              <1> ;Output: Buffer @ rdi filled in! 
   881                              <1> ;       ecx = Number of chars in buffer.
   882                              <1> ; Warning: If the number of chars in the buffer reaches buffer length,
   883                              <1> ;   we return with CF=CY. Else, CF=NC.
   884 000044C2 57                  <1>     push rdi
   885 000044C3 89CE                <1>     mov esi, ecx    
   886 000044C5 31C9                <1>     xor ecx, ecx    ;Use cl as buffer length ctr, ch as comma ctr
   887 000044C7 BB0A000000          <1>     mov ebx, 0Ah    ;Divide by 10
   888                              <1> .lp:
   889 000044CC 80FD03              <1>     cmp ch, 3       ;Are we divisible by 3?
   890 000044CF 7514                <1>     jne .skipSep
   891 000044D1 4038CE              <1>     cmp sil, cl
   892 000044D4 742F                <1>     je .exitErr     ;Before we add a comma, do we have space?
   893 000044D6 8A1556BBFFFF        <1>     mov dl, byte [ctryData + countryStruc.thouSep]
   894 000044DC 8817                <1>     mov byte [rdi], dl
   895 000044DE 48FFC7              <1>     inc rdi 
   896 000044E1 FEC1                <1>     inc cl          ;Inc number of chars
   897 000044E3 30ED                <1>     xor ch, ch      ;Reset comma counter
   898                              <1> .skipSep:
   899 000044E5 4038CE              <1>     cmp sil, cl
   900 000044E8 741B                <1>     je .exitErr     ;Before we add a digit, do we have space?
   901 000044EA 31D2                <1>     xor edx, edx
   902 000044EC 48F7F3              <1>     div rbx         ;Divide rax by 10
   903 000044EF 80C230              <1>     add dl, "0"     
   904 000044F2 8817                <1>     mov byte [rdi], dl
   905 000044F4 48FFC7              <1>     inc rdi
   906 000044F7 FEC1                <1>     inc cl          ;Inc number of chars
   907 000044F9 FEC5                <1>     inc ch          ;Inc to keep track of commas
   908 000044FB 4885C0              <1>     test rax, rax
   909 000044FE 75CC                <1>     jnz .lp
   910                              <1> ;The test cleared CF if we are here
   911 00004500 0FB6C9              <1>     movzx ecx, cl
   912                              <1> .exit:
   913 00004503 5F                  <1>     pop rdi
   914                              <1>     return
    13                              <2> %%_ret:
    14 00004504 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   915                              <1> .exitErr:
   916 00004505 F9                  <1>     stc
   917 00004506 EBFB                <1>     jmp short .exit
   918                              <1> printDecimalWord:
   919                              <1> ;Takes a word in ax and print it's decimal representation.
   920                              <1> ;DOES NOT SUPPRESS LEADING ZEROS!
   921                              <1> ;SHOULD NOT BE USED FOR ANYTHING OVER 3 DIGITS AS NO COMMA!!
   922                              <1> ;Input: eax = Zero extended word to print
   923 00004508 31C9                <1>     xor ecx, ecx
   924 0000450A 85C0                <1>     test eax, eax
   925 0000450C 750C                <1>     jnz .notZero
   926 0000450E B930000000          <1>     mov ecx, "0"
   927 00004513 BD01000000          <1>     mov ebp, 1  ;Print one digit
   928 00004518 EB19                <1>     jmp short .goPrint
   929                              <1> .notZero:
   930 0000451A 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   931 0000451C BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   932                              <1> .mainLp:
   933 00004521 FFC5                <1>     inc ebp
   934 00004523 C1E108              <1>     shl ecx, 8    ;Space for next nybble
   935 00004526 31D2                <1>     xor edx, edx
   936 00004528 F7F6                <1>     div esi
   937 0000452A 80C230              <1>     add dl, '0'
   938 0000452D 88D1                <1>     mov cl, dl    ;Save remainder byte
   939 0000452F 85C0                <1>     test eax, eax   ;We zero yet?
   940 00004531 75EE                <1>     jnz .mainLp
   941                              <1> .goPrint:
   942 00004533 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   943 00004535 C1E908              <1>     shr ecx, 8    ;Get next digit down
   944 00004538 B402                <1>     mov ah, 02h
   945 0000453A CD21                <1>     int 21h
   946 0000453C FFCD                <1>     dec ebp
   947 0000453E 75F3                <1>     jnz .goPrint
   948                              <1>     return
    13                              <2> %%_ret:
    14 00004540 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   949                              <1> 
   950                              <1> getDecimalWord:
   951                              <1> ;Works on MAX A dword in eax
   952                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   953 00004541 31C9                <1>     xor ecx, ecx
   954 00004543 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   955 00004545 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   956                              <1> .dpfb0:
   957 0000454A FFC5                <1>     inc ebp
   958 0000454C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   959 00004550 31D2                <1>     xor edx, edx
   960 00004552 48F7F3              <1>     div rbx
   961 00004555 80C230              <1>     add dl, '0'
   962 00004558 80FA39              <1>     cmp dl, '9'
   963 0000455B 7603                <1>     jbe .dpfb1
   964 0000455D 80C207              <1>     add dl, 'A'-'0'-10
   965                              <1> .dpfb1:
   966 00004560 88D1                <1>     mov cl, dl    ;Save remainder byte
   967 00004562 4885C0              <1>     test rax, rax
   968 00004565 75E3                <1>     jnz .dpfb0
   969                              <1>     return
    13                              <2> %%_ret:
    14 00004567 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   970                              <1> getByte:
   971                              <1> ;Indicates if the number obtained is larger than a byte by setting CF
   972 00004568 E807000000          <1>     call getNum
   973 0000456D 3D00010000          <1>     cmp eax, 100h
   974 00004572 F5                  <1>     cmc
   975                              <1>     return
    13                              <2> %%_ret:
    14 00004573 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   976                              <1> getNum:
   977                              <1> ;Gets a number from a command line.
   978                              <1> ;Input: rsi -> String to get number from
   979                              <1> ;Output: rsi -> Char which terminated the accumulation
   980                              <1> ;        eax = Value of the string. May overflow if we read more than 9 chars...
   981                              <1> ;If an overflow, CF=CY. eax=Undefined. rsi-> Char 9
   982 00004574 51                  <1>     push rcx
   983 00004575 53                  <1>     push rbx
   984 00004576 31DB                <1>     xor ebx, ebx
   985 00004578 31C9                <1>     xor ecx, ecx    ;Start with a value of zero
   986 0000457A 31C0                <1>     xor eax, eax    
   987                              <1> .lp:
   988 0000457C AC                  <1>     lodsb
   989 0000457D 3C30                <1>     cmp al, "0"
   990 0000457F 721B                <1>     jb .exit
   991 00004581 3C39                <1>     cmp al, "9"
   992 00004583 7717                <1>     ja .exit
   993 00004585 2C30                <1>     sub al, "0"                     ;Convert to binary 
   994 00004587 678D0C89            <1>     lea ecx, qword [4*ecx + ecx]    ;5*rcx
   995 0000458B D1E1                <1>     shl ecx, 1                      ;2*(5*rcx)
   996 0000458D 01C1                <1>     add ecx, eax
   997 0000458F FFC3                <1>     inc ebx
   998 00004591 81FB09000000        <1>     cmp ebx, 9
   999 00004597 75E3                <1>     jne short .lp   ;Get next digit
  1000 00004599 F9                  <1>     stc             ;Yikesaroony
  1001 0000459A EB01                <1>     jmp short .exitBad
  1002                              <1> .exit:
  1003 0000459C F8                  <1>     clc             ;Clear CF
  1004                              <1> .exitBad:
  1005 0000459D 89C8                <1>     mov eax, ecx
  1006 0000459F 5B                  <1>     pop rbx
  1007 000045A0 59                  <1>     pop rcx
  1008 000045A1 48FFCE              <1>     dec rsi         ;dec doesnt affect CF 
  1009                              <1>     return
    13                              <2> %%_ret:
    14 000045A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1010                              <1> 
  1011                              <1> 
  1012                              <1> freezePC:
  1013 000045A5 488D1581C8FFFF      <1>     lea rdx, memBad1
  1014 000045AC B409                <1>     mov ah, 09h
  1015 000045AE CD21                <1>     int 21h
  1016                              <1> .altEP:
  1017 000045B0 488D159FC8FFFF      <1>     lea rdx, memBad3
  1018 000045B7 B409                <1>     mov ah, 09h
  1019 000045B9 CD21                <1>     int 21h
  1020                              <1> .lp:
  1021 000045BB F390                <1>     pause
  1022 000045BD F4                  <1>     hlt
  1023 000045BE EBFB                <1>     jmp short .lp
  1024                              <1> 
  1025                              <1> setDTA:
  1026 000045C0 50                  <1>     push rax
  1027 000045C1 52                  <1>     push rdx
  1028 000045C2 488D154DBBFFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
  1029 000045C9 B8001A0000          <1>     mov eax, 1A00h
  1030 000045CE CD21                <1>     int 21h
  1031 000045D0 5A                  <1>     pop rdx
  1032 000045D1 58                  <1>     pop rax
  1033                              <1>     return
    13                              <2> %%_ret:
    14 000045D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1034                              <1> 
  1035                              <1> getDTA:
  1036 000045D3 488D153CBBFFFF      <1>     lea rdx, cmdFFBlock
  1037                              <1>     return
    13                              <2> %%_ret:
    14 000045DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1038                              <1> 
  1039                              <1> resetIDTentries:
  1040                              <1> ;Resets the IDT entries if they were changed by dead child process
  1041 000045DB 488D1571020000      <1>     lea rdx, critErrorHandler
  1042 000045E2 B824250000          <1>     mov eax, 2524h
  1043 000045E7 CD21                <1>     int 21h
  1044 000045E9 488D1577010000      <1>     lea rdx, ctrlCHandler
  1045 000045F0 B823250000          <1>     mov eax, 2523h
  1046 000045F5 CD21                <1>     int 21h
  1047 000045F7 488D151DCFFFFF      <1>     lea rdx, appRet
  1048 000045FE B822250000          <1>     mov eax, 2522h
  1049 00004603 CD21                <1>     int 21h
  1050                              <1>     return
    13                              <2> %%_ret:
    14 00004605 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> 
  1052                              <1> ;-------------------------------
  1053                              <1> ; Environment utility functions
  1054                              <1> ;-------------------------------
  1055                              <1> 
  1056                              <1> cmpEnvVar:
  1057                              <1> ;Checks that we have found the environment variable we are looking for.
  1058                              <1> ;Input: rsi -> Environment var to verify the name of
  1059                              <1> ;       rdi -> Environment var name to compare against
  1060                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
  1061 00004606 56                  <1>     push rsi
  1062 00004607 57                  <1>     push rdi
  1063 00004608 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
  1064                              <1> .lp:
  1065 0000460B AC                  <1>     lodsb               ;Pick up from user string
  1066 0000460C E88FFCFFFF          <1>     call ucChar         ;Upper case it!
  1067 00004611 3807                <1>     cmp byte [rdi], al  
  1068 00004613 7509                <1>     jne .exit
  1069 00004615 3C3D                <1>     cmp al, "="         ;Are we at the end?
  1070 00004617 7405                <1>     je .exit
  1071 00004619 48FFC7              <1>     inc rdi
  1072 0000461C EBED                <1>     jmp short .lp
  1073                              <1> .exit:
  1074 0000461E 5F                  <1>     pop rdi
  1075 0000461F 5E                  <1>     pop rsi
  1076                              <1>     return
    13                              <2> %%_ret:
    14 00004620 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1077                              <1> 
  1078                              <1> checkEnvGoodAndGet:
  1079                              <1> ;Gets the env ptr and checks that it is double null terminated.
  1080                              <1> ;Output:
  1081                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
  1082                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
  1083                              <1> ;           rsi -> Environment pointer
  1084 00004621 50                  <1>     push rax
  1085 00004622 51                  <1>     push rcx
  1086 00004623 57                  <1>     push rdi
  1087 00004624 4150                <1>     push r8
  1088 00004626 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
  1089 0000462A 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
  1090 0000462D 741A                <1>     jz .badExit
  1091 0000462F 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
  1092 00004632 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
  1093                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
  1094 00004635 31C0                <1>     xor eax, eax
  1095                              <1> .pathNulScan:
  1096 00004637 F2AE                <1>     repne scasb
  1097 00004639 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
  1098 0000463B 740C                <1>     jz .badExit
  1099 0000463D 3807                <1>     cmp byte [rdi], al  ;Is char two null?
  1100 0000463F 75F6                <1>     jne .pathNulScan    ;If not, keep searching
  1101 00004641 31C0                <1>     xor eax, eax
  1102 00004643 FFC0                <1>     inc eax ;Clear the ZF
  1103 00004645 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
  1104                              <1> .badExit:
  1105 00004649 4158                <1>     pop r8
  1106 0000464B 5F                  <1>     pop rdi
  1107 0000464C 59                  <1>     pop rcx
  1108 0000464D 58                  <1>     pop rax
  1109                              <1>     return
    13                              <2> %%_ret:
    14 0000464E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> 
  1111                              <1> 
  1112                              <1> findEnvSpace:
  1113                              <1> ;Searches the environment for space, returns a pointer to the start of the 
  1114                              <1> ; free space in the pointer and a count of free space in the environment.
  1115                              <1> ;If count is zero, pointer is not to be used.
  1116                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
  1117 0000464F 31C9                <1>     xor ecx, ecx
  1118 00004651 31C0                <1>     xor eax, eax    ;Clear eax too
  1119 00004653 51                  <1>     push rcx
  1120 00004654 E8C8FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
  1121 00004659 59                  <1>     pop rcx
  1122                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000465A 74(4E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1123 0000465C 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
  1124 00004660 FFC9                <1>     dec ecx ;Make into a large counter
  1125 00004662 4889F7              <1>     mov rdi, rsi    
  1126                              <1> .endsearch:
  1127 00004665 F2AE                <1>     repne scasb ;Scan
  1128 00004667 803F00              <1>     cmp byte [rdi], 0
  1129 0000466A 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
  1130                              <1>     ;Here we are at the end of the environment
  1131 0000466C F7D9                <1>     neg ecx
  1132 0000466E FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
  1133 00004670 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
  1134 00004673 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
  1135 00004676 29C8                <1>     sub eax, ecx
  1136 00004678 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
  1137                              <1>     return
    13                              <2> %%_ret:
    14 0000467A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1138                              <1> 
  1139                              <1> searchForEnvVar:
  1140                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1141                              <1> ;Input: rdi -> Var name to look for.
  1142                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1143 0000467B 57                  <1>     push rdi
  1144 0000467C 51                  <1>     push rcx
  1145 0000467D 52                  <1>     push rdx
  1146 0000467E 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1147 00004682 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1148                              <1> .varLp:
  1149 00004685 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1150 00004688 E879FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1151 0000468D 7416                <1>     je .varFound
  1152 0000468F 31C0                <1>     xor eax, eax        ;Search for a null
  1153 00004691 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1154 00004694 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1155 00004699 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1156 0000469B 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1157 0000469D 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1158 0000469F 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1159 000046A2 EBE1                <1>     jmp short .varLp    ;And scan again!
  1160                              <1> .varNotFound:
  1161 000046A4 F9                  <1>     stc
  1162                              <1> .varFound:
  1163 000046A5 59                  <1>     pop rcx
  1164 000046A6 5A                  <1>     pop rdx
  1165 000046A7 5F                  <1>     pop rdi
  1166                              <1>     return
    13                              <2> %%_ret:
    14 000046A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> envFree:
  1169                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1170                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1171                              <1> ; free byte of the environment!
  1172                              <1> ;Input: rsi -> Variable to free.
  1173                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1174                              <1> ;        ecx = Number of free bytes in env
  1175 000046A9 4889F7              <1>     mov rdi, rsi
  1176 000046AC 31C0                <1>     xor eax, eax
  1177                              <1> .freeLp:
  1178 000046AE 803F00              <1>     cmp byte [rdi], 0
  1179 000046B1 7403                <1>     je .exitLp
  1180 000046B3 AA                  <1>     stosb
  1181 000046B4 EBF8                <1>     jmp short .freeLp
  1182                              <1> .exitLp:
  1183                              <1> ;rdi points to the terminating null of the var we just deleted
  1184                              <1> ;rsi points to the start of the free space
  1185 000046B6 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1186 000046B9 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1187 000046BE 7504                <1>     jne .prepPullup
  1188 000046C0 31C0                <1>     xor eax, eax
  1189 000046C2 EB0E                <1>     jmp short .cleanEnv
  1190                              <1> .prepPullup:
  1191 000046C4 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1192                              <1> .pullUp:
  1193 000046C7 AC                  <1>     lodsb
  1194 000046C8 AA                  <1>     stosb
  1195 000046C9 84C0                <1>     test al, al ;Did we pick up a zero
  1196 000046CB 75FA                <1>     jne .pullUp ;If not, keep copying
  1197 000046CD 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1198 000046D0 75F5                <1>     jne .pullUp
  1199                              <1> ;We are at the end of the copy!
  1200                              <1> .cleanEnv:
  1201 000046D2 AA                  <1>     stosb   ;Store the famous second null
  1202 000046D3 48FFCF              <1>     dec rdi ;without incrementing it!!
  1203 000046D6 E807000000          <1>     call getFreeSpace
  1204 000046DB 31C0                <1>     xor eax, eax
  1205 000046DD 51                  <1>     push rcx
  1206 000046DE F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1207 000046E0 59                  <1>     pop rcx
  1208                              <1>     return
    13                              <2> %%_ret:
    14 000046E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1209                              <1> 
  1210                              <1> getFreeSpace:
  1211                              <1> ;Output: ecx = Number of free bytes in the environment block
  1212 000046E2 56                  <1>     push rsi
  1213 000046E3 57                  <1>     push rdi
  1214 000046E4 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1215 000046E9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1216 000046ED 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1217 000046F0 E805000000          <1>     call getEnvSize ;Get total block size
  1218 000046F5 29F9                <1>     sub ecx, edi    ;Get difference!
  1219 000046F7 5F                  <1>     pop rdi
  1220 000046F8 5E                  <1>     pop rsi
  1221                              <1>     return
    13                              <2> %%_ret:
    14 000046F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1222                              <1> 
  1223                              <1> getEnvSize:
  1224                              <1> ;Gets the number of bytes in the environment allocation
  1225                              <1> ;Output: ecx = Number of bytes in the environment!
  1226 000046FA 53                  <1>     push rbx
  1227 000046FB 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1228 000046FF 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1229 00004702 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1230 00004705 5B                  <1>     pop rbx
  1231                              <1>     return
    13                              <2> %%_ret:
    14 00004706 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> 
  1233                              <1> getPtrToEndOfEnv:
  1234                              <1> ;Gets ptr to end of the environment
  1235                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1236 00004707 50                  <1>     push rax
  1237 00004708 51                  <1>     push rcx
  1238 00004709 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1239 0000470D 31C0                <1>     xor eax, eax
  1240 0000470F 31C9                <1>     xor ecx, ecx
  1241 00004711 FFC9                <1>     dec ecx
  1242                              <1> .lp:
  1243 00004713 F2AE                <1>     repne scasb
  1244 00004715 3807                <1>     cmp byte [rdi], al
  1245 00004717 75FA                <1>     jne .lp
  1246 00004719 59                  <1>     pop rcx
  1247 0000471A 58                  <1>     pop rax
  1248                              <1>     return
    13                              <2> %%_ret:
    14 0000471B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1249                              <1> 
  1250                              <1> growEnvBlock:
  1251                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1252                              <1> ; newly allocated 160 byte block of the environment.
  1253                              <1> ;Returns:   CF=NC - Environment grown ok!
  1254                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1255                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1256 0000471C 50                  <1>     push rax
  1257 0000471D 53                  <1>     push rbx
  1258 0000471E 51                  <1>     push rcx
  1259 0000471F 56                  <1>     push rsi
  1260 00004720 57                  <1>     push rdi
  1261 00004721 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1262 00004726 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1263 0000472B 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1264 0000472F 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1265 00004732 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1266 00004738 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1267 0000473E 7321                <1>     jae .tooLarge
  1268                              <1>     ;Here ZF must be NZ.
  1269 00004740 4150                <1>     push r8
  1270 00004742 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1271 00004746 B8004A0000          <1>     mov eax, 4A00h
  1272 0000474B CD21                <1>     int 21h
  1273 0000474D 4158                <1>     pop r8
  1274 0000474F 720A                <1>     jc .exit
  1275                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1276                              <1>     ; so we add 160 zeros to the count of bytes
  1277 00004751 81C1A0000000        <1>     add ecx, 0A0h
  1278 00004757 31C0                <1>     xor eax, eax
  1279 00004759 F3AA                <1>     rep stosb
  1280                              <1> .exit:
  1281 0000475B 5F                  <1>     pop rdi
  1282 0000475C 5E                  <1>     pop rsi
  1283 0000475D 59                  <1>     pop rcx
  1284 0000475E 5B                  <1>     pop rbx
  1285 0000475F 58                  <1>     pop rax
  1286                              <1>     return
    13                              <2> %%_ret:
    14 00004760 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1287                              <1> .tooLarge:
  1288 00004761 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1289 00004764 F9                  <1>     stc             ;Set CF
  1290 00004765 EBF4                <1>     jmp short .exit
    20                                  %include "./Source/int23h.asm"
     1                              <1> ctrlCHandler:
     2 00004767 F60526B9FFFF80      <1>     test byte [statFlg1], inLdr     ;Are we loading?
     3 0000476E 7411                <1>     jz .notLoading
     4 00004770 F6051DB9FFFF40      <1>     test byte [statFlg1], inLdrDT   ;Are we in date/time?
     5 00004777 7439                <1>     jz  .inInt23                    ;IRETQ if not.
     6                              <1>     ;Else, we pretend nothing was typed in and proceed.
     7 00004779 66C74201000D        <1>     mov word [rdx + 1], 0D00h       ;Place a 0 chars cnt and CR in the buffer
     8 0000477F EB12                <1>     jmp short .retFromDosCall       ;And return directly to DOS
     9                              <1> .notLoading:
    10 00004781 F6050CB9FFFF02      <1>     test byte [statFlg1], inCtrlC   ;In this handler already?
    11 00004788 742A                <1>     jz .notNested                   ;If not, handle!
    12                              <1> ;We are in this CTRL+C, check the system call that we are interrupting...
    13                              <1> ;If a CON call, we are in Terminate Batch Job msg. Set CF to indicate
    14                              <1> ; to US that the user CTRL+C'd the Terminate Batch Job message! Return
    15                              <1> ; from DOS directly, do not reenter CON call.
    16 0000478A 84E4                <1>     test ah, ah
    17 0000478C 7424                <1>     jz .inInt23 
    18 0000478E 80FC0C              <1>     cmp ah, 0Ch
    19 00004791 771F                <1>     ja .inInt23
    20                              <1> .retFromDosCall:
    21                              <1> ;Go past the Int 23h stack frame to the entry to Int 21h stack frame
    22 00004793 50                  <1>     push rax
    23 00004794 488D0512000000      <1>     lea rax, .i23Bounce
    24 0000479B 4889442408          <1>     mov qword [rsp + 8], rax        ;Store as ret add
    25 000047A0 31C0                <1>     xor eax, eax
    26 000047A2 668CC8              <1>     mov ax, cs
    27 000047A5 4889442410          <1>     mov qword [rsp + 2*8], rax      ;Store the segment too
    28 000047AA 58                  <1>     pop rax
    29 000047AB 48CF                <1>     iretq   ;Iretq to the next instruction instead of DOS :)
    30                              <1> .i23Bounce:
    31 000047AD 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on stack frame flags!
    32                              <1> .inInt23:
    33 000047B2 48CF                <1>     iretq
    34                              <1> .notNested:
    35                              <1> ;Main body of the CRTL+C handler! 
    36 000047B4 800DD9B8FFFF02      <1>     or byte [statFlg1], inCtrlC     ;Set that we are in CTRL+C
    37 000047BB F605D2B8FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single command mode?
    38 000047C2 7509                <1>     jnz .skipReset                  
    39                              <1>     ;Now reset the disk subsystem to flush buffers appropriately,
    40                              <1>     ; in case of open files and/or we are hooked by someone who doesn't
    41                              <1>     ; want to return thru dos.
    42 000047C4 50                  <1>     push rax
    43 000047C5 B8000D0000          <1>     mov eax, 0D00h  ;Reset Disk system!
    44 000047CA CD21                <1>     int 21h
    45 000047CC 58                  <1>     pop rax
    46                              <1> .skipReset:
    47 000047CD F605C0B8FFFF08      <1>     test byte [statFlg1], inBatch   ;Are we processing a batch file?
    48 000047D4 7462                <1>     jz .notBat
    49 000047D6 F605B7B8FFFF04      <1>     test byte [statFlg1], inSingle  ;Batch in a single command?
    50 000047DD 7559                <1>     jnz .notBat                     ;No batch cleanup, kill ourselves!
    51                              <1> ;CTRLC in a batch file will always abort the current command being 
    52                              <1> ; executed. CTRLC in a batch file is only for checking if we want to 
    53                              <1> ; terminate the whole batch procedure or not!
    54 000047DF E888020000          <1>     call errSwapHdls    ;Swap STDIO back ONLY ON BATCH Error
    55                              <1> .ynLp:
    56 000047E4 488D15E4C0FFFF      <1>     lea rdx, batFail
    57 000047EB E880F8FFFF          <1>     call printString
    58 000047F0 488D150BB9FFFF      <1>     lea rdx, batYNstr
    59 000047F7 66C74202200D        <1>     mov word [rdx + 2], 0D20h   ;Space and a CR char
    60 000047FD B80A0C0000          <1>     mov eax, 0C0Ah      ;Get clean buffered input!
    61 00004802 CD21                <1>     int 21h
    62 00004804 7221                <1>     jc .nestKill         ;If we CTRL+C during this call, kill batch!
    63 00004806 8A4202              <1>     mov al, byte [rdx + 2]
    64 00004809 E892FAFFFF          <1>     call ucChar         ;UC using DOS
    65 0000480E 3C59                <1>     cmp al, "Y"
    66 00004810 740E                <1>     je .killBat
    67 00004812 3C4E                <1>     cmp al, "N"
    68 00004814 75CE                <1>     jne .ynLp
    69                              <1> .endBat:
    70                              <1> ;Tries to abort the Command interpreter, fails and 
    71                              <1> ; our internal state will proceed with batch processing. Doing this 
    72                              <1> ; ensures the command being interrupted is cancelled.
    73 00004816 E84EF8FFFF          <1>     call printCRLF
    74 0000481B E923000000          <1>     jmp .exitBat    ;Clears errRetHdls and in ctrlc flag and exits!
    75                              <1> .killBat:   ;Now we need to terminate the batch file too.
    76 00004820 E80FD6FFFF          <1>     call batCleanup
    77 00004825 EBEF                <1>     jmp short .endBat   ;Now CRLF and exit!
    78                              <1> .nestKill:
    79 00004827 E808D6FFFF          <1>     call batCleanup
    80 0000482C 802561B8FFFFFD      <1>     and byte [statFlg1], ~inCtrlC   
    81 00004833 E95BFFFFFF          <1>     jmp .retFromDosCall ;Nested kill needs to be handled like other nestings
    82                              <1> .notBat:
    83 00004838 66813D56B8FFFFFFFF  <1>     cmp word [errHdls], -1  ;If these are not -1, return to normal!
    84 00004841 7405                <1>     je .exit
    85                              <1> .exitBat:
    86 00004843 E841020000          <1>     call errRetHdls 
    87                              <1> .exit:
    88 00004848 802545B8FFFFFD      <1>     and byte [statFlg1], ~inCtrlC
    89                              <1> .exitIn:
    90 0000484F F9                  <1>     stc     ;Set CF to kill the task
    91 00004850 C20800              <1>     ret 8   ;Return and adjust rsp stack to indicate we wanna kill task
    92                              <1> ;All we need is that the stack pointer is not at the address we had it
    93                              <1> ; at when we entered DOS to trigger a CF check! So anything from ret 8 to
    94                              <1> ; ret 4*8 to remove CS, RFLAGS, SS, RSP is acceptable and safe!
    21                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00004853 53                  <1>     push rbx
    25 00004854 51                  <1>     push rcx
    26 00004855 52                  <1>     push rdx
    27 00004856 57                  <1>     push rdi
    28 00004857 56                  <1>     push rsi
    29 00004858 E80F020000          <1>     call errSwapHdls
    30 0000485D FC                  <1>     cld         ;Make String ops go forward
    31 0000485E 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00004861 88052EB8FFFF        <1>     mov byte [failDrv], al  ;Setup the failing drive (even on char as we reset)
    33 00004867 488D1504C0FFFF      <1>     lea rdx, crlf
    34 0000486E E8FDF7FFFF          <1>     call printString    ;Trashes ax
    35 00004873 0FB7FF              <1>     movzx edi, di                   ;Clear the upper word.
    36                              <1> 
    37 00004876 53                  <1>     push rbx        ;Save the action bitfield
    38 00004877 56                  <1>     push rsi        ;Save the driver pointer
    39 00004878 B800590000          <1>     mov eax, 5900h  ;Get Extended Error
    40 0000487D CD21                <1>     int 21h
    41                              <1> ;DOS placed the following values in the following regs:
    42                              <1> ;ax = word [errorExCde]
    43                              <1> ;ch = byte [errorLocus]
    44                              <1> ;bh = byte [errorClass]
    45                              <1> ;bl = byte [errorAction]
    46                              <1> ;rdi = qword [errorVolLbl]
    47 0000487F 488D357EC7FFFF      <1>     lea rsi, errorMsgTbl.FVol
    48 00004886 4887FE              <1>     xchg rdi, rsi   ;Swap the pointers
    49 00004889 48A5                <1>     movsq   ;Move over the 11 chars :)
    50 0000488B 66A5                <1>     movsw
    51 0000488D A4                  <1>     movsb
    52 0000488E 0FB7F8              <1>     movzx edi, ax  ;Move the error code into di
    53 00004891 5E                  <1>     pop rsi
    54 00004892 5B                  <1>     pop rbx
    55 00004893 81FF1F000000        <1>     cmp edi, errGF      ;Is this a normal driver error?
    56 00004899 7655                <1>     jbe .driverErr
    57                              <1> ;Now we split the driver from sharing and networking errors. Sharing doesnt go 
    58                              <1> ; thru the redir
    59 0000489B 81FF24000000        <1>     cmp edi, errShrFul
    60 000048A1 763F                <1>     jbe .shareErr
    61                              <1> ;Ok so this is a net error. Check to see if an installed message!
    62                              <1> ;di has the error code still
    63 000048A3 B800050000          <1>     mov eax, 0500h      ;Install check!
    64 000048A8 CD21                <1>     int 21h
    65 000048AA 3CFF                <1>     cmp al, -1
    66 000048AC 752B                <1>     jne .redirDefault   ;No redir, print default net error
    67 000048AE 89F8                <1>     mov eax, edi        ;Else, move the error code into 
    68 000048B0 B405                <1>     mov ah, 05h         ;Get the string we need
    69 000048B2 CD21                <1>     int 21h
    70 000048B4 7223                <1>     jc .redirDefault    ;If no message installed for this code, generic!
    71                              <1>     ;Returned if CF=NC:
    72                              <1>     ; al = 0 => Print rest of message
    73                              <1>     ; al = 1 => Immediately prompt ARIF
    74                              <1>     ; rdi -> ASCIIZ string to print
    75 000048B6 4889FA              <1>     mov rdx, rdi        
    76 000048B9 50                  <1>     push rax            
    77 000048BA 31C0                <1>     xor eax, eax
    78 000048BC 89C1                <1>     mov ecx, eax
    79 000048BE FFC9                <1>     dec ecx
    80 000048C0 F2AE                <1>     repne scasb         ;Search for the terminating null
    81 000048C2 C647FF24            <1>     mov byte [rdi - 1], "$" ;Replace with dos string terminator
    82 000048C6 E8A5F7FFFF          <1>     call printString 
    83 000048CB C647FF00            <1>     mov byte [rdi - 1], 0   ;Replace with sane string terminator
    84 000048CF 58                  <1>     pop rax
    85 000048D0 84C0                <1>     test al, al ;Is this zero?
    86 000048D2 7450                <1>     jz .proceedNormalWrite  ;Now print reading/writing etc
    87 000048D4 E998000000          <1>     jmp .userInput    ;Else, print crlf and proceed to get input
    88                              <1> .redirDefault:
    89                              <1> ;Always jumped to with rdi in the error code. Thus, this will print only
    90                              <1> ; this line with no reading/writing etc. rdi is above errShrFul here
    91                              <1> ; and also not a table offset so definitely wont accidentally try print
    92                              <1> ; additional information
    93 000048D9 488D1559C7FFFF      <1>     lea rdx, genNetErr  ;Set the generic network error message
    94 000048E0 EB35                <1>     jmp short .redirDefProceed
    95                              <1> .shareErr:
    96                              <1> ;Now ensure our error code is in the table, set to GF error if not.
    97 000048E2 BA1F000000          <1>     mov edx, errGF
    98 000048E7 81FF24000000        <1>     cmp edi, errShrFul
    99 000048ED 0F47FA              <1>     cmova edi, edx
   100                              <1> .driverErr:
   101 000048F0 BA1F000000          <1>     mov edx, errGF      ;If we have an error below Driver Error 0, Gen. Err.
   102 000048F5 81FF13000000        <1>     cmp edi, drvErrShft
   103 000048FB 0F42FA              <1>     cmovb edi, edx
   104 000048FE 81EF13000000        <1>     sub edi, drvErrShft ;Now reduce the error code to be a table offset
   105 00004904 57                  <1>     push rdi    ;Save the error code for checking
   106 00004905 488D15F2C5FFFF      <1>     lea rdx, errMsgPtrTbl
   107 0000490C 4887FA              <1>     xchg rdi, rdx   ;Swap error code and table base
   108 0000490F 0FB71457            <1>     movzx edx, word [rdi + 2*rdx]   ;Get the word offset in rdx
   109 00004913 4801FA              <1>     add rdx, rdi            ;Now add the table base!
   110 00004916 5F                  <1>     pop rdi
   111                              <1> .redirDefProceed:
   112 00004917 E854F7FFFF          <1>     call printString        ;Call DOS to print first part of message
   113                              <1>     ;Now we handle any codes above errNoFCB - drvErrShft as 
   114                              <1>     ; to not print anything other than the string in the table!
   115                              <1>     ;cmp edi, errNoFCB - drvErrShft
   116 0000491C 81FF0F000000        <1>     cmp edi, errIDC - drvErrShft
   117 00004922 734D                <1>     jae .userInput  ;IDC also triggers this skip
   118                              <1> .proceedNormalWrite:
   119 00004924 488D152CC7FFFF      <1>     lea rdx, readMsg
   120 0000492B 488D3D34C7FFFF      <1>     lea rdi, writeMsg
   121 00004932 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
   122 00004935 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
   123 00004939 E832F7FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
   124                              <1> 
   125 0000493E F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
   126 00004941 0F8504010000        <1>     jnz .charError
   127                              <1> ;Disk error continues here
   128 00004947 488D1502C7FFFF      <1>     lea rdx, drvMsg ;Drive message
   129 0000494E E81DF7FFFF          <1>     call printString
   130 00004953 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   131 00004955 80C241              <1>     add dl, "A" ;Add ASCII code
   132 00004958 B402                <1>     mov ah, 02h ;Print char in dl
   133 0000495A CD21                <1>     int 21h
   134                              <1>     
   135 0000495C 89D8                <1>     mov eax, ebx    ;Get bh into ah
   136 0000495E 2500060000          <1>     and eax, 600h   ;Mask off bits 1 and 2 of bh
   137 00004963 3D00020000          <1>     cmp eax, 200h   ;Was this a FAT buffer?
   138 00004968 7507                <1>     jne .userInput  ;If not proceed as normal.
   139                              <1>     ;Else, abort! Application cannot proceed if FAT is breaking apart...
   140 0000496A B002                <1>     mov al, 2   ;Abort! Lose that FAT buffer
   141 0000496C E9CE000000          <1>     jmp .cehExit
   142                              <1> .userInput:
   143 00004971 E8F3F6FFFF          <1>     call printCRLF  ;Print new line
   144                              <1> ;Abort, Retry, Ignore, Fail is word order
   145                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   146                              <1> .userAbort:
   147                              <1> ;Abort is always an option
   148 00004976 488D15F8C6FFFF      <1>     lea rdx, abortMsg
   149 0000497D E8EEF6FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
   150                              <1> .userRetry:
   151 00004982 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   152 00004985 7418                <1>     jz .userIgnore    ;If clear, dont print message
   153 00004987 488D15FFC6FFFF      <1>     lea rdx, betweenMsg
   154 0000498E E8DDF6FFFF          <1>     call printString
   155 00004993 488D15E8C6FFFF      <1>     lea rdx, retryMsg
   156 0000499A E8D1F6FFFF          <1>     call printString
   157                              <1> .userIgnore:
   158 0000499F F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   159 000049A2 7418                <1>     jz .userFail
   160 000049A4 488D15E2C6FFFF      <1>     lea rdx, betweenMsg
   161 000049AB E8C0F6FFFF          <1>     call printString
   162 000049B0 488D15C4C6FFFF      <1>     lea rdx, ignoreMsg
   163 000049B7 E8B4F6FFFF          <1>     call printString
   164                              <1> .userFail:
   165 000049BC F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   166 000049BF 7418                <1>     jz .userMsgEnd
   167 000049C1 488D15C5C6FFFF      <1>     lea rdx, betweenMsg
   168 000049C8 E8A3F6FFFF          <1>     call printString
   169 000049CD 488D15B4C6FFFF      <1>     lea rdx, failMsg
   170 000049D4 E897F6FFFF          <1>     call printString
   171                              <1> .userMsgEnd:
   172 000049D9 488D15B0C6FFFF      <1>     lea rdx, endMsg
   173 000049E0 E88BF6FFFF          <1>     call printString
   174                              <1> ;Get user input now 
   175 000049E5 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   176 000049E7 488D3DA5C6FFFF      <1>     lea rdi, i24Resp ;Go to start of string
   177 000049EE B8010C0000          <1>     mov eax, 0C01h ;Flush and get STDIN without Console Echo
   178 000049F3 CD21                <1>     int 21h ;Get char in al
   179 000049F5 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   180 000049F7 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   181 000049F9 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   182                              <1> .uip1:
   183 000049FB AE                  <1>     scasb   ;Compare char to list, offset gives return code
   184 000049FC 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   185 000049FE FFC1                <1>     inc ecx
   186 00004A00 81F904000000        <1>     cmp ecx, 4
   187 00004A06 75F3                <1>     jne .uip1
   188 00004A08 E964FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   189                              <1> .validInput:
   190 00004A0D E857F6FFFF          <1>     call printCRLF   ;Note the input was accepted
   191 00004A12 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   192                              <1> ;Now check if the input is permitted
   193 00004A14 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   194 00004A16 7427                <1>     je .cehExit
   195 00004A18 84C0                <1>     test al, al ;Check if 0 => Ignore
   196 00004A1A 740F                <1>     je .viIgnore
   197 00004A1C 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   198 00004A1E 7416                <1>     je .viRetry
   199                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   200 00004A20 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   201 00004A23 0F8448FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   202 00004A29 EB14                <1>     jmp short .cehExit
   203                              <1> .viIgnore:
   204 00004A2B F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   205 00004A2E 0F843DFFFFFF        <1>     jz .userInput
   206 00004A34 EB09                <1>     jmp short .cehExit
   207                              <1> .viRetry:
   208 00004A36 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   209 00004A39 0F8432FFFFFF        <1>     jz .userInput
   210                              <1> .cehExit:
   211 00004A3F E845000000          <1>     call errRetHdls
   212 00004A44 5E                  <1>     pop rsi
   213 00004A45 5F                  <1>     pop rdi
   214 00004A46 5A                  <1>     pop rdx
   215 00004A47 59                  <1>     pop rcx
   216 00004A48 5B                  <1>     pop rbx
   217 00004A49 48CF                <1>     iretq
   218                              <1> .charError:
   219 00004A4B C60543B6FFFFFF      <1>     mov byte [failDrv], -1  ;Clear the failing drive 
   220 00004A52 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   221 00004A57 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   222                              <1> .ce1:
   223 00004A5E AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   224 00004A5F 88C2                <1>     mov dl, al  ;Move char into dl
   225 00004A61 B402                <1>     mov ah, 02h
   226 00004A63 CD21                <1>     int 21h ;Print char
   227 00004A65 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   228 00004A67 E905FFFFFF          <1>     jmp .userInput
   229                              <1> 
   230                              <1> 
   231                              <1> errSwapHdls:
   232                              <1> ;Swaps STDIO to STDERR
   233                              <1> ;Start by tmporarily moving the stderr handler into stdio
   234                              <1> ;In principle dangerous, but since we cannot exit our routine, its oki.
   235 00004A6C 50                  <1>     push rax
   236 00004A6D 53                  <1>     push rbx
   237 00004A6E E833000000          <1>     call getJftPtr  ;Get the jft pointer into rbx. Saves rax
   238 00004A73 0FB703              <1>     movzx eax, word [rbx]       ;Get STDIO into ax
   239 00004A76 6689051AB6FFFF      <1>     mov word [errHdls], ax      ;Save em
   240 00004A7D 0FB64302            <1>     movzx eax, byte [rbx + 2]   ;Now get the STDERR SFTndx in al
   241 00004A81 88C4                <1>     mov ah, al                  ;Move STDERR hdl into ah too 
   242 00004A83 668903              <1>     mov word [rbx], ax          ;And set STDIO to STDERR
   243 00004A86 5B                  <1>     pop rbx
   244 00004A87 58                  <1>     pop rax
   245                              <1>     return
    13                              <2> %%_ret:
    14 00004A88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   246                              <1> 
   247                              <1> errRetHdls:
   248                              <1> ;Returns STDIO from STDERR.
   249 00004A89 50                  <1>     push rax
   250 00004A8A 53                  <1>     push rbx
   251 00004A8B E816000000          <1>     call getJftPtr  ;Get ptr in rbx. Preserves rax.
   252 00004A90 0FB70500B6FFFF      <1>     movzx eax, word [errHdls]
   253 00004A97 66C705F7B5FFFFFFFF  <1>     mov word [errHdls], -1  ;Reset values
   254 00004AA0 668903              <1>     mov word [rbx], ax      ;Store the handle word back
   255 00004AA3 5B                  <1>     pop rbx
   256 00004AA4 58                  <1>     pop rax
   257                              <1>     return
    13                              <2> %%_ret:
    14 00004AA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> 
   259                              <1> getJftPtr:
   260                              <1> ;Preserves all registers except rbx.
   261                              <1> ;Output: rbx -> JFT of current task
   262 00004AA6 50                  <1>     push rax        ;Save rax
   263 00004AA7 B800510000          <1>     mov eax, 5100h  ;Get current PSP in rbx
   264 00004AAC CD21                <1>     int 21h
   265 00004AAE 58                  <1>     pop rax
   266 00004AAF 66817B4E1400        <1>     cmp word [rbx + psp.jftSize], 20    ;If >20, pspjft is ptr to real jft
   267 00004AB5 7605                <1>     jbe .pspJftExit
   268 00004AB7 488B5B2A            <1>     mov rbx, qword [rbx + psp.externalJFTPtr]   ;Get ptr to jft from the psp
   269                              <1>     return
    13                              <2> %%_ret:
    14 00004ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   270                              <1> .pspJftExit:
   271 00004ABC 488D5B2A            <1>     lea rbx, qword [rbx + psp.jobFileTbl]       ;Make into a ptr to jft in psp
   272                              <1>     return
    13                              <2> %%_ret:
    14 00004AC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                                  endOfAlloc: ;End of alloc
    23                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00004AC1 B430                <1>     mov ah, 30h
     4 00004AC3 CD21                <1>     int 21h
     5 00004AC5 3C01                <1>     cmp al, 01h ;Version 1
     6 00004AC7 760D                <1>     jbe .okVersion
     7 00004AC9 488D15CC040000      <1>     lea rdx, badVerStr
     8 00004AD0 B409                <1>     mov ah, 09h
     9 00004AD2 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00004AD4 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00004AD6 800DB7B5FFFF80      <1>     or byte [statFlg1], inLdr   ;Ok now we start our special work
    15 00004ADD 4C89052BB5FFFF      <1>     mov qword [pspPtr], r8      ;Store PSP ptr in internal var 
    16                              <1> ;Call for simple internationalisation data
    17 00004AE4 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    18 00004AE9 CD21                <1>     int 21h
    19 00004AEB 3CFF                <1>     cmp al, -1
    20 00004AED 7412                <1>     je .skipSwitch
    21 00004AEF 881535B5FFFF        <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    22 00004AF5 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    23 00004AF8 7507                <1>     jne .skipSwitch
    24 00004AFA C60528B5FFFF2F      <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    25                              <1> .skipSwitch:
    26 00004B01 B800380000          <1>     mov eax, 3800h  ;Get current country data
    27 00004B06 488D151EB5FFFF      <1>     lea rdx, ctryData
    28 00004B0D CD21                <1>     int 21h ;Write the data to the internal country table 
    29                              <1> ;Now eject all the unneeded space, to make space for allocating.
    30                              <1> ;Thus the allocations in the parsing should never fail (but still may)
    31 00004B0F 488D25(00320000)    <1>     lea rsp, initEoA
    32 00004B16 4889E3              <1>     mov rbx, rsp
    33 00004B19 49F7D8              <1>     neg r8  ;Convert r8 to -r8
    34 00004B1C 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
    35 00004B20 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
    36 00004B23 B8004A0000          <1>     mov eax, 4A00h ;Realloc
    37 00004B28 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    38 00004B2B CD21                <1>     int 21h
    39 00004B2D 72A5                <1>     jc .exitBad 
    40                              <1> ;Now space has been made, time to parse the command tail
    41 00004B2F E819010000          <1>     call parseCmdLine   ;Now parse the command tail.
    42 00004B34 E81D030000          <1>     call doEnv          ;Now enact the command tail actions
    43 00004B39 E89DFAFFFF          <1>     call resetIDTentries    ;Setup IDT entries now. 
    44 00004B3E F6054FB5FFFF01      <1>     test byte [statFlg1], permaShell ;Are we perma?
    45 00004B45 0F8490000000        <1>     jz .notMaster   ;Jump if not!
    46                              <1> ;Ok so we are master COMMAND.COM
    47                              <1> ;Now make myself my own parent task. We already are the current psp
    48 00004B4B 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8
    49                              <1> ;Setup Int 2Eh and the addresses in my psp to terminate back to
    50 00004B4F 488D15FDFCFFFF      <1>     lea rdx, critErrorHandler
    51 00004B56 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    52 00004B5A 488D1506FCFFFF      <1>     lea rdx, ctrlCHandler
    53 00004B61 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    54 00004B65 488D15AFC9FFFF      <1>     lea rdx, appRet
    55 00004B6C 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    56 00004B70 488D1542CFFFFF      <1>     lea rdx, int2Eh
    57 00004B77 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    58 00004B7C CD21                <1>     int 21h
    59                              <1> ;Always get the Autoexec from the root dir we are booting into
    60 00004B7E E8F5F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
    61 00004B83 0441                <1>     add al, "A"
    62 00004B85 880548C3FFFF        <1>     mov byte [autoSpec], al ;
    63                              <1> ;Now, open AUTOEXEC.BAT. 
    64 00004B8B 488D1541C3FFFF      <1>     lea rdx, autoSpec
    65 00004B92 B8003D0000          <1>     mov eax, 3D00h  ;Open file
    66 00004B97 CD21                <1>     int 21h
    67 00004B99 7212                <1>     jc .noAutoexec
    68                              <1>     ;Ok, we know the file exists, close it and finish init through it, ignoring 
    69                              <1>     ; the normal hello there! string
    70 00004B9B 89C3                <1>     mov ebx, eax
    71 00004B9D B8003E0000          <1>     mov eax, 3E00h  ;Close file
    72 00004BA2 CD21                <1>     int 21h
    73                              <1> ;Now we do the same as at the end, prepping for jettisoning
    74 00004BA4 31D2                <1>     xor edx, edx
    75 00004BA6 FFCA                <1>     dec edx             ;Setup that we want to process Autoexec
    76 00004BA8 E954000000          <1>     jmp .prepStart
    77                              <1> .noAutoexec:
    78                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    79 00004BAD 488D15BEBCFFFF      <1>     lea rdx, crlf
    80 00004BB4 B409                <1>     mov ah, 09h
    81 00004BB6 CD21                <1>     int 21h
    82 00004BB8 800DD5B4FFFF40      <1>     or byte [statFlg1], inLdrDT
    83 00004BBF E86CE3FFFF          <1>     call time.init
    84 00004BC4 E8B9E1FFFF          <1>     call date.init
    85 00004BC9 8025C4B4FFFFBF      <1>     and byte [statFlg1], ~inLdrDT
    86 00004BD0 488D159BBCFFFF      <1>     lea rdx, crlf
    87 00004BD7 B409                <1>     mov ah, 09h
    88 00004BD9 CD21                <1>     int 21h
    89                              <1>     ;Now fall thru.
    90                              <1> .notMaster:    
    91                              <1> ;Finish by printing INIT string.
    92 00004BDB F605B2B4FFFF04      <1>     test byte [statFlg1], inSingle  ;Are we in single mode?
    93 00004BE2 7531                <1>     jnz .singleCom
    94 00004BE4 488D1578030000      <1>     lea rdx, initString
    95 00004BEB B409                <1>     mov ah, 09h
    96 00004BED CD21                <1>     int 21h ;Print init string
    97 00004BEF E841EAFFFF          <1>     call version.printVersionNumber
    98 00004BF4 488D157B030000      <1>     lea rdx, initString2
    99 00004BFB B409                <1>     mov ah, 09h
   100 00004BFD CD21                <1>     int 21h ;Print init string
   101 00004BFF 31D2                <1>     xor edx, edx        ;Indicate we DONT want to do Autoexec processing
   102                              <1> .prepStart:
   103 00004C01 E822000000          <1>     call computeStackPtr    ;Returns the stack ptr in rbx and var
   104 00004C06 4889DC              <1>     mov rsp, rbx        ;Move the stack pointer to this address
   105 00004C09 802584B4FFFF7F      <1>     and byte [statFlg1], ~inLdr    ;Special work complete :-)
   106 00004C10 E982C4FFFF          <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   107                              <1> .singleCom:
   108                              <1> ;In single command mode, check the length of the input string was not 0.
   109                              <1> ; If it was, exit, else proceed
   110 00004C15 803D46B5FFFF00      <1>     cmp byte [inBuffer + 1], 0
   111 00004C1C 0F8432ECFFFF        <1>     je exit
   112 00004C22 31D2                <1>     xor edx, edx
   113 00004C24 FFCA                <1>     dec edx             ;Pretend that we want to process Autoexec
   114 00004C26 EBD9                <1>     jmp short .prepStart
   115                              <1> 
   116                              <1> computeStackPtr:
   117                              <1>     ;Now we add the stack to the alloc and paragraph align
   118 00004C28 488D1D92FEFFFF      <1>     lea rbx, endOfAlloc
   119 00004C2F 4881C340060000      <1>     add rbx, stackSize
   120 00004C36 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   121 00004C3D 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   122 00004C41 48C1E304            <1>     shl rbx, 4
   123 00004C45 48891DB9B3FFFF      <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   124                              <1>     return
    13                              <2> %%_ret:
    14 00004C4C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> parseCmdLine:
   127                              <1> ;COMMAND [drive:][path][device][/E:n][/P][/C string]
   128                              <1> ;[drive:] gives the default drive for COMSPEC. Default is default drive.
   129                              <1> ;[path] gives the search path to search for when searching for COMSPEC.
   130                              <1> ;   Default is root directory. Hence default COMSPEC is _:\COMMAND.COM
   131                              <1> ;[device] gives the default device to set STDIO to and reset to if we error
   132                              <1> ;           MAX 8 chars long name ([device] can be colon terminated).
   133                              <1> ;           Default is CON
   134                              <1> ;[/C string] means execute the string as a command and terminate immediately
   135                              <1> ;   This is single command mode, sets inSingle bit. Similar to int 2Eh.
   136                              <1> ;[/P] means make the instance of COMMAND.COM permanent.
   137                              <1> ;[/E:n] where n is a base 10 value between 160-32768, giving the size of the 
   138                              <1> ; environment to allocate in bytes. Only works if COMMAND.COM is to be 
   139                              <1> ; permanent. Needs a colon after E. 
   140                              <1> ;
   141                              <1> ;Start by setting up the default comspec dir, null terminated
   142 00004C4D E826F6FFFF          <1>     call getCurrentDrive    ;Get 0 based drive number in al
   143 00004C52 0441                <1>     add al, "A"
   144 00004C54 B43A                <1>     mov ah, ":"
   145 00004C56 488D3D00BAFFFF      <1>     lea rdi, comspecDir
   146 00004C5D 66AB                <1>     stosw   ;Store drive specifier
   147 00004C5F 0FB605C3B3FFFF      <1>     movzx eax, byte [pathSep]
   148 00004C66 66AB                <1>     stosw   ;Store the pathsep and a terminating <NUL>
   149                              <1> 
   150 00004C68 E853F9FFFF          <1>     call setDTA                     ;Ensure any searches dont trample on the tail!
   151 00004C6D 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the start of tail chars
   152                              <1> .parseLp:
   153 00004C74 E842F6FFFF          <1>     call skipDelimiters             ;Strip delims
   154 00004C79 AC                  <1>     lodsb
   155 00004C7A 48FFCE              <1>     dec rsi ;Point to first non-delimiter char
   156 00004C7D 3C0D                <1>     cmp al, CR
   157 00004C7F 0F847C010000        <1>     je .endScan
   158 00004C85 3A059FB3FFFF        <1>     cmp al, byte [switchChar]       ;Is this a switchchar?
   159 00004C8B 752D                <1>     jne .file
   160                              <1> .switch:
   161 00004C8D 48FFC6              <1>     inc rsi ;Go past the switch char
   162 00004C90 AC                  <1>     lodsb   ;Get first char past switch, advance rsi
   163 00004C91 E80AF6FFFF          <1>     call ucChar
   164 00004C96 3C43                <1>     cmp al, "C"
   165 00004C98 0F842F010000        <1>     je .switchStr
   166 00004C9E 3C50                <1>     cmp al, "P"
   167 00004CA0 0F8403010000        <1>     je .switchPerma
   168 00004CA6 3C45                <1>     cmp al, "E"
   169 00004CA8 0F84B0000000        <1>     je .switchEnv
   170 00004CAE 48FFCE              <1>     dec rsi ;Now point rsi back to this char
   171                              <1> .badparm:
   172 00004CB1 488D159EBDFFFF      <1>     lea rdx, badParm
   173 00004CB8 EBBA                <1>     jmp short .parseLp
   174                              <1> ;-----------------------------------------------------------------
   175                              <1> ;Search for the filespec
   176                              <1> .file:
   177 00004CBA E888F7FFFF          <1>     call copyArgumentToSearchSpec   ;Moves rsi to char past the delimiter
   178 00004CBF 48FFCE              <1>     dec rsi ;Point to the delimiter itself
   179 00004CC2 488D15C7B7FFFF      <1>     lea rdx, searchSpec
   180 00004CC9 B8004E0000          <1>     mov eax, 4E00h  ;Find First
   181 00004CCE B910000000          <1>     mov ecx, dirDirectory   ;Return Normal, RO, Dir or Char
   182 00004CD3 CD21                <1>     int 21h
   183 00004CD5 7319                <1>     jnc .charOrDir
   184                              <1> ;Just double check if the spec was the root dir. If so, proceed ok.
   185 00004CD7 8B02                <1>     mov eax, dword [rdx]    ;Get the first four chars
   186 00004CD9 30C0                <1>     xor al, al
   187 00004CDB 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Was this a <NUL>:\<NUL>?
   188 00004CE0 741C                <1>     je .dir ;If so, root dir specified, all oki!
   189                              <1> .badSpec:
   190                              <1> ;rsi has been moved past the argument so we can keep proceeding with processing
   191 00004CE2 488D15CB020000      <1>     lea rdx, badCmdDir
   192                              <1> .bs0:
   193 00004CE9 E882F3FFFF          <1>     call printString
   194                              <1> .plhop:
   195 00004CEE EB84                <1>     jmp short .parseLp
   196                              <1> ;-----------------------------------------------------------------
   197                              <1> ;Check if a char or directory here
   198                              <1> .charOrDir:
   199 00004CF0 8A0535B4FFFF        <1>     mov al, byte [cmdFFBlock + ffBlock.attribFnd]
   200 00004CF6 2450                <1>     and al, dirCharDev | dirDirectory
   201 00004CF8 74E8                <1>     jz .badSpec
   202 00004CFA A840                <1>     test al, dirCharDev
   203 00004CFC 7525                <1>     jnz .charDev
   204                              <1> ;Here if a directory. Save it null terminated in comspecDir.
   205                              <1> .dir:
   206 00004CFE 56                  <1>     push rsi
   207 00004CFF 488D358AB7FFFF      <1>     lea rsi, searchSpec 
   208 00004D06 488D3D50B9FFFF      <1>     lea rdi, comspecDir
   209 00004D0D E87AF5FFFF          <1>     call strcpy2
   210 00004D12 B811120000          <1>     mov eax, 1211h  ;Uppercase the pathspec
   211 00004D17 CD2F                <1>     int 2Fh         ;DOS 3.3 does't do this hehe 0:-)
   212 00004D19 5E                  <1>     pop rsi
   213 00004D1A C605D7020000FF      <1>     mov byte [initNewSpec], -1  ;Set, we have a new comspec
   214 00004D21 EBCB                <1>     jmp short .plhop
   215                              <1> ;-----------------------------------------------------------------
   216                              <1> ;Handle char dev here
   217                              <1> .charDev:
   218                              <1> ;Check the name is max 8 chars in length
   219 00004D23 488D3D66B7FFFF      <1>     lea rdi, searchSpec
   220 00004D2A E867F5FFFF          <1>     call strlen ;Get len plus <NUL> in ecx. Cant be more than 8+1 for <NUL>
   221 00004D2F 81F909000000        <1>     cmp ecx, 9  ;This can literally never happen but never hurts to be safe :)
   222 00004D35 771E                <1>     ja .badChar
   223 00004D37 56                  <1>     push rsi    ;Save offset into cmdTail on stack
   224 00004D38 488D3551B7FFFF      <1>     lea rsi, searchSpec
   225 00004D3F 488D3D84C1FFFF      <1>     lea rdi, devName
   226 00004D46 E832F5FFFF          <1>     call strcpy ;Copy this string over
   227 00004D4B 5E                  <1>     pop rsi
   228 00004D4C C605A6020000FF      <1>     mov byte [initNewDev], -1   ;Set this byte now we have a new dev!
   229                              <1> .plhop1:
   230 00004D53 EB99                <1>     jmp short .plhop    ;parseLp
   231                              <1> .badChar:
   232 00004D55 488D15ADBEFFFF      <1>     lea rdx, badDev
   233                              <1> .bs1:
   234 00004D5C EB8B                <1>     jmp short .bs0
   235                              <1> ;-----------------------------------------------------------------
   236                              <1> .switchEnv:
   237 00004D5E AC                  <1>     lodsb
   238 00004D5F 48FFCE              <1>     dec rsi
   239 00004D62 3C3A                <1>     cmp al, ":"
   240 00004D64 0F8547FFFFFF        <1>     jne .badparm
   241 00004D6A 48FFC6              <1>     inc rsi ;Now point past teh colon, skip any delimiters
   242 00004D6D E849F5FFFF          <1>     call skipDelimiters
   243 00004D72 AC                  <1>     lodsb       ;Get the first non-delimiter
   244 00004D73 48FFCE              <1>     dec rsi     ;Point back at it
   245 00004D76 3C0D                <1>     cmp al, CR
   246 00004D78 0F8433FFFFFF        <1>     je .badparm     ;Print bad arg, rsi positioned to terminate parsing now
   247                              <1>     ;Else, rsi now pointing at the first number. Do maths :)
   248 00004D7E E8F1F7FFFF          <1>     call getNum ;Move rsi to first non digit/9th digit if too many digits
   249 00004D83 0F8228FFFFFF        <1>     jc .badparm    ;Bad parameter error!
   250 00004D89 3D00800000          <1>     cmp eax, 8000h
   251 00004D8E 7710                <1>     ja .badEnv
   252 00004D90 3DA0000000          <1>     cmp eax, 0A0h
   253 00004D95 7209                <1>     jb .badEnv
   254 00004D97 6689055C020000      <1>     mov word [initEnvSz], ax    ;Store the allocated size here
   255                              <1> .plhop2:
   256 00004D9E EBB3                <1>     jmp short .plhop1  ;parseLp
   257                              <1> .badEnv:
   258 00004DA0 488D1536020000      <1>     lea rdx, badEnvSz
   259 00004DA7 EBB3                <1>     jmp short .bs1
   260                              <1> ;-----------------------------------------------------------------
   261                              <1> .switchPerma:
   262 00004DA9 AC                  <1>     lodsb   ;Get the second char after the P
   263 00004DAA 48FFCE              <1>     dec rsi ;Point back at it
   264 00004DAD 3C0D                <1>     cmp al, CR
   265 00004DAF 7413                <1>     je .spEmbCr ;Allow CR after the P
   266 00004DB1 3A0573B2FFFF        <1>     cmp al, byte [switchChar]
   267 00004DB7 740B                <1>     je .spEmbCr ;Allow switch char after P
   268 00004DB9 E80BF5FFFF          <1>     call isALdelimiter
   269 00004DBE 0F85EDFEFFFF        <1>     jne .badparm
   270                              <1> .spEmbCr:
   271 00004DC4 800DC9B2FFFF01      <1>     or byte [statFlg1], permaShell  ;Set the bit
   272 00004DCB EBD1                <1>     jmp short .plhop2  ;parseLp
   273                              <1> ;-----------------------------------------------------------------
   274                              <1> .switchStr:
   275 00004DCD AC                  <1>     lodsb       ;Get the char after the C
   276 00004DCE 48FFCE              <1>     dec rsi     ;Point back at it
   277 00004DD1 3C0D                <1>     cmp al, CR
   278 00004DD3 740B                <1>     je .ssembCr         ;Embedded CR ok
   279 00004DD5 E8EFF4FFFF          <1>     call isALdelimiter  ;Char immediately after the C must be a delimiter
   280 00004DDA 0F85D1FEFFFF        <1>     jne .badparm
   281                              <1> .ssembCr:
   282 00004DE0 E8D6F4FFFF          <1>     call skipDelimiters     ;Move rsi past the delimiters
   283 00004DE5 488D3D77B3FFFF      <1>     lea rdi, inBuffer + 2   ;Store the command in the inBuffer as if typed in
   284                              <1> .ssLp:
   285 00004DEC AC                  <1>     lodsb
   286 00004DED AA                  <1>     stosb
   287 00004DEE 3C0D                <1>     cmp al, CR
   288 00004DF0 7408                <1>     je .ssOk
   289 00004DF2 FE056AB3FFFF        <1>     inc byte [inBuffer + 1] ;Increment the char count
   290 00004DF8 EBF2                <1>     jmp short .ssLp
   291                              <1> .ssOk:
   292 00004DFA 800D93B2FFFF04      <1>     or byte [statFlg1], inSingle    ;Set the single flag
   293                              <1> ;Now we fall through as we have processed the cmd line and set the flag
   294                              <1> ;-----------------------------------------------------------------
   295                              <1> .endScan:
   296                              <1> ;Now copy our name to the end of the dir specified
   297 00004E01 488D3D55B8FFFF      <1>     lea rdi, comspecDir
   298 00004E08 E889F4FFFF          <1>     call strlen ;Get the length in ecx, preserve rdi
   299 00004E0D FFC9                <1>     dec ecx ;Point to null terminator
   300 00004E0F 8A0514B2FFFF        <1>     mov al, byte [pathSep]
   301 00004E15 4801CF              <1>     add rdi, rcx    ;Now point to the null
   302 00004E18 3847FF              <1>     cmp byte [rdi - 1], al
   303 00004E1B 7401                <1>     je .esSkipPathsep
   304 00004E1D AA                  <1>     stosb
   305                              <1> .esSkipPathsep:
   306 00004E1E 488D35CDC0FFFF      <1>     lea rsi, cspec
   307 00004E25 E853F4FFFF          <1>     call strcpy ;Now copy over the name of our beloved shell
   308 00004E2A E812000000          <1>     call .replacestdio
   309                              <1> ;Ensure that on exit, if both inSingle bit and permaShell are set, inSingle 
   310                              <1> ; wins. Unless this is the first boot, in which case, we ignore it
   311 00004E2F F6055EB2FFFF04      <1>     test byte [statFlg1], inSingle
   312                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00004E36 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00004E38 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   313 00004E39 802554B2FFFFFE      <1>     and byte [statFlg1], ~permaShell ;Else, ensure perma is deactivated
   314                              <1>     return
    13                              <2> %%_ret:
    14 00004E40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .replacestdio:
   316 00004E41 F605B1010000FF      <1>     test byte [initNewDev], -1
   317                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004E48 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   318 00004E4A 488D1579C0FFFF      <1>     lea rdx, devName
   319 00004E51 E93EE2FFFF          <1>     jmp ctty.loadSwap  ;Return through the return instruction in ctty
   320                              <1> 
   321                              <1> doEnv:
   322                              <1> ;Will do the environment adjustments as needed
   323 00004E56 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
   324 00004E5A 4885F6              <1>     test rsi, rsi
   325 00004E5D 7447                <1>     jz .noInitEnv
   326 00004E5F 66813D920100000000  <1>     cmp word [initEnvSz], 0 ;If an env exists and /E not specified, return!
   327                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004E68 74(40)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   328                              <1> ;Now if no new comspec has been given, we allocate a new block, 
   329                              <1> ;copy the environment from the master and free the original block.
   330                              <1> ;If the block we allocate is smaller than the original block, 
   331                              <1> ; print out of env space and stop there
   332                              <1> ;Else, we simply allocate and create a fresh new environment with the new 
   333                              <1> ; comspec. 
   334 00004E6A F60587010000FF      <1>     test byte [initNewSpec], -1  ;If we have a new comspec, create afresh
   335 00004E71 752E                <1>     jnz .prepNewEnv
   336                              <1>     ;Else, we create new alloc and copy master into it
   337 00004E73 E867000000          <1>     call .allocEnv
   338 00004E78 4889C7              <1>     mov rdi, rax        ;Move pointer into rdi
   339 00004E7B E8CC000000          <1>     call getMasterEnv   ;Get the current active master environment in rsi
   340 00004E80 57                  <1>     push rdi            ;Save the start of the environment block
   341 00004E81 E893000000          <1>     call .cpEnv         ;Copy the environment
   342 00004E86 5F                  <1>     pop rdi
   343 00004E87 E805000000          <1>     call .freeCurrentEnv
   344 00004E8C 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now set us as the env ptr
   345                              <1>     return  
    13                              <2> %%_ret:
    14 00004E90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> .freeCurrentEnv:
   347 00004E91 4150                <1>     push r8
   348 00004E93 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the original envPtr to free
   349 00004E97 B800490000          <1>     mov eax, 4900h
   350 00004E9C CD21                <1>     int 21h
   351 00004E9E 4158                <1>     pop r8
   352                              <1>     return
    13                              <2> %%_ret:
    14 00004EA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   353                              <1> .prepNewEnv:
   354 00004EA1 E8EBFFFFFF          <1>     call .freeCurrentEnv
   355                              <1> .noInitEnv:
   356                              <1> ;Build the initial block.
   357 00004EA6 E834000000          <1>     call .allocEnv
   358 00004EAB 4889C7              <1>     mov rdi, rax        ;Move rdi to the environment
   359 00004EAE 4989783E            <1>     mov qword [r8 + psp.envPtr], rdi    ;Now store this as the env pointer
   360 00004EB2 57                  <1>     push rdi            ;Save the environment ptr!
   361 00004EB3 488D3529C0FFFF      <1>     lea rsi, pathEVar
   362 00004EBA E8BEF3FFFF          <1>     call strcpy
   363 00004EBF 488D3523C0FFFF      <1>     lea rsi, comspecEVar
   364 00004EC6 E8B2F3FFFF          <1>     call strcpy
   365 00004ECB 48FFCF              <1>     dec rdi ;Write over the terminating null
   366 00004ECE 488D3588B7FFFF      <1>     lea rsi, comspecDir    ;Now copy the actual comspec! 
   367 00004ED5 E8A3F3FFFF          <1>     call strcpy 
   368 00004EDA 30C0                <1>     xor al, al
   369 00004EDC AA                  <1>     stosb   ;Store the second terminating null
   370 00004EDD 5F                  <1>     pop rdi ;Get back the pointer to the start of the env
   371                              <1>     return
    13                              <2> %%_ret:
    14 00004EDE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   372                              <1> 
   373                              <1> .allocEnv:
   374                              <1> ;Output: rax -> Ptr to the environment block. 
   375                              <1> ;   If anything goes wrong, error message and exit the shell!
   376 00004EDF 0FB71D14010000      <1>     movzx ebx, word [initEnvSz]
   377 00004EE6 85DB                <1>     test ebx, ebx   ;If this is 0, allocate 160 bytes
   378 00004EE8 750C                <1>     jnz .goAlloc
   379 00004EEA BBA0000000          <1>     mov ebx, 0A0h    ;160 bytes
   380 00004EEF 66891D04010000      <1>     mov word [initEnvSz], bx    ;Overwrite
   381                              <1> .goAlloc:
   382 00004EF6 81C30F000000        <1>     add ebx, 0Fh
   383 00004EFC C1EB04              <1>     shr ebx, 4  ;Round up and turn into paragraphs
   384 00004EFF B800480000          <1>     mov eax, 4800h
   385 00004F04 CD21                <1>     int 21h
   386                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00004F06 73(DE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   387 00004F08 488D151EBFFFFF      <1>     lea rdx, memBad1
   388 00004F0F E85CF1FFFF          <1>     call printString
   389 00004F14 E952E9FFFF          <1>     jmp exit.ouch 
   390                              <1> 
   391                              <1> .cpEnv:
   392                              <1> ;Copies the environment
   393                              <1> ;Input: rsi -> Source to copy from
   394                              <1> ;       rdi -> Destination to copy to
   395 00004F19 0FB70DDA000000      <1>     movzx ecx, word [initEnvSz]
   396                              <1> .lp:
   397 00004F20 AC                  <1>     lodsb
   398 00004F21 AA                  <1>     stosb
   399 00004F22 84C0                <1>     test al, al
   400 00004F24 750A                <1>     jnz .notNul
   401 00004F26 3806                <1>     cmp byte [rsi], al
   402 00004F28 7506                <1>     jnz .notNul
   403                              <1>     ;Here, we have encountered our double null!
   404 00004F2A FFC9                <1>     dec ecx ;Now we check if we have space to store the second char
   405 00004F2C 7406                <1>     jz .err ;If we dont have space for the last null kill last non-null char
   406 00004F2E AA                  <1>     stosb
   407                              <1>     return
    13                              <2> %%_ret:
    14 00004F2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> .notNul:
   409 00004F30 FFC9                <1>     dec ecx ;One less char to copy over
   410 00004F32 75EC                <1>     jnz .lp
   411                              <1> .err:
   412 00004F34 4881EF02000000      <1>     sub rdi, 2
   413 00004F3B 488D1508BAFFFF      <1>     lea rdx, noEnvSpace
   414 00004F42 E829F1FFFF          <1>     call printString
   415 00004F47 31C0                <1>     xor eax, eax
   416 00004F49 66AB                <1>     stosw   ;Store 0 word
   417                              <1>     return
    13                              <2> %%_ret:
    14 00004F4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> getMasterEnv:
   420                              <1> ;Walks the psp chain to the first self parent.
   421                              <1> ;Output: rsi -> Environment of the first self-parent program
   422 00004F4C 4150                <1>     push r8
   423                              <1> .lp:
   424 00004F4E 498B7022            <1>     mov rsi, qword [r8 + psp.parentPtr] ;Get the parent pointer
   425 00004F52 4C39C6              <1>     cmp rsi, r8 ;Are we a self parent?
   426 00004F55 7405                <1>     je .exit
   427 00004F57 4989F0              <1>     mov r8, rsi ;Make the current psp the parent
   428 00004F5A EBF2                <1>     jmp short .lp
   429                              <1> .exit:
   430 00004F5C 4158                <1>     pop r8
   431 00004F5E 488B763E            <1>     mov rsi, qword [rsi + psp.envPtr]   ;Get the environment pointer
   432                              <1>     return
    13                              <2> %%_ret:
    14 00004F62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> 
   434                              <1> 
   435                              <1> ;Loader Data here
   436                              <1> initString: 
   437 00004F63 0D0A5343502F444F53- <1>     db CR,LF, "SCP/DOS Version $"
   437 00004F6C 2056657273696F6E20- <1>
   437 00004F75 24                  <1>
   438                              <1> initString2:
   439 00004F76 0D0A436F7079726967- <1>     db CR,LF, "Copyright 2022, 2024, Yll Buzoku.",
   439 00004F7F 687420323032322C20- <1>
   439 00004F88 323032342C20596C6C- <1>
   439 00004F91 2042757A6F6B752E    <1>
   440 00004F99 0D0A24              <1>     db CR,LF,"$"
   441 00004F9C 496E636F7272656374- <1> badVerStr:  db "Incorrect DOS version",CR,LF,"$"
   441 00004FA5 20444F532076657273- <1>
   441 00004FAE 696F6E0D0A24        <1>
   442 00004FB4 537065636966696564- <1> badCmdDir:  db "Specified COMMAND search directory bad",CR,LF,"$"
   442 00004FBD 20434F4D4D414E4420- <1>
   442 00004FC6 736561726368206469- <1>
   442 00004FCF 726563746F72792062- <1>
   442 00004FD8 61640D0A24          <1>
   443 00004FDD 496E76616C69642045- <1> badEnvSz:   db "Invalid Environment Size",CR,LF,"$"
   443 00004FE6 6E7669726F6E6D656E- <1>
   443 00004FEF 742053697A650D0A24  <1>
   444 00004FF8 00                  <1> initNewSpec db 0    ;Set if a new comspec found and copied
   445 00004FF9 00                  <1> initNewDev  db 0    ;Set if a new device found and copied
   446 00004FFA 0000                <1> initEnvSz       dw 0  ;Max 7FFFh (32768) bytes. Default to 160. 0 means no /E:
    24                                  Segment stack1 nobits valign=16 vfollows=cmd
    25                                  ;This stack is only used during init of COMMAND.COM
    26 00000000 <res 3200h>                 dq stackSize dup (?)
    27                                  initEoA:    ;Initial end of allocation
    27          ------------------       info: assembly required 1+8+2 passes

