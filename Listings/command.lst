     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;1 based drive number 
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc exRenFcb
    62                              <1> ;Used for accessing the names and drive letter for renaming
    63                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    64 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    65 00000001 ??????????          <1>     .res0       resb 5  
    66 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    67 00000007 ??                  <1>     .driveNum   resb 1
    68 00000008 ????????????????    <1>     .filename   resb 8
    69 00000010 ??????              <1>     .fileext    resb 3
    70 00000013 ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    71 00000017 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    72 00000018 ????????????????    <1>     .newName    resb 8
    73 00000020 ??????              <1>     .newExt     resb 3
    74 00000023 ????????            <1>     .reserved2  resb 4  ;Alignment bytes, cleared by AH=29h
    75                              <1> endstruc
    76                              <1> 
    77                              <1> ;FCBmode equates:
    78                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    79                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    80                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    81                              <1> fcbShareOn  equ 80h
    82                              <1> fcbCharDev  equ 40h
    83                              <1> fcbLocal    equ 40h
    84                              <1> 
    85                              <1> ;Structures of the special 6 bytes
    86                              <1> 
    87                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    88                              <1> struc noShare   
    89 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    90 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    91 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    92 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    96                              <1> struc shareLocal    
    97 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    98 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    99 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
   100                              <1> endstruc
   101                              <1> 
   102                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
   103                              <1> struc shareNet
   104                              <1> ;All three fields too small for FAT32
   105 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
   106 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
   107 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   108                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 130 ;Length of a command line buffer (add two bytes for padding)
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdTail     equ psp.parmList
    19                              <1> cmdLineCnt  equ psp.parmList
    20                              <1> cmdLine     equ psp.progTail
    21                              <1> 
    22                              <1> 
    23                              <1> ;Struct Declarations
    24                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    25 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    26 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    27 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    28 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    29 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    30                              <1> endstruc
    31                              <1> 
    32                              <1> struc execProg  ;For use with EXEC-ing a child task
    33 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    34 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    35 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    36 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    37                              <1> endstruc
    38                              <1> 
    39                              <1> ;Directory attribute equates
    40                              <1>     dirReadOnly     equ 01h
    41                              <1>     dirHidden       equ 02h
    42                              <1>     dirSystem       equ 04h
    43                              <1>     dirVolumeID     equ 08h
    44                              <1>     dirDirectory    equ 10h
    45                              <1>     dirArchive      equ 20h
    46                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    47                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    48                              <1>     ;If any of the three bits are set, then ALL three bits are set
    49                              <1>     ; in addition to whatever the user passed to search for.
    50                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    51                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 5C                  <1> pathSep     db "\"  ;Default path sep
    11 0000002A 2F                  <1> switchChar  db "/"  ;Default switch char
    12 0000002B 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    13 0000002C 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    14                              <1> ;Static strings, not used in command line parsing
    15 00000034 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    15 0000003D 000000000000000000- <1>
    15 00000046 000000000000000000- <1>
    15 0000004F 000000000000000000- <1>
    15 00000058 0000                <1>
    16 0000005A 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    16 00000063 000000000000000000- <1>
    16 0000006C 000000000000000000- <1>
    16 00000075 000000000000000000- <1>
    16 0000007E 000000000000000000- <1>
    16 00000087 000000000000000000- <1>
    16 00000090 000000000000000000- <1>
    16 00000099 00000000            <1>
    17                              <1> 
    18                              <1> 
    19                              <1> cmdLineStatePtr:
    20 0000009D 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    21 0000009E FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    22 000000A0 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    23                              <1> ;These variables are valid for a SINGLE command in a command line
    24                              <1> ;Next two bytes, if set to -1, flags error
    25 000000A2 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    26 000000A3 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    27                              <1> ;                    If 2, we are redirecting output to a file, by appending
    28 000000A4 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    29 000000A6 FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    30                              <1> 
    31                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    32 000000A8 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    33 000000A9 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    34 000000AA 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    35                              <1> 
    36 000000AB 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    37 000000AC 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000AD 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    39                              <1> 
    40                              <1> cmdStateL equ $ - cmdStatePtr
    41                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    42                              <1> 
    43                              <1> ;Batch state variables. Batch changes current dir to dir of batch file!
    44 000000AE 00                  <1> batFlag     db 0    ;Batch mode flag. Set to -1 if batch mode on
    45 000000AF 0000000000000000    <1> batBlockPtr dq 0    ;Ptr to the batch block
    46 000000B7 000000000000000000- <1> batOgCD     db fileSpecZL dup (0)   ;Original current dir for batch
    46 000000C0 000000000000000000- <1>
    46 000000C9 000000000000000000- <1>
    46 000000D2 000000000000000000- <1>
    46 000000DB 000000000000000000- <1>
    46 000000E4 000000000000000000- <1>
    46 000000ED 000000000000000000- <1>
    46 000000F6 000000000000000000- <1>
    46 000000FF 00000000000000      <1>
    47 00000106 000000000000000000- <1> batFile     db fileSpecZL dup (0)   ;Path to bat to execute. Qual with path!
    47 0000010F 000000000000000000- <1>
    47 00000118 000000000000000000- <1>
    47 00000121 000000000000000000- <1>
    47 0000012A 000000000000000000- <1>
    47 00000133 000000000000000000- <1>
    47 0000013C 000000000000000000- <1>
    47 00000145 000000000000000000- <1>
    47 0000014E 00000000000000      <1>
    48                              <1> ;batCallPtr  dq 0    ;Ptr to the call state block
    49                              <1> 
    50                              <1> ;Structs and strings
    51                              <1> 
    52 00000155 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    52 0000015E 00000000000000      <1>
    53 00000165 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 00000000000000      <1>
    54                              <1> 
    55 00000190 000000000000000000- <1> launchBlock db execProg_size dup (0)
    55 00000199 000000000000000000- <1>
    55 000001A2 000000000000000000- <1>
    55 000001AB 0000000000          <1>
    56                              <1> 
    57 000001B0 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    57 000001B9 000000000000000000- <1>
    57 000001C2 000000000000000000- <1>
    57 000001CB 000000000000000000- <1>
    57 000001D4 000000000000000000- <1>
    57 000001DD 000000000000000000- <1>
    57 000001E6 000000000000000000- <1>
    57 000001EF 000000000000000000- <1>
    57 000001F8 000000000000000000- <1>
    57 00000201 000000000000000000- <1>
    57 0000020A 000000000000000000- <1>
    57 00000213 000000000000000000- <1>
    57 0000021C 000000000000000000- <1>
    57 00000225 000000000000000000- <1>
    57 0000022E 00000000            <1>
    58                              <1> inBufferL   equ 127 ;127 chars so we can copy to PSP with terminating CR
    59 00000232 000000000000000000- <1> cpyBuffer   db cmdBufferL dup (0)   ;Copied input for processing
    59 0000023B 000000000000000000- <1>
    59 00000244 000000000000000000- <1>
    59 0000024D 000000000000000000- <1>
    59 00000256 000000000000000000- <1>
    59 0000025F 000000000000000000- <1>
    59 00000268 000000000000000000- <1>
    59 00000271 000000000000000000- <1>
    59 0000027A 000000000000000000- <1>
    59 00000283 000000000000000000- <1>
    59 0000028C 000000000000000000- <1>
    59 00000295 000000000000000000- <1>
    59 0000029E 000000000000000000- <1>
    59 000002A7 000000000000000000- <1>
    59 000002B0 00000000            <1>
    60 000002B4 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)   ;Buffer with the command pipeline
    60 000002BD 000000000000000000- <1>
    60 000002C6 000000000000000000- <1>
    60 000002CF 000000000000000000- <1>
    60 000002D8 000000000000000000- <1>
    60 000002E1 000000000000000000- <1>
    60 000002EA 000000000000000000- <1>
    60 000002F3 000000000000000000- <1>
    60 000002FC 000000000000000000- <1>
    60 00000305 000000000000000000- <1>
    60 0000030E 000000000000000000- <1>
    60 00000317 000000000000000000- <1>
    60 00000320 000000000000000000- <1>
    60 00000329 000000000000000000- <1>
    60 00000332 00000000            <1>
    61 00000336 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)   ;Space for full path to a ext cmd
    61 0000033F 000000000000000000- <1>
    61 00000348 000000000000000000- <1>
    61 00000351 000000000000000000- <1>
    61 0000035A 000000000000000000- <1>
    61 00000363 000000000000000000- <1>
    61 0000036C 000000000000000000- <1>
    61 00000375 000000000000000000- <1>
    61 0000037E 00000000000000      <1>
    62 00000385 000000000000000000- <1> cmdName     db cmdNameL dup (0)     ;Cmd name prefixed by length 
    62 0000038E 0000000000          <1>
    63                              <1> 
    64 00000393 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    64 0000039C 000000000000000000- <1>
    64 000003A5 000000000000000000- <1>
    64 000003AE 000000000000000000- <1>
    64 000003B7 000000000000000000- <1>
    64 000003C0 000000000000000000- <1>
    64 000003C9 000000000000000000- <1>
    64 000003D2 000000000000000000- <1>
    64 000003DB 00000000000000      <1>
    65 000003E2 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    65 000003EB 000000000000000000- <1>
    65 000003F4 000000000000000000- <1>
    65 000003FD 000000000000000000- <1>
    65 00000406 000000000000000000- <1>
    65 0000040F 000000000000000000- <1>
    65 00000418 000000000000000000- <1>
    65 00000421 000000000000000000- <1>
    65 0000042A 00000000000000      <1>
    66                              <1> 
    67                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    68 00000431 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 0000043A 000000000000000000- <1>
    68 00000443 000000000000000000- <1>
    68 0000044C 000000000000000000- <1>
    68 00000455 000000000000000000- <1>
    68 0000045E 000000000000000000- <1>
    68 00000467 000000000000000000- <1>
    68 00000470 000000000000000000- <1>
    68 00000479 00000000000000      <1>
    69 00000480 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    69 00000489 000000000000000000- <1>
    69 00000492 000000000000000000- <1>
    69 0000049B 000000000000000000- <1>
    69 000004A4 000000000000000000- <1>
    69 000004AD 000000000000000000- <1>
    69 000004B6 000000000000000000- <1>
    69 000004BF 000000000000000000- <1>
    69 000004C8 00000000000000      <1>
    70                              <1> 
    71 000004CF 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    72 000004D7 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    73                              <1> 
    74                              <1> ;Main scratch buffer for forming paths! Needs to be large enough to splice
    75                              <1> ; a really long invalid DOS path for PATH to work properly.
    76 000004DF 000000000000000000- <1> searchSpec  db 2*cmdBufferL dup (0)   
    76 000004E8 000000000000000000- <1>
    76 000004F1 000000000000000000- <1>
    76 000004FA 000000000000000000- <1>
    76 00000503 000000000000000000- <1>
    76 0000050C 000000000000000000- <1>
    76 00000515 000000000000000000- <1>
    76 0000051E 000000000000000000- <1>
    76 00000527 000000000000000000- <1>
    76 00000530 000000000000000000- <1>
    76 00000539 000000000000000000- <1>
    76 00000542 000000000000000000- <1>
    76 0000054B 000000000000000000- <1>
    76 00000554 000000000000000000- <1>
    76 0000055D 000000000000000000- <1>
    76 00000566 000000000000000000- <1>
    76 0000056F 000000000000000000- <1>
    76 00000578 000000000000000000- <1>
    76 00000581 000000000000000000- <1>
    76 0000058A 000000000000000000- <1>
    76 00000593 000000000000000000- <1>
    76 0000059C 000000000000000000- <1>
    76 000005A5 000000000000000000- <1>
    76 000005AE 000000000000000000- <1>
    76 000005B7 000000000000000000- <1>
    76 000005C0 000000000000000000- <1>
    76 000005C9 000000000000000000- <1>
    76 000005D2 000000000000000000- <1>
    76 000005DB 0000000000000000    <1>
    77                              <1> 
    78                              <1> ;Internal Function vars
    79                              <1> ;Dir Vars
    80 000005E3 00                  <1> dirFlags    db 0    ;Dir Flags.     Bit[0] set => /W or /w specified
    81                              <1> ;                                   Bit[1] set => /P or /p specified
    82                              <1> ;                                   Bit[2] set => A file/path specified
    83 000005E4 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    84 000005E5 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    85 000005E6 00                  <1> dirDrv      db 0    ;0 based drive number to use
    86 000005E7 000000000000000000- <1> dirSrchDir  db cmdBufferL dup (0)   ;Search directory 
    86 000005F0 000000000000000000- <1>
    86 000005F9 000000000000000000- <1>
    86 00000602 000000000000000000- <1>
    86 0000060B 000000000000000000- <1>
    86 00000614 000000000000000000- <1>
    86 0000061D 000000000000000000- <1>
    86 00000626 000000000000000000- <1>
    86 0000062F 000000000000000000- <1>
    86 00000638 000000000000000000- <1>
    86 00000641 000000000000000000- <1>
    86 0000064A 000000000000000000- <1>
    86 00000653 000000000000000000- <1>
    86 0000065C 000000000000000000- <1>
    86 00000665 00000000            <1>
    87 00000669 3F3F3F3F3F3F3F3F3F- <1> dirSrchFCB  db 10h dup ("?")    ;We copy the search pattern here
    87 00000672 3F3F3F3F3F3F3F      <1>
    88                              <1> dirWideType equ 1
    89                              <1> dirPageType equ 2
    90                              <1> dirFileType equ 4
    91                              <1> ;Volume Vars
    92                              <1> volFcb:
    93                              <1>     istruc exFcb
    94 00000679 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
    95 0000067A 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
    96 00000680 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
    97 00000681 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
    98 00000689 3F3F3F              <1>     at exFcb.fileext,   db "???"
    99 0000068C 00000000            <1>     at exFcb.curBlock,  dd 0
   100 00000690 00<rep 15h>         <1>     iend 
   101                              <1> 
   102                              <1> ;Time/Date vars
   103 000006A5 00                  <1> td1 db 0    ;Minutes/Year
   104 000006A6 00                  <1> td2 db 0    ;Hours/Zero
   105 000006A7 00                  <1> td3 db 0    ;Hundredths/Day
   106 000006A8 00                  <1> td4 db 0    ;Seconds/Month
   107                              <1> 
   108                              <1> ;Rename/Copy/Delete Buffers
   109                              <1> delPath:
   110 000006A9 000000000000000000- <1> srcSpec     db cmdBufferL dup (0)
   110 000006B2 000000000000000000- <1>
   110 000006BB 000000000000000000- <1>
   110 000006C4 000000000000000000- <1>
   110 000006CD 000000000000000000- <1>
   110 000006D6 000000000000000000- <1>
   110 000006DF 000000000000000000- <1>
   110 000006E8 000000000000000000- <1>
   110 000006F1 000000000000000000- <1>
   110 000006FA 000000000000000000- <1>
   110 00000703 000000000000000000- <1>
   110 0000070C 000000000000000000- <1>
   110 00000715 000000000000000000- <1>
   110 0000071E 000000000000000000- <1>
   110 00000727 00000000            <1>
   111 0000072B 000000000000000000- <1> destSpec    db cmdBufferL dup (0)
   111 00000734 000000000000000000- <1>
   111 0000073D 000000000000000000- <1>
   111 00000746 000000000000000000- <1>
   111 0000074F 000000000000000000- <1>
   111 00000758 000000000000000000- <1>
   111 00000761 000000000000000000- <1>
   111 0000076A 000000000000000000- <1>
   111 00000773 000000000000000000- <1>
   111 0000077C 000000000000000000- <1>
   111 00000785 000000000000000000- <1>
   111 0000078E 000000000000000000- <1>
   111 00000797 000000000000000000- <1>
   111 000007A0 000000000000000000- <1>
   111 000007A9 00000000            <1>
   112 000007AD 0000000000000000    <1> srcPtr      dq 0    ;Where to copy the pattern to
   113 000007B5 0000000000000000    <1> destPtr     dq 0    ;Where to copy the pattern to
   114 000007BD 202020202020202020- <1> renName     db 11 dup (" ") ;Build a name pattern here in FCB format
   114 000007C6 2020                <1>
   115                              <1> ;Copy Handles
   116 000007C8 FFFF                <1> sourceHdl   dw -1
   117 000007CA FFFF                <1> destHdl     dw -1
   118 000007CC 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   119 000007CE 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   119 000007D7 000000000000000000- <1>
   119 000007E0 000000000000000000- <1>
   119 000007E9 000000000000000000- <1>
   119 000007F2 000000000000000000- <1>
   119 000007FB 000000000000000000- <1>
   119 00000804 000000000000000000- <1>
   119 0000080D 000000000000000000- <1>
   119 00000816 000000000000000000- <1>
   119 0000081F 000000000000000000- <1>
   119 00000828 000000000000000000- <1>
   119 00000831 000000000000000000- <1>
   119 0000083A 000000000000000000- <1>
   119 00000843 000000000000000000- <1>
   119 0000084C 0000                <1>
   120                              <1> 
   121                              <1> ;Environment manipulation vars
   122 0000084E 0000                <1> envVarSz        dw 0    ;Env var size
   123 00000850 0000                <1> envVarNamSz     dw 0    ;Env var "name="" length
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 00000852 03444952            <1>     db 3, "DIR"
     8 00000856 8F19                <1>     dw dir - startLbl
     9                              <1> 
    10 00000858 024344              <1>     db 2, "CD"
    11 0000085B 581E                <1>     dw chdir - startLbl
    12                              <1> 
    13 0000085D 054348444952        <1>     db 5, "CHDIR"
    14 00000863 581E                <1>     dw chdir - startLbl
    15                              <1> 
    16 00000865 024D44              <1>     db 2, "MD"
    17 00000868 D31E                <1>     dw mkdir - startLbl
    18                              <1> 
    19 0000086A 054D4B444952        <1>     db 5, "MKDIR"
    20 00000870 D31E                <1>     dw mkdir - startLbl
    21                              <1> 
    22 00000872 025244              <1>     db 2, "RD"
    23 00000875 1F1F                <1>     dw rmdir - startLbl
    24                              <1> 
    25 00000877 05524D444952        <1>     db 5, "RMDIR"
    26 0000087D 1F1F                <1>     dw rmdir - startLbl
    27                              <1> 
    28 0000087F 0344454C            <1>     db 3, "DEL"
    29 00000883 0D21                <1>     dw erase - startLbl
    30                              <1> 
    31 00000885 054552415345        <1>     db 5, "ERASE"
    32 0000088B 0D21                <1>     dw erase - startLbl
    33                              <1> 
    34 0000088D 0444415445          <1>     db 4, "DATE"
    35 00000892 4B22                <1>     dw date - startLbl
    36                              <1> 
    37 00000894 0454494D45          <1>     db 4, "TIME"
    38 00000899 B022                <1>     dw time - startLbl
    39                              <1> 
    40 0000089B 04434F5059          <1>     db 4, "COPY"
    41 000008A0 6B1F                <1>     dw copy - startLbl
    42                              <1> 
    43 000008A2 0443545459          <1>     db 4, "CTTY"
    44 000008A7 ED22                <1>     dw ctty - startLbl
    45                              <1> 
    46 000008A9 03434C53            <1>     db 3, "CLS"
    47 000008AD 8823                <1>     dw cls - startLbl
    48                              <1> 
    49 000008AF 05425245414B        <1>     db 5, "BREAK"
    50 000008B5 FA23                <1>     dw break - startLbl
    51                              <1> 
    52 000008B7 06564552494659      <1>     db 6, "VERIFY"
    53 000008BE 7B24                <1>     dw verify - startLbl
    54                              <1> 
    55 000008C0 0652454E414D45      <1>     db 6, "RENAME"
    56 000008C7 F824                <1>     dw rename - startLbl
    57                              <1> 
    58 000008C9 0352454E            <1>     db 3, "REN"
    59 000008CD F824                <1>     dw rename - startLbl
    60                              <1>     
    61 000008CF 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 000008D8 FC28                <1>     dw truename - startLbl
    63                              <1> 
    64 000008DA 03564552            <1>     db 3, "VER"
    65 000008DE E22A                <1>     dw version - startLbl
    66                              <1> 
    67 000008E0 03564F4C            <1>     db 3, "VOL"
    68 000008E4 232A                <1>     dw volume - startLbl
    69                              <1> 
    70 000008E6 034D454D            <1>     db 3, "MEM"
    71 000008EA 262B                <1>     dw memory - startLbl
    72                              <1> 
    73 000008EC 0445584954          <1>     db 4, "EXIT"
    74 000008F1 0F2D                <1>     dw exit - startLbl
    75                              <1> 
    76 000008F3 0454595045          <1>     db 4, "TYPE"
    77 000008F8 702C                <1>     dw type - startLbl
    78                              <1> 
    79 000008FA 054C4142454C        <1>     db 5, "LABEL"
    80 00000900 4D29                <1>     dw label - startLbl
    81                              <1> 
    82 00000902 0450415448          <1>     db 4, "PATH"
    83 00000907 7A30                <1>     dw pathEdit - startLbl
    84                              <1> 
    85 00000909 03534554            <1>     db 3, "SET"
    86 0000090D 5B2F                <1>     dw set - startLbl
    87                              <1> 
    88 0000090F 0650524F4D5054      <1>     db 6, "PROMPT"
    89 00000916 5931                <1>     dw prompt - startLbl
    90                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
    91 00000918 054D4B4C424C        <1>     db 5, "MKLBL"
    92 0000091E 7729                <1>     dw mklbl - startLbl
    93                              <1> 
    94 00000920 05524D4C424C        <1>     db 5, "RMLBL"
    95 00000926 B229                <1>     dw rmlbl - startLbl
    96                              <1> 
    97 00000928 05524E4C424C        <1>     db 5, "RNLBL"
    98 0000092E ED29                <1>     dw rnlbl - startLbl
    99                              <1> 
   100 00000930 05544F554348        <1>     db 5, "TOUCH"
   101 00000936 EF26                <1>     dw touch - startLbl
   102                              <1> 
   103 00000938 044A4F494E          <1>     db 4, "JOIN"
   104 0000093D 5227                <1>     dw join - startLbl
   105                              <1> 
   106 0000093F 055355425354        <1>     db 5, "SUBST"
   107 00000945 1528                <1>     dw subst - startLbl
   108                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   109 00000947 FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 00000948 0D0A24              <1> crlf    db  CR,LF,"$"
     3 0000094B 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000950 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 00000959 696C65206D69737369- <1>
     4 00000962 6E670D0A24          <1>
     5 00000967 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000970 6469736B2077697468- <1>
     5 00000979 206261746368206669- <1>
     5 00000982 6C65                <1>
     6 00000984 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 0000098D 737320616E79206B65- <1>
     6 00000996 79207768656E207265- <1>
     6 0000099F 6164790D0A24        <1>
     7 000009A5 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000009AE 6E64206F722066696C- <1>
     7 000009B7 65206E616D650D0A24  <1>
     8 000009C0 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000009C9 2066696C65206E616D- <1>
     8 000009D2 65206F7220          <1>
     9 000009D7 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000009E0 666F756E640D0A24    <1>
    10 000009E8 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"     ;Disk full. On copy only!
    10 000009F1 656E74206469736B20- <1>
    10 000009FA 73706163650D0A24    <1>
    11 00000A02 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000A0B 7669726F6E6D656E74- <1>
    11 00000A14 2073706163650D0A24  <1>
    12 00000A1D 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 00000A26 74696F6E206572726F- <1>
    12 00000A2F 720D0A24            <1>
    13 00000A33 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000A3C 6F7420626520636F70- <1>
    13 00000A45 696564206F6E746F20- <1>
    13 00000A4E 697473656C660D0A24  <1>
    14 00000A57 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000A60 662064657374696E61- <1>
    14 00000A69 74696F6E206C6F7374- <1>
    14 00000A72 206265666F72652063- <1>
    14 00000A7B 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000A81 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 00000A8A 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000A93 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 00000A9C 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 00000A9D 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 00000AA6 65650D0A24          <1>
    21 00000AAB 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 00000AB4 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 00000ABD 726976652073706563- <1>
    23 00000AC6 696669636174696F6E- <1>
    23 00000ACF 0D0A24              <1>
    24 00000AD2 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 00000ADB 6B6579207768656E20- <1>
    24 00000AE4 7265616479202E202E- <1>
    24 00000AED 202E2024            <1>
    25 00000AF1 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 00000AFA 6172616D657465720D- <1>
    25 00000B03 0A24                <1>
    26                              <1> 
    27 00000B05 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000B0E 576564546875467269- <1>
    27 00000B17 536174              <1>
    28 00000B1A 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000B23 206461746524        <1>
    29 00000B29 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000B32 6174652069732024    <1>
    30 00000B3A 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000B43 657720646174652024  <1>
    31 00000B4C 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000B55 293A2024            <1>
    32 00000B59 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000B62 293A2024            <1>
    33 00000B66 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000B6F 293A2024            <1>
    34 00000B73 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000B7C 2074696D6524        <1>
    35 00000B82 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000B8B 696D652069732024    <1>
    36 00000B93 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000B9C 65772074696D653A20- <1>
    36 00000BA5 24                  <1>
    37                              <1> 
    38 00000BA6 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000BAF 7572652028592F4E29- <1>
    38 00000BB8 3F2024              <1>
    39                              <1> 
    40 00000BBB 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000BC4 56657273696F6E2024  <1>
    41                              <1> 
    42 00000BCD 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000BD6 6E2064726976652024  <1>
    43 00000BDF 2069732024          <1> volOk   db " is $"
    44 00000BE4 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000BED 6162656C24          <1>
    45                              <1> 
    46 00000BF2 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000BFB 69726563746F72790D- <1>
    46 00000C04 0A24                <1>
    47 00000C06 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000C0F 206372656174652064- <1>
    47 00000C18 69726563746F72790D- <1>
    47 00000C21 0A24                <1>
    48 00000C23 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000C2C 6174682C206E6F7420- <1>
    48 00000C35 6469726563746F7279- <1>
    48 00000C3E 2C0D0A              <1>
    49 00000C41 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000C4A 6F7279206E6F742065- <1>
    49 00000C53 6D7074790D0A24      <1>
    50 00000C5A 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000C63 79206F66202024      <1>
    51 00000C6A 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000C73 416363657373206465- <1> accDenMsg  db "Access denied",CR,LF,"$"
    52 00000C7C 6E6965640D0A24      <1>
    53 00000C83 43757272656E742064- <1> badDrvMsg db "Current drive is no longer valid$"
    53 00000C8C 72697665206973206E- <1>
    53 00000C95 6F206C6F6E67657220- <1>
    53 00000C9E 76616C696424        <1>
    54                              <1> ;badDrvSrch  db "Invalid drive in search path",CR,LF,"$"        ;MAY REMOVE
    55 00000CA4 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    55 00000CAD 65766963650D0A24    <1>
    56 00000CB5 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    56 00000CBE 20666F756E640D0A24  <1>
    57 00000CC7 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    57 00000CD0 726F720D0A24        <1>
    58 00000CD6 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    58 00000CDF 6F74206265206E6573- <1>
    58 00000CE8 7465640D0A24        <1>
    59 00000CEE 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    59 00000CF7 6174652066696C6520- <1>
    59 00000D00 6572726F7220647572- <1>
    59 00000D09 696E6720706970650D- <1>
    59 00000D12 0A24                <1>
    60 00000D14 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    60 00000D1D 2062696E6172792072- <1>
    60 00000D26 656164732066726F6D- <1>
    60 00000D2F 206120646576696365- <1>
    60 00000D38 0D0A24              <1>
    61 00000D3B 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    62 00000D41 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    63 00000D46 425245414B20697320- <1> breakIs db "BREAK is $"
    63 00000D4F 24                  <1>
    64 00000D50 564552494659206973- <1> verifyIs    db "VERIFY is $"
    64 00000D59 2024                <1>
    65 00000D5B 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    66 00000D64 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    66 00000D6D 617468206F72206669- <1>
    66 00000D76 6C65206E616D650D0A- <1>
    66 00000D7F 24                  <1>
    67 00000D80 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    67 00000D89 756D626572206F6620- <1>
    67 00000D92 706172616D65746572- <1>
    67 00000D9B 730D0A24            <1>
    68 00000D9F 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    68 00000DA8 74696E6720746F2064- <1>
    68 00000DB1 6576696365          <1>
    69 00000DB6 08200800            <1> backSpace   db BSP," ",BSP,NUL
    70                              <1> 
    71 00000DBA 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    71 00000DC3 20202020202020546F- <1>
    71 00000DCC 74616C207379737465- <1>
    71 00000DD5 6D206D656D6F72793A- <1>
    71 00000DDE 2024                <1>
    72 00000DE0 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    72 00000DE9 20202020202020204D- <1>
    72 00000DF2 656D6F727920757365- <1>
    72 00000DFB 6420627920444F533A- <1>
    72 00000E04 2024                <1>
    73 00000E06 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    73 00000E0F 656D6F727920757365- <1>
    73 00000E18 64206279206170706C- <1>
    73 00000E21 69636174696F6E733A- <1>
    73 00000E2A 2024                <1>
    74 00000E2C 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    74 00000E35 656D6F727920726573- <1>
    74 00000E3E 657276656420627920- <1>
    74 00000E47 68617264776172653A- <1>
    74 00000E50 2024                <1>
    75 00000E52 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    75 00000E5B 202020202020202020- <1>
    75 00000E64 2020202020204D656D- <1>
    75 00000E6D 6F727920667265653A- <1>
    75 00000E76 2024                <1>
    76 00000E78 20627974657324      <1> memByte db " bytes$"
    77 00000E7F 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    77 00000E88 6F7420417373657274- <1>
    77 00000E91 61696E20444F532045- <1>
    77 00000E9A 6E74727920506F696E- <1>
    77 00000EA3 7424                <1>
    78 00000EA5 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    78 00000EAE 416C6C6F636174696F- <1>
    78 00000EB7 6E204572726F7224    <1>
    79 00000EBF 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    79 00000EC8 4572726F7224        <1>
    80 00000ECE 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    80 00000ED7 68616C74656424      <1>
    81                              <1> 
    82 00000EDE 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    82 00000EE7 206372656174652070- <1>
    82 00000EF0 6970650D0A          <1>
    83                              <1> pipeErrMsgL equ $ - pipeErrMsg
    84 00000EF5 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    84 00000EFE 6F6E206572726F720D- <1>
    84 00000F07 0A                  <1>
    85                              <1> redirErrMsgL   equ $ - redirErrMsg
    86                              <1> 
    87 00000F08 1B5B324A            <1> ansiCls  db ESC,"[2J" ;ANSI CLS sequence, 4 chars long
    88 00000F0C 2020202024          <1> fourSpc  db "    $"
    89 00000F11 20202024            <1> threeSpc db "   $"
    90 00000F15 202024              <1> twoSpc   db "  $"
    91                              <1> 
    92 00000F18 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    92 00000F21 696679204F4E206F72- <1>
    92 00000F2A 204F46460D0A24      <1>
    93                              <1> 
    94 00000F31 50524F4D50543D0D    <1> promptEVar  db "PROMPT=",CR     ;Must be CR terminated!
    95 00000F39 434F4D455845424154  <1> extStr  db "COMEXEBAT"  ;Used for extension searches
    96                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    97                              <1> ; handles and reopen CON
    98 00000F42 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:
     3                              <1> ;This is copied into an MCB to be used as the environment!
     4                              <1> comspecEvar:
     5 00000F46 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 00000F4E 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0  ;Part of the comspec!
     7 00000F57 442E434F4D00        <1>
     8                              <1> pathEVar:
     9 00000F5D 504154483D0000      <1>     db "PATH=",0,0  ;End of default environment strings
    10                              <1> menv_len equ $ - masterEnv
    11                              <1> ;Master environment doesnt contain the "program name string"
    16                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000F64 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000F67 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000F6B C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000F6E B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000F70 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000F73 CD21                <1>     int 21h
    11 00000F75 EB6C                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000F77 B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000F7C CD21                <1>     int 21h
    15 00000F7E 66890588F0FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000F85 488D159B2A0000      <1>     lea rdx, critErrorHandler
    18 00000F8C 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000F90 B824250000          <1>     mov eax, 2524h
    20 00000F95 CD21                <1>     int 21h
    21 00000F97 488D15242D0000      <1>     lea rdx, int23h
    22 00000F9E 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000FA2 B823250000          <1>     mov eax, 2523h
    24 00000FA7 CD21                <1>     int 21h
    25 00000FA9 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000FB0 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000FB4 B822250000          <1>     mov eax, 2522h
    28 00000FB9 CD21                <1>     int 21h
    29 00000FBB F605DBF0FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000FC2 0F85B8000000        <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000FC8 E820050000          <1>     call advanceRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000FCD 0FB70D53F0FFFF      <1>     movzx ecx, word [numHdls]
    34 00000FD4 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000FD9 B43E                <1>     mov ah, 3Eh ;File close
    37 00000FDB CD21                <1>     int 21h
    38 00000FDD FFC3                <1>     inc ebx ;Goto next file
    39 00000FDF 39CB                <1>     cmp ebx, ecx
    40 00000FE1 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42 00000FE3 488B251BF0FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    43 00000FEA FC                  <1>     cld ;Ensure stringops are done the right way
    44 00000FEB C605BEF1FFFF7F      <1>     mov byte [inBuffer], inBufferL      ;Reset the buffer length
    45 00000FF2 C60539F2FFFF7F      <1>     mov byte [cpyBuffer], inBufferL     ;Reset the buffer length
    46 00000FF9 C605B4F2FFFF7F      <1>     mov byte [cmdBuffer], inBufferL     ;Reset the buffer length
    47                              <1> .inputMain:
    48 00001000 E804240000          <1>     call printCRLF
    49                              <1> .inputMain2:
    50 00001005 F605A2F0FFFFFF      <1>     test byte [batFlag], -1 ;If batch on, go here
    51 0000100C 0F8584080000        <1>     jnz batNextLine
    52 00001012 E875260000          <1>     call clearCommandLineState
    53 00001017 E85D230000          <1>     call printPrompt
    54                              <1> 
    55 0000101C B8095D0000          <1>     mov eax, 5D09h  ;Flush network printers
    56 00001021 CD21                <1>     int 21h
    57 00001023 B8085D0000          <1>     mov eax, 5D08h  ;Set net printer state
    58 00001028 BA01000000          <1>     mov edx, 1      ;Start new print job
    59 0000102D CD21                <1>     int 21h
    60 0000102F 488D157AF1FFFF      <1>     lea rdx, inBuffer
    61 00001036 B8000A0000          <1>     mov eax, 0A00h  ;Do Buffered input
    62 0000103B CD21                <1>     int 21h
    63 0000103D E8C7230000          <1>     call printCRLF  ;Note we have accepted input
    64                              <1> ;First check we had something typed in of length greater than 0
    65 00001042 803D68F1FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    66 00001049 74BA                <1>     je .inputMain2
    67                              <1>     ;Copy over the input text
    68 0000104B 488D355EF1FFFF      <1>     lea rsi, inBuffer   ;This buffer is used for all input so copy command line
    69                              <1> .copyPoint: ;Copy over commandline here
    70 00001052 488D3DD9F1FFFF      <1>     lea rdi, cpyBuffer
    71 00001059 B982000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    72 0000105E F3A4                <1>     rep movsb
    73 00001060 E85C000000          <1>     call makeCmdBuffer   ;Preprocess the redir, make cmd buffer
    74                              <1> .pipeLoop:
    75 00001065 4C8B05A3EFFFFF      <1>     mov r8, qword [pspPtr]  ;Point back to home segment
    76 0000106C E8AA000000          <1>     call makeCmdString      ;Now make the command string in the psp
    77 00001071 E86D060000          <1>     call setupRedirandPipes ;Setup pipes and redir if appropriate
    78 00001076 E8F9000000          <1>     call analyseCmdline
    79 0000107B E8A0010000          <1>     call doCommandLine  ;This analyses and does the command line!
    80                              <1> .pipeProceed:
    81 00001080 E868040000          <1>     call advanceRedir
    82 00001085 F60511F0FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    83 0000108C 0F846EFFFFFF        <1>     jz .inputMain
    84                              <1>     ;Now we pull the commandline forwards. 
    85 00001092 E884000000          <1>     call makeCmdString  ;Get offset into cmdBuffer + 2 of pipe in rsi
    86 00001097 0F8463FFFFFF        <1>     jz .inputMain       ;We are pointing to a CR, no pipe!
    87 0000109D 488D3D12F2FFFF      <1>     lea rdi, cmdBuffer + 2
    88 000010A4 4889F1              <1>     mov rcx, rsi
    89 000010A7 4829F9              <1>     sub rcx, rdi    ;Get the number of chars to erase from cmd line 
    90 000010AA 280D05F2FFFF        <1>     sub byte [cmdBuffer + 1], cl    ;And rease from the count
    91 000010B0 8A0DFFF1FFFF        <1>     mov cl, byte [cmdBuffer + 1]
    92 000010B6 FFC1                <1>     inc ecx     ;One more for the terminating char
    93 000010B8 F3A4                <1>     rep movsb   ;Move the chars over    
    94 000010BA E8BC250000          <1>     call clearCommandState  ;Else, clear the command state and start again
    95 000010BF EBA4                <1>     jmp short .pipeLoop
    96                              <1> 
    97                              <1> makeCmdBuffer:
    98                              <1> ;Makes the command buffer, escapes quotes and peels off any redirs from the
    99                              <1> ; copy buffer. Called only once in a cycle.
   100                              <1> ;Throughout: CL has char count, CH has quote count
   101 000010C1 488D356CF1FFFF      <1>     lea rsi, [cpyBuffer + 2]    ;Goto copy buffer + 2
   102 000010C8 31C9                <1>     xor ecx, ecx
   103 000010CA 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   104                              <1> .countQuotes:
   105 000010CD AC                  <1>     lodsb
   106 000010CE 3C22                <1>     cmp al, '"'
   107 000010D0 7507                <1>     jne .notQuoteToCount
   108 000010D2 FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   109 000010D4 E9F4FFFFFF          <1>     jmp .countQuotes
   110                              <1> .notQuoteToCount:
   111 000010D9 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   112 000010DB 75F0                <1>     jne .countQuotes
   113 000010DD 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   114 000010E0 488D3DCFF1FFFF      <1>     lea rdi, cmdBuffer + 2   ;We build the cmdBuffer
   115                              <1> .getChar:
   116 000010E7 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   117 000010E8 3C22                <1>     cmp al, '"'     ;Is char a quote?
   118 000010EA 750E                <1>     jne .notQuote
   119 000010EC FECD                <1>     dec ch          ;We have a quote, now decrement
   120 000010EE 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   121                              <1> .searchForClosingQuote:
   122                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   123 000010F0 AA                  <1>     stosb   ;Store char and inc rdi
   124 000010F1 FEC1                <1>     inc cl
   125 000010F3 AC                  <1>     lodsb   ;Get next char
   126 000010F4 3C22                <1>     cmp al, '"'
   127 000010F6 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   128 000010F8 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   129                              <1> .notQuote:
   130 000010FA E888050000          <1>     call peelRedir      ;Intervene redir if needed
   131 000010FF 7204                <1>     jc .pipeHandle      ;Store the pipe if pipe
   132 00001101 7508                <1>     jnz .notRedir       ;Store the char as normal if not a redir
   133 00001103 EBE2                <1>     jmp short .getChar  ;Get the next char if a < or > redir
   134                              <1> .pipeHandle:
   135                              <1>     ;Store the pipe char, al has the char. IF ZF=ZE, we error
   136 00001105 0F84A9020000        <1>     jz pipeFailure ;We had double pipe symbol, reset!
   137                              <1> .notRedir:
   138 0000110B AA                  <1>     stosb       ;Store char and advance rdi
   139 0000110C 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   140 0000110E 7404                <1>     je .exit
   141 00001110 FEC1                <1>     inc cl      ;Increment char count
   142 00001112 EBD3                <1>     jmp short .getChar    ;If not, get next char
   143                              <1> .exit:
   144 00001114 880D9BF1FFFF        <1>     mov byte [cmdBuffer + 1], cl  ;Store the count of chars
   145                              <1>     return
    13                              <2> %%_ret:
    14 0000111A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> 
   147                              <1> makeCmdString:
   148                              <1> ;Makes the command string from the cmdBuffer. This only copies to the first 
   149                              <1> ; pipe or the CR. Points at the CR or to the first char past the pipe.
   150                              <1> ; Copies into the psp.
   151                              <1> ;If we return ZF=ZE, then we are at end of pipe buffer. Else, setup pipe!
   152 0000111B 488D3594F1FFFF      <1>     lea rsi, [cmdBuffer + 2]    ;Goto pipe buffer + 2
   153 00001122 31C9                <1>     xor ecx, ecx
   154 00001124 4889F7              <1>     mov rdi, rsi    ;Save the pointer
   155                              <1> .countQuotes:
   156 00001127 AC                  <1>     lodsb
   157 00001128 3C22                <1>     cmp al, '"'
   158 0000112A 7507                <1>     jne .notQuoteToCount
   159 0000112C FEC5                <1>     inc ch      ;Keep count of number of quotes in ch
   160 0000112E E9F4FFFFFF          <1>     jmp .countQuotes
   161                              <1> .notQuoteToCount:
   162 00001133 3C0D                <1>     cmp al, CR  ;Keep searching for quotes until CR hit
   163 00001135 75F0                <1>     jne .countQuotes
   164 00001137 4889FE              <1>     mov rsi, rdi    ;Reset to the start of the buffer
   165 0000113A 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;We build the single command
   166                              <1> .getChar:
   167 00001141 AC                  <1>     lodsb           ;Get char in buffer, advance rsi
   168 00001142 3C22                <1>     cmp al, '"'     ;Is char a quote?
   169 00001144 750E                <1>     jne .notQuote
   170 00001146 FECD                <1>     dec ch          ;We have a quote, now decrement
   171 00001148 740A                <1>     jz .notQuote    ;If we have an odd count of quotes, ignore the last one!
   172                              <1> .searchForClosingQuote:
   173                              <1>     ;Char was quote, now directly store all chars until we hit closing char
   174 0000114A AA                  <1>     stosb   ;Store char and inc rdi
   175 0000114B FEC1                <1>     inc cl
   176 0000114D AC                  <1>     lodsb   ;Get next char
   177 0000114E 3C22                <1>     cmp al, '"'
   178 00001150 75F8                <1>     jne .searchForClosingQuote ;If not, keep searching directly
   179 00001152 FECD                <1>     dec ch  ;We hit another quote char, so dec the count
   180                              <1> .notQuote:
   181 00001154 3C7C                <1>     cmp al, "|"
   182 00001156 7505                <1>     jne .notPipe        ;Store the char as normal if not a pipe
   183 00001158 B00D                <1>     mov al, CR          ;Store the pipe char
   184 0000115A 48FFC6              <1>     inc rsi             ;Ensure we remain one char past the pipe
   185                              <1> .notPipe:
   186 0000115D AA                  <1>     stosb       ;Store char and advance rdi
   187 0000115E 3C0D                <1>     cmp al, CR  ;Was this char a CR?
   188 00001160 7404                <1>     je .exit
   189 00001162 FEC1                <1>     inc cl      ;Increment char count
   190 00001164 EBDB                <1>     jmp short .getChar    ;If not, get next char
   191                              <1> .exit:
   192 00001166 48FFCE              <1>     dec rsi ;Point to char past pipe or to the CR itself
   193 00001169 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count of chars
   194 00001170 803E0D              <1>     cmp byte [rsi], CR  
   195                              <1>     return
    13                              <2> %%_ret:
    14 00001173 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   196                              <1> 
   197                              <1> analyseCmdline:
   198                              <1> ;Flags first two arguments if they exist, copies the command into its buffer
   199                              <1> ; processes the command name into the FCB.  
   200 00001174 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Go to the command line in the psp
   201 0000117B 4889F3              <1>     mov rbx, rsi            ;Save this ptr in rbx
   202 0000117E E8D7240000          <1>     call skipDelimiters     ;Skip any preceeding separators
   203 00001183 488D3DACF1FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   204 0000118A E8E6250000          <1>     call cpDelimPathToBufz  ;Moves rsi to the first char past the delim char
   205 0000118F 48FFCE              <1>     dec rsi ;Point it back to the delim char
   206 00001192 E880000000          <1>     call .skipAndCheckCR
   207 00001197 7439                <1>     je .setupCmdVars
   208 00001199 C60508EFFFFFFF      <1>     mov byte [arg1Flg], -1  ;Set that we are 
   209 000011A0 4889F0              <1>     mov rax, rsi
   210 000011A3 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   211 000011A6 8805FDEEFFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   212                              <1> .skipArg:
   213 000011AC AC                  <1>     lodsb   ;Now we advance the pointer to the second argument or CR
   214 000011AD 3C0D                <1>     cmp al, CR
   215 000011AF 7421                <1>     je .setupCmdVars
   216 000011B1 E8B2240000          <1>     call isALdelimiter
   217 000011B6 75F4                <1>     jne .skipArg    ;If not a delimiter, get next char now
   218 000011B8 E85A000000          <1>     call .skipAndCheckCR    ;Now skip all the delimiters
   219 000011BD 7413                <1>     je .setupCmdVars            ;If ZF set, this we encountered a CR
   220 000011BF C605E5EEFFFFFF      <1>     mov byte [arg2Flg], -1  ;If it is not CR, it is a second argument!
   221 000011C6 4889F0              <1>     mov rax, rsi            
   222 000011C9 4829D8              <1>     sub rax, rbx            ;rbx points to the start of the buffer
   223 000011CC 8805DAEEFFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   224                              <1> .setupCmdVars:
   225                              <1> ;Before returning, we copy the command name to cmdName 
   226 000011D2 C605ACF1FFFF00      <1>     mov byte [cmdName], 0   ;Initialise this field to indicate no cmd
   227 000011D9 488D3D56F1FFFF      <1>     lea rdi, cmdPathSpec
   228 000011E0 E816250000          <1>     call findLastPathComponant  ;Point rdi to last path componant
   229 000011E5 E854240000          <1>     call strlen ;Get the length of the final path componant
   230 000011EA 81F90C000000        <1>     cmp ecx, 11 + 1 ;Extra char for the ext separator (dot)
   231 000011F0 771D                <1>     ja .exitBad     ;Return error
   232 000011F2 4889FE              <1>     mov rsi, rdi
   233 000011F5 488D3D89F1FFFF      <1>     lea rdi, cmdName
   234 000011FC FFC9                <1>     dec ecx ;Minus the terminating null
   235 000011FE 880F                <1>     mov byte [rdi], cl ;Store the length here
   236 00001200 48FFC7              <1>     inc rdi ;Now goto next char in buffer
   237                              <1> .cpCmdName:
   238 00001203 AC                  <1>     lodsb
   239 00001204 E83F240000          <1>     call ucChar ;Uppercase the char
   240 00001209 AA                  <1>     stosb
   241 0000120A FFC9                <1>     dec ecx
   242 0000120C 75F5                <1>     jnz .cpCmdName
   243                              <1>     return
    13                              <2> %%_ret:
    14 0000120E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> .exitBad:
   245 0000120F C6056FF1FFFFFF      <1>     mov byte [cmdName], -1 ;Store -1 to indicate error
   246                              <1>     return
    13                              <2> %%_ret:
    14 00001216 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   247                              <1> .skipAndCheckCR:
   248                              <1> ;Skips all chars, rsi points to the separator. If it is a CR, set ZF=ZE
   249 00001217 E83E240000          <1>     call skipDelimiters ;Go to the next char in the input line
   250 0000121C 803E0D              <1>     cmp byte [rsi], CR  ;If it is not a CR, it is an argument
   251                              <1>     return
    13                              <2> %%_ret:
    14 0000121F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> doCommandLine:
   254 00001220 488D350FF1FFFF      <1>     lea rsi, cmdPathSpec
   255                              <1>     ;The following check accounts for the end of a piped command
   256 00001227 803D57F1FFFF00      <1>     cmp byte [cmdName], 0  ;If the cmd name length is 0, fail!
   257                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000122E 74(1F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   258 00001230 803D4EF1FFFFFF      <1>     cmp byte [cmdName], -1  ;Error condition, command name too long!
   259 00001237 0F8449070000        <1>     je badCmdError
   260 0000123D 488D3D11EFFFFF      <1>     lea rdi, cmdFcb
   261 00001244 B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
   262 00001249 CD21                <1>     int 21h
   263 0000124B 0FB71DE4F0FFFF      <1>     movzx ebx, word [cmdPathSpec]    ;Get the drive specifier
   264 00001252 80FF3A              <1>     cmp bh, ":"
   265 00001255 752D                <1>     jne .noDriveSpecified
   266 00001257 86D8                <1>     xchg bl, al     ;Store drive status in bl, get letter in al
   267 00001259 E8EA230000          <1>     call ucChar     ;Uppercase al
   268 0000125E 2C41                <1>     sub al, "A"     ;And make it a 0 based drive letter
   269 00001260 80FBFF              <1>     cmp bl, -1      ;Int 21h returns AL = -1 if bad drive specified
   270 00001263 7412                <1>     je .badDrive
   271                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   272 00001265 803D19F1FFFF02      <1>     cmp byte [cmdName], 2
   273 0000126C 7516                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   274 0000126E 88C2                <1>     mov dl, al  ;Setdrive wants the number in dl
   275 00001270 E89F230000          <1>     call setDrive
   276                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001275 74(1F)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   277                              <1> .badDrive:
   278 00001277 488D1536F8FFFF      <1>     lea rdx, badDrv
   279 0000127E B409                <1>     mov ah, 09h
   280 00001280 CD21                <1>     int 21h
   281 00001282 F9                  <1>     stc
   282                              <1>     return
    13                              <2> %%_ret:
    14 00001283 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> .noDriveSpecified:
   284                              <1> ;Now we set the two FCB's in the command line
   285 00001284 F6051DEEFFFFFF      <1>     test byte [arg1Flg], -1
   286 0000128B 744D                <1>     jz .fcbArgsDone
   287 0000128D 0FB60515EEFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   288 00001294 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   289 0000129B 4801C6              <1>     add rsi, rax    ;Point to first argument
   290 0000129E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   291 000012A2 B801290000          <1>     mov eax, 2901h
   292 000012A7 CD21                <1>     int 21h
   293 000012A9 8805FBEDFFFF        <1>     mov byte [arg1FCBret], al
   294 000012AF F605F5EDFFFFFF      <1>     test byte [arg2Flg], -1
   295 000012B6 7422                <1>     jz .fcbArgsDone
   296 000012B8 0FB605EDEDFFFF      <1>     movzx eax, byte [arg2Off]
   297 000012BF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   298 000012C6 4801C6              <1>     add rsi, rax    ;Point to first argument
   299 000012C9 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   300 000012CD B801290000          <1>     mov eax, 2901h
   301 000012D2 CD21                <1>     int 21h
   302 000012D4 8805D3EDFFFF        <1>     mov byte [arg2FCBret], al
   303                              <1> .fcbArgsDone:
   304 000012DA 488D1DD3EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   305 000012E1 488D359DF0FFFF      <1>     lea rsi, cmdName        ;Point to command name with len prefix 
   306 000012E8 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   307 000012ED BAFFFF0000          <1>     mov edx, 0FFFFh
   308 000012F2 B5FF                <1>     mov ch, -1
   309 000012F4 CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   310 000012F6 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   311 000012FB BAFFFF0000          <1>     mov edx, 0FFFFh
   312 00001300 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   313 00001302 CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   314                              <1>             ;        al = 0  if the command should be executed as usual
   315 00001304 84C0                <1>     test al, al
   316 00001306 7426                <1>     jz .executeInternal
   317                              <1>     ;Here we execute externally and return to the prompt
   318                              <1>     ; as if it was an internal execution
   319 00001308 488D1DA5EFFFFF      <1>     lea rbx, cmdBuffer       ;Take your buffer, ergh
   320 0000130F 488D356FF0FFFF      <1>     lea rsi, cmdName        
   321 00001316 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   322 0000131B BAFFFF0000          <1>     mov edx, 0FFFFh
   323 00001320 B5FF                <1>     mov ch, -1
   324 00001322 CD2F                <1>     int 2Fh
   325 00001324 803D5AF0FFFF00      <1>     cmp byte [cmdName], 0 ;If this is non-zero, we restart the process
   326                              <1>     retz    ;Return as normal if this is zero
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 0000132B 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000132D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   327                              <1>     ;Else, we restart the command from scratch.
   328                              <1> .executeInternal:
   329                              <1> ;Now we check if the cmdName is equal to the length of the cmdPathSpec.
   330                              <1> ;If not, then its immediately an external program!
   331 0000132E E819050000          <1>     call pullCommandline    ;Now pull the tail down
   332 00001333 488D3DFCEFFFFF      <1>     lea rdi, cmdPathSpec
   333 0000133A E8FF220000          <1>     call strlen ;Get the length of the input command
   334 0000133F FFC9                <1>     dec ecx     ;Minus 1 for terminating null
   335 00001341 380D3EF0FFFF        <1>     cmp byte [cmdName], cl  ;Is it equal to the name of the command?
   336 00001347 0F85F8190000        <1>     jne launchChild     ;If not, a path was specified, exit!
   337                              <1> ;Now we compare the name in the cmdName + 1 field to our commmand list
   338 0000134D 488D1DFEF4FFFF      <1>     lea rbx, functionTable
   339                              <1> .nextEntry:
   340 00001354 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   341 00001357 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   342 0000135A 0F84E5190000        <1>     je launchChild      ;If so, check externally now
   343 00001360 380D1FF0FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   344 00001366 7532                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   345                              <1>     ;Here they have the same length so lets see if the name is the same
   346 00001368 56                  <1>     push rsi
   347                              <1>     ;ecx has the length to compare
   348 00001369 51                  <1>     push rcx
   349 0000136A 488D7301            <1>     lea rsi, qword [rbx + 1]
   350 0000136E 488D3D11F0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   351 00001375 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   352 00001377 59                  <1>     pop rcx
   353 00001378 5E                  <1>     pop rsi
   354 00001379 751F                <1>     jne .gotoNextEntry
   355                              <1>     ;Here it was found both strings are equal
   356 0000137B 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   357 00001380 480FB71F            <1>     movzx rbx, word [rdi]
   358 00001384 488D3D75ECFFFF      <1>     lea rdi, startLbl
   359 0000138B 4801FB              <1>     add rbx, rdi
   360 0000138E FFD3                <1>     call rbx    ;Call this function...
   361                              <1>     retc    ;Always return with CF=CY on error. Error code set to -1
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001390 72(2D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   362 00001392 C60574ECFFFF00      <1>     mov byte [returnCode], 0 ;Set the retcode to 0 if ok!
   363                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001399 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   364                              <1> .gotoNextEntry:
   365 0000139A 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   366 000013A1 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   367 000013A4 EBAE                <1>     jmp short .nextEntry
   368                              <1> 
   369                              <1> redirFailure:
   370 000013A6 488D1548FBFFFF      <1>     lea rdx, redirErrMsg
   371 000013AD B913000000          <1>     mov ecx, redirErrMsgL
   372 000013B2 EB0C                <1>     jmp short redirPipeFailureCommon
   373                              <1> pipeFailure:
   374 000013B4 488D1523FBFFFF      <1>     lea rdx, pipeErrMsg
   375 000013BB B917000000          <1>     mov ecx, pipeErrMsgL
   376                              <1> redirPipeFailureCommon:
   377                              <1> ;This routine is called or jumped to if any problems happen during a pipe.
   378                              <1> ;This routine tries to close whatever handles are not -1 and delete
   379                              <1> ; pipe files if the pipe count is not 0.
   380                              <1> ;It resets all variables and jumps to reset the stack!
   381 000013C0 B800400000          <1>     mov eax, 4000h  ;Write handle
   382 000013C5 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   383 000013CA CD21                <1>     int 21h
   384 000013CC 0FB705D1ECFFFF      <1>     movzx eax, word [redirSTDIN]
   385 000013D3 0FB715C4ECFFFF      <1>     movzx edx, word [pipeSTDIN]
   386 000013DA 31DB                <1>     xor ebx, ebx    ;Select STDIN for closing
   387 000013DC E8D1000000          <1>     call .closeAndReplace
   388 000013E1 0FB705BEECFFFF      <1>     movzx eax, word [redirSTDOUT]
   389 000013E8 0FB715B1ECFFFF      <1>     movzx edx, word [pipeSTDOUT]
   390 000013EF FFC3                <1>     inc ebx         ;Select STDOUT for closing
   391 000013F1 E8BC000000          <1>     call .closeAndReplace
   392 000013F6 66C705A3ECFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   393 000013FF 0FB71D9EECFFFF      <1>     movzx ebx, word [redirSTDIN]
   394 00001406 E896000000          <1>     call .closeHandle
   395                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   396 0000140B 66C70590ECFFFFFFFF  <1>     mov word [redirSTDIN], -1
   397 00001414 0FB71D8BECFFFF      <1>     movzx ebx, word [redirSTDOUT]
   398 0000141B E881000000          <1>     call .closeHandle
   399 00001420 66C7057DECFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   400 00001429 0FB71D6EECFFFF      <1>     movzx ebx, word [pipeSTDIN]
   401 00001430 E86C000000          <1>     call .closeHandle
   402 00001435 66C70560ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   403 0000143E 0FB71D5BECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   404 00001445 E857000000          <1>     call .closeHandle
   405 0000144A 66C7054DECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   406 00001453 C60543ECFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   407 0000145A 488D15D0EFFFFF      <1>     lea rdx, qword [pipe1Filespec]
   408 00001461 803A00              <1>     cmp byte [rdx], 0
   409 00001464 7407                <1>     jz .checkOld
   410 00001466 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   411 0000146B CD21                <1>     int 21h
   412                              <1> .checkOld:
   413 0000146D 488D150CF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   414 00001474 803A00              <1>     cmp byte [rdx],0
   415 00001477 7407                <1>     jz .pipeNamesComplete
   416 00001479 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   417 0000147E CD21                <1>     int 21h
   418                              <1> .pipeNamesComplete:
   419 00001480 31C0                <1>     xor eax, eax
   420                              <1>     ;Invalidate the pointers and the paths too
   421 00001482 48890546F0FFFF      <1>     mov qword [newPipe], rax
   422 00001489 48890547F0FFFF      <1>     mov qword [oldPipe], rax
   423 00001490 89059BEFFFFF        <1>     mov dword [pipe1Filespec], eax
   424 00001496 8905E4EFFFFF        <1>     mov dword [pipe2Filespec], eax
   425                              <1> 
   426 0000149C E942FBFFFF          <1>     jmp commandMain ;Retake input from the command line
   427                              <1> .closeHandle:
   428 000014A1 81FBFFFFFFFF        <1>     cmp ebx, -1
   429                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014A7 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014A9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   430 000014AA B8003E0000          <1>     mov eax, 3E00h
   431 000014AF CD21                <1>     int 21h
   432                              <1>     return
    13                              <2> %%_ret:
    14 000014B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   433                              <1> .closeAndReplace:
   434                              <1> ;Input: ax = one possible handle, dx = second possible handle
   435                              <1> ;       bx = handle to close and copy ax/dx into
   436                              <1> ;Output: Handle intervened on. bx preserved
   437 000014B2 C1E010              <1>     shl eax, 10h    ;Shift low word into upper word
   438 000014B5 09D0                <1>     or eax, edx     ;Form packed
   439 000014B7 3DFFFFFFFF          <1>     cmp eax, -1     ;If both -1, skip close!
   440                              <1>     rete            ;Needed to ensure we dont fail silently
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014BC 74(B1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   441 000014BE E8DEFFFFFF          <1>     call .closeHandle
   442 000014C3 663DFFFF            <1>     cmp ax, -1      
   443 000014C7 660F44C2            <1>     cmove ax, dx    ;If ax is -1, move dx into ax
   444 000014CB 53                  <1>     push rbx
   445 000014CC 0FB7D8              <1>     movzx ebx, ax   ;Zero upper word of eax
   446 000014CF B800450000          <1>     mov eax, 4500h  ;DUP this into the space formed by the close
   447 000014D4 CD21                <1>     int 21h
   448 000014D6 5B                  <1>     pop rbx
   449                              <1>     retnc   ;If this succeeds, return
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000014D7 73(B1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   450                              <1>     ;Else we now try to force con to open!
   451 000014D9 E8C3FFFFFF          <1>     call .closeHandle   ;Try close bx again!
   452 000014DE B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   453 000014E3 488D1558FAFFFF      <1>     lea rdx, conName
   454 000014EA CD21                <1>     int 21h
   455                              <1>     return
    13                              <2> %%_ret:
    14 000014EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> advanceRedir:
   458                              <1> ;Cleans up the redir stuff after we are done. Advances the pipe.
   459                              <1> ;Close stdin redir then stdout redir. 
   460 000014ED F605AEEBFFFFFF      <1>     test byte [redirIn], -1     ;If the flag is set proceed.
   461 000014F4 0F8585000000        <1>     jnz .redirIn
   462 000014FA F6059CEBFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on?
   463 00001501 0F84B4000000        <1>     jz .redirOut                ;If not, check redir out
   464 00001507 0FBF0590EBFFFF      <1>     movsx eax, word [pipeSTDIN] ;Do we have an incoming pipe to clean?
   465 0000150E 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, it must be an stdout pipe.
   466 00001513 0F84EB000000        <1>     je .pipeOut              
   467                              <1> ;Here we clean pipeSTDIN. Close the handle first then delete the file.
   468 00001519 0FB71D7EEBFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   469 00001520 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   470 00001522 B800460000          <1>     mov eax, 4600h
   471 00001527 CD21                <1>     int 21h
   472 00001529 0F8285FEFFFF        <1>     jc pipeFailure
   473 0000152F B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   474 00001534 CD21                <1>     int 21h
   475 00001536 0F8278FEFFFF        <1>     jc pipeFailure
   476 0000153C 488B1594EFFFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   477 00001543 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   478 00001548 CD21                <1>     int 21h
   479 0000154A 0F8264FEFFFF        <1>     jc pipeFailure
   480 00001550 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   481 00001553 66C70542EBFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   482                              <1>     ;Now we check the out pipe. If it is on, jump to it!
   483                              <1>     ;Else, check if the redir out is on. If it is, jump to it. 
   484                              <1>     ;Else exit!
   485 0000155C 0FBF053DEBFFFF      <1>     movsx eax, word [pipeSTDOUT]
   486 00001563 3DFFFFFFFF          <1>     cmp eax, -1
   487 00001568 0F8596000000        <1>     jne .pipeOut                ;If this is non-empty, go for it!
   488 0000156E C60528EBFFFF00      <1>     mov byte [pipeFlag], 0      ;Turn off the pipe now!
   489 00001575 F60527EBFFFFFF      <1>     test byte [redirOut], -1    ;Do we have a redir out?
   490 0000157C 753D                <1>     jnz .redirOut               ;Go for it if so!
   491                              <1>     return
    13                              <2> %%_ret:
    14 0000157E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> .redirIn:
   493                              <1> ;Here we clean redirIn
   494 0000157F 0FB71D1EEBFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   495 00001586 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   496 00001588 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   497 0000158D CD21                <1>     int 21h
   498 0000158F 0F8211FEFFFF        <1>     jc redirFailure
   499 00001595 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   500 0000159A CD21                <1>     int 21h
   501 0000159C 0F8204FEFFFF        <1>     jc redirFailure
   502 000015A2 66C705F9EAFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   503 000015AB C605F0EAFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   504 000015B2 F605E4EAFFFFFF      <1>     test byte [pipeFlag], -1    ;Is the pipe on? Check pipe out!
   505 000015B9 7549                <1>     jnz .pipeOut
   506                              <1> .redirOut:
   507 000015BB F605E1EAFFFFFF      <1>     test byte [redirOut], -1    ;If no redirOut, exit!
   508                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000015C2 74(7E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   509                              <1>     ;If it is set, but the pipe is also set, the pipe takes presedence
   510 000015C4 F605D2EAFFFFFF      <1>     test byte [pipeFlag], -1
   511 000015CB 7537                <1>     jnz short .pipeOut
   512 000015CD 0FB71DD2EAFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   513 000015D4 B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   514 000015D9 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   515 000015DE CD21                <1>     int 21h
   516 000015E0 0F82C0FDFFFF        <1>     jc redirFailure
   517 000015E6 B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   518 000015EB CD21                <1>     int 21h
   519 000015ED 0F82B3FDFFFF        <1>     jc redirFailure
   520 000015F3 66C705AAEAFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   521 000015FC C605A0EAFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   522                              <1>     return
    13                              <2> %%_ret:
    14 00001603 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> .pipeOut:
   524                              <1> ;Duplicate STDIN to save across pipe
   525 00001604 0FBF0595EAFFFF      <1>     movsx eax, word [pipeSTDOUT] ;Do we have an outgoing pipe to clean?
   526 0000160B 3DFFFFFFFF          <1>     cmp eax, -1   ;If the handle is -1, no
   527                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001610 74(03)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528 00001612 B800450000          <1>     mov eax, 4500h
   529 00001617 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   530 00001619 CD21                <1>     int 21h
   531 0000161B 0F8293FDFFFF        <1>     jc pipeFailure
   532 00001621 66890576EAFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   533                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   534 00001628 B800460000          <1>     mov eax, 4600h
   535 0000162D 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   536 0000162F FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   537 00001631 CD21                <1>     int 21h
   538 00001633 0F827BFDFFFF        <1>     jc pipeFailure
   539                              <1> ;Now return the original stdout to stdout
   540 00001639 89D9                <1>     mov ecx, ebx
   541 0000163B 0FB71D5EEAFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   542 00001642 B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   543 00001647 CD21                <1>     int 21h
   544 00001649 0F8265FDFFFF        <1>     jc pipeFailure
   545                              <1> ;Now close the DUP'ed STDOUT
   546 0000164F B8003E0000          <1>     mov eax, 3E00h
   547 00001654 CD21                <1>     int 21h
   548 00001656 0F8258FDFFFF        <1>     jc pipeFailure
   549                              <1> ;Finally unwind STDIN to the beginning of the file
   550 0000165C B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   551 00001661 31DB                <1>     xor ebx, ebx    ;STDIN handle
   552 00001663 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   553 00001665 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   554 00001667 CD21                <1>     int 21h
   555 00001669 0F8245FDFFFF        <1>     jc pipeFailure  ;This should never happen
   556 0000166F 488B1559EEFFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   557 00001676 4889155AEEFFFF      <1>     mov qword [oldPipe], rdx
   558 0000167D 66C7051AEAFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   559                              <1>     return
    13                              <2> %%_ret:
    14 00001686 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> 
   562                              <1> peelRedir:
   563                              <1> ;Checks and sets up redir as appropriate
   564                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   565                              <1> ;       rsi points to the first char after the char in al in cpyBuffer
   566                              <1> ;Output: ZF=NZ => No redir
   567                              <1> ;        ZF=ZY => Redir
   568                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   569                              <1> ;CF=CY if pipe set. If ZF=ZE then double pipe, error!
   570 00001687 51                  <1>     push rcx
   571 00001688 57                  <1>     push rdi
   572 00001689 3C3C                <1>     cmp al, "<"
   573 0000168B 740C                <1>     je .inputRedir
   574 0000168D 3C3E                <1>     cmp al, ">"
   575 0000168F 7427                <1>     je .outputRedir
   576 00001691 3C7C                <1>     cmp al, "|"
   577 00001693 7441                <1>     je .pipeSetup
   578 00001695 F8                  <1>     clc
   579                              <1> .redirExit:
   580 00001696 5F                  <1>     pop rdi
   581 00001697 59                  <1>     pop rcx
   582                              <1>     return
    13                              <2> %%_ret:
    14 00001698 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   583                              <1> .inputRedir:
   584 00001699 C60502EAFFFFFF      <1>     mov byte [redirIn], -1  ;Set the flag, redir in active
   585 000016A0 488D3DECECFFFF      <1>     lea rdi, rdrInFilespec
   586                              <1> .redirCommon:
   587 000016A7 E8AE1F0000          <1>     call skipDelimiters ;Skip spaces between < > or >> and the filespec
   588 000016AC E8C4200000          <1>     call cpDelimPathToBufz
   589 000016B1 48FFCE              <1>     dec rsi ;Point rsi back to the delimiter char
   590 000016B4 30C0                <1>     xor al, al  ;Clear the ZF flag
   591 000016B6 EBDE                <1>     jmp short .redirExit
   592                              <1> .outputRedir:
   593 000016B8 C605E4E9FFFF01      <1>     mov byte [redirOut], 1  ;Set this as the flag
   594 000016BF 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   595 000016C2 7509                <1>     jne .notDouble
   596 000016C4 FE05D9E9FFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   597 000016CA 48FFC6              <1>     inc rsi ;Go past it too
   598                              <1> .notDouble:
   599 000016CD 488D3D0EEDFFFF      <1>     lea rdi, rdrOutFilespec
   600 000016D4 EBD1                <1>     jmp short .redirCommon
   601                              <1> .pipeSetup:
   602 000016D6 56                  <1>     push rsi    ;Save rsi pointing to char past |
   603 000016D7 E87E1F0000          <1>     call skipDelimiters ;Check if this is a double ||
   604 000016DC 803E7C              <1>     cmp byte [rsi], "|" 
   605 000016DF 5E                  <1>     pop rsi
   606 000016E0 F9                  <1>     stc
   607 000016E1 EBB3                <1>     jmp short .redirExit
   608                              <1> 
   609                              <1> setupRedirandPipes:
   610                              <1> ;We only need to setup STDOUT redirection if the pipe flag is set.
   611                              <1> ;Input: ZF=NZ => Set up pipes. ZF=ZE => just redir
   612 000016E3 0F8484000000        <1>     jz .redirIn
   613 000016E9 488D1541EDFFFF      <1>     lea rdx, pipe1Filespec
   614 000016F0 803A00              <1>     cmp byte [rdx], 0
   615 000016F3 7410                <1>     jz .pathFound
   616 000016F5 488D1584EDFFFF      <1>     lea rdx, pipe2Filespec
   617 000016FC 803A00              <1>     cmp byte [rdx], 0
   618 000016FF 0F85AFFCFFFF        <1>     jnz pipeFailure
   619                              <1> .pathFound:
   620 00001705 488915C3EDFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   621 0000170C B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   622 00001711 BB01000000          <1>     mov ebx, 1
   623 00001716 CD21                <1>     int 21h
   624 00001718 0F8296FCFFFF        <1>     jc pipeFailure
   625 0000171E 6689057BE9FFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   626 00001725 E8F61E0000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   627 0000172A 0441                <1>     add al, "A"
   628 0000172C BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   629 00001731 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   630 00001733 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   631 00001735 31C9                <1>     xor ecx, ecx      ;Hidden attributes
   632 00001737 B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   633 0000173C CD21                <1>     int 21h
   634 0000173E 0F8270FCFFFF        <1>     jc pipeFailure
   635                              <1>     ;AX has the handle for this file now, this will become STDOUT
   636                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   637 00001744 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   638 00001747 B901000000          <1>     mov ecx, 1
   639 0000174C B800460000          <1>     mov eax, 4600h
   640 00001751 CD21                <1>     int 21h
   641 00001753 0F825BFCFFFF        <1>     jc pipeFailure
   642 00001759 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   643 0000175E CD21                <1>     int 21h
   644 00001760 0F824EFCFFFF        <1>     jc pipeFailure
   645 00001766 C60530E9FFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   646                              <1> .redirIn:
   647                              <1> ;Now check if any other redir needs to be setup
   648                              <1> ;Checks and sets up redir as appropriate.
   649                              <1>     ;Setup the redir here for STDIN
   650 0000176D F6052EE9FFFFFF      <1>     test byte [redirIn], -1  ;Is it set
   651 00001774 7449                <1>     jz .redirOut
   652 00001776 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   653 00001778 B800450000          <1>     mov eax, 4500h
   654 0000177D CD21                <1>     int 21h
   655 0000177F 0F8221FCFFFF        <1>     jc redirFailure
   656 00001785 66890518E9FFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   657 0000178C 488D1500ECFFFF      <1>     lea rdx, rdrInFilespec
   658 00001793 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   659 00001798 CD21                <1>     int 21h
   660 0000179A 0F8206FCFFFF        <1>     jc redirFailure
   661 000017A0 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   662 000017A2 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   663 000017A5 B800460000          <1>     mov eax, 4600h
   664 000017AA CD21                <1>     int 21h
   665 000017AC 0F82F4FBFFFF        <1>     jc redirFailure
   666 000017B2 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   667 000017B7 CD21                <1>     int 21h
   668 000017B9 0F82E7FBFFFF        <1>     jc redirFailure
   669                              <1> .redirOut:
   670 000017BF F605DDE8FFFFFF      <1>     test byte [redirOut], -1    ;Is redir out on?
   671                              <1>     retz           
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000017C6 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000017C8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   672 000017C9 803DD0E8FFFFFF      <1>     cmp byte [pipeSTDOUT], -1   ;If pipe out is active, pause redirOut
   673                              <1>     retne             ;Exit if it is
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000017D0 75(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   674                              <1>     ;Else setup the redir here for STDOUT
   675 000017D2 BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   676 000017D7 B800450000          <1>     mov eax, 4500h
   677 000017DC CD21                <1>     int 21h
   678 000017DE 0F82C2FBFFFF        <1>     jc redirFailure
   679 000017E4 668905BBE8FFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   680 000017EB 488D15F0EBFFFF      <1>     lea rdx, rdrOutFilespec
   681 000017F2 B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   682 000017F7 CD21                <1>     int 21h
   683 000017F9 730F                <1>     jnc .fileExists
   684 000017FB B8003C0000          <1>     mov eax, 3C00h
   685 00001800 31C9                <1>     xor ecx, ecx  ;Make the file with no attributes
   686 00001802 CD21                <1>     int 21h
   687 00001804 0F829CFBFFFF        <1>     jc redirFailure
   688                              <1> .fileExists:
   689 0000180A B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   690 0000180F 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   691 00001812 B800460000          <1>     mov eax, 4600h  ;DUP2
   692 00001817 CD21                <1>     int 21h
   693 00001819 0F8287FBFFFF        <1>     jc redirFailure
   694 0000181F B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   695 00001824 CD21                <1>     int 21h
   696 00001826 0F827AFBFFFF        <1>     jc redirFailure
   697 0000182C 803D70E8FFFF01      <1>     cmp byte [redirOut], 1
   698                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001833 74(C8)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   699                              <1>     ;Here we move the file pointer to the end of the file
   700 00001835 31D2                <1>     xor edx, edx    ;Low order 32 bits
   701 00001837 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   702 00001839 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   703 0000183E B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   704 00001843 CD21                <1>     int 21h
   705 00001845 0F825BFBFFFF        <1>     jc redirFailure
   706                              <1>     return
    13                              <2> %%_ret:
    14 0000184B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> 
   708                              <1> 
   709                              <1> pullCommandline:
   710                              <1> ;This command pulls the command tail down, removing the whole launch command
   711 0000184C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;rbx points to the de-redired command line 
   712                              <1> ;Skip leading separators
   713                              <1> .pctSkipLeading:
   714 00001853 AC                  <1>     lodsb   ;Get first char
   715 00001854 E80F1E0000          <1>     call isALdelimiter
   716 00001859 74F8                <1>     je .pctSkipLeading
   717 0000185B 48FFCE              <1>     dec rsi
   718                              <1>     ;rsi points to the start of the command
   719 0000185E 488D3DD1EAFFFF      <1>     lea rdi, cmdPathSpec
   720 00001865 E8D41D0000          <1>     call strlen ;Get the length of the command
   721 0000186A FFC9                <1>     dec ecx ;Minus the terminating null
   722 0000186C 4801CE              <1>     add rsi, rcx    ;Now move rsi to the first char past the command name
   723 0000186F 280D34E8FFFF        <1>     sub byte [arg1Off], cl  ;Reduce these counts by the same amount!
   724 00001875 280D31E8FFFF        <1>     sub byte [arg2Off], cl
   725 0000187B 31C9                <1>     xor ecx, ecx    ;Use as a char counter
   726 0000187D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]    ;First byte is reserved for count
   727                              <1> .pctPullChars:
   728 00001884 AC                  <1>     lodsb
   729 00001885 AA                  <1>     stosb
   730 00001886 3C0D                <1>     cmp al, CR  ;Was this a terminating CR?
   731 00001888 7404                <1>     je .pctExit
   732 0000188A FFC1                <1>     inc ecx     ;Increment count
   733 0000188C EBF6                <1>     jmp short .pctPullChars 
   734                              <1> .pctExit:
   735 0000188E 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Save the count
   736                              <1>     return
    13                              <2> %%_ret:
    14 00001895 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> batNextLine:
   739                              <1> ;Not yet implemented, if this is set to 1, print error and reset!
   740 00001896 488D1513000000      <1>     lea rdx, .l1
   741 0000189D B800090000          <1>     mov eax, 0900h
   742 000018A2 CD21                <1>     int 21h
   743 000018A4 C60503E8FFFF00      <1>     mov byte [batFlag], 0
   744 000018AB E933F7FFFF          <1>     jmp commandMain
   745 000018B0 4261746368206D6F64- <1> .l1 db "Batch mode... wait, what? How did you do that?",CR,LF,"$"
   745 000018B9 652E2E2E2077616974- <1>
   745 000018C2 2C20776861743F2048- <1>
   745 000018CB 6F772064696420796F- <1>
   745 000018D4 7520646F2074686174- <1>
   745 000018DD 3F0D0A24            <1>
   746                              <1> 
   747                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   748                              <1> ;Input: rsi points to the count byte of a command line
   749 000018E1 4150                <1>     push r8
   750 000018E3 4151                <1>     push r9
   751 000018E5 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   752 000018E7 CD21                <1>     int 21h
   753 000018E9 52                  <1>     push rdx    ;Save on the stack
   754 000018EA 488D1D0FE6FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   755 000018F1 B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   756 000018F3 CD21                <1>     int 21h
   757 000018F5 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   758 000018F8 4989D9              <1>     mov r9, rbx
   759 000018FB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   760 00001902 B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   761 00001907 F348A5              <1>     rep movsq   ;Copy command line over
   762                              <1>     ;call doCommandLine
   763 0000190A 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   764 0000190B B450                <1>     mov ah, 50h ;Set Current PSP
   765 0000190D CD21                <1>     int 21h
   766 0000190F 4159                <1>     pop r9
   767 00001911 4158                <1>     pop r8
   768 00001913 48CF                <1>     iretq
    17                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> badSyntaxError:
     7 00001915 488D15ABF3FFFF      <1>     lea rdx, syntaxErr
     8 0000191C EB58                <1>     jmp short badCmn
     9                              <1> badEnvSpaceError:
    10 0000191E 488D15DDF0FFFF      <1>     lea rdx, noEnvSpace
    11 00001925 EB4F                <1>     jmp short badCmn
    12                              <1> badAccError:
    13 00001927 488D1545F3FFFF      <1>     lea rdx, accDenMsg
    14 0000192E EB46                <1>     jmp short badCmn
    15                              <1> noSelfCopyError:
    16 00001930 488D15FCF0FFFF      <1>     lea rdx, noSelfCopy
    17 00001937 EB3D                <1>     jmp short badCmn
    18                              <1> badParamError:
    19 00001939 488D15B1F1FFFF      <1>     lea rdx, badParm
    20 00001940 EB34                <1>     jmp short badCmn
    21                              <1> badDriveError:
    22 00001942 488D156BF1FFFF      <1>     lea rdx, badDrv
    23 00001949 EB2B                <1>     jmp short badCmn
    24                              <1> badArgError:
    25 0000194B 488D152EF4FFFF      <1>     lea rdx, badArgs
    26 00001952 EB22                <1>     jmp short badCmn
    27                              <1> badFileError:
    28 00001954 488D1509F4FFFF      <1>     lea rdx, badSpec
    29 0000195B EB19                <1>     jmp short badCmn
    30                              <1> badDupFnf:
    31                              <1> ;Hybrid error message
    32 0000195D 488D155CF0FFFF      <1>     lea rdx, dupName
    33 00001964 EB10                <1>     jmp short badCmn
    34                              <1> badFnf:
    35 00001966 488D156AF0FFFF      <1>     lea rdx, fnfMsg
    36 0000196D EB07                <1>     jmp short badCmn
    37                              <1> badDirError:
    38 0000196F 488D157CF2FFFF      <1>     lea rdx, badDir
    39                              <1> badCmn:
    40 00001976 C60590E6FFFFFF      <1>     mov byte [returnCode], -1    ;Return code defaults to -1 if error (for now!)
    41 0000197D B800090000          <1>     mov eax, 0900h
    42 00001982 CD21                <1>     int 21h
    43 00001984 F9                  <1>     stc ;Return with CY => Error occured
    44                              <1>     return  ;This will be made nuanced later, to agree with DOS behaviour
    13                              <2> %%_ret:
    14 00001985 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> badCmdError:
    46 00001986 488D1518F0FFFF      <1>     lea rdx, badCmd
    47 0000198D EBE7                <1>     jmp short badCmn
    48                              <1> dir:
    49                              <1> ;Don't allow for searching unmounted network drives... is this a limitation?
    50 0000198F C6054DECFFFF00      <1>     mov byte [dirFlags], 0    ;Clear DIR flags
    51 00001996 C60547ECFFFF00      <1>     mov byte [dirLineCtr], 0
    52 0000199D C60541ECFFFF00      <1>     mov byte [dirFileCtr], 0
    53 000019A4 C6053CECFFFF00      <1>     mov byte [dirSrchDir], 0
    54 000019AB 66C7052BEBFFFF0000  <1>     mov word [searchSpec], 0
    55 000019B4 488D3DAEECFFFF      <1>     lea rdi, dirSrchFCB ;Start also by initialising the search pattern
    56 000019BB C60700              <1>     mov byte [rdi + fcb.driveNum], 0    ;Default drive
    57 000019BE 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    57 000019C7 3F                  <1>
    58 000019C8 48894701            <1>     mov qword [rdi + fcb.filename], rax
    59 000019CC C747093F3F3F00      <1>     mov dword [rdi + fcb.fileext], "???"
    60                              <1>     ;Start by scanning for the switches
    61 000019D3 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]  ;Goto command line
    62 000019DA 4889F7              <1>     mov rdi, rsi    ;Use rsi as start of buffer counter
    63                              <1> .scanNew:
    64 000019DD E8781C0000          <1>     call skipDelimiters ;Set rsi pointing to a non delimiting char
    65 000019E2 AC                  <1>     lodsb   ;Get this char
    66 000019E3 3C0D                <1>     cmp al, CR
    67 000019E5 744D                <1>     je .scanDone
    68 000019E7 3A053DE6FFFF        <1>     cmp al, byte [switchChar]   ;Was this the switch char?
    69 000019ED 7524                <1>     jne .notSwitch
    70 000019EF AC                  <1>     lodsb   ;Get the next char
    71 000019F0 E8531C0000          <1>     call ucChar
    72 000019F5 3C57                <1>     cmp al, "W"
    73 000019F7 7509                <1>     jne .notWide
    74 000019F9 800DE3EBFFFF01      <1>     or byte [dirFlags], dirWideType ;Set the correct bit
    75 00001A00 EBDB                <1>     jmp short .scanNew
    76                              <1> .notWide:
    77 00001A02 3C50                <1>     cmp al, "P"
    78 00001A04 0F852FFFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    79 00001A0A 800DD2EBFFFF02      <1>     or byte [dirFlags], dirPageType ;Set the correct bit
    80 00001A11 EBCA                <1>     jmp short .scanNew
    81                              <1> .notSwitch:
    82 00001A13 F605C9EBFFFF04      <1>     test byte [dirFlags], dirFileType
    83 00001A1A 0F8519FFFFFF        <1>     jnz badParamError   ;If more than one path specified, error out
    84                              <1>     ;Not a switch, so must be a pathspec, copy over to searchSpec
    85 00001A20 48FFCE              <1>     dec rsi ;Point back to the char which was not a switchchar
    86 00001A23 E8A81D0000          <1>     call copyArgumentToSearchSpec   
    87 00001A28 48FFCE              <1>     dec rsi ;Point back to the terminator char
    88 00001A2B 800DB1EBFFFF04      <1>     or byte [dirFlags], dirFileType ;Now set path given bit
    89 00001A32 EBA9                <1>     jmp short .scanNew
    90                              <1> .scanDone:
    91 00001A34 F605A8EBFFFF04      <1>     test byte [dirFlags], dirFileType    ;If no path, use CWD for curdrv
    92 00001A3B 7438                <1>     jz .currentDrv
    93                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
    94 00001A3D 488D359BEAFFFF      <1>     lea rsi, searchSpec
    95 00001A44 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
    96 00001A48 752B                <1>     jne .currentDrv
    97                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
    98 00001A4A 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
    99 00001A4F 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   100 00001A53 B801290000          <1>     mov eax, 2901h   ;Parse filename
   101 00001A58 CD21                <1>     int 21h
   102 00001A5A 3CFF                <1>     cmp al, -1
   103 00001A5C 0F84E0FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   104                              <1>     ;Else the drive in the fcb is valid
   105 00001A62 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   106 00001A67 84C0                <1>     test al, al
   107 00001A69 740A                <1>     jz .currentDrv
   108 00001A6B FEC8                <1>     dec al  ;Convert to 0 based drive number
   109 00001A6D 880573EBFFFF        <1>     mov byte [dirDrv], al
   110 00001A73 EB0B                <1>     jmp short .dirPrintVol
   111                              <1> .currentDrv:
   112 00001A75 E8A61B0000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   113 00001A7A 880566EBFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   114                              <1> .dirPrintVol:
   115 00001A80 488D3558EAFFFF      <1>     lea rsi, searchSpec
   116                              <1> ;Now construct the path on dirSrchDir.
   117 00001A87 488D3D59EBFFFF      <1>     lea rdi, dirSrchDir
   118 00001A8E 0FB60551EBFFFF      <1>     movzx eax, byte [dirDrv] ;Get the 0 based drive number
   119 00001A95 88C2                <1>     mov dl, al  ;Save the 0 based drive number in dl
   120 00001A97 0441                <1>     add al, "A" ;Turn into a letter
   121 00001A99 B43A                <1>     mov ah, ":"
   122 00001A9B 66AB                <1>     stosw   ;Store X: into the search path
   123 00001A9D B81A120000          <1>     mov eax, 121Ah  ;This will either move rsi forwards two or not... either is ok
   124 00001AA2 CD2F                <1>     int 2fh
   125 00001AA4 3CFF                <1>     cmp al, -1  ;Shouldn't happen at this point
   126 00001AA6 0F8496FEFFFF        <1>     je badDriveError
   127                              <1>     ;Now rsi is at the right point, if first char is a pathsep, we dont get cwd
   128 00001AAC 8A0577E5FFFF        <1>     mov al, byte [pathSep]
   129 00001AB2 3806                <1>     cmp byte [rsi], al  ;If this char is a pathsep, its an absolute path
   130 00001AB4 7437                <1>     je .copyPathLoop    ;Just immediately start copying over chars
   131 00001AB6 AA                  <1>     stosb   ;Store the leading slash here and increment rdi by 1
   132 00001AB7 FEC2                <1>     inc dl  ;Increment by 1
   133 00001AB9 4887F7              <1>     xchg rsi, rdi   ;Store the cwd in rdi, save rsi
   134 00001ABC B800470000          <1>     mov eax, 4700h  ;Print current working directory
   135 00001AC1 CD21                <1>     int 21h
   136 00001AC3 4887F7              <1>     xchg rsi, rdi   ;Get back the ptrs correctly.
   137                              <1>     ;rsi points to the first char in the provided path.
   138                              <1>     ;rdi points to the first char of the cwd.
   139 00001AC6 31C0                <1>     xor eax, eax
   140                              <1> .goToEndOfCwd:
   141                              <1> ;Move to the end of the string, could use repne?
   142 00001AC8 3807                <1>     cmp byte [rdi], al
   143 00001ACA 7405                <1>     je .prepCopy    ;Exit when rdi points to the null
   144 00001ACC 48FFC7              <1>     inc rdi
   145 00001ACF EBF7                <1>     jmp short .goToEndOfCwd
   146                              <1> .prepCopy:
   147 00001AD1 8A0552E5FFFF        <1>     mov al, byte [pathSep]
   148 00001AD7 3806                <1>     cmp byte [rsi], al
   149 00001AD9 7412                <1>     je .copyPathLoop
   150 00001ADB B43A                <1>     mov ah, ":"
   151 00001ADD 86C4                <1>     xchg al, ah
   152 00001ADF 663947FE            <1>     cmp word [rdi - 2], ax
   153 00001AE3 7408                <1>     je .copyPathLoop
   154 00001AE5 88E0                <1>     mov al, ah
   155 00001AE7 3847FF              <1>     cmp byte [rdi - 1], al
   156 00001AEA 7401                <1>     je .copyPathLoop
   157 00001AEC AA                  <1>     stosb   ;Else, store a pathsep and inc rdi!
   158                              <1> .copyPathLoop:
   159 00001AED AC                  <1>     lodsb
   160 00001AEE 3A0535E5FFFF        <1>     cmp al, byte [pathSep]  ;Is it a pathsep?
   161 00001AF4 7509                <1>     jne .checkDot  ;If not, store it
   162                              <1> .lpPathseps:
   163 00001AF6 3806                <1>     cmp byte [rsi], al  ;Is [rsi] a pathsep?
   164 00001AF8 7505                <1>     jne .checkDot  ;If it isn't store al, check dots
   165 00001AFA 48FFC6              <1>     inc rsi
   166 00001AFD EBF7                <1>     jmp short .lpPathseps
   167                              <1> .checkDot:
   168 00001AFF 3C2E                <1>     cmp al, "."
   169 00001B01 7407                <1>     je .dots
   170                              <1> .store:
   171 00001B03 AA                  <1>     stosb
   172 00001B04 84C0                <1>     test al, al ;Was the char we just copied a null?
   173 00001B06 7472                <1>     jz .exitPathCopy
   174 00001B08 EBE3                <1>     jmp short .copyPathLoop
   175                              <1> .dots:
   176                              <1>     ;Here handle dot and dot dot
   177                              <1>     ;If the previous char is a pathsep, and the char after is a pathsep or null,
   178                              <1>     ; this is a current dir. Keep rdi where it is. If next char is psep, adv rsi
   179                              <1>     ; by 1. If it is null, go to top of loop.
   180                              <1>     ;Check char before in rdi. If this is a pathsep, we get started.
   181 00001B0A 8A2519E5FFFF        <1>     mov ah, byte [pathSep]
   182 00001B10 3867FF              <1>     cmp byte [rdi - 1], ah  
   183 00001B13 75EE                <1>     jne .store  ;If this is not a pathsep, pass it up for storage. 
   184 00001B15 8A26                <1>     mov ah, byte [rsi]  ;Now look ahead a char!
   185 00001B17 80FC2E              <1>     cmp ah, "." ;Is this another dot?
   186 00001B1A 7413                <1>     je .twoDot
   187                              <1>     ;This is only a "current dir" when next char is pathsep or null
   188 00001B1C 3A2507E5FFFF        <1>     cmp ah, byte [pathSep]
   189 00001B22 7406                <1>     je .skipThisPathsep
   190 00001B24 84E4                <1>     test ah, ah
   191 00001B26 74C5                <1>     jz .copyPathLoop
   192 00001B28 EBD9                <1>     jmp short .store ;Else, we store the char as normal!
   193                              <1> .skipThisPathsep:
   194                              <1> ;If a dot is flanked by two pathseps, skip handling it and the pathsep!
   195 00001B2A 48FFC6              <1>     inc rsi ;Point to the pathsep
   196 00001B2D EBBE                <1>     jmp short .copyPathLoop ;and rejoin the store
   197                              <1> .twoDot:
   198                              <1>     ;Woohoo, this works!
   199 00001B2F 48FFC6              <1>     inc rsi ;Move past the second dot
   200 00001B32 8A26                <1>     mov ah, byte [rsi]  ;Now pick up char after "." Valid only pathsep or null
   201 00001B34 3A25EFE4FFFF        <1>     cmp ah, byte [pathSep]
   202 00001B3A 7408                <1>     je .tdOk
   203 00001B3C 84E4                <1>     test ah, ah
   204 00001B3E 0F85F5FDFFFF        <1>     jne badParamError
   205                              <1> .tdOk:
   206 00001B44 8A05DFE4FFFF        <1>     mov al, byte byte [pathSep]
   207 00001B4A 807FFE3A            <1>     cmp byte [rdi - 2], ":" ;rdi must be immediately past a pathsep here
   208 00001B4E 0F84E5FDFFFF        <1>     je badParamError
   209 00001B54 4881EF02000000      <1>     sub rdi, 2
   210 00001B5B 31C9                <1>     xor ecx, ecx
   211 00001B5D FFC9                <1>     dec ecx
   212 00001B5F FD                  <1>     std
   213 00001B60 F2AE                <1>     repne scasb ;Scan backwards for the pathsep
   214 00001B62 FC                  <1>     cld
   215 00001B63 4881C702000000      <1>     add rdi, 2  ;Get on the right side of the pathsep
   216 00001B6A 84E4                <1>     test ah, ah ;If null, now pick it up and store it and exit properly
   217 00001B6C 0F847BFFFFFF        <1>     jz .copyPathLoop
   218 00001B72 48FFC6              <1>     inc rsi ;Else, go past the pathsep, pick up the next char as usual
   219 00001B75 E973FFFFFF          <1>     jmp .copyPathLoop ;And loop again
   220                              <1> .exitPathCopy:
   221                              <1> ;Now we have the full, adjusted path copied over to dirSrchDir!
   222 00001B7A 4881EF02000000      <1>     sub rdi, 2  ;Go back two chars
   223 00001B81 8A05A2E4FFFF        <1>     mov al, byte [pathSep]
   224 00001B87 B43A                <1>     mov ah, ":"
   225 00001B89 86C4                <1>     xchg al, ah
   226 00001B8B 663947FF            <1>     cmp word [rdi - 1], ax    ;Is this a root dir?
   227 00001B8F 7409                <1>     je .skipOverwrite
   228 00001B91 88E0                <1>     mov al, ah
   229 00001B93 3807                <1>     cmp byte [rdi], al  ;Is this a trailing pathsep?
   230 00001B95 7503                <1>     jne .skipOverwrite
   231 00001B97 C60700              <1>     mov byte [rdi], 0   ;Overwrite with a null
   232                              <1> .skipOverwrite:
   233 00001B9A 488D3546EAFFFF      <1>     lea rsi, dirSrchDir ;Now check if we have any WC's
   234 00001BA1 4889F7              <1>     mov rdi, rsi
   235 00001BA4 B811120000          <1>     mov eax, 1211h  ;Normalise path without affecting the registers
   236 00001BA9 CD2F                <1>     int 2fh
   237 00001BAB E82D1C0000          <1>     call scanForWildcards
   238 00001BB0 7432                <1>     jz .wcSearchPattern     ;Wildcard found! We have a search pattern!
   239 00001BB2 4889F2              <1>     mov rdx, rsi
   240 00001BB5 807E0300            <1>     cmp byte [rsi + 3], 0   ;Is this a null path?
   241 00001BB9 7429                <1>     je .wcSearchPattern     ;Move the ptr to end of path and add search patt.
   242                              <1> .notNull:
   243 00001BBB E8E41C0000          <1>     call setDTA ;Set the DTA
   244 00001BC0 B910000000          <1>     mov ecx, dirDirectory   ;Dir, normal and read only files!
   245 00001BC5 B8004E0000          <1>     mov eax, 4E00h ;Find first
   246 00001BCA CD21                <1>     int 21h
   247 00001BCC 7216                <1>     jc .wcSearchPattern ;If this errors, file not found, we have a search pattern
   248                              <1> ;Now we have searched for the file, is a directory?
   249 00001BCE F605A5E5FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   250 00001BD5 740D                <1>     jz .wcSearchPattern ;The end of the path is a search pattern
   251                              <1>     ;Here we are searching IN a directory. Default search pattern!
   252 00001BD7 31C0                <1>     xor eax, eax
   253 00001BD9 31C9                <1>     xor ecx, ecx
   254 00001BDB FFC9                <1>     dec ecx
   255 00001BDD F2AE                <1>     repne scasb
   256 00001BDF 48FFCF              <1>     dec rdi ;Point rdi to the terminating null
   257 00001BE2 EB40                <1>     jmp short .wcDefaultSearch
   258                              <1> .wcSearchPattern:
   259                              <1> ;Move the final portion of the path into the dirSrchFCB, overwriting the ?'s
   260                              <1> ;and place a null terminator on the pathsep before the final portion in dirSrchDir
   261 00001BE4 31C0                <1>     xor eax, eax
   262 00001BE6 31C9                <1>     xor ecx, ecx
   263 00001BE8 FFC9                <1>     dec ecx
   264 00001BEA F2AE                <1>     repne scasb ;Scan forwards
   265                              <1>     ;Here rdi points past the null at the end
   266 00001BEC 8A0537E4FFFF        <1>     mov al, byte [pathSep]
   267 00001BF2 31C9                <1>     xor ecx, ecx
   268 00001BF4 FFC9                <1>     dec ecx
   269 00001BF6 FD                  <1>     std ;Search backwards
   270 00001BF7 F2AE                <1>     repne scasb
   271 00001BF9 FC                  <1>     cld ;Search forwards again
   272 00001BFA 48FFC7              <1>     inc rdi ;Go back the to the pathsep
   273 00001BFD 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this the slash of the root dir?
   274 00001C01 7503                <1>     jne .wcsp1
   275 00001C03 48FFC7              <1>     inc rdi ;Go one char forwards
   276                              <1> .wcsp1:
   277                              <1>     ;rdi points either on the pathsep or one char after the pathsep if in root dir
   278 00001C06 57                  <1>     push rdi
   279 00001C07 3807                <1>     cmp byte [rdi], al  ;If we are on pathsep, go forwards tmporarily
   280 00001C09 7503                <1>     jne .wcsp2
   281 00001C0B 48FFC7              <1>     inc rdi
   282                              <1> .wcsp2:
   283 00001C0E 4889FE              <1>     mov rsi, rdi    ;Now we source our chars from here
   284 00001C11 488D3D51EAFFFF      <1>     lea rdi, dirSrchFCB
   285 00001C18 B80D290000          <1>     mov eax, 290Dh  ;Modify only that which has been specified
   286 00001C1D CD21                <1>     int 21h
   287 00001C1F 5F                  <1>     pop rdi
   288 00001C20 31C0                <1>     xor eax, eax
   289 00001C22 8807                <1>     mov byte [rdi], al  ;Store the null terminator over the pathsep
   290                              <1> .wcDefaultSearch:
   291 00001C24 0FB605BBE9FFFF      <1>     movzx eax, byte [dirDrv] 
   292 00001C2B E8410E0000          <1>     call volume.dirEP
   293 00001C30 488D1523F0FFFF      <1>     lea rdx, dirMain    ;Print message intro
   294 00001C37 B409                <1>     mov ah, 09h
   295 00001C39 CD21                <1>     int 21h
   296 00001C3B C60724              <1>     mov byte [rdi], "$"   ;Replace the null with a string terminator
   297 00001C3E 488D15A2E9FFFF      <1>     lea rdx, dirSrchDir   ;Print the directory we will work on
   298 00001C45 B409                <1>     mov ah, 09h
   299 00001C47 CD21                <1>     int 21h
   300 00001C49 C60700              <1>     mov byte [rdi], 0   ;Replace the null with a string terminator
   301 00001C4C 488D15F8ECFFFF      <1>     lea rdx, crlf2
   302 00001C53 B409                <1>     mov ah, 09h
   303 00001C55 CD21                <1>     int 21h
   304                              <1> ;Now we copy the search pattern to look for into the path back from the fcb field.
   305                              <1> ;rdi points to the terminating null
   306 00001C57 8A05CCE3FFFF        <1>     mov al, byte [pathSep]
   307 00001C5D 3847FF              <1>     cmp byte [rdi - 1], al
   308 00001C60 7403                <1>     je .root
   309 00001C62 48FFC7              <1>     inc rdi
   310                              <1> .root:
   311 00001C65 48FFCF              <1>     dec rdi ;Point back to the pathsep
   312 00001C68 AA                  <1>     stosb   ;Store the pathsep here and advance rdi
   313 00001C69 488D35FAE9FFFF      <1>     lea rsi, qword [dirSrchFCB + 1] ;Go to the name field of the FCB
   314 00001C70 E8AA1A0000          <1>     call FCBToAsciiz    ;Terminates for free
   315 00001C75 E801000000          <1>     call .searchForFile
   316                              <1>     return
    13                              <2> %%_ret:
    14 00001C7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   317                              <1> 
   318                              <1> .searchForFile:
   319 00001C7B E8241C0000          <1>     call setDTA
   320 00001C80 B910000000          <1>     mov ecx, dirDirectory   ;Search for normal, ro and dir
   321 00001C85 488D155BE9FFFF      <1>     lea rdx, dirSrchDir
   322 00001C8C B8004E0000          <1>     mov eax, 4E00h ;Find first
   323 00001C91 CD21                <1>     int 21h
   324 00001C93 720B                <1>     jc .dirNoMoreFiles
   325                              <1> .findNext:
   326 00001C95 E878000000          <1>     call .dirPrintFileData  ;Print the file information
   327 00001C9A B44F                <1>     mov ah, 4Fh
   328 00001C9C CD21                <1>     int 21h
   329 00001C9E 73F5                <1>     jnc .findNext 
   330                              <1> .dirNoMoreFiles:
   331 00001CA0 F6053CE9FFFF01      <1>     test byte [dirFlags], dirWideType
   332 00001CA7 740B                <1>     jz .dirNoEndNewLine
   333 00001CA9 488D1598ECFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   334 00001CB0 B409                <1>     mov ah, 09h
   335 00001CB2 CD21                <1>     int 21h
   336                              <1> .dirNoEndNewLine:
   337                              <1>     ;Now we print the number of files and the number of bytes on the disk
   338 00001CB4 488D1551F2FFFF      <1>     lea rdx, fourSpc
   339 00001CBB B409                <1>     mov ah, 09h
   340 00001CBD CD21                <1>     int 21h
   341 00001CBF B409                <1>     mov ah, 09h ;Print four Spaces twice
   342 00001CC1 CD21                <1>     int 21h
   343 00001CC3 0FB6051BE9FFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   344 00001CCA E8221B0000          <1>     call printDecimalWord
   345 00001CCF 488D15BDEDFFFF      <1>     lea rdx, dirOk
   346 00001CD6 B409                <1>     mov ah, 09h
   347 00001CD8 CD21                <1>     int 21h
   348 00001CDA 488D1530F2FFFF      <1>     lea rdx, threeSpc
   349 00001CE1 B409                <1>     mov ah, 09h
   350 00001CE3 CD21                <1>     int 21h
   351 00001CE5 B800360000          <1>     mov eax, 3600h ;Get disk info
   352 00001CEA 8A15F6E8FFFF        <1>     mov dl, byte [dirDrv]
   353 00001CF0 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   354 00001CF2 CD21                <1>     int 21h ;Get disk free space info
   355 00001CF4 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   356 00001CF7 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   357 00001CFA 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   358 00001CFC F7E1                <1>     mul ecx ;Get bytes per cluster
   359 00001CFE 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   360                              <1>     ;rax now has the number of free bytes on the disk
   361 00001D01 E8EB1A0000          <1>     call printDecimalWord
   362 00001D06 488D1590EDFFFF      <1>     lea rdx, bytesOk
   363 00001D0D B409                <1>     mov ah, 09h
   364 00001D0F CD21                <1>     int 21h
   365                              <1>     return
    13                              <2> %%_ret:
    14 00001D11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> .dirPrintFileData:
   368                              <1> ;Use cmdFcb to build the file name with space
   369                              <1> ;Start by print the name (same for both cases)
   370                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   371 00001D12 F60561E4FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   372                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001D19 75(11)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   373 00001D1B 488D3561E4FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   374 00001D22 488D3D2CE4FFFF      <1>     lea rdi, cmdFcb
   375 00001D29 E883190000          <1>     call asciiFilenameToFCB
   376 00001D2E 488D1520E4FFFF      <1>     lea rdx, cmdFcb
   377 00001D35 B908000000          <1>     mov ecx, 8  ;Print 8 chars
   378 00001D3A BB01000000          <1>     mov ebx, 1  ;STDOUT
   379 00001D3F B440                <1>     mov ah, 40h ;Write handle
   380 00001D41 CD21                <1>     int 21h
   381 00001D43 52                  <1>     push rdx
   382 00001D44 B220                <1>     mov dl, " "
   383 00001D46 B402                <1>     mov ah, 02h ;Print char
   384 00001D48 CD21                <1>     int 21h
   385 00001D4A 5A                  <1>     pop rdx
   386 00001D4B 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   387 00001D52 B903000000          <1>     mov ecx, 3  ;Print three chars
   388 00001D57 BB01000000          <1>     mov ebx, 1  ;STDOUT
   389 00001D5C B440                <1>     mov ah, 40h ;Write handle
   390 00001D5E CD21                <1>     int 21h
   391 00001D60 F6057CE8FFFF01      <1>     test byte [dirFlags], dirWideType
   392 00001D67 0F85A8000000        <1>     jnz .widePrint
   393                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   394                              <1>     ;Now check if a DIR
   395 00001D6D F60506E4FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   396 00001D74 7418                <1>     jz .dirPrintNotDir
   397 00001D76 488D152EEDFFFF      <1>     lea rdx, dirLbl
   398 00001D7D B409                <1>     mov ah, 09h
   399 00001D7F CD21                <1>     int 21h
   400 00001D81 488D1589F1FFFF      <1>     lea rdx, threeSpc
   401 00001D88 B409                <1>     mov ah, 09h
   402 00001D8A CD21                <1>     int 21h
   403 00001D8C EB4F                <1>     jmp short .dirPrintFileDT
   404                              <1> .dirPrintNotDir:
   405                              <1> ;Here we print the file size
   406 00001D8E B220                <1>     mov dl, " "
   407 00001D90 B402                <1>     mov ah, 02h
   408 00001D92 CD21                <1>     int 21h
   409 00001D94 8B05E5E3FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   410 00001D9A E8C31A0000          <1>     call getDecimalWord
   411 00001D9F 4889CB              <1>     mov rbx, rcx
   412 00001DA2 51                  <1>     push rcx
   413 00001DA3 480FCB              <1>     bswap rbx
   414 00001DA6 B908000000          <1>     mov ecx, 8
   415                              <1> .dirPrintFileSizePrep:
   416 00001DAB 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   417 00001DAD 7514                <1>     jne .dirPrintFileSize
   418 00001DAF B402                <1>     mov ah, 02h
   419 00001DB1 B220                <1>     mov dl, " "
   420 00001DB3 CD21                <1>     int 21h
   421 00001DB5 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   422 00001DB9 FFC9                <1>     dec ecx
   423 00001DBB 81F901000000        <1>     cmp ecx, 1
   424 00001DC1 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   425                              <1> .dirPrintFileSize:
   426 00001DC3 5B                  <1>     pop rbx
   427                              <1> .dirPrintFileSizeLoop:
   428 00001DC4 88DA                <1>     mov dl, bl
   429 00001DC6 B402                <1>     mov ah, 02h
   430 00001DC8 CD21                <1>     int 21h
   431 00001DCA 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   432 00001DCE FFC9                <1>     dec ecx
   433 00001DD0 75F2                <1>     jnz .dirPrintFileSizeLoop
   434 00001DD2 488D153CF1FFFF      <1>     lea rdx, twoSpc
   435 00001DD9 B409                <1>     mov ah, 09h
   436 00001DDB CD21                <1>     int 21h
   437                              <1> .dirPrintFileDT:
   438 00001DDD B220                <1>     mov dl, " "
   439 00001DDF B402                <1>     mov ah, 02h
   440 00001DE1 CD21                <1>     int 21h
   441 00001DE3 0FB70593E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   442 00001DEA 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   443 00001DEC E8D8130000          <1>     call printDate
   444 00001DF1 488D151DF1FFFF      <1>     lea rdx, twoSpc
   445 00001DF8 B409                <1>     mov ah, 09h
   446 00001DFA CD21                <1>     int 21h
   447 00001DFC 0FB70578E3FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   448 00001E03 E8E3140000          <1>     call printTime
   449 00001E08 488D1539EBFFFF      <1>     lea rdx, crlf
   450 00001E0F B409                <1>     mov ah, 09h
   451 00001E11 CD21                <1>     int 21h
   452 00001E13 EB0B                <1>     jmp short .dirPrintNameExit
   453                              <1> .widePrint:
   454                              <1> ;If /W, print name space ext space space space space
   455 00001E15 488D15F0F0FFFF      <1>     lea rdx, fourSpc
   456 00001E1C B409                <1>     mov ah, 09h ;Print string
   457 00001E1E CD21                <1>     int 21h
   458                              <1> .dirPrintNameExit:
   459 00001E20 FE05BFE7FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   460 00001E26 FE05B8E7FFFF        <1>     inc byte [dirLineCtr]
   461 00001E2C 803DB1E7FFFF17      <1>     cmp byte [dirLineCtr], 23
   462                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001E33 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001E35 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   463 00001E36 488D1595ECFFFF      <1>     lea rdx, pauseMes
   464 00001E3D B409                <1>     mov ah, 09h
   465 00001E3F CD21                <1>     int 21h
   466 00001E41 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   467 00001E43 CD21                <1>     int 21h
   468 00001E45 C60598E7FFFF00      <1>     mov byte [dirLineCtr], 0
   469 00001E4C 488D15F5EAFFFF      <1>     lea rdx, crlf   ;Force new line
   470 00001E53 B409                <1>     mov ah, 09h
   471 00001E55 CD21                <1>     int 21h
   472                              <1>     return
    13                              <2> %%_ret:
    14 00001E57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   473                              <1> 
   474                              <1> chdir:
   475 00001E58 F60549E2FFFFFF      <1>     test byte [arg1Flg], -1
   476 00001E5F 754D                <1>     jnz .changeDir
   477                              <1>     ;Print CWD
   478                              <1> .printCWD:
   479 00001E61 E81F160000          <1>     call putCWDInPrompt ;Exactly the same procedure
   480 00001E66 E89E150000          <1>     call printCRLF
   481                              <1>     return
    13                              <2> %%_ret:
    14 00001E6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   482                              <1> .printDiskCWD:
   483                              <1> ;Print CWD for a specified drive
   484 00001E6C 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   485 00001E70 88D0                <1>     mov al, dl
   486 00001E72 0440                <1>     add al, "@" ;Get the UC letter
   487 00001E74 B43A                <1>     mov ah, ":"
   488 00001E76 488D3D62E6FFFF      <1>     lea rdi, searchSpec
   489 00001E7D 66AB                <1>     stosw   ;Store X:, rdi+=2
   490 00001E7F 8A05A4E1FFFF        <1>     mov al, byte [pathSep]
   491 00001E85 AA                  <1>     stosb   ;Store pathSep, inc rdi
   492 00001E86 B447                <1>     mov ah, 47h ;Get Current Working Directory
   493 00001E88 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   494 00001E8B CD21                <1>     int 21h
   495 00001E8D E8AC170000          <1>     call strlen
   496 00001E92 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   497 00001E98 B440                <1>     mov ah, 40h ;Write to handle
   498 00001E9A BB01000000          <1>     mov ebx, 1  ;STDOUT
   499 00001E9F 488D1539E6FFFF      <1>     lea rdx, searchSpec
   500 00001EA6 CD21                <1>     int 21h
   501 00001EA8 E85C150000          <1>     call printCRLF
   502                              <1>     return
    13                              <2> %%_ret:
    14 00001EAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .changeDir:
   504 00001EAE 8A05F6E1FFFF        <1>     mov al, byte [arg1FCBret]
   505 00001EB4 3CFF                <1>     cmp al, -1 
   506 00001EB6 0F8486FAFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   507 00001EBC E8F7180000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   508 00001EC1 488D1517E6FFFF      <1>     lea rdx, searchSpec
   509 00001EC8 B43B                <1>     mov ah, 3Bh ;CHDIR
   510 00001ECA CD21                <1>     int 21h
   511 00001ECC 0F829DFAFFFF        <1>     jc badDirError
   512                              <1>     return
    13                              <2> %%_ret:
    14 00001ED2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> mkdir:
   515 00001ED3 F605CEE1FFFFFF      <1>     test byte [arg1Flg], -1
   516 00001EDA 0F846BFAFFFF        <1>     jz badArgError
   517 00001EE0 F605C4E1FFFFFF      <1>     test byte [arg2Flg], -1
   518 00001EE7 0F855EFAFFFF        <1>     jnz badArgError
   519                              <1>     ;We have exactly one argument
   520 00001EED 8A05B7E1FFFF        <1>     mov al, byte [arg1FCBret]
   521 00001EF3 3CFF                <1>     cmp al, -1 
   522 00001EF5 0F8447FAFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   523 00001EFB E8B8180000          <1>     call buildCommandPath
   524 00001F00 488D15D8E5FFFF      <1>     lea rdx, searchSpec
   525 00001F07 B800390000          <1>     mov eax, 3900h  ;MKDIR
   526 00001F0C CD21                <1>     int 21h
   527                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F0E 73(D2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   528                              <1> .badMake:   ;Else, bad make
   529 00001F10 488D15EFECFFFF      <1>     lea rdx, badMD
   530 00001F17 B800090000          <1>     mov eax, 0900h
   531 00001F1C CD21                <1>     int 21h
   532                              <1>     return
    13                              <2> %%_ret:
    14 00001F1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> rmdir:
   535 00001F1F F60582E1FFFFFF      <1>     test byte [arg1Flg], -1
   536 00001F26 0F841FFAFFFF        <1>     jz badArgError
   537 00001F2C F60578E1FFFFFF      <1>     test byte [arg2Flg], -1
   538 00001F33 0F8512FAFFFF        <1>     jnz badArgError
   539                              <1>     ;We have exactly one argument
   540 00001F39 8A056BE1FFFF        <1>     mov al, byte [arg1FCBret]
   541 00001F3F 3CFF                <1>     cmp al, -1 
   542 00001F41 0F84FBF9FFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   543 00001F47 E86C180000          <1>     call buildCommandPath
   544 00001F4C 488D158CE5FFFF      <1>     lea rdx, searchSpec
   545 00001F53 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   546 00001F58 CD21                <1>     int 21h
   547                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001F5A 73(1E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   548                              <1> .badRemove:   ;Else, bad make
   549 00001F5C 488D15C0ECFFFF      <1>     lea rdx, badRD
   550 00001F63 B800090000          <1>     mov eax, 0900h
   551 00001F68 CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001F6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> 
   554                              <1> copy:
   555 00001F6B F60536E1FFFFFF      <1>     test byte [arg1Flg], -1
   556 00001F72 0F84D3F9FFFF        <1>     jz badArgError
   557 00001F78 F6052CE1FFFFFF      <1>     test byte [arg2Flg], -1
   558 00001F7F 0F84C6F9FFFF        <1>     jz badArgError
   559 00001F85 0FB6051DE1FFFF      <1>     movzx eax, byte [arg1Off]
   560 00001F8C 4C8B057CE0FFFF      <1>     mov r8, [pspPtr]
   561 00001F93 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   562 00001F9A 4889F3              <1>     mov rbx, rsi    ;Save the ptr to the start of the string in rbx
   563 00001F9D 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   564 00001FA0 488D3D02E7FFFF      <1>     lea rdi, srcSpec
   565 00001FA7 E8C9170000          <1>     call cpDelimPathToBufz    
   566 00001FAC 0FB605F9E0FFFF      <1>     movzx eax, byte [arg2Off]
   567 00001FB3 4889DE              <1>     mov rsi, rbx    ;Get back the start of the ptr
   568 00001FB6 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   569 00001FB9 488D3D6BE7FFFF      <1>     lea rdi, destSpec
   570 00001FC0 E8B0170000          <1>     call cpDelimPathToBufz   
   571                              <1> ;Before we open, we check if the two filenames are equal
   572                              <1> ; If so, crap out.
   573 00001FC5 488D35DDE6FFFF      <1>     lea rsi, srcSpec
   574 00001FCC 488D3D58E7FFFF      <1>     lea rdi, destSpec
   575 00001FD3 B81E120000          <1>     mov eax, 121Eh
   576 00001FD8 CD2F                <1>     int 2Fh
   577 00001FDA 0F84D3000000        <1>     jz .sameFilename
   578                              <1>     ;Open source with read permission
   579                              <1>     ;Open destination with write permission
   580 00001FE0 488D15C2E6FFFF      <1>     lea rdx, srcSpec
   581 00001FE7 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   582 00001FEC CD21                <1>     int 21h
   583 00001FEE 0F8245F9FFFF        <1>     jc badParamError
   584 00001FF4 668905CDE7FFFF      <1>     mov word [sourceHdl], ax
   585                              <1> 
   586 00001FFB 0FB7D8              <1>     movzx ebx, ax   ;For bx
   587 00001FFE B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   588 00002003 CD21                <1>     int 21h
   589 00002005 668915C0E7FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   590                              <1> 
   591 0000200C 488D1518E7FFFF      <1>     lea rdx, destSpec
   592 00002013 B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   593 00002018 31C9                <1>     xor ecx, ecx    ;No file attributes
   594 0000201A CD21                <1>     int 21h
   595 0000201C 0F82B8000000        <1>     jc .badExit
   596 00002022 668905A1E7FFFF      <1>     mov word [destHdl], ax
   597 00002029 31F6                <1>     xor esi, esi
   598 0000202B 488D159CE7FFFF      <1>     lea rdx, copyBuffer
   599                              <1> .copyLoop:
   600 00002032 B980000000          <1>     mov ecx, 128
   601 00002037 0FB71D8AE7FFFF      <1>     movzx ebx, word [sourceHdl]
   602 0000203E B43F                <1>     mov ah, 3Fh ;Read
   603 00002040 CD21                <1>     int 21h
   604 00002042 0F8292000000        <1>     jc .badExit
   605 00002048 85C0                <1>     test eax, eax
   606 0000204A 743A                <1>     jz .okExit
   607 0000204C 01C6                <1>     add esi, eax
   608 0000204E 89C1                <1>     mov ecx, eax
   609 00002050 0FB71D73E7FFFF      <1>     movzx ebx, word [destHdl]
   610 00002057 B440                <1>     mov ah, 40h ;Write
   611 00002059 CD21                <1>     int 21h
   612 0000205B 727D                <1>     jc .badExit
   613 0000205D 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   614 00002062 74CE                <1>     je .copyLoop
   615                              <1>     ;If not char dev, exit
   616 00002064 66F7055FE7FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   617 0000206D 7417                <1>     jz .okExit
   618                              <1>     ;Is handle in cooked or binary mode?
   619 0000206F 66F70554E7FFFF2000  <1>     test word [srcHdlInfo], 20h
   620 00002078 750C                <1>     jnz .okExit
   621                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   622 0000207A 09C0                <1>     or eax, eax ;Clear upper bits in eax
   623 0000207C 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   624 00002081 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   625 00002084 75AC                <1>     jne .copyLoop   ;Jump if not
   626                              <1> .okExit:
   627 00002086 E832000000          <1>     call .leaveCopyClose
   628 0000208B 488D15B6E8FFFF      <1>     lea rdx, crlf
   629 00002092 B409                <1>     mov ah, 09h
   630 00002094 CD21                <1>     int 21h
   631 00002096 488D156FEEFFFF      <1>     lea rdx, fourSpc
   632 0000209D B409                <1>     mov ah, 09h
   633 0000209F CD21                <1>     int 21h
   634 000020A1 B402                <1>     mov ah, 02h
   635 000020A3 B231                <1>     mov dl, "1" ;1 File(s) copied
   636 000020A5 CD21                <1>     int 21h
   637 000020A7 488D15D3E9FFFF      <1>     lea rdx, copyOk
   638 000020AE B409                <1>     mov ah, 09h
   639 000020B0 CD21                <1>     int 21h
   640                              <1>     return
    13                              <2> %%_ret:
    14 000020B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   641                              <1> .sameFilename:
   642 000020B3 E805000000          <1>     call .leaveCopyClose ;Close the handles
   643 000020B8 E973F8FFFF          <1>     jmp noSelfCopyError
   644                              <1> .leaveCopyClose:
   645 000020BD 668B1D04E7FFFF      <1>     mov bx, word [sourceHdl]
   646 000020C4 B8003E0000          <1>     mov eax, 3E00h
   647 000020C9 CD21                <1>     int 21h
   648 000020CB 668B1DF8E6FFFF      <1>     mov bx, word [destHdl]
   649 000020D2 B8003E0000          <1>     mov eax, 3E00h
   650 000020D7 CD21                <1>     int 21h
   651                              <1>     return
    13                              <2> %%_ret:
    14 000020D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> .badExit:
   653                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   654 000020DA 668B1DE7E6FFFF      <1>     mov bx, word [sourceHdl]
   655 000020E1 6681FBFFFF          <1>     cmp bx, -1
   656 000020E6 7407                <1>     je .skipSource
   657 000020E8 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   658 000020ED CD21                <1>     int 21h
   659                              <1> .skipSource:
   660 000020EF 668B1DD4E6FFFF      <1>     mov bx, word [destHdl]
   661 000020F6 6681FBFFFF          <1>     cmp bx, -1
   662 000020FB 0F8438F8FFFF        <1>     je badParamError
   663 00002101 B8003E0000          <1>     mov eax, 3E00h
   664 00002106 CD21                <1>     int 21h
   665 00002108 E92CF8FFFF          <1>     jmp badParamError
   666                              <1> 
   667                              <1> erase:
   668 0000210D F60594DFFFFFFF      <1>     test byte [arg1Flg], -1
   669 00002114 0F8431F8FFFF        <1>     jz badArgError
   670 0000211A E885170000          <1>     call setDTA     ;Start by resetting the DTA
   671 0000211F E894160000          <1>     call buildCommandPath   ;Get the relative path to the file
   672                              <1> .dirLp:
   673 00002124 488D3DB4E3FFFF      <1>     lea rdi, searchSpec
   674 0000212B E8CB150000          <1>     call findLastPathComponant
   675 00002130 4889FE              <1>     mov rsi, rdi    ;Save this as the source
   676 00002133 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
   677 00002137 B03F                <1>     mov al, "?"
   678                              <1>     ;Store question marks in the name field
   679 00002139 57                  <1>     push rdi
   680 0000213A 48FFC7              <1>     inc rdi ;Goto the first char
   681 0000213D B90B000000          <1>     mov ecx, 11
   682 00002142 F3AA                <1>     rep stosb
   683 00002144 5F                  <1>     pop rdi
   684 00002145 4889F2              <1>     mov rdx, rsi    ;Save the ptr
   685 00002148 B80D290000          <1>     mov eax, 290Dh  ;Parse the search mask into the FCB block
   686 0000214D CD21                <1>     int 21h
   687 0000214F 3C01                <1>     cmp al, 1
   688 00002151 0F859C000000        <1>     jne .noWildcard ;If no wildcards, just delete directly, unless a directory
   689                              <1>     ;Else, we now copy back the search pattern over the last componant!
   690                              <1>     ;No dirs to handle in here
   691 00002157 488D7701            <1>     lea rsi, qword [rdi + fcb.filename]    ;Now move the ptr to the filename in rsi
   692 0000215B 4889D7              <1>     mov rdi, rdx    ;Move the ptr to the start of the last componant to rdi
   693 0000215E E8BC150000          <1>     call FCBToAsciiz    ;Null terminates for free
   694                              <1>     ;Count the number of ?'s, if 11, we print the message
   695 00002163 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]
   696 00002167 31C9                <1>     xor ecx, ecx
   697                              <1> .wcScan:
   698 00002169 AC                  <1>     lodsb
   699 0000216A 3C3F                <1>     cmp al, "?"
   700 0000216C 752F                <1>     jne .endCount
   701 0000216E FFC1                <1>     inc ecx
   702 00002170 81F90B000000        <1>     cmp ecx, 11
   703 00002176 75F1                <1>     jne .wcScan
   704                              <1> .ynmsg:
   705 00002178 488D1527EAFFFF      <1>     lea rdx, ynMes
   706 0000217F E88C120000          <1>     call printString
   707 00002184 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   708 00002186 CD21                <1>     int 21h ;Get char in al
   709 00002188 E8BB140000          <1>     call ucChar ;Uppercase the char
   710 0000218D 3C59                <1>     cmp al, "Y" ;If they want it... they'll get it!
   711 0000218F 7407                <1>     je .endCount1
   712 00002191 3C4E                <1>     cmp al, "N"
   713                              <1>     rete    ;Simply return to command line if they don't want it!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002193 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002195 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   714 00002196 EBE0                <1>     jmp short .ynmsg    ;Else, tell me what you want!!!
   715                              <1> .endCount1:
   716 00002198 E86C120000          <1>     call printCRLF
   717                              <1> .endCount:
   718                              <1>     ;Now we copy our search template pathstring to delPath
   719 0000219D 488D3D05E5FFFF      <1>     lea rdi, delPath
   720 000021A4 488D3534E3FFFF      <1>     lea rsi, searchSpec ;Source the chars from here
   721 000021AB E884140000          <1>     call strcpy2         ;Copy the string over to delPath
   722                              <1> .findFile:
   723                              <1>     ;Now we find first/find next our way through the files
   724 000021B0 4889F2              <1>     mov rdx, rsi    ;rdx must point at searchSpec for findfirst
   725 000021B3 31C9                <1>     xor ecx, ecx    ;Search for normal and ro files only
   726 000021B5 B8004E0000          <1>     mov eax, 4E00h  ;Find first
   727 000021BA CD21                <1>     int 21h
   728 000021BC 0F82A4F7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   729                              <1>     ;Now the file was found, we copy the name over, delete and keep going
   730 000021C2 E834150000          <1>     call findLastPathComponant  ;Now find the last componant in delPath
   731 000021C7 488D35B5DFFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   732                              <1> .delNextFile:
   733                              <1> ;rsi and rdi dont move here
   734 000021CE E861140000          <1>     call strcpy2     ;Now copy over ASCIIZname to last path componant of delpath
   735 000021D3 488D15CFE4FFFF      <1>     lea rdx, delPath
   736 000021DA B800410000          <1>     mov eax, 4100h  ;Delete File 
   737 000021DF CD21                <1>     int 21h         ;If this fails to delete it, fail silently
   738 000021E1 488D15F7E2FFFF      <1>     lea rdx, searchSpec    ;Now point rdx to the search spec
   739 000021E8 B8004F0000          <1>     mov eax, 4F00h  ;Else, find next file
   740 000021ED CD21                <1>     int 21h
   741 000021EF 73DD                <1>     jnc .delNextFile    
   742 000021F1 F8                  <1>     clc ;Clear carry to indicate success
   743                              <1>     return
    13                              <2> %%_ret:
    14 000021F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> .noWildcard:
   745                              <1>     ;Here we just check that the file was not a directory. If it was, we add
   746                              <1>     ; a \*.*<NUL> over the null terminator
   747 000021F3 488D15E5E2FFFF      <1>     lea rdx, searchSpec
   748 000021FA B910000000          <1>     mov ecx, dirDirectory    ;Search for normal, RO and dir
   749 000021FF B8004E0000          <1>     mov eax, 4E00h  ;Find first
   750 00002204 CD21                <1>     int 21h
   751 00002206 0F825AF7FFFF        <1>     jc badFnf   ;Here we just print file not found error and return!
   752 0000220C F60567DFFFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   753 00002213 741F                <1>     jz .delMain ;If not a dir, must be a file, delete it directly!
   754                              <1>     ;Else, we are dealing with a dir
   755 00002215 4889D7              <1>     mov rdi, rdx
   756 00002218 31C9                <1>     xor ecx, ecx
   757 0000221A FFC9                <1>     dec ecx
   758 0000221C F2AE                <1>     repne scasb ;Go to the end of the line!
   759 0000221E 48FFCF              <1>     dec rdi
   760 00002221 0FB60501DEFFFF      <1>     movzx eax, byte [pathSep]
   761 00002228 AA                  <1>     stosb
   762 00002229 B82A2E2A00          <1>     mov eax, "*.*"  ;Null terminated for us!
   763 0000222E AB                  <1>     stosd
   764 0000222F E9F0FEFFFF          <1>     jmp .dirLp    ;Now restart the process with extended path!
   765                              <1> .delMain:   ;Call with rdx -> buffer!
   766 00002234 B800410000          <1>     mov eax, 4100h  ;Delete File 
   767 00002239 CD21                <1>     int 21h
   768                              <1>     retnc   ;Return if CF=NC
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000223B 73(F2)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   769 0000223D 3C05                <1>     cmp al, errAccDen
   770 0000223F 0F84E2F6FFFF        <1>     je badAccError ;If the file is RO, fail!
   771 00002245 E90AF7FFFF          <1>     jmp badFileError
   772                              <1>     return
    13                              <2> %%_ret:
    14 0000224A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> date:
   774 0000224B 488D15D7E8FFFF      <1>     lea rdx, curDate
   775 00002252 B409                <1>     mov ah, 09h
   776 00002254 CD21                <1>     int 21h
   777 00002256 E8DF120000          <1>     call printFmtDate
   778                              <1> 
   779 0000225B 488D15D8E8FFFF      <1>     lea rdx, newDate
   780 00002262 B409                <1>     mov ah, 09h
   781 00002264 CD21                <1>     int 21h
   782 00002266 488D15ECE8FFFF      <1>     lea rdx, ukDate
   783 0000226D 488D05D8E8FFFF      <1>     lea rax, usDate
   784 00002274 488D1DEBE8FFFF      <1>     lea rbx, jpDate
   785 0000227B 803DB2DDFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   786 00002282 480F47D3            <1>     cmova rdx, rbx
   787 00002286 480F42D0            <1>     cmovb rdx, rax
   788 0000228A B409                <1>     mov ah, 09h
   789 0000228C CD21                <1>     int 21h
   790                              <1> 
   791 0000228E 488D151BDFFFFF      <1>     lea rdx, inBuffer
   792 00002295 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   793 00002298 B40A                <1>     mov ah, 0Ah
   794 0000229A CD21                <1>     int 21h
   795 0000229C 52                  <1>     push rdx
   796 0000229D 488D15A4E6FFFF      <1>     lea rdx, crlf
   797 000022A4 B409                <1>     mov ah, 09h
   798 000022A6 CD21                <1>     int 21h
   799 000022A8 5A                  <1>     pop rdx
   800 000022A9 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   801                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022AD 74(4A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   802                              <1>     return
    13                              <2> %%_ret:
    14 000022AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> 
   804                              <1> time:
   805 000022B0 488D15CBE8FFFF      <1>     lea rdx, curTime
   806 000022B7 B409                <1>     mov ah, 09h
   807 000022B9 CD21                <1>     int 21h
   808                              <1> 
   809 000022BB E817120000          <1>     call printFmtTime
   810                              <1> 
   811 000022C0 488D15CCE8FFFF      <1>     lea rdx, newTime
   812 000022C7 B409                <1>     mov ah, 09h
   813 000022C9 CD21                <1>     int 21h
   814                              <1> 
   815 000022CB 488D15DEDEFFFF      <1>     lea rdx, inBuffer
   816 000022D2 C6027F              <1>     mov byte [rdx], inBufferL ;Enter a string of up to 126 chars in length
   817 000022D5 B40A                <1>     mov ah, 0Ah
   818 000022D7 CD21                <1>     int 21h
   819 000022D9 52                  <1>     push rdx
   820 000022DA 488D1567E6FFFF      <1>     lea rdx, crlf
   821 000022E1 B409                <1>     mov ah, 09h
   822 000022E3 CD21                <1>     int 21h
   823 000022E5 5A                  <1>     pop rdx
   824 000022E6 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   825                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000022EA 74(AF)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   826                              <1>     return
    13                              <2> %%_ret:
    14 000022EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   827                              <1> ctty:
   828 000022ED F605B4DDFFFFFF      <1>     test byte [arg1Flg], -1
   829 000022F4 0F8451F6FFFF        <1>     jz badArgError
   830 000022FA F605AADDFFFFFF      <1>     test byte [arg2Flg], -1
   831 00002301 0F8544F6FFFF        <1>     jnz badArgError
   832 00002307 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   833 0000230E 0FB60594DDFFFF      <1>     movzx eax, byte [arg1Off]
   834 00002315 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   835 00002318 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   836 0000231C 750F                <1>     jne .noDrive
   837 0000231E 0FB60585DDFFFF      <1>     movzx eax, byte [arg1FCBret]
   838 00002325 3CFF                <1>     cmp al, -1
   839 00002327 0F8415F6FFFF        <1>     je badDriveError
   840                              <1> .noDrive:
   841                              <1>     ;Now we open the provided file
   842 0000232D E89E140000          <1>     call copyArgumentToSearchSpec
   843 00002332 488D15A6E1FFFF      <1>     lea rdx, searchSpec
   844 00002339 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   845 0000233E CD21                <1>     int 21h
   846 00002340 0F820EF6FFFF        <1>     jc badFileError
   847 00002346 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   848 00002349 B800440000          <1>     mov eax, 4400h  ;Get device word
   849 0000234E CD21                <1>     int 21h
   850 00002350 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   851 00002353 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   852                              <1>     ;Now we set this handle to be STDIO
   853 00002355 80CA03              <1>     or dl, 3    ;Set STDIO bits
   854 00002358 30F6                <1>     xor dh, dh
   855 0000235A B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   856 0000235F CD21                <1>     int 21h
   857                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   858 00002361 31C9                <1>     xor ecx, ecx    ;STDIN
   859 00002363 B446                <1>     mov ah, 46h
   860 00002365 CD21                <1>     int 21h
   861 00002367 FFC1                <1>     inc ecx         ;STDOUT
   862 00002369 B446                <1>     mov ah, 46h
   863 0000236B CD21                <1>     int 21h
   864 0000236D FFC1                <1>     inc ecx         ;STDERR
   865 0000236F B446                <1>     mov ah, 46h
   866 00002371 CD21                <1>     int 21h
   867 00002373 B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   868 00002375 CD21                <1>     int 21h
   869                              <1>     return
    13                              <2> %%_ret:
    14 00002377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   870                              <1> .badCharDev:
   871 00002378 488D1525E9FFFF      <1>     lea rdx, badDev
   872 0000237F B409                <1>     mov ah, 09h
   873 00002381 CD21                <1>     int 21h
   874 00002383 B43E                <1>     mov ah, 3Eh ;Close opened handle
   875 00002385 CD21                <1>     int 21h
   876                              <1>     return
    13                              <2> %%_ret:
    14 00002387 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   877                              <1> 
   878                              <1> cls:  
   879 00002388 B800440000          <1>     mov eax, 4400h  ;Get device info
   880 0000238D BB01000000          <1>     mov ebx, 1      ;for handle 1
   881 00002392 CD21                <1>     int 21h         ;in dx
   882 00002394 F7C280000000        <1>     test edx, devCharDev
   883 0000239A 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   884 0000239C F7C210000000        <1>     test edx, charDevFastOut
   885 000023A2 743E                <1>     jz .doAnsi
   886                              <1>     ;Test if Int 29h uses Int 30h
   887                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   888                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   889 000023A4 B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   890 000023A9 CD21                <1>     int 21h
   891                              <1> .biosCheck:
   892 000023AB 66813BCD30          <1>     cmp word [rbx], 30CDh
   893 000023B0 740C                <1>     je .biosConfirmed
   894 000023B2 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   895 000023B7 7429                <1>     je .doAnsi
   896 000023B9 48FFC3              <1>     inc rbx
   897 000023BC EBED                <1>     jmp short .biosCheck
   898                              <1> .biosConfirmed:
   899                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   900 000023BE B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   901 000023C0 31DB                <1>     xor ebx, ebx
   902 000023C2 CD30                <1>     int 30h
   903 000023C4 B40F                <1>     mov ah, 0Fh ;Get screen mode
   904 000023C6 CD30                <1>     int 30h
   905 000023C8 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   906 000023CB FECA                <1>     dec dl
   907 000023CD B619                <1>     mov dh, 25  ;Number of rows is standard
   908 000023CF 31C0                <1>     xor eax, eax
   909 000023D1 89C1                <1>     mov ecx, eax
   910 000023D3 B707                <1>     mov bh, 7   ;Screen attributes
   911 000023D5 B406                <1>     mov ah, 6   ;Scroll
   912 000023D7 CD30                <1>     int 30h
   913 000023D9 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   914 000023DB B700                <1>     mov bh, 0   ;Page 0
   915 000023DD B402                <1>     mov ah, 2
   916 000023DF CD30                <1>     int 30h
   917                              <1>     return
    13                              <2> %%_ret:
    14 000023E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   918                              <1> .doAnsi:
   919                              <1> ;4 chars in the ansi routine
   920                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   921                              <1> ; understand ANSI codes
   922 000023E2 488D351FEBFFFF      <1>     lea rsi, ansiCls
   923 000023E9 B904000000          <1>     mov ecx, 4
   924 000023EE B406                <1>     mov ah, 06h ;Raw char output
   925                              <1> .ansiLp:
   926 000023F0 AC                  <1>     lodsb   ;Get the char in 
   927 000023F1 88C2                <1>     mov dl, al
   928 000023F3 CD21                <1>     int 21h
   929 000023F5 FFC9                <1>     dec ecx
   930 000023F7 75F7                <1>     jnz .ansiLp
   931                              <1>     return
    13                              <2> %%_ret:
    14 000023F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   932                              <1> 
   933                              <1> break:
   934 000023FA F605A7DCFFFFFF      <1>     test byte [arg1Flg], -1
   935 00002401 752D                <1>     jnz .argumentProvided
   936                              <1>     ;Here we just get the status of break
   937 00002403 B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   938 00002408 CD21                <1>     int 21h
   939 0000240A 88D3                <1>     mov bl, dl
   940 0000240C 488D1533E9FFFF      <1>     lea rdx, breakIs
   941 00002413 B409                <1>     mov ah, 09h
   942 00002415 CD21                <1>     int 21h
   943 00002417 488D1523E9FFFF      <1>     lea rdx, onMes
   944 0000241E 488D0D16E9FFFF      <1>     lea rcx, offMes
   945 00002425 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   946 00002427 480F44D1            <1>     cmovz rdx, rcx
   947 0000242B B409                <1>     mov ah, 09h
   948 0000242D CD21                <1>     int 21h
   949                              <1>     return
    13                              <2> %%_ret:
    14 0000242F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   950                              <1> .argumentProvided:
   951 00002430 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   952 00002434 AD                  <1>     lodsd   ;Read the word
   953 00002435 89C3                <1>     mov ebx, eax
   954 00002437 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   955 0000243C C1EB10              <1>     shr ebx, 10h     ;Get high word low
   956 0000243F 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   957 00002444 7416                <1>     je .maybeOn
   958 00002446 663D4F46            <1>     cmp ax, "OF"
   959 0000244A 7523                <1>     jne .badOnOff
   960 0000244C 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   961 00002451 6681FB4620          <1>     cmp bx, "F "
   962 00002456 7517                <1>     jne .badOnOff
   963                              <1>     ;Set off
   964 00002458 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   965 0000245A EB0B                <1>     jmp short .setBreak
   966                              <1> .maybeOn:
   967 0000245C 663D4F4E            <1>     cmp ax, "ON"
   968 00002460 750D                <1>     jne .badOnOff
   969                              <1>     ;Set on
   970 00002462 BA01000000          <1>     mov edx, 1
   971                              <1> .setBreak:
   972 00002467 B801330000          <1>     mov eax, 3301h  ;Set break
   973 0000246C CD21                <1>     int 21h
   974                              <1>     return
    13                              <2> %%_ret:
    14 0000246E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   975                              <1> .badOnOff:
   976 0000246F 488D15A2EAFFFF      <1>     lea rdx, badOnOff
   977 00002476 B409                <1>     mov ah, 09h
   978 00002478 CD21                <1>     int 21h
   979                              <1>     return
    13                              <2> %%_ret:
    14 0000247A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   980                              <1> 
   981                              <1> verify:
   982 0000247B F60526DCFFFFFF      <1>     test byte [arg1Flg], -1
   983 00002482 752D                <1>     jnz .argumentProvided
   984                              <1>     ;Here we just get the status of break
   985 00002484 B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   986 00002489 CD21                <1>     int 21h
   987 0000248B 88C3                <1>     mov bl, al
   988 0000248D 488D15BCE8FFFF      <1>     lea rdx, verifyIs
   989 00002494 B409                <1>     mov ah, 09h
   990 00002496 CD21                <1>     int 21h
   991 00002498 488D15A2E8FFFF      <1>     lea rdx, onMes
   992 0000249F 488D0D95E8FFFF      <1>     lea rcx, offMes
   993 000024A6 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   994 000024A8 480F44D1            <1>     cmovz rdx, rcx
   995 000024AC B409                <1>     mov ah, 09h
   996 000024AE CD21                <1>     int 21h
   997                              <1>     return
    13                              <2> %%_ret:
    14 000024B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   998                              <1> .argumentProvided:
   999 000024B1 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
  1000 000024B5 AD                  <1>     lodsd   ;Read the word
  1001 000024B6 89C3                <1>     mov ebx, eax
  1002 000024B8 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
  1003 000024BD C1EB10              <1>     shr ebx, 10h     ;Get high word low
  1004 000024C0 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
  1005 000024C5 7416                <1>     je .maybeOn
  1006 000024C7 663D4F46            <1>     cmp ax, "OF"
  1007 000024CB 751F                <1>     jne .badOnOff
  1008 000024CD 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
  1009 000024D2 6681FB4620          <1>     cmp bx, "F "
  1010 000024D7 7513                <1>     jne .badOnOff
  1011                              <1>     ;Set off
  1012 000024D9 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
  1013 000024DB EB0A                <1>     jmp short .setVerify
  1014                              <1> .maybeOn:
  1015 000024DD 663D4F4E            <1>     cmp ax, "ON"
  1016 000024E1 7509                <1>     jne .badOnOff
  1017                              <1>     ;Set on
  1018 000024E3 31C0                <1>     xor eax, eax
  1019 000024E5 FFC0                <1>     inc eax ;AL=1 => VERIFY is on
  1020                              <1> .setVerify:
  1021 000024E7 B42E                <1>     mov ah, 2Eh  ;Set Verify
  1022 000024E9 CD21                <1>     int 21h
  1023                              <1>     return
    13                              <2> %%_ret:
    14 000024EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1024                              <1> .badOnOff:
  1025 000024EC 488D1525EAFFFF      <1>     lea rdx, badOnOff
  1026 000024F3 B409                <1>     mov ah, 09h
  1027 000024F5 CD21                <1>     int 21h
  1028                              <1>     return
    13                              <2> %%_ret:
    14 000024F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1029                              <1> 
  1030                              <1> rename:
  1031 000024F8 F605A9DBFFFFFF      <1>     test byte [arg1Flg], -1
  1032 000024FF 0F8446F4FFFF        <1>     jz badArgError
  1033 00002505 F6059FDBFFFFFF      <1>     test byte [arg2Flg], -1
  1034 0000250C 0F8439F4FFFF        <1>     jz badArgError    
  1035                              <1>     ;Initialise the variables!
  1036 00002512 488D3590E1FFFF      <1>     lea rsi, srcSpec
  1037 00002519 4889358DE2FFFF      <1>     mov qword [srcPtr], rsi
  1038 00002520 488D3504E2FFFF      <1>     lea rsi, destSpec
  1039 00002527 48893587E2FFFF      <1>     mov qword [destPtr], rsi
  1040                              <1>     ;Check the second path is just a filename!
  1041 0000252E 0FB60577DBFFFF      <1>     movzx eax, byte [arg2Off]
  1042 00002535 4C8B05D3DAFFFF      <1>     mov r8, qword [pspPtr]
  1043 0000253C 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1044 00002543 4801C6              <1>     add rsi, rax    ;Point to the path componant
  1045 00002546 488D3D92DFFFFF      <1>     lea rdi, searchSpec
  1046 0000254D 57                  <1>     push rdi
  1047 0000254E E822120000          <1>     call cpDelimPathToBufz  ;Copy the path to rdi
  1048 00002553 5F                  <1>     pop rdi
  1049 00002554 807F013A            <1>     cmp byte [rdi + 1], ":"  ;Is this a drive sep?
  1050 00002558 0F84EDF3FFFF        <1>     je badArgError  ;Cannot pass a path as the second argument
  1051 0000255E 4889FE              <1>     mov rsi, rdi
  1052                              <1> .destScan:
  1053 00002561 AC                  <1>     lodsb   ;Get the char
  1054 00002562 3A05C1DAFFFF        <1>     cmp al, byte [pathSep]  ;Ensure no path seps
  1055 00002568 0F84DDF3FFFF        <1>     je badArgError
  1056 0000256E 84C0                <1>     test al, al
  1057 00002570 75EF                <1>     jnz .destScan
  1058                              <1> ;Now store question marks over all of fcb1 and fcb2's name and drive specifier
  1059 00002572 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Use FCB1 for searchpath res
  1060 00002576 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
  1060 0000257F 3F                  <1>
  1061 00002580 B903000000          <1>     mov ecx, 3  ;24 bytes
  1062 00002585 F348AB              <1>     rep stosq
  1063 00002588 AB                  <1>     stosd   ;Plus 4 to get 28 = 16 + 1 + 11
  1064 00002589 488D354FDFFFFF      <1>     lea rsi, searchSpec
  1065 00002590 498D786C            <1>     lea rdi, qword [r8 + fcb2]  ;Place destination pattern here
  1066 00002594 B80D290000          <1>     mov eax, 290Dh
  1067 00002599 CD21                <1>     int 21h     
  1068 0000259B 50                  <1>     push rax    ;Save the WC signature
  1069 0000259C E817120000          <1>     call buildCommandPath   ;Copy the source path+searchspec to searchSpec
  1070 000025A1 488D3D37DFFFFF      <1>     lea rdi, searchSpec
  1071 000025A8 E84E110000          <1>     call findLastPathComponant  ;Go to the end of the path in rdi
  1072 000025AD 4889FE              <1>     mov rsi, rdi
  1073 000025B0 4889FB              <1>     mov rbx, rdi    ;Save the componant in rbx
  1074 000025B3 498D785C            <1>     lea rdi, qword [r8 + fcb1]  ;Now copy source pattern over!
  1075 000025B7 B80D290000          <1>     mov eax, 290Dh
  1076 000025BC CD21                <1>     int 21h
  1077 000025BE 59                  <1>     pop rcx ;Get back the WC signature from the destination path!
  1078 000025BF 88CC                <1>     mov ah, cl
  1079 000025C1 6685C0              <1>     test ax, ax ;If neither path has wildcards, go straight to renaming
  1080 000025C4 0F84EC000000        <1>     jz .noWC
  1081 000025CA 488D350EDFFFFF      <1>     lea rsi, searchSpec ;Are we are the head of the buffer?
  1082                              <1>     ;Now we check if we have a path to actually handle
  1083 000025D1 4839F3              <1>     cmp rbx, rsi
  1084 000025D4 7444                <1>     je .noPath
  1085 000025D6 C643FF00            <1>     mov byte [rbx - 1], 0   ;The previous char is a pathsep, overwrite it!
  1086 000025DA 488D35FEDEFFFF      <1>     lea rsi, searchSpec
  1087 000025E1 488D3DC1E0FFFF      <1>     lea rdi, srcSpec
  1088 000025E8 56                  <1>     push rsi
  1089 000025E9 E837100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1090 000025EE 5E                  <1>     pop rsi
  1091 000025EF 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1092 000025F2 8A0531DAFFFF        <1>     mov al, byte [pathSep]
  1093 000025F8 AA                  <1>     stosb       ;Store the pathsep and advance the pointer
  1094 000025F9 48893DADE1FFFF      <1>     mov qword [srcPtr], rdi ;Store this ptr here
  1095 00002600 488D3D24E1FFFF      <1>     lea rdi, destSpec
  1096 00002607 E819100000          <1>     call strcpy ;Copy the string, leave the ptrs past the null
  1097 0000260C 48FFCF              <1>     dec rdi     ;Point rdi to the null
  1098 0000260F AA                  <1>     stosb       ;Store the pathsep and adv the ptr
  1099 00002610 48893D9EE1FFFF      <1>     mov qword [destPtr], rdi
  1100 00002617 8843FF              <1>     mov byte [rbx - 1], al  ;Now replace the null with a pathsep again!
  1101                              <1> .noPath:
  1102                              <1>     ;Now we have where to copy the files to, we can start our work!
  1103 0000261A E885120000          <1>     call setDTA
  1104 0000261F 488D15B9DEFFFF      <1>     lea rdx, searchSpec
  1105 00002626 31C9                <1>     xor ecx, ecx    ;Rename works on normal and read only files only!
  1106 00002628 B8004E0000          <1>     mov eax, 4E00h  ;Find first!
  1107 0000262D CD21                <1>     int 21h
  1108 0000262F 0F8228F3FFFF        <1>     jc badDupFnf    ;If no file was found!
  1109                              <1> .wcLoop:
  1110                              <1>     ;Now build an FCB form of the name of the file we found in fcb1
  1111 00002635 488D3547DBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1112 0000263C 498D785C            <1>     lea rdi, qword [r8 + fcb1]
  1113 00002640 B801290000          <1>     mov eax, 2901h  ;Now we copy the name over, cleaning the FCB name
  1114 00002645 CD21                <1>     int 21h 
  1115                              <1>     ;Now depending on source and dest chars, we build a filename in renName
  1116 00002647 498D706D            <1>     lea rsi, qword [r8 + fcb2 + fcb.filename]    
  1117 0000264B 488D3D6BE1FFFF      <1>     lea rdi, renName    ;Start by copying the destination pattern
  1118 00002652 57                  <1>     push rdi
  1119 00002653 48A5                <1>     movsq
  1120 00002655 66A5                <1>     movsw
  1121 00002657 A4                  <1>     movsb
  1122 00002658 5F                  <1>     pop rdi
  1123 00002659 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename] ;Now start sourcing chars!
  1124 0000265D B90B000000          <1>     mov ecx, 11 ;11 chars to copy!
  1125                              <1> .wcNameMake:
  1126 00002662 AC                  <1>     lodsb   ;Get the char from the source string
  1127 00002663 803F3F              <1>     cmp byte [rdi], "?" ;Are we over a WC?
  1128 00002666 7502                <1>     jne .noStore    ;Dont store the char there
  1129 00002668 8807                <1>     mov byte [rdi], al  ;If we are over a wc, store the char there!
  1130                              <1> .noStore:
  1131 0000266A 48FFC7              <1>     inc rdi ;Goto next char position
  1132 0000266D FFC9                <1>     dec ecx
  1133 0000266F 75F1                <1>     jnz .wcNameMake
  1134                              <1> ;renName now has the FCB name for the file we wish to make!
  1135                              <1> ;Now make the two paths!
  1136 00002671 488D350BDBFFFF      <1>     lea rsi, cmdFFBlock + ffBlock.asciizName
  1137 00002678 488B3D2EE1FFFF      <1>     mov rdi, qword [srcPtr]
  1138 0000267F E8A10F0000          <1>     call strcpy ;Doesn't matter that we preserve the pointers
  1139 00002684 488D3532E1FFFF      <1>     lea rsi, renName
  1140 0000268B 488B3D23E1FFFF      <1>     mov rdi, qword [destPtr]
  1141 00002692 E888100000          <1>     call FCBToAsciiz
  1142 00002697 488D150BE0FFFF      <1>     lea rdx, srcSpec
  1143 0000269E 488D3D86E0FFFF      <1>     lea rdi, destSpec
  1144 000026A5 B800560000          <1>     mov eax, 5600h
  1145 000026AA CD21                <1>     int 21h     ;Fail silently on wildcard rename
  1146 000026AC B8004F0000          <1>     mov eax, 4F00h  ;Find next
  1147 000026B1 CD21                <1>     int 21h
  1148 000026B3 7380                <1>     jnc .wcLoop     ;And process it too!
  1149                              <1>     return          ;Else just return!
    13                              <2> %%_ret:
    14 000026B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1150                              <1> .noWC:
  1151 000026B6 E8FD100000          <1>     call buildCommandPath   ;Copy the source arg into searchspec
  1152 000026BB 0FB605EAD9FFFF      <1>     movzx eax, byte [arg2Off]
  1153 000026C2 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1154 000026C9 4801C6              <1>     add rsi, rax    ;Go to the start of the command to source chars
  1155 000026CC 488D3D58E0FFFF      <1>     lea rdi, destSpec
  1156 000026D3 57                  <1>     push rdi
  1157 000026D4 E89C100000          <1>     call cpDelimPathToBufz
  1158 000026D9 5F                  <1>     pop rdi
  1159 000026DA 488D15FEDDFFFF      <1>     lea rdx, searchSpec
  1160 000026E1 B800560000          <1>     mov eax, 5600h
  1161 000026E6 CD21                <1>     int 21h
  1162                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000026E8 73(B5)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1163 000026EA E96EF2FFFF          <1>     jmp badDupFnf   ;Always just return this
  1164                              <1> 
  1165                              <1> 
  1166                              <1> touch:
  1167                              <1> ;Temporarily used to create files
  1168 000026EF F605B2D9FFFFFF      <1>     test byte [arg1Flg], -1
  1169 000026F6 0F844FF2FFFF        <1>     jz badArgError
  1170 000026FC E8B7100000          <1>     call buildCommandPath
  1171 00002701 488D15D7DDFFFF      <1>     lea rdx, searchSpec
  1172 00002708 B8005B0000          <1>     mov eax, 5B00h  ;Create unique file 
  1173 0000270D 31C9                <1>     xor ecx, ecx
  1174 0000270F CD21                <1>     int 21h
  1175 00002711 721D                <1>     jc .touch1
  1176                              <1> .touchClose:
  1177 00002713 0FB7D8              <1>     movzx ebx, ax   ;Save the handle here
  1178 00002716 B80D120000          <1>     mov eax, 120Dh  ;Get date/time words from the DOS
  1179 0000271B CD2F                <1>     int 2fh
  1180 0000271D 89C1                <1>     mov ecx, eax    ;Move the time here
  1181 0000271F 87D1                <1>     xchg edx, ecx   ;Get them in the right place
  1182 00002721 B801570000          <1>     mov eax, 5701h  ;Set the date/time for bx
  1183 00002726 CD21                <1>     int 21h
  1184 00002728 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
  1185 0000272D CD21                <1>     int 21h
  1186                              <1>     return
    13                              <2> %%_ret:
    14 0000272F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1187                              <1> .touch1:
  1188 00002730 3C50                <1>     cmp al, errFilExist ;Does the file exist?
  1189 00002732 7509                <1>     jne .touchError ;If not, this is a proper error!
  1190 00002734 B8003D0000          <1>     mov eax, 3D00h  ;R/O open instead to update the access time!!
  1191 00002739 CD21                <1>     int 21h
  1192 0000273B 73D6                <1>     jnc .touchClose ;If this worked, close the handle immediately
  1193                              <1> .touchError:
  1194 0000273D 3C03                <1>     cmp al, errPnf
  1195 0000273F 0F8406F2FFFF        <1>     je badArgError
  1196 00002745 3C02                <1>     cmp al, errFnf
  1197 00002747 0F8419F2FFFF        <1>     je badFnf
  1198 0000274D E9D5F1FFFF          <1>     jmp badAccError
  1199                              <1>     
  1200                              <1> 
  1201                              <1> join:
  1202                              <1> ;Mock join command, to test join. Make an external command.
  1203                              <1> ;Mounts the A drive on C:\JOINTEST,0
  1204 00002752 F605AF000000FF      <1>     test byte [.joinOn], -1
  1205 00002759 743D                <1>     jz .okJoin
  1206                              <1> .joindisable:
  1207 0000275B B800520000          <1>     mov eax, 5200h  
  1208 00002760 CD21                <1>     int 21h
  1209                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1210 00002762 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1211 00002767 CD2A                <1>     int 2Ah
  1212 00002769 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1213 0000276D 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1214 00002771 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1215 00002777 C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1216 0000277A C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1217 0000277E FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1218 00002781 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1219 00002786 CD2A                <1>     int 2Ah
  1220 00002788 C6057900000000      <1>     mov byte [.joinOn], 0
  1221 0000278F 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1222 00002796 EB45                <1>     jmp short .joinExit
  1223                              <1> .okJoin:
  1224 00002798 C60569000000FF      <1>     mov byte [.joinOn], -1
  1225 0000279F B800520000          <1>     mov eax, 5200h  
  1226 000027A4 CD21                <1>     int 21h
  1227 000027A6 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1228 000027AA 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1229                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1230 000027AE B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1231 000027B3 CD2A                <1>     int 2Ah
  1232 000027B5 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1233 000027BB 4889DF              <1>     mov rdi, rbx
  1234 000027BE 488D3544000000      <1>     lea rsi, .joinPath
  1235 000027C5 B90C000000          <1>     mov ecx, .joinPathL
  1236 000027CA F3A4                <1>     rep movsb   ;Copy chars over
  1237 000027CC FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1238 000027CF B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1239 000027D4 CD2A                <1>     int 2Ah
  1240 000027D6 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1241                              <1> .joinExit:
  1242 000027DD B800090000          <1>     mov eax, 0900h
  1243 000027E2 CD21                <1>     int 21h
  1244                              <1>     return
    13                              <2> %%_ret:
    14 000027E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1245 000027E5 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1245 000027EE 61626C65640D0A24    <1>
  1246 000027F6 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1246 000027FF 7361626C65640D0A24  <1>
  1247 00002808 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1248 00002809 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1248 00002812 535400              <1>
  1249                              <1> .joinPathL  equ $ - .joinPath 
  1250                              <1> 
  1251                              <1> subst:
  1252                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1253                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1254 00002815 F605D3000000FF      <1>     test byte [.substOn], -1
  1255 0000281C 7443                <1>     jz .okSubst
  1256                              <1> .substdisable:
  1257 0000281E B800520000          <1>     mov eax, 5200h  
  1258 00002823 CD21                <1>     int 21h
  1259                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1260 00002825 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1261 0000282A CD2A                <1>     int 2Ah
  1262 0000282C 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1263 00002830 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1264 00002837 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1265 0000283D C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1266 00002840 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1267 00002844 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1268 0000284A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1269 0000284F CD2A                <1>     int 2Ah
  1270 00002851 C6059700000000      <1>     mov byte [.substOn], 0
  1271 00002858 488D157D000000      <1>     lea rdx, .substDisableMsg
  1272 0000285F EB61                <1>     jmp short .substExit
  1273                              <1> .okSubst:
  1274 00002861 C60587000000FF      <1>     mov byte [.substOn], -1
  1275 00002868 B800520000          <1>     mov eax, 5200h  
  1276 0000286D CD21                <1>     int 21h
  1277 0000286F B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1278 00002874 CD2A                <1>     int 2Ah
  1279 00002876 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1280 0000287A 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1281 00002881 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1282 00002885 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1283 0000288C 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1284 00002890 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1285                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1286 00002897 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1287 0000289D 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1288 000028A3 4889DF              <1>     mov rdi, rbx
  1289 000028A6 488D3543000000      <1>     lea rsi, .substPath
  1290 000028AD B90C000000          <1>     mov ecx, .substPathL
  1291 000028B2 F3A4                <1>     rep movsb   ;Copy chars over
  1292 000028B4 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1293 000028B9 CD2A                <1>     int 2Ah
  1294 000028BB 488D1508000000      <1>     lea rdx, .substEnableMsg
  1295                              <1> .substExit:
  1296 000028C2 B800090000          <1>     mov eax, 0900h
  1297 000028C7 CD21                <1>     int 21h
  1298                              <1>     return
    13                              <2> %%_ret:
    14 000028C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1299 000028CA 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1299 000028D3 6E61626C65640D0A24  <1>
  1300 000028DC 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1300 000028E5 697361626C65640D0A- <1>
  1300 000028EE 24                  <1>
  1301 000028EF 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1302 000028F0 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1302 000028F9 535400              <1>
  1303                              <1> .substPathL  equ $ - .substPath 
  1304                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1305                              <1> truename:
  1306 000028FC F605A5D7FFFFFF      <1>     test byte [arg1Flg], -1
  1307 00002903 0F8442F0FFFF        <1>     jz badArgError
  1308 00002909 E8AA0E0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1309 0000290E 488D35CADBFFFF      <1>     lea rsi, searchSpec     ;Store the path here
  1310 00002915 4889F7              <1>     mov rdi, rsi    ;Normalise the pathspec here
  1311 00002918 B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1312 0000291D CD21                <1>     int 21h
  1313 0000291F 730D                <1>     jnc .writePath
  1314 00002921 3C02                <1>     cmp al, errFnf
  1315 00002923 0F842BF0FFFF        <1>     je badFileError
  1316 00002929 E90BF0FFFF          <1>     jmp badParamError
  1317                              <1> .writePath:
  1318 0000292E 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1319 00002931 B9FFFFFFFF          <1>     mov ecx, -1
  1320 00002936 30C0                <1>     xor al, al
  1321 00002938 F2AE                <1>     repne scasb     ;Get the new len
  1322 0000293A F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1323 0000293C FFC9                <1>     dec ecx
  1324 0000293E BB01000000          <1>     mov ebx, 01
  1325 00002943 B440                <1>     mov ah, 40h
  1326 00002945 CD21                <1>     int 21h
  1327 00002947 E8BD0A0000          <1>     call printCRLF
  1328                              <1>     return
    13                              <2> %%_ret:
    14 0000294C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1329                              <1> 
  1330                              <1> label:
  1331                              <1> ;Displays/Changes/Deletes the file label
  1332 0000294D 488D1508000000      <1>     lea rdx, .l1
  1333 00002954 B800090000          <1>     mov eax, 0900h
  1334 00002959 CD21                <1>     int 21h
  1335                              <1>     return
    13                              <2> %%_ret:
    14 0000295B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1336 0000295C 0D0A46756E6374696F- <1> .l1: db CR,LF,"Function unimplemented",CR,LF,"$"
  1336 00002965 6E20756E696D706C65- <1>
  1336 0000296E 6D656E7465640D0A24  <1>
  1337                              <1> 
  1338                              <1> mklbl:
  1339                              <1>     ;lea rdx, .l1
  1340                              <1>     ;mov cx, 08h ;Make a label
  1341                              <1>     ;mov eax, 3C00h
  1342                              <1>     ;int 21h
  1343                              <1> 
  1344                              <1>     ;mov ebx, eax
  1345                              <1>     ;mov eax, 3E00h  ;Close the handle
  1346                              <1>     ;int 21h
  1347                              <1>     ;return
  1348                              <1> 
  1349                              <1> ;.l1: db "TESTLABEL",0
  1350 00002977 488D1508000000      <1>     lea rdx, .l1
  1351 0000297E B800160000          <1>     mov eax, 1600h  ;Create FCB
  1352 00002983 CD21                <1>     int 21h
  1353                              <1>     return
    13                              <2> %%_ret:
    14 00002985 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1354                              <1> .l1:
  1355                              <1>     istruc exFcb
  1356 00002986 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1357 00002987 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1358 0000298D 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1359 0000298E 544553544C414245    <1>     at exFcb.filename,  db "TESTLABE"
  1360 00002996 4C2020              <1>     at exFcb.fileext,   db "L  "
  1361 00002999 00000000            <1>     at exFcb.curBlock,  dd 0
  1362 0000299D 00<rep 15h>         <1>     iend 
  1363                              <1> rmlbl:
  1364 000029B2 488D1508000000      <1>     lea rdx, .l1
  1365 000029B9 B800130000          <1>     mov eax, 1300h  ;FCB delete (nice test to see if it works)
  1366 000029BE CD21                <1>     int 21h
  1367                              <1>     return
    13                              <2> %%_ret:
    14 000029C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1368                              <1> .l1:    ;FCB to volume label
  1369                              <1>     istruc exFcb
  1370 000029C1 FF                  <1>     at exFcb.extSig,    db -1   ;Indicate extended FCB
  1371 000029C2 00<rep 5h>08        <1>     at exFcb.attribute, db dirVolumeID
  1372 000029C8 00                  <1>     at exFcb.driveNum,  db 0    ;Current drive
  1373 000029C9 3F3F3F3F3F3F3F3F    <1>     at exFcb.filename,  db "????????"
  1374 000029D1 3F3F3F              <1>     at exFcb.fileext,   db "???"
  1375 000029D4 00000000            <1>     at exFcb.curBlock,  dd 0
  1376 000029D8 00<rep 15h>         <1>     iend 
  1377                              <1> 
  1378                              <1> rnlbl:
  1379 000029ED 488D1508000000      <1>     lea rdx, .l1
  1380 000029F4 B800170000          <1>     mov eax, 1700h
  1381 000029F9 CD21                <1>     int 21h
  1382                              <1>     return
    13                              <2> %%_ret:
    14 000029FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1383                              <1> .l1:
  1384                              <1>     istruc exRenFcb
  1385 000029FC FF                  <1>     at exRenFcb.extSig,     db -1
  1386 000029FD 00<rep 5h>08        <1>     at exRenFcb.attribute,  db dirVolumeID
  1387 00002A03 00                  <1>     at exRenFcb.driveNum,   db 0    ;Current drive
  1388 00002A04 3F3F3F3F3F3F3F3F    <1>     at exRenFcb.filename,   db "????????"
  1389 00002A0C 3F3F3F              <1>     at exRenFcb.fileext,    db "???"
  1390 00002A0F 00<rep 5h>54455354- <1>     at exRenFcb.newName,    db "TESTLABE"
  1390 00002A18 4C414245            <1>
  1391 00002A1C 4C3220              <1>     at exRenFcb.newExt,     db "L2 "
  1392 00002A1F 00<rep 4h>          <1>     iend
  1393                              <1> volume:
  1394                              <1> ;Only one argument. VOL X: (you can have more trash after the colon)
  1395 00002A23 F60581D6FFFFFF      <1>     test byte [arg2Flg], -1
  1396 00002A2A 0F851BEFFFFF        <1>     jnz badArgError
  1397 00002A30 F60571D6FFFFFF      <1>     test byte [arg1Flg], -1
  1398 00002A37 7507                <1>     jnz .notCurrentDrive
  1399 00002A39 E8E20B0000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1400 00002A3E EB31                <1>     jmp short .dirEP
  1401                              <1> .notCurrentDrive:
  1402 00002A40 E8730D0000          <1>     call buildCommandPath   ;Get the first argument into the searchSpec
  1403 00002A45 488D3593DAFFFF      <1>     lea rsi, searchSpec
  1404 00002A4C E8090C0000          <1>     call skipDelimiters     ;Move rsi to the first char of the command
  1405 00002A51 66AD                <1>     lodsw                   ;Get this word
  1406 00002A53 80FC3A              <1>     cmp ah, ":"             ;If this is not a colon, not a drive, error
  1407 00002A56 0F85EFEEFFFF        <1>     jne badArgError
  1408 00002A5C 8A0548D6FFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1409 00002A62 A8FF                <1>     test al, -1
  1410 00002A64 0F85D8EEFFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1411 00002A6A 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1412 00002A6F FFC8                <1>     dec eax ;Convert to 0 based number
  1413                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al  
  1414 00002A71 E82E0E0000          <1>     call setDTA     ;Ensure we have our DTA set correctly, preserving all regs
  1415 00002A76 488D15FCDBFFFF      <1>     lea rdx, volFcb
  1416 00002A7D FFC0                <1>     inc eax ;Get 1 based drive number
  1417 00002A7F 89C3                <1>     mov ebx, eax    ;Save the drive number in ebx
  1418 00002A81 884207              <1>     mov byte [rdx + exFcb.driveNum], al ;Store drive number we are 
  1419 00002A84 B800110000          <1>     mov eax, 1100h ;Find first FCB
  1420 00002A89 CD21                <1>     int 21h
  1421 00002A8B 50                  <1>     push rax
  1422                              <1>     ;Print the label intro spiel, using the given (valid) drive number
  1423 00002A8C 488D15B5DEFFFF      <1>     lea rdx, crlf
  1424 00002A93 B409                <1>     mov ah, 09h
  1425 00002A95 CD21                <1>     int 21h
  1426 00002A97 488D152FE1FFFF      <1>     lea rdx, volMes
  1427 00002A9E B409                <1>     mov ah, 09h
  1428 00002AA0 CD21                <1>     int 21h
  1429 00002AA2 88DA                <1>     mov dl, bl  ;Get the 1 based drive number
  1430 00002AA4 80C240              <1>     add dl, "@" ;Convert to a ASCII char to print
  1431 00002AA7 B402                <1>     mov ah, 02h
  1432 00002AA9 CD21                <1>     int 21h
  1433 00002AAB 58                  <1>     pop rax
  1434 00002AAC 84C0                <1>     test al, al ;If this is zero, the call succeeded
  1435 00002AAE 7409                <1>     jz .volIDOk
  1436 00002AB0 488D152DE1FFFF      <1>     lea rdx, volNo
  1437 00002AB7 EB19                <1>     jmp short .volEndPrint
  1438                              <1> .volIDOk:
  1439 00002AB9 488D151FE1FFFF      <1>     lea rdx, volOk
  1440 00002AC0 B409                <1>     mov ah, 09h
  1441 00002AC2 CD21                <1>     int 21h
  1442 00002AC4 C605ADD6FFFF24      <1>     mov byte [cmdFFBlock + exFcb.curBlock], "$"   ;Place a $ at the end of the name
  1443 00002ACB 488D159BD6FFFF      <1>     lea rdx, qword [cmdFFBlock + exFcb.filename]
  1444                              <1> .volEndPrint:
  1445 00002AD2 B409                <1>     mov ah, 09h
  1446 00002AD4 CD21                <1>     int 21h
  1447 00002AD6 488D156BDEFFFF      <1>     lea rdx, crlf
  1448 00002ADD B409                <1>     mov ah, 09h
  1449 00002ADF CD21                <1>     int 21h
  1450                              <1>     return
    13                              <2> %%_ret:
    14 00002AE1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1451                              <1> 
  1452                              <1> version:
  1453 00002AE2 488D155FDEFFFF      <1>     lea rdx, crlf
  1454 00002AE9 B409                <1>     mov ah, 09h
  1455 00002AEB CD21                <1>     int 21h
  1456 00002AED 488D15C7E0FFFF      <1>     lea rdx, dosVer
  1457 00002AF4 B409                <1>     mov ah, 09h
  1458 00002AF6 CD21                <1>     int 21h
  1459 00002AF8 E80C000000          <1>     call .printVersionNumber
  1460 00002AFD 488D1544DEFFFF      <1>     lea rdx, crlf
  1461 00002B04 B409                <1>     mov ah, 09h
  1462 00002B06 CD21                <1>     int 21h
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00002B08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> .printVersionNumber:
  1465 00002B09 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1466 00002B0B CD21                <1>     int 21h
  1467 00002B0D 50                  <1>     push rax
  1468 00002B0E 0FB6C0              <1>     movzx eax, al
  1469 00002B11 E8DB0C0000          <1>     call printDecimalWord
  1470 00002B16 B22E                <1>     mov dl, "."
  1471 00002B18 B402                <1>     mov ah, 02h
  1472 00002B1A CD21                <1>     int 21h
  1473 00002B1C 58                  <1>     pop rax
  1474 00002B1D 0FB6C4              <1>     movzx eax, ah
  1475 00002B20 E8CC0C0000          <1>     call printDecimalWord
  1476                              <1>     return
    13                              <2> %%_ret:
    14 00002B25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1477                              <1> 
  1478                              <1> 
  1479                              <1> memory:
  1480 00002B26 488B1DF2D4FFFF      <1>     mov rbx, qword [sysVars]
  1481 00002B2D 4885DB              <1>     test rbx, rbx
  1482 00002B30 7510                <1>     jnz .sysvarsOK
  1483 00002B32 488D1546E3FFFF      <1>     lea rdx, memBad0
  1484 00002B39 B409                <1>     mov ah, 09h
  1485 00002B3B CD21                <1>     int 21h
  1486 00002B3D E9520D0000          <1>     jmp freezePC.altEP
  1487                              <1> .sysvarsOK:
  1488                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1489                              <1>     ; and rcx to store Application memory
  1490 00002B42 31F6                <1>     xor esi, esi
  1491 00002B44 31FF                <1>     xor edi, edi
  1492 00002B46 31ED                <1>     xor ebp, ebp
  1493 00002B48 31C9                <1>     xor ecx, ecx
  1494 00002B4A 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1495 00002B4E 488B1B              <1>     mov rbx, qword [rbx]
  1496                              <1> .memLp:
  1497 00002B51 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1498 00002B54 7409                <1>     je .validMCB
  1499 00002B56 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1500 00002B59 0F8501010000        <1>     jne .badMCBFound
  1501                              <1> .validMCB:
  1502 00002B5F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1503 00002B62 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1504 00002B66 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1505 00002B6E 7505                <1>     jne .notDOS
  1506 00002B70 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1507 00002B73 EB21                <1>     jmp short .gotoNext
  1508                              <1> .notDOS:
  1509 00002B75 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1510 00002B7D 7505                <1>     jne .notFree
  1511 00002B7F 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1512 00002B82 EB12                <1>     jmp short .gotoNext
  1513                              <1> .notFree:
  1514 00002B84 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1515 00002B8C 7505                <1>     jne .notHole
  1516 00002B8E 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1517 00002B91 EB03                <1>     jmp short .gotoNext
  1518                              <1> .notHole:
  1519 00002B93 4801C1              <1>     add rcx, rax    ;Add to Application count
  1520                              <1> .gotoNext:
  1521 00002B96 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1522 00002B99 7407                <1>     je .endOfWalk
  1523 00002B9B 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1524 00002BA0 EBAF                <1>     jmp short .memLp
  1525                              <1> .endOfWalk:
  1526                              <1>     
  1527 00002BA2 488D1537E2FFFF      <1>     lea rdx, memDOS
  1528 00002BA9 B409                <1>     mov ah, 09h
  1529 00002BAB CD21                <1>     int 21h
  1530 00002BAD 4889F0              <1>     mov rax, rsi
  1531 00002BB0 E89D000000          <1>     call .mcbPrintAmount
  1532 00002BB5 488D15BCE2FFFF      <1>     lea rdx, memByte
  1533 00002BBC B409                <1>     mov ah, 09h
  1534 00002BBE CD21                <1>     int 21h
  1535                              <1> 
  1536 00002BC0 4885ED              <1>     test rbp, rbp
  1537 00002BC3 741E                <1>     jz .skipHole
  1538 00002BC5 488D1560E2FFFF      <1>     lea rdx, memHole
  1539 00002BCC B409                <1>     mov ah, 09h
  1540 00002BCE CD21                <1>     int 21h
  1541 00002BD0 4889E8              <1>     mov rax, rbp
  1542 00002BD3 E87A000000          <1>     call .mcbPrintAmount
  1543 00002BD8 488D1599E2FFFF      <1>     lea rdx, memByte
  1544 00002BDF B409                <1>     mov ah, 09h
  1545 00002BE1 CD21                <1>     int 21h
  1546                              <1> .skipHole:
  1547                              <1> 
  1548 00002BE3 488D151CE2FFFF      <1>     lea rdx, memApp
  1549 00002BEA B409                <1>     mov ah, 09h
  1550 00002BEC CD21                <1>     int 21h
  1551 00002BEE 4889C8              <1>     mov rax, rcx
  1552 00002BF1 E85C000000          <1>     call .mcbPrintAmount
  1553 00002BF6 488D157BE2FFFF      <1>     lea rdx, memByte
  1554 00002BFD B409                <1>     mov ah, 09h
  1555 00002BFF CD21                <1>     int 21h
  1556                              <1> 
  1557 00002C01 488D154AE2FFFF      <1>     lea rdx, memFree
  1558 00002C08 B409                <1>     mov ah, 09h
  1559 00002C0A CD21                <1>     int 21h
  1560 00002C0C 4889F8              <1>     mov rax, rdi
  1561 00002C0F E83E000000          <1>     call .mcbPrintAmount
  1562 00002C14 488D155DE2FFFF      <1>     lea rdx, memByte
  1563 00002C1B B409                <1>     mov ah, 09h
  1564 00002C1D CD21                <1>     int 21h
  1565                              <1> 
  1566 00002C1F 488D1594E1FFFF      <1>     lea rdx, memSys
  1567 00002C26 B409                <1>     mov ah, 09h
  1568 00002C28 CD21                <1>     int 21h
  1569 00002C2A 4889F0              <1>     mov rax, rsi
  1570 00002C2D 4801F8              <1>     add rax, rdi
  1571 00002C30 4801C8              <1>     add rax, rcx
  1572 00002C33 4801E8              <1>     add rax, rbp
  1573 00002C36 E817000000          <1>     call .mcbPrintAmount
  1574 00002C3B 488D1536E2FFFF      <1>     lea rdx, memByte
  1575 00002C42 B409                <1>     mov ah, 09h
  1576 00002C44 CD21                <1>     int 21h
  1577                              <1> 
  1578 00002C46 488D15FBDCFFFF      <1>     lea rdx, crlf
  1579 00002C4D B409                <1>     mov ah, 09h
  1580 00002C4F CD21                <1>     int 21h
  1581                              <1>     return
    13                              <2> %%_ret:
    14 00002C51 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1582                              <1> 
  1583                              <1> .mcbPrintAmount:
  1584 00002C52 51                  <1>     push rcx
  1585 00002C53 56                  <1>     push rsi
  1586 00002C54 57                  <1>     push rdi
  1587 00002C55 55                  <1>     push rbp
  1588 00002C56 E8960B0000          <1>     call printDecimalWord
  1589 00002C5B 5D                  <1>     pop rbp
  1590 00002C5C 5F                  <1>     pop rdi
  1591 00002C5D 5E                  <1>     pop rsi
  1592 00002C5E 59                  <1>     pop rcx
  1593                              <1>     return
    13                              <2> %%_ret:
    14 00002C5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1594                              <1> .badMCBFound:
  1595 00002C60 488D1558E2FFFF      <1>     lea rdx, memBad2
  1596 00002C67 B409                <1>     mov ah, 09h
  1597 00002C69 CD21                <1>     int 21h
  1598 00002C6B E9240C0000          <1>     jmp freezePC.altEP
  1599                              <1> 
  1600                              <1> type:
  1601 00002C70 F60531D4FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1602 00002C77 0F84CEECFFFF        <1>     jz badArgError
  1603 00002C7D F60527D4FFFFFF      <1>     test byte [arg2Flg], -1
  1604 00002C84 0F85C1ECFFFF        <1>     jnz badArgError         ;If this set, error
  1605 00002C8A 4C8B057ED3FFFF      <1>     mov r8, [pspPtr]
  1606 00002C91 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1607 00002C98 0FB6050AD4FFFF      <1>     movzx eax, byte [arg1Off]
  1608 00002C9F 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1609 00002CA2 803E0D              <1>     cmp byte [rsi], CR
  1610 00002CA5 0F84A0ECFFFF        <1>     je badArgError
  1611 00002CAB 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1612 00002CAF 750F                <1>     jne .noDrive
  1613 00002CB1 0FB605F2D3FFFF      <1>     movzx eax, byte [arg1FCBret]
  1614 00002CB8 3CFF                <1>     cmp al, -1
  1615 00002CBA 0F8482ECFFFF        <1>     je badDriveError
  1616                              <1> .noDrive:
  1617                              <1>     ;Now we open the provided file
  1618 00002CC0 E8F30A0000          <1>     call buildCommandPath
  1619 00002CC5 488D1513D8FFFF      <1>     lea rdx, searchSpec
  1620 00002CCC B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1621 00002CD1 CD21                <1>     int 21h
  1622 00002CD3 0F827BECFFFF        <1>     jc badFileError
  1623 00002CD9 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1624 00002CE0 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1625                              <1> .lp:
  1626 00002CE3 B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1627 00002CE8 B43F                <1>     mov ah, 3Fh ;Read handle
  1628 00002CEA CD21                <1>     int 21h
  1629 00002CEC 89C1                <1>     mov ecx, eax
  1630 00002CEE 67E317              <1>     jecxz .exit
  1631 00002CF1 53                  <1>     push rbx    ;Save the original in handle
  1632 00002CF2 BB01000000          <1>     mov ebx, 1  ;STDOUT
  1633 00002CF7 B440                <1>     mov ah, 40h
  1634 00002CF9 CD21                <1>     int 21h
  1635 00002CFB 5B                  <1>     pop rbx ;Get back the original read handle
  1636 00002CFC 720F                <1>     jc .exitBad
  1637 00002CFE 39C8                <1>     cmp eax, ecx
  1638 00002D00 74E1                <1>     je .lp
  1639 00002D02 FFC9                <1>     dec ecx ;One less for a ^Z
  1640 00002D04 39C8                <1>     cmp eax, ecx
  1641 00002D06 7505                <1>     jne .exitBad
  1642                              <1> .exit:
  1643 00002D08 B43E                <1>     mov ah, 3Eh ;Close handle
  1644 00002D0A CD21                <1>     int 21h
  1645                              <1>     return
    13                              <2> %%_ret:
    14 00002D0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1646                              <1> .exitBad:
  1647                              <1>     ;Print a disk error message... use a table to build the message but for
  1648                              <1>     ; now, just exit
  1649                              <1>     ;If it is a char device, don't print a error
  1650 00002D0D EBF9                <1>     jmp short .exit
  1651                              <1> 
  1652                              <1> exit:
  1653 00002D0F F60515D3FFFFFF      <1>     test byte [permaSwitch], -1
  1654                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D16 75(0C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1655 00002D18 488B05F8D2FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1656 00002D1F 483DFFFFFFFF        <1>     cmp rax, -1
  1657                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D25 74(0C)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1658 00002D27 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1659                              <1> 
  1660 00002D2B 488B15FAD2FFFF      <1>     mov rdx, qword [parentInt22]
  1661 00002D32 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1662 00002D36 B822250000          <1>     mov eax, 2522h
  1663 00002D3B CD21                <1>     int 21h
  1664                              <1> 
  1665 00002D3D B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1666 00002D42 CD21                <1>     int 21h
  1667                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 00002D44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1668                              <1> 
  1669                              <1> launchChild:
  1670                              <1>     ;We execute an external command here.
  1671                              <1>     ;Here we will behave like COMMAND.COM for later DOS and honour extensions.
  1672                              <1>     ;COMMAND.COM on DOS 3.3 doesn't honour the extension. If there exists a 
  1673                              <1>     ;foo.com and a foo.exe in the same dir and you type foo.exe it launches 
  1674                              <1>     ;foo.com. We will not honour this behaviour as this kinda sucks!
  1675                              <1>     ;We know the drive we are on is valid so no need to double check that!
  1676 00002D45 E85A0B0000          <1>     call setDTA         
  1677                              <1>     ;Now we rebuild the cmdFcb from the last path componant.
  1678 00002D4A 488D3DE5D5FFFF      <1>     lea rdi, cmdPathSpec
  1679 00002D51 4889FE              <1>     mov rsi, rdi
  1680 00002D54 B811120000          <1>     mov eax, 1211h  ;Normalise this path first
  1681 00002D59 CD2F                <1>     int 2fh
  1682 00002D5B E89B090000          <1>     call findLastPathComponant  ;Point rdi to last path componant
  1683 00002D60 4889FE              <1>     mov rsi, rdi    ;Source here
  1684 00002D63 488D3DEBD3FFFF      <1>     lea rdi, cmdFcb
  1685 00002D6A B801290000          <1>     mov eax, 2901h  ;Skip leading blanks, clean the FCB name
  1686 00002D6F CD21                <1>     int 21h
  1687 00002D71 84C0                <1>     test al, al     ;Don't allow any wildcards in the name
  1688 00002D73 0F850DECFFFF        <1>     jnz badCmdError
  1689 00002D79 4831ED              <1>     xor rbp, rbp    ;rbp keeps a ptr to the next PATH componant to search in
  1690                              <1> .pathLoop:
  1691 00002D7C 488D35DBD3FFFF      <1>     lea rsi, qword [cmdFcb + fcb.fileext]
  1692 00002D83 488D3DAFE1FFFF      <1>     lea rdi, extStr
  1693 00002D8A BA03000000          <1>     mov edx, 3  ;Number of valid extension types
  1694                              <1> .extLp:
  1695 00002D8F 56                  <1>     push rsi    ;Save the ptr to the head of the file extension
  1696 00002D90 B903000000          <1>     mov ecx, 3  ;Number of chars per extension
  1697 00002D95 F3A6                <1>     rep cmpsb   ;Compare the two strings
  1698 00002D97 5E                  <1>     pop rsi
  1699 00002D98 85C9                <1>     test ecx, ecx
  1700 00002D9A 7452                <1>     jz .extFnd      ;If all three chars were equal, we have valid ext!
  1701 00002D9C 4801CF              <1>     add rdi, rcx    ;Add the remaining chars to rdi
  1702 00002D9F FFCA                <1>     dec edx         ;Else one less extension type to check
  1703 00002DA1 75EC                <1>     jnz .extLp
  1704                              <1>     ;None of the three extensions were ok, so check if it is all spaces.
  1705                              <1>     ;If not, error.
  1706 00002DA3 B903000000          <1>     mov ecx, 3
  1707 00002DA8 4889F7              <1>     mov rdi, rsi
  1708 00002DAB B020                <1>     mov al, SPC
  1709 00002DAD F3AE                <1>     rep scasb   
  1710 00002DAF 85C9                <1>     test ecx, ecx   ;Are all three chars spaces?
  1711 00002DB1 0F85CFEBFFFF        <1>     jnz badCmdError    ;If not, error!
  1712                              <1>     ;Now we search first with COM, then EXE, then BAT. 
  1713 00002DB7 488D357BE1FFFF      <1>     lea rsi, extStr
  1714 00002DBE BB03000000          <1>     mov ebx, 3  ;Use ebx as the attempt counter
  1715                              <1> .extSrchLp:
  1716 00002DC3 488D3D94D3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1717 00002DCA B903000000          <1>     mov ecx, 3
  1718 00002DCF F3A4                <1>     rep movsb   ;Copy the extension over!
  1719 00002DD1 E85A010000          <1>     call .prepAndSearch     ;Prep and search path in rdx.
  1720 00002DD6 731D                <1>     jnc .extSrchFnd         ;If CF=NC, find found!
  1721 00002DD8 FFCB                <1>     dec ebx                 ;Decrement extension counter
  1722 00002DDA 75E7                <1>     jnz .extSrchLp
  1723                              <1> ;Here we have ran out of extensions to search for! Now if the path was rel
  1724                              <1> ; we start prepending path componants and trying again. To do this, we reset
  1725                              <1> ; by setting the fcb extension back to all spaces.
  1726 00002DDC 488D3D7BD3FFFF      <1>     lea rdi, qword [cmdFcb + fcb.fileext]
  1727 00002DE3 B903000000          <1>     mov ecx, 3
  1728 00002DE8 B020                <1>     mov al, SPC
  1729 00002DEA F3AA                <1>     rep stosb   ;Store back the empty extension!
  1730 00002DEC EB50                <1>     jmp short .pathHandle
  1731                              <1> .extFnd:
  1732                              <1> ;Here if the file had the right extension.
  1733 00002DEE E83D010000          <1>     call .prepAndSearch    ;Prep and search path in rdx.
  1734 00002DF3 7249                <1>     jc .pathHandle
  1735                              <1> .extSrchFnd:
  1736                              <1> ;Pathspec in rdx exists, so now we prepare to launch it! First check it is not
  1737                              <1> ; a BAT. If it is, separate handling!
  1738 00002DF5 803D62D3FFFF42      <1>     cmp byte [cmdFcb + fcb.fileext], "B"    ;If it is B, its a batch!
  1739 00002DFC 0F84FA000000        <1>     je .batLaunch
  1740 00002E02 488D1D87D3FFFF      <1>     lea rbx, launchBlock
  1741 00002E09 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1742 00002E0D 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1743 00002E10 498D8080000000      <1>     lea rax, qword [r8 + cmdTail]
  1744 00002E17 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1745 00002E1B 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1746 00002E1F 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1747 00002E23 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1748 00002E27 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1749 00002E2B 488D1504D5FFFF      <1>     lea rdx, cmdPathSpec
  1750 00002E32 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1751 00002E37 CD21                <1>     int 21h
  1752 00002E39 E948EBFFFF          <1>     jmp badCmdError    ;If something goes wrong, error out
  1753                              <1> .pathHandle:        
  1754                              <1> ;First check if rbp is null. If it is, its a first time entry. 
  1755                              <1> ;al has error code!
  1756 00002E3E 4885ED              <1>     test rbp, rbp
  1757 00002E41 0F85A3000000        <1>     jnz .pathReentry
  1758                              <1> ;Now check if the command we recieved included an absolute path.
  1759                              <1> ;If so, we don't do path substitution and just fail at this point
  1760 00002E47 488D35E8D4FFFF      <1>     lea rsi, cmdPathSpec
  1761 00002E4E 66AD                <1>     lodsw   ;Get the first two chars
  1762 00002E50 3A05D3D1FFFF        <1>     cmp al, byte [pathSep]  ;If char 1 a pathsep, we are absolute!
  1763 00002E56 0F842AEBFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1764 00002E5C 84E4                <1>     test ah, ah ;If the second char is nul, its a 1 char command, must be rel
  1765 00002E5E 7412                <1>     je .pathGetEnv
  1766 00002E60 80FC3A              <1>     cmp ah, ":" ;If char 2 is colon, must be drive sep (not chardev)
  1767 00002E63 750D                <1>     jne .pathGetEnv ;Therefore, if not equal, relative path!
  1768 00002E65 AC                  <1>     lodsb   ;Get the third char
  1769 00002E66 3A05BDD1FFFF        <1>     cmp al, byte [pathSep]  ;If this is a pathsep, we are absolute!
  1770 00002E6C 0F8414EBFFFF        <1>     je badCmdError  ;Therefore, exit bad!
  1771                              <1> .pathGetEnv:
  1772                              <1> ;Now get a pointer to the environment and search for PATH=
  1773                              <1> ;We only take the final portion of the path and add it to each path componant
  1774                              <1> ;This agrees with DOS 3.3
  1775 00002E72 E8630A0000          <1>     call checkEnvGoodAndGet   ;Ensure our env is double null terminated!
  1776 00002E77 0F8409EBFFFF        <1>     jz badCmdError  ;If returned ZF=ZE, error out!
  1777                              <1>     ;If we are here, env is double null terminated. rsi has the env ptr
  1778                              <1>     ;Now we know we dont have to keep track of chars!!
  1779 00002E7D 488D3DD9E0FFFF      <1>     lea rdi, pathEVar   ;Get a ptr to the path env string
  1780 00002E84 E8B20A0000          <1>     call searchForEnvVar
  1781 00002E89 0F82F7EAFFFF        <1>     jc badCmdError      ;If PATH not found, exit error!
  1782 00002E8F 4889F7              <1>     mov rdi, rsi        ;Move the PATH= ptr to rdi
  1783 00002E92 4881C705000000      <1>     add rdi, 5          ;Go past the PATH= portion of the env string
  1784                              <1> .pathRejoin:
  1785 00002E99 803F00              <1>     cmp byte [rdi], 0   ;Is the first char after equals a null?
  1786 00002E9C 0F84E4EAFFFF        <1>     je badCmdError      ;Empty or no more path? Error!
  1787 00002EA2 4889FE              <1>     mov rsi, rdi        ;This is a ; or null delimited ASCII string
  1788 00002EA5 488D3D33D6FFFF      <1>     lea rdi, searchSpec ;Build the path in searchSpec
  1789                              <1>     ;WARNING!!! THIS COULD CAUSE A BUFFER OVERFLOW BUG!!
  1790                              <1>     ;SHOULD CHECK THE LENGTH OF THE PATH COMPONANT THAT WE ARE 
  1791                              <1>     ; SPLICING ON. IF IT IS LONGER THAN 64 CHARS WE IGNORE IT!!
  1792                              <1>     ;This is impossible to do if env edited by COMMAND.COM
  1793 00002EAC E8AE080000          <1>     call cpDelimOrCtrlStringToBufz      ;Copies upto ; or null 
  1794 00002EB1 48FFCE              <1>     dec rsi ;Point rsi to the char which delimited the path
  1795 00002EB4 4889F5              <1>     mov rbp, rsi    ;Point rbp to this char
  1796 00002EB7 48FFCF              <1>     dec rdi ;Point to the null terminator
  1797 00002EBA 8A0569D1FFFF        <1>     mov al, byte [pathSep]
  1798 00002EC0 3847FF              <1>     cmp byte [rdi - 1], al
  1799 00002EC3 7401                <1>     je .skipPathsep ;Need for rootdir as a double slash start is a netpath
  1800 00002EC5 AA                  <1>     stosb   ;Store a pathsep onto the null terminator
  1801                              <1> .skipPathsep: ;Affects double slashes in path (but thats ok)
  1802 00002EC6 488D3589D2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1803 00002ECD E84D080000          <1>     call FCBToAsciiz    ;Store the name here and null terminate
  1804 00002ED2 488D3506D6FFFF      <1>     lea rsi, searchSpec 
  1805 00002ED9 488D3D56D4FFFF      <1>     lea rdi, cmdPathSpec
  1806 00002EE0 E840070000          <1>     call strcpy         ;Copy the string to the cmdPathSpec
  1807 00002EE5 E992FEFFFF          <1>     jmp .pathLoop       ;And try again, now in this path!
  1808                              <1> .pathReentry:
  1809 00002EEA 807D0000            <1>     cmp byte [rbp], 0   ;Each env string is finally null terminated.
  1810 00002EEE 0F8492EAFFFF        <1>     je badCmdError
  1811                              <1> ;Currently, because we dont swap drives, we wont print this message.
  1812                              <1> ;Not really a big deal...
  1813                              <1>     ;cmp al, errBadDrv
  1814                              <1>     ;jne .pathDrvOk
  1815                              <1>     ;lea rdx, badDrvSrch ;Print the drive was invalid!
  1816                              <1>     ;mov eax, 0900h
  1817                              <1>     ;int 21h
  1818                              <1> ;.pathDrvOk:
  1819 00002EF4 48FFC5              <1>     inc rbp             ;Go to the start of the next componant
  1820 00002EF7 4889EF              <1>     mov rdi, rbp        ;So rdi points to the first char of next comp
  1821 00002EFA EB9D                <1>     jmp short .pathRejoin   ;Check if null, and if not, proceed again!
  1822                              <1> 
  1823                              <1> .batLaunch:
  1824 00002EFC 488D1508000000      <1>     lea rdx, .batMsg
  1825 00002F03 B800090000          <1>     mov eax, 0900h
  1826 00002F08 CD21                <1>     int 21h
  1827                              <1>     return
    13                              <2> %%_ret:
    14 00002F0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1828 00002F0B 424154434820707265- <1> .batMsg db "BATCH preprocessor not implemented",CR,LF,"$"
  1828 00002F14 70726F636573736F72- <1>
  1828 00002F1D 206E6F7420696D706C- <1>
  1828 00002F26 656D656E7465640D0A- <1>
  1828 00002F2F 24                  <1>
  1829                              <1> 
  1830                              <1> .prepAndSearch:
  1831                              <1> ;Copies over the name and extension in UC to the last componant of the 
  1832                              <1> ;cmdPathSpec and null terminates. 
  1833                              <1> ;Input: cmdFcb name + ext setup. 
  1834                              <1> ;Output: rdx -> Filled in cmdPathSpec 
  1835                              <1> ;        CF=NC, file in rdx found. CF=CY, file in rdx not found! al = errcde
  1836 00002F30 51                  <1>     push rcx
  1837 00002F31 56                  <1>     push rsi
  1838 00002F32 57                  <1>     push rdi
  1839 00002F33 488D3DFCD3FFFF      <1>     lea rdi, cmdPathSpec 
  1840 00002F3A 4889FA              <1>     mov rdx, rdi    ;Save the path ptr in rdx
  1841 00002F3D E8B9070000          <1>     call findLastPathComponant  ;Point rdi to the final path componant 
  1842 00002F42 488D350DD2FFFF      <1>     lea rsi, qword [cmdFcb + fcb.filename]
  1843 00002F49 E8D1070000          <1>     call FCBToAsciiz    ;Get an asciiz suffix
  1844 00002F4E B8004E0000          <1>     mov eax, 4E00h  ;Find first
  1845 00002F53 31C9                <1>     xor ecx, ecx  ;Only Normal and RO files searchable!
  1846 00002F55 CD21                <1>     int 21h
  1847 00002F57 5F                  <1>     pop rdi
  1848 00002F58 5E                  <1>     pop rsi
  1849 00002F59 59                  <1>     pop rcx
  1850                              <1>     return
    13                              <2> %%_ret:
    14 00002F5A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1851                              <1> 
  1852                              <1> set:
  1853 00002F5B F60546D1FFFFFF      <1>     test byte [arg1Flg], -1
  1854 00002F62 7539                <1>     jnz .editEnv
  1855                              <1>     ;Here we just print the environment.
  1856 00002F64 E871090000          <1>     call checkEnvGoodAndGet 
  1857 00002F69 0F84AFE9FFFF        <1>     jz badEnvSpaceError
  1858                              <1>     ;We know this is a good env so keep going! env ptr in rsi
  1859 00002F6F 4889F7              <1>     mov rdi, rsi
  1860 00002F72 4889F2              <1>     mov rdx, rsi
  1861                              <1> .findLp:
  1862 00002F75 B9FFFFFFFF          <1>     mov ecx, -1
  1863 00002F7A 31C0                <1>     xor eax, eax
  1864                              <1> .scanLp:
  1865 00002F7C F2AE                <1>     repne scasb
  1866 00002F7E 75FC                <1>     jne .scanLp
  1867 00002F80 F7D1                <1>     not ecx ;Get count and subtract by 1 to drop end null
  1868                              <1>     ;Else, we now print this environment variable and CRLF it
  1869                              <1>     ;rdx points to the start of the string aleady
  1870                              <1>     ;ecx has the bytes to print
  1871 00002F82 BB01000000          <1>     mov ebx, 1      ;Print to STDOUT
  1872 00002F87 B800400000          <1>     mov eax, 4000h  ;Print to handle
  1873 00002F8C CD21                <1>     int 21h
  1874 00002F8E E876040000          <1>     call printCRLF
  1875 00002F93 803F00              <1>     cmp byte [rdi], 0   ;Is this a second null.
  1876                              <1>     rete    ;Return if it is
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F96 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1877 00002F98 4889FA              <1>     mov rdx, rdi   
  1878 00002F9B EBD8                <1>     jmp short .findLp
  1879                              <1> .editEnv:
  1880 00002F9D E838090000          <1>     call checkEnvGoodAndGet
  1881 00002FA2 0F8476E9FFFF        <1>     jz badEnvSpaceError
  1882 00002FA8 0FB605FAD0FFFF      <1>     movzx eax, byte [arg1Off]
  1883 00002FAF 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
  1884 00002FB6 4801C6              <1>     add rsi, rax            ;rsi -> EnvvarName=[string]<CR>
  1885                              <1> .altEp:
  1886 00002FB9 4889F7              <1>     mov rdi, rsi            ;Point rdi to the start of the string
  1887 00002FBC B00D                <1>     mov al, CR              ;Search for the CR
  1888 00002FBE 410FB68880000000    <1>     movzx ecx, byte [r8 + cmdLineCnt]   ;Get the char count of the tail
  1889 00002FC6 89CB                <1>     mov ebx, ecx            ;Save this count 
  1890 00002FC8 53                  <1>     push rbx                ;Save this count on the stack too!
  1891 00002FC9 F2AE                <1>     repne scasb             ;Now get the length of this env string
  1892 00002FCB 29CB                <1>     sub ebx, ecx            ;Get the length of the string with <CR>
  1893 00002FCD 66891D7AD8FFFF      <1>     mov word [envVarSz], bx ;Store the count
  1894 00002FD4 59                  <1>     pop rcx                 ;Get the char count back!
  1895 00002FD5 89CB                <1>     mov ebx, ecx            
  1896 00002FD7 4889F7              <1>     mov rdi, rsi            ;Point rdi again to the cmdTail
  1897 00002FDA B03D                <1>     mov al, "="             ;Scan for an equals sign
  1898 00002FDC F2AE                <1>     repne scasb
  1899 00002FDE 0F8531E9FFFF        <1>     jne badSyntaxError      ;There must be an equal sign here!
  1900 00002FE4 29CB                <1>     sub ebx, ecx            ;Get the count with space for a terminating 0
  1901 00002FE6 66891D63D8FFFF      <1>     mov word [envVarNamSz], bx
  1902 00002FED 803F0D              <1>     cmp byte [rdi], CR      ;If the path is just PATH=<CR>, free var!
  1903 00002FF0 7477                <1>     je .delEnvVar           ;Free the envvar and return
  1904 00002FF2 56                  <1>     push rsi                ;Save the ptr to the start of the envvar
  1905 00002FF3 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1906 00002FF6 E840090000          <1>     call searchForEnvVar    ;Look for the environment variable
  1907 00002FFB 7205                <1>     jc .editNewEnv          ;Create a new environment variable!
  1908 00002FFD E867090000          <1>     call envFree            ;Free the var in rsi
  1909                              <1> .editNewEnv:
  1910 00003002 E89B090000          <1>     call getFreeSpace       ;Get the free space in env in ecx
  1911 00003007 E8BB090000          <1>     call getPtrToEndOfEnv   ;Point to the free space in rdi
  1912 0000300C 5E                  <1>     pop rsi                 ;Get back the ptr to the string
  1913 0000300D 31C0                <1>     xor eax, eax            ;Prepare null length!
  1914 0000300F 81F904000000        <1>     cmp ecx, 4              ;Minimal env string size is 4, i.e. "X=A<CR>"
  1915 00003015 0F42C8              <1>     cmovb ecx, eax          ;If below, essentially 0 bytes
  1916 00003018 720B                <1>     jb .reallocTry          ;Try to reallocate!
  1917 0000301A FFC9                <1>     dec ecx                 ;Save a byte for end magic null
  1918 0000301C 663B0D2BD8FFFF      <1>     cmp cx, word [envVarSz] ;Do we have enough space?
  1919 00003023 7327                <1>     jae .nameCp             ;If above or equal, we good to go!
  1920                              <1> .reallocTry:
  1921                              <1>     ;Here we try to reallocate the environment. If we cannot reallocate
  1922                              <1>     ; we proceed with the environment size.
  1923 00003025 E8B2090000          <1>     call growEnvBlock   ;Attempt to grow the environment
  1924 0000302A 7319                <1>     jnc .reallocOk
  1925 0000302C 0F84ECE8FFFF        <1>     jz badEnvSpaceError    ;Max environment space
  1926                              <1>     ;Here we couldnt reallocate, but we check to see if we can fit
  1927                              <1>     ; partially the variable into the env. If so we do that. If the name
  1928                              <1>     ; cannot fit, we don't bother
  1929                              <1>     ;Min size of envVarNamSz is 2 i.e. "X="
  1930 00003032 663B0D17D8FFFF      <1>     cmp cx, word [envVarNamSz]  ;cx has the free space in environment
  1931                              <1>     retb    ;Fail silently if we cant, catches the cx=0,1 case!
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00003039 7301                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 0000303B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1932 0000303C E8DDE8FFFF          <1>     call badEnvSpaceError   ;Print the env space error!
  1933 00003041 FFC9                <1>     dec ecx  ;Make space for the end null of the environment! Wont overflow!
  1934 00003043 EB07                <1>     jmp short .nameCp   ;Else, just copy what we can
  1935                              <1> .reallocOk:
  1936                              <1>     ;Here we have all the space to just copy the full path
  1937 00003045 0FB70D02D8FFFF      <1>     movzx ecx, word [envVarSz]
  1938                              <1> .nameCp:
  1939                              <1> ;Now copy over the env var, ecx = #ofchars to copy
  1940                              <1> ;Always enough memory for name= here
  1941 0000304C AC                  <1>     lodsb
  1942 0000304D E8F6050000          <1>     call ucChar
  1943 00003052 AA                  <1>     stosb
  1944 00003053 66FFC9              <1>     dec cx      ;Always decrement this count
  1945 00003056 3C3D                <1>     cmp al, "="
  1946 00003058 75F2                <1>     jne .nameCp
  1947                              <1> .exitNameCp:
  1948 0000305A AC                  <1>     lodsb
  1949 0000305B 3C0D                <1>     cmp al, CR
  1950 0000305D 7405                <1>     je .exitCp
  1951 0000305F AA                  <1>     stosb
  1952 00003060 FFC9                <1>     dec ecx
  1953 00003062 75F6                <1>     jnz .exitNameCp
  1954                              <1> .exitCp:
  1955 00003064 31C0                <1>     xor eax, eax
  1956 00003066 66AB                <1>     stosw   ;Store the final null word
  1957                              <1>     return
    13                              <2> %%_ret:
    14 00003068 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1958                              <1> .delEnvVar:
  1959                              <1>     ;rsi -> Start of the envvar name in user buffer
  1960 00003069 4889F7              <1>     mov rdi, rsi            ;Input= rdi -> String to search for
  1961 0000306C E8CA080000          <1>     call searchForEnvVar    ;Look for the environment variable
  1962 00003071 7205                <1>     jc .delEnvVarSkip
  1963 00003073 E8F1080000          <1>     call envFree    ;Free the env var at rsi
  1964                              <1> .delEnvVarSkip:
  1965 00003078 F8                  <1>     clc             ;Clear CF if the var doesnt exist
  1966                              <1>     return
    13                              <2> %%_ret:
    14 00003079 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1967                              <1> 
  1968                              <1> pathEdit:
  1969                              <1> ;Each path componant !!must!! be terminated by a semicolon. 
  1970                              <1> ;No separators allowed either side of the semicolon. Spaces allowed ONLY 
  1971                              <1> ; after the equals sign. If what follows a semicolon is a terminator, we 
  1972                              <1> ; end there. Error with too many arguments error!
  1973                              <1> ;If after the equals sign there is nothing, we just print the path!
  1974                              <1> ;Gotta process the command line ourselves first
  1975 0000307A E85B080000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  1976 0000307F 0F8499E8FFFF        <1>     jz badEnvSpaceError
  1977                              <1>     ;Now we know we can use r8 to get the envptr when needed
  1978 00003085 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  1979 0000308C E8AD000000          <1>     call .skipPathDelimiters
  1980 00003091 3C0D                <1>     cmp al, CR
  1981 00003093 7466                <1>     je .printPath
  1982                              <1> ;Else use the set command to setup the path in the searchSpec.
  1983 00003095 56                  <1>     push rsi    ;Save the first char of the command line string
  1984 00003096 488D35C0DEFFFF      <1>     lea rsi, pathEVar
  1985 0000309D 488D3D3BD4FFFF      <1>     lea rdi, searchSpec
  1986 000030A4 E87C050000          <1>     call strcpy
  1987 000030A9 48FFCF              <1>     dec rdi     ;Point to the terminating null
  1988 000030AC 5E                  <1>     pop rsi     ;Get back the first char of the pathstring
  1989 000030AD 31C9                <1>     xor ecx, ecx    ;Make a count of chars
  1990                              <1> .cpLp:
  1991 000030AF AC                  <1>     lodsb
  1992 000030B0 3C0D                <1>     cmp al, CR
  1993 000030B2 7411                <1>     je .cpLpExit
  1994 000030B4 E891000000          <1>     call .isALPathDelimiter ;Any path delims now are exit conditions!
  1995 000030B9 740A                <1>     je .cpLpExit
  1996 000030BB E888050000          <1>     call ucChar ;Uppercase the char
  1997 000030C0 AA                  <1>     stosb       ;Store it
  1998 000030C1 FFC1                <1>     inc ecx     ;Inc the count, CR not inclusive!
  1999 000030C3 EBEA                <1>     jmp short .cpLp
  2000                              <1> .cpLpExit:
  2001                              <1>     ;Remove trailing semicolons
  2002 000030C5 807FFF3B            <1>     cmp byte [rdi - 1], ";" ;Check back a char
  2003 000030C9 7507                <1>     jne .cpLpNoIntervene
  2004 000030CB FFC9                <1>     dec ecx     ;Reduce the count by one
  2005 000030CD 48FFCF              <1>     dec rdi     ;Go back a char
  2006 000030D0 EBF3                <1>     jmp short .cpLpExit ;Keep removing
  2007                              <1> .cpLpNoIntervene:
  2008 000030D2 B00D                <1>     mov al, CR  ;Now we store the terminator!
  2009 000030D4 AA                  <1>     stosb       ;Store it!
  2010 000030D5 81C105000000        <1>     add ecx, 5  ;PATH= is 5 chars
  2011 000030DB 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl  ;Store the count
  2012 000030E2 FFC1                <1>     inc ecx     ;Add the CR for copying over
  2013 000030E4 488D35F4D3FFFF      <1>     lea rsi, searchSpec
  2014 000030EB 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2015 000030F2 57                  <1>     push rdi
  2016 000030F3 F3A4                <1>     rep movsb
  2017 000030F5 5E                  <1>     pop rsi         ;Get the ptr to the cmdline in rsi
  2018 000030F6 E9BEFEFFFF          <1>     jmp set.altEp   ;We've now set the string up, lets go!
  2019                              <1> .printPath:
  2020 000030FB 488D3D5BDEFFFF      <1>     lea rdi, pathEVar   ;This is what we want to get
  2021 00003102 E834080000          <1>     call searchForEnvVar    ;Returns ptr to env var in rsi
  2022 00003107 7221                <1>     jc .noPathPrnt      ;If the var doesnt exit, print no path!
  2023 00003109 4889F7              <1>     mov rdi, rsi        
  2024 0000310C E82D050000          <1>     call strlen         ;Get the length of the path in rdi
  2025 00003111 81F906000000        <1>     cmp ecx, 6          ;Is our path just PATH=<NUL>?
  2026 00003117 7411                <1>     je .noPathPrnt      ;Print no path!
  2027 00003119 FFC9                <1>     dec ecx             ;Drop the terminating null from the count
  2028 0000311B 4889FA              <1>     mov rdx, rdi        ;Set path ptr for printing
  2029 0000311E BB01000000          <1>     mov ebx, 1          ;STDOUT
  2030 00003123 B800400000          <1>     mov eax, 4000h      ;ecx = char count, rdx points to PATH= string
  2031 00003128 EB0C                <1>     jmp short .pathExit
  2032                              <1> .noPathPrnt:
  2033 0000312A 488D1539DBFFFF      <1>     lea rdx, noPath
  2034 00003131 B800090000          <1>     mov eax, 0900h
  2035                              <1> .pathExit:
  2036 00003136 CD21                <1>     int 21h
  2037 00003138 E8CC020000          <1>     call printCRLF      ;Print a crlf at the end
  2038                              <1>     return
    13                              <2> %%_ret:
    14 0000313D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2039                              <1> 
  2040                              <1> .skipPathDelimiters:
  2041                              <1> ;Input: rsi -> Start of string to parse
  2042                              <1> ;Output: rsi -> First non-delimiter char of string
  2043                              <1> ;        al = First non delim char
  2044 0000313E AC                  <1>     lodsb
  2045 0000313F E806000000          <1>     call .isALPathDelimiter
  2046 00003144 74F8                <1>     je .skipPathDelimiters
  2047 00003146 48FFCE              <1>     dec rsi
  2048                              <1>     return
    13                              <2> %%_ret:
    14 00003149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2049                              <1> .isALPathDelimiter:
  2050                              <1> ;Same as before without semicolon
  2051 0000314A 3C20                <1>     cmp al, SPC
  2052                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000314C 74(49)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2053 0000314E 3C09                <1>     cmp al, TAB
  2054                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003150 74(49)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2055 00003152 3C2C                <1>     cmp al, ","
  2056                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003154 74(49)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  2057 00003156 3C3D                <1>     cmp al, "="
  2058                              <1>     return
    13                              <2> %%_ret:
    14 00003158 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2059                              <1> 
  2060                              <1> prompt:
  2061 00003159 E87C070000          <1>     call checkEnvGoodAndGet         ;Use as a good environment check!
  2062 0000315E 0F84BAE7FFFF        <1>     jz badEnvSpaceError
  2063                              <1>     ;Now we know we can use r8 to get the envptr when needed
  2064 00003164 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]   ;Get the ptr to scan for ; or <CR>
  2065 0000316B E8EA040000          <1>     call skipDelimiters ;Points rsi to the first non-delimiter char
  2066 00003170 803E0D              <1>     cmp byte [rsi], CR  ;Is the first non-delim a CR?
  2067 00003173 742C                <1>     je .reset   ;Reset if so
  2068 00003175 56                  <1>     push rsi    ;Save ptr to the start of the user typed line
  2069 00003176 488D35B4DDFFFF      <1>     lea rsi, promptEVar ;Copy the PROMPT= prefix to searchspec
  2070 0000317D 488D3D5BD3FFFF      <1>     lea rdi, searchSpec
  2071 00003184 B907000000          <1>     mov ecx, 7  ;Copy without <CR>
  2072 00003189 F3A4                <1>     rep movsb
  2073 0000318B 5E                  <1>     pop rsi ;Get back ptr to the user typed line
  2074 0000318C 31C9                <1>     xor ecx, ecx    ;Get char count
  2075                              <1> .cp:    ;Now copy the user string over
  2076 0000318E AC                  <1>     lodsb
  2077 0000318F AA                  <1>     stosb 
  2078 00003190 3C0D                <1>     cmp al, CR
  2079 00003192 7404                <1>     je .cpOk
  2080 00003194 FFC1                <1>     inc ecx ;Increment count if non CR char copied over
  2081 00003196 EBF6                <1>     jmp short .cp
  2082                              <1> .cpOk:
  2083 00003198 488D3540D3FFFF      <1>     lea rsi, searchSpec ;Source the string from here
  2084 0000319F EB09                <1>     jmp short .goSet    ;Got the CR-less count
  2085                              <1> .reset:
  2086                              <1> ;Delete the environment variable!
  2087 000031A1 488D3589DDFFFF      <1>     lea rsi, promptEVar 
  2088 000031A8 31C9                <1>     xor ecx, ecx    ;No chars to write to the envstring
  2089                              <1> .goSet:
  2090 000031AA 81C107000000        <1>     add ecx, 7  ;Add the chars for the prompt= string too
  2091 000031B0 41888880000000      <1>     mov byte [r8 + cmdLineCnt], cl 
  2092 000031B7 FFC1                <1>     inc ecx     ;Include CR in copy
  2093 000031B9 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
  2094 000031C0 57                  <1>     push rdi
  2095 000031C1 F3A4                <1>     rep movsb
  2096 000031C3 5E                  <1>     pop rsi
  2097 000031C4 E9F0FDFFFF          <1>     jmp set.altEp
    18                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printDate:
     4                              <1> ;Input: eax = Packed Date
     5                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
     6                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
     7                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
     8                              <1> ;       ebx = 0 => Print two digit year
     9                              <1> ;       ebx = 1 => Print four digit year
    10 000031C9 53                  <1>     push rbx
    11 000031CA 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    12 000031CC 803D61CEFFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    13 000031D3 7240                <1>     jb .usDate
    14 000031D5 777C                <1>     ja .jpnDate
    15                              <1> ;European: DD/MM/YY
    16 000031D7 251F000000          <1>     and eax, 1Fh    ;Save day bits
    17 000031DC E8B0000000          <1>     call .printFirst
    18 000031E1 8A1558CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    19 000031E7 B402                <1>     mov ah, 02h
    20 000031E9 CD21                <1>     int 21h
    21                              <1> 
    22 000031EB 89C8                <1>     mov eax, ecx
    23 000031ED 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    24 000031F2 C1E805              <1>     shr eax, 5
    25 000031F5 E8B3000000          <1>     call .printSecond
    26                              <1> 
    27 000031FA 8A153FCEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    28 00003200 B402                <1>     mov ah, 02h
    29 00003202 CD21                <1>     int 21h
    30                              <1> 
    31 00003204 89C8                <1>     mov eax, ecx
    32 00003206 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    33 0000320B C1E809              <1>     shr eax, 9
    34 0000320E 5B                  <1>     pop rbx ;Get the year signature back
    35 0000320F E8A9000000          <1>     call .printYear
    36                              <1>     return
    13                              <2> %%_ret:
    14 00003214 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                              <1> .usDate:
    38                              <1> ;US: MM/DD/YY
    39 00003215 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    40 0000321A C1E805              <1>     shr eax, 5
    41 0000321D E86F000000          <1>     call .printFirst
    42                              <1> 
    43 00003222 8A1517CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    44 00003228 B402                <1>     mov ah, 02h
    45 0000322A CD21                <1>     int 21h
    46                              <1> 
    47 0000322C 89C8                <1>     mov eax, ecx
    48 0000322E 251F000000          <1>     and eax, 1Fh    ;Save day bits
    49 00003233 E875000000          <1>     call .printSecond
    50                              <1> 
    51 00003238 8A1501CEFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    52 0000323E B402                <1>     mov ah, 02h
    53 00003240 CD21                <1>     int 21h
    54                              <1> 
    55 00003242 89C8                <1>     mov eax, ecx
    56 00003244 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    57 00003249 C1E809              <1>     shr eax, 9
    58 0000324C 5B                  <1>     pop rbx ;Get the year signature back
    59 0000324D E86B000000          <1>     call .printYear
    60                              <1>     return
    13                              <2> %%_ret:
    14 00003252 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> .jpnDate:
    62                              <1> ;Japan: YY/MM/DD
    63 00003253 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00003258 C1E809              <1>     shr eax, 9
    65 0000325B 5B                  <1>     pop rbx ;Get the year signature back
    66 0000325C E85C000000          <1>     call .printYear
    67                              <1> 
    68 00003261 8A15D8CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    69 00003267 B402                <1>     mov ah, 02h
    70 00003269 CD21                <1>     int 21h
    71                              <1> 
    72 0000326B 89C8                <1>     mov eax, ecx
    73 0000326D 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    74 00003272 C1E805              <1>     shr eax, 5
    75 00003275 E833000000          <1>     call .printSecond
    76                              <1> 
    77 0000327A 8A15BFCDFFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    78 00003280 B402                <1>     mov ah, 02h
    79 00003282 CD21                <1>     int 21h
    80                              <1> 
    81 00003284 89C8                <1>     mov eax, ecx
    82 00003286 251F000000          <1>     and eax, 1Fh    ;Save day bits
    83 0000328B E81D000000          <1>     call .printSecond
    84                              <1>     return
    13                              <2> %%_ret:
    14 00003290 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> ;Each of these require eax setup correctly
    87                              <1> .printFirst:
    88 00003291 51                  <1>     push rcx
    89 00003292 E8CB050000          <1>     call getDecimalWord
    90 00003297 84ED                <1>     test ch, ch ;Do we have an upper digit?
    91 00003299 7504                <1>     jnz .skipSpace
    92 0000329B 88CD                <1>     mov ch, cl
    93 0000329D B120                <1>     mov cl, " "
    94                              <1> .skipSpace:
    95 0000329F 88CA                <1>     mov dl, cl
    96 000032A1 B402                <1>     mov ah, 02h
    97 000032A3 CD21                <1>     int 21h
    98 000032A5 88EA                <1>     mov dl, ch
    99 000032A7 B402                <1>     mov ah, 02h
   100 000032A9 CD21                <1>     int 21h
   101 000032AB 59                  <1>     pop rcx
   102                              <1>     return
    13                              <2> %%_ret:
    14 000032AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> .printSecond:
   104 000032AD 51                  <1>     push rcx
   105 000032AE E8AF050000          <1>     call getDecimalWord
   106 000032B3 84ED                <1>     test ch, ch ;Do we have an upper digit?
   107 000032B5 75E8                <1>     jnz .skipSpace
   108 000032B7 88CD                <1>     mov ch, cl
   109 000032B9 B130                <1>     mov cl, "0"
   110 000032BB EBE2                <1>     jmp short .skipSpace
   111                              <1> .printYear:
   112 000032BD 05BC070000          <1>     add eax, 1980
   113 000032C2 51                  <1>     push rcx
   114 000032C3 53                  <1>     push rbx
   115 000032C4 E899050000          <1>     call getDecimalWord ;Get unpacked in rcx
   116 000032C9 5B                  <1>     pop rbx
   117 000032CA 84DB                <1>     test bl, bl
   118 000032CC 740C                <1>     jz .twoDigitYear
   119 000032CE 88CA                <1>     mov dl, cl  ;Print the first digit
   120 000032D0 B402                <1>     mov ah, 02h
   121 000032D2 CD21                <1>     int 21h
   122 000032D4 88EA                <1>     mov dl, ch  ;Print the second digit
   123 000032D6 B402                <1>     mov ah, 02h
   124 000032D8 CD21                <1>     int 21h
   125                              <1> .twoDigitYear:
   126 000032DA C1E910              <1>     shr ecx, 10h    ;Get high word low
   127 000032DD 88CA                <1>     mov dl, cl  ;Print the upper digit
   128 000032DF B402                <1>     mov ah, 02h
   129 000032E1 CD21                <1>     int 21h
   130 000032E3 88EA                <1>     mov dl, ch  ;Print the lower digit
   131 000032E5 B402                <1>     mov ah, 02h
   132 000032E7 CD21                <1>     int 21h
   133 000032E9 59                  <1>     pop rcx
   134                              <1>     return
    13                              <2> %%_ret:
    14 000032EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   135                              <1> 
   136                              <1> 
   137                              <1> printTime:
   138                              <1> ;Input: eax = Packed Time
   139                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   140                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   141 000032EB 89C1                <1>     mov ecx, eax
   142 000032ED 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   143 000032F2 C1E80B              <1>     shr eax, 11
   144 000032F5 803D49CDFFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   145 000032FC 750B                <1>     jne .ampm
   146 000032FE E85A000000          <1>     call .printHours
   147 00003303 E831000000          <1>     call .printMinutes
   148                              <1>     return
    13                              <2> %%_ret:
    14 00003308 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> .ampm:
   150 00003309 3D0C000000          <1>     cmp eax, 12
   151 0000330E 7713                <1>     ja .pm
   152 00003310 7416                <1>     je .pm2
   153 00003312 E846000000          <1>     call .printHours
   154 00003317 E81D000000          <1>     call .printMinutes
   155 0000331C B261                <1>     mov dl, "a"
   156 0000331E B402                <1>     mov ah, 02h
   157 00003320 CD21                <1>     int 21h
   158                              <1>     return
    13                              <2> %%_ret:
    14 00003322 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   159                              <1> .pm:
   160 00003323 2D0C000000          <1>     sub eax, 12
   161                              <1> .pm2:
   162 00003328 E830000000          <1>     call .printHours
   163 0000332D E807000000          <1>     call .printMinutes
   164 00003332 B270                <1>     mov dl, "p"
   165 00003334 B402                <1>     mov ah, 02h
   166 00003336 CD21                <1>     int 21h
   167                              <1>     return
    13                              <2> %%_ret:
    14 00003338 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   168                              <1> .printMinutes:
   169 00003339 8A1502CDFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   170 0000333F B402                <1>     mov ah, 02h
   171 00003341 CD21                <1>     int 21h
   172                              <1> 
   173 00003343 89C8                <1>     mov eax, ecx
   174 00003345 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   175 0000334A C1E805              <1>     shr eax, 5
   176                              <1> .printMinutesAlt:
   177 0000334D 51                  <1>     push rcx
   178 0000334E E80F050000          <1>     call getDecimalWord
   179 00003353 84ED                <1>     test ch, ch ;Do we have an upper digit?
   180 00003355 7514                <1>     jnz .skipSpace
   181 00003357 88CD                <1>     mov ch, cl
   182 00003359 B130                <1>     mov cl, "0"
   183 0000335B EB0E                <1>     jmp short .skipSpace
   184                              <1> .printHours:
   185 0000335D 51                  <1>     push rcx
   186 0000335E E8FF040000          <1>     call getDecimalWord
   187 00003363 84ED                <1>     test ch, ch ;Do we have an upper digit?
   188 00003365 7504                <1>     jnz .skipSpace
   189 00003367 88CD                <1>     mov ch, cl
   190 00003369 B120                <1>     mov cl, " "
   191                              <1> .skipSpace:
   192 0000336B 88CA                <1>     mov dl, cl
   193 0000336D B402                <1>     mov ah, 02h
   194 0000336F CD21                <1>     int 21h
   195 00003371 88EA                <1>     mov dl, ch
   196 00003373 B402                <1>     mov ah, 02h
   197 00003375 CD21                <1>     int 21h
   198 00003377 59                  <1>     pop rcx
   199                              <1>     return
    13                              <2> %%_ret:
    14 00003378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   200                              <1> 
   201                              <1> printPrompt:
   202 00003379 488D3DB1DBFFFF      <1>     lea rdi, promptEVar   ;Find the prompt var
   203 00003380 E8B6050000          <1>     call searchForEnvVar
   204 00003385 730B                <1>     jnc .validPrompt
   205                              <1>     ;Here we print the default prompt
   206 00003387 E8F9000000          <1>     call putCWDInPrompt
   207 0000338C E8C5000000          <1>     call putGTinPrompt
   208                              <1>     return
    13                              <2> %%_ret:
    14 00003391 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   209                              <1> .validPrompt:
   210                              <1> ;rsi points to the prompt
   211 00003392 4881C607000000      <1>     add rsi, 7  ;Go past the prompt= string
   212                              <1> .promptLp:
   213 00003399 AC                  <1>     lodsb   ;Get the char
   214 0000339A 84C0                <1>     test al, al
   215                              <1>     retz    ;Return when al is 0
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000339C 74(91)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   216 0000339E 3C24                <1>     cmp al, "$"
   217 000033A0 7409                <1>     je .escapeChar
   218 000033A2 88C2                <1>     mov dl, al
   219 000033A4 E8D7000000          <1>     call outChar    ;Prints the char in dl
   220 000033A9 EBEE                <1>     jmp short .promptLp
   221                              <1> .escapeChar:
   222 000033AB AC                  <1>     lodsb       ;Get the next char now that we are escaping
   223 000033AC E897020000          <1>     call ucChar ;Uppercase this char in al
   224 000033B1 488D1D2A000000      <1>     lea rbx, .pTbl
   225 000033B8 B90D000000          <1>     mov ecx, pTblL / 3  ;3 bytes per entry
   226                              <1> .escapeLp:
   227 000033BD 3803                <1>     cmp byte [rbx], al  ;Are we at the right entry?
   228 000033BF 740D                <1>     je .escapeFnd
   229 000033C1 4881C303000000      <1>     add rbx, 3  ;Go to next entry
   230 000033C8 FFC9                <1>     dec ecx
   231 000033CA 75F1                <1>     jnz .escapeLp
   232 000033CC EBCB                <1>     jmp short .promptLp  ;Output nothing if invalid
   233                              <1> .escapeFnd:
   234 000033CE 488D050D000000      <1>     lea rax, .pTbl              ;Get the table addr
   235 000033D5 0FB75B01            <1>     movzx ebx, word [rbx + 1]   ;Get the word offset from the table
   236 000033D9 4801D8              <1>     add rax, rbx                ;Add these
   237 000033DC 56                  <1>     push rsi    ;Ensure rsi remains unchanged
   238 000033DD FFD0                <1>     call rax    ;Call indirectly the function to output the chars
   239 000033DF 5E                  <1>     pop rsi
   240 000033E0 EBB7                <1>     jmp short .promptLp
   241                              <1> 
   242                              <1> ;Easy table to use, 13 entries, 3 bytes per entry
   243                              <1> .pTbl:
   244 000033E2 42                  <1>     db "B", 
   245 000033E3 7000                <1>     dw putPipeInPrompt - .pTbl     ;Pipe char
   246 000033E5 44                  <1>     db "D", 
   247 000033E6 5801                <1>     dw printFmtDate - .pTbl        ;Current date
   248 000033E8 45                  <1>     db "E", 
   249 000033E9 6400                <1>     dw putEscInPrompt - .pTbl      ;ANSI Escape char
   250 000033EB 47                  <1>     db "G", 
   251 000033EC 7400                <1>     dw putGTinPrompt - .pTbl       ;Greater than char
   252 000033EE 48                  <1>     db "H", 
   253 000033EF 7C00                <1>     dw putBSPinPrompt - .pTbl      ;Backspace
   254 000033F1 4C                  <1>     db "L", 
   255 000033F2 7800                <1>     dw putLTinPrompt - .pTbl       ;Less than char
   256 000033F4 4E                  <1>     db "N", 
   257 000033F5 9500                <1>     dw putDriveInPrompt - .pTbl    ;Current drive letter
   258 000033F7 50                  <1>     db "P", 
   259 000033F8 A300                <1>     dw putCWDInPrompt - .pTbl      ;Current drive and path
   260 000033FA 51                  <1>     db "Q", 
   261 000033FB 6C00                <1>     dw putEquInPrompt - .pTbl      ;Equals char
   262 000033FD 54                  <1>     db "T", 
   263 000033FE F500                <1>     dw printFmtTime - .pTbl        ;Current time in hh:mm:ss.hh fmt
   264 00003400 56                  <1>     db "V", 
   265 00003401 3600                <1>     dw putVersionInPrompt - .pTbl  ;DOS version number
   266 00003403 5F                  <1>     db "_", 
   267 00003404 2700                <1>     dw printCRLF - .pTbl           ;CRLF pair
   268 00003406 24                  <1>     db "$", 
   269 00003407 6800                <1>     dw putMoneyInPrompt - .pTbl    ;Dollar sign
   270                              <1> pTblL equ $ - .pTbl
   271                              <1> 
   272                              <1> printCRLF:
   273 00003409 488D1538D5FFFF      <1>     lea rdx, crlf
   274                              <1> printString:
   275 00003410 B800090000          <1>     mov eax, 0900h  ;Print string
   276 00003415 CD21                <1>     int 21h
   277                              <1>     return
    13                              <2> %%_ret:
    14 00003417 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   278                              <1> 
   279                              <1> putVersionInPrompt:
   280 00003418 488D159CD7FFFF      <1>     lea rdx, dosVer
   281 0000341F B409                <1>     mov ah, 09h ;Print String
   282 00003421 CD21                <1>     int 21h
   283 00003423 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   284 00003425 CD21                <1>     int 21h
   285 00003427 50                  <1>     push rax    ;Save minor version
   286 00003428 E89E010000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   287 0000342D E8B6010000          <1>     call printPackedBCD ;Print al
   288 00003432 B22E                <1>     mov dl, "."
   289 00003434 B402                <1>     mov ah, 02h
   290 00003436 CD21                <1>     int 21h
   291 00003438 58                  <1>     pop rax
   292 00003439 88E0                <1>     mov al, ah  ;Get the minor version low
   293 0000343B E88B010000          <1>     call hexToBCD
   294 00003440 E8A3010000          <1>     call printPackedBCD
   295                              <1>     return
    13                              <2> %%_ret:
    14 00003445 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   296                              <1> putEscInPrompt:
   297 00003446 B21B                <1>     mov dl, ESC
   298 00003448 EB36                <1>     jmp short outChar
   299                              <1> 
   300                              <1> putMoneyInPrompt:
   301 0000344A B224                <1>     mov dl, "$"
   302 0000344C EB32                <1>     jmp short outChar
   303                              <1> 
   304                              <1> putEquInPrompt:
   305 0000344E B23D                <1>     mov dl, "="
   306 00003450 EB2E                <1>     jmp short outChar
   307                              <1> 
   308                              <1> putPipeInPrompt:
   309 00003452 B27C                <1>     mov dl, "|"
   310 00003454 EB2A                <1>     jmp short outChar
   311                              <1> 
   312                              <1> putGTinPrompt:
   313 00003456 B23E                <1>     mov dl, ">"
   314 00003458 EB26                <1>     jmp short outChar
   315                              <1> 
   316                              <1> putLTinPrompt:
   317 0000345A B23C                <1>     mov dl, "<"
   318 0000345C EB22                <1>     jmp short outChar
   319                              <1> 
   320                              <1> putBSPinPrompt:
   321 0000345E 488D1551D9FFFF      <1>     lea rdx, backSpace
   322 00003465 B903000000          <1>     mov ecx, 3
   323 0000346A BB01000000          <1>     mov ebx, 1
   324 0000346F B800400000          <1>     mov eax, 4000h  ;Output the backspace!
   325 00003474 CD21                <1>     int 21h
   326                              <1>     return
    13                              <2> %%_ret:
    14 00003476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> putDriveInPrompt:
   329 00003477 E8A4010000          <1>     call getCurrentDrive
   330 0000347C 0441                <1>     add al, "A" ;Convert to letter
   331 0000347E 88C2                <1>     mov dl, al
   332                              <1> outChar:
   333 00003480 B402                <1>     mov ah, 02h ;Echo to STDOUT
   334 00003482 CD21                <1>     int 21h
   335                              <1>     return
    13                              <2> %%_ret:
    14 00003484 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> putCWDInPrompt:
   337 00003485 E896010000          <1>     call getCurrentDrive
   338 0000348A 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   339 0000348C FEC2                <1>     inc dl
   340 0000348E 0441                <1>     add al, "A" ;Convert to letter
   341 00003490 B43A                <1>     mov ah, ":"
   342 00003492 488D3DC1CBFFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   343 00003499 66AB                <1>     stosw   ;Store X:, rdi+=2
   344 0000349B 8A0588CBFFFF        <1>     mov al, byte [pathSep]
   345 000034A1 AA                  <1>     stosb   ;Store pathSep, inc rdi
   346 000034A2 B447                <1>     mov ah, 47h ;Get Current Working Directory
   347 000034A4 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   348 000034A7 CD21                <1>     int 21h
   349 000034A9 721F                <1>     jc .badDrive
   350 000034AB E88E010000          <1>     call strlen
   351 000034B0 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   352                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   353 000034B6 B800400000          <1>     mov eax, 4000h ;Write to handle
   354 000034BB BB01000000          <1>     mov ebx, 1  ;STDOUT
   355 000034C0 488D1593CBFFFF      <1>     lea rdx, currDirStr
   356 000034C7 CD21                <1>     int 21h
   357                              <1>     return
    13                              <2> %%_ret:
    14 000034C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   358                              <1> .badDrive:
   359                              <1> ;If the drive is bad, we print this string instead of drive:\cwd
   360 000034CA 488D15B2D7FFFF      <1>     lea rdx, badDrvMsg
   361 000034D1 E83AFFFFFF          <1>     call printString
   362                              <1>     return
    13                              <2> %%_ret:
    14 000034D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> printFmtTime:
   364                              <1> ;Outputs the formatted time
   365 000034D7 B42C                <1>     mov ah, 2Ch ;DOS get time
   366 000034D9 CD21                <1>     int 21h
   367                              <1>     ;CH = hour (0-23)
   368                              <1> 	;CL = minutes (0-59)
   369                              <1> 	;DH = seconds (0-59)
   370                              <1> 	;DL = hundredths (0-99)
   371 000034DB 880DC4D1FFFF        <1>     mov byte [td1], cl
   372 000034E1 882DBFD1FFFF        <1>     mov byte [td2], ch
   373 000034E7 8815BAD1FFFF        <1>     mov byte [td3], dl
   374 000034ED 8835B5D1FFFF        <1>     mov byte [td4], dh
   375 000034F3 0FB6C5              <1>     movzx eax, ch
   376 000034F6 E862FEFFFF          <1>     call printTime.printHours
   377 000034FB 8A1540CBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   378 00003501 B402                <1>     mov ah, 02h
   379 00003503 CD21                <1>     int 21h
   380 00003505 0FB60599D1FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   381 0000350C E83CFEFFFF          <1>     call printTime.printMinutesAlt
   382 00003511 8A152ACBFFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   383 00003517 B402                <1>     mov ah, 02h
   384 00003519 CD21                <1>     int 21h
   385 0000351B 0FB60586D1FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   386 00003522 E826FEFFFF          <1>     call printTime.printMinutesAlt
   387 00003527 B22E                <1>     mov dl, "."
   388 00003529 B402                <1>     mov ah, 02h
   389 0000352B CD21                <1>     int 21h
   390 0000352D 0FB60573D1FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   391 00003534 E814FEFFFF          <1>     call printTime.printMinutesAlt
   392                              <1>     return
    13                              <2> %%_ret:
    14 00003539 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> 
   394                              <1> printFmtDate:
   395                              <1> ;Outputs the formatted date
   396 0000353A B8002A0000          <1>     mov eax, 2A00h ;DOS get date
   397 0000353F CD21                <1>     int 21h
   398                              <1> 	;AL = day of the week (0=Sunday)
   399                              <1> 	;CX = year (1980-2099)
   400                              <1> 	;DH = month (1-12)
   401                              <1> 	;DL = day (1-31)
   402 00003541 66890D5DD1FFFF      <1>     mov word [td1], cx
   403 00003548 881559D1FFFF        <1>     mov byte [td3], dl
   404 0000354E 883554D1FFFF        <1>     mov byte [td4], dh
   405 00003554 0FB6C0              <1>     movzx eax, al
   406 00003557 89C3                <1>     mov ebx, eax
   407 00003559 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   408 0000355B 01D8                <1>     add eax, ebx ;Make it 3 times 
   409 0000355D 488D15A1D5FFFF      <1>     lea rdx, dayName
   410 00003564 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   411 00003568 B903000000          <1>     mov ecx, 3  ;Print three chars
   412 0000356D BB01000000          <1>     mov ebx, 1  ;STDOUT
   413 00003572 B440                <1>     mov ah, 40h ;Write to handle
   414 00003574 CD21                <1>     int 21h
   415 00003576 B220                <1>     mov dl, " "
   416 00003578 E803FFFFFF          <1>     call outChar
   417 0000357D E8FEFEFFFF          <1>     call outChar
   418                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   419                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   420                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   421 00003582 0FB7051CD1FFFF      <1>     movzx eax, word [td1]   ;Get this word
   422 00003589 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   423 0000358C 0FB61D15D1FFFF      <1>     movzx ebx, byte [td4]
   424 00003593 C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   425 00003596 09D8                <1>     or eax, ebx ;Add this date to eax
   426 00003598 0FB61D08D1FFFF      <1>     movzx ebx, byte [td3]
   427 0000359F 09D8                <1>     or eax, ebx
   428 000035A1 BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   429 000035A6 E81EFCFFFF          <1>     call printDate
   430                              <1>     return
    13                              <2> %%_ret:
    14 000035AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> BCDtoHex:
   433                              <1> ;Converts a BCD value to a Hex byte
   434                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   435 000035AC 51                  <1>     push rcx
   436 000035AD 0FB6C0              <1>     movzx eax, al   ;Zero extend
   437 000035B0 89C1                <1>     mov ecx, eax    ;Save al in ecx
   438 000035B2 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   439 000035B7 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   440 000035BD C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   441                              <1> .bth:
   442 000035C0 050A000000          <1>     add eax, 10
   443 000035C5 FFC9                <1>     dec ecx
   444 000035C7 75F7                <1>     jnz .bth
   445 000035C9 59                  <1>     pop rcx
   446 000035CA C3                  <1>     ret
   447                              <1> 
   448                              <1> hexToBCD:
   449                              <1> ;Converts a Hex byte into two BCD digits
   450                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   451 000035CB 51                  <1>     push rcx
   452 000035CC 0FB6C0              <1>     movzx eax, al   ;Zero extend
   453 000035CF 31C9                <1>     xor ecx, ecx
   454                              <1> .htb0:
   455 000035D1 3D0A000000          <1>     cmp eax, 10
   456 000035D6 7209                <1>     jb .htb1
   457 000035D8 2D0A000000          <1>     sub eax, 10
   458 000035DD FFC1                <1>     inc ecx
   459 000035DF EBF0                <1>     jmp short .htb0
   460                              <1> .htb1:
   461 000035E1 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   462 000035E4 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   463 000035E6 59                  <1>     pop rcx
   464 000035E7 C3                  <1>     ret
   465                              <1> 
   466                              <1> printPackedBCD:
   467                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   468                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   469                              <1> ;Preserves all registers
   470 000035E8 50                  <1>     push rax
   471 000035E9 52                  <1>     push rdx
   472 000035EA 88C4                <1>     mov ah, al
   473 000035EC 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   474 000035EE 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   475 000035F1 7508                <1>     jnz .upperNybble
   476 000035F3 B220                <1>     mov dl, " "
   477 000035F5 B402                <1>     mov ah, 02h
   478 000035F7 CD21                <1>     int 21h
   479 000035F9 EB0E                <1>     jmp short .lowerNybble
   480                              <1> .upperNybble:
   481 000035FB 50                  <1>     push rax
   482 000035FC C0EC04              <1>     shr ah, 4
   483 000035FF 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   484 00003602 88E2                <1>     mov dl, ah
   485 00003604 B402                <1>     mov ah, 02h ;Print DL
   486 00003606 CD21                <1>     int 21h
   487 00003608 58                  <1>     pop rax
   488                              <1> .lowerNybble:
   489 00003609 0430                <1>     add al, "0"
   490 0000360B 88C2                <1>     mov dl, al
   491 0000360D B402                <1>     mov ah, 02h ;Print DL
   492 0000360F CD21                <1>     int 21h
   493 00003611 5A                  <1>     pop rdx
   494 00003612 58                  <1>     pop rax
   495                              <1>     return
    13                              <2> %%_ret:
    14 00003613 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> setDrive:
   498                              <1> ;Input: dl = 0 based Drive number to set to
   499                              <1> ;Output: ZF=ZE: Drive set. ZF=NZ: Drive not set and invalid.
   500                              <1> ;AX trashed.
   501 00003614 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   502 00003616 CD21                <1>     int 21h 
   503 00003618 E803000000          <1>     call getCurrentDrive
   504 0000361D 38D0                <1>     cmp al, dl  ;Is this the same drive?
   505                              <1>     return
    13                              <2> %%_ret:
    14 0000361F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   506                              <1> getCurrentDrive:
   507                              <1> ;Returns the 0 based current drive in al
   508 00003620 B419                <1>     mov ah, 19h
   509 00003622 CD21                <1>     int 21h
   510                              <1>     return
    13                              <2> %%_ret:
    14 00003624 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> strcpy:
   513                              <1> ;Copies an ASCIIZ string but leaves the pointers at the end of the strings
   514                              <1> ;rsi -> Source
   515                              <1> ;rdi -> Destination
   516 00003625 51                  <1>     push rcx
   517 00003626 57                  <1>     push rdi
   518 00003627 4889F7              <1>     mov rdi, rsi
   519 0000362A E80F000000          <1>     call strlen ;Get the length of the string in rsi
   520 0000362F 5F                  <1>     pop rdi
   521 00003630 F3A4                <1>     rep movsb   ;Now we have the count, just copy over!
   522 00003632 59                  <1>     pop rcx
   523                              <1>     return
    13                              <2> %%_ret:
    14 00003633 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> strcpy2:
   526                              <1> ;Copies an ASCIIZ string, but preserves the ptrs
   527                              <1> ;rsi -> Source
   528                              <1> ;rdi -> Destination
   529 00003634 56                  <1>     push rsi
   530 00003635 57                  <1>     push rdi
   531 00003636 E8EAFFFFFF          <1>     call strcpy 
   532 0000363B 5F                  <1>     pop rdi
   533 0000363C 5E                  <1>     pop rsi
   534                              <1>     return
    13                              <2> %%_ret:
    14 0000363D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> strlen:
   537                              <1> ;Gets the length of a ASCIIZ string
   538                              <1> ;Input: rdi = Source buffer
   539                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   540 0000363E 50                  <1>     push rax
   541 0000363F B812120000          <1>     mov eax, 1212h  ;Strlen according to DOS, trashes eax
   542 00003644 CD2F                <1>     int 2fh
   543 00003646 58                  <1>     pop rax
   544                              <1>     return
    13                              <2> %%_ret:
    14 00003647 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   545                              <1> 
   546                              <1> ucChar:
   547                              <1> ;Input: al = Char to uppercase
   548                              <1> ;Output: al = Adjusted char 
   549 00003648 53                  <1>     push rbx
   550 00003649 4889E3              <1>     mov rbx, rsp    ;Save the stack ptr
   551 0000364C 50                  <1>     push rax    ;Push the char twice on the stack
   552 0000364D 50                  <1>     push rax
   553 0000364E B813120000          <1>     mov eax, 1213h  ;Get DOS to uppercase the char
   554 00003653 CD2F                <1>     int 2fh         ;Returns the processed char in al
   555 00003655 4889DC              <1>     mov rsp, rbx    ;Return the stack ptr to where it was
   556 00003658 5B                  <1>     pop rbx
   557                              <1>     return
    13                              <2> %%_ret:
    14 00003659 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> skipDelimiters:
   560                              <1> ;Skips all "standard" command delimiters. This is not the same as FCB 
   561                              <1> ; command delimiters but a subset thereof. 
   562                              <1> ;These are the same across all codepages.
   563                              <1> ;Input: rsi must point to the start of the data string
   564                              <1> ;Output: rsi points to the first non-delimiter char
   565 0000365A 50                  <1>     push rax
   566                              <1> .l1:
   567 0000365B AC                  <1>     lodsb
   568 0000365C E807000000          <1>     call isALdelimiter
   569 00003661 74F8                <1>     jz .l1
   570                              <1> .exit:
   571 00003663 58                  <1>     pop rax
   572 00003664 48FFCE              <1>     dec rsi ;Point rsi back to the char which is not a command delimiter
   573                              <1>     return
    13                              <2> %%_ret:
    14 00003667 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> isALdelimiter:
   576                              <1> ;Returns: ZF=NZ if al is not a command separator 
   577                              <1> ;         ZF=ZE if al is a command separator
   578 00003668 3C20                <1>     cmp al, " "
   579                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000366A 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   580 0000366C 3C3B                <1>     cmp al, ";"
   581                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000366E 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   582 00003670 3C3D                <1>     cmp al, "="
   583                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003672 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   584 00003674 3C2C                <1>     cmp al, ","
   585                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00003676 74(67)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   586 00003678 3C09                <1>     cmp al, TAB
   587                              <1>     return
    13                              <2> %%_ret:
    14 0000367A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> 
   589                              <1> clearCommandState:
   590                              <1> ;Clears the command state
   591 0000367B 488D3D26CAFFFF      <1>     lea rdi, cmdStatePtr
   592 00003682 B906000000          <1>     mov ecx, cmdStateL
   593 00003687 31C0                <1>     xor eax, eax
   594 00003689 F3AA                <1>     rep stosb
   595                              <1>     return
    13                              <2> %%_ret:
    14 0000368B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   596                              <1> 
   597                              <1> clearCommandLineState:
   598                              <1> ;Clears the command line state after a 0Dh encountered
   599 0000368C 488D3D0ACAFFFF      <1>     lea rdi, cmdLineStatePtr
   600 00003693 B911000000          <1>     mov ecx, cmdLineStateL
   601 00003698 31C0                <1>     xor eax, eax
   602 0000369A F3AA                <1>     rep stosb
   603 0000369C C705F8C9FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   603 000036A5 FF                  <1>
   604 000036A6 C705F4C9FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   604 000036AF FF                  <1>
   605                              <1>     return
    13                              <2> %%_ret:
    14 000036B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   606                              <1> 
   607                              <1> asciiFilenameToFCB:
   608                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   609                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   610                              <1> ;Also doesn't check if chars are valid
   611                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   612                              <1> ;Name is space padded.
   613                              <1> ;Input: rsi = ASCII string buffer
   614                              <1> ;       rdi = FCB name buffer
   615                              <1> ;Output: al = Char that terminated the source string 
   616 000036B1 53                  <1>     push rbx    
   617 000036B2 57                  <1>     push rdi
   618 000036B3 B90B000000          <1>     mov ecx, 11
   619 000036B8 B020                <1>     mov al, " "
   620 000036BA F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   621 000036BC 5F                  <1>     pop rdi
   622 000036BD 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   623                              <1>     ;Preprocess for Dir Searches
   624 000036C0 803E2E              <1>     cmp byte [rsi], "."
   625 000036C3 7509                <1>     jne .processName
   626 000036C5 A4                  <1>     movsb   ;Store the first dot
   627 000036C6 803E2E              <1>     cmp byte [rsi], "."
   628 000036C9 752C                <1>     jne .exitBadChar
   629 000036CB A4                  <1>     movsb
   630 000036CC EB29                <1>     jmp short .exitBadChar
   631                              <1> .processName:
   632 000036CE AC                  <1>     lodsb   ;Get the char in al
   633 000036CF 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   634 000036D1 7426                <1>     jz .exit
   635 000036D3 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   636 000036D5 7407                <1>     je .extSpace
   637 000036D7 3C2E                <1>     cmp al, "."
   638 000036D9 740C                <1>     je .ext
   639 000036DB AA                  <1>     stosb   ;Store the char
   640 000036DC EBF0                <1>     jmp short .processName
   641                              <1> .extSpace:
   642                              <1> ;Now we scan for a period in the name
   643 000036DE AC                  <1>     lodsb   ;Get a char and increase rsi
   644 000036DF 84C0                <1>     test al, al
   645 000036E1 7416                <1>     jz .exit
   646 000036E3 3C2E                <1>     cmp al, "."     ;If al is not a period...
   647 000036E5 75F7                <1>     jne .extSpace   ; keep searching
   648                              <1> .ext:
   649 000036E7 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   650                              <1> .processExt:
   651 000036EB AC                  <1>     lodsb
   652 000036EC 84C0                <1>     test al, al
   653 000036EE 7409                <1>     jz .exit
   654 000036F0 3C20                <1>     cmp al, " "
   655 000036F2 7405                <1>     je .exit
   656 000036F4 AA                  <1>     stosb
   657 000036F5 EBF4                <1>     jmp short .processExt
   658                              <1> .exitBadChar:
   659 000036F7 30C0                <1>     xor al, al  ;Return a null terminator
   660                              <1> .exit:
   661 000036F9 5B                  <1>     pop rbx
   662                              <1>     return
    13                              <2> %%_ret:
    14 000036FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   663                              <1> 
   664                              <1> findLastPathComponant:
   665                              <1> ;Finds the last path componant of an ASCIIZ path string
   666                              <1> ;Input: rdi -> Head of the path to find last componant on
   667                              <1> ;Output: rdi -> Start of the last componant
   668 000036FB 50                  <1>     push rax
   669 000036FC 51                  <1>     push rcx
   670 000036FD 31C9                <1>     xor ecx, ecx
   671 000036FF FFC9                <1>     dec ecx
   672 00003701 31C0                <1>     xor eax, eax
   673 00003703 F2AE                <1>     repne scasb ;Scan for the null terminator of the string
   674 00003705 F7D1                <1>     not ecx     ;This gets the count of chars  
   675 00003707 48FFCF              <1>     dec rdi     ;Move rdi back to the null!
   676 0000370A 8A0519C9FFFF        <1>     mov al, byte [pathSep]
   677 00003710 FD                  <1>     std
   678 00003711 F2AE                <1>     repne scasb ;Now scan backwards for the pathsep, or we run out of chars!
   679 00003713 FC                  <1>     cld
   680 00003714 7503                <1>     jnz .exit   ;Ran out of chars to scan! Skip the extra inc
   681 00003716 48FFC7              <1>     inc rdi     ;Point at pathsep
   682                              <1> .exit:
   683 00003719 48FFC7              <1>     inc rdi     ;Point at char after pathsep or first char in buffer
   684 0000371C 59                  <1>     pop rcx
   685 0000371D 58                  <1>     pop rax
   686                              <1>     return
    13                              <2> %%_ret:
    14 0000371E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   687                              <1> 
   688                              <1> FCBToAsciiz:
   689                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   690                              <1> ;Name is space padded too
   691                              <1> ;Input: rsi = FCB name buffer
   692                              <1> ;       rdi = ASCIIZ string buffer
   693 0000371F B908000000          <1>     mov ecx, 8
   694 00003724 F3A4                <1>     rep movsb   ;Move the name over
   695                              <1> .scanNameSpace:
   696 00003726 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   697 0000372A 750D                <1>     jne .ext
   698 0000372C 48FFCF              <1>     dec rdi
   699 0000372F FFC1                <1>     inc ecx
   700 00003731 81F908000000        <1>     cmp ecx, 8
   701 00003737 72ED                <1>     jb .scanNameSpace
   702                              <1> .ext:
   703 00003739 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   704 0000373E 7506                <1>     jne .validExt
   705 00003740 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   706 00003744 7415                <1>     je .exit
   707                              <1> .validExt:
   708 00003746 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   709 00003748 AA                  <1>     stosb
   710 00003749 B903000000          <1>     mov ecx, 3
   711 0000374E F3A4                <1>     rep movsb   ;Move the three extension chars over
   712                              <1> .scanExtSpace:
   713 00003750 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   714 00003754 7505                <1>     jne .exit
   715 00003756 48FFCF              <1>     dec rdi
   716 00003759 EBF5                <1>     jmp short .scanExtSpace
   717                              <1> .exit:
   718 0000375B 31C0                <1>     xor eax, eax
   719 0000375D AA                  <1>     stosb   ;Store a null at the end
   720                              <1>     return
    13                              <2> %%_ret:
    14 0000375E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   721                              <1> 
   722                              <1> cpDelimOrCtrlStringToBufz:
   723                              <1> ;Copy a delimited or control char terminated string to a buffer
   724                              <1> ;Input: rsi -> Point to start of delimiter or ctrlchar terminated string
   725                              <1> ;       rdi -> Buffer to store null terminated string in
   726                              <1> ;Output: rsi -> First char past string end
   727                              <1> ;       rdi -> One char past null terminator on string buffer
   728 0000375F C60700              <1>     mov byte [rdi], 0   ;Init by null terminating
   729                              <1> .lp:
   730 00003762 AC                  <1>     lodsb
   731 00003763 3C20                <1>     cmp al, 20h ;Chars up to 20h are delimiters here. CR included!
   732 00003765 760A                <1>     jbe .exit
   733 00003767 E8FCFEFFFF          <1>     call isALdelimiter
   734 0000376C 7403                <1>     je .exit
   735 0000376E AA                  <1>     stosb
   736 0000376F EBF1                <1>     jmp short .lp
   737                              <1> .exit:
   738 00003771 31C0                <1>     xor eax, eax
   739 00003773 AA                  <1>     stosb   ;Store a null terminator
   740                              <1>     return
    13                              <2> %%_ret:
    14 00003774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   741                              <1> 
   742                              <1> 
   743                              <1> cpDelimPathToBufz:
   744                              <1> ;Copy a delimited path into buffer and null terminate.
   745                              <1> ;Input: rsi -> Point to start of delimiter terminated path
   746                              <1> ;       rdi -> Buffer to store null terminated path in
   747                              <1> ;Output: rsi -> First char past pathname delimiter
   748                              <1> ;       rdi -> One char past null terminator on pathname buffer
   749 00003775 53                  <1>     push rbx
   750 00003776 4889FB              <1>     mov rbx, rdi    ;Save the head of the path in rbx
   751 00003779 C60700              <1>     mov byte [rdi], 0   ;Null terminate this path before starting!
   752                              <1> .lp:
   753 0000377C AC                  <1>     lodsb   ;Get the char
   754 0000377D 3C0D                <1>     cmp al, CR
   755 0000377F 7412                <1>     je .gotRedirPath
   756 00003781 E8E2FEFFFF          <1>     call isALdelimiter  ;Is this char a delimiter char?
   757 00003786 740B                <1>     jz .gotRedirPath 
   758 00003788 3A059CC8FFFF        <1>     cmp al, byte [switchChar]
   759 0000378E 7403                <1>     je .gotRedirPath
   760 00003790 AA                  <1>     stosb   ;Store this char and loop next char
   761 00003791 EBE9                <1>     jmp short .lp
   762                              <1> .gotRedirPath:
   763 00003793 50                  <1>     push rax    ;Save the char on stack
   764 00003794 30C0                <1>     xor al, al  ;Get null terminator char
   765 00003796 4829FB              <1>     sub rbx, rdi
   766 00003799 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;This is because one char has been written!!
   767 000037A0 7412                <1>     je .notColon
   768 000037A2 4881FBFEFFFFFF      <1>     cmp rbx, -2 ;This is for drive letters, must always have the colon!!
   769 000037A9 7409                <1>     je .notColon
   770 000037AB 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Is this a colon?
   771 000037AF 7503                <1>     jne .notColon
   772 000037B1 48FFCF              <1>     dec rdi     ;We overwrite the colon. 
   773                              <1> .notColon:
   774 000037B4 AA                  <1>     stosb   ;Store the null terminator for the redir path
   775 000037B5 58                  <1>     pop rax ;Get back the char in al
   776 000037B6 5B                  <1>     pop rbx
   777                              <1>     return
    13                              <2> %%_ret:
    14 000037B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   778                              <1> 
   779                              <1> buildCommandPath:
   780                              <1> ;Copies the first argument into a null delimited path in the searchSpec buffer.
   781 000037B8 0FB605EAC8FFFF      <1>     movzx eax, byte [arg1Off]
   782 000037BF 4C8B0549C8FFFF      <1>     mov r8, [pspPtr]
   783 000037C6 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   784 000037CD 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   785                              <1> copyArgumentToSearchSpec:
   786                              <1> ;Copies an arbitrary delimited path pointed to by rsi into searchSpec
   787                              <1> ; and null terminates
   788 000037D0 488D3D08CDFFFF      <1>     lea rdi, searchSpec
   789 000037D7 E899FFFFFF          <1>     call cpDelimPathToBufz
   790                              <1>     return
    13                              <2> %%_ret:
    14 000037DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   791                              <1> 
   792                              <1> scanForWildcards:
   793                              <1> ;Input: rsi -> Null terminated path to search for wildcards on
   794                              <1> ;Output: ZF=ZE if WC found. Else, ZF=NZ.
   795 000037DD 50                  <1>     push rax
   796 000037DE 56                  <1>     push rsi
   797                              <1> .lp:
   798 000037DF AC                  <1>     lodsb
   799 000037E0 3C3F                <1>     cmp al, "?"
   800 000037E2 740A                <1>     je .exit
   801 000037E4 3C2A                <1>     cmp al, "*"
   802 000037E6 7406                <1>     je .exit
   803 000037E8 84C0                <1>     test al, al
   804 000037EA 75F3                <1>     jnz .lp
   805 000037EC FEC0                <1>     inc al  ;This will clear the ZF
   806                              <1> .exit:
   807 000037EE 5E                  <1>     pop rsi
   808 000037EF 58                  <1>     pop rax
   809                              <1>     return
    13                              <2> %%_ret:
    14 000037F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> 
   811                              <1> printDecimalWord:
   812                              <1> ;Takes qword in rax and print it's decimal representation
   813                              <1> ;Takes the qword in eax and prints its decimal representation
   814 000037F1 31C9                <1>     xor ecx, ecx
   815 000037F3 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   816 000037F5 85C0                <1>     test eax, eax
   817 000037F7 750C                <1>     jnz .notZero
   818 000037F9 B930000000          <1>     mov ecx, "0"
   819 000037FE BD01000000          <1>     mov ebp, 1  ;Print one digit
   820 00003803 EB3E                <1>     jmp short .dpfb2
   821                              <1> .notZero:
   822 00003805 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   823 00003807 BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   824                              <1> .dpfb0:
   825 0000380C FFC5                <1>     inc ebp
   826 0000380E 81FD08000000        <1>     cmp ebp, 8
   827 00003814 7206                <1>     jb .dpfb00
   828 00003816 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   829 0000381A EB04                <1>     jmp short .dpfb01
   830                              <1> .dpfb00:
   831 0000381C 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   832                              <1> .dpfb01:
   833 00003820 31D2                <1>     xor edx, edx
   834 00003822 48F7F6              <1>     div rsi
   835 00003825 80C230              <1>     add dl, '0'
   836 00003828 80FA39              <1>     cmp dl, '9'
   837 0000382B 7603                <1>     jbe .dpfb1
   838 0000382D 80C207              <1>     add dl, 'A'-'0'-10
   839                              <1> .dpfb1:
   840 00003830 81FD08000000        <1>     cmp ebp, 8
   841 00003836 7204                <1>     jb .dpfb10
   842 00003838 88D3                <1>     mov bl, dl ;Add the bottom bits
   843 0000383A EB02                <1>     jmp short .dpfb11
   844                              <1> .dpfb10:
   845 0000383C 88D1                <1>     mov cl, dl    ;Save remainder byte
   846                              <1> .dpfb11:
   847 0000383E 4885C0              <1>     test rax, rax
   848 00003841 75C9                <1>     jnz .dpfb0
   849                              <1> .dpfb2:
   850 00003843 81FD08000000        <1>     cmp ebp, 8
   851 00003849 7208                <1>     jb .dpfb20
   852 0000384B 88DA                <1>     mov dl, bl
   853 0000384D 48C1EB08            <1>     shr rbx, 8
   854 00003851 EB06                <1>     jmp short .dpfb21
   855                              <1> .dpfb20:
   856 00003853 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   857 00003855 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   858                              <1> .dpfb21:
   859 00003859 B402                <1>     mov ah, 02h
   860 0000385B CD21                <1>     int 21h
   861 0000385D FFCD                <1>     dec ebp
   862 0000385F 75E2                <1>     jnz .dpfb2
   863                              <1>     return
    13                              <2> %%_ret:
    14 00003861 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   864                              <1> 
   865                              <1> getDecimalWord:
   866                              <1> ;Works on MAX A dword in eax
   867                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   868 00003862 31C9                <1>     xor ecx, ecx
   869 00003864 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   870 00003866 BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   871                              <1> .dpfb0:
   872 0000386B FFC5                <1>     inc ebp
   873 0000386D 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   874 00003871 31D2                <1>     xor edx, edx
   875 00003873 48F7F3              <1>     div rbx
   876 00003876 80C230              <1>     add dl, '0'
   877 00003879 80FA39              <1>     cmp dl, '9'
   878 0000387C 7603                <1>     jbe .dpfb1
   879 0000387E 80C207              <1>     add dl, 'A'-'0'-10
   880                              <1> .dpfb1:
   881 00003881 88D1                <1>     mov cl, dl    ;Save remainder byte
   882 00003883 4885C0              <1>     test rax, rax
   883 00003886 75E3                <1>     jnz .dpfb0
   884                              <1>     return
    13                              <2> %%_ret:
    14 00003888 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   885                              <1> 
   886                              <1> freezePC:
   887 00003889 488D1515D6FFFF      <1>     lea rdx, memBad1
   888 00003890 B409                <1>     mov ah, 09h
   889 00003892 CD21                <1>     int 21h
   890                              <1> .altEP:
   891 00003894 488D1533D6FFFF      <1>     lea rdx, memBad3
   892 0000389B B409                <1>     mov ah, 09h
   893 0000389D CD21                <1>     int 21h
   894                              <1> .lp:
   895 0000389F F390                <1>     pause
   896 000038A1 F4                  <1>     hlt
   897 000038A2 EBFB                <1>     jmp short .lp
   898                              <1> 
   899                              <1> setDTA:
   900 000038A4 50                  <1>     push rax
   901 000038A5 52                  <1>     push rdx
   902 000038A6 488D15B8C8FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   903 000038AD B8001A0000          <1>     mov eax, 1A00h
   904 000038B2 CD21                <1>     int 21h
   905 000038B4 5A                  <1>     pop rdx
   906 000038B5 58                  <1>     pop rax
   907                              <1>     return
    13                              <2> %%_ret:
    14 000038B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   908                              <1> 
   909                              <1> getDTA:
   910 000038B7 488D15A7C8FFFF      <1>     lea rdx, cmdFFBlock
   911                              <1>     return
    13                              <2> %%_ret:
    14 000038BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   912                              <1> 
   913                              <1> ;-------------------------------
   914                              <1> ; Environment utility functions
   915                              <1> ;-------------------------------
   916                              <1> 
   917                              <1> cmpEnvVar:
   918                              <1> ;Checks that we have found the environment variable we are looking for.
   919                              <1> ;Input: rsi -> Environment var to verify the name of
   920                              <1> ;       rdi -> Environment var name to compare against
   921                              <1> ;Output: ZF=ZE: Equal. ZF=NZ: Not equal.
   922 000038BF 56                  <1>     push rsi
   923 000038C0 57                  <1>     push rdi
   924 000038C1 4887F7              <1>     xchg rsi, rdi       ;Swap Env and user ptrs
   925                              <1> .lp:
   926 000038C4 AC                  <1>     lodsb               ;Pick up from user string
   927 000038C5 E87EFDFFFF          <1>     call ucChar         ;Upper case it!
   928 000038CA 3807                <1>     cmp byte [rdi], al  
   929 000038CC 7509                <1>     jne .exit
   930 000038CE 3C3D                <1>     cmp al, "="         ;Are we at the end?
   931 000038D0 7405                <1>     je .exit
   932 000038D2 48FFC7              <1>     inc rdi
   933 000038D5 EBED                <1>     jmp short .lp
   934                              <1> .exit:
   935 000038D7 5F                  <1>     pop rdi
   936 000038D8 5E                  <1>     pop rsi
   937                              <1>     return
    13                              <2> %%_ret:
    14 000038D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   938                              <1> 
   939                              <1> checkEnvGoodAndGet:
   940                              <1> ;Gets the env ptr and checks that it is double null terminated.
   941                              <1> ;Output:
   942                              <1> ;   ZF=ZE: Environment is bad. Is not double null terminated.
   943                              <1> ;   ZF=NZ: Environment is good. Is double null terminated.
   944                              <1> ;           rsi -> Environment pointer
   945 000038DA 50                  <1>     push rax
   946 000038DB 51                  <1>     push rcx
   947 000038DC 57                  <1>     push rdi
   948 000038DD 4150                <1>     push r8
   949 000038DF 4C8B0529C7FFFF      <1>     mov r8, qword [pspPtr]
   950 000038E6 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]    ;Get the env ptr!
   951 000038EA 4885FF              <1>     test rdi, rdi   ;Null envs are possible. If it happens, just fail!
   952 000038ED 741A                <1>     jz .badExit
   953 000038EF 8B4FF9              <1>     mov ecx, dword [rdi - mcb_size + mcb.blockSize] ;Get the mcb size in para
   954 000038F2 C1E104              <1>     shl ecx, 4          ;Convert to bytes (max number of bytes in the block!)
   955                              <1> ;Ensure we have a good environment, i.e. one that is double null terminated.
   956 000038F5 31C0                <1>     xor eax, eax
   957                              <1> .pathNulScan:
   958 000038F7 F2AE                <1>     repne scasb
   959 000038F9 85C9                <1>     test ecx, ecx   ;If we are zero on first null, its an error
   960 000038FB 740C                <1>     jz .badExit
   961 000038FD 3807                <1>     cmp byte [rdi], al  ;Is char two null?
   962 000038FF 75F6                <1>     jne .pathNulScan    ;If not, keep searching
   963 00003901 31C0                <1>     xor eax, eax
   964 00003903 FFC0                <1>     inc eax ;Clear the ZF
   965 00003905 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]    ;Return the env ptr here
   966                              <1> .badExit:
   967 00003909 4158                <1>     pop r8
   968 0000390B 5F                  <1>     pop rdi
   969 0000390C 59                  <1>     pop rcx
   970 0000390D 58                  <1>     pop rax
   971                              <1>     return
    13                              <2> %%_ret:
    14 0000390E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   972                              <1> 
   973                              <1> 
   974                              <1> findEnvSpace:
   975                              <1> ;Searches the environment for space, returns a pointer to the start of the 
   976                              <1> ; free space in the pointer and a count of free space in the environment.
   977                              <1> ;If count is zero, pointer is not to be used.
   978                              <1> ;Output: ecx = Count. rsi -> First free byte in Environment alloc region.
   979 0000390F 31C9                <1>     xor ecx, ecx
   980 00003911 31C0                <1>     xor eax, eax    ;Clear eax too
   981 00003913 51                  <1>     push rcx
   982 00003914 E8C1FFFFFF          <1>     call checkEnvGoodAndGet ;Get environment in rsi
   983 00003919 59                  <1>     pop rcx
   984                              <1>     retz    ;If ZF=ZE, env bad. Count zero.
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000391A 74(0E)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   985 0000391C 488D5EF0            <1>     lea rbx, qword [rsi - mcb_size] ;Point rbx to the memory arena header
   986 00003920 FFC9                <1>     dec ecx ;Make into a large counter
   987 00003922 4889F7              <1>     mov rdi, rsi    
   988                              <1> .endsearch:
   989 00003925 F2AE                <1>     repne scasb ;Scan
   990 00003927 803F00              <1>     cmp byte [rdi], 0
   991 0000392A 75F9                <1>     jne .endsearch  ;If not double zero, keep searching
   992                              <1>     ;Here we are at the end of the environment
   993 0000392C F7D9                <1>     neg ecx
   994 0000392E FFC1                <1>     inc ecx ;Include the terminating null in the count of the env size.
   995 00003930 4889FE              <1>     mov rsi, rdi    ;Save the pointer to the start of free space in rsi
   996 00003933 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Get the size of environment
   997 00003936 29C8                <1>     sub eax, ecx
   998 00003938 89C1                <1>     mov ecx, eax    ;Get the final count in ecx
   999                              <1>     return
    13                              <2> %%_ret:
    14 0000393A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1000                              <1> 
  1001                              <1> searchForEnvVar:
  1002                              <1> ;Gets the environment, and scans it for a string with the var specified.
  1003                              <1> ;Input: rdi -> Var name to look for.
  1004                              <1> ;Returns: CF=NC: rsi -> Env var in env.
  1005 0000393B 57                  <1>     push rdi
  1006 0000393C 51                  <1>     push rcx
  1007 0000393D 52                  <1>     push rdx
  1008 0000393E 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1009 00003942 4889FA              <1>     mov rdx, rdi        ;Save the search pointer!
  1010                              <1> .varLp:
  1011 00003945 4889D7              <1>     mov rdi, rdx        ;Reset the pointer for searching
  1012 00003948 E872FFFFFF          <1>     call cmpEnvVar      ;Checks if these two environment vars are equal
  1013 0000394D 7416                <1>     je .varFound
  1014 0000394F 31C0                <1>     xor eax, eax        ;Search for a null
  1015 00003951 4889F7              <1>     mov rdi, rsi        ;Scan the environment
  1016 00003954 B9FFFFFFFF          <1>     mov ecx, -1         ;Just keep searching
  1017 00003959 F2AE                <1>     repne scasb         ;Now scan for the terminating null
  1018 0000395B 3807                <1>     cmp byte [rdi], al  ;Now check the second char
  1019 0000395D 7405                <1>     je .varNotFound     ;If second null, no more env to search!
  1020 0000395F 4889FE              <1>     mov rsi, rdi        ;Now move to rsi the start of the next env var
  1021 00003962 EBE1                <1>     jmp short .varLp    ;And scan again!
  1022                              <1> .varNotFound:
  1023 00003964 F9                  <1>     stc
  1024                              <1> .varFound:
  1025 00003965 59                  <1>     pop rcx
  1026 00003966 5A                  <1>     pop rdx
  1027 00003967 5F                  <1>     pop rdi
  1028                              <1>     return
    13                              <2> %%_ret:
    14 00003968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1029                              <1> 
  1030                              <1> envFree:
  1031                              <1> ;Frees a variable from the environment, pulls the strings behind it up
  1032                              <1> ; zeros the rest of the environment, and returns a pointer to the first
  1033                              <1> ; free byte of the environment!
  1034                              <1> ;Input: rsi -> Variable to free.
  1035                              <1> ;Output: rdi -> First byte to write new env var in (old second null)
  1036                              <1> ;        ecx = Number of free bytes in env
  1037 00003969 4889F7              <1>     mov rdi, rsi
  1038 0000396C 31C0                <1>     xor eax, eax
  1039                              <1> .freeLp:
  1040 0000396E 803F00              <1>     cmp byte [rdi], 0
  1041 00003971 7403                <1>     je .exitLp
  1042 00003973 AA                  <1>     stosb
  1043 00003974 EBF8                <1>     jmp short .freeLp
  1044                              <1> .exitLp:
  1045                              <1> ;rdi points to the terminating null of the var we just deleted
  1046                              <1> ;rsi points to the start of the free space
  1047 00003976 4887F7              <1>     xchg rsi, rdi   ;Swap em!
  1048 00003979 66813E0000          <1>     cmp word [rsi], 0   ;If we are already at the terminating null, dont advance!
  1049 0000397E 7504                <1>     jne .prepPullup
  1050 00003980 31C0                <1>     xor eax, eax
  1051 00003982 EB0E                <1>     jmp short .cleanEnv
  1052                              <1> .prepPullup:
  1053 00003984 48FFC6              <1>     inc rsi         ;Go past the terminating null!
  1054                              <1> .pullUp:
  1055 00003987 AC                  <1>     lodsb
  1056 00003988 AA                  <1>     stosb
  1057 00003989 84C0                <1>     test al, al ;Did we pick up a zero
  1058 0000398B 75FA                <1>     jne .pullUp ;If not, keep copying
  1059 0000398D 803E00              <1>     cmp byte [rsi], 0   ;Is this the famous second byte?
  1060 00003990 75F5                <1>     jne .pullUp
  1061                              <1> ;We are at the end of the copy!
  1062                              <1> .cleanEnv:
  1063 00003992 AA                  <1>     stosb   ;Store the famous second null
  1064 00003993 48FFCF              <1>     dec rdi ;without incrementing it!!
  1065 00003996 E807000000          <1>     call getFreeSpace
  1066 0000399B 31C0                <1>     xor eax, eax
  1067 0000399D 51                  <1>     push rcx
  1068 0000399E F3AA                <1>     rep stosb       ;Now zero the remaining space of the env!
  1069 000039A0 59                  <1>     pop rcx
  1070                              <1>     return
    13                              <2> %%_ret:
    14 000039A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1071                              <1> 
  1072                              <1> getFreeSpace:
  1073                              <1> ;Output: ecx = Number of free bytes in the environment block
  1074 000039A2 56                  <1>     push rsi
  1075 000039A3 57                  <1>     push rdi
  1076 000039A4 E81E000000          <1>     call getPtrToEndOfEnv   ;Get ptr in rdi to end of alloc 
  1077 000039A9 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1078 000039AD 4829F7              <1>     sub rdi, rsi    ;This gets number of bytes allocated
  1079 000039B0 E805000000          <1>     call getEnvSize ;Get total block size
  1080 000039B5 29F9                <1>     sub ecx, edi    ;Get difference!
  1081 000039B7 5F                  <1>     pop rdi
  1082 000039B8 5E                  <1>     pop rsi
  1083                              <1>     return
    13                              <2> %%_ret:
    14 000039B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084                              <1> 
  1085                              <1> getEnvSize:
  1086                              <1> ;Gets the number of bytes in the environment allocation
  1087                              <1> ;Output: ecx = Number of bytes in the environment!
  1088 000039BA 53                  <1>     push rbx
  1089 000039BB 498B583E            <1>     mov rbx, qword [r8 + psp.envPtr]
  1090 000039BF 8B4BF9              <1>     mov ecx, dword [rbx - mcb_size + mcb.blockSize]
  1091 000039C2 C1E104              <1>     shl ecx, 4  ;Get number of bytes in the environment
  1092 000039C5 5B                  <1>     pop rbx
  1093                              <1>     return
    13                              <2> %%_ret:
    14 000039C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1094                              <1> 
  1095                              <1> getPtrToEndOfEnv:
  1096                              <1> ;Gets ptr to end of the environment
  1097                              <1> ;Output: rdi -> Second null byte of the terminator of the environment.
  1098 000039C7 50                  <1>     push rax
  1099 000039C8 51                  <1>     push rcx
  1100 000039C9 498B783E            <1>     mov rdi, qword [r8 + psp.envPtr]
  1101 000039CD 31C0                <1>     xor eax, eax
  1102 000039CF 31C9                <1>     xor ecx, ecx
  1103 000039D1 FFC9                <1>     dec ecx
  1104                              <1> .lp:
  1105 000039D3 F2AE                <1>     repne scasb
  1106 000039D5 3807                <1>     cmp byte [rdi], al
  1107 000039D7 75FA                <1>     jne .lp
  1108 000039D9 59                  <1>     pop rcx
  1109 000039DA 58                  <1>     pop rax
  1110                              <1>     return
    13                              <2> %%_ret:
    14 000039DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1111                              <1> 
  1112                              <1> growEnvBlock:
  1113                              <1> ;Attempts to grow the environment to store the new string. Will clean the
  1114                              <1> ; newly allocated 160 byte block of the environment.
  1115                              <1> ;Returns:   CF=NC - Environment grown ok!
  1116                              <1> ;           CF=CY & ZF=ZE - Environment at max size
  1117                              <1> ;           CF=CY & ZF=NZ - Realloc failed.
  1118 000039DC 50                  <1>     push rax
  1119 000039DD 53                  <1>     push rbx
  1120 000039DE 51                  <1>     push rcx
  1121 000039DF 56                  <1>     push rsi
  1122 000039E0 57                  <1>     push rdi
  1123 000039E1 E8BCFFFFFF          <1>     call getFreeSpace       ;Get free space in environment in ecx
  1124 000039E6 E8DCFFFFFF          <1>     call getPtrToEndOfEnv   ;Get ptr to free space in rdi
  1125 000039EB 498B703E            <1>     mov rsi, qword [r8 + psp.envPtr]
  1126 000039EF 8B5EF9              <1>     mov ebx, dword [rsi - mcb_size + mcb.blockSize]  ;Get current alloc size
  1127 000039F2 81C30A000000        <1>     add ebx, 0Ah    ;Add 160 bytes!
  1128 000039F8 81FB00080000        <1>     cmp ebx, 800h   ;Cannot be bigger than 8000h bytes
  1129 000039FE 7321                <1>     jae .tooLarge
  1130                              <1>     ;Here ZF must be NZ.
  1131 00003A00 4150                <1>     push r8
  1132 00003A02 4D8B403E            <1>     mov r8, qword [r8 + psp.envPtr] ;Get the block ptr
  1133 00003A06 B8004A0000          <1>     mov eax, 4A00h
  1134 00003A0B CD21                <1>     int 21h
  1135 00003A0D 4158                <1>     pop r8
  1136 00003A0F 720A                <1>     jc .exit
  1137                              <1>     ;Here now we must clean the new allocated region. We added 160 bytes
  1138                              <1>     ; so we add 160 zeros to the count of bytes
  1139 00003A11 81C1A0000000        <1>     add ecx, 0A0h
  1140 00003A17 31C0                <1>     xor eax, eax
  1141 00003A19 F3AA                <1>     rep stosb
  1142                              <1> .exit:
  1143 00003A1B 5F                  <1>     pop rdi
  1144 00003A1C 5E                  <1>     pop rsi
  1145 00003A1D 59                  <1>     pop rcx
  1146 00003A1E 5B                  <1>     pop rbx
  1147 00003A1F 58                  <1>     pop rax
  1148                              <1>     return
    13                              <2> %%_ret:
    14 00003A20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1149                              <1> .tooLarge:
  1150 00003A21 4831FF              <1>     xor rdi, rdi    ;Set ZF
  1151 00003A24 F9                  <1>     stc             ;Set CF
  1152 00003A25 EBF4                <1>     jmp short .exit
    19                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00003A27 53                  <1>     push rbx
    25 00003A28 51                  <1>     push rcx
    26 00003A29 52                  <1>     push rdx
    27 00003A2A 57                  <1>     push rdi
    28 00003A2B 56                  <1>     push rsi
    29 00003A2C FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00003A2D 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00003A30 488D1511CFFFFF      <1>     lea rdx, crlf
    33 00003A37 E8D4F9FFFF          <1>     call printString
    34                              <1> 
    35 00003A3C 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    36 00003A42 B90C000000          <1>     mov ecx, 0Ch
    37 00003A47 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    38 00003A49 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    39 00003A4C 480FB7FF            <1>     movzx rdi, di
    40 00003A50 4889FA              <1>     mov rdx, rdi    ;Copy error code
    41 00003A53 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    42 00003A57 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    43 00003A5A 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    44 00003A5D 488D152D010000      <1>     lea rdx, qword [.errorMsgTable]
    45 00003A64 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    46 00003A68 E8A3F9FFFF          <1>     call printString     ;Call DOS to print first part of message
    47                              <1> 
    48 00003A6D 488D150E020000      <1>     lea rdx, qword [.readmsg]
    49 00003A74 488D3D16020000      <1>     lea rdi, qword [.writemsg]
    50 00003A7B F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    51 00003A7E 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    52 00003A82 E889F9FFFF          <1>     call printString     ;Call DOS to print error reading/writing portion
    53                              <1> 
    54 00003A87 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    55 00003A8A 0F85E7000000        <1>     jnz .charError
    56                              <1> ;Disk error continues here
    57 00003A90 488D15E4010000      <1>     lea rdx, qword [.drive] ;Drive message
    58 00003A97 E874F9FFFF          <1>     call printString
    59 00003A9C 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    60 00003A9E 80C241              <1>     add dl, "A" ;Add ASCII code
    61 00003AA1 B402                <1>     mov ah, 02h ;Print char in dl
    62 00003AA3 CD21                <1>     int 21h
    63                              <1> .userInput:
    64 00003AA5 E85FF9FFFF          <1>     call printCRLF  ;Print new line
    65                              <1> ;Abort, Retry, Ignore, Fail is word order
    66                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    67                              <1> .userAbort:
    68                              <1> ;Abort is always an option
    69 00003AAA 488D15EF010000      <1>     lea rdx, qword [.abortmsg]
    70 00003AB1 E85AF9FFFF          <1>     call printString ;Call DOS to prompt user for ABORT option
    71                              <1> .userRetry:
    72 00003AB6 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    73 00003AB9 7418                <1>     jz .userIgnore    ;If clear, dont print message
    74 00003ABB 488D15F6010000      <1>     lea rdx, qword [.betweenMsg]
    75 00003AC2 E849F9FFFF          <1>     call printString
    76 00003AC7 488D15DF010000      <1>     lea rdx, qword [.retrymsg]
    77 00003ACE E83DF9FFFF          <1>     call printString
    78                              <1> .userIgnore:
    79 00003AD3 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    80 00003AD6 7418                <1>     jz .userFail
    81 00003AD8 488D15D9010000      <1>     lea rdx, qword [.betweenMsg]
    82 00003ADF E82CF9FFFF          <1>     call printString
    83 00003AE4 488D15BB010000      <1>     lea rdx, qword [.ignoremsg]
    84 00003AEB E820F9FFFF          <1>     call printString
    85                              <1> .userFail:
    86 00003AF0 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    87 00003AF3 7418                <1>     jz .userMsgEnd
    88 00003AF5 488D15BC010000      <1>     lea rdx, qword [.betweenMsg]
    89 00003AFC E80FF9FFFF          <1>     call printString
    90 00003B01 488D15AB010000      <1>     lea rdx, qword [.failmsg]
    91 00003B08 E803F9FFFF          <1>     call printString
    92                              <1> .userMsgEnd:
    93 00003B0D 488D15A7010000      <1>     lea rdx, qword [.endMsg]
    94 00003B14 E8F7F8FFFF          <1>     call printString
    95                              <1> ;Get user input now 
    96 00003B19 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
    97 00003B1B 488D3D9C010000      <1>     lea rdi, qword [.responses] ;Go to start of string
    98 00003B22 B401                <1>     mov ah, 01h ;STDIN without Console Echo
    99 00003B24 CD21                <1>     int 21h ;Get char in al
   100 00003B26 3C61                <1>     cmp al, "a" ;Chack if lowercase, consider using UC char DOS multiplex
   101 00003B28 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   102 00003B2A 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   103                              <1> .uip1:
   104 00003B2C AE                  <1>     scasb   ;Compare char to list, offset gives return code
   105 00003B2D 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   106 00003B2F FFC1                <1>     inc ecx
   107 00003B31 81F904000000        <1>     cmp ecx, 4
   108 00003B37 75F3                <1>     jne .uip1
   109 00003B39 E967FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   110                              <1> .validInput:
   111 00003B3E E8C6F8FFFF          <1>     call printCRLF   ;Note the input was accepted
   112 00003B43 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   113                              <1> ;Now check if the input is permitted
   114 00003B45 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   115 00003B47 7427                <1>     je .cehExit
   116 00003B49 84C0                <1>     test al, al ;Check if 0 => Ignore
   117 00003B4B 740F                <1>     je .viIgnore
   118 00003B4D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   119 00003B4F 7416                <1>     je .viRetry
   120                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   121 00003B51 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   122 00003B54 0F844BFFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   123 00003B5A EB14                <1>     jmp short .cehExit
   124                              <1> .viIgnore:
   125 00003B5C F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   126 00003B5F 0F8440FFFFFF        <1>     jz .userInput
   127 00003B65 EB09                <1>     jmp short .cehExit
   128                              <1> .viRetry:
   129 00003B67 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   130 00003B6A 0F8435FFFFFF        <1>     jz .userInput
   131                              <1> .cehExit:
   132 00003B70 5E                  <1>     pop rsi
   133 00003B71 5F                  <1>     pop rdi
   134 00003B72 5A                  <1>     pop rdx
   135 00003B73 59                  <1>     pop rcx
   136 00003B74 5B                  <1>     pop rbx
   137 00003B75 48CF                <1>     iretq
   138                              <1> .charError:
   139 00003B77 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   140 00003B7C 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   141                              <1> .ce1:
   142 00003B83 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   143 00003B84 88C2                <1>     mov dl, al  ;Move char into dl
   144 00003B86 B402                <1>     mov ah, 02h
   145 00003B88 CD21                <1>     int 21h ;Print char
   146 00003B8A E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   147 00003B8C E914FFFFFF          <1>     jmp .userInput
   148                              <1> 
   149                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   150 00003B91 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   150 00003B9A 746563742024202020  <1>
   151 00003BA3 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   151 00003BAC 6E6974202420202020  <1>
   152 00003BB5 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   152 00003BBE 202420202020202020  <1>
   153 00003BC7 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   153 00003BD0 6F6D6D616E64202420  <1>
   154 00003BD9 446174612024202020- <1>             db "Data $            "       ;Error 4
   154 00003BE2 202020202020202020  <1>
   155 00003BEB 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   155 00003BF4 737420242020202020  <1>
   156 00003BFD 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   156 00003C06 202020202020202020  <1>
   157 00003C0F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   157 00003C18 656469612024202020  <1>
   158 00003C21 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   158 00003C2A 7420466F756E642024  <1>
   159 00003C33 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   159 00003C3C 706572202420202020  <1>
   160 00003C45 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   160 00003C4E 6C7420242020202020  <1>
   161 00003C57 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   161 00003C60 742024202020202020  <1>
   162 00003C69 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   162 00003C72 61696C757265202420  <1>
   163                              <1> 
   164 00003C7B 64726976652024      <1> .drive      db "drive $"
   165 00003C82 6572726F7220726561- <1> .readmsg    db "error reading $"
   165 00003C8B 64696E672024        <1>
   166 00003C91 6572726F7220777269- <1> .writemsg   db "error writing $"
   166 00003C9A 74696E672024        <1>
   167 00003CA0 41626F727424        <1> .abortmsg   db "Abort$" 
   168 00003CA6 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   169 00003CAD 526574727924        <1> .retrymsg   db "Retry$"
   170 00003CB3 4661696C24          <1> .failmsg    db "Fail$"
   171 00003CB8 2C2024              <1> .betweenMsg db ", $"
   172 00003CBB 3F2024              <1> .endMsg     db "? $"
   173 00003CBE 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   174                              <1> 
   175                              <1> int23h:
   176 00003CC2 F60562C3FFFFFF      <1>     test byte [permaSwitch], -1
   177 00003CC9 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   178                              <1>     ;Else, we juggle parent PSP's
   179 00003CCB 50                  <1>     push rax
   180 00003CCC 53                  <1>     push rbx
   181 00003CCD 488B0543C3FFFF      <1>     mov rax, qword [realParent]
   182 00003CD4 488B1D34C3FFFF      <1>     mov rbx, qword [pspPtr]
   183 00003CDB 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   184 00003CDF 5B                  <1>     pop rbx
   185 00003CE0 58                  <1>     pop rax
   186                              <1> .exit:
   187 00003CE1 F9                  <1>     stc     ;Set CF to kill the task
   188 00003CE2 C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    20                                  endOfAlloc: ;End of alloc
    21                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    22                                  Segment transient align=1 follows=.data
    23                                  ;This segment always gets ejected post load
    24                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D1508020000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10                              <1> .exitBad:
    11 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    12                              <1> .okVersion:
    13                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    14 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    15 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    16 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    17 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    18                              <1> ;Setup Int 22h, Int 23h and Int 24h
    19 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    20 0000002F 488905(2C000000)    <1>     mov qword [parentInt22], rax
    21                              <1> 
    22 00000036 488D15(273A0000)    <1>     lea rdx, critErrorHandler
    23 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    24 00000041 B824250000          <1>     mov eax, 2524h
    25 00000046 CD21                <1>     int 21h
    26 00000048 488D15(C23C0000)    <1>     lea rdx, int23h
    27 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    28 00000053 B823250000          <1>     mov eax, 2523h
    29 00000058 CD21                <1>     int 21h
    30 0000005A 488D15(770F0000)    <1>     lea rdx, applicationReturn
    31 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    32 00000065 B822250000          <1>     mov eax, 2522h
    33 0000006A CD21                <1>     int 21h
    34                              <1> ;Get a pointer to DOS Sysvars
    35 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    36 0000006E CD21                <1>     int 21h
    37 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    38                              <1> ;Call for simple internationalisation data
    39 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    40 0000007C CD21                <1>     int 21h
    41 0000007E 3CFF                <1>     cmp al, -1
    42 00000080 7412                <1>     je .skipSwitch
    43 00000082 8815(2A000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    44 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    45 0000008B 7507                <1>     jne .skipSwitch
    46 0000008D C605(29000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    47                              <1> .skipSwitch:
    48 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    49 00000099 488D15(34000000)    <1>     lea rdx, ctryData
    50 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    51                              <1> ;Now determine if this is the master copy of COMMAND.COM
    52                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    53 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    54 000000A7 CD21                <1>     int 21h
    55 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    56 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    57 000000B1 CD21                <1>     int 21h
    58 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    59 000000B6 7574                <1>     jne .skipMaster
    60                              <1> ;Ok so we are master command.com
    61                              <1> ;Now make myself the real parent
    62 000000B8 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    63 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    64                              <1> ;Set current Drive in COMSPEC
    65 000000C6 B800190000          <1>     mov eax, 1900h ;Get current Drive
    66 000000CB CD21                <1>     int 21h
    67 000000CD 0441                <1>     add al, "A"
    68 000000CF 8805(4E0F0000)      <1>     mov byte [comspecEvar.cspec], al
    69                              <1> ;Set Int 2Eh up
    70 000000D5 488D15(E1180000)    <1>     lea rdx, int2Eh
    71 000000DC B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    72 000000E1 CD21                <1>     int 21h
    73                              <1> ;Now, open and parse AUTOEXEC.BAT. Build new Master Environment here.
    74                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    75 000000E3 BB0A000000          <1>     mov ebx, 10 ;Allocate 160 bytes
    76 000000E8 B800480000          <1>     mov eax, 4800h
    77 000000ED CD21                <1>     int 21h
    78 000000EF 0F821EFFFFFF        <1>     jc .exitBad
    79                              <1> ;Set master environment as mine
    80 000000F5 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    81 000000F9 488D35(460F0000)    <1>     lea rsi, masterEnv
    82 00000100 4889C7              <1>     mov rdi, rax
    83 00000103 B91E000000          <1>     mov ecx, menv_len
    84 00000108 F3A4                <1>     rep movsb   ;Copy the chars over!
    85                              <1> 
    86 0000010A 488D15(48090000)    <1>     lea rdx, crlf
    87 00000111 B409                <1>     mov ah, 09h
    88 00000113 CD21                <1>     int 21h
    89 00000115 E8(B0220000)        <1>     call time
    90 0000011A E8(4B220000)        <1>     call date
    91 0000011F 488D15(48090000)    <1>     lea rdx, crlf
    92 00000126 B409                <1>     mov ah, 09h
    93 00000128 CD21                <1>     int 21h
    94 0000012A EB2E                <1>     jmp short .printInit
    95                              <1> .skipMaster:    
    96                              <1> ;We now search for the master environment!!
    97                              <1>     ;Walk the parentPSP chain until we find a PSP which is its own
    98                              <1>     ; parent. This is the previous master command interpreter! This means
    99                              <1>     ; that non-master COMMAND.COM instances are not their own parents! We 
   100                              <1>     ; then set our environment ptr in the PSP to the master environment.
   101 0000012C 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
   102 00000133 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
   103 0000013B 0FB605(2A000000)    <1>     movzx eax, byte [switchChar]
   104 00000142 F2AE                <1>     repne scasb
   105 00000144 67E313              <1>     jecxz .printInit
   106 00000147 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
   107 0000014A E8(48360000)        <1>     call ucChar
   108 0000014F 3C50                <1>     cmp al, "P" ;Is it permanent switch?
   109 00000151 7507                <1>     jne .printInit
   110 00000153 C605(2B000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
   111                              <1> .printInit:
   112 0000015A 488D1D(E53C0000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
   113                              <1> ;Finish by printing INIT string.
   114 00000161 53                  <1>     push rbx
   115 00000162 488D153A000000      <1>     lea rdx, initString
   116 00000169 B409                <1>     mov ah, 09h
   117 0000016B CD21                <1>     int 21h ;Print init string
   118 0000016D E8(092B0000)        <1>     call version.printVersionNumber
   119 00000172 488D1560000000      <1>     lea rdx, initString2
   120 00000179 B409                <1>     mov ah, 09h
   121 0000017B CD21                <1>     int 21h ;Print init string
   122 0000017D 5B                  <1>     pop rbx
   123                              <1>     ;Now we add the stack to the alloc and paragraph align
   124 0000017E 4881C340060000      <1>     add rbx, stackSize
   125 00000185 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   126 0000018C 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   127 00000190 48C1E304            <1>     shl rbx, 4
   128 00000194 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   129 00000197 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   130 0000019E E9(640F0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   131                              <1> ;Loader Data here
   132                              <1> initString: 
   133 000001A3 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   133 000001AC 66696320436F6D7075- <1>
   133 000001B5 746572205265736561- <1>
   133 000001BE 726368285229205343- <1>
   133 000001C7 502F444F5328522920- <1>
   133 000001D0 56657273696F6E2024  <1>
   134                              <1> initString2:
   135 000001D9 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Research 2024.",CR,LF,"$"
   135 000001E2 202020284329436F70- <1>
   135 000001EB 797269676874205363- <1>
   135 000001F4 69656E746966696320- <1>
   135 000001FD 436F6D707574657220- <1>
   135 00000206 526573656172636820- <1>
   135 0000020F 323032342E0D0A24    <1>
   136 00000217 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   136 00000220 20444F532076657273- <1>
   136 00000229 696F6E0D0A24        <1>
    25                                  
    26                                  stackSize equ 200*8    ;200 QWORD stack
    26          ------------------       info: assembly required 1+4+2 passes

