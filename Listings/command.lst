     1                                  ;COMMAND.COM main file
     2                                  [map all ./Listings/command.map]
     3                                  [DEFAULT REL]
     4                                  BITS 64
     5                                  ;Defs, strucs and macros
     6                                  %include "./Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1>     %ifdef retOff
    22                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1>     %ifdef currSegVBase
    24                              <1>     j%+1 short (retOff+currSegVBase)
    25                              <1>     %else
    26                              <1>     j%+1 short retOff
    27                              <1>     %endif  ;End ifdef currSegVBase
    28                              <1>     %else 
    29                              <1>     j%-1 short %%a
    30                              <1>     return
    31                              <1> %%a:
    32                              <1>     %endif  ;End the distance measurement if
    33                              <1>     %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     7                                  %include "./Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    18 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    19 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    20 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    21 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    22 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    23 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    24 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    25 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    26 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    27 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    31 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    32 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    33 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    35 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (41h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> netFCBShare     equ 70h
   160                              <1> noInherit       equ 80h
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> 
   163                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 24h on disk full.
   164                              <1> ;Buffering on writes
   165                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   167                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1> readOnlyFile    equ 1h
   170                              <1> hiddenFile      equ 2h
   171                              <1> systemFile      equ 4h
   172                              <1> volumeLabel     equ 8h
   173                              <1> directoryFile   equ 10h ;Directory entry
   174                              <1> archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1> charDevFastOut  equ 10h ;If set, device supports Int 29h
   182                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   183                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   185                              <1> devCharDev      equ 80h ;If set, it is a char device!
   186                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   190                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1>  
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   215 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   216                              <1>     .dataarea:             ;Points to the start of the data area
   217                              <1> endstruc
   218                              <1> ;Buffer Flag equates
   219                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   220                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   221                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   222                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   223                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   224                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   225                              <1> ;Note! A buffer is marked as referenced only when the application 
   226                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   227                              <1> ;------------------------------------------------------------------------;
   228                              <1> ; Memory control block for each memory arena
   229                              <1> ;------------------------------------------------------------------------;
   230                              <1> struc mcb
   231 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   232 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   233 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   234 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   235                              <1>     .program:
   236                              <1> endstruc
   237                              <1> ;MCB equates
   238                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   239                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   240                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   241                              <1> mcbMarkCtn      equ "M"
   242                              <1> mcbMarkEnd      equ "Z"
   243                              <1> 
   244                              <1> memFirstFit     equ 0   ;First free block goes to application
   245                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   246                              <1> memLastFit      equ 2   ;Last free block goes to application
   247                              <1> 
   248                              <1> ;Owner = Para aligned address => Owning application PSP
   249                              <1> ;...To consider...
   250                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   251                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   252                              <1> ;------------------------------------------------------------------------;
   253                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   254                              <1> ; following order, thus allowing for return values to be placed in the 
   255                              <1> ; registers by accessing the caller register stack frame.
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc callerFrame
   258 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   259 00000008 ????????????????    <1>     .rbx    resq 1    
   260 00000010 ????????????????    <1>     .rcx    resq 1
   261 00000018 ????????????????    <1>     .rdx    resq 1
   262 00000020 ????????????????    <1>     .rsi    resq 1
   263 00000028 ????????????????    <1>     .rdi    resq 1
   264 00000030 ????????????????    <1>     .rbp    resq 1
   265 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   266 00000040 ????????????????    <1>     .r9     resq 1
   267                              <1> ;Pushed by Processor when invoked via Interrupt
   268 00000048 ????????????????    <1>     .rip    resq 1
   269 00000050 ????????????????    <1>     .cs     resq 1
   270 00000058 ????????????????    <1>     .flags  resq 1
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc dpl
   274                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   275                              <1> ; server calls
   276 00000000 ????????????????    <1>     .rax    resq 1
   277 00000008 ????????????????    <1>     .rbx    resq 1
   278 00000010 ????????????????    <1>     .rcx    resq 1
   279 00000018 ????????????????    <1>     .rdx    resq 1
   280 00000020 ????????????????    <1>     .rsi    resq 1
   281 00000028 ????????????????    <1>     .rdi    resq 1
   282 00000030 ????????????????    <1>     .r8     resq 1
   283 00000038 ????????????????    <1>     .r9     resq 1
   284 00000040 ????????????????    <1>     .align  resq 1
   285 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   286 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   287                              <1> endstruc
   288                              <1> 
   289                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   290 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   291 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   292 00000010 ????????????????    <1>     .newSFTVal      resq 1
   293 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   294 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   295 00000028 ????????????????    <1>     .newLastdrive   resq 1
   296 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   297 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   298 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   299 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   300 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   301 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   302 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc filename
   306                              <1> ;8.3 File name struct
   307 00000000 ????????????????    <1>     .fName  resb 8
   308 00000008 ??????              <1>     .fExt   resb 3
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   312 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   313 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   314 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   315 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   316 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   317 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   318 00000016 ????                <1>     .fileTime   resw 1  ;File time
   319 00000018 ????                <1>     .fileDate   resw 1  ;File date
   320 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   321 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc psp
   325 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   326 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   327 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes
   328 0000000A ????????????????    <1>     .oldInt22h  resq 1  ;Int 22h pointer on overlay load
   329 00000012 ????????????????    <1>     .oldInt23h  resq 1  ;Int 23h pointer on overlay load
   330 0000001A ????????????????    <1>     .oldInt24h  resq 1  ;Int 24h pointer on overlay load
   331 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   332                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   333 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   334 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   335 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 21h
   336 0000004E ????                <1>     .jftSize    resw 1  ;JFT array size, 20 => PSP JFT in use
   337 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   338 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   339 0000005B ??                  <1>                 resb 1  ;Reserved byte
   340                              <1> ;If xtraHdlSz > 20, then the QWORD at .jobFileTbl becomes a pointer
   341                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   342                              <1> ;If xtraHdlSz < 20 (DOS will never set it so), then it is considered as 20
   343                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   344                              <1> ; always used and xtraHdlSz.
   345                              <1> ;Will need to add two SYSCALLS for future expansion:
   346                              <1> ;       1) Get Program Environment Pointer
   347                              <1> ;       2) Get Command Line arguments pointer
   348                              <1> ;The below are in the same place as in DOS.
   349                              <1>     .cmdLineArgPtr: ;Symbol for future use
   350 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB,    argument 1 
   351 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB,   argument 2
   352                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   353 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   354 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   355                              <1> endstruc
   356                              <1> 
   357                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   358                              <1> 
   359                              <1> struc clkStruc
   360 00000000 ????                <1>     .dateWord   resw 1
   361 00000002 ??                  <1>     .minutes    resb 1
   362 00000003 ??                  <1>     .hours      resb 1
   363 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   364 00000005 ??                  <1>     .seconds    resb 1
   365                              <1> endstruc
   366                              <1> 
   367                              <1> struc countryStruc
   368 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   369                              <1>                         ;0 = month day year hh:mm:ss
   370                              <1>                         ;1 = day month year hh:mm:ss
   371                              <1>                         ;2 = year month day hh:mm:ss
   372 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   373 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   374 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   375 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   376 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   377 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   378                              <1>                         ;0 = Symbol leads, without space
   379                              <1>                         ;1 = Symbol follows, without space
   380                              <1>                         ;2 = Symbol leads, one space
   381                              <1>                         ;3 = Symbol follows, one space
   382                              <1>                         ;4 = Symbol replace decimal separator
   383 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   384 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   385 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   386 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   387 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   388                              <1> endstruc
   389                              <1> 
   390                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   391                              <1> ;for a space of 64Gb
   392                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   393                              <1> dosLowBase  equ 600h    ;Low load address
   394                              <1> 
   395                              <1> ;Critical Error AH bitfield equates
   396                              <1> critRead    equ 0h
   397                              <1> critWrite   equ 1h
   398                              <1> critDOS     equ 0h
   399                              <1> critFAT     equ 2h
   400                              <1> critDir     equ 4h
   401                              <1> critData    equ 6h
   402                              <1> critFailOK  equ 8h
   403                              <1> critRetryOK equ 10h
   404                              <1> critIgnorOK equ 20h
   405                              <1> critCharDev equ 80h
   406                              <1> 
   407                              <1> critIgnore  equ 0
   408                              <1> critRetry   equ 1
   409                              <1> critAbort   equ 2
   410                              <1> critFail    equ 3
   411                              <1> 
   412                              <1> ;MISC ASCII control chars
   413                              <1> NUL equ 00h ;^@         | ASCII Null
   414                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   415                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   416                              <1> BEL equ 07h ;^G         | ASCII Bell
   417                              <1> BSP equ 08h ;^H         | ASCII Backspace
   418                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   419                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   420                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   421                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   422                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   423                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   424                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   425                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   426                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   427                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   428                              <1> SPC equ 20h ;Printable  | ASCII Space
   429                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   430                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   431                              <1> 
   432                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   433                              <1> ;Extended Ascii Codes
   434                              <1> eF1     equ 3Bh ;F1 second byte
   435                              <1> eF2     equ 3Ch ;F2 second byte
   436                              <1> eF3     equ 3Dh ;F3 second byte
   437                              <1> eF4     equ 3Eh ;F4 second byte
   438                              <1> eF5     equ 3Fh ;F5 second byte
   439                              <1> eF6     equ 40h ;F6 second byte
   440                              <1> eF7     equ 41h ;F7 second byte
   441                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   442                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   443                              <1> eIns    equ 52h ;Insert second byte
   444                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   445                              <1> 
   446                              <1> ;Default Configuration for the system
   447                              <1> 
   448                              <1> buffersDefault  equ 30
   449                              <1> filesDefault    equ 20
   450                              <1> fcbsDefault     equ 4
   451                              <1> safeFcbsDeflt   equ 0
   452                              <1> lastDriveDeflt  equ 5   
     8                                  %include "./Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     9                                  %include "./Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> 
    48                              <1> errFilExist equ 80  ;File already exists
    49                              <1> errDirExist equ 82  ;Directory already exists
    50                              <1> errFI44     equ 83  ;Fail on Int 24h
    51                              <1> errRedir    equ 84  ;Too many levels of redirection
    52                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    53                              <1> errBadPass  equ 86  ;Bad password
    54                              <1> errBadParam equ 87  ;Bad parameter passed to request
    55                              <1> errNetWrite equ 88  ;Network Write Fault
    56                              <1> ;-----------------------------------------------------------------------------
    57                              <1> ;Error Loci
    58                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    59                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    60                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    61                              <1> eLocChr     equ 4   ;Serial/Character Device error
    62                              <1> eLocMem     equ 5   ;Related to RAM
    63                              <1> ;-----------------------------------------------------------------------------
    64                              <1> ;Error Actions
    65                              <1> eActRet     equ 1   ;Retry
    66                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    67                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    68                              <1> eActAbt     equ 4   ;Abort with cleanup
    69                              <1> eActKil     equ 5   ;Abort without cleanup
    70                              <1> eActIgn     equ 6   ;Ignore error
    71                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    72                              <1> ;-----------------------------------------------------------------------------
    73                              <1> ;Error classes
    74                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    75                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    76                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    77                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    78                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    79                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    80                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    81                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    82                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    83                              <1> eClsLocked  equ 10  ;Resource Locked
    84                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    85                              <1> eClsClash   equ 12  ;Resource already exists!
    86                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./Include/cmdEqu.inc"
     1                              <1> ;Data equates and struct declarations
     2                              <1> 
     3                              <1> cmdBufferL  equ 128 ;Length of a command line buffer
     4                              <1> driveSpecL  equ 2   ;Space for X:
     5                              <1> dirPathL    equ 64  ;Length of a directory path
     6                              <1> fcbNameL    equ 11  ;8.3 => 11 chars in name
     7                              <1> filenameL   equ fcbNameL + 1 ;Add a dot for the name.ext separator
     8                              <1> fileNameZL  equ filenameL + 1   ;Add a space for a terminating null
     9                              <1> fullDirPathL equ driveSpecL + dirPathL
    10                              <1> fullDirPathZL equ fullDirPathL + 1   ;Add one for terminating null
    11                              <1> fileSpecZL  equ fullDirPathL + fileNameZL ;One full asciiz pathspec
    12                              <1> cmdNameL    equ filenameL + 1 + 1   ;1 for the count prefix,1 for end null
    13                              <1> 
    14                              <1> ;Use PSP FCB's for switch buffers
    15                              <1> fcb1        equ psp.fcb1
    16                              <1> fcb2        equ psp.fcb2
    17                              <1> ;Use the dta as the built command line buffer.
    18                              <1> cmdLineCnt  equ psp.parmList
    19                              <1> cmdLine     equ psp.progTail
    20                              <1> 
    21                              <1> 
    22                              <1> ;Struct Declarations
    23                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    24 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    25 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    26 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    27 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    28 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    29                              <1> endstruc
    30                              <1> 
    31                              <1> struc execProg  ;For use with EXEC-ing a child task
    32 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    33 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    34 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    35 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    36                              <1> endstruc
    37                              <1> 
    38                              <1> ;Directory attribute equates
    39                              <1>     dirReadOnly     equ 01h
    40                              <1>     dirHidden       equ 02h
    41                              <1>     dirSystem       equ 04h
    42                              <1>     dirVolumeID     equ 08h
    43                              <1>     dirDirectory    equ 10h
    44                              <1>     dirArchive      equ 20h
    45                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
    46                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    47                              <1>     ;If any of the three bits are set, then ALL three bits are set
    48                              <1>     ; in addition to whatever the user passed to search for.
    49                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
    50                              <1>     dirIncFiles     equ dirHidden | dirSystem
    11                                  Segment .data align=1 
    12                                  %include "./Data/cmdData.asm"
     1                              <1> ;Static Data Area for COMMAND.COM    
     2                              <1> startLbl:   ;Start symbol, this is the entry point
     3 00000000 E9(00000000)        <1>     jmp cmdLdr
     4 00000005 0000000000000000    <1> stackTop    dq 0    ;Pointer to the top of the stack as allocated by DOS
     5 0000000D 0000                <1> returnCode  dw 0    ;Return Code from a child process
     6 0000000F 0000000000000000    <1> pspPtr      dq 0    ;Internal pointer to the task PSP
     7 00000017 FFFFFFFFFFFFFFFF    <1> realParent  dq -1   ;Only the first Copy of COMMAND.COM sets itself here
     8 0000001F 0000000000000000    <1> sysVars     dq 0    ;Ptr to DOS sysvars
     9 00000027 1400                <1> numHdls     dw 20   ;Get number of handles permitted
    10 00000029 FFFF                <1> promptPtr   dw -1   ;Offset From Environemnt Start to prompt String. -1 => dflt 
    11 0000002B 5C                  <1> pathSep     db "\"  ;Default path sep
    12 0000002C 2F                  <1> switchChar  db "/"  ;Default switch char
    13 0000002D 00                  <1> permaSwitch db 0    ;If -1, EXIT should just return. If 0, EXIT returns
    14 0000002E 0000000000000000    <1> parentInt22 dq 0    ;Stores the parent values to restore upon exiting if it can
    15                              <1> ;Static strings, not used in command line parsing
    16 00000036 000000000000000000- <1> ctryData    db countryStruc_size dup (0)  ;Length of the country table
    16 0000003F 000000000000000000- <1>
    16 00000048 000000000000000000- <1>
    16 00000051 000000000000000000- <1>
    16 0000005A 0000                <1>
    17 0000005C 000000000000000000- <1> currDirStr  db fullDirPathZL dup (0) ;Current Directory String
    17 00000065 000000000000000000- <1>
    17 0000006E 000000000000000000- <1>
    17 00000077 000000000000000000- <1>
    17 00000080 000000000000000000- <1>
    17 00000089 000000000000000000- <1>
    17 00000092 000000000000000000- <1>
    17 0000009B 00000000            <1>
    18                              <1> 
    19                              <1> 
    20                              <1> cmdLineStatePtr:
    21 0000009F 0000000000000000    <1> cmdStartPtr dq 0    ;Ptr to the first char for this command (may be a space)
    22 000000A7 0000000000000000    <1> cmdEndPtr   dq 0    ;Ptr to the terminating char for this command (0Dh or |)
    23 000000AF 00                  <1> pipeFlag    db 0    ;If set, we fired up a pipe for this command line
    24 000000B0 FFFF                <1> pipeSTDIN   dw -1   ;The handle to replace STDIN with once all piping complete
    25 000000B2 FFFF                <1> pipeSTDOUT  dw -1   ;The handle to replace STDOUT with once all piping complete
    26                              <1> 
    27                              <1> cmdStatePtr:   ;Symbol to use for clearing command state variables
    28                              <1> ;These variables are valid for a SINGLE command in a command line
    29 000000B4 0000                <1> cmdDrvSpec  dw 0    ;Read the first word in to see if the pathspec has drivespec
    30 000000B6 00                  <1> redirIn     db 0    ;If set, we are redirecting input from a file
    31 000000B7 00                  <1> redirOut    db 0    ;If 1, we are redirecting output to a file, destructively
    32                              <1> ;                    If 2, we are redirecting output to a file, by appending
    33 000000B8 FFFF                <1> redirSTDIN  dw -1   ;The handle to replace STDIN with once redir complete
    34 000000BA FFFF                <1> redirSTDOUT dw -1   ;The handle to replace STDOUT with once all redir complete
    35                              <1> 
    36 000000BC 00                  <1> arg1Flg     db 0    ;Set if there was a first argument
    37 000000BD 00                  <1> arg1Off     db 0    ;Offset into cmdBuffer to the argument
    38 000000BE 00                  <1> arg1FCBret  db 0    ;AL on return from parse filename for argument 1
    39                              <1> 
    40 000000BF 00                  <1> arg2Flg     db 0    ;Set if there was a second argument
    41 000000C0 00                  <1> arg2Off     db 0    ;Offset into cmdBuffer to the argument
    42 000000C1 00                  <1> arg2FCBret  db 0    ;AL on return from parse filename for argument 2
    43                              <1> 
    44                              <1> cmdStateL equ $ - cmdStatePtr
    45                              <1> cmdLineStateL equ $ - cmdLineStatePtr
    46                              <1> 
    47                              <1> ;Structs and strings
    48                              <1> 
    49 000000C2 000000000000000000- <1> cmdFcb      db 10h dup (0) ;Internal "fcb" for parsing the command name
    49 000000CB 00000000000000      <1>
    50 000000D2 000000000000000000- <1> cmdFFBlock  db ffBlock_size dup (0) ;Internal Find First Block to use as default DTA
    50 000000DB 000000000000000000- <1>
    50 000000E4 000000000000000000- <1>
    50 000000ED 000000000000000000- <1>
    50 000000F6 00000000000000      <1>
    51                              <1> 
    52 000000FD 000000000000000000- <1> launchBlock db execProg_size dup (0)
    52 00000106 000000000000000000- <1>
    52 0000010F 000000000000000000- <1>
    52 00000118 0000000000          <1>
    53 0000011D 000000000000000000- <1> cmdTail     db cmdBufferL dup (0)   ;This is the tail that is passed to EXEC
    53 00000126 000000000000000000- <1>
    53 0000012F 000000000000000000- <1>
    53 00000138 000000000000000000- <1>
    53 00000141 000000000000000000- <1>
    53 0000014A 000000000000000000- <1>
    53 00000153 000000000000000000- <1>
    53 0000015C 000000000000000000- <1>
    53 00000165 000000000000000000- <1>
    53 0000016E 000000000000000000- <1>
    53 00000177 000000000000000000- <1>
    53 00000180 000000000000000000- <1>
    53 00000189 000000000000000000- <1>
    53 00000192 000000000000000000- <1>
    53 0000019B 0000                <1>
    54                              <1> 
    55 0000019D 000000000000000000- <1> inBuffer    db cmdBufferL dup (0)  ;Add one to add space for terminating CR
    55 000001A6 000000000000000000- <1>
    55 000001AF 000000000000000000- <1>
    55 000001B8 000000000000000000- <1>
    55 000001C1 000000000000000000- <1>
    55 000001CA 000000000000000000- <1>
    55 000001D3 000000000000000000- <1>
    55 000001DC 000000000000000000- <1>
    55 000001E5 000000000000000000- <1>
    55 000001EE 000000000000000000- <1>
    55 000001F7 000000000000000000- <1>
    55 00000200 000000000000000000- <1>
    55 00000209 000000000000000000- <1>
    55 00000212 000000000000000000- <1>
    55 0000021B 0000                <1>
    56 0000021D 000000000000000000- <1> cmdBuffer   db cmdBufferL dup (0)  ;This is the to copy input to when processing
    56 00000226 000000000000000000- <1>
    56 0000022F 000000000000000000- <1>
    56 00000238 000000000000000000- <1>
    56 00000241 000000000000000000- <1>
    56 0000024A 000000000000000000- <1>
    56 00000253 000000000000000000- <1>
    56 0000025C 000000000000000000- <1>
    56 00000265 000000000000000000- <1>
    56 0000026E 000000000000000000- <1>
    56 00000277 000000000000000000- <1>
    56 00000280 000000000000000000- <1>
    56 00000289 000000000000000000- <1>
    56 00000292 000000000000000000- <1>
    56 0000029B 0000                <1>
    57 0000029D 000000000000000000- <1> cmdPathSpec db fileSpecZL dup (0)  ;Space for full path to a external command
    57 000002A6 000000000000000000- <1>
    57 000002AF 000000000000000000- <1>
    57 000002B8 000000000000000000- <1>
    57 000002C1 000000000000000000- <1>
    57 000002CA 000000000000000000- <1>
    57 000002D3 000000000000000000- <1>
    57 000002DC 000000000000000000- <1>
    57 000002E5 00000000000000      <1>
    58                              <1> 
    59 000002EC 000000000000000000- <1> fcbCmdSpec  db fcbNameL dup (0) ;Used to make a FCB style name for the file
    59 000002F5 0000                <1>
    60 000002F7 000000000000000000- <1> cmdSpec     db fileNameZL dup (0)   ;ASCIIZ command spec for the command name
    60 00000300 00000000            <1>
    61 00000304 000000000000000000- <1> cmdName     db cmdNameL dup (0) ;Command name string prefixed by length of word
    61 0000030D 0000000000          <1>
    62                              <1> 
    63 00000312 000000000000000000- <1> rdrInFilespec   db fileSpecZL dup (0)   ;Space for the redir in filespec
    63 0000031B 000000000000000000- <1>
    63 00000324 000000000000000000- <1>
    63 0000032D 000000000000000000- <1>
    63 00000336 000000000000000000- <1>
    63 0000033F 000000000000000000- <1>
    63 00000348 000000000000000000- <1>
    63 00000351 000000000000000000- <1>
    63 0000035A 00000000000000      <1>
    64 00000361 000000000000000000- <1> rdrOutFilespec  db fileSpecZL dup (0)   ;Space for the redir out filespec
    64 0000036A 000000000000000000- <1>
    64 00000373 000000000000000000- <1>
    64 0000037C 000000000000000000- <1>
    64 00000385 000000000000000000- <1>
    64 0000038E 000000000000000000- <1>
    64 00000397 000000000000000000- <1>
    64 000003A0 000000000000000000- <1>
    64 000003A9 00000000000000      <1>
    65                              <1> 
    66                              <1> ;Once we are done with a pathname, we override the first byte with a NULL.
    67 000003B0 000000000000000000- <1> pipe1Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    67 000003B9 000000000000000000- <1>
    67 000003C2 000000000000000000- <1>
    67 000003CB 000000000000000000- <1>
    67 000003D4 000000000000000000- <1>
    67 000003DD 000000000000000000- <1>
    67 000003E6 000000000000000000- <1>
    67 000003EF 000000000000000000- <1>
    67 000003F8 00000000000000      <1>
    68 000003FF 000000000000000000- <1> pipe2Filespec   db fileSpecZL dup (0)   ;Space for the pipe file filespec
    68 00000408 000000000000000000- <1>
    68 00000411 000000000000000000- <1>
    68 0000041A 000000000000000000- <1>
    68 00000423 000000000000000000- <1>
    68 0000042C 000000000000000000- <1>
    68 00000435 000000000000000000- <1>
    68 0000043E 000000000000000000- <1>
    68 00000447 00000000000000      <1>
    69                              <1> 
    70 0000044E 0000000000000000    <1> newPipe dq 0    ;Pointer to the new pathspec (STDOUT)
    71 00000456 0000000000000000    <1> oldPipe dq 0    ;Pointer to the old pathspec (STDIN)
    72                              <1> 
    73 0000045E 000000000000000000- <1> searchSpec  db cmdBufferL dup (0)   ;Contains the pathspec for the search file
    73 00000467 000000000000000000- <1>
    73 00000470 000000000000000000- <1>
    73 00000479 000000000000000000- <1>
    73 00000482 000000000000000000- <1>
    73 0000048B 000000000000000000- <1>
    73 00000494 000000000000000000- <1>
    73 0000049D 000000000000000000- <1>
    73 000004A6 000000000000000000- <1>
    73 000004AF 000000000000000000- <1>
    73 000004B8 000000000000000000- <1>
    73 000004C1 000000000000000000- <1>
    73 000004CA 000000000000000000- <1>
    73 000004D3 000000000000000000- <1>
    73 000004DC 0000                <1>
    74                              <1> ;The above is larger than is needed/supported by DOS to allow for 
    75                              <1> ; users overtyping
    76                              <1> 
    77                              <1> ;Internal Function vars
    78                              <1> ;Dir Vars
    79 000004DE 00                  <1> dirPrnType  db 0    ;Print type.    Bit[0] set => /W or /w specified
    80                              <1> ;                                   Bit[1] set => /P or /p specified
    81 000004DF 00                  <1> dirLineCtr  db 0    ;Counter to keep track of which line we printed (0-23)
    82 000004E0 00                  <1> dirFileCtr  db 0    ;Used in /W mode, rollover after 5
    83 000004E1 00                  <1> dirDrv      db 0    ;0 based drive number to use
    84 000004E2 000000000000000000- <1> dirOldCWD   db cmdBufferL dup (0)   ;Space for CWD and any overspill 
    84 000004EB 000000000000000000- <1>
    84 000004F4 000000000000000000- <1>
    84 000004FD 000000000000000000- <1>
    84 00000506 000000000000000000- <1>
    84 0000050F 000000000000000000- <1>
    84 00000518 000000000000000000- <1>
    84 00000521 000000000000000000- <1>
    84 0000052A 000000000000000000- <1>
    84 00000533 000000000000000000- <1>
    84 0000053C 000000000000000000- <1>
    84 00000545 000000000000000000- <1>
    84 0000054E 000000000000000000- <1>
    84 00000557 000000000000000000- <1>
    84 00000560 0000                <1>
    85 00000562 000000000000000000- <1> dirPathArg  db cmdBufferL dup (0)   ;Copy the pathspec argument here if any
    85 0000056B 000000000000000000- <1>
    85 00000574 000000000000000000- <1>
    85 0000057D 000000000000000000- <1>
    85 00000586 000000000000000000- <1>
    85 0000058F 000000000000000000- <1>
    85 00000598 000000000000000000- <1>
    85 000005A1 000000000000000000- <1>
    85 000005AA 000000000000000000- <1>
    85 000005B3 000000000000000000- <1>
    85 000005BC 000000000000000000- <1>
    85 000005C5 000000000000000000- <1>
    85 000005CE 000000000000000000- <1>
    85 000005D7 000000000000000000- <1>
    85 000005E0 0000                <1>
    86 000005E2 3F3F3F3F3F3F3F3F    <1> dirSrchPat  db 8 dup ("?")    ;We copy the search pattern here
    87 000005EA 2E                  <1> dirSPExt    db "."
    88 000005EB 3F3F3F              <1>             db 3 dup ("?")
    89                              <1> 
    90                              <1> ;Volume Vars
    91 000005EE 000000000000000000- <1> volLblSpc   db 13 dup (0)
    91 000005F7 00000000            <1>
    92 000005FB 00                  <1> volPathBuf  db 0 ;Drive LETTER goes here
    93 000005FC 3A5C2A2E2A00        <1>             db ":\*.*",0  ;This remains to build X:\*.*,0 for vol label search
    94                              <1> 
    95                              <1> ;Time/Date vars
    96 00000602 00                  <1> td1 db 0    ;Minutes/Year
    97 00000603 00                  <1> td2 db 0    ;Hours/Zero
    98 00000604 00                  <1> td3 db 0    ;Hundredths/Day
    99 00000605 00                  <1> td4 db 0    ;Seconds/Month
   100                              <1> 
   101                              <1> ;Rename/Copy Buffers
   102 00000606 000000000000000000- <1> sourcePath  db cmdBufferL dup (0)
   102 0000060F 000000000000000000- <1>
   102 00000618 000000000000000000- <1>
   102 00000621 000000000000000000- <1>
   102 0000062A 000000000000000000- <1>
   102 00000633 000000000000000000- <1>
   102 0000063C 000000000000000000- <1>
   102 00000645 000000000000000000- <1>
   102 0000064E 000000000000000000- <1>
   102 00000657 000000000000000000- <1>
   102 00000660 000000000000000000- <1>
   102 00000669 000000000000000000- <1>
   102 00000672 000000000000000000- <1>
   102 0000067B 000000000000000000- <1>
   102 00000684 0000                <1>
   103 00000686 000000000000000000- <1> destPath    db cmdBufferL dup (0)
   103 0000068F 000000000000000000- <1>
   103 00000698 000000000000000000- <1>
   103 000006A1 000000000000000000- <1>
   103 000006AA 000000000000000000- <1>
   103 000006B3 000000000000000000- <1>
   103 000006BC 000000000000000000- <1>
   103 000006C5 000000000000000000- <1>
   103 000006CE 000000000000000000- <1>
   103 000006D7 000000000000000000- <1>
   103 000006E0 000000000000000000- <1>
   103 000006E9 000000000000000000- <1>
   103 000006F2 000000000000000000- <1>
   103 000006FB 000000000000000000- <1>
   103 00000704 0000                <1>
   104                              <1> ;Copy Handles
   105 00000706 FFFF                <1> sourceHdl   dw -1
   106 00000708 FFFF                <1> destHdl     dw -1
   107 0000070A 0000                <1> srcHdlInfo  dw 0 ;Used to save the handle device info (bit 7 Set -> Char dev)
   108                              <1> 
   109 0000070C 000000000000000000- <1> copyBuffer  db 128 dup (0)  ;Copy up to 128 bytes at a time
   109 00000715 000000000000000000- <1>
   109 0000071E 000000000000000000- <1>
   109 00000727 000000000000000000- <1>
   109 00000730 000000000000000000- <1>
   109 00000739 000000000000000000- <1>
   109 00000742 000000000000000000- <1>
   109 0000074B 000000000000000000- <1>
   109 00000754 000000000000000000- <1>
   109 0000075D 000000000000000000- <1>
   109 00000766 000000000000000000- <1>
   109 0000076F 000000000000000000- <1>
   109 00000778 000000000000000000- <1>
   109 00000781 000000000000000000- <1>
   109 0000078A 0000                <1>
    13                                  %include "./Data/cmdTable.asm"
     1                              <1> ;Function dispatch table
     2                              <1> functionTable:
     3                              <1> ;Use Pascal strings with each row of hte table having three columns:
     4                              <1> ; Col 1, BYTE, Length of command
     5                              <1> ; Col 2, String, String representing the user input
     6                              <1> ; Col 3, WORD, Offset from the startLbl into COMMAND.COM of the function
     7 0000078C 03444952            <1>     db 3, "DIR"
     8 00000790 7617                <1>     dw dir - startLbl
     9                              <1> 
    10 00000792 024344              <1>     db 2, "CD"
    11 00000795 201B                <1>     dw chdir - startLbl
    12                              <1> 
    13 00000797 054348444952        <1>     db 5, "CHDIR"
    14 0000079D 201B                <1>     dw chdir - startLbl
    15                              <1> 
    16 0000079F 024D44              <1>     db 2, "MD"
    17 000007A2 C21B                <1>     dw mkdir - startLbl
    18                              <1> 
    19 000007A4 054D4B444952        <1>     db 5, "MKDIR"
    20 000007AA C21B                <1>     dw mkdir - startLbl
    21                              <1> 
    22 000007AC 025244              <1>     db 2, "RD"
    23 000007AF 0E1C                <1>     dw rmdir - startLbl
    24                              <1> 
    25 000007B1 05524D444952        <1>     db 5, "RMDIR"
    26 000007B7 0E1C                <1>     dw rmdir - startLbl
    27                              <1> 
    28 000007B9 0344454C            <1>     db 3, "DEL"
    29 000007BD 381E                <1>     dw erase - startLbl
    30                              <1> 
    31 000007BF 054552415345        <1>     db 5, "ERASE"
    32 000007C5 381E                <1>     dw erase - startLbl
    33                              <1> 
    34 000007C7 0444415445          <1>     db 4, "DATE"
    35 000007CC 611E                <1>     dw date - startLbl
    36                              <1> 
    37 000007CE 0454494D45          <1>     db 4, "TIME"
    38 000007D3 2A1F                <1>     dw time - startLbl
    39                              <1> 
    40 000007D5 04434F5059          <1>     db 4, "COPY"
    41 000007DA 5A1C                <1>     dw copy - startLbl
    42                              <1> 
    43 000007DC 0443545459          <1>     db 4, "CTTY"
    44 000007E1 C51F                <1>     dw ctty - startLbl
    45                              <1> 
    46 000007E3 03434C53            <1>     db 3, "CLS"
    47 000007E7 6020                <1>     dw cls - startLbl
    48                              <1> 
    49 000007E9 05425245414B        <1>     db 5, "BREAK"
    50 000007EF D220                <1>     dw break - startLbl
    51                              <1> 
    52 000007F1 06564552494659      <1>     db 6, "VERIFY"
    53 000007F8 5321                <1>     dw verify - startLbl
    54                              <1> 
    55 000007FA 0652454E414D45      <1>     db 6, "RENAME"
    56 00000801 D021                <1>     dw rename - startLbl
    57                              <1> 
    58 00000803 044D4F5645          <1>     db 4, "MOVE"
    59 00000808 D021                <1>     dw rename - startLbl
    60                              <1>     
    61 0000080A 08545255454E414D45  <1>     db 8, "TRUENAME"
    62 00000813 8224                <1>     dw truename - startLbl
    63                              <1> 
    64 00000815 03564552            <1>     db 3, "VER"
    65 00000819 0126                <1>     dw version - startLbl
    66                              <1> 
    67 0000081B 03564F4C            <1>     db 3, "VOL"
    68 0000081F F424                <1>     dw volume - startLbl
    69                              <1> 
    70 00000821 034D454D            <1>     db 3, "MEM"
    71 00000825 4526                <1>     dw memory - startLbl
    72                              <1> 
    73 00000827 0445584954          <1>     db 4, "EXIT"
    74 0000082C 2728                <1>     dw exit - startLbl
    75                              <1> 
    76 0000082E 0454595045          <1>     db 4, "TYPE"
    77 00000833 8F27                <1>     dw type - startLbl
    78                              <1> 
    79 00000835 05544F554348        <1>     db 5, "TOUCH"
    80 0000083B 9D22                <1>     dw touch - startLbl
    81                              <1> 
    82 0000083D 044A4F494E          <1>     db 4, "JOIN"
    83 00000842 D822                <1>     dw join - startLbl
    84                              <1> 
    85 00000844 055355425354        <1>     db 5, "SUBST"
    86 0000084A 9B23                <1>     dw subst - startLbl
    87                              <1> 
    88 0000084C FF                  <1>     db -1   ;End of table
    14                                  %include "./Data/cmdMsg.asm"
     1                              <1> ;COMMAND.COM Messages and strings
     2 0000084D 0D0A24              <1> crlf    db  CR,LF,"$"
     3 00000850 0D0A0D0A24          <1> crlf2   db  CR,LF,CR,LF,"$"
     4 00000855 0D0A42617463682066- <1> badBat  db  CR,LF,"Batch file missing",CR,LF,"$"    ;Used in BAT
     4 0000085E 696C65206D69737369- <1>
     4 00000867 6E670D0A24          <1>
     5 0000086C 0D0A496E7365727420- <1> needBat db  CR,LF,"Insert disk with batch file"     ;Used in BAT
     5 00000875 6469736B2077697468- <1>
     5 0000087E 206261746368206669- <1>
     5 00000887 6C65                <1>
     6 00000889 0D0A616E6420707265- <1>         db  CR,LF,"and press any key when ready",CR,LF,"$"
     6 00000892 737320616E79206B65- <1>
     6 0000089B 79207768656E207265- <1>
     6 000008A4 6164790D0A24        <1>
     7 000008AA 42616420636F6D6D61- <1> badCmd  db  "Bad command or file name",CR,LF,"$"
     7 000008B3 6E64206F722066696C- <1>
     7 000008BC 65206E616D650D0A24  <1>
     8 000008C5 4475706C6963617465- <1> dupName db  "Duplicate file name or "
     8 000008CE 2066696C65206E616D- <1>
     8 000008D7 65206F7220          <1>
     9 000008DC 46696C65206E6F7420- <1> fnfMsg  db  "File not found",CR,LF,"$"
     9 000008E5 666F756E640D0A24    <1>
    10 000008ED 496E73756666696369- <1> noSpace db  "Insufficient disk space",CR,LF,"$"
    10 000008F6 656E74206469736B20- <1>
    10 000008FF 73706163650D0A24    <1>
    11 00000907 4F7574206F6620656E- <1> noEnvSpace  db  "Out of environment space",CR,LF,"$"
    11 00000910 7669726F6E6D656E74- <1>
    11 00000919 2073706163650D0A24  <1>
    12 00000922 46696C652063726561- <1> fulRootDir  db  "File creation error",CR,LF,"$"
    12 0000092B 74696F6E206572726F- <1>
    12 00000934 720D0A24            <1>
    13 00000938 46696C652063616E6E- <1> noSelfCopy  db  "File cannot be copied onto itself",CR,LF,"$"
    13 00000941 6F7420626520636F70- <1>
    13 0000094A 696564206F6E746F20- <1>
    13 00000953 697473656C660D0A24  <1>
    14 0000095C 436F6E74656E74206F- <1> filLostErr  db  "Content of destination lost before copy",CR,LF,"$"
    14 00000965 662064657374696E61- <1>
    14 0000096E 74696F6E206C6F7374- <1>
    14 00000977 206265666F72652063- <1>
    14 00000980 6F70790D0A24        <1>
    15                              <1> ;Copy end message. First write # files copied then this message 
    16 00000986 2046696C6528732920- <1> copyOk  db  " File(s) copied",CR,LF, "$"
    16 0000098F 636F706965640D0A24  <1>
    17                              <1> ;Dir end1 msg. First write # files in dir then this
    18 00000998 2046696C6528732920- <1> dirOk   db  " File(s) $"
    18 000009A1 24                  <1>
    19                              <1> ;Dir end2 msg. First write # bytes free then this message
    20 000009A2 206279746573206672- <1> bytesOk db  " bytes free",CR,LF, "$"
    20 000009AB 65650D0A24          <1>
    21 000009B0 203C4449523E202024  <1> dirLbl  db  " <DIR>  $"
    22                              <1> 
    23 000009B9 496E76616C69642064- <1> badDrv  db  "Invalid drive specification",CR,LF,"$"
    23 000009C2 726976652073706563- <1>
    23 000009CB 696669636174696F6E- <1>
    23 000009D4 0D0A24              <1>
    24 000009D7 537472696B65206120- <1> pauseMes     db  "Strike a key when ready . . . $"
    24 000009E0 6B6579207768656E20- <1>
    24 000009E9 7265616479202E202E- <1>
    24 000009F2 202E2024            <1>
    25 000009F6 496E76616C69642070- <1> badParm db  "Invalid parameter",CR,LF,"$"
    25 000009FF 6172616D657465720D- <1>
    25 00000A08 0A24                <1>
    26                              <1> 
    27 00000A0A 53756E4D6F6E547565- <1> dayName db  "SunMonTueWedThuFriSat"
    27 00000A13 576564546875467269- <1>
    27 00000A1C 536174              <1>
    28 00000A1F 0D0A496E76616C6964- <1> badDate db  CR,LF,"Invalid date$"
    28 00000A28 206461746524        <1>
    29 00000A2E 43757272656E742064- <1> curDate db  "Current date is $"
    29 00000A37 6174652069732024    <1>
    30 00000A3F 0D0A456E746572206E- <1> newDate db  CR,LF,"Enter new date $"
    30 00000A48 657720646174652024  <1>
    31 00000A51 286D6D2D64642D7979- <1> usDate  db  "(mm-dd-yy): $"
    31 00000A5A 293A2024            <1>
    32 00000A5E 2864642D6D6D2D7979- <1> ukDate  db  "(dd-mm-yy): $"
    32 00000A67 293A2024            <1>
    33 00000A6B 2879792D6D6D2D6464- <1> jpDate  db  "(yy-mm-dd): $"
    33 00000A74 293A2024            <1>
    34 00000A78 0D0A496E76616C6964- <1> badTime db  CR,LF,"Invalid time$"
    34 00000A81 2074696D6524        <1>
    35 00000A87 43757272656E742074- <1> curTime db  "Current time is $"
    35 00000A90 696D652069732024    <1>
    36 00000A98 0D0A456E746572206E- <1> newTime db  CR,LF,"Enter new time: $"
    36 00000AA1 65772074696D653A20- <1>
    36 00000AAA 24                  <1>
    37                              <1> 
    38 00000AAB 41726520796F752073- <1> ynMes   db  "Are you sure (Y/N)? $"
    38 00000AB4 7572652028592F4E29- <1>
    38 00000ABD 3F2024              <1>
    39                              <1> 
    40 00000AC0 205343502F444F5320- <1> dosVer  db " SCP/DOS Version $"
    40 00000AC9 56657273696F6E2024  <1>
    41                              <1> 
    42 00000AD2 20566F6C756D652069- <1> volMes  db " Volume in drive $"
    42 00000ADB 6E2064726976652024  <1>
    43 00000AE4 2069732024          <1> volOk   db " is $"
    44 00000AE9 20686173206E6F206C- <1> volNo   db " has no label$"
    44 00000AF2 6162656C24          <1>
    45                              <1> 
    46 00000AF7 496E76616C69642044- <1> badDir  db "Invalid Directory", CR,LF, "$"
    46 00000B00 69726563746F72790D- <1>
    46 00000B09 0A24                <1>
    47 00000B0B 556E61626C6520746F- <1> badMD   db "Unable to create directory",CR,LF,"$"
    47 00000B14 206372656174652064- <1>
    47 00000B1D 69726563746F72790D- <1>
    47 00000B26 0A24                <1>
    48 00000B28 496E76616C69642070- <1> badRD   db "Invalid path, not directory,",CR,LF
    48 00000B31 6174682C206E6F7420- <1>
    48 00000B3A 6469726563746F7279- <1>
    48 00000B43 2C0D0A              <1>
    49 00000B46 6F7220646972656374- <1>         db "or directory not empty",CR,LF,"$"
    49 00000B4F 6F7279206E6F742065- <1>
    49 00000B58 6D7074790D0A24      <1>
    50 00000B5F 204469726563746F72- <1> dirMain db " Directory of  $"
    50 00000B68 79206F66202024      <1>
    51 00000B6F 4E6F20506174682024  <1> noPath  db "No Path $"
    52 00000B78 496E76616C69642064- <1> badDrvSrch  db "Invalid drive in search path",CR,LF,"$"
    52 00000B81 7269766520696E2073- <1>
    52 00000B8A 656172636820706174- <1>
    52 00000B93 680D0A24            <1>
    53 00000B97 496E76616C69642064- <1> badDev  db "Invalid device",CR,LF,"$"
    53 00000BA0 65766963650D0A24    <1>
    54 00000BA8 4C6162656C206E6F74- <1> badLbl  db "Label not found",CR,LF,"$"  ;Used in BAT
    54 00000BB1 20666F756E640D0A24  <1>
    55 00000BBA 53796E746178206572- <1> syntaxErr   db "Syntax error",CR,LF,"$"
    55 00000BC3 726F720D0A24        <1>
    56 00000BC9 0D464F522063616E6E- <1> forNest db CR,"FOR cannot be nested",CR,LF,"$"    ;Used in BAT
    56 00000BD2 6F74206265206E6573- <1>
    56 00000BDB 7465640D0A24        <1>
    57 00000BE1 496E7465726D656469- <1> pipeErr db "Intermediate file error during pipe",CR,LF,"$"
    57 00000BEA 6174652066696C6520- <1>
    57 00000BF3 6572726F7220647572- <1>
    57 00000BFC 696E6720706970650D- <1>
    57 00000C05 0A24                <1>
    58 00000C07 43616E6E6F7420646F- <1> binDevErr   db "Cannot do binary reads from a device",CR,LF,"$"
    58 00000C10 2062696E6172792072- <1>
    58 00000C19 656164732066726F6D- <1>
    58 00000C22 206120646576696365- <1>
    58 00000C2B 0D0A24              <1>
    59 00000C2E 6F66660D0A24        <1> offMes  db "off",CR,LF,"$"
    60 00000C34 6F6E0D0A24          <1> onMes   db "on",CR,LF,"$"
    61 00000C39 425245414B20697320- <1> breakIs db "BREAK is $"
    61 00000C42 24                  <1>
    62 00000C43 564552494659206973- <1> verifyIs    db "VERIFY is $"
    62 00000C4C 2024                <1>
    63 00000C4E 4543484F2069732024  <1> echoIs  db "ECHO is $"  ;Used in BAT
    64 00000C57 496E76616C69642070- <1> badSpec db "Invalid path or file name",CR,LF,"$"
    64 00000C60 617468206F72206669- <1>
    64 00000C69 6C65206E616D650D0A- <1>
    64 00000C72 24                  <1>
    65 00000C73 496E76616C6964206E- <1> badArgs db "Invalid number of parameters",CR,LF,"$"
    65 00000C7C 756D626572206F6620- <1>
    65 00000C85 706172616D65746572- <1>
    65 00000C8E 730D0A24            <1>
    66 00000C92 4572726F7220777269- <1> devWriteErr db "Error writing to device"
    66 00000C9B 74696E6720746F2064- <1>
    66 00000CA4 6576696365          <1>
    67 00000CA9 08200800            <1> backSpace   db BSP," ",BSP,NUL
    68                              <1> 
    69 00000CAD 0D0A20202020202020- <1> memSys  db CR,LF,"              Total system memory: $"
    69 00000CB6 20202020202020546F- <1>
    69 00000CBF 74616C207379737465- <1>
    69 00000CC8 6D206D656D6F72793A- <1>
    69 00000CD1 2024                <1>
    70 00000CD3 0D0A20202020202020- <1> memDOS  db CR,LF,"               Memory used by DOS: $"
    70 00000CDC 20202020202020204D- <1>
    70 00000CE5 656D6F727920757365- <1>
    70 00000CEE 6420627920444F533A- <1>
    70 00000CF7 2024                <1>
    71 00000CF9 0D0A2020202020204D- <1> memApp  db CR,LF,"      Memory used by applications: $"
    71 00000D02 656D6F727920757365- <1>
    71 00000D0B 64206279206170706C- <1>
    71 00000D14 69636174696F6E733A- <1>
    71 00000D1D 2024                <1>
    72 00000D1F 0D0A2020202020204D- <1> memHole db CR,LF,"      Memory reserved by hardware: $"
    72 00000D28 656D6F727920726573- <1>
    72 00000D31 657276656420627920- <1>
    72 00000D3A 68617264776172653A- <1>
    72 00000D43 2024                <1>
    73 00000D45 0D0A20202020202020- <1> memFree db CR,LF,"                      Memory free: $"
    73 00000D4E 202020202020202020- <1>
    73 00000D57 2020202020204D656D- <1>
    73 00000D60 6F727920667265653A- <1>
    73 00000D69 2024                <1>
    74 00000D6B 20627974657324      <1> memByte db " bytes$"
    75 00000D72 0D0A436F756C64204E- <1> memBad0 db CR,LF,"Could Not Assertain DOS Entry Point$"
    75 00000D7B 6F7420417373657274- <1>
    75 00000D84 61696E20444F532045- <1>
    75 00000D8D 6E74727920506F696E- <1>
    75 00000D96 7424                <1>
    76 00000D98 0D0A4D656D6F727920- <1> memBad1 db CR,LF,"Memory Allocation Error$"
    76 00000DA1 416C6C6F636174696F- <1>
    76 00000DAA 6E204572726F7224    <1>
    77 00000DB2 0D0A4D656D6F727920- <1> memBad2 db CR,LF,"Memory Error$"
    77 00000DBB 4572726F7224        <1>
    78 00000DC1 0D0A53797374656D20- <1> memBad3 db CR,LF,"System halted$"
    78 00000DCA 68616C74656424      <1>
    79                              <1> 
    80 00000DD1 556E61626C6520746F- <1> touchErr db "Unable to create file",CR,LF,"$"
    80 00000DDA 206372656174652066- <1>
    80 00000DE3 696C650D0A24        <1>
    81 00000DE9 556E61626C6520746F- <1> pipeErrMsg  db "Unable to create pipe",CR,LF
    81 00000DF2 206372656174652070- <1>
    81 00000DFB 6970650D0A          <1>
    82                              <1> pipeErrMsgL equ $ - pipeErrMsg
    83 00000E00 526564697265637469- <1> redirErrMsg db "Redirection error",CR,LF
    83 00000E09 6F6E206572726F720D- <1>
    83 00000E12 0A                  <1>
    84                              <1> redirErrMsgL   equ $ - redirErrMsg
    85                              <1> 
    86 00000E13 1B5B324A            <1> ansiCls  db 01BH,"[2J" ;ANSI CLS sequence, 4 chars long
    87 00000E17 2020202024          <1> fourSpc  db "    $"
    88 00000E1C 20202024            <1> threeSpc db "   $"
    89 00000E20 202024              <1> twoSpc   db "  $"
    90                              <1> 
    91 00000E23 4D7573742073706563- <1> badOnOff db "Must specify ON or OFF",CR,LF,"$"
    91 00000E2C 696679204F4E206F72- <1>
    91 00000E35 204F46460D0A24      <1>
    92 00000E3C 504154483D          <1> pathEVar db "PATH="
    93 00000E41 50524F4D50543D      <1> promptEVar  db "PROMPT="
    94                              <1> 
    95                              <1> ;If anything goes wrong with piping or redirecting just close first two 
    96                              <1> ; handles and reopen CON
    97 00000E48 434F4E00            <1> conName db "CON",0      
    15                                  %include "./Source/cmdMain.asm"
     1                              <1> commandStart:
     2                              <1>     ;Resize Allocation, jump here with endpointer in rbx
     3                              <1>     ;Ideally would have this jettisoned too but cannot guarantee
     4                              <1>     ; that the jump to safety won't be gobbled up when multitasking
     5 00000E4C 49F7D8              <1>     neg r8  ;Convert r8 to -r8
     6 00000E4F 4A8D1C03            <1>     lea rbx, qword [rbx + r8]    ;Get # of bytes for COMMAND.COM and stack
     7 00000E53 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
     8 00000E56 B44A                <1>     mov ah, 4Ah ;Realloc
     9 00000E58 49F7D8              <1>     neg r8  ;Convert -r8 to r8
    10 00000E5B CD21                <1>     int 21h
    11 00000E5D EB68                <1>     jmp short commandMain
    12                              <1> applicationReturn:  ;Return point from a task, all regs preserved
    13 00000E5F B8004D0000          <1>     mov eax, 4D00h ;Get Return Code
    14 00000E64 CD21                <1>     int 21h
    15 00000E66 668905A0F1FFFF      <1>     mov word [returnCode], ax
    16                              <1> ;Reset our PSP vectors (and IVT copies) in the event they got mangled
    17 00000E6D 488D15EA200000      <1>     lea rdx, critErrorHandler
    18 00000E74 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    19 00000E78 B824250000          <1>     mov eax, 2524h
    20 00000E7D CD21                <1>     int 21h
    21 00000E7F 488D1568230000      <1>     lea rdx, int23h
    22 00000E86 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    23 00000E8A B823250000          <1>     mov eax, 2523h
    24 00000E8F CD21                <1>     int 21h
    25 00000E91 488D15C7FFFFFF      <1>     lea rdx, applicationReturn
    26 00000E98 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    27 00000E9C B822250000          <1>     mov eax, 2522h
    28 00000EA1 CD21                <1>     int 21h
    29 00000EA3 F60505F2FFFFFF      <1>     test byte [pipeFlag], -1
    30 00000EAA 7574                <1>     jnz commandMain.pipeProceed ;Skip the handle closing when pipe active
    31 00000EAC E8BA040000          <1>     call cleanUpRedir   ;Clean up redirection once we are done
    32                              <1> ;Close all handles from 5->MAX
    33 00000EB1 0FB70D6FF1FFFF      <1>     movzx ecx, word [numHdls]
    34 00000EB8 BB05000000          <1>     mov ebx, 5
    35                              <1> .handleClose:
    36 00000EBD B43E                <1>     mov ah, 3Eh ;File close
    37 00000EBF CD21                <1>     int 21h
    38 00000EC1 FFC3                <1>     inc ebx ;Goto next file
    39 00000EC3 39CB                <1>     cmp ebx, ecx
    40 00000EC5 76F6                <1>     jbe .handleClose    ;Keep looping whilst below or equal
    41                              <1> commandMain:
    42                              <1> ;Setup Commandline
    43 00000EC7 488B2537F1FFFF      <1>     mov rsp, qword [stackTop]    ;Reset internal stack pointer pos
    44 00000ECE FC                  <1>     cld ;Ensure stringops are done the right way
    45 00000ECF C605C7F2FFFF80      <1>     mov byte [inBuffer], 80h    ;Reset the buffer length
    46                              <1> .inputMain:
    47 00000ED6 E81B1B0000          <1>     call printCRLF
    48                              <1> .inputMain2:
    49 00000EDB E88A1E0000          <1>     call clearCommandLineState
    50 00000EE0 E8531E0000          <1>     call printPrompt
    51                              <1> 
    52 00000EE5 488D15B1F2FFFF      <1>     lea rdx, inBuffer
    53 00000EEC B80A0C0000          <1>     mov eax, 0C0Ah  ;Do Buffered input
    54 00000EF1 CD21                <1>     int 21h
    55 00000EF3 E8FE1A0000          <1>     call printCRLF  ;Note we have accepted input
    56                              <1> 
    57                              <1> ;First check we had something typed in of length greater than 0
    58                              <1> ;Must be greater than 0 as executable commands must have extension and filename
    59 00000EF8 803D9FF2FFFF00      <1>     cmp byte [inBuffer + 1], 0  ;Check input length valid
    60 00000EFF 74DA                <1>     je .inputMain2
    61                              <1>     ;Copy over the input text
    62 00000F01 488D3595F2FFFF      <1>     lea rsi, inBuffer
    63 00000F08 488D3D0EF3FFFF      <1>     lea rdi, cmdBuffer
    64 00000F0F B980000000          <1>     mov ecx, cmdBufferL   ;Straight up copy the buffer over
    65 00000F14 F3A4                <1>     rep movsb
    66                              <1> .pipeLoop:
    67 00000F16 E838000000          <1>     call parseInput
    68 00000F1B E8CB010000          <1>     call doCommandLine
    69                              <1> .pipeProceed:
    70 00000F20 E846040000          <1>     call cleanUpRedir
    71 00000F25 488B057BF1FFFF      <1>     mov rax, qword [cmdEndPtr]
    72 00000F2C 4889056CF1FFFF      <1>     mov qword [cmdStartPtr], rax
    73 00000F33 F60575F1FFFFFF      <1>     test byte [pipeFlag], -1  ;If we have any pipes active, we proceed here
    74 00000F3A 749A                <1>     jz .inputMain
    75 00000F3C E80E1E0000          <1>     call clearCommandState  ;Else, clear the command state and start again
    76 00000F41 EBD3                <1>     jmp short .pipeLoop
    77                              <1> .dfltErrExit:
    78 00000F43 488D1560F9FFFF      <1>     lea rdx, badCmd
    79 00000F4A B409                <1>     mov ah, 09h
    80 00000F4C CD21                <1>     int 21h
    81 00000F4E E983FFFFFF          <1>     jmp .inputMain
    82                              <1> 
    83                              <1> parseInput:
    84                              <1> ;EndOff is set up before entering this part
    85                              <1> ;Copies a nicely formatted version of the input command line
    86                              <1> ; without any redirections to psp.dta
    87                              <1>     ;lea rsi, qword [cmdBuffer + 2]  ;Goto the command buffer
    88 00000F53 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]   ;Go to the command line in the psp
    89 00000F5A 488B353EF1FFFF      <1>     mov rsi, qword [cmdStartPtr]
    90 00000F61 4885F6              <1>     test rsi, rsi
    91 00000F64 7507                <1>     jnz .notNewCmd
    92 00000F66 488D35B1F2FFFF      <1>     lea rsi, [cmdBuffer + 1]    ;Goto command buffer - 1
    93                              <1> .notNewCmd:
    94 00000F6D 48FFC6              <1>     inc rsi ;Goto first char in new buffer since rsi points to terminating char
    95 00000F70 E8B41D0000          <1>     call skipSpaces ;Skip any preceeding spaces
    96 00000F75 66AD                <1>     lodsw   ;Get the first two chars into ax
    97 00000F77 66890536F1FFFF      <1>     mov word [cmdDrvSpec], ax ;Store these chars as if they are the drvspec
    98 00000F7E 4881EE02000000      <1>     sub rsi, 2  ;Go back to the start of the command
    99 00000F85 56                  <1>     push rsi
   100 00000F86 57                  <1>     push rdi
   101 00000F87 488D3D0FF3FFFF      <1>     lea rdi, cmdPathSpec    ;We copy the command name/path here
   102 00000F8E 57                  <1>     push rdi
   103 00000F8F E804070000          <1>     call copyCommandTailItemProgram
   104 00000F94 5F                  <1>     pop rdi
   105 00000F95 9C                  <1>     pushfq  ;Save the CF state
   106 00000F96 E8201D0000          <1>     call strlen
   107 00000F9B FFC9                <1>     dec ecx ;Drop the terminating char from the count
   108 00000F9D 58                  <1>     pop rax ;Get the CF state in al
   109 00000F9E 5F                  <1>     pop rdi
   110 00000F9F 5E                  <1>     pop rsi
   111 00000FA0 F3A4                <1>     rep movsb   ;Now we copy the command into the psp command line
   112 00000FA2 A801                <1>     test al, 1  ;Was CF set?
   113 00000FA4 0F8586000000        <1>     jnz .exit   ;If an embedded CR was found in the filename, exit!
   114                              <1> .cmdLineProcess:
   115 00000FAA E87A1D0000          <1>     call skipSpaces ;Go to the next char in the input line
   116                              <1> .redirFound:
   117 00000FAF AC                  <1>     lodsb   ;Get first non-space char (setupRedir skips spaces before ret)
   118 00000FB0 3C0D                <1>     cmp al, CR  ;If this was a CR, we stop processing
   119 00000FB2 747C                <1>     je .exit
   120 00000FB4 E822050000          <1>     call checkAndSetupRedir ;If not, check if we have a redir element
   121 00000FB9 7275                <1>     jc .exit    ;CF=CY only if pipe, which is equivalent to CR when processing
   122 00000FBB 74F2                <1>     jz .redirFound  ;If we had a < > or >>, proceed to check if next char CR
   123 00000FBD B020                <1>     mov al, " "
   124 00000FBF AA                  <1>     stosb   ;Store a space to make space for the command file parameter
   125 00000FC0 48FFCE              <1>     dec rsi ;Move rsi back to the first char
   126 00000FC3 F605F2F0FFFFFF      <1>     test byte [arg1Flg], -1
   127 00000FCA 7521                <1>     jnz .arg2
   128                              <1> .arg1:
   129 00000FCC C605E9F0FFFFFF      <1>     mov byte [arg1Flg], -1
   130 00000FD3 E8511D0000          <1>     call skipSpaces
   131 00000FD8 4889F0              <1>     mov rax, rsi
   132 00000FDB 488D1D3BF2FFFF      <1>     lea rbx, cmdBuffer
   133 00000FE2 4829D8              <1>     sub rax, rbx
   134 00000FE5 8805D2F0FFFF        <1>     mov byte [arg1Off], al  ;Store the offset 
   135 00000FEB EB2A                <1>     jmp short .argCommon
   136                              <1> .arg2:
   137 00000FED F605CBF0FFFFFF      <1>     test byte [arg2Flg], -1
   138 00000FF4 7521                <1>     jnz .argCommon
   139 00000FF6 C605C2F0FFFFFF      <1>     mov byte [arg2Flg], -1
   140 00000FFD E8271D0000          <1>     call skipSpaces
   141 00001002 4889F0              <1>     mov rax, rsi
   142 00001005 488D1D11F2FFFF      <1>     lea rbx, cmdBuffer
   143 0000100C 4829D8              <1>     sub rax, rbx
   144 0000100F 8805ABF0FFFF        <1>     mov byte [arg2Off], al  ;Store the offset 
   145 00001015 EB00                <1>     jmp short .argCommon
   146                              <1> .argCommon:
   147                              <1>     ;More than two arguments? Do nothing more than just copy it
   148                              <1>     ; over. If we encounter an embedded CR, exit there too
   149 00001017 E80D1D0000          <1>     call skipSpaces
   150 0000101C 803E0D              <1>     cmp byte [rsi], CR  ;Are we at the end of the commandline?
   151 0000101F 740F                <1>     je .exit
   152                              <1>     ;If not, we copy it over
   153 00001021 E890060000          <1>     call copyCommandTailItem    ;Stores a terminating null we dont want
   154 00001026 488D7FFF            <1>     lea rdi, qword [rdi - 1]    ;Point back at the inserted terminating null
   155 0000102A 0F837AFFFFFF        <1>     jnc .cmdLineProcess
   156                              <1> .exit:
   157 00001030 48FFCE              <1>     dec rsi
   158 00001033 4889356DF0FFFF      <1>     mov qword [cmdEndPtr], rsi
   159 0000103A B00D                <1>     mov al, CR
   160 0000103C AA                  <1>     stosb   ;Store the terminating CR in the psp command line
   161                              <1>     ;Now compute the command line length 
   162 0000103D 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine] 
   163 00001044 B00D                <1>     mov al, CR
   164 00001046 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   165 00001048 FFC9                <1>     dec ecx ;rcx = -1
   166 0000104A F2AE                <1>     repne scasb
   167 0000104C F7D1                <1>     not ecx
   168 0000104E FEC9                <1>     dec cl  ;Dont include terminating CR
   169 00001050 498DB880000000      <1>     lea rdi, qword [r8 + cmdLineCnt]
   170 00001057 880F                <1>     mov byte [rdi], cl
   171                              <1>     ;Before returning, we copy the command name to cmdName
   172 00001059 488D3D3DF2FFFF      <1>     lea rdi, cmdPathSpec
   173 00001060 4889FB              <1>     mov rbx, rdi    ;Use rbx as the ptr to the first char in the commandspec
   174 00001063 30C0                <1>     xor al, al  ;Search for the terminating null
   175 00001065 B94F000000          <1>     mov ecx, fileSpecZL ;Max number of chars the length could be
   176 0000106A F2AE                <1>     repne scasb
   177 0000106C 48FFCF              <1>     dec rdi ;Go to the last char in the command
   178 0000106F 4889FE              <1>     mov rsi, rdi
   179 00001072 FD                  <1>     std ;Now we go backwards to where rsi = rbx OR byte [rsi] = pathSep
   180                              <1> .keepSearching:
   181 00001073 AC                  <1>     lodsb
   182 00001074 3A05B1EFFFFF        <1>     cmp al, byte [pathSep]
   183 0000107A 740B                <1>     je .cmdStartFnd
   184 0000107C 4839DE              <1>     cmp rsi, rbx
   185 0000107F 75F2                <1>     jne .keepSearching
   186 00001081 48FFCE              <1>     dec rsi ;Go back two to go forwards again
   187 00001084 48FFCE              <1>     dec rsi
   188                              <1> .cmdStartFnd:
   189 00001087 48FFC6              <1>     inc rsi
   190 0000108A 48FFC6              <1>     inc rsi ;Go past the pathsep
   191 0000108D FC                  <1>     cld ;Go the sane way again
   192 0000108E 488D3D70F2FFFF      <1>     lea rdi, qword [cmdName + 1]    ;First byte is for the length of the name
   193 00001095 57                  <1>     push rdi    ;Cleanse the field before usage (not strictly necessary)
   194 00001096 B90E000000          <1>     mov ecx, cmdNameL
   195 0000109B 30C0                <1>     xor al, al
   196 0000109D F3AA                <1>     rep stosb
   197 0000109F 5F                  <1>     pop rdi
   198 000010A0 31C9                <1>     xor ecx, ecx
   199 000010A2 56                  <1>     push rsi    ;Save the location of the start byte of the command name
   200                              <1> .cmdGetChar:
   201 000010A3 AC                  <1>     lodsb
   202 000010A4 84C0                <1>     test al, al ;Did we find the terminating null?
   203 000010A6 7411                <1>     jz .nameLenFnd
   204 000010A8 3C2E                <1>     cmp al, "." ;Extension sep also terminates
   205 000010AA 740D                <1>     je .nameLenFnd
   206 000010AC 24DF                <1>     and al, 0DFh    ;Else uppercase the char
   207 000010AE AA                  <1>     stosb   ;and store it
   208 000010AF FFC1                <1>     inc ecx
   209 000010B1 81F90B000000        <1>     cmp ecx, 11 ;Max command length is 11
   210 000010B7 72EA                <1>     jb .cmdGetChar
   211                              <1> .nameLenFnd:
   212 000010B9 880D45F2FFFF        <1>     mov byte [cmdName], cl  ;Store the name length now
   213                              <1>     ;Now finally, create a FCB filespec
   214 000010BF 488D3D26F2FFFF      <1>     lea rdi, fcbCmdSpec
   215 000010C6 57                  <1>     push rdi
   216 000010C7 B90B000000          <1>     mov ecx, fcbNameL
   217 000010CC B020                <1>     mov al, " " ;Fill with spaces
   218 000010CE F3AA                <1>     rep stosb
   219 000010D0 5F                  <1>     pop rdi
   220 000010D1 5E                  <1>     pop rsi ;Get back the location of the start byte of the command name
   221 000010D2 E8B81C0000          <1>     call asciiToFCB
   222 000010D7 488D350EF2FFFF      <1>     lea rsi, fcbCmdSpec
   223 000010DE 488D3D12F2FFFF      <1>     lea rdi, cmdSpec
   224 000010E5 E8001D0000          <1>     call FCBToAsciiz
   225                              <1>     return
    13                              <2> %%_ret:
    14 000010EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> 
   227                              <1> doCommandLine:
   228 000010EB 498DB081000000      <1>     lea rsi, qword [r8 + cmdLine]
   229                              <1>     ;The following check accounts for the end of a piped command
   230 000010F2 803E0D              <1>     cmp byte [rsi], CR  ;If the first char is a CR, exit the pipe loop
   231                              <1>     rete    ;Do not attempt to execute if the first char is a CR
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000010F5 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   232 000010F7 488D3DC4EFFFFF      <1>     lea rdi, cmdFcb
   233 000010FE B801290000          <1>     mov eax, 2901h  ;Skip leading blanks
   234 00001103 CD21                <1>     int 21h
   235 00001105 0FB71DA8EFFFFF      <1>     movzx ebx, word [cmdDrvSpec]    ;Get the drive specifier
   236 0000110C 80FF3A              <1>     cmp bh, ":"
   237 0000110F 752E                <1>     jne .noDriveSpecified
   238 00001111 88DA                <1>     mov dl, bl      ;Move the drive letter in dl
   239 00001113 80E2DF              <1>     and dl, 0DFh    ;Make the drive letter upper case
   240 00001116 80EA41              <1>     sub dl, "A"     ;And make it a 0 based drive letter
   241 00001119 3CFF                <1>     cmp al, -1  ;Int 21h returns AL = -1 if bad drive specified
   242 0000111B 7415                <1>     je .badDrive
   243                              <1>     ;If drive specified and cmdName length = 2 => X: type command
   244 0000111D 803DE0F1FFFF02      <1>     cmp byte [cmdName], 2
   245 00001124 7519                <1>     jne .noDriveSpecified   ;Drive specified but proceed as normal
   246 00001126 B40E                <1>     mov ah, 0Eh ;Set drive to dl
   247 00001128 CD21                <1>     int 21h 
   248 0000112A B419                <1>     mov ah, 19h
   249 0000112C CD21                <1>     int 21h     ;Get current drive
   250 0000112E 38D0                <1>     cmp al, dl  ;If the drive was set, all is well
   251                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001130 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   252                              <1> .badDrive:
   253 00001132 488D1580F8FFFF      <1>     lea rdx, badDrv
   254 00001139 B409                <1>     mov ah, 09h
   255 0000113B CD21                <1>     int 21h
   256 0000113D F9                  <1>     stc
   257                              <1>     return
    13                              <2> %%_ret:
    14 0000113E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   258                              <1> .noDriveSpecified:
   259                              <1> ;Now we set the two FCB's in the command line
   260 0000113F F60576EFFFFFFF      <1>     test byte [arg1Flg], -1
   261 00001146 744D                <1>     jz .fcbArgsDone
   262 00001148 0FB6056EEFFFFF      <1>     movzx eax, byte [arg1Off]   ;Get the first argument offset
   263 0000114F 488D35C7F0FFFF      <1>     lea rsi, cmdBuffer
   264 00001156 4801C6              <1>     add rsi, rax    ;Point to first argument
   265 00001159 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   266 0000115D B801290000          <1>     mov eax, 2901h
   267 00001162 CD21                <1>     int 21h
   268 00001164 880554EFFFFF        <1>     mov byte [arg1FCBret], al
   269 0000116A F6054EEFFFFFFF      <1>     test byte [arg2Flg], -1
   270 00001171 7422                <1>     jz .fcbArgsDone
   271 00001173 0FB60546EFFFFF      <1>     movzx eax, byte [arg2Off]
   272 0000117A 488D359CF0FFFF      <1>     lea rsi, cmdBuffer
   273 00001181 4801C6              <1>     add rsi, rax    ;Point to first argument
   274 00001184 498D786C            <1>     lea rdi, qword [r8 + fcb2]
   275 00001188 B801290000          <1>     mov eax, 2901h
   276 0000118D CD21                <1>     int 21h
   277 0000118F 88052CEFFFFF        <1>     mov byte [arg2FCBret], al
   278                              <1> .fcbArgsDone:
   279 00001195 488D1D81F0FFFF      <1>     lea rbx, cmdBuffer
   280 0000119C 488D3561F1FFFF      <1>     lea rsi, cmdName
   281 000011A3 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   282 000011A8 BAFFFF0000          <1>     mov edx, 0FFFFh
   283 000011AD B5FF                <1>     mov ch, -1
   284 000011AF CD2F                <1>     int 2Fh ;Give the TSR time to prepare if it needs to
   285 000011B1 B800AE0000          <1>     mov eax, 0AE00h ;Installable command check
   286 000011B6 BAFFFF0000          <1>     mov edx, 0FFFFh
   287 000011BB 30ED                <1>     xor ch, ch  ;Second call uses ch = 0
   288 000011BD CD2F                <1>     int 2Fh ;Return: al = -1 if this command a extension to COMMAND.COM
   289                              <1>             ;        al = 0  if the command should be executed as usual
   290 000011BF 84C0                <1>     test al, al
   291 000011C1 741D                <1>     jz .executeInternal
   292                              <1>     ;Here we execute externally and return to the prompt
   293                              <1>     ; as if it was an internal execution
   294 000011C3 488D35D3EFFFFF      <1>     lea rsi, inBuffer ;Point to this built buffer
   295 000011CA 488D1DF1EEFFFF      <1>     lea rbx, cmdFcb
   296 000011D1 B801AE0000          <1>     mov eax, 0AE01h ;Execute command!
   297 000011D6 BAFFFF0000          <1>     mov edx, 0FFFFh
   298 000011DB B5FF                <1>     mov ch, -1
   299 000011DD CD2F                <1>     int 2Fh 
   300                              <1>     return
    13                              <2> %%_ret:
    14 000011DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   301                              <1> .executeInternal:
   302                              <1> ;Now we compare the name in the cmdFcb field to our commmand list
   303                              <1> ;rsi points after the command terminator in the command tail
   304 000011E0 488D1DA5F5FFFF      <1>     lea rbx, functionTable
   305                              <1> .nextEntry:
   306 000011E7 0FB60B              <1>     movzx ecx, byte [rbx]   ;Get name entry length
   307 000011EA 80F9FF              <1>     cmp cl, -1  ;Are we at the end of the table?
   308 000011ED 0F846A160000        <1>     je launchChild      ;If so, check externally now
   309 000011F3 380D0BF1FFFF        <1>     cmp byte [cmdName], cl  ;Is command length the same as the tbl entry length?
   310 000011F9 7529                <1>     jnz .gotoNextEntry  ;If not, goto next entry
   311                              <1>     ;Here they have the same length so lets see if the name is the same
   312 000011FB 56                  <1>     push rsi
   313                              <1>     ;ecx has the length to compare
   314 000011FC 51                  <1>     push rcx
   315 000011FD 488D7301            <1>     lea rsi, qword [rbx + 1]
   316 00001201 488D3DFDF0FFFF      <1>     lea rdi, qword [cmdName + 1]   ;Go to the name portion
   317 00001208 F3A6                <1>     rep cmpsb   ;Check the strings are equal
   318 0000120A 59                  <1>     pop rcx
   319 0000120B 5E                  <1>     pop rsi
   320 0000120C 7516                <1>     jne .gotoNextEntry
   321                              <1>     ;Here it was found both strings are equal
   322 0000120E 488D7C0B01          <1>     lea rdi, qword [rbx + rcx + 1]  ;make rdi point to offset from startLbl
   323 00001213 480FB71F            <1>     movzx rbx, word [rdi]
   324 00001217 488D3DE2EDFFFF      <1>     lea rdi, startLbl
   325 0000121E 4801FB              <1>     add rbx, rdi
   326 00001221 FFD3                <1>     call rbx    ;Call this function...
   327                              <1>     return  ;... and return
    13                              <2> %%_ret:
    14 00001223 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .gotoNextEntry:
   329 00001224 4881C303000000      <1>     add rbx, 3      ;Go past the first count byte and the address word
   330 0000122B 4801CB              <1>     add rbx, rcx    ;Go past the length of the command name too
   331 0000122E EBB7                <1>     jmp short .nextEntry
   332                              <1> .dfltErrExit:
   333 00001230 488D1573F6FFFF      <1>     lea rdx, badCmd
   334 00001237 B409                <1>     mov ah, 09h
   335 00001239 CD21                <1>     int 21h
   336                              <1>     return
    13                              <2> %%_ret:
    14 0000123B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   337                              <1> 
   338                              <1> 
   339                              <1> checkExtensionExec:
   340                              <1> ;Checks the extension field of cmdFcb is .COM, .EXE, .BAT in that order
   341                              <1> ;Returns: ZF=ZE if executable. ZF=NZ if not executable.
   342                              <1> ;         If ZF=ZE and CF=CY => Batch file
   343 0000123C 8B0589EEFFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
   344 00001242 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
   345 00001247 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
   346 0000124C 25DFDFDFFF          <1>     and eax, 0FFDFDFDFh ;Uppercase the three letters
   347 00001251 3D434F4D20          <1>     cmp eax, "COM "
   348                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001256 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   349 00001258 3D45584520          <1>     cmp eax, "EXE "
   350                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000125D 74(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   351 0000125F 3D42415420          <1>     cmp eax, "BAT "
   352                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001264 75(3B)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   353 00001266 F9                  <1>     stc
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001267 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> 
   356                              <1> redirFailure:
   357 00001268 488D1591FBFFFF      <1>     lea rdx, redirErrMsg
   358 0000126F B913000000          <1>     mov ecx, redirErrMsgL
   359 00001274 EB0C                <1>     jmp short redirPipeFailureCommon
   360                              <1> pipeFailure:
   361 00001276 488D156CFBFFFF      <1>     lea rdx, pipeErrMsg
   362 0000127D B917000000          <1>     mov ecx, pipeErrMsgL
   363                              <1> redirPipeFailureCommon:
   364                              <1> ;This routine is called if any problems happen during 
   365                              <1> ;This routine tries to close whatever handles are not -1 and delete
   366                              <1> ; pipe files if the pipe count is not 0
   367                              <1> ;It resets all variables and proceeds.
   368 00001282 B800400000          <1>     mov eax, 4000h  ;Write handle
   369 00001287 BB02000000          <1>     mov ebx, 2  ;Write to STDERR
   370 0000128C CD21                <1>     int 21h
   371 0000128E 31DB                <1>     xor ebx, ebx    ;Select STDIN
   372 00001290 E8C6000000          <1>     call .closeHandle
   373 00001295 FFC3                <1>     inc ebx         ;Select STDOUT
   374 00001297 E8BF000000          <1>     call .closeHandle
   375 0000129C B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
   376 000012A1 488D15A0FBFFFF      <1>     lea rdx, conName
   377 000012A8 CD21                <1>     int 21h
   378 000012AA 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
   379 000012AC B800450000          <1>     mov eax, 4500h  ;DUP
   380 000012B1 CD21                <1>     int 21h
   381 000012B3 66C705FAEDFFFF0000  <1>     mov word [redirIn], 0  ;Clear both flags
   382 000012BC 0FB71DF5EDFFFF      <1>     movzx ebx, word [redirSTDIN]
   383 000012C3 E893000000          <1>     call .closeHandle
   384                              <1>     ;Close and zero both STDIN and STDOUT handle vars
   385 000012C8 66C705E7EDFFFFFFFF  <1>     mov word [redirSTDIN], -1
   386 000012D1 0FB71DE2EDFFFF      <1>     movzx ebx, word [redirSTDOUT]
   387 000012D8 E87E000000          <1>     call .closeHandle
   388 000012DD 66C705D4EDFFFFFFFF  <1>     mov word [redirSTDOUT], -1
   389 000012E6 0FB71DC3EDFFFF      <1>     movzx ebx, word [pipeSTDIN]
   390 000012ED E869000000          <1>     call .closeHandle
   391 000012F2 66C705B5EDFFFFFFFF  <1>     mov word [pipeSTDIN], -1
   392 000012FB 0FB71DB0EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   393 00001302 E854000000          <1>     call .closeHandle
   394 00001307 66C705A2EDFFFFFFFF  <1>     mov word [pipeSTDOUT], -1
   395 00001310 C60598EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Cover the pipe number too
   396 00001317 488D1592F0FFFF      <1>     lea rdx, qword [pipe1Filespec]
   397 0000131E 803A00              <1>     cmp byte [rdx], 0
   398 00001321 7407                <1>     jz .checkOld
   399 00001323 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by rdx
   400 00001328 CD21                <1>     int 21h
   401                              <1> .checkOld:
   402 0000132A 488D15CEF0FFFF      <1>     lea rdx, qword [pipe2Filespec]
   403 00001331 803A00              <1>     cmp byte [rdx],0
   404 00001334 7407                <1>     jz .pipeNamesComplete
   405 00001336 B800410000          <1>     mov eax, 4100h  ;Del File pointed to by dl
   406 0000133B CD21                <1>     int 21h
   407                              <1> .pipeNamesComplete:
   408 0000133D 31C0                <1>     xor eax, eax
   409                              <1>     ;Invalidate the pointers and the paths too
   410 0000133F 48890508F1FFFF      <1>     mov qword [newPipe], rax
   411 00001346 48890509F1FFFF      <1>     mov qword [oldPipe], rax
   412 0000134D 89055DF0FFFF        <1>     mov dword [pipe1Filespec], eax
   413 00001353 8905A6F0FFFF        <1>     mov dword [pipe2Filespec], eax
   414 00001359 F9                  <1>     stc
   415                              <1>     return
    13                              <2> %%_ret:
    14 0000135A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   416                              <1> .closeHandle:
   417 0000135B 81FBFFFFFFFF        <1>     cmp ebx, -1
   418                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001361 74(5A)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   419 00001363 B8003E0000          <1>     mov eax, 3E00h
   420 00001368 CD21                <1>     int 21h
   421                              <1>     return
    13                              <2> %%_ret:
    14 0000136A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> cleanUpRedir:
   424                              <1> ;Cleans up the redir stuff after we are done.
   425 0000136B 0FB7053EEDFFFF      <1>     movzx eax, word [pipeSTDIN]
   426 00001372 0FB71D39EDFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   427 00001379 C1E310              <1>     shl ebx, 10h
   428 0000137C 09D8                <1>     or eax, ebx
   429 0000137E 3DFFFFFFFF          <1>     cmp eax, -1
   430 00001383 750C                <1>     jne .pipe
   431 00001385 C60523EDFFFF00      <1>     mov byte [pipeFlag], 0  ;Clear the flag
   432 0000138C E9CD000000          <1>     jmp .redirInClear   ;If no piping, skip
   433                              <1> .pipe:
   434                              <1> ;Pipe processing here
   435                              <1> ;We handle stdin, closing the redir if it is and deleting
   436                              <1> ; the redir file.
   437                              <1> ;Then we handle stdout, moving the redir to stdin.
   438 00001391 66813D16EDFFFFFFFF  <1>     cmp word [pipeSTDIN], -1
   439 0000139A 7443                <1>     je .pipeNostdin
   440                              <1>     ;We close the handle first and delete the file.
   441 0000139C 0FB71D0DEDFFFF      <1>     movzx ebx, word [pipeSTDIN] 
   442 000013A3 31C9                <1>     xor ecx, ecx    ;DUP into STDIN closing the redir
   443 000013A5 B800460000          <1>     mov eax, 4600h
   444 000013AA CD21                <1>     int 21h
   445 000013AC 0F82C4FEFFFF        <1>     jc pipeFailure
   446 000013B2 B8003E0000          <1>     mov eax, 3E00h  ;Close the copy
   447 000013B7 CD21                <1>     int 21h
   448 000013B9 0F82B7FEFFFF        <1>     jc pipeFailure
   449 000013BF 488B1590F0FFFF      <1>     mov rdx, qword [oldPipe]    ;Get the ptr to the filename
   450 000013C6 B800410000          <1>     mov eax, 4100h  ;Delete the file!
   451 000013CB CD21                <1>     int 21h
   452 000013CD 0F82A3FEFFFF        <1>     jc pipeFailure
   453 000013D3 C60200              <1>     mov byte [rdx], 0           ;Mark this buffer as free
   454 000013D6 66C705D1ECFFFFFFFF  <1>     mov word [pipeSTDIN], -1    ;This has been closed now
   455                              <1> .pipeNostdin:
   456 000013DF 66813DCAECFFFFFFFF  <1>     cmp word [pipeSTDOUT], -1   ;If no stdout redir, exit now
   457 000013E8 7474                <1>     je .redirInClear
   458                              <1> ;Duplicate STDIN to save across pipe
   459 000013EA B800450000          <1>     mov eax, 4500h
   460 000013EF 31DB                <1>     xor ebx, ebx    ;Set ebx to STDIN
   461 000013F1 CD21                <1>     int 21h
   462 000013F3 0F827DFEFFFF        <1>     jc pipeFailure
   463 000013F9 668905B0ECFFFF      <1>     mov word [pipeSTDIN], ax    ;Save duplicate here
   464                              <1> 
   465                              <1> ;Now move STDOUT to STDIN, closing original STDIN in the process
   466 00001400 B800460000          <1>     mov eax, 4600h
   467 00001405 89D9                <1>     mov ecx, ebx    ;DUP STDOUT into STDIN
   468 00001407 FFC3                <1>     inc ebx ;ebx = 1, ecx = 0
   469 00001409 CD21                <1>     int 21h
   470 0000140B 0F8265FEFFFF        <1>     jc pipeFailure
   471                              <1> 
   472                              <1> ;Now return the original stdout to stdout
   473 00001411 89D9                <1>     mov ecx, ebx
   474 00001413 0FB71D98ECFFFF      <1>     movzx ebx, word [pipeSTDOUT]
   475 0000141A B800460000          <1>     mov eax, 4600h  ;ebx = pipeSTDOUT, ecx = 1
   476 0000141F CD21                <1>     int 21h
   477 00001421 0F824FFEFFFF        <1>     jc pipeFailure
   478                              <1> 
   479                              <1> ;Now close the DUP'ed STDOUT
   480 00001427 B8003E0000          <1>     mov eax, 3E00h
   481 0000142C CD21                <1>     int 21h
   482 0000142E 0F8242FEFFFF        <1>     jc pipeFailure
   483                              <1> 
   484                              <1> ;Finally unwind STDIN to the beginning of the file
   485 00001434 B800420000          <1>     mov eax, 4200h  ;Seek from start of file
   486 00001439 31DB                <1>     xor ebx, ebx    ;STDIN handle
   487 0000143B 89D9                <1>     mov ecx, ebx    ;Set high 32 bits
   488 0000143D 89DA                <1>     mov edx, ebx    ;Set low 32 bits
   489 0000143F CD21                <1>     int 21h
   490 00001441 0F822FFEFFFF        <1>     jc pipeFailure  ;This should never happen
   491                              <1> 
   492 00001447 488B1500F0FFFF      <1>     mov rdx, qword [newPipe]    ;Move the pathname pointer
   493 0000144E 48891501F0FFFF      <1>     mov qword [oldPipe], rdx
   494 00001455 66C70554ECFFFFFFFF  <1>     mov word [pipeSTDOUT], -1   ;Set this to free for next use
   495                              <1> 
   496                              <1> .redirInClear:
   497                              <1> ;Check redir in
   498 0000145E F60551ECFFFFFF      <1>     test byte [redirIn], -1
   499 00001465 7433                <1>     jz .redirOutClear
   500                              <1> 
   501 00001467 0FB71D4AECFFFF      <1>     movzx ebx, word [redirSTDIN]    ;Put this file back to STDIN
   502 0000146E 31C9                <1>     xor ecx, ecx    ;Duplicate original STDIN into CX (into STDIN position)
   503 00001470 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   504 00001475 CD21                <1>     int 21h
   505 00001477 0F82EBFDFFFF        <1>     jc redirFailure
   506 0000147D B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   507 00001482 CD21                <1>     int 21h
   508 00001484 0F82DEFDFFFF        <1>     jc redirFailure
   509 0000148A 66C70525ECFFFFFFFF  <1>     mov word [redirSTDIN], -1  ;Replace the file handle with -1
   510 00001493 C6051CECFFFF00      <1>     mov byte [redirIn], 0   ;Clear the flag
   511                              <1> .redirOutClear:
   512                              <1> ;Now check Redir Out
   513 0000149A F60516ECFFFFFF      <1>     test byte [redirOut], -1
   514                              <1>     retz    ;Return if not set
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 000014A1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 000014A3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   515                              <1> 
   516 000014A4 0FB71D0FECFFFF      <1>     movzx ebx, word [redirSTDOUT]    ;Put this file back to STDOUT
   517 000014AB B901000000          <1>     mov ecx, 1    ;Duplicate original STDOUT into CX (into STDOUT position)
   518 000014B0 B800460000          <1>     mov eax, 4600h  ;This closes the redir file in the process
   519 000014B5 CD21                <1>     int 21h
   520 000014B7 0F82ABFDFFFF        <1>     jc redirFailure
   521 000014BD B8003E0000          <1>     mov eax, 3E00h  ;Now close BX in the process too remove duplicates.
   522 000014C2 CD21                <1>     int 21h
   523 000014C4 0F829EFDFFFF        <1>     jc redirFailure
   524 000014CA 66C705E7EBFFFFFFFF  <1>     mov word [redirSTDOUT], -1  ;Replace the file handle with -1
   525 000014D3 C605DDEBFFFF00      <1>     mov byte [redirOut], 0   ;Clear the flag
   526                              <1>     return
    13                              <2> %%_ret:
    14 000014DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> checkAndSetupRedir:
   529                              <1> ;Checks and sets up redir as appropriate
   530                              <1> ;Input: al = First char to check, if al < > >> or |, handled appropriately
   531                              <1> ;       rsi points to the first char after the char in al in cmdBuffer
   532                              <1> ;Output: ZF=NZ => No redir
   533                              <1> ;        ZF=ZY => Redir
   534                              <1> ;           rsi is moved to the first non-terminating char after redir filespec
   535                              <1> ;CF=CY if pipe set or an embedded CR found
   536 000014DB 57                  <1>     push rdi
   537 000014DC 3C3C                <1>     cmp al, "<"
   538 000014DE 740F                <1>     je .inputRedir
   539 000014E0 3C3E                <1>     cmp al, ">"
   540 000014E2 7478                <1>     je .outputRedir
   541 000014E4 3C7C                <1>     cmp al, "|"
   542 000014E6 0F8428010000        <1>     je .pipeSetup
   543 000014EC F8                  <1>     clc
   544                              <1> .redirExit:
   545 000014ED 5F                  <1>     pop rdi
   546                              <1>     return
    13                              <2> %%_ret:
    14 000014EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   547                              <1> .inputRedir:
   548 000014EF C605C0EBFFFFFF      <1>     mov byte [redirIn], -1  ;Set the redir in flag
   549 000014F6 488D3D15EEFFFF      <1>     lea rdi, rdrInFilespec
   550 000014FD E827180000          <1>     call skipSpaces ;Skip spaces between < and the filespec
   551 00001502 E8AF010000          <1>     call copyCommandTailItem
   552                              <1>     ;jc .redirExit
   553 00001507 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   554 0000150A E81A180000          <1>     call skipSpaces
   555                              <1>     ;Setup the redir here for STDIN
   556 0000150F 31DB                <1>     xor ebx, ebx    ;DUP STDIN
   557 00001511 B800450000          <1>     mov eax, 4500h
   558 00001516 CD21                <1>     int 21h
   559 00001518 0F8274010000        <1>     jc .redirError
   560 0000151E 66890593EBFFFF      <1>     mov word [redirSTDIN], ax   ;Save the handle in variable
   561 00001525 488D15E6EDFFFF      <1>     lea rdx, rdrInFilespec
   562 0000152C B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   563 00001531 CD21                <1>     int 21h
   564 00001533 0F8259010000        <1>     jc .redirError
   565 00001539 31C9                <1>     xor ecx, ecx    ;Close STDIN and duplicate bx into it
   566 0000153B 0FB7D8              <1>     movzx ebx, ax   ;Move the handle into bx to duplicate into cx (STDIN)
   567 0000153E B800460000          <1>     mov eax, 4600h
   568 00001543 CD21                <1>     int 21h
   569 00001545 0F8247010000        <1>     jc .redirError
   570 0000154B B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle
   571 00001550 CD21                <1>     int 21h
   572 00001552 0F823A010000        <1>     jc .redirError
   573 00001558 30C0                <1>     xor al, al
   574 0000155A EB91                <1>     jmp short .redirExit
   575                              <1> .outputRedir:
   576 0000155C C60554EBFFFF01      <1>     mov byte [redirOut], 1
   577 00001563 803E3E              <1>     cmp byte [rsi], ">" ;Was this a > or a >>
   578 00001566 7509                <1>     jne .notDouble
   579 00001568 FE0549EBFFFF        <1>     inc byte [redirOut] ;Inc to make it 2
   580 0000156E 48FFC6              <1>     inc rsi ;Go past it too
   581                              <1> .notDouble:
   582 00001571 488D3DE9EDFFFF      <1>     lea rdi, rdrOutFilespec
   583 00001578 E8AC170000          <1>     call skipSpaces
   584 0000157D E834010000          <1>     call copyCommandTailItem
   585                              <1>     ;jc .redirExit
   586 00001582 48FFCE              <1>     dec rsi ;Ensure rsi points to the terminating char
   587 00001585 E89F170000          <1>     call skipSpaces
   588                              <1>     ;Setup the redir here for STDOUT
   589 0000158A BB01000000          <1>     mov ebx, 1    ;DUP STDOUT
   590 0000158F B800450000          <1>     mov eax, 4500h
   591 00001594 CD21                <1>     int 21h
   592 00001596 0F82F6000000        <1>     jc .redirError
   593 0000159C 66890517EBFFFF      <1>     mov word [redirSTDOUT], ax   ;Save the handle in variable
   594 000015A3 488D15B7EDFFFF      <1>     lea rdx, rdrOutFilespec
   595 000015AA B8023D0000          <1>     mov eax, 3D02h  ;Open file for read write access
   596 000015AF CD21                <1>     int 21h
   597 000015B1 7312                <1>     jnc .fileExists
   598 000015B3 B8003C0000          <1>     mov eax, 3C00h
   599 000015B8 B900000000          <1>     mov ecx, 0  ;Make the file with no attributes
   600 000015BD CD21                <1>     int 21h
   601 000015BF 0F82CD000000        <1>     jc .redirError
   602                              <1> .fileExists:
   603 000015C5 B901000000          <1>     mov ecx, 1      ;Close STDOUT and duplicate bx into it
   604 000015CA 0FB7D8              <1>     movzx ebx, ax   ;AX has the new handle for output
   605 000015CD B800460000          <1>     mov eax, 4600h  ;DUP2
   606 000015D2 CD21                <1>     int 21h
   607 000015D4 0F82B8000000        <1>     jc .redirError
   608 000015DA B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   609 000015DF CD21                <1>     int 21h
   610 000015E1 0F82AB000000        <1>     jc .redirError
   611 000015E7 803DC9EAFFFF01      <1>     cmp byte [redirOut], 1
   612 000015EE 7416                <1>     je .dontAppend
   613                              <1>     ;Here we move the file pointer to the end of the file
   614 000015F0 31D2                <1>     xor edx, edx    ;Low order 32 bits
   615 000015F2 31C9                <1>     xor ecx, ecx    ;High order 32 bits
   616 000015F4 BB01000000          <1>     mov ebx, 1  ;We seek STDOUT to the end
   617 000015F9 B802420000          <1>     mov eax, 4202h  ;Seek from end of file
   618 000015FE CD21                <1>     int 21h
   619 00001600 0F828C000000        <1>     jc .redirError
   620                              <1> .dontAppend:
   621 00001606 C605AAEAFFFFFF      <1>     mov byte [redirOut], -1
   622 0000160D 30C0                <1>     xor al, al
   623 0000160F E9D9FEFFFF          <1>     jmp .redirExit
   624                              <1> .pipeSetup:
   625                              <1> ;We only need to setup STDOUT redirection to the pipe file
   626 00001614 488D1595EDFFFF      <1>     lea rdx, pipe1Filespec
   627 0000161B 803A00              <1>     cmp byte [rdx], 0
   628 0000161E 740C                <1>     jz .pathFound
   629 00001620 488D15D8EDFFFF      <1>     lea rdx, pipe2Filespec
   630 00001627 803A00              <1>     cmp byte [rdx], 0
   631 0000162A 7560                <1>     jnz .pipeError
   632                              <1> .pathFound:
   633 0000162C 4889151BEEFFFF      <1>     mov qword [newPipe], rdx    ;Use this as the newPipe path
   634 00001633 B800450000          <1>     mov eax, 4500h  ;Now DUP STDOUT
   635 00001638 BB01000000          <1>     mov ebx, 1
   636 0000163D CD21                <1>     int 21h
   637 0000163F 724B                <1>     jc .pipeError
   638 00001641 6689056AEAFFFF      <1>     mov word [pipeSTDOUT], ax   ;Save the copy of the handle
   639 00001648 E869160000          <1>     call getCurrentDrive    ;Get current drive in al (0 based number)
   640 0000164D 0441                <1>     add al, "A"
   641 0000164F BB003A5C00          <1>     mov ebx, 005C3A00h  ;0,"\:",0
   642 00001654 88C3                <1>     mov bl, al  ;Move the drive letter into low byte of ebx
   643 00001656 891A                <1>     mov dword [rdx], ebx    ;Put the \ terminated path
   644 00001658 B900000000          <1>     mov ecx, 0;dirHidden  ;Hidden attributes
   645 0000165D B8005A0000          <1>     mov eax, 5A00h  ;Create a temporary file
   646 00001662 CD21                <1>     int 21h
   647 00001664 7226                <1>     jc .pipeError
   648                              <1>     ;AX has the handle for this file now, this will become STDOUT
   649                              <1>     ;If this is the first pipe, we want to save a copy of this handle
   650 00001666 0FB7D8              <1>     movzx ebx, ax   ;Clone new handle into STDOUT
   651 00001669 B901000000          <1>     mov ecx, 1
   652 0000166E B800460000          <1>     mov eax, 4600h
   653 00001673 CD21                <1>     int 21h
   654 00001675 7215                <1>     jc .pipeError
   655 00001677 B8003E0000          <1>     mov eax, 3E00h  ;Now close the original copy of the handle (in bx)
   656 0000167C CD21                <1>     int 21h
   657 0000167E 720C                <1>     jc .pipeError
   658 00001680 C60528EAFFFFFF      <1>     mov byte [pipeFlag], -1 ;Set the pipe flag up!
   659 00001687 30C0                <1>     xor al, al
   660 00001689 F9                  <1>     stc
   661 0000168A 5F                  <1>     pop rdi
   662                              <1>     return
    13                              <2> %%_ret:
    14 0000168B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   663                              <1> .pipeError:
   664 0000168C 5F                  <1>     pop rdi 
   665 0000168D E9E4FBFFFF          <1>     jmp pipeFailure
   666                              <1> .redirError:
   667 00001692 5F                  <1>     pop rdi 
   668 00001693 E9D0FBFFFF          <1>     jmp redirFailure
   669                              <1> 
   670                              <1> copyCommandTailItemProgram:
   671                              <1> ;Copies a program name from the command tail until a terminator is found.
   672                              <1> ;Stores a terminating null in the destination
   673                              <1> ;Input: rsi = Start of the item to copy
   674                              <1> ;       rdi = Location for copy
   675                              <1> ;Output: Sentence copied with a null terminator inserted.
   676                              <1> ; If CF=CY, embedded CR encountered
   677 00001698 AC                  <1>     lodsb
   678 00001699 3C0D                <1>     cmp al, CR
   679 0000169B 740E                <1>     je .endOfInput
   680 0000169D 3C7C                <1>     cmp al, "|"
   681 0000169F 740A                <1>     je .endOfInput
   682 000016A1 E859160000          <1>     call isALterminator
   683 000016A6 740A                <1>     jz .exit
   684                              <1>     ;cmp al, byte [pathSep]
   685                              <1>     ;je .exit
   686                              <1>     ;cmp al, byte [switchChar]
   687                              <1>     ;je .exit
   688 000016A8 AA                  <1>     stosb
   689 000016A9 EBED                <1>     jmp short copyCommandTailItemProgram
   690                              <1> .endOfInput:
   691 000016AB E802000000          <1>     call .exit
   692 000016B0 F9                  <1>     stc 
   693                              <1>     return
    13                              <2> %%_ret:
    14 000016B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   694                              <1> .exit:
   695 000016B2 30C0                <1>     xor al, al
   696 000016B4 AA                  <1>     stosb
   697                              <1>     return
    13                              <2> %%_ret:
    14 000016B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   698                              <1> 
   699                              <1> copyCommandTailItem:
   700                              <1> ;Copies a sentence from the command tail until a terminator is found.
   701                              <1> ;Stores a terminating null in the destination
   702                              <1> ;Input: rsi = Start of the item to copy
   703                              <1> ;       rdi = Location for copy
   704                              <1> ;Output: Sentence copied with a null terminator inserted.
   705                              <1> ; If CF=CY, embedded CR or Pipe encountered
   706 000016B6 AC                  <1>     lodsb
   707 000016B7 3C0D                <1>     cmp al, CR
   708 000016B9 7436                <1>     je .endOfInput
   709 000016BB 3C7C                <1>     cmp al, "|"
   710 000016BD 7432                <1>     je .endOfInput
   711 000016BF E83B160000          <1>     call isALterminator
   712 000016C4 7432                <1>     jz .exit
   713 000016C6 3C3C                <1>     cmp al, "<"
   714 000016C8 742E                <1>     jz .exit
   715 000016CA 3C3E                <1>     cmp al, ">"
   716 000016CC 742A                <1>     jz .exit
   717 000016CE 3A0557E9FFFF        <1>     cmp al, byte [pathSep]
   718 000016D4 7403                <1>     je .pathSep
   719                              <1>     ;cmp al, byte [switchChar]
   720                              <1>     ;je .exit
   721 000016D6 AA                  <1>     stosb
   722 000016D7 EBDD                <1>     jmp short copyCommandTailItem
   723                              <1> .pathSep:
   724                              <1> ;We look ahead, if the last char is a pathsep, we ignore it
   725 000016D9 AC                  <1>     lodsb   ;Get the next char, increment rsi by one
   726 000016DA E820160000          <1>     call isALterminator
   727 000016DF 7417                <1>     jz .exit
   728 000016E1 3C0D                <1>     cmp al, CR
   729 000016E3 740C                <1>     je .endOfInput
   730                              <1>     ;cmp al, byte [switchChar]
   731                              <1>     ;je .exit
   732 000016E5 8A0540E9FFFF        <1>     mov al, byte [pathSep]
   733 000016EB AA                  <1>     stosb   ;Else store the pathsep
   734 000016EC 48FFCE              <1>     dec rsi ;Move rsi back a piece
   735 000016EF EBC5                <1>     jmp short copyCommandTailItem
   736                              <1> .endOfInput:
   737 000016F1 E802000000          <1>     call .exit
   738 000016F6 F9                  <1>     stc 
   739                              <1>     return
    13                              <2> %%_ret:
    14 000016F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   740                              <1> .exit:
   741 000016F8 30C0                <1>     xor al, al
   742 000016FA AA                  <1>     stosb
   743                              <1>     return
    13                              <2> %%_ret:
    14 000016FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   744                              <1> 
   745                              <1> 
   746                              <1> int2Eh:   ;Interrupt interface for parsing and executing command lines
   747                              <1> ;Input: rsi points to the count byte of a command line
   748 000016FC 4150                <1>     push r8
   749 000016FE 4151                <1>     push r9
   750 00001700 B451                <1>     mov ah, 51h ;Get Current PSP in rdx
   751 00001702 CD21                <1>     int 21h
   752 00001704 52                  <1>     push rdx    ;Save on the stack
   753 00001705 488D1DF4E7FFFF      <1>     lea rbx, qword [startLbl - psp_size]    ;Get a psp ptr for this COMMAND.COM
   754 0000170C B450                <1>     mov ah, 50h ;Set this version of COMMAND.COM as the current PSP
   755 0000170E CD21                <1>     int 21h
   756 00001710 4989D8              <1>     mov r8, rbx ;Set to point to the command.com psp
   757 00001713 4989D9              <1>     mov r9, rbx
   758 00001716 498DB881000000      <1>     lea rdi, qword [r8 + cmdLine]
   759 0000171D B910000000          <1>     mov ecx, 10h    ;7Fh chars + 1 count byte / 8
   760 00001722 F348A5              <1>     rep movsq   ;Copy command line over
   761                              <1>     ;call doCommandLine
   762 00001725 5B                  <1>     pop rbx ;Get Old current PSP in rbx
   763 00001726 B450                <1>     mov ah, 50h ;Set Current PSP
   764 00001728 CD21                <1>     int 21h
   765 0000172A 4159                <1>     pop r9
   766 0000172C 4158                <1>     pop r8
   767 0000172E 48CF                <1>     iretq
    16                                  %include "./Source/cmdFunc.asm"
     1                              <1> ;Note! Each function must setup the DTA to use for itself.
     2                              <1> ;There is no requirement to preserve the DTA across a call.
     3                              <1> ;Only the Int 2Eh entry point will preserve the callers DTA.
     4                              <1> 
     5                              <1> ;Common Error Messages, jumped to to return from
     6                              <1> noSelfCopyError:
     7 00001730 488D1501F2FFFF      <1>     lea rdx, noSelfCopy
     8 00001737 EB34                <1>     jmp short badCmn
     9                              <1> badParamError:
    10 00001739 488D15B6F2FFFF      <1>     lea rdx, badParm
    11 00001740 EB2B                <1>     jmp short badCmn
    12                              <1> badDriveError:
    13 00001742 488D1570F2FFFF      <1>     lea rdx, badDrv
    14 00001749 EB22                <1>     jmp short badCmn
    15                              <1> badArgError:
    16 0000174B 488D1521F5FFFF      <1>     lea rdx, badArgs
    17 00001752 EB19                <1>     jmp short badCmn
    18                              <1> badFileError:
    19 00001754 488D15FCF4FFFF      <1>     lea rdx, badSpec
    20 0000175B EB10                <1>     jmp short badCmn
    21                              <1> badDupFnf:
    22                              <1> ;Hybrid error message
    23 0000175D 488D1561F1FFFF      <1>     lea rdx, dupName
    24 00001764 EB07                <1>     jmp short badCmn
    25                              <1> badDirError:
    26 00001766 488D158AF3FFFF      <1>     lea rdx, badDir
    27                              <1> badCmn:
    28 0000176D B800090000          <1>     mov eax, 0900h
    29 00001772 CD21                <1>     int 21h
    30 00001774 F9                  <1>     stc ;Return with CY => Error occured
    31                              <1>     return
    13                              <2> %%_ret:
    14 00001775 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> dir:
    34                              <1>     ;breakpoint
    35 00001776 C60561EDFFFF00      <1>     mov byte [dirPrnType], 0    ;Clear DIR flags
    36 0000177D C6055BEDFFFF00      <1>     mov byte [dirLineCtr], 0
    37 00001784 C60555EDFFFF00      <1>     mov byte [dirFileCtr], 0
    38 0000178B C605D0EDFFFF00      <1>     mov byte [dirPathArg], 0    ;Null terminate the start of the buffer
    39 00001792 48B83F3F3F3F3F3F3F- <1>     mov rax, "????????"
    39 0000179B 3F                  <1>
    40 0000179C 488D3D3FEEFFFF      <1>     lea rdi, dirSrchPat ;Start also by initialising the search pattern
    41 000017A3 48AB                <1>     stosq
    42 000017A5 48FFC7              <1>     inc rdi ;Go past dot
    43 000017A8 668907              <1>     mov word [rdi], ax
    44 000017AB 884702              <1>     mov byte [rdi + 2], al
    45                              <1>     ;Start by scanning for the switches
    46 000017AE 488D3D69EAFFFF      <1>     lea rdi, cmdBuffer + 1  ;Goto command line input chars count
    47 000017B5 0FB60F              <1>     movzx ecx, byte [rdi]   ;Get number of chars typed
    48 000017B8 48FFC7              <1>     inc rdi ;Goto first char typed in
    49 000017BB 4889FE              <1>     mov rsi, rdi    ;Use rsi as start of buffer counter
    50 000017BE 8A0568E8FFFF        <1>     mov al, byte [switchChar]   ;Scan for switchchars
    51                              <1> .switchScan:
    52 000017C4 F2AE                <1>     repne scasb ;Scan for a switchchar
    53 000017C6 67E320              <1>     jecxz .switchScanDone
    54 000017C9 24DF                <1>     and al, 0DFh    ;UC it
    55 000017CB 3C57                <1>     cmp al, "W" ;Wide print mode?
    56 000017CD 7509                <1>     jne .notWideSw
    57 000017CF 800D08EDFFFF01      <1>     or byte [dirPrnType], 1 ;Set the correct bit
    58 000017D6 EBEC                <1>     jmp short .switchScan
    59                              <1> .notWideSw:
    60 000017D8 3C50                <1>     cmp al, "P" ;Pause mode?
    61 000017DA 0F8559FFFFFF        <1>     jne badParamError   ;If a switch other than /P or /W, fail
    62 000017E0 800DF7ECFFFF02      <1>     or byte [dirPrnType], 2 ;Set correct bit
    63 000017E7 EBDB                <1>     jmp short .switchScan
    64                              <1> .switchScanDone:
    65                              <1> ;If no args, only switches, we search CWD
    66                              <1> ;If one arg, search that 
    67                              <1> ;If more than one, fail
    68 000017E9 488D352FEAFFFF      <1>     lea rsi, cmdBuffer + 2
    69 000017F0 E834150000          <1>     call skipSpaces ;Skip leading spaces
    70 000017F5 4881C603000000      <1>     add rsi, 3  ;Go past the DIR (always three chars)
    71                              <1> .lp:
    72 000017FC E828150000          <1>     call skipSpaces ;Skip spaces after
    73 00001801 AC                  <1>     lodsb   ;Get first non space char
    74 00001802 E81B150000          <1>     call isALEndOfCommand   ;If this is the end char CR or "|", exit
    75 00001807 744A                <1>     jz .eocNoNull
    76 00001809 3C3E                <1>     cmp al, ">"
    77 0000180B 7446                <1>     je .eocNoNull
    78 0000180D 3C3C                <1>     cmp al, "<"
    79 0000180F 7442                <1>     je .eocNoNull
    80 00001811 3A0515E8FFFF        <1>     cmp al, byte [switchChar]  ;Is al a switch char?
    81 00001817 7509                <1>     jne .notSwitch
    82                              <1>     ;Now we skip the switch if it was a switch
    83 00001819 E8AC140000          <1>     call findTerminatorOrEOC    ;Go past the switch
    84 0000181E 7233                <1>     jc .eocNoNull  ;If we reach the EOC, exit,
    85 00001820 EBDA                <1>     jmp short .lp
    86                              <1> .notSwitch:
    87                              <1>     ;If not a switch, should be a path. Copy to buffer and keep searching
    88 00001822 803D39EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If a second path provided, error
    89 00001829 0F851CFFFFFF        <1>     jne badArgError
    90 0000182F 488D3D2CEDFFFF      <1>     lea rdi, dirPathArg ;Store the path to search here AS WRITTEN BY USER
    91 00001836 48FFCE              <1>     dec rsi ;Go back to the start of the string
    92                              <1> .nameCopy:
    93 00001839 AC                  <1>     lodsb
    94 0000183A E8E3140000          <1>     call isALEndOfCommand
    95 0000183F 740F                <1>     jz .eocReached
    96 00001841 E8B9140000          <1>     call isALterminator
    97 00001846 7403                <1>     jz .terminateCopy
    98 00001848 AA                  <1>     stosb
    99 00001849 EBEE                <1>     jmp short .nameCopy
   100                              <1> .terminateCopy:
   101 0000184B 31C0                <1>     xor eax, eax
   102 0000184D AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   103 0000184E EBAC                <1>     jmp short .lp ;Now search if another 
   104                              <1> .eocReached:
   105 00001850 31C0                <1>     xor eax, eax
   106 00001852 AA                  <1>     stosb   ;Store a terminating null here if a terminator found.
   107                              <1> .eocNoNull:
   108 00001853 803D08EDFFFF00      <1>     cmp byte [dirPathArg], 0    ;If no path provided, use CWD for current drive
   109 0000185A 7434                <1>     je .currentDrv
   110                              <1>     ;Here we check if we have a drvSpec and path or just drvSpec
   111 0000185C 488D35FFECFFFF      <1>     lea rsi, dirPathArg
   112 00001863 807E013A            <1>     cmp byte [rsi + 1], ":"  ;Is this a colon (drvspec check)
   113 00001867 7527                <1>     jne .currentDrv
   114                              <1>     ;Here the drive is specified, so lets parse filename to verify if drv ok
   115 00001869 41C6405C00          <1>     mov byte [r8 + fcb1 + fcb.driveNum], 0  ;Clear this byte by default
   116 0000186E 498D785C            <1>     lea rdi, qword [r8 + fcb1]
   117 00001872 B801290000          <1>     mov eax, 2901h   ;Parse filename
   118 00001877 CD21                <1>     int 21h
   119 00001879 3CFF                <1>     cmp al, -1
   120 0000187B 0F84C1FEFFFF        <1>     je badDriveError    ;If the drive is bad, bad parameter
   121                              <1>     ;Else the drive in the fcb is valid
   122 00001881 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum]
   123 00001886 FEC8                <1>     dec al  ;Convert to 0 based drive number
   124 00001888 880553ECFFFF        <1>     mov byte [dirDrv], al
   125 0000188E EB0B                <1>     jmp short .dirPrintVol
   126                              <1> .currentDrv:
   127 00001890 E821140000          <1>     call getCurrentDrive    ;Get current drive number (0 based) in al
   128 00001895 880546ECFFFF        <1>     mov byte [dirDrv], al   ;Store the 0 based drive number in al
   129                              <1> .dirPrintVol:
   130 0000189B 0FB6053FECFFFF      <1>     movzx eax, byte [dirDrv] 
   131 000018A2 E8A90C0000          <1>     call volume.dirEP
   132 000018A7 803DB4ECFFFF00      <1>     cmp byte [dirPathArg], 0    ;Null path here, 
   133 000018AE 7409                <1>     je .printCWD
   134 000018B0 803DAEECFFFF00      <1>     cmp byte [dirPathArg + 3], 0    ;Was this X:,0?
   135 000018B7 7400                <1>     je .printCWD
   136                              <1>     ;Here we have a path
   137                              <1>     ;Temp measure, we just fall through ignoring the path provided
   138                              <1> .printCWD:
   139 000018B9 8A1522ECFFFF        <1>     mov dl, byte [dirDrv]
   140 000018BF 88D0                <1>     mov al, dl
   141 000018C1 0441                <1>     add al, "A"
   142 000018C3 B43A                <1>     mov ah, ":"
   143 000018C5 66890592EBFFFF      <1>     mov word [searchSpec], ax
   144 000018CC 8A0559E7FFFF        <1>     mov al, byte [pathSep]
   145 000018D2 880588EBFFFF        <1>     mov byte [searchSpec + 2], al
   146 000018D8 488D3582EBFFFF      <1>     lea rsi, searchSpec + 3  ;Make space for a X:"\"
   147 000018DF B447                <1>     mov ah, 47h ;Get Current Working Directory
   148 000018E1 FEC2                <1>     inc dl  ;Convert to 1 based number
   149 000018E3 CD21                <1>     int 21h
   150 000018E5 488D3D72EBFFFF      <1>     lea rdi, searchSpec
   151 000018EC E8CA130000          <1>     call strlen
   152 000018F1 FFC9                <1>     dec ecx
   153 000018F3 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
   154 000018F7 488D1561F2FFFF      <1>     lea rdx, dirMain
   155 000018FE B409                <1>     mov ah, 09h
   156 00001900 CD21                <1>     int 21h
   157 00001902 4889FA              <1>     mov rdx, rdi    ;Print the current directory we are working on
   158 00001905 B409                <1>     mov ah, 09h
   159 00001907 CD21                <1>     int 21h
   160 00001909 488D1540EFFFFF      <1>     lea rdx, crlf2
   161 00001910 B409                <1>     mov ah, 09h
   162 00001912 CD21                <1>     int 21h
   163 00001914 E801000000          <1>     call .searchForFile
   164                              <1>     return
    13                              <2> %%_ret:
    14 00001919 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1>     ;If we get no path spec or just a X: path spec then we 
   166                              <1>     ; search the current working directory for that pathspec
   167                              <1>     ;If we get an actual pathspec, we first save the CWD for that drive
   168                              <1>     ; and then we try to make the pathspec the CWD. 
   169                              <1>     ;   If it works, we then search *.* in that folder and return the og CWD.
   170                              <1>     ;   If it fails, we then search one level up, for the search pattern
   171                              <1>     ;    that we compute.
   172                              <1> 
   173                              <1>     
   174                              <1>     ;Now we need to print the path to the folder we will be searching in
   175                              <1> .searchForFile:
   176                              <1>     ;Now we search for the files
   177                              <1>     ;RCX must have the number of chars to the end of the pathspec
   178 0000191A 488D3D3DEBFFFF      <1>     lea rdi, searchSpec
   179 00001921 8A0504E7FFFF        <1>     mov al, byte [pathSep]
   180 00001927 38440FFF            <1>     cmp byte [rdi + rcx - 1], al
   181 0000192B 7405                <1>     je .noAddSlash  ;Deals with special case of root dir
   182 0000192D 88040F              <1>     mov byte [rdi + rcx], al
   183 00001930 FFC1                <1>     inc ecx
   184                              <1> .noAddSlash:
   185 00001932 488D3C0F            <1>     lea rdi, qword [rdi + rcx]
   186 00001936 488D35A5ECFFFF      <1>     lea rsi, dirSrchPat
   187 0000193D 4889FA              <1>     mov rdx, rdi    ;Ptr to search for in rdx
   188 00001940 48A5                <1>     movsq
   189 00001942 A5                  <1>     movsd
   190 00001943 30C0                <1>     xor al, al
   191 00001945 AA                  <1>     stosb   ;Store the terminating null
   192 00001946 E800160000          <1>     call setDTA
   193 0000194B 4C8D1580E7FFFF      <1>     lea r10, cmdFFBlock
   194 00001952 B911000000          <1>     mov ecx, dirReadOnly | dirDirectory
   195 00001957 B44E                <1>     mov ah, 4Eh ;Find first
   196 00001959 CD21                <1>     int 21h
   197 0000195B 720B                <1>     jc .dirNoMoreFiles
   198                              <1> .findNext:
   199 0000195D E878000000          <1>     call .dirPrintFileData  ;Print the file information
   200 00001962 B44F                <1>     mov ah, 4Fh
   201 00001964 CD21                <1>     int 21h
   202 00001966 73F5                <1>     jnc .findNext 
   203                              <1> .dirNoMoreFiles:
   204 00001968 F6056FEBFFFF01      <1>     test byte [dirPrnType], 1
   205 0000196F 740B                <1>     jz .dirNoEndNewLine
   206 00001971 488D15D5EEFFFF      <1>     lea rdx, crlf   ;Only need this for /W
   207 00001978 B409                <1>     mov ah, 09h
   208 0000197A CD21                <1>     int 21h
   209                              <1> .dirNoEndNewLine:
   210                              <1>     ;Now we print the number of files and the number of bytes on the disk
   211 0000197C 488D1594F4FFFF      <1>     lea rdx, fourSpc
   212 00001983 B409                <1>     mov ah, 09h
   213 00001985 CD21                <1>     int 21h
   214 00001987 B409                <1>     mov ah, 09h ;Print four Spaces twice
   215 00001989 CD21                <1>     int 21h
   216 0000198B 0FB6054EEBFFFF      <1>     movzx eax, byte [dirFileCtr]   ;Get number of files
   217 00001992 E8B2140000          <1>     call printDecimalWord
   218 00001997 488D15FAEFFFFF      <1>     lea rdx, dirOk
   219 0000199E B409                <1>     mov ah, 09h
   220 000019A0 CD21                <1>     int 21h
   221 000019A2 488D1573F4FFFF      <1>     lea rdx, threeSpc
   222 000019A9 B409                <1>     mov ah, 09h
   223 000019AB CD21                <1>     int 21h
   224 000019AD B800360000          <1>     mov eax, 3600h ;Get disk info
   225 000019B2 8A1529EBFFFF        <1>     mov dl, byte [dirDrv]
   226 000019B8 FEC2                <1>     inc dl  ;Function 36h wants the 1 based number
   227 000019BA CD21                <1>     int 21h ;Get disk free space info
   228 000019BC 0FB7C0              <1>     movzx eax, ax   ;Sectors per Cluster 
   229 000019BF 0FB7C9              <1>     movzx ecx, cx   ;Bytes per Sector
   230 000019C2 09DB                <1>     or ebx, ebx ;Clear the upper bits of rbx
   231 000019C4 F7E1                <1>     mul ecx ;Get bytes per cluster
   232 000019C6 48F7E3              <1>     mul rbx ;Multiply to the number of free clusters on the disk
   233                              <1>     ;rax now has the number of free bytes on the disk
   234 000019C9 E87B140000          <1>     call printDecimalWord
   235 000019CE 488D15CDEFFFFF      <1>     lea rdx, bytesOk
   236 000019D5 B409                <1>     mov ah, 09h
   237 000019D7 CD21                <1>     int 21h
   238                              <1>     return
    13                              <2> %%_ret:
    14 000019D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> .dirPrintFileData:
   241                              <1> ;Use fcbCmdSpec to build the file name with space
   242                              <1> ;Start by print the name (same for both cases)
   243                              <1> ;We first check if the file has attributes hidden/system and hide them if so
   244 000019DA F60506E7FFFF06      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirIncFiles
   245                              <1>     retnz   ;Simply return if either bit is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000019E1 75(D9)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   246 000019E3 488D3506E7FFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
   247 000019EA 488D3DFBE8FFFF      <1>     lea rdi, fcbCmdSpec
   248 000019F1 E8AA130000          <1>     call asciiFilenameToFCB
   249 000019F6 488D15EFE8FFFF      <1>     lea rdx, fcbCmdSpec
   250 000019FD B908000000          <1>     mov ecx, 8  ;Print 8 chars
   251 00001A02 BB01000000          <1>     mov ebx, 1  ;STDOUT
   252 00001A07 B440                <1>     mov ah, 40h ;Write handle
   253 00001A09 CD21                <1>     int 21h
   254 00001A0B 52                  <1>     push rdx
   255 00001A0C B220                <1>     mov dl, " "
   256 00001A0E B402                <1>     mov ah, 02h ;Print char
   257 00001A10 CD21                <1>     int 21h
   258 00001A12 5A                  <1>     pop rdx
   259 00001A13 4881C208000000      <1>     add rdx, 8  ;Go to ext field
   260 00001A1A B903000000          <1>     mov ecx, 3  ;Print three chars
   261 00001A1F BB01000000          <1>     mov ebx, 1  ;STDOUT
   262 00001A24 B440                <1>     mov ah, 40h ;Write handle
   263 00001A26 CD21                <1>     int 21h
   264 00001A28 F605AFEAFFFF01      <1>     test byte [dirPrnType], 1
   265 00001A2F 0F85A8000000        <1>     jnz .widePrint
   266                              <1> ;Normal print (Name space ext <> File size <> Acc Date <> Acc Time)
   267                              <1>     ;Now check if a DIR
   268 00001A35 F605ABE6FFFF10      <1>     test byte [cmdFFBlock + ffBlock.attribFnd], dirDirectory
   269 00001A3C 7418                <1>     jz .dirPrintNotDir
   270 00001A3E 488D156BEFFFFF      <1>     lea rdx, dirLbl
   271 00001A45 B409                <1>     mov ah, 09h
   272 00001A47 CD21                <1>     int 21h
   273 00001A49 488D15CCF3FFFF      <1>     lea rdx, threeSpc
   274 00001A50 B409                <1>     mov ah, 09h
   275 00001A52 CD21                <1>     int 21h
   276 00001A54 EB4F                <1>     jmp short .dirPrintFileDT
   277                              <1> .dirPrintNotDir:
   278                              <1> ;Here we print the file size
   279 00001A56 B220                <1>     mov dl, " "
   280 00001A58 B402                <1>     mov ah, 02h
   281 00001A5A CD21                <1>     int 21h
   282 00001A5C 8B058AE6FFFF        <1>     mov eax, dword [cmdFFBlock + ffBlock.fileSize]
   283 00001A62 E853140000          <1>     call getDecimalWord
   284 00001A67 4889CB              <1>     mov rbx, rcx
   285 00001A6A 51                  <1>     push rcx
   286 00001A6B 480FCB              <1>     bswap rbx
   287 00001A6E B908000000          <1>     mov ecx, 8
   288                              <1> .dirPrintFileSizePrep:
   289 00001A73 84DB                <1>     test bl, bl ;Any leading null's get replaced with a space
   290 00001A75 7514                <1>     jne .dirPrintFileSize
   291 00001A77 B402                <1>     mov ah, 02h
   292 00001A79 B220                <1>     mov dl, " "
   293 00001A7B CD21                <1>     int 21h
   294 00001A7D 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   295 00001A81 FFC9                <1>     dec ecx
   296 00001A83 81F901000000        <1>     cmp ecx, 1
   297 00001A89 75E8                <1>     jne .dirPrintFileSizePrep   ;Always print 1 byte for size
   298                              <1> .dirPrintFileSize:
   299 00001A8B 5B                  <1>     pop rbx
   300                              <1> .dirPrintFileSizeLoop:
   301 00001A8C 88DA                <1>     mov dl, bl
   302 00001A8E B402                <1>     mov ah, 02h
   303 00001A90 CD21                <1>     int 21h
   304 00001A92 48C1EB08            <1>     shr rbx, 8  ;Get next byte
   305 00001A96 FFC9                <1>     dec ecx
   306 00001A98 75F2                <1>     jnz .dirPrintFileSizeLoop
   307 00001A9A 488D157FF3FFFF      <1>     lea rdx, twoSpc
   308 00001AA1 B409                <1>     mov ah, 09h
   309 00001AA3 CD21                <1>     int 21h
   310                              <1> .dirPrintFileDT:
   311 00001AA5 B220                <1>     mov dl, " "
   312 00001AA7 B402                <1>     mov ah, 02h
   313 00001AA9 CD21                <1>     int 21h
   314 00001AAB 0FB70538E6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileDate]
   315 00001AB2 31DB                <1>     xor ebx, ebx    ;Ensure we print 2 digit year
   316 00001AB4 E8530F0000          <1>     call printDate
   317 00001AB9 488D1560F3FFFF      <1>     lea rdx, twoSpc
   318 00001AC0 B409                <1>     mov ah, 09h
   319 00001AC2 CD21                <1>     int 21h
   320 00001AC4 0FB7051DE6FFFF      <1>     movzx eax, word [cmdFFBlock + ffBlock.fileTime]
   321 00001ACB E85E100000          <1>     call printTime
   322 00001AD0 488D1576EDFFFF      <1>     lea rdx, crlf
   323 00001AD7 B409                <1>     mov ah, 09h
   324 00001AD9 CD21                <1>     int 21h
   325 00001ADB EB0B                <1>     jmp short .dirPrintNameExit
   326                              <1> .widePrint:
   327                              <1> ;If /W, print name space ext space space space space
   328 00001ADD 488D1533F3FFFF      <1>     lea rdx, fourSpc
   329 00001AE4 B409                <1>     mov ah, 09h ;Print string
   330 00001AE6 CD21                <1>     int 21h
   331                              <1> .dirPrintNameExit:
   332 00001AE8 FE05F2E9FFFF        <1>     inc byte [dirFileCtr]   ;Increment file counter
   333 00001AEE FE05EBE9FFFF        <1>     inc byte [dirLineCtr]
   334 00001AF4 803DE4E9FFFF17      <1>     cmp byte [dirLineCtr], 23
   335                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001AFB 7401                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001AFD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   336 00001AFE 488D15D2EEFFFF      <1>     lea rdx, pauseMes
   337 00001B05 B409                <1>     mov ah, 09h
   338 00001B07 CD21                <1>     int 21h
   339 00001B09 B401                <1>     mov ah, 01h ;Wait for a char from STDIN
   340 00001B0B CD21                <1>     int 21h
   341 00001B0D C605CBE9FFFF00      <1>     mov byte [dirLineCtr], 0
   342 00001B14 488D1532EDFFFF      <1>     lea rdx, crlf   ;Force new line
   343 00001B1B B409                <1>     mov ah, 09h
   344 00001B1D CD21                <1>     int 21h
   345                              <1>     return
    13                              <2> %%_ret:
    14 00001B1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> chdir:
   348 00001B20 F60595E5FFFFFF      <1>     test byte [arg1Flg], -1
   349 00001B27 754D                <1>     jnz .changeDir
   350                              <1>     ;Print CWD
   351                              <1> .printCWD:
   352 00001B29 E8E1100000          <1>     call putCWDInPrompt ;Exactly the same procedure
   353 00001B2E E8C30E0000          <1>     call printCRLF
   354                              <1>     return
    13                              <2> %%_ret:
    14 00001B33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   355                              <1> .printDiskCWD:
   356                              <1> ;Print CWD for a specified drive
   357 00001B34 418A505C            <1>     mov dl, byte [r8 + fcb1 + fcb.driveNum] ;Get 1 based drive number in dl
   358 00001B38 88D0                <1>     mov al, dl
   359 00001B3A 0440                <1>     add al, "@" ;Get the UC letter
   360 00001B3C B43A                <1>     mov ah, ":"
   361 00001B3E 488D3D19E9FFFF      <1>     lea rdi, searchSpec
   362 00001B45 66AB                <1>     stosw   ;Store X:, rdi+=2
   363 00001B47 8A05DEE4FFFF        <1>     mov al, byte [pathSep]
   364 00001B4D AA                  <1>     stosb   ;Store pathSep, inc rdi
   365 00001B4E B447                <1>     mov ah, 47h ;Get Current Working Directory
   366 00001B50 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   367 00001B53 CD21                <1>     int 21h
   368 00001B55 E861110000          <1>     call strlen
   369 00001B5A 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   370 00001B60 B440                <1>     mov ah, 40h ;Write to handle
   371 00001B62 BB01000000          <1>     mov ebx, 1  ;STDOUT
   372 00001B67 488D15F0E8FFFF      <1>     lea rdx, searchSpec
   373 00001B6E CD21                <1>     int 21h
   374 00001B70 E8810E0000          <1>     call printCRLF
   375                              <1>     return
    13                              <2> %%_ret:
    14 00001B75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   376                              <1> .changeDir:
   377 00001B76 8A0542E5FFFF        <1>     mov al, byte [arg1FCBret]
   378 00001B7C 3CFF                <1>     cmp al, -1 
   379 00001B7E 0F84BEFBFFFF        <1>     je badDriveError  ;IF the drive is good, but FCB name blank, either X: or \ 
   380 00001B84 4180785D20          <1>     cmp byte [r8 + fcb1 + fcb.filename], " "
   381 00001B89 7520                <1>     jne .setPath
   382                              <1>     ;If we searched for a . or .., the fcb will be blank. Make sure we didn't search that
   383 00001B8B 0FB6052BE5FFFF      <1>     movzx eax, byte [arg1Off]
   384 00001B92 488D3584E6FFFF      <1>     lea rsi, cmdBuffer
   385 00001B99 4801C6              <1>     add rsi, rax
   386 00001B9C 8A0589E4FFFF        <1>     mov al, byte [pathSep]
   387 00001BA2 3806                <1>     cmp byte [rsi], al  ;Is the first char a pathsep?
   388 00001BA4 7405                <1>     je .setPath
   389 00001BA6 803E2E              <1>     cmp byte [rsi], "."
   390 00001BA9 7589                <1>     jne .printDiskCWD
   391                              <1> .setPath:
   392 00001BAB E87A120000          <1>     call buildCommandPath   ;Else build a fully qualified pathname
   393 00001BB0 488D15A7E8FFFF      <1>     lea rdx, searchSpec
   394 00001BB7 B43B                <1>     mov ah, 3Bh ;CHDIR
   395 00001BB9 CD21                <1>     int 21h
   396 00001BBB 0F82A5FBFFFF        <1>     jc badDirError
   397                              <1>     return
    13                              <2> %%_ret:
    14 00001BC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   398                              <1> 
   399                              <1> mkdir:
   400 00001BC2 F605F3E4FFFFFF      <1>     test byte [arg1Flg], -1
   401 00001BC9 0F847CFBFFFF        <1>     jz badArgError
   402 00001BCF F605E9E4FFFFFF      <1>     test byte [arg2Flg], -1
   403 00001BD6 0F856FFBFFFF        <1>     jnz badArgError
   404                              <1>     ;We have exactly one argument
   405 00001BDC 8A05DCE4FFFF        <1>     mov al, byte [arg1FCBret]
   406 00001BE2 3CFF                <1>     cmp al, -1 
   407 00001BE4 0F8458FBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   408 00001BEA E83B120000          <1>     call buildCommandPath
   409 00001BEF 488D1568E8FFFF      <1>     lea rdx, searchSpec
   410 00001BF6 B800390000          <1>     mov eax, 3900h  ;MKDIR
   411 00001BFB CD21                <1>     int 21h
   412                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001BFD 73(C1)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   413                              <1> .badMake:   ;Else, bad make
   414 00001BFF 488D1505EFFFFF      <1>     lea rdx, badMD
   415 00001C06 B800090000          <1>     mov eax, 0900h
   416 00001C0B CD21                <1>     int 21h
   417                              <1>     return
    13                              <2> %%_ret:
    14 00001C0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   418                              <1> 
   419                              <1> rmdir:
   420 00001C0E F605A7E4FFFFFF      <1>     test byte [arg1Flg], -1
   421 00001C15 0F8430FBFFFF        <1>     jz badArgError
   422 00001C1B F6059DE4FFFFFF      <1>     test byte [arg2Flg], -1
   423 00001C22 0F8523FBFFFF        <1>     jnz badArgError
   424                              <1>     ;We have exactly one argument
   425 00001C28 8A0590E4FFFF        <1>     mov al, byte [arg1FCBret]
   426 00001C2E 3CFF                <1>     cmp al, -1 
   427 00001C30 0F840CFBFFFF        <1>     je badDriveError  ;If a drive was specified and was bad, jump
   428 00001C36 E8EF110000          <1>     call buildCommandPath
   429 00001C3B 488D151CE8FFFF      <1>     lea rdx, searchSpec
   430 00001C42 B8003A0000          <1>     mov eax, 3A00h  ;RMDIR
   431 00001C47 CD21                <1>     int 21h
   432                              <1>     retnc   ;Return if not carry
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00001C49 73(0D)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   433                              <1> .badRemove:   ;Else, bad make
   434 00001C4B 488D15D6EEFFFF      <1>     lea rdx, badRD
   435 00001C52 B800090000          <1>     mov eax, 0900h
   436 00001C57 CD21                <1>     int 21h
   437                              <1>     return
    13                              <2> %%_ret:
    14 00001C59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> 
   439                              <1> copy:
   440 00001C5A F6055BE4FFFFFF      <1>     test byte [arg1Flg], -1
   441 00001C61 0F84E4FAFFFF        <1>     jz badArgError
   442 00001C67 F60551E4FFFFFF      <1>     test byte [arg2Flg], -1
   443 00001C6E 0F84D7FAFFFF        <1>     jz badArgError
   444 00001C74 488D35A2E5FFFF      <1>     lea rsi, cmdBuffer
   445 00001C7B 0FB6053BE4FFFF      <1>     movzx eax, byte [arg1Off]
   446 00001C82 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   447                              <1>     ;rsi points to terminating char
   448 00001C85 AC                  <1>     lodsb   ;Get first char in AL
   449 00001C86 48FFCE              <1>     dec rsi ;Go back to this char
   450 00001C89 E894100000          <1>     call isALEndOfCommand
   451 00001C8E 0F82A5FAFFFF        <1>     jc badParamError
   452 00001C94 488D3D6BE9FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   453                              <1> .copyName1:
   454 00001C9B AC                  <1>     lodsb
   455 00001C9C E881100000          <1>     call isALEndOfCommand
   456 00001CA1 0F8492FAFFFF        <1>     je badParamError
   457 00001CA7 E853100000          <1>     call isALterminator
   458 00001CAC 7403                <1>     jz .endOfName1
   459 00001CAE AA                  <1>     stosb
   460 00001CAF EBEA                <1>     jmp short .copyName1
   461                              <1> .endOfName1:
   462 00001CB1 31C0                <1>     xor eax, eax
   463 00001CB3 AA                  <1>     stosb   ;Store this 0 at rdi
   464 00001CB4 488D3562E5FFFF      <1>     lea rsi, cmdBuffer
   465 00001CBB 0FB605FEE3FFFF      <1>     movzx eax, byte [arg2Off]
   466 00001CC2 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   467 00001CC5 AC                  <1>     lodsb   ;Get first char in AL
   468 00001CC6 48FFCE              <1>     dec rsi ;Go back to this char
   469 00001CC9 E854100000          <1>     call isALEndOfCommand
   470 00001CCE 0F8265FAFFFF        <1>     jc badParamError
   471 00001CD4 488D3DABE9FFFF      <1>     lea rdi, destPath
   472                              <1> .copyName2:
   473 00001CDB AC                  <1>     lodsb
   474 00001CDC E841100000          <1>     call isALEndOfCommand
   475 00001CE1 740A                <1>     je .endOfName2
   476 00001CE3 E817100000          <1>     call isALterminator
   477 00001CE8 7403                <1>     jz .endOfName2
   478 00001CEA AA                  <1>     stosb
   479 00001CEB EBEE                <1>     jmp short .copyName2
   480                              <1> .endOfName2:
   481 00001CED 31C0                <1>     xor eax, eax
   482 00001CEF AA                  <1>     stosb   ;Store this 0 at rdi
   483                              <1> ;Before we open, we check if the two filenames are equal
   484                              <1> ; If so, crap out.
   485 00001CF0 488D350FE9FFFF      <1>     lea rsi, sourcePath
   486 00001CF7 488D3D88E9FFFF      <1>     lea rdi, destPath
   487 00001CFE B81E120000          <1>     mov eax, 121Eh
   488 00001D03 CD2F                <1>     int 2Fh
   489 00001D05 0F84D3000000        <1>     jz .sameFilename
   490                              <1>     ;Open source with read permission
   491                              <1>     ;Open destination with write permission
   492 00001D0B 488D15F4E8FFFF      <1>     lea rdx, sourcePath
   493 00001D12 B8003D0000          <1>     mov eax, 3D00h  ;Read open
   494 00001D17 CD21                <1>     int 21h
   495 00001D19 0F821AFAFFFF        <1>     jc badParamError
   496 00001D1F 668905E0E9FFFF      <1>     mov word [sourceHdl], ax
   497                              <1> 
   498 00001D26 0FB7D8              <1>     movzx ebx, ax   ;For bx
   499 00001D29 B800440000          <1>     mov eax, 4400h  ;Get device info in dx
   500 00001D2E CD21                <1>     int 21h
   501 00001D30 668915D3E9FFFF      <1>     mov word [srcHdlInfo], dx   ;Store information here
   502                              <1> 
   503 00001D37 488D1548E9FFFF      <1>     lea rdx, destPath
   504 00001D3E B8003C0000          <1>     mov eax, 3C00h  ;Create the file
   505 00001D43 31C9                <1>     xor ecx, ecx    ;No file attributes
   506 00001D45 CD21                <1>     int 21h
   507 00001D47 0F82B8000000        <1>     jc .badExit
   508 00001D4D 668905B4E9FFFF      <1>     mov word [destHdl], ax
   509 00001D54 31F6                <1>     xor esi, esi
   510 00001D56 488D15AFE9FFFF      <1>     lea rdx, copyBuffer
   511                              <1> .copyLoop:
   512 00001D5D B980000000          <1>     mov ecx, 128
   513 00001D62 0FB71D9DE9FFFF      <1>     movzx ebx, word [sourceHdl]
   514 00001D69 B43F                <1>     mov ah, 3Fh ;Read
   515 00001D6B CD21                <1>     int 21h
   516 00001D6D 0F8292000000        <1>     jc .badExit
   517 00001D73 85C0                <1>     test eax, eax
   518 00001D75 743A                <1>     jz .okExit
   519 00001D77 01C6                <1>     add esi, eax
   520 00001D79 89C1                <1>     mov ecx, eax
   521 00001D7B 0FB71D86E9FFFF      <1>     movzx ebx, word [destHdl]
   522 00001D82 B440                <1>     mov ah, 40h ;Write
   523 00001D84 CD21                <1>     int 21h
   524 00001D86 727D                <1>     jc .badExit
   525 00001D88 3D80000000          <1>     cmp eax, 128    ;Did we read 128 chars?
   526 00001D8D 74CE                <1>     je .copyLoop
   527                              <1>     ;If not char dev, exit
   528 00001D8F 66F70572E9FFFF8000  <1>     test word [srcHdlInfo], 80h ;Char dev bit set?
   529 00001D98 7417                <1>     jz .okExit
   530                              <1>     ;Is handle in cooked or binary mode?
   531 00001D9A 66F70567E9FFFF2000  <1>     test word [srcHdlInfo], 20h
   532 00001DA3 750C                <1>     jnz .okExit
   533                              <1>     ;Here the char dev must be in cooked mode. Check if the last char was ^Z
   534 00001DA5 09C0                <1>     or eax, eax ;Clear upper bits in eax
   535 00001DA7 488D7C02FF          <1>     lea rdi, qword [rdx + rax - 1]  ;Point to the last char in the buffer
   536 00001DAC 803F1A              <1>     cmp byte [rdi], EOF ;Was this EOF?
   537 00001DAF 75AC                <1>     jne .copyLoop   ;Jump if not
   538                              <1> .okExit:
   539 00001DB1 E832000000          <1>     call .leaveCopyClose
   540 00001DB6 488D1590EAFFFF      <1>     lea rdx, crlf
   541 00001DBD B409                <1>     mov ah, 09h
   542 00001DBF CD21                <1>     int 21h
   543 00001DC1 488D154FF0FFFF      <1>     lea rdx, fourSpc
   544 00001DC8 B409                <1>     mov ah, 09h
   545 00001DCA CD21                <1>     int 21h
   546 00001DCC B402                <1>     mov ah, 02h
   547 00001DCE B231                <1>     mov dl, "1" ;1 File(s) copied
   548 00001DD0 CD21                <1>     int 21h
   549 00001DD2 488D15ADEBFFFF      <1>     lea rdx, copyOk
   550 00001DD9 B409                <1>     mov ah, 09h
   551 00001DDB CD21                <1>     int 21h
   552                              <1>     return
    13                              <2> %%_ret:
    14 00001DDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   553                              <1> .sameFilename:
   554 00001DDE E805000000          <1>     call .leaveCopyClose ;Close the handles
   555 00001DE3 E948F9FFFF          <1>     jmp noSelfCopyError
   556                              <1> .leaveCopyClose:
   557 00001DE8 668B1D17E9FFFF      <1>     mov bx, word [sourceHdl]
   558 00001DEF B8003E0000          <1>     mov eax, 3E00h
   559 00001DF4 CD21                <1>     int 21h
   560 00001DF6 668B1D0BE9FFFF      <1>     mov bx, word [destHdl]
   561 00001DFD B8003E0000          <1>     mov eax, 3E00h
   562 00001E02 CD21                <1>     int 21h
   563                              <1>     return
    13                              <2> %%_ret:
    14 00001E04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   564                              <1> .badExit:
   565                              <1> ;Prototypically use badParamError for error reporting... sucks I know
   566 00001E05 668B1DFAE8FFFF      <1>     mov bx, word [sourceHdl]
   567 00001E0C 6681FBFFFF          <1>     cmp bx, -1
   568 00001E11 7407                <1>     je .skipSource
   569 00001E13 B8003E0000          <1>     mov eax, 3E00h  ;Close this handle
   570 00001E18 CD21                <1>     int 21h
   571                              <1> .skipSource:
   572 00001E1A 668B1DE7E8FFFF      <1>     mov bx, word [destHdl]
   573 00001E21 6681FBFFFF          <1>     cmp bx, -1
   574 00001E26 0F840DF9FFFF        <1>     je badParamError
   575 00001E2C B8003E0000          <1>     mov eax, 3E00h
   576 00001E31 CD21                <1>     int 21h
   577 00001E33 E901F9FFFF          <1>     jmp badParamError
   578                              <1> 
   579                              <1> erase:
   580 00001E38 F6057DE2FFFFFF      <1>     test byte [arg1Flg], -1
   581 00001E3F 0F8406F9FFFF        <1>     jz badArgError
   582 00001E45 E8E00F0000          <1>     call buildCommandPath
   583 00001E4A 488D150DE6FFFF      <1>     lea rdx, searchSpec
   584 00001E51 B800410000          <1>     mov eax, 4100h  ;Delete File 
   585 00001E56 31C9                <1>     xor ecx, ecx
   586 00001E58 CD21                <1>     int 21h
   587 00001E5A 0F82EBF8FFFF        <1>     jc badArgError
   588                              <1>     return
    13                              <2> %%_ret:
    14 00001E60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> date:
   590 00001E61 488D15C6EBFFFF      <1>     lea rdx, curDate
   591 00001E68 B409                <1>     mov ah, 09h
   592 00001E6A CD21                <1>     int 21h
   593 00001E6C B42A                <1>     mov ah, 2Ah ;DOS get date
   594 00001E6E CD21                <1>     int 21h
   595                              <1> 	;AL = day of the week (0=Sunday)
   596                              <1> 	;CX = year (1980-2099)
   597                              <1> 	;DH = month (1-12)
   598                              <1> 	;DL = day (1-31)
   599 00001E70 66890D8BE7FFFF      <1>     mov word [td1], cx
   600 00001E77 881587E7FFFF        <1>     mov byte [td3], dl
   601 00001E7D 883582E7FFFF        <1>     mov byte [td4], dh
   602 00001E83 0FB6C0              <1>     movzx eax, al
   603 00001E86 89C3                <1>     mov ebx, eax
   604 00001E88 D1E3                <1>     shl ebx, 1   ;Multiply by 2
   605 00001E8A 01D8                <1>     add eax, ebx ;Make it 3 times 
   606 00001E8C 488D1577EBFFFF      <1>     lea rdx, dayName
   607 00001E93 488D1402            <1>     lea rdx, qword [rdx + rax]  ;Go to the right day name
   608 00001E97 B903000000          <1>     mov ecx, 3  ;Print three chars
   609 00001E9C BB01000000          <1>     mov ebx, 1  ;STDOUT
   610 00001EA1 B440                <1>     mov ah, 40h ;Write to handle
   611 00001EA3 CD21                <1>     int 21h
   612 00001EA5 B220                <1>     mov dl, " "
   613 00001EA7 B402                <1>     mov ah, 02h
   614 00001EA9 CD21                <1>     int 21h
   615                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
   616                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
   617                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
   618 00001EAB 0FB70550E7FFFF      <1>     movzx eax, word [td1]   ;Get this word
   619 00001EB2 C1E009              <1>     shl eax, 9 ;Move it high to pack it properly
   620 00001EB5 0FB61D49E7FFFF      <1>     movzx ebx, byte [td4]
   621 00001EBC C1E305              <1>     shl ebx, 5  ;Shift the date to the right position
   622 00001EBF 09D8                <1>     or eax, ebx ;Add this date to eax
   623 00001EC1 0FB61D3CE7FFFF      <1>     movzx ebx, byte [td3]
   624 00001EC8 09D8                <1>     or eax, ebx
   625 00001ECA BB01000000          <1>     mov ebx, 1  ;Four digit year pls
   626 00001ECF E8380B0000          <1>     call printDate
   627                              <1> 
   628 00001ED4 488D1564EBFFFF      <1>     lea rdx, newDate
   629 00001EDB B409                <1>     mov ah, 09h
   630 00001EDD CD21                <1>     int 21h
   631 00001EDF 488D1578EBFFFF      <1>     lea rdx, ukDate
   632 00001EE6 488D0564EBFFFF      <1>     lea rax, usDate
   633 00001EED 488D1D77EBFFFF      <1>     lea rbx, jpDate
   634 00001EF4 803D3BE1FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
   635 00001EFB 480F47D3            <1>     cmova rdx, rbx
   636 00001EFF 480F42D0            <1>     cmovb rdx, rax
   637 00001F03 B409                <1>     mov ah, 09h
   638 00001F05 CD21                <1>     int 21h
   639                              <1> 
   640 00001F07 488D158FE2FFFF      <1>     lea rdx, inBuffer
   641 00001F0E C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   642 00001F11 B40A                <1>     mov ah, 0Ah
   643 00001F13 CD21                <1>     int 21h
   644 00001F15 52                  <1>     push rdx
   645 00001F16 488D1530E9FFFF      <1>     lea rdx, crlf
   646 00001F1D B409                <1>     mov ah, 09h
   647 00001F1F CD21                <1>     int 21h
   648 00001F21 5A                  <1>     pop rdx
   649 00001F22 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   650                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001F26 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001F28 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   651                              <1>     return
    13                              <2> %%_ret:
    14 00001F29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   652                              <1> 
   653                              <1> time:
   654 00001F2A 488D1556EBFFFF      <1>     lea rdx, curTime
   655 00001F31 B409                <1>     mov ah, 09h
   656 00001F33 CD21                <1>     int 21h
   657 00001F35 B42C                <1>     mov ah, 2Ch ;DOS get time
   658 00001F37 CD21                <1>     int 21h
   659                              <1>     ;CH = hour (0-23)
   660                              <1> 	;CL = minutes (0-59)
   661                              <1> 	;DH = seconds (0-59)
   662                              <1> 	;DL = hundredths (0-99)
   663 00001F39 880DC3E6FFFF        <1>     mov byte [td1], cl
   664 00001F3F 882DBEE6FFFF        <1>     mov byte [td2], ch
   665 00001F45 8815B9E6FFFF        <1>     mov byte [td3], dl
   666 00001F4B 8835B4E6FFFF        <1>     mov byte [td4], dh
   667 00001F51 0FB6C5              <1>     movzx eax, ch
   668 00001F54 E8470C0000          <1>     call printTime.printHours
   669                              <1> 
   670 00001F59 8A15E4E0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   671 00001F5F B402                <1>     mov ah, 02h
   672 00001F61 CD21                <1>     int 21h
   673                              <1> 
   674 00001F63 0FB60598E6FFFF      <1>     movzx eax, byte [td1]   ;Minutes
   675 00001F6A E8210C0000          <1>     call printTime.printMinutesAlt
   676                              <1> 
   677 00001F6F 8A15CEE0FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   678 00001F75 B402                <1>     mov ah, 02h
   679 00001F77 CD21                <1>     int 21h
   680                              <1> 
   681 00001F79 0FB60585E6FFFF      <1>     movzx eax, byte [td4]   ;Seconds
   682 00001F80 E80B0C0000          <1>     call printTime.printMinutesAlt
   683                              <1> 
   684 00001F85 B22E                <1>     mov dl, "."
   685 00001F87 B402                <1>     mov ah, 02h
   686 00001F89 CD21                <1>     int 21h
   687                              <1> 
   688 00001F8B 0FB60572E6FFFF      <1>     movzx eax, byte [td3]   ;Hundreths
   689 00001F92 E8F90B0000          <1>     call printTime.printMinutesAlt
   690                              <1> 
   691 00001F97 488D15FAEAFFFF      <1>     lea rdx, newTime
   692 00001F9E B409                <1>     mov ah, 09h
   693 00001FA0 CD21                <1>     int 21h
   694                              <1> 
   695 00001FA2 488D15F4E1FFFF      <1>     lea rdx, inBuffer
   696 00001FA9 C6027E              <1>     mov byte [rdx], 126 ;Enter a string of up to 126 chars in length
   697 00001FAC B40A                <1>     mov ah, 0Ah
   698 00001FAE CD21                <1>     int 21h
   699 00001FB0 52                  <1>     push rdx
   700 00001FB1 488D1595E8FFFF      <1>     lea rdx, crlf
   701 00001FB8 B409                <1>     mov ah, 09h
   702 00001FBA CD21                <1>     int 21h
   703 00001FBC 5A                  <1>     pop rdx
   704 00001FBD 807A0100            <1>     cmp byte [rdx + 1], 0   ;If the user typed nothing...
   705                              <1>     rete    ;Exit!
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00001FC1 7501                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00001FC3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001FC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> ctty:
   708 00001FC5 F605F0E0FFFFFF      <1>     test byte [arg1Flg], -1
   709 00001FCC 0F8479F7FFFF        <1>     jz badArgError
   710 00001FD2 F605E6E0FFFFFF      <1>     test byte [arg2Flg], -1
   711 00001FD9 0F856CF7FFFF        <1>     jnz badArgError
   712 00001FDF 488D3537E2FFFF      <1>     lea rsi, cmdBuffer
   713 00001FE6 0FB605D0E0FFFF      <1>     movzx eax, byte [arg1Off]
   714 00001FED 4801C6              <1>     add rsi, rax  ;Goto the first char of the argument
   715 00001FF0 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
   716 00001FF4 750F                <1>     jne .noDrive
   717 00001FF6 0FB605C1E0FFFF      <1>     movzx eax, byte [arg1FCBret]
   718 00001FFD 3CFF                <1>     cmp al, -1
   719 00001FFF 0F843DF7FFFF        <1>     je badDriveError
   720                              <1> .noDrive:
   721                              <1>     ;Now we open the provided file
   722 00002005 E8240F0000          <1>     call copyArgumentToSearchSpec
   723 0000200A 488D154DE4FFFF      <1>     lea rdx, searchSpec
   724 00002011 B8023D0000          <1>     mov eax, 3D02h  ;Open in read/write mode
   725 00002016 CD21                <1>     int 21h
   726 00002018 0F8236F7FFFF        <1>     jc badFileError
   727 0000201E 0FB7D8              <1>     movzx ebx, ax   ;Save the handle in ebx
   728 00002021 B800440000          <1>     mov eax, 4400h  ;Get device word
   729 00002026 CD21                <1>     int 21h
   730 00002028 F6C280              <1>     test dl, 80h    ;Test if this device is a char device
   731 0000202B 7423                <1>     jz .badCharDev  ;If this bit is 0 => Disk file
   732                              <1>     ;Now we set this handle to be STDIO
   733 0000202D 80CA03              <1>     or dl, 3    ;Set STDIO bits
   734 00002030 30F6                <1>     xor dh, dh
   735 00002032 B801440000          <1>     mov eax, 4401h  ;Now we set the device word
   736 00002037 CD21                <1>     int 21h
   737                              <1>     ;Now we DUP2 for STDIN/OUT/ERR
   738 00002039 31C9                <1>     xor ecx, ecx    ;STDIN
   739 0000203B B446                <1>     mov ah, 46h
   740 0000203D CD21                <1>     int 21h
   741 0000203F FFC1                <1>     inc ecx         ;STDOUT
   742 00002041 B446                <1>     mov ah, 46h
   743 00002043 CD21                <1>     int 21h
   744 00002045 FFC1                <1>     inc ecx         ;STDERR
   745 00002047 B446                <1>     mov ah, 46h
   746 00002049 CD21                <1>     int 21h
   747 0000204B B43E                <1>     mov ah, 3Eh ;Now we close the original handle
   748 0000204D CD21                <1>     int 21h
   749                              <1>     return
    13                              <2> %%_ret:
    14 0000204F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   750                              <1> .badCharDev:
   751 00002050 488D1540EBFFFF      <1>     lea rdx, badDev
   752 00002057 B409                <1>     mov ah, 09h
   753 00002059 CD21                <1>     int 21h
   754 0000205B B43E                <1>     mov ah, 3Eh ;Close opened handle
   755 0000205D CD21                <1>     int 21h
   756                              <1>     return
    13                              <2> %%_ret:
    14 0000205F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   757                              <1> 
   758                              <1> cls:  
   759 00002060 B800440000          <1>     mov eax, 4400h  ;Get device info
   760 00002065 BB01000000          <1>     mov ebx, 1      ;for handle 1
   761 0000206A CD21                <1>     int 21h         ;in dx
   762 0000206C F7C280000000        <1>     test edx, devCharDev
   763 00002072 7446                <1>     jz .doAnsi  ;Make files register an ansi cls sequence
   764 00002074 F7C210000000        <1>     test edx, charDevFastOut
   765 0000207A 743E                <1>     jz .doAnsi
   766                              <1>     ;Test if Int 29h uses Int 30h
   767                              <1>     ;Tests if within the first 1024 bytes we have the sequence Int 30h (30CD)
   768                              <1>     ;Int 29h MUST be terminated with a IRETQ, within 1024 bytes
   769 0000207C B829350000          <1>     mov eax, 3529h  ;Get the vector for interrupt 29h
   770 00002081 CD21                <1>     int 21h
   771                              <1> .biosCheck:
   772 00002083 66813BCD30          <1>     cmp word [rbx], 30CDh
   773 00002088 740C                <1>     je .biosConfirmed
   774 0000208A 66813B48CF          <1>     cmp word [rbx], 0CF48h   ;CFh = IRET, 48h=REX.W
   775 0000208F 7429                <1>     je .doAnsi
   776 00002091 48FFC3              <1>     inc rbx
   777 00002094 EBED                <1>     jmp short .biosCheck
   778                              <1> .biosConfirmed:
   779                              <1>     ;Supports a SCP/BIOS compatible routine, use BIOS   
   780 00002096 B40B                <1>     mov ah, 0Bh  ; Set overscan to black (when Graphics becomes supported)
   781 00002098 31DB                <1>     xor ebx, ebx
   782 0000209A CD30                <1>     int 30h
   783 0000209C B40F                <1>     mov ah, 0Fh ;Get screen mode
   784 0000209E CD30                <1>     int 30h
   785 000020A0 0FB6D4              <1>     movzx edx, ah   ;Get number of columns in dl
   786 000020A3 FECA                <1>     dec dl
   787 000020A5 B619                <1>     mov dh, 25  ;Number of rows is standard
   788 000020A7 31C0                <1>     xor eax, eax
   789 000020A9 89C1                <1>     mov ecx, eax
   790 000020AB B707                <1>     mov bh, 7   ;Screen attributes
   791 000020AD B406                <1>     mov ah, 6   ;Scroll
   792 000020AF CD30                <1>     int 30h
   793 000020B1 31D2                <1>     xor edx, edx    ;Set cursor coordinates to top left of screen
   794 000020B3 B700                <1>     mov bh, 0   ;Page 0
   795 000020B5 B402                <1>     mov ah, 2
   796 000020B7 CD30                <1>     int 30h
   797                              <1>     return
    13                              <2> %%_ret:
    14 000020B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   798                              <1> .doAnsi:
   799                              <1> ;If an ANSI driver is not installed, this will simply insert blank lines
   800                              <1> ;4 chars in the ansi routine
   801                              <1> ;Will just put the ANSI escape sequence on the screen if it doesn't 
   802                              <1> ; understand ANSI codes
   803 000020BA 488D3552EDFFFF      <1>     lea rsi, ansiCls
   804 000020C1 B904000000          <1>     mov ecx, 4
   805 000020C6 B406                <1>     mov ah, 06h ;Raw char output
   806                              <1> .ansiLp:
   807 000020C8 AC                  <1>     lodsb   ;Get the char in 
   808 000020C9 88C2                <1>     mov dl, al
   809 000020CB CD21                <1>     int 21h
   810 000020CD FFC9                <1>     dec ecx
   811 000020CF 75F7                <1>     jnz .ansiLp
   812                              <1>     return
    13                              <2> %%_ret:
    14 000020D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   813                              <1> 
   814                              <1> break:
   815 000020D2 F605E3DFFFFFFF      <1>     test byte [arg1Flg], -1
   816 000020D9 752D                <1>     jnz .argumentProvided
   817                              <1>     ;Here we just get the status of break
   818 000020DB B800330000          <1>     mov eax, 3300h  ;Get break status in dl
   819 000020E0 CD21                <1>     int 21h
   820 000020E2 88D3                <1>     mov bl, dl
   821 000020E4 488D154EEBFFFF      <1>     lea rdx, breakIs
   822 000020EB B409                <1>     mov ah, 09h
   823 000020ED CD21                <1>     int 21h
   824 000020EF 488D153EEBFFFF      <1>     lea rdx, onMes
   825 000020F6 488D0D31EBFFFF      <1>     lea rcx, offMes
   826 000020FD 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   827 000020FF 480F44D1            <1>     cmovz rdx, rcx
   828 00002103 B409                <1>     mov ah, 09h
   829 00002105 CD21                <1>     int 21h
   830                              <1>     return
    13                              <2> %%_ret:
    14 00002107 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .argumentProvided:
   832 00002108 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   833 0000210C AD                  <1>     lodsd   ;Read the word
   834 0000210D 89C3                <1>     mov ebx, eax
   835 0000210F 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   836 00002114 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   837 00002117 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   838 0000211C 7416                <1>     je .maybeOn
   839 0000211E 663D4F46            <1>     cmp ax, "OF"
   840 00002122 7523                <1>     jne .badOnOff
   841 00002124 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   842 00002129 6681FB4620          <1>     cmp bx, "F "
   843 0000212E 7517                <1>     jne .badOnOff
   844                              <1>     ;Set off
   845 00002130 31D2                <1>     xor edx, edx    ;DL=0 => BREAK is off
   846 00002132 EB0B                <1>     jmp short .setBreak
   847                              <1> .maybeOn:
   848 00002134 663D4F4E            <1>     cmp ax, "ON"
   849 00002138 750D                <1>     jne .badOnOff
   850                              <1>     ;Set on
   851 0000213A BA01000000          <1>     mov edx, 1
   852                              <1> .setBreak:
   853 0000213F B801330000          <1>     mov eax, 3301h  ;Set break
   854 00002144 CD21                <1>     int 21h
   855                              <1>     return
    13                              <2> %%_ret:
    14 00002146 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   856                              <1> .badOnOff:
   857 00002147 488D15D5ECFFFF      <1>     lea rdx, badOnOff
   858 0000214E B409                <1>     mov ah, 09h
   859 00002150 CD21                <1>     int 21h
   860                              <1>     return
    13                              <2> %%_ret:
    14 00002152 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   861                              <1> 
   862                              <1> verify:
   863 00002153 F60562DFFFFFFF      <1>     test byte [arg1Flg], -1
   864 0000215A 752D                <1>     jnz .argumentProvided
   865                              <1>     ;Here we just get the status of break
   866 0000215C B800540000          <1>     mov eax, 5400h  ;Get verify status in al
   867 00002161 CD21                <1>     int 21h
   868 00002163 88C3                <1>     mov bl, al
   869 00002165 488D15D7EAFFFF      <1>     lea rdx, verifyIs
   870 0000216C B409                <1>     mov ah, 09h
   871 0000216E CD21                <1>     int 21h
   872 00002170 488D15BDEAFFFF      <1>     lea rdx, onMes
   873 00002177 488D0DB0EAFFFF      <1>     lea rcx, offMes
   874 0000217E 84DB                <1>     test bl, bl ;IF bl = 0, break is off
   875 00002180 480F44D1            <1>     cmovz rdx, rcx
   876 00002184 B409                <1>     mov ah, 09h
   877 00002186 CD21                <1>     int 21h
   878                              <1>     return
    13                              <2> %%_ret:
    14 00002188 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   879                              <1> .argumentProvided:
   880 00002189 498D705D            <1>     lea rsi, qword [r8 + fcb1 + fcb.filename]  ;Point to the first fcb name
   881 0000218D AD                  <1>     lodsd   ;Read the word
   882 0000218E 89C3                <1>     mov ebx, eax
   883 00002190 25DFDF0000          <1>     and eax, 0DFDFh  ;Convert first two chars to uppercase
   884 00002195 C1EB10              <1>     shr ebx, 10h     ;Get high word low
   885 00002198 6681FB2020          <1>     cmp bx, "  " ;Two spaces is a possible ON 
   886 0000219D 7416                <1>     je .maybeOn
   887 0000219F 663D4F46            <1>     cmp ax, "OF"
   888 000021A3 751F                <1>     jne .badOnOff
   889 000021A5 6681E3DFFF          <1>     and bx, 0FFDFh ;Convert only the third char to UC. Fourth char MUST BE SPACE
   890 000021AA 6681FB4620          <1>     cmp bx, "F "
   891 000021AF 7513                <1>     jne .badOnOff
   892                              <1>     ;Set off
   893 000021B1 31C0                <1>     xor eax, eax    ;AL=0 => VERIFY is off
   894 000021B3 EB0A                <1>     jmp short .setVerify
   895                              <1> .maybeOn:
   896 000021B5 663D4F4E            <1>     cmp ax, "ON"
   897 000021B9 7509                <1>     jne .badOnOff
   898                              <1>     ;Set on
   899 000021BB 31C0                <1>     xor eax, eax
   900 000021BD FFC0                <1>     inc eax ;AL=1 => VERIFY is on
   901                              <1> .setVerify:
   902 000021BF B42E                <1>     mov ah, 2Eh  ;Set Verify
   903 000021C1 CD21                <1>     int 21h
   904                              <1>     return
    13                              <2> %%_ret:
    14 000021C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   905                              <1> .badOnOff:
   906 000021C4 488D1558ECFFFF      <1>     lea rdx, badOnOff
   907 000021CB B409                <1>     mov ah, 09h
   908 000021CD CD21                <1>     int 21h
   909                              <1>     return
    13                              <2> %%_ret:
    14 000021CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   910                              <1> 
   911                              <1> rename:
   912 000021D0 F605E5DEFFFFFF      <1>     test byte [arg1Flg], -1
   913 000021D7 0F846EF5FFFF        <1>     jz badArgError
   914 000021DD F605DBDEFFFFFF      <1>     test byte [arg2Flg], -1
   915 000021E4 0F8461F5FFFF        <1>     jz badArgError
   916 000021EA 488D352CE0FFFF      <1>     lea rsi, cmdBuffer
   917 000021F1 0FB605C5DEFFFF      <1>     movzx eax, byte [arg1Off]
   918 000021F8 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   919                              <1>     ;rsi points to terminating char
   920 000021FB AC                  <1>     lodsb   ;Get first char in AL
   921 000021FC 48FFCE              <1>     dec rsi ;Go back to this char
   922 000021FF E81E0B0000          <1>     call isALEndOfCommand
   923 00002204 0F822FF5FFFF        <1>     jc badParamError
   924 0000220A 488D3DF5E3FFFF      <1>     lea rdi, sourcePath ;Store this in sourcePath
   925                              <1> .copyName1:
   926 00002211 AC                  <1>     lodsb
   927 00002212 E80B0B0000          <1>     call isALEndOfCommand
   928 00002217 0F841CF5FFFF        <1>     je badParamError
   929 0000221D E8DD0A0000          <1>     call isALterminator
   930 00002222 7403                <1>     jz .endOfName1
   931 00002224 AA                  <1>     stosb
   932 00002225 EBEA                <1>     jmp short .copyName1
   933                              <1> .endOfName1:
   934 00002227 31C0                <1>     xor eax, eax
   935 00002229 AA                  <1>     stosb   ;Store this 0 at rdi
   936 0000222A 488D35ECDFFFFF      <1>     lea rsi, cmdBuffer
   937 00002231 0FB60588DEFFFF      <1>     movzx eax, byte [arg2Off]
   938 00002238 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   939 0000223B 807E013A            <1>     cmp byte [rsi + 1], ":" ;If dest path char 2 is :, must be X:, not allowed
   940 0000223F 0F84F4F4FFFF        <1>     je badParamError
   941 00002245 AC                  <1>     lodsb   ;Get first char in AL
   942 00002246 48FFCE              <1>     dec rsi ;Go back to this char
   943 00002249 E8D40A0000          <1>     call isALEndOfCommand
   944 0000224E 0F82E5F4FFFF        <1>     jc badParamError
   945 00002254 488D3D2BE4FFFF      <1>     lea rdi, destPath
   946                              <1> .copyName2:
   947 0000225B AC                  <1>     lodsb
   948 0000225C E8C10A0000          <1>     call isALEndOfCommand
   949 00002261 740A                <1>     je .endOfName2
   950 00002263 E8970A0000          <1>     call isALterminator
   951 00002268 7403                <1>     jz .endOfName2
   952 0000226A AA                  <1>     stosb
   953 0000226B EBEE                <1>     jmp short .copyName2
   954                              <1> .endOfName2:
   955 0000226D 31C0                <1>     xor eax, eax
   956 0000226F AA                  <1>     stosb   ;Store this 0 at rdi
   957 00002270 488D158FE3FFFF      <1>     lea rdx, sourcePath
   958 00002277 488D3D08E4FFFF      <1>     lea rdi, destPath
   959 0000227E B800560000          <1>     mov eax, 5600h
   960 00002283 CD21                <1>     int 21h
   961                              <1>     retnc   ;Return if all oki!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26                              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29 00002285 7201                <3>  j%-1 short %%a
    30                              <3>  return
    13                              <4> %%_ret:
    14 00002287 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   962 00002288 3C0F                <1>     cmp al, errBadDrv
   963 0000228A 0F84B2F4FFFF        <1>     je badDriveError
   964 00002290 3C0B                <1>     cmp al, errBadFmt
   965 00002292 0F84CEF4FFFF        <1>     je badDirError
   966 00002298 E9C0F4FFFF          <1>     jmp badDupFnf
   967                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
   968                              <1> touch:
   969                              <1> ;Temporarily used to create files
   970 0000229D F60518DEFFFFFF      <1>     test byte [arg1Flg], -1
   971 000022A4 0F84A1F4FFFF        <1>     jz badArgError
   972 000022AA E87B0B0000          <1>     call buildCommandPath
   973 000022AF 488D15A8E1FFFF      <1>     lea rdx, searchSpec
   974 000022B6 B8003C0000          <1>     mov eax, 3C00h  ;Create file 
   975 000022BB 31C9                <1>     xor ecx, ecx
   976 000022BD CD21                <1>     int 21h
   977 000022BF 720B                <1>     jc .touchError
   978 000022C1 0FB7D8              <1>     movzx ebx, ax
   979 000022C4 B8003E0000          <1>     mov eax, 3e00h  ;Close file immediately
   980 000022C9 CD21                <1>     int 21h
   981                              <1>     return
    13                              <2> %%_ret:
    14 000022CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   982                              <1> .touchError:
   983 000022CC 488D15FEEAFFFF      <1>     lea rdx, touchErr
   984 000022D3 E995F4FFFF          <1>     jmp badCmn
   985                              <1> 
   986                              <1> join:
   987                              <1> ;Mock join command, to test join. Make an external command.
   988                              <1> ;Mounts the A drive on C:\JOINTEST,0
   989 000022D8 F605AF000000FF      <1>     test byte [.joinOn], -1
   990 000022DF 743D                <1>     jz .okJoin
   991                              <1> .joindisable:
   992 000022E1 B800520000          <1>     mov eax, 5200h  
   993 000022E6 CD21                <1>     int 21h
   994                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
   995 000022E8 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
   996 000022ED CD2A                <1>     int 2Ah
   997 000022EF 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
   998 000022F3 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
   999 000022F7 66816343FFDF        <1>     and word [rbx + cds.wFlags], ~cdsJoinDrive    ;Clear that we are join
  1000 000022FD C60341              <1>     mov byte [rbx], "A"     ;Set back to A
  1001 00002300 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1002 00002304 FE4D00              <1>     dec byte [rbp]          ;Decrement DOS counter
  1003 00002307 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1004 0000230C CD2A                <1>     int 2Ah
  1005 0000230E C6057900000000      <1>     mov byte [.joinOn], 0
  1006 00002315 488D1560000000      <1>     lea rdx, .joinDisableMsg
  1007 0000231C EB45                <1>     jmp short .joinExit
  1008                              <1> .okJoin:
  1009 0000231E C60569000000FF      <1>     mov byte [.joinOn], -1
  1010 00002325 B800520000          <1>     mov eax, 5200h  
  1011 0000232A CD21                <1>     int 21h
  1012 0000232C 488D6B61            <1>     lea rbp, qword [rbx + 61h]  ;Get ptr to join byte
  1013 00002330 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1014                              <1>     ;Set the join flag on A and make CDS path C:\JOINTEST,0
  1015 00002334 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1016 00002339 CD2A                <1>     int 2Ah
  1017 0000233B 66814B430020        <1>     or word [rbx + cds.wFlags], cdsJoinDrive    ;Set that we are join
  1018 00002341 4889DF              <1>     mov rdi, rbx
  1019 00002344 488D3544000000      <1>     lea rsi, .joinPath
  1020 0000234B B90C000000          <1>     mov ecx, .joinPathL
  1021 00002350 F3A4                <1>     rep movsb   ;Copy chars over
  1022 00002352 FE4500              <1>     inc byte [rbp]  ;Increment DOS counter
  1023 00002355 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1024 0000235A CD2A                <1>     int 2Ah
  1025 0000235C 488D1508000000      <1>     lea rdx, .joinEnableMsg
  1026                              <1> .joinExit:
  1027 00002363 B800090000          <1>     mov eax, 0900h
  1028 00002368 CD21                <1>     int 21h
  1029                              <1>     return
    13                              <2> %%_ret:
    14 0000236A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1030 0000236B 0D0A4A4F494E20656E- <1> .joinEnableMsg:  db CR,LF,"JOIN enabled",CR,LF,"$"
  1030 00002374 61626C65640D0A24    <1>
  1031 0000237C 0D0A4A4F494E206469- <1> .joinDisableMsg: db CR,LF,"JOIN disabled",CR,LF,"$"
  1031 00002385 7361626C65640D0A24  <1>
  1032 0000238E 00                  <1> .joinOn: db 0    ;Var to indicate we are on
  1033 0000238F 433A5C4A4F494E5445- <1> .joinPath:  db "C:\JOINTEST",0
  1033 00002398 535400              <1>
  1034                              <1> .joinPathL  equ $ - .joinPath 
  1035                              <1> 
  1036                              <1> subst:
  1037                              <1> ;Mock subst command, to test SUBST. Make an external command.
  1038                              <1> ;Substitutes C:\SUBTEST,0 for "D:\"
  1039 0000239B F605D3000000FF      <1>     test byte [.substOn], -1
  1040 000023A2 7443                <1>     jz .okSubst
  1041                              <1> .substdisable:
  1042 000023A4 B800520000          <1>     mov eax, 5200h  
  1043 000023A9 CD21                <1>     int 21h
  1044                              <1>     ;Set the SUBST and valid flags on D: and make CDS path C:\SUBSTEST,0
  1045 000023AB B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1046 000023B0 CD2A                <1>     int 2Ah
  1047 000023B2 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1048 000023B6 4881C31D010000      <1>     add rbx, 3*cds_size ;Go to the fourth CDS
  1049 000023BD 66816343FFAF        <1>     and word [rbx + cds.wFlags], ~(cdsSubstDrive | cdsValidDrive)    ;Clear that we are subst (and valid)
  1050 000023C3 C60344              <1>     mov byte [rbx], "D"     ;Set back to D
  1051 000023C6 C6430300            <1>     mov byte [rbx + 3], 0   ;Terminating Nul
  1052 000023CA 66C7435D0200        <1>     mov word [rbx + cds.wBackslashOffset], 2
  1053 000023D0 B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1054 000023D5 CD2A                <1>     int 2Ah
  1055 000023D7 C6059700000000      <1>     mov byte [.substOn], 0
  1056 000023DE 488D157D000000      <1>     lea rdx, .substDisableMsg
  1057 000023E5 EB61                <1>     jmp short .substExit
  1058                              <1> .okSubst:
  1059 000023E7 C60587000000FF      <1>     mov byte [.substOn], -1
  1060 000023EE B800520000          <1>     mov eax, 5200h  
  1061 000023F3 CD21                <1>     int 21h
  1062 000023F5 B801800000          <1>     mov eax, 8001h  ;Enter crit 1
  1063 000023FA CD2A                <1>     int 2Ah
  1064 000023FC 488B5B2A            <1>     mov rbx, qword [rbx + 2Ah]  ;Get CDS ptr
  1065 00002400 4881C3BE000000      <1>     add rbx, 2*cds_size ;Go to the third CDS to get the DPB ptr
  1066 00002407 488B4345            <1>     mov rax, qword [rbx + cds.qDPBPtr]
  1067 0000240B 4881C35F000000      <1>     add rbx, cds_size   ;Now go the fourth CDS
  1068 00002412 48894345            <1>     mov qword [rbx + cds.qDPBPtr], rax
  1069 00002416 C7434D59000000      <1>     mov dword [rbx + cds.dStartCluster], 59h ;Hardcoded, read from the FAT table
  1070                              <1>     ;Set the subst flag on D and make CDS path C:\SUBSTEST,0
  1071 0000241D 66814B430050        <1>     or word [rbx + cds.wFlags], cdsSubstDrive | cdsValidDrive   ;Set that we are join
  1072 00002423 66C7435D0B00        <1>     mov word [rbx + cds.wBackslashOffset], .substPathL - 1
  1073 00002429 4889DF              <1>     mov rdi, rbx
  1074 0000242C 488D3543000000      <1>     lea rsi, .substPath
  1075 00002433 B90C000000          <1>     mov ecx, .substPathL
  1076 00002438 F3A4                <1>     rep movsb   ;Copy chars over
  1077 0000243A B801810000          <1>     mov eax, 8101h  ;Exit crit 1
  1078 0000243F CD2A                <1>     int 2Ah
  1079 00002441 488D1508000000      <1>     lea rdx, .substEnableMsg
  1080                              <1> .substExit:
  1081 00002448 B800090000          <1>     mov eax, 0900h
  1082 0000244D CD21                <1>     int 21h
  1083                              <1>     return
    13                              <2> %%_ret:
    14 0000244F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1084 00002450 0D0A53554253542065- <1> .substEnableMsg:  db CR,LF,"SUBST enabled",CR,LF,"$"
  1084 00002459 6E61626C65640D0A24  <1>
  1085 00002462 0D0A53554253542064- <1> .substDisableMsg: db CR,LF,"SUBST disabled",CR,LF,"$"
  1085 0000246B 697361626C65640D0A- <1>
  1085 00002474 24                  <1>
  1086 00002475 00                  <1> .substOn: db 0    ;Var to indicate we are on
  1087 00002476 433A5C535542535445- <1> .substPath:  db "C:\SUBSTEST",0
  1087 0000247F 535400              <1>
  1088                              <1> .substPathL  equ $ - .substPath 
  1089                              <1> ;TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP
  1090                              <1> truename:
  1091 00002482 F60533DCFFFFFF      <1>     test byte [arg1Flg], -1
  1092 00002489 0F84BCF2FFFF        <1>     jz badArgError
  1093                              <1>     ;Explicitly call Truename if we remove truename from this function
  1094 0000248F 0FB60527DCFFFF      <1>     movzx eax, byte [arg1Off]
  1095 00002496 488D1580DDFFFF      <1>     lea rdx, cmdBuffer
  1096 0000249D 4801C2              <1>     add rdx, rax    ;Go to the start of the pathname
  1097 000024A0 B978000000          <1>     mov ecx, 120    ;Only search within 128 chars
  1098 000024A5 B00D                <1>     mov al, CR     ;Search for the first space char after the argument
  1099 000024A7 4889D7              <1>     mov rdi, rdx
  1100 000024AA F2AE                <1>     repne scasb
  1101 000024AC 48FFCF              <1>     dec rdi ;Go back a char
  1102 000024AF C60700              <1>     mov byte [rdi], 0   ;Make ASCIIZ
  1103 000024B2 4889FD              <1>     mov rbp, rdi    ;Have rbp point to the end of the string
  1104 000024B5 4889D6              <1>     mov rsi, rdx    ;Point rsi to start of path
  1105 000024B8 488D3D9FDFFFFF      <1>     lea rdi, searchSpec ;Store the path here
  1106 000024BF B800600000          <1>     mov eax, 6000h  ;TRUENAME
  1107 000024C4 CD21                <1>     int 21h
  1108 000024C6 730D                <1>     jnc .writePath
  1109 000024C8 3C02                <1>     cmp al, 2
  1110 000024CA 0F8484F2FFFF        <1>     je badFileError
  1111 000024D0 E964F2FFFF          <1>     jmp badParamError
  1112                              <1> .writePath:
  1113 000024D5 4889FA              <1>     mov rdx, rdi    ;Print from the destination buffer
  1114 000024D8 B9FFFFFFFF          <1>     mov ecx, -1
  1115 000024DD 30C0                <1>     xor al, al
  1116 000024DF F2AE                <1>     repne scasb     ;Get the new len
  1117 000024E1 F7D1                <1>     not ecx         ;Invert bits and subtract by 1 (to drop trailing 0)
  1118 000024E3 FFC9                <1>     dec ecx
  1119 000024E5 BB01000000          <1>     mov ebx, 01
  1120 000024EA B440                <1>     mov ah, 40h
  1121 000024EC CD21                <1>     int 21h
  1122 000024EE E803050000          <1>     call printCRLF
  1123                              <1>     return
    13                              <2> %%_ret:
    14 000024F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1124                              <1> 
  1125                              <1> volume:
  1126 000024F4 488D3524DDFFFF      <1>     lea rsi, cmdBuffer + 2  ;Get the command buffer
  1127 000024FB E829080000          <1>     call skipSpaces
  1128 00002500 4881C603000000      <1>     add rsi, 3  ;Go past the VOL command
  1129 00002507 E81D080000          <1>     call skipSpaces
  1130 0000250C AC                  <1>     lodsb   ;Get the first char, and point rsi to next char
  1131 0000250D E810080000          <1>     call isALEndOfCommand   ;If this char is end of command, use current drive
  1132 00002512 7507                <1>     jnz .checkDriveLetter
  1133 00002514 E89D070000          <1>     call getCurrentDrive    ;Get 0-based current drive number in al
  1134 00002519 EB35                <1>     jmp short .dirEP
  1135                              <1> .checkDriveLetter:
  1136 0000251B 803E3A              <1>     cmp byte [rsi], ":" ;If this is not a :, fail
  1137 0000251E 0F851EF2FFFF        <1>     jne badDriveError
  1138 00002524 4889F7              <1>     mov rdi, rsi    ;Save start of drive spec in rsi
  1139 00002527 48FFC6              <1>     inc rsi  ;Go past the X: spec
  1140 0000252A E8FA070000          <1>     call skipSpaces
  1141 0000252F AC                  <1>     lodsb   ;Get the non-space char in al
  1142 00002530 E8ED070000          <1>     call isALEndOfCommand   ;The next non-space char must be terminator
  1143 00002535 0F8507F2FFFF        <1>     jne badDriveError
  1144                              <1> ;This argument should've been parsed into FCB1 so use that result
  1145 0000253B 8A057DDBFFFF        <1>     mov al, byte [arg1FCBret]   ;Get the response from the parse
  1146 00002541 A8FF                <1>     test al, -1
  1147 00002543 0F85F9F1FFFF        <1>     jnz badDriveError ;Can't have either wildcards nor be invalid (obviously)
  1148 00002549 410FB6405C          <1>     movzx eax, byte [r8 + fcb1 + fcb.driveNum] ;Get the 1-based drive number
  1149 0000254E FFC8                <1>     dec eax ;Convert to 0 based number
  1150                              <1> .dirEP: ;Must be called with VALID 0 based drive number in al
  1151 00002550 0541000000          <1>     add eax, "A" ;Get ASCII representation of 0 based number
  1152 00002555 8805A0E0FFFF        <1>     mov byte [volPathBuf], al   ;Store ASCII letter here
  1153 0000255B E8EB090000          <1>     call setDTA
  1154 00002560 488D1594E0FFFF      <1>     lea rdx, volPathBuf
  1155 00002567 66B90800            <1>     mov cx, dirVolumeID
  1156 0000256B B44E                <1>     mov ah, 4Eh ;Find first
  1157 0000256D CD21                <1>     int 21h
  1158 0000256F 7221                <1>     jc .skipVolLbl
  1159 00002571 488D3578DBFFFF      <1>     lea rsi, qword [cmdFFBlock + ffBlock.asciizName]
  1160 00002578 488D3D6FE0FFFF      <1>     lea rdi, volLblSpc
  1161 0000257F B90B000000          <1>     mov ecx, 11 ;Get the 11 chars of the volume label
  1162                              <1> .dirLblCopy:
  1163 00002584 AC                  <1>     lodsb   ;Get the first char
  1164 00002585 3C00                <1>     cmp al, 0
  1165 00002587 7409                <1>     je .skipVolLbl  ;Jump with CF=NC
  1166 00002589 3C2E                <1>     cmp al, "."
  1167 0000258B 7401                <1>     je .dirLblSkipStore
  1168 0000258D AA                  <1>     stosb
  1169                              <1> .dirLblSkipStore:
  1170 0000258E FFC9                <1>     dec ecx
  1171 00002590 75F2                <1>     jnz .dirLblCopy
  1172                              <1>     ;Fallthru with CF=NC
  1173                              <1> .skipVolLbl:
  1174                              <1> ;Print volume label information now
  1175                              <1> ;Propagates the CF if CF was set    
  1176 00002592 9C                  <1>     pushfq
  1177 00002593 488D15B3E2FFFF      <1>     lea rdx, crlf
  1178 0000259A B409                <1>     mov ah, 09h
  1179 0000259C CD21                <1>     int 21h
  1180 0000259E 488D152DE5FFFF      <1>     lea rdx, volMes
  1181 000025A5 B409                <1>     mov ah, 09h
  1182 000025A7 CD21                <1>     int 21h
  1183 000025A9 8A154CE0FFFF        <1>     mov dl, byte [volPathBuf]   ;Print the drive letter out
  1184 000025AF B402                <1>     mov ah, 02h
  1185 000025B1 CD21                <1>     int 21h
  1186 000025B3 9D                  <1>     popfq
  1187 000025B4 7317                <1>     jnc .volIDOk
  1188 000025B6 488D152CE5FFFF      <1>     lea rdx, volNo
  1189 000025BD B409                <1>     mov ah, 09h
  1190 000025BF CD21                <1>     int 21h
  1191 000025C1 488D1585E2FFFF      <1>     lea rdx, crlf
  1192 000025C8 B409                <1>     mov ah, 09h
  1193 000025CA CD21                <1>     int 21h
  1194                              <1>     return
    13                              <2> %%_ret:
    14 000025CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1195                              <1> .volIDOk:
  1196 000025CD 488D1510E5FFFF      <1>     lea rdx, volOk
  1197 000025D4 B409                <1>     mov ah, 09h
  1198 000025D6 CD21                <1>     int 21h
  1199 000025D8 488D3D0FE0FFFF      <1>     lea rdi, volLblSpc
  1200 000025DF E8D7060000          <1>     call strlen
  1201 000025E4 FFC9                <1>     dec ecx
  1202 000025E6 C6040F24            <1>     mov byte [rdi + rcx], "$"   ;Replace the null with a string terminator
  1203 000025EA 488D15FDDFFFFF      <1>     lea rdx, volLblSpc
  1204 000025F1 B409                <1>     mov ah, 09h
  1205 000025F3 CD21                <1>     int 21h
  1206 000025F5 488D1551E2FFFF      <1>     lea rdx, crlf
  1207 000025FC B409                <1>     mov ah, 09h
  1208 000025FE CD21                <1>     int 21h
  1209                              <1>     return
    13                              <2> %%_ret:
    14 00002600 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1210                              <1> 
  1211                              <1> version:
  1212 00002601 488D1545E2FFFF      <1>     lea rdx, crlf
  1213 00002608 B409                <1>     mov ah, 09h
  1214 0000260A CD21                <1>     int 21h
  1215 0000260C 488D15ADE4FFFF      <1>     lea rdx, dosVer
  1216 00002613 B409                <1>     mov ah, 09h
  1217 00002615 CD21                <1>     int 21h
  1218 00002617 E80C000000          <1>     call .printVersionNumber
  1219 0000261C 488D152AE2FFFF      <1>     lea rdx, crlf
  1220 00002623 B409                <1>     mov ah, 09h
  1221 00002625 CD21                <1>     int 21h
  1222                              <1>     return
    13                              <2> %%_ret:
    14 00002627 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1223                              <1> .printVersionNumber:
  1224 00002628 B430                <1>     mov ah, 30h ;Get version numbers, al = Major, ah = Minor
  1225 0000262A CD21                <1>     int 21h
  1226 0000262C 50                  <1>     push rax
  1227 0000262D 0FB6C0              <1>     movzx eax, al
  1228 00002630 E814080000          <1>     call printDecimalWord
  1229 00002635 B22E                <1>     mov dl, "."
  1230 00002637 B402                <1>     mov ah, 02h
  1231 00002639 CD21                <1>     int 21h
  1232 0000263B 58                  <1>     pop rax
  1233 0000263C 0FB6C4              <1>     movzx eax, ah
  1234 0000263F E805080000          <1>     call printDecimalWord
  1235                              <1>     return
    13                              <2> %%_ret:
    14 00002644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1236                              <1> 
  1237                              <1> 
  1238                              <1> memory:
  1239 00002645 488B1DD3D9FFFF      <1>     mov rbx, qword [sysVars]
  1240 0000264C 4885DB              <1>     test rbx, rbx
  1241 0000264F 7510                <1>     jnz .sysvarsOK
  1242 00002651 488D151AE7FFFF      <1>     lea rdx, memBad0
  1243 00002658 B409                <1>     mov ah, 09h
  1244 0000265A CD21                <1>     int 21h
  1245 0000265C E98B080000          <1>     jmp freezePC.altEP
  1246                              <1> .sysvarsOK:
  1247                              <1>     ;Use rsi to store DOS memory, rdi to store Free memory and rbp for Hole
  1248                              <1>     ; and rcx to store Application memory
  1249 00002661 31F6                <1>     xor esi, esi
  1250 00002663 31FF                <1>     xor edi, edi
  1251 00002665 31ED                <1>     xor ebp, ebp
  1252 00002667 31C9                <1>     xor ecx, ecx
  1253 00002669 488D5BF8            <1>     lea rbx, qword [rbx - 8]    ;Go back a qword
  1254 0000266D 488B1B              <1>     mov rbx, qword [rbx]
  1255                              <1> .memLp:
  1256 00002670 803B4D              <1>     cmp byte [rbx], mcbMarkCtn
  1257 00002673 7409                <1>     je .validMCB
  1258 00002675 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1259 00002678 0F8501010000        <1>     jne .badMCBFound
  1260                              <1> .validMCB:
  1261 0000267E 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]
  1262 00002681 48C1E004            <1>     shl rax, 4  ;Convert to bytes
  1263 00002685 48817B0108000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerDOS
  1264 0000268D 7505                <1>     jne .notDOS
  1265 0000268F 4801C6              <1>     add rsi, rax    ;Add to DOS count
  1266 00002692 EB21                <1>     jmp short .gotoNext
  1267                              <1> .notDOS:
  1268 00002694 48817B0100000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerFree
  1269 0000269C 7505                <1>     jne .notFree
  1270 0000269E 4801C7              <1>     add rdi, rax    ;Add to Free space count
  1271 000026A1 EB12                <1>     jmp short .gotoNext
  1272                              <1> .notFree:
  1273 000026A3 48817B0107000000    <1>     cmp qword [rbx + mcb.owner], mcbOwnerHole
  1274 000026AB 7505                <1>     jne .notHole
  1275 000026AD 4801C5              <1>     add rbp, rax    ;Add to Hole count
  1276 000026B0 EB03                <1>     jmp short .gotoNext
  1277                              <1> .notHole:
  1278 000026B2 4801C1              <1>     add rcx, rax    ;Add to Application count
  1279                              <1> .gotoNext:
  1280 000026B5 803B5A              <1>     cmp byte [rbx], mcbMarkEnd
  1281 000026B8 7407                <1>     je .endOfWalk
  1282 000026BA 488D5C0310          <1>     lea rbx, qword [rbx + mcb.program + rax]
  1283 000026BF EBAF                <1>     jmp short .memLp
  1284                              <1> .endOfWalk:
  1285                              <1>     
  1286 000026C1 488D150BE6FFFF      <1>     lea rdx, memDOS
  1287 000026C8 B409                <1>     mov ah, 09h
  1288 000026CA CD21                <1>     int 21h
  1289 000026CC 4889F0              <1>     mov rax, rsi
  1290 000026CF E89D000000          <1>     call .mcbPrintAmount
  1291 000026D4 488D1590E6FFFF      <1>     lea rdx, memByte
  1292 000026DB B409                <1>     mov ah, 09h
  1293 000026DD CD21                <1>     int 21h
  1294                              <1> 
  1295 000026DF 4885ED              <1>     test rbp, rbp
  1296 000026E2 741E                <1>     jz .skipHole
  1297 000026E4 488D1534E6FFFF      <1>     lea rdx, memHole
  1298 000026EB B409                <1>     mov ah, 09h
  1299 000026ED CD21                <1>     int 21h
  1300 000026EF 4889E8              <1>     mov rax, rbp
  1301 000026F2 E87A000000          <1>     call .mcbPrintAmount
  1302 000026F7 488D156DE6FFFF      <1>     lea rdx, memByte
  1303 000026FE B409                <1>     mov ah, 09h
  1304 00002700 CD21                <1>     int 21h
  1305                              <1> .skipHole:
  1306                              <1> 
  1307 00002702 488D15F0E5FFFF      <1>     lea rdx, memApp
  1308 00002709 B409                <1>     mov ah, 09h
  1309 0000270B CD21                <1>     int 21h
  1310 0000270D 4889C8              <1>     mov rax, rcx
  1311 00002710 E85C000000          <1>     call .mcbPrintAmount
  1312 00002715 488D154FE6FFFF      <1>     lea rdx, memByte
  1313 0000271C B409                <1>     mov ah, 09h
  1314 0000271E CD21                <1>     int 21h
  1315                              <1> 
  1316 00002720 488D151EE6FFFF      <1>     lea rdx, memFree
  1317 00002727 B409                <1>     mov ah, 09h
  1318 00002729 CD21                <1>     int 21h
  1319 0000272B 4889F8              <1>     mov rax, rdi
  1320 0000272E E83E000000          <1>     call .mcbPrintAmount
  1321 00002733 488D1531E6FFFF      <1>     lea rdx, memByte
  1322 0000273A B409                <1>     mov ah, 09h
  1323 0000273C CD21                <1>     int 21h
  1324                              <1> 
  1325 0000273E 488D1568E5FFFF      <1>     lea rdx, memSys
  1326 00002745 B409                <1>     mov ah, 09h
  1327 00002747 CD21                <1>     int 21h
  1328 00002749 4889F0              <1>     mov rax, rsi
  1329 0000274C 4801F8              <1>     add rax, rdi
  1330 0000274F 4801C8              <1>     add rax, rcx
  1331 00002752 4801E8              <1>     add rax, rbp
  1332 00002755 E817000000          <1>     call .mcbPrintAmount
  1333 0000275A 488D150AE6FFFF      <1>     lea rdx, memByte
  1334 00002761 B409                <1>     mov ah, 09h
  1335 00002763 CD21                <1>     int 21h
  1336                              <1> 
  1337 00002765 488D15E1E0FFFF      <1>     lea rdx, crlf
  1338 0000276C B409                <1>     mov ah, 09h
  1339 0000276E CD21                <1>     int 21h
  1340                              <1>     return
    13                              <2> %%_ret:
    14 00002770 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1341                              <1> 
  1342                              <1> .mcbPrintAmount:
  1343 00002771 51                  <1>     push rcx
  1344 00002772 56                  <1>     push rsi
  1345 00002773 57                  <1>     push rdi
  1346 00002774 55                  <1>     push rbp
  1347 00002775 E8CF060000          <1>     call printDecimalWord
  1348 0000277A 5D                  <1>     pop rbp
  1349 0000277B 5F                  <1>     pop rdi
  1350 0000277C 5E                  <1>     pop rsi
  1351 0000277D 59                  <1>     pop rcx
  1352                              <1>     return
    13                              <2> %%_ret:
    14 0000277E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1353                              <1> .badMCBFound:
  1354 0000277F 488D152CE6FFFF      <1>     lea rdx, memBad2
  1355 00002786 B409                <1>     mov ah, 09h
  1356 00002788 CD21                <1>     int 21h
  1357 0000278A E95D070000          <1>     jmp freezePC.altEP
  1358                              <1> 
  1359                              <1> type:
  1360 0000278F F60526D9FFFFFF      <1>     test byte [arg1Flg], -1 ;If this not set, error
  1361 00002796 0F84AFEFFFFF        <1>     jz badArgError
  1362 0000279C F6051CD9FFFFFF      <1>     test byte [arg2Flg], -1
  1363 000027A3 0F85A2EFFFFF        <1>     jnz badArgError         ;If this set, error
  1364 000027A9 488D356DDAFFFF      <1>     lea rsi, cmdBuffer
  1365 000027B0 0FB60506D9FFFF      <1>     movzx eax, byte [arg1Off]
  1366 000027B7 4801C6              <1>     add rsi, rax    ;Point rsi to this argument
  1367 000027BA 803E0D              <1>     cmp byte [rsi], CR
  1368 000027BD 0F8488EFFFFF        <1>     je badArgError
  1369 000027C3 807E013A            <1>     cmp byte [rsi + 1], ":" ;If a drive is specified, check if valid
  1370 000027C7 750F                <1>     jne .noDrive
  1371 000027C9 0FB605EED8FFFF      <1>     movzx eax, byte [arg1FCBret]
  1372 000027D0 3CFF                <1>     cmp al, -1
  1373 000027D2 0F846AEFFFFF        <1>     je badDriveError
  1374                              <1> .noDrive:
  1375                              <1>     ;Now we open the provided file
  1376 000027D8 E851070000          <1>     call copyArgumentToSearchSpec
  1377 000027DD 488D157ADCFFFF      <1>     lea rdx, searchSpec
  1378 000027E4 B8003D0000          <1>     mov eax, 3D00h  ;Open in read only mode
  1379 000027E9 CD21                <1>     int 21h
  1380 000027EB 0F8263EFFFFF        <1>     jc badFileError
  1381 000027F1 498D9080000000      <1>     lea rdx, qword [r8 + psp.dta]
  1382 000027F8 0FB7D8              <1>     movzx ebx, ax    ;Save the file handle in ebx
  1383                              <1> .lp:
  1384 000027FB B980000000          <1>     mov ecx, 128    ;Read 128 bytes at a time
  1385 00002800 B43F                <1>     mov ah, 3Fh ;Read handle
  1386 00002802 CD21                <1>     int 21h
  1387 00002804 89C1                <1>     mov ecx, eax
  1388 00002806 67E317              <1>     jecxz .exit
  1389 00002809 53                  <1>     push rbx    ;Save the original in handle
  1390 0000280A BB01000000          <1>     mov ebx, 1  ;STDOUT
  1391 0000280F B440                <1>     mov ah, 40h
  1392 00002811 CD21                <1>     int 21h
  1393 00002813 5B                  <1>     pop rbx ;Get back the original read handle
  1394 00002814 720F                <1>     jc .exitBad
  1395 00002816 39C8                <1>     cmp eax, ecx
  1396 00002818 74E1                <1>     je .lp
  1397 0000281A FFC9                <1>     dec ecx ;One less for a ^Z
  1398 0000281C 39C8                <1>     cmp eax, ecx
  1399 0000281E 7505                <1>     jne .exitBad
  1400                              <1> .exit:
  1401 00002820 B43E                <1>     mov ah, 3Eh ;Close handle
  1402 00002822 CD21                <1>     int 21h
  1403                              <1>     return
    13                              <2> %%_ret:
    14 00002824 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1404                              <1> .exitBad:
  1405                              <1>     ;Print a disk error message... use a table to build the message but for
  1406                              <1>     ; now, just exit
  1407                              <1>     ;If it is a char device, don't print a error
  1408 00002825 EBF9                <1>     jmp short .exit
  1409                              <1> 
  1410                              <1> exit:
  1411 00002827 F605FFD7FFFFFF      <1>     test byte [permaSwitch], -1
  1412                              <1>     retnz   ;Return if the flag is set
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000282E 75(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1413 00002830 488B05E0D7FFFF      <1>     mov rax, qword [realParent] ;Get actual parent...
  1414 00002837 483DFFFFFFFF        <1>     cmp rax, -1
  1415                              <1>     rete    ;If the real parent is -1 => Original Command Interpreter.
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 0000283D 74(24)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1416 0000283F 49894022            <1>     mov qword [r8 + psp.parentPtr], rax ;and restore parent pointer
  1417                              <1> 
  1418 00002843 488B15E4D7FFFF      <1>     mov rdx, qword [parentInt22]
  1419 0000284A 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
  1420 0000284E B822250000          <1>     mov eax, 2522h
  1421 00002853 CD21                <1>     int 21h
  1422                              <1> 
  1423 00002855 B8004C0000          <1>     mov eax, 4C00h  ;Exit now okay
  1424 0000285A CD21                <1>     int 21h
  1425                              <1>     return  ;If the exit wasn't successful for some reason, return as normal
    13                              <2> %%_ret:
    14 0000285C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1426                              <1> 
  1427                              <1> launchChild:
  1428                              <1> ;We run EXEC on this and the child task will return via applicationReturn
  1429                              <1> ;Here we must search the CWD or all path componants before failing
  1430                              <1> ;Also this command must be a .COM, .EXE or .BAT so check that first
  1431 0000285D E8E9060000          <1>     call setDTA
  1432                              <1> 
  1433 00002862 8B0563D8FFFF        <1>     mov eax, dword [cmdFcb + fcb.fileext]   ;Get a dword, with dummy byte 3
  1434 00002868 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1435 0000286D 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1436 00002872 3D20202020          <1>     cmp eax, "    " ;Only if we have four spaces do we proceed here
  1437 00002877 741D                <1>     je .noExt
  1438 00002879 E8BEE9FFFF          <1>     call checkExtensionExec ;ZF=ZE => Executable
  1439 0000287E 0F855B010000        <1>     jnz .dfltErrExit
  1440                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1441 00002884 0F8255010000        <1>     jc .dfltErrExit ;Remove this when ready to launch batch files
  1442                              <1>     ;!!!!!!!!!!!TEMPORARY MEASURE TO AVOID LAUNCHING BAT FILES!!!!!!!!!!!
  1443                              <1>     ;So it is a com or exe that we are searching for for now
  1444 0000288A 488D3D0CDAFFFF      <1>     lea rdi, cmdPathSpec
  1445 00002891 4889FA              <1>     mov rdx, rdi
  1446 00002894 EB24                <1>     jmp short .search
  1447                              <1> .noExt:
  1448                              <1>     ;If the filename has no extension, append a .*
  1449                              <1>     ;Use bl as flags. bl[0] => COM found, bl[1] => EXE found, bl[2] => BAT found
  1450 00002896 31DB                <1>     xor ebx, ebx
  1451 00002898 488D3DFED9FFFF      <1>     lea rdi, cmdPathSpec
  1452 0000289F 4889FA              <1>     mov rdx, rdi
  1453 000028A2 31C0                <1>     xor eax, eax
  1454 000028A4 B9FFFFFFFF          <1>     mov ecx, -1
  1455 000028A9 F2AE                <1>     repne scasb
  1456 000028AB 48FFCF              <1>     dec rdi ;Point to the terminating null
  1457 000028AE 4889FD              <1>     mov rbp, rdi    ;Temporarily store the ptr to the . in rbp
  1458 000028B1 66B82E2A            <1>     mov ax, ".*"
  1459 000028B5 66AB                <1>     stosw
  1460 000028B7 30C0                <1>     xor al, al  ;Store terminating null
  1461 000028B9 AA                  <1>     stosb
  1462                              <1> .search:
  1463 000028BA B906000000          <1>     mov ecx, dirIncFiles
  1464 000028BF B44E                <1>     mov ah, 4Eh ;Find First File
  1465 000028C1 CD21                <1>     int 21h
  1466 000028C3 0F8216010000        <1>     jc .dfltErrExit
  1467 000028C9 E8C4000000          <1>     call .noExtCheckExt
  1468                              <1> .moreSearch:
  1469 000028CE B44F                <1>     mov ah, 4Fh
  1470 000028D0 CD21                <1>     int 21h
  1471 000028D2 7207                <1>     jc .noMoreFiles
  1472 000028D4 E8B9000000          <1>     call .noExtCheckExt
  1473 000028D9 EBF3                <1>     jmp short .moreSearch
  1474                              <1> .noMoreFiles:
  1475 000028DB 85DB                <1>     test ebx, ebx
  1476 000028DD 0F84FC000000        <1>     jz .dfltErrExit
  1477                              <1> ;So we have a valid executable
  1478 000028E3 4889EF              <1>     mov rdi, rbp    ;Get back ptr to the .*,0
  1479 000028E6 F7C301000000        <1>     test ebx, 1
  1480 000028EC 7407                <1>     jz .launchexebat
  1481 000028EE B82E434F4D          <1>     mov eax, ".COM"
  1482 000028F3 EB14                <1>     jmp short .buildTail
  1483                              <1> .launchexebat:
  1484 000028F5 F7C302000000        <1>     test ebx, 2
  1485 000028FB 7407                <1>     jz .launchbat
  1486 000028FD B82E455845          <1>     mov eax, ".EXE"
  1487 00002902 EB05                <1>     jmp short .buildTail
  1488                              <1> .launchbat:
  1489                              <1> ;Temporary For BAT
  1490 00002904 E9D6000000          <1>     jmp .dfltErrExit
  1491                              <1> .buildTail:
  1492 00002909 AB                  <1>     stosd
  1493 0000290A 31C0                <1>     xor eax, eax
  1494 0000290C AA                  <1>     stosb   ;Store the terminating null
  1495                              <1> ;Now we build the cmdtail properly
  1496 0000290D 488D3D09D8FFFF      <1>     lea rdi, cmdTail
  1497 00002914 4889FA              <1>     mov rdx, rdi    ;Use rdx as the anchor pointer for cmdline
  1498 00002917 B910000000          <1>     mov ecx, 128/8
  1499 0000291C F348AB              <1>     rep stosq   ;Clear the buffer with nulls
  1500 0000291F 488D7A01            <1>     lea rdi, qword [rdx + 1]    ;Mov rdi to start of cmdtail (not count)
  1501 00002923 498DB080000000      <1>     lea rsi, qword [r8 + cmdLineCnt]
  1502 0000292A AC                  <1>     lodsb   ;Get into al the number of chars and move rsi to the tail proper
  1503 0000292B 88C4                <1>     mov ah, al  ;Move the number into ah
  1504 0000292D 31C9                <1>     xor ecx, ecx    ;Use ch for number of chars read, cl for chars copied
  1505                              <1>     ;Skip the parsed command name
  1506                              <1> .passName:
  1507 0000292F AC                  <1>     lodsb   ;Get the char in al
  1508 00002930 FEC5                <1>     inc ch
  1509 00002932 80FD7F              <1>     cmp ch, 127     ;Exit condition (bad case)
  1510 00002935 741D                <1>     je short .finishBuildingTailNoCR
  1511 00002937 3C0D                <1>     cmp al, CR      ;If we get to the CR after name, no tail
  1512 00002939 7418                <1>     je short .finishBuildingTail
  1513 0000293B 3C20                <1>     cmp al, SPC
  1514 0000293D 75F0                <1>     jne short .passName
  1515                              <1>     ;Now we copy the name 
  1516 0000293F E8E5030000          <1>     call skipSpaces ;Start by skipping spaces (there are no embedded tabs)
  1517                              <1>     ;rsi points to the first non-space char
  1518                              <1> .copyTail:
  1519 00002944 AC                  <1>     lodsb
  1520 00002945 3C0D                <1>     cmp al, CR
  1521 00002947 740A                <1>     je short .finishBuildingTail
  1522 00002949 AA                  <1>     stosb
  1523 0000294A FEC1                <1>     inc cl
  1524 0000294C 80F97F              <1>     cmp cl, 127 ;Exit condition
  1525 0000294F 75F3                <1>     jne .copyTail
  1526 00002951 EB01                <1>     jmp short .finishBuildingTailNoCR
  1527                              <1> .finishBuildingTail:
  1528 00002953 AA                  <1>     stosb   ;Store the CR
  1529                              <1> .finishBuildingTailNoCR:
  1530 00002954 880A                <1>     mov byte [rdx], cl  ;Finish by placing count 
  1531                              <1> .launch:
  1532 00002956 488D1DA0D7FFFF      <1>     lea rbx, launchBlock
  1533 0000295D 498B403E            <1>     mov rax, qword [r8 + psp.envPtr]    ;Get the env pointer
  1534 00002961 488903              <1>     mov qword [rbx + execProg.pEnv], rax 
  1535 00002964 488D05B2D7FFFF      <1>     lea rax, cmdTail
  1536 0000296B 48894308            <1>     mov qword [rbx + execProg.pCmdLine], rax
  1537 0000296F 498D405C            <1>     lea rax, qword [r8 + fcb1]
  1538 00002973 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1539 00002977 498D406C            <1>     lea rax, qword [r8 + fcb2]
  1540 0000297B 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1541 0000297F 488D1517D9FFFF      <1>     lea rdx, cmdPathSpec
  1542 00002986 B8004B0000          <1>     mov eax, 4B00h  ;Load and execute!
  1543 0000298B CD21                <1>     int 21h
  1544 0000298D E94D000000          <1>     jmp .dfltErrExit    ;If something goes wrong, error out
  1545                              <1> .noExtCheckExt:
  1546                              <1>     ;mov eax, dword [cmdFFBlock + ffBlock.asciizName + filename.fExt]
  1547 00002992 488D3557D7FFFF      <1>     lea rsi, dword [cmdFFBlock + ffBlock.asciizName]
  1548 00002999 488D3D4CD9FFFF      <1>     lea rdi, fcbCmdSpec
  1549 000029A0 E8FB030000          <1>     call asciiFilenameToFCB
  1550 000029A5 8B0549D9FFFF        <1>     mov eax, dword [fcbCmdSpec + filename.fExt]
  1551 000029AB 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Clear byte three
  1552 000029B0 0D00000020          <1>     or eax,  20000000h  ;Add a space so it is like "COM "
  1553 000029B5 3D434F4D20          <1>     cmp eax, "COM "
  1554 000029BA 7507                <1>     jne .neceexe
  1555 000029BC 81CB01000000        <1>     or ebx, 1
  1556                              <1>     return
    13                              <2> %%_ret:
    14 000029C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1557                              <1> .neceexe:
  1558 000029C3 3D45584520          <1>     cmp eax, "EXE "
  1559 000029C8 7507                <1>     jne .necebat
  1560 000029CA 81CB02000000        <1>     or ebx, 2
  1561                              <1>     return
    13                              <2> %%_ret:
    14 000029D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1562                              <1> .necebat:
  1563 000029D1 3D42415420          <1>     cmp eax, "BAT "
  1564                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029D6 75(D0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1565 000029D8 81CB04000000        <1>     or ebx, 4
  1566                              <1>     return
    13                              <2> %%_ret:
    14 000029DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1567                              <1> 
  1568                              <1> .dfltErrExit:
  1569 000029DF 488D15C4DEFFFF      <1>     lea rdx, badCmd
  1570 000029E6 B409                <1>     mov ah, 09h
  1571 000029E8 CD21                <1>     int 21h
  1572                              <1>     return
    13                              <2> %%_ret:
    14 000029EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1573                              <1> 
  1574                              <1> .cmdTailTerminatorCheck:
  1575                              <1> ;Input: al = Char to check
  1576                              <1> ;ZF=NZ -> Not a terminator
  1577                              <1> ;ZF=ZE and CF=NC -> SPC detected
  1578                              <1> ;ZF=ZE and CF=CY -> CR detected
  1579 000029EB F8                  <1>     clc     ;Clear CF 
  1580 000029EC 3C20                <1>     cmp al, SPC
  1581                              <1>     rete    ;ZF Set
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029EE 74(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1582 000029F0 3C0D                <1>     cmp al, CR
  1583                              <1>     retne   ;CF and ZF clear
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 000029F2 75(EA)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
  1584 000029F4 F9                  <1>     stc     ;Set CF since ZF is already set
  1585                              <1>     return
    13                              <2> %%_ret:
    14 000029F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                                  %include "./Source/cmdUtils.asm"
     1                              <1> ;Misc functions and subroutines for command.com
     2                              <1> 
     3                              <1> printCRLF:
     4 000029F6 488D1550DEFFFF      <1>     lea rdx, crlf
     5 000029FD BB01000000          <1>     mov ebx, 1  ;Print on STDOUT
     6 00002A02 B440                <1>     mov ah, 40h ;Print a new line
     7 00002A04 B902000000          <1>     mov ecx, 2  ;Two chars to write
     8 00002A09 CD21                <1>     int 21h
     9                              <1>     return
    13                              <2> %%_ret:
    14 00002A0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    10                              <1> printDate:
    11                              <1> ;Input: eax = Packed Date
    12                              <1> ;       eax[0:4] = Day of the month, a value in [0,...,31]
    13                              <1> ;       eax[5:8] = Month of the year, a value in [0,...,12]
    14                              <1> ;       eax[9:15] = Number of years since 1980, a value in [0,...,127]
    15                              <1> ;       ebx = 0 => Print two digit year
    16                              <1> ;       ebx = 1 => Print four digit year
    17 00002A0C 53                  <1>     push rbx
    18 00002A0D 89C1                <1>     mov ecx, eax    ;Save in ecx temporarily
    19 00002A0F 803D20D6FFFF01      <1>     cmp byte [ctryData + countryStruc.dtfmt], 1
    20 00002A16 7240                <1>     jb .usDate
    21 00002A18 777C                <1>     ja .jpnDate
    22                              <1> ;European: DD/MM/YY
    23 00002A1A 251F000000          <1>     and eax, 1Fh    ;Save day bits
    24 00002A1F E8B0000000          <1>     call .printFirst
    25 00002A24 8A1517D6FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    26 00002A2A B402                <1>     mov ah, 02h
    27 00002A2C CD21                <1>     int 21h
    28                              <1> 
    29 00002A2E 89C8                <1>     mov eax, ecx
    30 00002A30 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    31 00002A35 C1E805              <1>     shr eax, 5
    32 00002A38 E8B3000000          <1>     call .printSecond
    33                              <1> 
    34 00002A3D 8A15FED5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    35 00002A43 B402                <1>     mov ah, 02h
    36 00002A45 CD21                <1>     int 21h
    37                              <1> 
    38 00002A47 89C8                <1>     mov eax, ecx
    39 00002A49 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    40 00002A4E C1E809              <1>     shr eax, 9
    41 00002A51 5B                  <1>     pop rbx ;Get the year signature back
    42 00002A52 E8A9000000          <1>     call .printYear
    43                              <1>     return
    13                              <2> %%_ret:
    14 00002A57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                              <1> .usDate:
    45                              <1> ;US: MM/DD/YY
    46 00002A58 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    47 00002A5D C1E805              <1>     shr eax, 5
    48 00002A60 E86F000000          <1>     call .printFirst
    49                              <1> 
    50 00002A65 8A15D6D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    51 00002A6B B402                <1>     mov ah, 02h
    52 00002A6D CD21                <1>     int 21h
    53                              <1> 
    54 00002A6F 89C8                <1>     mov eax, ecx
    55 00002A71 251F000000          <1>     and eax, 1Fh    ;Save day bits
    56 00002A76 E875000000          <1>     call .printSecond
    57                              <1> 
    58 00002A7B 8A15C0D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    59 00002A81 B402                <1>     mov ah, 02h
    60 00002A83 CD21                <1>     int 21h
    61                              <1> 
    62 00002A85 89C8                <1>     mov eax, ecx
    63 00002A87 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    64 00002A8C C1E809              <1>     shr eax, 9
    65 00002A8F 5B                  <1>     pop rbx ;Get the year signature back
    66 00002A90 E86B000000          <1>     call .printYear
    67                              <1>     return
    13                              <2> %%_ret:
    14 00002A95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    68                              <1> .jpnDate:
    69                              <1> ;Japan: YY/MM/DD
    70 00002A96 2500FE0000          <1>     and eax, 0FE00h ;Save bits 9-15
    71 00002A9B C1E809              <1>     shr eax, 9
    72 00002A9E 5B                  <1>     pop rbx ;Get the year signature back
    73 00002A9F E85C000000          <1>     call .printYear
    74                              <1> 
    75 00002AA4 8A1597D5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    76 00002AAA B402                <1>     mov ah, 02h
    77 00002AAC CD21                <1>     int 21h
    78                              <1> 
    79 00002AAE 89C8                <1>     mov eax, ecx
    80 00002AB0 25E0010000          <1>     and eax, 1E0h   ;Save bits 5-8
    81 00002AB5 C1E805              <1>     shr eax, 5
    82 00002AB8 E833000000          <1>     call .printSecond
    83                              <1> 
    84 00002ABD 8A157ED5FFFF        <1>     mov dl, byte [ctryData + countryStruc.dateSep]
    85 00002AC3 B402                <1>     mov ah, 02h
    86 00002AC5 CD21                <1>     int 21h
    87                              <1> 
    88 00002AC7 89C8                <1>     mov eax, ecx
    89 00002AC9 251F000000          <1>     and eax, 1Fh    ;Save day bits
    90 00002ACE E81D000000          <1>     call .printSecond
    91                              <1>     return
    13                              <2> %%_ret:
    14 00002AD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> ;Each of these require eax setup correctly
    94                              <1> .printFirst:
    95 00002AD4 51                  <1>     push rcx
    96 00002AD5 E8E0030000          <1>     call getDecimalWord
    97 00002ADA 84ED                <1>     test ch, ch ;Do we have an upper digit?
    98 00002ADC 7504                <1>     jnz .skipSpace
    99 00002ADE 88CD                <1>     mov ch, cl
   100 00002AE0 B120                <1>     mov cl, " "
   101                              <1> .skipSpace:
   102 00002AE2 88CA                <1>     mov dl, cl
   103 00002AE4 B402                <1>     mov ah, 02h
   104 00002AE6 CD21                <1>     int 21h
   105 00002AE8 88EA                <1>     mov dl, ch
   106 00002AEA B402                <1>     mov ah, 02h
   107 00002AEC CD21                <1>     int 21h
   108 00002AEE 59                  <1>     pop rcx
   109                              <1>     return
    13                              <2> %%_ret:
    14 00002AEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   110                              <1> .printSecond:
   111 00002AF0 51                  <1>     push rcx
   112 00002AF1 E8C4030000          <1>     call getDecimalWord
   113 00002AF6 84ED                <1>     test ch, ch ;Do we have an upper digit?
   114 00002AF8 75E8                <1>     jnz .skipSpace
   115 00002AFA 88CD                <1>     mov ch, cl
   116 00002AFC B130                <1>     mov cl, "0"
   117 00002AFE EBE2                <1>     jmp short .skipSpace
   118                              <1> .printYear:
   119 00002B00 05BC070000          <1>     add eax, 1980
   120 00002B05 51                  <1>     push rcx
   121 00002B06 53                  <1>     push rbx
   122 00002B07 E8AE030000          <1>     call getDecimalWord ;Get unpacked in rcx
   123 00002B0C 5B                  <1>     pop rbx
   124 00002B0D 84DB                <1>     test bl, bl
   125 00002B0F 740C                <1>     jz .twoDigitYear
   126 00002B11 88CA                <1>     mov dl, cl  ;Print the first digit
   127 00002B13 B402                <1>     mov ah, 02h
   128 00002B15 CD21                <1>     int 21h
   129 00002B17 88EA                <1>     mov dl, ch  ;Print the second digit
   130 00002B19 B402                <1>     mov ah, 02h
   131 00002B1B CD21                <1>     int 21h
   132                              <1> .twoDigitYear:
   133 00002B1D C1E910              <1>     shr ecx, 10h    ;Get high word low
   134 00002B20 88CA                <1>     mov dl, cl  ;Print the upper digit
   135 00002B22 B402                <1>     mov ah, 02h
   136 00002B24 CD21                <1>     int 21h
   137 00002B26 88EA                <1>     mov dl, ch  ;Print the lower digit
   138 00002B28 B402                <1>     mov ah, 02h
   139 00002B2A CD21                <1>     int 21h
   140 00002B2C 59                  <1>     pop rcx
   141                              <1>     return
    13                              <2> %%_ret:
    14 00002B2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> 
   144                              <1> printTime:
   145                              <1> ;Input: eax = Packed Time
   146                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   147                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   148 00002B2E 89C1                <1>     mov ecx, eax
   149 00002B30 2500F80000          <1>     and eax, 0F800h ;Save bits 11-15
   150 00002B35 C1E80B              <1>     shr eax, 11
   151 00002B38 803D08D5FFFF01      <1>     cmp byte [ctryData + countryStruc.timefmt], 1  
   152 00002B3F 750B                <1>     jne .ampm
   153 00002B41 E85A000000          <1>     call .printHours
   154 00002B46 E831000000          <1>     call .printMinutes
   155                              <1>     return
    13                              <2> %%_ret:
    14 00002B4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   156                              <1> .ampm:
   157 00002B4C 3D0C000000          <1>     cmp eax, 12
   158 00002B51 7713                <1>     ja .pm
   159 00002B53 7416                <1>     je .pm2
   160 00002B55 E846000000          <1>     call .printHours
   161 00002B5A E81D000000          <1>     call .printMinutes
   162 00002B5F B261                <1>     mov dl, "a"
   163 00002B61 B402                <1>     mov ah, 02h
   164 00002B63 CD21                <1>     int 21h
   165                              <1>     return
    13                              <2> %%_ret:
    14 00002B65 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   166                              <1> .pm:
   167 00002B66 2D0C000000          <1>     sub eax, 12
   168                              <1> .pm2:
   169 00002B6B E830000000          <1>     call .printHours
   170 00002B70 E807000000          <1>     call .printMinutes
   171 00002B75 B270                <1>     mov dl, "p"
   172 00002B77 B402                <1>     mov ah, 02h
   173 00002B79 CD21                <1>     int 21h
   174                              <1>     return
    13                              <2> %%_ret:
    14 00002B7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175                              <1> .printMinutes:
   176 00002B7C 8A15C1D4FFFF        <1>     mov dl, byte [ctryData + countryStruc.timeSep]
   177 00002B82 B402                <1>     mov ah, 02h
   178 00002B84 CD21                <1>     int 21h
   179                              <1> 
   180 00002B86 89C8                <1>     mov eax, ecx
   181 00002B88 25E0070000          <1>     and eax, 7E0h   ;Save bits 5-10
   182 00002B8D C1E805              <1>     shr eax, 5
   183                              <1> .printMinutesAlt:
   184 00002B90 51                  <1>     push rcx
   185 00002B91 E824030000          <1>     call getDecimalWord
   186 00002B96 84ED                <1>     test ch, ch ;Do we have an upper digit?
   187 00002B98 7514                <1>     jnz .skipSpace
   188 00002B9A 88CD                <1>     mov ch, cl
   189 00002B9C B130                <1>     mov cl, "0"
   190 00002B9E EB0E                <1>     jmp short .skipSpace
   191                              <1> .printHours:
   192 00002BA0 51                  <1>     push rcx
   193 00002BA1 E814030000          <1>     call getDecimalWord
   194 00002BA6 84ED                <1>     test ch, ch ;Do we have an upper digit?
   195 00002BA8 7504                <1>     jnz .skipSpace
   196 00002BAA 88CD                <1>     mov ch, cl
   197 00002BAC B120                <1>     mov cl, " "
   198                              <1> .skipSpace:
   199 00002BAE 88CA                <1>     mov dl, cl
   200 00002BB0 B402                <1>     mov ah, 02h
   201 00002BB2 CD21                <1>     int 21h
   202 00002BB4 88EA                <1>     mov dl, ch
   203 00002BB6 B402                <1>     mov ah, 02h
   204 00002BB8 CD21                <1>     int 21h
   205 00002BBA 59                  <1>     pop rcx
   206                              <1>     return
    13                              <2> %%_ret:
    14 00002BBB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> 
   209                              <1> putVersionInPrompt:
   210 00002BBC 488D15FDDEFFFF      <1>     lea rdx, dosVer
   211 00002BC3 B409                <1>     mov ah, 09h ;Print String
   212 00002BC5 CD21                <1>     int 21h
   213 00002BC7 B430                <1>     mov ah, 30h ;Get ver in al=Maj ver, ah = Min ver
   214 00002BC9 CD21                <1>     int 21h
   215 00002BCB 50                  <1>     push rax    ;Save minor version
   216 00002BCC E89C000000          <1>     call hexToBCD   ;Get in al a bcd representation for major version
   217 00002BD1 E8B4000000          <1>     call printPackedBCD ;Print al
   218 00002BD6 B22E                <1>     mov dl, "."
   219 00002BD8 B402                <1>     mov ah, 02h
   220 00002BDA CD21                <1>     int 21h
   221 00002BDC 58                  <1>     pop rax
   222 00002BDD 88E0                <1>     mov al, ah  ;Get the minor version low
   223 00002BDF E889000000          <1>     call hexToBCD
   224 00002BE4 E8A1000000          <1>     call printPackedBCD
   225                              <1>     return
    13                              <2> %%_ret:
    14 00002BE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   226                              <1> putEscInPrompt:
   227 00002BEA B21B                <1>     mov dl, ESC
   228 00002BEC EB1C                <1>     jmp short outChar
   229                              <1> 
   230                              <1> putMoneyInPrompt:
   231 00002BEE B224                <1>     mov dl, "$"
   232 00002BF0 EB18                <1>     jmp short outChar
   233                              <1> 
   234                              <1> putEquInPrompt:
   235 00002BF2 B23D                <1>     mov dl, "="
   236 00002BF4 EB14                <1>     jmp short outChar
   237                              <1> 
   238                              <1> putPipeInPrompt:
   239 00002BF6 B27C                <1>     mov dl, "|"
   240 00002BF8 EB10                <1>     jmp short outChar
   241                              <1> 
   242                              <1> putGTinPrompt:
   243 00002BFA B23E                <1>     mov dl, ">"
   244 00002BFC EB0C                <1>     jmp short outChar
   245                              <1> 
   246                              <1> putLTinPrompt:
   247 00002BFE B23C                <1>     mov dl, "<"
   248 00002C00 EB08                <1>     jmp short outChar
   249                              <1> 
   250                              <1> putDriveInPrompt:
   251 00002C02 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   252 00002C04 CD21                <1>     int 21h
   253 00002C06 0441                <1>     add al, "A" ;Convert to letter
   254 00002C08 88C2                <1>     mov dl, al
   255                              <1> outChar:
   256 00002C0A B402                <1>     mov ah, 02h ;Echo to STDOUT
   257 00002C0C CD21                <1>     int 21h
   258                              <1>     return
    13                              <2> %%_ret:
    14 00002C0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   259                              <1> putCWDInPrompt:
   260 00002C0F 488D3D46D4FFFF      <1>     lea rdi, currDirStr ;Update the current directory string
   261 00002C16 B419                <1>     mov ah, 19h ;Get 0-based current drive number in al
   262 00002C18 CD21                <1>     int 21h
   263 00002C1A 88C2                <1>     mov dl, al  ;Get drive letter in dl for path
   264 00002C1C FEC2                <1>     inc dl
   265 00002C1E 0441                <1>     add al, "A" ;Convert to letter
   266 00002C20 B43A                <1>     mov ah, ":"
   267 00002C22 66AB                <1>     stosw   ;Store X:, rdi+=2
   268 00002C24 8A0501D4FFFF        <1>     mov al, byte [pathSep]
   269 00002C2A AA                  <1>     stosb   ;Store pathSep, inc rdi
   270 00002C2B B447                <1>     mov ah, 47h ;Get Current Working Directory
   271 00002C2D 4889FE              <1>     mov rsi, rdi    ;rsi points to buffer to write to
   272 00002C30 CD21                <1>     int 21h
   273 00002C32 E884000000          <1>     call strlen
   274 00002C37 81C102000000        <1>     add ecx, 2 ;Add two for the X:
   275                              <1>     ;We repurpose the fact that strlen counts the NULL to account for "\"
   276 00002C3D B440                <1>     mov ah, 40h ;Write to handle
   277 00002C3F BB01000000          <1>     mov ebx, 1  ;STDOUT
   278 00002C44 488D1511D4FFFF      <1>     lea rdx, currDirStr
   279 00002C4B CD21                <1>     int 21h
   280                              <1>     return
    13                              <2> %%_ret:
    14 00002C4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> BCDtoHex:
   283                              <1> ;Converts a BCD value to a Hex byte
   284                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   285 00002C4E 51                  <1>     push rcx
   286 00002C4F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   287 00002C52 89C1                <1>     mov ecx, eax    ;Save al in ecx
   288 00002C54 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   289 00002C59 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   290 00002C5F C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   291                              <1> .bth:
   292 00002C62 050A000000          <1>     add eax, 10
   293 00002C67 FFC9                <1>     dec ecx
   294 00002C69 75F7                <1>     jnz .bth
   295 00002C6B 59                  <1>     pop rcx
   296 00002C6C C3                  <1>     ret
   297                              <1> 
   298                              <1> hexToBCD:
   299                              <1> ;Converts a Hex byte into two BCD digits
   300                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   301 00002C6D 51                  <1>     push rcx
   302 00002C6E 0FB6C0              <1>     movzx eax, al   ;Zero extend
   303 00002C71 31C9                <1>     xor ecx, ecx
   304                              <1> .htb0:
   305 00002C73 3D0A000000          <1>     cmp eax, 10
   306 00002C78 7209                <1>     jb .htb1
   307 00002C7A 2D0A000000          <1>     sub eax, 10
   308 00002C7F FFC1                <1>     inc ecx
   309 00002C81 EBF0                <1>     jmp short .htb0
   310                              <1> .htb1:
   311 00002C83 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   312 00002C86 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   313 00002C88 59                  <1>     pop rcx
   314 00002C89 C3                  <1>     ret
   315                              <1> 
   316                              <1> printPackedBCD:
   317                              <1> ;Gets a packed BCD digit in al and prints al[7:4] if non zero,
   318                              <1> ; then prints al[3:0]. Prints a space if the upper nybble is zero
   319                              <1> ;Preserves all registers
   320 00002C8A 50                  <1>     push rax
   321 00002C8B 52                  <1>     push rdx
   322 00002C8C 88C4                <1>     mov ah, al
   323 00002C8E 240F                <1>     and al, 0Fh     ;Isolate lower nybble
   324 00002C90 80E4F0              <1>     and ah, 0F0h    ;Isolate upper nybble
   325 00002C93 7508                <1>     jnz .upperNybble
   326 00002C95 B220                <1>     mov dl, " "
   327 00002C97 B402                <1>     mov ah, 02h
   328 00002C99 CD21                <1>     int 21h
   329 00002C9B EB0E                <1>     jmp short .lowerNybble
   330                              <1> .upperNybble:
   331 00002C9D 50                  <1>     push rax
   332 00002C9E C0EC04              <1>     shr ah, 4
   333 00002CA1 80C430              <1>     add ah, "0"  ;Convert to an ASCII digit
   334 00002CA4 88E2                <1>     mov dl, ah
   335 00002CA6 B402                <1>     mov ah, 02h ;Print DL
   336 00002CA8 CD21                <1>     int 21h
   337 00002CAA 58                  <1>     pop rax
   338                              <1> .lowerNybble:
   339 00002CAB 0430                <1>     add al, "0"
   340 00002CAD 88C2                <1>     mov dl, al
   341 00002CAF B402                <1>     mov ah, 02h ;Print DL
   342 00002CB1 CD21                <1>     int 21h
   343 00002CB3 5A                  <1>     pop rdx
   344 00002CB4 58                  <1>     pop rax
   345                              <1>     return
    13                              <2> %%_ret:
    14 00002CB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   346                              <1> 
   347                              <1> getCurrentDrive:
   348                              <1> ;Returns the 0 based current drive in al
   349 00002CB6 B419                <1>     mov ah, 19h
   350 00002CB8 CD21                <1>     int 21h
   351                              <1>     return
    13                              <2> %%_ret:
    14 00002CBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   352                              <1> 
   353                              <1> strlen:
   354                              <1> ;Gets the length of a ASCIIZ string
   355                              <1> ;Input: rdi = Source buffer
   356                              <1> ;Output: ecx = Length of string, INCLUDING TERMINATING NULL
   357 00002CBB 50                  <1>     push rax
   358 00002CBC 57                  <1>     push rdi
   359 00002CBD 30C0                <1>     xor al, al
   360 00002CBF 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   361 00002CC1 FFC9                <1>     dec ecx ;rcx = -1
   362 00002CC3 F2AE                <1>     repne scasb
   363 00002CC5 F7D1                <1>     not ecx
   364 00002CC7 5F                  <1>     pop rdi
   365 00002CC8 58                  <1>     pop rax
   366                              <1>     return
    13                              <2> %%_ret:
    14 00002CC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   367                              <1> 
   368                              <1> findTerminatorOrEOC:
   369                              <1> ;Advances rsi to the next string terminator char or the next End of command
   370                              <1> ; char
   371                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   372                              <1> ;If a end of command char found, also sets CF
   373 00002CCA AC                  <1>     lodsb
   374 00002CCB 3C0D                <1>     cmp al, CR
   375 00002CCD 7419                <1>     je .endOfInput
   376 00002CCF E82B000000          <1>     call isALterminator
   377 00002CD4 7419                <1>     jz .exit
   378 00002CD6 3A054FD3FFFF        <1>     cmp al, byte [pathSep]
   379 00002CDC 7411                <1>     je .exit
   380 00002CDE 3A0548D3FFFF        <1>     cmp al, byte [switchChar]
   381 00002CE4 7409                <1>     je .exit
   382 00002CE6 EBE2                <1>     jmp short findTerminatorOrEOC
   383                              <1> .endOfInput:
   384 00002CE8 E802000000          <1>     call .exit
   385 00002CED F9                  <1>     stc 
   386                              <1>     return
    13                              <2> %%_ret:
    14 00002CEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .exit:
   388 00002CEF 48FFCE              <1>     dec rsi ;Point to the terminating char
   389                              <1>     return
    13                              <2> %%_ret:
    14 00002CF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> 
   391                              <1> findTerminator:
   392                              <1> ;Advances rsi to the next string terminator char
   393                              <1> ;Returns with al = terminator and rsi pointing to the char in the string
   394 00002CF3 AC                  <1>     lodsb
   395 00002CF4 E806000000          <1>     call isALterminator
   396 00002CF9 75F8                <1>     jnz findTerminator
   397 00002CFB 48FFCE              <1>     dec rsi
   398                              <1>     return
    13                              <2> %%_ret:
    14 00002CFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> isALterminator:
   400                              <1> ;Returns: ZF=NZ if al is not a terminator (Not including CR)
   401                              <1> ;         ZF=ZY if al is a terminator
   402 00002CFF 3C20                <1>     cmp al, " "
   403                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D01 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   404 00002D03 3C3B                <1>     cmp al, ";"
   405                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D05 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   406 00002D07 3C3D                <1>     cmp al, "="
   407                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D09 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   408 00002D0B 3C2C                <1>     cmp al, ","
   409                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D0D 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   410 00002D0F 3C09                <1>     cmp al, TAB
   411                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D11 74(FE)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   412 00002D13 3C0A                <1>     cmp al, LF
   413                              <1>     return
    13                              <2> %%_ret:
    14 00002D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> findEndOfCommand:
   416                              <1> ;Moves rsi to the | or CR that terminates this command
   417 00002D16 AC                  <1>     lodsb
   418 00002D17 E806000000          <1>     call isALEndOfCommand
   419 00002D1C 75F8                <1>     jnz findEndOfCommand
   420 00002D1E 48FFCE              <1>     dec rsi
   421                              <1>     return
    13                              <2> %%_ret:
    14 00002D21 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> isALEndOfCommand:
   423 00002D22 3C7C                <1>     cmp al, "|"
   424                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D24 74(21)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   425 00002D26 3C0D                <1>     cmp al, CR
   426                              <1>     return
    13                              <2> %%_ret:
    14 00002D28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> skipSpaces:
   429                              <1> ;Also skips tabs
   430                              <1> ;Input: rsi must point to the start of the data string
   431                              <1> ;Output: rsi points to the first non-space char
   432 00002D29 803E20              <1>     cmp byte [rsi], " "
   433 00002D2C 7405                <1>     je .skip    ;If equal to a space, skip it
   434 00002D2E 803E09              <1>     cmp byte [rsi], TAB
   435                              <1>     retne   ;If not equal to a tab or space, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002D31 75(28)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   436                              <1> .skip:
   437 00002D33 48FFC6              <1>     inc rsi
   438 00002D36 EBF1                <1>     jmp short skipSpaces
   439                              <1> 
   440                              <1> printPrompt:
   441 00002D38 66813DE8D2FFFFFFFF  <1>     cmp word [promptPtr], -1
   442 00002D41 750B                <1>     jne .validPrompt
   443                              <1>     ;Here we print the default prompt
   444 00002D43 E8C7FEFFFF          <1>     call putCWDInPrompt
   445 00002D48 E8ADFEFFFF          <1>     call putGTinPrompt
   446                              <1>     return
    13                              <2> %%_ret:
    14 00002D4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   447                              <1> .validPrompt:
   448                              <1>     return
    13                              <2> %%_ret:
    14 00002D4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   449                              <1> 
   450                              <1> clearCommandState:
   451                              <1> ;Clears the command state
   452 00002D4F 488D3D5ED3FFFF      <1>     lea rdi, cmdStatePtr
   453 00002D56 B90E000000          <1>     mov ecx, cmdStateL
   454 00002D5B 31C0                <1>     xor eax, eax
   455 00002D5D F3AA                <1>     rep stosb
   456 00002D5F C7054FD3FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   456 00002D68 FF                  <1>
   457                              <1>     return
    13                              <2> %%_ret:
    14 00002D69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   458                              <1> 
   459                              <1> clearCommandLineState:
   460                              <1> ;Clears the command line state after a 0Dh encountered
   461 00002D6A 488D3D2ED3FFFF      <1>     lea rdi, cmdLineStatePtr
   462 00002D71 B923000000          <1>     mov ecx, cmdLineStateL
   463 00002D76 31C0                <1>     xor eax, eax
   464 00002D78 F3AA                <1>     rep stosb
   465 00002D7A C7052CD3FFFFFFFFFF- <1>     mov dword [pipeSTDIN], -1
   465 00002D83 FF                  <1>
   466 00002D84 C7052AD3FFFFFFFFFF- <1>     mov dword [redirSTDIN], -1
   466 00002D8D FF                  <1>
   467                              <1>     return
    13                              <2> %%_ret:
    14 00002D8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> asciiToFCB:
   470                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   471                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   472                              <1> ;Also doesn't check if chars are valid
   473                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   474                              <1> ;Name is space padded.
   475                              <1> ;Input: rsi = ASCII string buffer
   476                              <1> ;       rdi = FCB name buffer
   477                              <1> ;Output: al = Char that terminated the source string 
   478 00002D8F 53                  <1>     push rbx    
   479 00002D90 57                  <1>     push rdi
   480 00002D91 B90B000000          <1>     mov ecx, 11
   481 00002D96 B020                <1>     mov al, " "
   482 00002D98 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   483 00002D9A 5F                  <1>     pop rdi
   484 00002D9B 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   485 00002D9E EB1D                <1>     jmp short asciiFilenameToFCB.processName
   486                              <1> asciiFilenameToFCB:
   487                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   488                              <1> ;Don't uppercase any lowercase chars as this could be used with user buffers.
   489                              <1> ;Also doesn't check if chars are valid
   490                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   491                              <1> ;Name is space padded.
   492                              <1> ;Input: rsi = ASCII string buffer
   493                              <1> ;       rdi = FCB name buffer
   494                              <1> ;Output: al = Char that terminated the source string 
   495 00002DA0 53                  <1>     push rbx    
   496 00002DA1 57                  <1>     push rdi
   497 00002DA2 B90B000000          <1>     mov ecx, 11
   498 00002DA7 B020                <1>     mov al, " "
   499 00002DA9 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   500 00002DAB 5F                  <1>     pop rdi
   501 00002DAC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   502                              <1>     ;Preprocess for Dir Searches
   503 00002DAF 803E2E              <1>     cmp byte [rsi], "."
   504 00002DB2 7509                <1>     jne .processName
   505 00002DB4 A4                  <1>     movsb   ;Store the first dot
   506 00002DB5 803E2E              <1>     cmp byte [rsi], "."
   507 00002DB8 752C                <1>     jne .exitBadChar
   508 00002DBA A4                  <1>     movsb
   509 00002DBB EB29                <1>     jmp short .exitBadChar
   510                              <1> .processName:
   511 00002DBD AC                  <1>     lodsb   ;Get the char in al
   512 00002DBE 84C0                <1>     test al, al ;If the char is a null, must be at the end of the name
   513 00002DC0 7426                <1>     jz .exit
   514 00002DC2 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   515 00002DC4 7407                <1>     je .extSpace
   516 00002DC6 3C2E                <1>     cmp al, "."
   517 00002DC8 740C                <1>     je .ext
   518 00002DCA AA                  <1>     stosb   ;Store the char
   519 00002DCB EBF0                <1>     jmp short .processName
   520                              <1> .extSpace:
   521                              <1> ;Now we scan for a period in the name
   522 00002DCD AC                  <1>     lodsb   ;Get a char and increase rsi
   523 00002DCE 84C0                <1>     test al, al
   524 00002DD0 7416                <1>     jz .exit
   525 00002DD2 3C2E                <1>     cmp al, "."     ;If al is not a period...
   526 00002DD4 75F7                <1>     jne .extSpace   ; keep searching
   527                              <1> .ext:
   528 00002DD6 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   529                              <1> .processExt:
   530 00002DDA AC                  <1>     lodsb
   531 00002DDB 84C0                <1>     test al, al
   532 00002DDD 7409                <1>     jz .exit
   533 00002DDF 3C20                <1>     cmp al, " "
   534 00002DE1 7405                <1>     je .exit
   535 00002DE3 AA                  <1>     stosb
   536 00002DE4 EBF4                <1>     jmp short .processExt
   537                              <1> .exitBadChar:
   538 00002DE6 30C0                <1>     xor al, al  ;Return a null terminator
   539                              <1> .exit:
   540 00002DE8 5B                  <1>     pop rbx
   541                              <1>     return
    13                              <2> %%_ret:
    14 00002DE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> FCBToAsciiz:
   544                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   545                              <1> ;Name is space padded too
   546                              <1> ;Input: rsi = FCB name buffer
   547                              <1> ;       rdi = ASCIIZ string buffer
   548 00002DEA B908000000          <1>     mov ecx, 8
   549 00002DEF F3A4                <1>     rep movsb   ;Move the name over
   550                              <1> .scanNameSpace:
   551 00002DF1 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   552 00002DF5 750D                <1>     jne .ext
   553 00002DF7 48FFCF              <1>     dec rdi
   554 00002DFA FFC1                <1>     inc ecx
   555 00002DFC 81F908000000        <1>     cmp ecx, 8
   556 00002E02 72ED                <1>     jb .scanNameSpace
   557                              <1> .ext:
   558 00002E04 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   559 00002E09 7506                <1>     jne .validExt
   560 00002E0B 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   561 00002E0F 7415                <1>     je .exit
   562                              <1> .validExt:
   563 00002E11 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   564 00002E13 AA                  <1>     stosb
   565 00002E14 B903000000          <1>     mov ecx, 3
   566 00002E19 F3A4                <1>     rep movsb   ;Move the three extension chars over
   567                              <1> .scanExtSpace:
   568 00002E1B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   569 00002E1F 7505                <1>     jne .exit
   570 00002E21 48FFCF              <1>     dec rdi
   571 00002E24 EBF5                <1>     jmp short .scanExtSpace
   572                              <1> .exit:
   573 00002E26 31C0                <1>     xor eax, eax
   574 00002E28 AA                  <1>     stosb   ;Store a null at the end
   575                              <1>     return
    13                              <2> %%_ret:
    14 00002E29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> 
   577                              <1> buildCommandPath:
   578                              <1> ;Based on the first argument on the command line
   579                              <1> ; will build a full ASCIIZ path in searchSpec to the file/dir specified
   580                              <1>     ;If this is a relative path, will handle correctly (tho unnecessary)
   581 00002E2A 0FB6058CD2FFFF      <1>     movzx eax, byte [arg1Off]
   582 00002E31 488D35E5D3FFFF      <1>     lea rsi, cmdBuffer
   583 00002E38 4801C6              <1>     add rsi, rax    ;Go to the start of the command
   584 00002E3B 488D3D1CD6FFFF      <1>     lea rdi, searchSpec
   585                              <1> .buildPath:
   586 00002E42 E86FE8FFFF          <1>     call copyCommandTailItem    ;Terminates with a 0 for free
   587 00002E47 F8                  <1>     clc ;I dont care if i encounter an embedded CR rn
   588                              <1>     return
    13                              <2> %%_ret:
    14 00002E48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1>     
   590                              <1> printDecimalWord:
   591                              <1> ;Takes qword in rax and print it's decimal representation
   592                              <1> ;Takes the qword in eax and prints its decimal representation
   593 00002E49 31C9                <1>     xor ecx, ecx
   594 00002E4B 31DB                <1>     xor ebx, ebx    ;Store upper 8 nybbles here
   595 00002E4D 85C0                <1>     test eax, eax
   596 00002E4F 750C                <1>     jnz .notZero
   597 00002E51 B930000000          <1>     mov ecx, "0"
   598 00002E56 BD01000000          <1>     mov ebp, 1  ;Print one digit
   599 00002E5B EB3E                <1>     jmp short .dpfb2
   600                              <1> .notZero:
   601 00002E5D 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   602 00002E5F BE0A000000          <1>     mov esi, 0Ah  ;Divide by 10
   603                              <1> .dpfb0:
   604 00002E64 FFC5                <1>     inc ebp
   605 00002E66 81FD08000000        <1>     cmp ebp, 8
   606 00002E6C 7206                <1>     jb .dpfb00
   607 00002E6E 48C1E308            <1>     shl rbx, 8    ;Space for next nybble
   608 00002E72 EB04                <1>     jmp short .dpfb01
   609                              <1> .dpfb00:
   610 00002E74 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   611                              <1> .dpfb01:
   612 00002E78 31D2                <1>     xor edx, edx
   613 00002E7A 48F7F6              <1>     div rsi
   614 00002E7D 80C230              <1>     add dl, '0'
   615 00002E80 80FA39              <1>     cmp dl, '9'
   616 00002E83 7603                <1>     jbe .dpfb1
   617 00002E85 80C207              <1>     add dl, 'A'-'0'-10
   618                              <1> .dpfb1:
   619 00002E88 81FD08000000        <1>     cmp ebp, 8
   620 00002E8E 7204                <1>     jb .dpfb10
   621 00002E90 88D3                <1>     mov bl, dl ;Add the bottom bits
   622 00002E92 EB02                <1>     jmp short .dpfb11
   623                              <1> .dpfb10:
   624 00002E94 88D1                <1>     mov cl, dl    ;Save remainder byte
   625                              <1> .dpfb11:
   626 00002E96 4885C0              <1>     test rax, rax
   627 00002E99 75C9                <1>     jnz .dpfb0
   628                              <1> .dpfb2:
   629 00002E9B 81FD08000000        <1>     cmp ebp, 8
   630 00002EA1 7208                <1>     jb .dpfb20
   631 00002EA3 88DA                <1>     mov dl, bl
   632 00002EA5 48C1EB08            <1>     shr rbx, 8
   633 00002EA9 EB06                <1>     jmp short .dpfb21
   634                              <1> .dpfb20:
   635 00002EAB 88CA                <1>     mov dl, cl    ;Get most sig digit into al
   636 00002EAD 48C1E908            <1>     shr rcx, 8    ;Get next digit down
   637                              <1> .dpfb21:
   638 00002EB1 B402                <1>     mov ah, 02h
   639 00002EB3 CD21                <1>     int 21h
   640 00002EB5 FFCD                <1>     dec ebp
   641 00002EB7 75E2                <1>     jnz .dpfb2
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002EB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> 
   644                              <1> getDecimalWord:
   645                              <1> ;Works on MAX A dword in eax
   646                              <1> ;Gets the decimalised DWORD to print in rcx (at most 8 digits)
   647 00002EBA 31C9                <1>     xor ecx, ecx
   648 00002EBC 31ED                <1>     xor ebp, ebp  ;Use bp as #of digits counter
   649 00002EBE BB0A000000          <1>     mov ebx, 0Ah  ;Divide by 10
   650                              <1> .dpfb0:
   651 00002EC3 FFC5                <1>     inc ebp
   652 00002EC5 48C1E108            <1>     shl rcx, 8    ;Space for next nybble
   653 00002EC9 31D2                <1>     xor edx, edx
   654 00002ECB 48F7F3              <1>     div rbx
   655 00002ECE 80C230              <1>     add dl, '0'
   656 00002ED1 80FA39              <1>     cmp dl, '9'
   657 00002ED4 7603                <1>     jbe .dpfb1
   658 00002ED6 80C207              <1>     add dl, 'A'-'0'-10
   659                              <1> .dpfb1:
   660 00002ED9 88D1                <1>     mov cl, dl    ;Save remainder byte
   661 00002EDB 4885C0              <1>     test rax, rax
   662 00002EDE 75E3                <1>     jnz .dpfb0
   663                              <1>     return
    13                              <2> %%_ret:
    14 00002EE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   664                              <1> 
   665                              <1> freezePC:
   666 00002EE1 488D15B0DEFFFF      <1>     lea rdx, memBad1
   667 00002EE8 B409                <1>     mov ah, 09h
   668 00002EEA CD21                <1>     int 21h
   669                              <1> .altEP:
   670 00002EEC 488D15CEDEFFFF      <1>     lea rdx, memBad3
   671 00002EF3 B409                <1>     mov ah, 09h
   672 00002EF5 CD21                <1>     int 21h
   673                              <1> .lp:
   674 00002EF7 F390                <1>     pause
   675 00002EF9 F4                  <1>     hlt
   676 00002EFA EBFB                <1>     jmp short .lp
   677                              <1> 
   678                              <1> getFilenamePtrFromFilespec:
   679                              <1> ;Gets a pointer to the first char of a filename from a asciiz pathspec
   680                              <1> ;Input: rsi = Pathspec to search
   681                              <1> ;Output: rsi = Points to the first char of the filename
   682 00002EFC 4889F3              <1>     mov rbx, rsi
   683 00002EFF 31C0                <1>     xor eax, eax
   684 00002F01 4889F7              <1>     mov rdi, rsi    ;Go to the source string 
   685 00002F04 E8B2FDFFFF          <1>     call strlen     ;Get it's length
   686 00002F09 FFC9                <1>     dec ecx ;Dont include terminating null
   687 00002F0B 741F                <1>     jz .exitBad ;Was the string of length zero? Exit bad if so
   688 00002F0D 4801CE              <1>     add rsi, rcx    ;Goto last char in path (not null)
   689                              <1> .lp:
   690 00002F10 4839F3              <1>     cmp rbx, rsi    ;Is rdi pointing to the start of the string?
   691                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3>  %ifdef retOff
    22                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <3>  %ifdef currSegVBase
    24                              <3>  j%+1 short (retOff+currSegVBase)
    25                              <3>  %else
    26 00002F13 74(E0)              <3>  j%+1 short retOff
    27                              <3>  %endif
    28                              <3>  %else
    29                              <3>  j%-1 short %%a
    30                              <3>  return
    31                              <3> %%a:
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
   692 00002F15 8A06                <1>     mov al, byte [rsi]  ;Get the char we currently are at
   693 00002F17 3C3A                <1>     cmp al, ":" ;X: ?
   694 00002F19 740D                <1>     je .pointFilename
   695 00002F1B 3A050AD1FFFF        <1>     cmp al, byte [pathSep]  ;Is al pathSep?
   696 00002F21 7405                <1>     je .pointFilename
   697 00002F23 48FFCE              <1>     dec rsi ;Not a terminator, go back a char
   698 00002F26 EBE8                <1>     jmp short .lp
   699                              <1> .pointFilename:
   700 00002F28 48FFC6              <1>     inc rsi ;Now point to the first char of the pathname
   701                              <1>     return
    13                              <2> %%_ret:
    14 00002F2B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   702                              <1> .exitBad:
   703 00002F2C F9                  <1>     stc
   704                              <1> .exit:
   705                              <1>     return
    13                              <2> %%_ret:
    14 00002F2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   706                              <1> 
   707                              <1> 
   708                              <1> copyArgumentToSearchSpec:
   709                              <1> ;Works similarly to the build searchpath but is simpler
   710                              <1> ;Null terminates
   711 00002F2E 488D3D29D5FFFF      <1>     lea rdi, searchSpec
   712                              <1> .copyPath:
   713 00002F35 AC                  <1>     lodsb
   714 00002F36 E8E7FDFFFF          <1>     call isALEndOfCommand
   715 00002F3B 740A                <1>     jz .finishCopy
   716 00002F3D E8BDFDFFFF          <1>     call isALterminator
   717 00002F42 7403                <1>     jz .finishCopy
   718 00002F44 AA                  <1>     stosb
   719 00002F45 EBEE                <1>     jmp short .copyPath
   720                              <1> .finishCopy:
   721 00002F47 31C0                <1>     xor eax, eax
   722 00002F49 AA                  <1>     stosb
   723                              <1>     return
    13                              <2> %%_ret:
    14 00002F4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   724                              <1> 
   725                              <1> setDTA:
   726 00002F4B 50                  <1>     push rax
   727 00002F4C 52                  <1>     push rdx
   728 00002F4D 488D157ED1FFFF      <1>     lea rdx, cmdFFBlock     ;Use this as the DTA for this request
   729 00002F54 B8001A0000          <1>     mov eax, 1A00h
   730 00002F59 CD21                <1>     int 21h
   731 00002F5B 5A                  <1>     pop rdx
   732 00002F5C 58                  <1>     pop rax
   733                              <1>     return
    13                              <2> %%_ret:
    14 00002F5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                                  %include "./Source/int24h.asm"
     1                              <1> critErrorHandler:   ;Int 24h
     2                              <1> ;User Stack in usage here, must be swapped to before this is called
     3                              <1> ;Entered with:  
     4                              <1> ;               AH = Critical Error Bitfield
     5                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
     6                              <1> ;               Bit 6 - Reserved
     7                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
     8                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
     9                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    10                              <1> ;               Bits [2-1] = Affected Disk Error
    11                              <1> ;                     0 0   DOS area
    12                              <1> ;                     0 1   FAT area
    13                              <1> ;                     1 0   Directory area
    14                              <1> ;                     1 1   Data area
    15                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    16                              <1> ;               AL  = Failing drive number if AH[7] = 0
    17                              <1> ;               DIL = Error code for errorMsg
    18                              <1> ;               RSI = EA of Device Header for which device the error occured
    19                              <1> ;Return:
    20                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    21                              <1> ;                  = 1 - Retry the Operation    (Retry)
    22                              <1> ;                  = 2 - Terminate the Program  (Abort)
    23                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    24 00002F5E 53                  <1>     push rbx
    25 00002F5F 51                  <1>     push rcx
    26 00002F60 52                  <1>     push rdx
    27 00002F61 57                  <1>     push rdi
    28 00002F62 56                  <1>     push rsi
    29 00002F63 FC                  <1>     cld         ;Make String ops go forward
    30                              <1> 
    31 00002F64 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    32 00002F67 488D15DFD8FFFF      <1>     lea rdx, crlf
    33 00002F6E B409                <1>     mov ah, 09h ;Print String
    34 00002F70 CD21                <1>     int 21h
    35                              <1> 
    36 00002F72 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    37 00002F78 B90C000000          <1>     mov ecx, 0Ch
    38 00002F7D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    39 00002F7F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    40 00002F82 480FB7FF            <1>     movzx rdi, di
    41 00002F86 4889FA              <1>     mov rdx, rdi    ;Copy error code
    42 00002F89 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    43 00002F8D 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    44 00002F90 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    45 00002F93 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    46 00002F9A 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    47 00002F9E B409                <1>     mov ah, 09h ;Print String
    48 00002FA0 CD21                <1>     int 21h     ;Call DOS to print first part of message
    49                              <1> 
    50 00002FA2 488D1505020000      <1>     lea rdx, qword [.readmsg]
    51 00002FA9 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    52 00002FB0 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    53 00002FB3 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    54 00002FB7 B409                <1>     mov ah, 09h ;Print String
    55 00002FB9 CD21                <1>     int 21h     ;Call DOS to print error reading/writing portion
    56                              <1> 
    57 00002FBB F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    58 00002FBE 0F85DF000000        <1>     jnz .charError
    59                              <1> ;Disk error continues here
    60 00002FC4 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    61 00002FCB B409                <1>     mov ah, 09h
    62 00002FCD CD21                <1>     int 21h
    63 00002FCF 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    64 00002FD1 80C241              <1>     add dl, "A" ;Add ASCII code
    65 00002FD4 B402                <1>     mov ah, 02h ;Print char in dl
    66 00002FD6 CD21                <1>     int 21h
    67                              <1> .userInput:
    68 00002FD8 488D156ED8FFFF      <1>     lea rdx, crlf  ;Print new line
    69 00002FDF B409                <1>     mov ah, 09h
    70 00002FE1 CD21                <1>     int 21h
    71                              <1> ;Abort, Retry, Ignore, Fail is word order
    72                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    73                              <1> .userAbort:
    74                              <1> ;Abort is always an option
    75 00002FE3 488D15E2010000      <1>     lea rdx, qword [.abortmsg]
    76 00002FEA B409                <1>     mov ah, 09h
    77 00002FEC CD21                <1>     int 21h ;Call DOS to prompt user for ABORT option
    78                              <1> .userRetry:
    79 00002FEE F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
    80 00002FF1 7416                <1>     jz .userIgnore    ;If clear, dont print message
    81 00002FF3 488D15EA010000      <1>     lea rdx, qword [.betweenMsg]
    82 00002FFA B409                <1>     mov ah, 09h
    83 00002FFC CD21                <1>     int 21h
    84 00002FFE 488D15D4010000      <1>     lea rdx, qword [.retrymsg]
    85 00003005 B409                <1>     mov ah, 09h
    86 00003007 CD21                <1>     int 21h
    87                              <1> .userIgnore:
    88 00003009 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
    89 0000300C 7416                <1>     jz .userFail
    90 0000300E 488D15CF010000      <1>     lea rdx, qword [.betweenMsg]
    91 00003015 B409                <1>     mov ah, 09h
    92 00003017 CD21                <1>     int 21h
    93 00003019 488D15B2010000      <1>     lea rdx, qword [.ignoremsg]
    94 00003020 B409                <1>     mov ah, 09h
    95 00003022 CD21                <1>     int 21h
    96                              <1> .userFail:
    97 00003024 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
    98 00003027 7416                <1>     jz .userMsgEnd
    99 00003029 488D15B4010000      <1>     lea rdx, qword [.betweenMsg]
   100 00003030 B409                <1>     mov ah, 09h
   101 00003032 CD21                <1>     int 21h
   102 00003034 488D15A4010000      <1>     lea rdx, qword [.failmsg]
   103 0000303B B409                <1>     mov ah, 09h
   104 0000303D CD21                <1>     int 21h
   105                              <1> .userMsgEnd:
   106 0000303F 488D15A1010000      <1>     lea rdx, qword [.endMsg]
   107 00003046 B409                <1>     mov ah, 09h
   108 00003048 CD21                <1>     int 21h
   109                              <1> ;Get user input now 
   110 0000304A 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   111 0000304C 488D3D97010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   112 00003053 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   113 00003055 CD21                <1>     int 21h ;Get char in al
   114 00003057 3C61                <1>     cmp al, "a" ;Chack if lowercase
   115 00003059 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   116 0000305B 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   117                              <1> .uip1:
   118 0000305D AE                  <1>     scasb   ;Compare char to list, offset gives return code
   119 0000305E 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   120 00003060 FFC1                <1>     inc ecx
   121 00003062 81F904000000        <1>     cmp ecx, 4
   122 00003068 75F3                <1>     jne .uip1
   123 0000306A E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   124                              <1> .validInput:
   125 0000306F 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   126                              <1> ;Now check if the input is permitted
   127 00003071 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   128 00003073 7427                <1>     je .cehExit
   129 00003075 84C0                <1>     test al, al ;Check if 0 => Ignore
   130 00003077 740F                <1>     je .viIgnore
   131 00003079 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   132 0000307B 7416                <1>     je .viRetry
   133                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   134 0000307D F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   135 00003080 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   136 00003086 EB14                <1>     jmp short .cehExit
   137                              <1> .viIgnore:
   138 00003088 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   139 0000308B 0F8447FFFFFF        <1>     jz .userInput
   140 00003091 EB09                <1>     jmp short .cehExit
   141                              <1> .viRetry:
   142 00003093 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   143 00003096 0F843CFFFFFF        <1>     jz .userInput
   144                              <1> .cehExit:
   145 0000309C 5E                  <1>     pop rsi
   146 0000309D 5F                  <1>     pop rdi
   147 0000309E 5A                  <1>     pop rdx
   148 0000309F 59                  <1>     pop rcx
   149 000030A0 5B                  <1>     pop rbx
   150 000030A1 48CF                <1>     iretq
   151                              <1> .charError:
   152 000030A3 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   153 000030A8 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   154                              <1> .ce1:
   155 000030AF AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   156 000030B0 88C2                <1>     mov dl, al  ;Move char into dl
   157 000030B2 B402                <1>     mov ah, 02h
   158 000030B4 CD21                <1>     int 21h ;Print char
   159 000030B6 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   160 000030B8 E91BFFFFFF          <1>     jmp .userInput
   161                              <1> 
   162                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   163 000030BD 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   163 000030C6 746563742024202020  <1>
   164 000030CF 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   164 000030D8 6E6974202420202020  <1>
   165 000030E1 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   165 000030EA 202420202020202020  <1>
   166 000030F3 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   166 000030FC 6F6D6D616E64202420  <1>
   167 00003105 446174612024202020- <1>             db "Data $            "       ;Error 4
   167 0000310E 202020202020202020  <1>
   168 00003117 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   168 00003120 737420242020202020  <1>
   169 00003129 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   169 00003132 202020202020202020  <1>
   170 0000313B 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   170 00003144 656469612024202020  <1>
   171 0000314D 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   171 00003156 7420466F756E642024  <1>
   172 0000315F 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   172 00003168 706572202420202020  <1>
   173 00003171 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   173 0000317A 6C7420242020202020  <1>
   174 00003183 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   174 0000318C 742024202020202020  <1>
   175 00003195 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   175 0000319E 61696C757265202420  <1>
   176                              <1> 
   177 000031A7 64726976652024      <1> .drive      db "drive $"
   178 000031AE 6572726F7220726561- <1> .readmsg    db "error reading $"
   178 000031B7 64696E672024        <1>
   179 000031BD 6572726F7220777269- <1> .writemsg   db "error writing $"
   179 000031C6 74696E672024        <1>
   180 000031CC 41626F727424        <1> .abortmsg   db "Abort$" 
   181 000031D2 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   182 000031D9 526574727924        <1> .retrymsg   db "Retry$"
   183 000031DF 4661696C24          <1> .failmsg    db "Fail$"
   184 000031E4 2C2024              <1> .betweenMsg db ", $"
   185 000031E7 3F2024              <1> .endMsg     db "? $"
   186 000031EA 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
   187                              <1> 
   188                              <1> int23h:
   189 000031EE F60538CEFFFFFF      <1>     test byte [permaSwitch], -1
   190 000031F5 7516                <1>     jnz .exit   ;If this is non-zero, just exit as normal
   191                              <1>     ;Else, we juggle parent PSP's
   192 000031F7 50                  <1>     push rax
   193 000031F8 53                  <1>     push rbx
   194 000031F9 488B0517CEFFFF      <1>     mov rax, qword [realParent]
   195 00003200 488B1D08CEFFFF      <1>     mov rbx, qword [pspPtr]
   196 00003207 48894322            <1>     mov qword [rbx + psp.parentPtr], rax    ;Store the parent there
   197 0000320B 5B                  <1>     pop rbx
   198 0000320C 58                  <1>     pop rax
   199                              <1> .exit:
   200 0000320D F9                  <1>     stc     ;Set CF to kill the task
   201 0000320E C20800              <1>     ret 8   ;Return and pop CS off the stack to indicate we wanna kill task
    19                                  
    20                                  endOfAllocNoMaster: ;End of alloc if not the master cmd
    21                                  %include "./Data/cmdEnv.asm"
     1                              <1>     
     2                              <1> masterEnv:  ;Yeet this is this is a child command processor, length 168 chars!
     3                              <1> ;Note this environment DOES NOT contain the full path to the program being launched
     4 00003211 504154483D00        <1>     db "PATH=",0
     5 00003217 434F4D535045433D    <1>     db "COMSPEC="
     6                              <1> .cspec: 
     7 0000321F 5F3A5C434F4D4D414E- <1>     db "_:\COMMAND.COM", 0
     7 00003228 442E434F4D00        <1>
     8 0000322E 202020202020202020- <1>     db (165 - ($ - masterEnv)) dup (" ")    ;Pad the environment with spaces
     8 00003237 202020202020202020- <1>
     8 00003240 202020202020202020- <1>
     8 00003249 202020202020202020- <1>
     8 00003252 202020202020202020- <1>
     8 0000325B 202020202020202020- <1>
     8 00003264 202020202020202020- <1>
     8 0000326D 202020202020202020- <1>
     8 00003276 202020202020202020- <1>
     8 0000327F 202020202020202020- <1>
     8 00003288 202020202020202020- <1>
     8 00003291 202020202020202020- <1>
     8 0000329A 202020202020202020- <1>
     8 000032A3 202020202020202020- <1>
     8 000032AC 202020202020202020- <1>
     8 000032B5 20                  <1>
     9 000032B6 0000                <1>     dw 0    ;End of environment marker
    22                                  endOfAlloc: ;End of alloc if the master cmd
    23                                  ;The stack is always setup one stackSize away from the endOfAlloc, aligned to
    24                                  Segment transient align=1 follows=.data
    25                                  ;This segment always gets ejected post load
    26                                  %include "./Source/cmdLdr.asm"
     1                              <1> cmdLdr:
     2                              <1> ;First check if the version is ok. If not, return.
     3 00000000 B430                <1>     mov ah, 30h
     4 00000002 CD21                <1>     int 21h
     5 00000004 3C01                <1>     cmp al, 01h ;Version 1
     6 00000006 760D                <1>     jbe .okVersion
     7 00000008 488D15ED010000      <1>     lea rdx, badVerStr
     8 0000000F B409                <1>     mov ah, 09h
     9 00000011 CD21                <1>     int 21h
    10 00000013 CD20                <1>     int 20h ;Exit to caller or DOS to print bad command interpreter line
    11                              <1> .okVersion:
    12                              <1> ;If ok then store self as parent in the PSP, to prevent accidental closure
    13 00000015 4C8905(0F000000)    <1>     mov qword [pspPtr], r8  ;Store PSP ptr in internal var 
    14 0000001C 498B4022            <1>     mov rax, qword [r8 + psp.parentPtr] ;Get PSP parent
    15 00000020 4D894022            <1>     mov qword [r8 + psp.parentPtr], r8  ;Store self as parent
    16 00000024 488905(17000000)    <1>     mov qword [realParent], rax ;Preserve the real parent address
    17                              <1> ;Setup Int 22h, Int 23h and Int 24h
    18 0000002B 498B400A            <1>     mov rax, qword [r8 + psp.oldInt22h] ;Preserve the original addresses
    19 0000002F 488905(2E000000)    <1>     mov qword [parentInt22], rax
    20                              <1> 
    21 00000036 488D15(5E2F0000)    <1>     lea rdx, critErrorHandler
    22 0000003D 4989501A            <1>     mov qword [r8 + psp.oldInt24h], rdx
    23 00000041 B824250000          <1>     mov eax, 2524h
    24 00000046 CD21                <1>     int 21h
    25 00000048 488D15(EE310000)    <1>     lea rdx, int23h
    26 0000004F 49895012            <1>     mov qword [r8 + psp.oldInt23h], rdx
    27 00000053 B823250000          <1>     mov eax, 2523h
    28 00000058 CD21                <1>     int 21h
    29 0000005A 488D15(5F0E0000)    <1>     lea rdx, applicationReturn
    30 00000061 4989500A            <1>     mov qword [r8 + psp.oldInt22h], rdx
    31 00000065 B822250000          <1>     mov eax, 2522h
    32 0000006A CD21                <1>     int 21h
    33                              <1> ;Get a pointer to DOS Sysvars
    34 0000006C B452                <1>     mov ah, 52h ;Get sysvars
    35 0000006E CD21                <1>     int 21h
    36 00000070 48891D(1F000000)    <1>     mov qword [sysVars], rbx    ;Save ptr to sysVars
    37                              <1> ;Call for simple internationalisation data
    38 00000077 B800370000          <1>     mov eax, 3700h  ;Get switchchar in dl
    39 0000007C CD21                <1>     int 21h
    40 0000007E 3CFF                <1>     cmp al, -1
    41 00000080 7412                <1>     je .skipSwitch
    42 00000082 8815(2C000000)      <1>     mov byte [switchChar], dl   ;Store the switchChar in var
    43 00000088 80FA2D              <1>     cmp dl, "-" ;Is the switchChar Unix?
    44 0000008B 7507                <1>     jne .skipSwitch
    45 0000008D C605(2B000000)2F    <1>     mov byte [pathSep], "/" ;Swap default path separator to UNIX style
    46                              <1> .skipSwitch:
    47 00000094 B800380000          <1>     mov eax, 3800h  ;Get current country data
    48 00000099 488D15(36000000)    <1>     lea rdx, ctryData
    49 000000A0 CD21                <1>     int 21h ;Write the data to the internal country table
    50                              <1> ;Now determine if this is the master copy of COMMAND.COM
    51                              <1> ;Check if Int 2Eh has the same address as Int 2Dh. If so, we are master.
    52 000000A2 B82E350000          <1>     mov eax, 352Eh  ;Get int 2Eh address
    53 000000A7 CD21                <1>     int 21h
    54 000000A9 4889DA              <1>     mov rdx, rbx    ;Save the pointer in rdx
    55 000000AC B82D350000          <1>     mov eax, 352Dh  ;Get int 2Dh address
    56 000000B1 CD21                <1>     int 21h
    57 000000B3 4839DA              <1>     cmp rdx, rbx    ;If these are equal then this is first boot!
    58 000000B6 755C                <1>     jne .skipMaster
    59                              <1> ;Ok so we are master command.com
    60                              <1> ;Now make myself the real parent
    61 000000B8 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    62 000000BF 4C8905(17000000)    <1>     mov qword [realParent], r8
    63                              <1> ;Set master environment as mine
    64 000000C6 488D05(11320000)    <1>     lea rax, masterEnv
    65 000000CD 4989403E            <1>     mov qword [r8 + psp.envPtr], rax
    66                              <1> ;Set current Drive in COMSPEC
    67 000000D1 B019                <1>     mov al, 19h ;Get current Drive
    68 000000D3 CD21                <1>     int 21h
    69 000000D5 0441                <1>     add al, "A"
    70 000000D7 8805(1F320000)      <1>     mov byte [masterEnv.cspec], al
    71                              <1> ;Set Int 2Eh up
    72 000000DD 488D15(FC160000)    <1>     lea rdx, int2Eh
    73 000000E4 B82E250000          <1>     mov eax, 252Eh ;Set this as Int 2Eh
    74 000000E9 CD21                <1>     int 21h
    75                              <1> ;Now, open and parse AUTOEXEC.BAT. Build Master Environment here
    76                              <1> ;If no AUTOEXEC.BAT, request time and date from user
    77 000000EB 488D15(4D080000)    <1>     lea rdx, crlf
    78 000000F2 B409                <1>     mov ah, 09h
    79 000000F4 CD21                <1>     int 21h
    80 000000F6 E8(2A1F0000)        <1>     call time
    81 000000FB E8(611E0000)        <1>     call date
    82 00000100 488D15(4D080000)    <1>     lea rdx, crlf
    83 00000107 B409                <1>     mov ah, 09h
    84 00000109 CD21                <1>     int 21h
    85 0000010B 488D1D(B8320000)    <1>     lea rbx, endOfAlloc ;Save the Master Environment
    86 00000112 EB32                <1>     jmp short .printInit
    87                              <1> .skipMaster:
    88 00000114 498DB881000000      <1>     lea rdi, qword [r8 + psp.progTail]
    89 0000011B 410FB68880000000    <1>     movzx ecx, byte [r8 + psp.parmList]
    90 00000123 0FB605(2C000000)    <1>     movzx eax, byte [switchChar]
    91 0000012A F2AE                <1>     repne scasb
    92 0000012C 67E310              <1>     jecxz .noSwitches
    93 0000012F 0FB607              <1>     movzx eax, byte [rdi]   ;RDI points to the char after the switch
    94 00000132 24DF                <1>     and al, 0DFh    ;Convert to UC
    95 00000134 3C50                <1>     cmp al, "P" ;Is it permanent switch?
    96 00000136 7507                <1>     jne .noSwitches
    97 00000138 C605(2D000000)FF    <1>     mov byte [permaSwitch], -1  ;Set the permanently resident switch on
    98                              <1> .noSwitches:
    99 0000013F 488D1D(11320000)    <1>     lea rbx, endOfAllocNoMaster  ;This is the base address to jettison
   100                              <1> .printInit:
   101                              <1> ;Finish by printing INIT string.
   102 00000146 53                  <1>     push rbx
   103 00000147 488D153A000000      <1>     lea rdx, initString
   104 0000014E B409                <1>     mov ah, 09h
   105 00000150 CD21                <1>     int 21h ;Print init string
   106 00000152 E8(28260000)        <1>     call version.printVersionNumber
   107 00000157 488D1560000000      <1>     lea rdx, initString2
   108 0000015E B409                <1>     mov ah, 09h
   109 00000160 CD21                <1>     int 21h ;Print init string
   110 00000162 5B                  <1>     pop rbx
   111                              <1>     ;Now we add the stack to the alloc and paragraph align
   112 00000163 4881C340060000      <1>     add rbx, stackSize
   113 0000016A 4881C311000000      <1>     add rbx, 11h    ;Go one para up
   114 00000171 48C1EB04            <1>     shr rbx, 4      ;Round to this new para boundary
   115 00000175 48C1E304            <1>     shl rbx, 4
   116 00000179 4889DC              <1>     mov rsp, rbx    ;Move the stack pointer to this address
   117 0000017C 48891D(05000000)    <1>     mov qword [stackTop], rbx   ;Save this value of the stack ptr in var
   118 00000183 E9(4C0E0000)        <1>     jmp commandStart    ;We jump with rbx = base address to jettison
   119                              <1> ;Loader Data here
   120                              <1> initString: 
   121 00000188 0D0A536369656E7469- <1>     db CR,LF,"Scientific Computer Research(R) SCP/DOS(R) Version $"
   121 00000191 66696320436F6D7075- <1>
   121 0000019A 746572205265736561- <1>
   121 000001A3 726368285229205343- <1>
   121 000001AC 502F444F5328522920- <1>
   121 000001B5 56657273696F6E2024  <1>
   122                              <1> initString2:
   123 000001BE 0D0A20202020202020- <1>     db CR,LF, "          (C)Copyright Scientific Computer Reserach 2022.",CR,LF,"$"
   123 000001C7 202020284329436F70- <1>
   123 000001D0 797269676874205363- <1>
   123 000001D9 69656E746966696320- <1>
   123 000001E2 436F6D707574657220- <1>
   123 000001EB 526573657261636820- <1>
   123 000001F4 323032322E0D0A24    <1>
   124 000001FC 496E636F7272656374- <1> badVerStr: db "Incorrect DOS version",CR,LF,"$"
   124 00000205 20444F532076657273- <1>
   124 0000020E 696F6E0D0A24        <1>
    27                                  
    28                                  stackSize equ 200*8    ;200 QWORD stack
    28          ------------------       info: assembly required 1+3+2 passes

